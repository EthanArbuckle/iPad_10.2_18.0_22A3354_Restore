void sub_100006758(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), (_QWORD)v8));
        objc_msgSend(v7, "clientEnteredForegroundState:", *(_QWORD *)(a1 + 40));

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

}

uint64_t shouldNotCheckApplicationState(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (v1)
  {
    if (qword_100318088 != -1)
      dispatch_once(&qword_100318088, &stru_1002C3E80);
    v2 = (uint64_t)objc_msgSend((id)qword_100318080, "containsObject:", v1);
  }
  else
  {
    v2 = 1;
  }

  return v2;
}

void sub_100006994(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  int8x16_t v27;
  id v28;
  _QWORD v29[4];
  int8x16_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];

  v5 = a2;
  v6 = a3;
  if (v6 || !objc_msgSend(v5, "count"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setError:", v6);
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v28 = v5;
    v7 = v5;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v33 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v12, "friendCodeState") == (id)3
            && (v13 = *(void **)(a1 + 40),
                v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "creatorPlayerID")),
                LOBYTE(v13) = objc_msgSend(v13, "containsObject:", v14),
                v14,
                (v13 & 1) == 0))
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "creatorPlayer"));
            v19 = *(void **)(a1 + 48);
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "friendCode"));
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v20));
            objc_msgSend(v17, "setInboxEntry:", v21);

            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "inboxEntry"));
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "contactID"));
            objc_msgSend(v17, "setIsInContacts:", objc_msgSend(v23, "length") != 0);

            v24 = *(void **)(a1 + 56);
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "playerID"));
            objc_msgSend(v24, "setObject:forKeyedSubscript:", v17, v18);
          }
          else
          {
            v15 = *(void **)(a1 + 64);
            v16 = *(void **)(a1 + 48);
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "friendCode"));
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v17));
            objc_msgSend(v15, "addObject:", v18);
          }

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      }
      while (v9);
    }

    v5 = v28;
    if (objc_msgSend(*(id *)(a1 + 64), "count"))
    {
      v25 = *(void **)(a1 + 32);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10003C364;
      v29[3] = &unk_1002BBCC8;
      v27 = *(int8x16_t *)(a1 + 64);
      v26 = (id)v27.i64[0];
      v30 = vextq_s8(v27, v27, 8uLL);
      v31 = *(_QWORD *)(a1 + 88);
      objc_msgSend(v25, "perform:", v29);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();

}

void sub_10000725C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000073A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10003515C();
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKScopedIDs makePlayerIDtoScopedIDsDictFromScopedIDs:](GKScopedIDs, "makePlayerIDtoScopedIDsDictFromScopedIDs:", v5));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("playerIDtoScopedIDs"));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100007668(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int buf, __int128 a16, void *a17)
{
  id v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;

  if (a2)
  {
    if (a2 == 2)
    {
      v17 = objc_begin_catch(a1);
      v18 = v17;
      if (!os_log_GKGeneral)
        v19 = (id)GKOSLoggers(v17);
      v20 = os_log_GKError;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
        buf = 138412802;
        WORD2(a16) = 2112;
        *(_QWORD *)((char *)&a16 + 6) = v18;
        HIWORD(a16) = 2112;
        a17 = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CAUGHT EXCEPTION DURING SAVE(%@): %@ at %@", (uint8_t *)&buf, 0x20u);

      }
      objc_end_catch();
      JUMPOUT(0x100007630);
    }
    objc_begin_catch(a1);
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

uint64_t applicationStateForProcessState(void *a1)
{
  id v1;
  void *v2;
  unsigned int v3;
  uint64_t result;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "endowmentNamespaces"));
  v3 = objc_msgSend(v2, "containsObject:", FBSSceneVisibilityEndowmentNamespace);

  LODWORD(v2) = objc_msgSend(v1, "taskState");
  switch((int)v2)
  {
    case 1:
      result = 1;
      break;
    case 2:
    case 4:
      if (v3)
        result = 8;
      else
        result = 4;
      break;
    case 3:
      result = 2;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void sub_10000786C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  char v11;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playersByFamiliarity:](GKPlayerProfileCacheObject, "playersByFamiliarity:", *(_QWORD *)(a1 + 32)));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10000C7C4;
  v6[3] = &unk_1002BC9B8;
  v2 = *(id *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(void **)(a1 + 56);
  v7 = v2;
  v8 = v3;
  v9 = v4;
  v11 = *(_BYTE *)(a1 + 80);
  v10 = *(id *)(a1 + 64);
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v6);
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_1000079AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  _QWORD *WeakRetained;
  int v11;
  const char *v12;
  __int16 v13;
  void *v14;

  v5 = userInfoForStateUpdate(a4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v11 = 136315394;
      v12 = "-[GKApplicationStateMonitor setHandler:]_block_invoke_2";
      v13 = 2112;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s userInfo=%@", (uint8_t *)&v11, 0x16u);
    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    (*(void (**)(void))(WeakRetained[1] + 16))();

  }
  +[GKClientProxy checkGameCenterEnabledForegroundClients](GKClientProxy, "checkGameCenterEnabledForegroundClients");

}

void sub_100007AC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000073A0;
  v8[3] = &unk_1002BCA30;
  v9 = *(id *)(a1 + 56);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadScopedPlayerIDs:gameBundleIDs:handler:", v5, v6, v8);

}

void sub_100007ED8(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  _QWORD *WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  void *v15;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessPredicate predicateMatchingBundleIdentifiers:](RBSProcessPredicate, "predicateMatchingBundleIdentifiers:", WeakRetained[4]));
  v15 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
  objc_msgSend(v3, "setPredicates:", v6);

  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v7);
  v9 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v10 = WeakRetained[4];
    v11 = 136315394;
    v12 = "-[GKApplicationStateMonitor updateStateObservation]_block_invoke";
    v13 = 2112;
    v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s interestedBundleIDs=%@", (uint8_t *)&v11, 0x16u);
  }

}

void sub_100008480(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  unsigned int v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD v41[4];
  id v42;
  id v43;
  id v44;
  void (**v45)(_QWORD);
  uint64_t v46;
  _QWORD v47[2];
  _QWORD v48[2];
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  void *v52;
  id v53;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](GKPlayerProfileCacheObject, "selfPlayerID"));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerID"));
  v9 = (void *)v8;
  if (v8)
    v10 = (void *)v8;
  else
    v10 = v7;
  v11 = v10;

  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v11, CFSTR("playerID"));
  if (!v11)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 8, 0));
    objc_msgSend(*(id *)(a1 + 40), "setError:", v19);

LABEL_12:
    v6[2](v6);
    goto LABEL_27;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v53 = v11;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v53, 1));
  v14 = objc_retainBlock(*(id *)(a1 + 56));
  v15 = objc_msgSend(v12, "doesCallbackListExistFor:parameters:callback:", CFSTR("gk-get-friend-player-ids"), v13, v14);

  if (v15)
  {
    if (!os_log_GKGeneral)
      v17 = (id)GKOSLoggers(v16);
    v18 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: callback already exists, will use its value when ready", buf, 2u);
    }
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("skipCallbacks"));
    goto LABEL_12;
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject fetchRequestForContext:](GKFriendListCacheObject, "fetchRequestForContext:", v5));
  objc_msgSend(v20, "setReturnsDistinctResults:", 1);
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSManagedObject _gkRetrieveCleanEntry:request:](NSManagedObject, "_gkRetrieveCleanEntry:request:", v5, v20));
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v23 = objc_msgSend(v22, "relatedTasksExistForBagKey:", CFSTR("gk-get-friend-player-ids"));

  if (v21 && ((v24 = objc_msgSend(v21, "expired"), !(_DWORD)v24) || (unint64_t)v23 <= 1))
  {
    if (!os_log_GKGeneral)
      v34 = (id)GKOSLoggers(v24);
    v35 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v36 = v35;
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "entries"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v37, "count")));
      *(_DWORD *)buf = 138412290;
      v50 = v38;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: cache is valid, using it: %@", buf, 0xCu);

    }
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "filterableFriends"));
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v39, CFSTR("filterablePlayers"));

    v6[2](v6);
  }
  else
  {
    if (!os_log_GKGeneral)
      v25 = (id)GKOSLoggers(v24);
    v26 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v27 = v26;
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v23));
      *(_DWORD *)buf = 138412546;
      v50 = v21;
      v51 = 2112;
      v52 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: cache is not valid for: %@, going to the server, related: %@", buf, 0x16u);

    }
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectID", v20));
    v47[0] = CFSTR("requested-player-id");
    v47[1] = CFSTR("friend-type");
    v48[0] = v11;
    v48[1] = GKFriendTypeAll;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v48, v47, 2));
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_100035F20;
    v41[3] = &unk_1002BD178;
    v42 = *(id *)(a1 + 40);
    v43 = v11;
    v44 = v29;
    v46 = *(_QWORD *)(a1 + 64);
    v45 = v6;
    v33 = v29;
    objc_msgSend(v31, "issueRequest:bagKey:clientProxy:handler:", v30, CFSTR("gk-get-friend-player-ids"), v32, v41);

    v20 = v40;
  }

LABEL_27:
}

void sub_1000089BC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "transport"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localPlayer"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileService, "serviceWithTransport:forClient:localPlayer:", v8, v5, v6));
  objc_msgSend(v7, "getProfilesForPlayerIDs:handler:", v4, *(_QWORD *)(a1 + 40));

}

void sub_100008A70(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10000F89C;
  v6[3] = &unk_1002C2BC0;
  v4 = *(NSObject **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_100008B04(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localPlayer"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100009100;
  v10[3] = &unk_1002BD4D8;
  v6 = *(void **)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v6;
  v12 = *(id *)(a1 + 48);
  v13 = *(id *)(a1 + 56);
  v7 = *(id *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v15 = v3;
  v16 = v8;
  v14 = v7;
  v9 = v3;
  objc_msgSend(v4, "getFriendsForPlayer:withFilter:handler:", v5, 1, v10);

}

id userInfoForStateUpdate(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[3];
  _QWORD v13[3];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "state"));
  v3 = applicationStateForProcessState(v2);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "process"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));

  if (v6)
  {
    v12[0] = GKApplicationStateKey;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v3));
    v13[0] = v7;
    v13[1] = v6;
    v12[1] = GKApplicationStateDisplayIDKey;
    v12[2] = GKApplicationStatePIDKey;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "process"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v8, "pid")));
    v13[2] = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 3));

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

uint64_t GKGetApplicationStateForBundleID(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  id v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;

  v1 = a1;
  if ((shouldNotCheckApplicationState(v1) & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessPredicate predicateMatchingBundleIdentifier:](RBSProcessPredicate, "predicateMatchingBundleIdentifier:", v1));
    v16 = 0;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessHandle handleForPredicate:error:](RBSProcessHandle, "handleForPredicate:error:", v3, &v16));
    v5 = v16;

    if (v5)
    {
      if (!os_log_GKGeneral)
        v7 = (id)GKOSLoggers(v6);
      v8 = os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_100119F2C((uint64_t)v1, (uint64_t)v5, v8);
      v2 = 0;
    }
    else
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentState"));
      v2 = applicationStateForProcessState(v9);

      if (!os_log_GKGeneral)
        v11 = (id)GKOSLoggers(v10);
      v12 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v13 = v12;
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v2));
        *(_DWORD *)buf = 136315650;
        v18 = "GKApplicationState GKGetApplicationStateForBundleID(NSString *__strong)";
        v19 = 2112;
        v20 = v1;
        v21 = 2112;
        v22 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s bundleID=%@ state=%@", buf, 0x20u);

      }
    }

  }
  return v2;
}

void sub_100009100(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  __int128 v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  __int128 v19;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "_gkValuesForKeyPath:", CFSTR("playerID")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v3));

  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allKeys"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100006994;
  v12[3] = &unk_1002BD4B0;
  v13 = *(id *)(a1 + 48);
  v14 = v4;
  v15 = *(id *)(a1 + 40);
  v16 = *(id *)(a1 + 56);
  v7 = *(id *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 32);
  v17 = v7;
  v18 = v8;
  v11 = *(_OWORD *)(a1 + 72);
  v9 = (id)v11;
  v19 = v11;
  v10 = v4;
  objc_msgSend(v5, "getFriendCodeDetailWithIdentifiers:handler:", v6, v12);

}

void sub_1000093BC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v3, "setResult:", 0);
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("GKCDFriendCodeDetails")));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_gkMapDictionaryWithKeyPath:", CFSTR("friendCode")));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("GKPlayers")));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_gkMapDictionaryWithKeyPath:", CFSTR("playerID")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    if (objc_msgSend(*(id *)(a1 + 40), "count"))
    {
      v9 = 0;
      do
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", v9));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v10));

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "creatorPlayerID"));
        if (v12)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "creatorPlayerID"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v13));

          if (v14)
            objc_msgSend(v11, "setCreatorPlayer:", v14);
          objc_msgSend(v8, "addObject:", v11);

        }
        ++v9;
      }
      while (v9 < (unint64_t)objc_msgSend(*(id *)(a1 + 40), "count"));
    }
    v15 = objc_msgSend(v8, "copy");
    objc_msgSend(*(id *)(a1 + 32), "setResult:", v15);

  }
  v16 = *(_QWORD *)(a1 + 48);
  v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v16 + 16))(v16, v18, v17);

}

void sub_1000095B4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  char v19;
  _QWORD v20[4];
  id v21;
  id v22;

  v3 = a2;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10002AA74;
  v20[3] = &unk_1002BC850;
  v21 = *(id *)(a1 + 32);
  v22 = *(id *)(a1 + 40);
  v4 = objc_retainBlock(v20);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10000786C;
  v12[3] = &unk_1002BC9E0;
  v13 = *(id *)(a1 + 56);
  v6 = *(id *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(void **)(a1 + 72);
  v14 = v6;
  v15 = v7;
  v9 = v8;
  v19 = *(_BYTE *)(a1 + 80);
  v16 = v9;
  v17 = v4;
  v18 = v3;
  v10 = v3;
  v11 = v4;
  objc_msgSend(v5, "performBlock:", v12);

}

void sub_100009E20(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100009ED0;
  v7[3] = &unk_1002C2B70;
  v5 = *(id *)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v5;
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "performBlock:", v7);

}

void sub_100009ED0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[4];
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10000FA80;
  v4[3] = &unk_1002BB540;
  v5 = *(id *)(a1 + 48);
  (*(void (**)(uint64_t, void *, _QWORD *))(v2 + 16))(v2, v3, v4);

}

void sub_10000A1DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10000A1F4(uint64_t a1)
{
  dispatch_queue_t current_queue;
  char *v3;
  uint64_t v4;
  NSObject *queue;

  current_queue = dispatch_get_current_queue();
  queue = objc_claimAutoreleasedReturnValue(current_queue);
  v3 = (char *)dispatch_queue_get_specific(queue, CFSTR("GKManagedObjectContextTransactionCountKey"))
     + *(int *)(a1 + 40);
  dispatch_queue_set_specific(queue, CFSTR("GKManagedObjectContextTransactionCountKey"), v3, 0);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(uint64_t, char *))(v4 + 16))(v4, v3);

}

void sub_10000A270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  dispatch_time_t v5;
  _QWORD block[4];
  id v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
  {
    v8 = v2;
    v9 = v3;
    objc_msgSend(*(id *)(a1 + 32), "_gkSafeSave");
    objc_msgSend(*(id *)(a1 + 32), "reset");
    v5 = dispatch_time(0, 30000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000F70FC;
    block[3] = &unk_1002BBBD8;
    v7 = *(id *)(a1 + 32);
    dispatch_after(v5, (dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_10000A3F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10000A7A8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  id v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("GKSavedAppInitState")));
  v4 = (id)*(int *)(a1 + 48);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("pid")));
  if (objc_msgSend(v5, "integerValue") == v4)
  {
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("bundleID")));
    LODWORD(v6) = objc_msgSend(v6, "isEqualToString:", v7);

    if ((_DWORD)v6)
    {
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("state")));
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

      if (!os_log_GKGeneral)
        v13 = (id)GKOSLoggers(v12);
      v14 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v15 = *(_QWORD *)(a1 + 32);
        v16 = *(_DWORD *)(a1 + 48);
        v21 = 138412802;
        v22 = v3;
        v23 = 2112;
        v24 = v15;
        v25 = 1024;
        v26 = v16;
        v17 = "Auth state resolved %@ for client %@ : %d";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, v17, (uint8_t *)&v21, 0x1Cu);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {

  }
  if (v3)
  {
    if (!os_log_GKGeneral)
      v18 = (id)GKOSLoggers(v8);
    v14 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v19 = *(_QWORD *)(a1 + 32);
      v20 = *(_DWORD *)(a1 + 48);
      v21 = 138412802;
      v22 = v3;
      v23 = 2112;
      v24 = v19;
      v25 = 1024;
      v26 = v20;
      v17 = "Ignoring old appInit state -- %@ does not match client %@ : %d";
      goto LABEL_13;
    }
  }
LABEL_14:

}

void sub_10000A9D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *i;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *j;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *k;
  void *v33;
  void *v34;
  unsigned __int8 v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id obj;
  void *v61;
  id v62;
  id v63;
  void *v64;
  _QWORD v65[4];
  id v66;
  uint64_t v67;
  id v68;
  id v69;
  _QWORD v70[4];
  id v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  id v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  id v89;
  _BYTE v90[128];
  uint8_t v91[4];
  uint64_t v92;
  _BYTE v93[128];
  _BYTE v94[128];

  v5 = a2;
  v56 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v7 = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
  v8 = objc_claimAutoreleasedReturnValue(+[NSMutableOrderedSet orderedSet](NSMutableOrderedSet, "orderedSet"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDFriendCodeDetail _gkFetchRequest](GKCDFriendCodeDetail, "_gkFetchRequest"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("friendCode IN %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v9, "setPredicate:", v10);

  v89 = 0;
  v64 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v9, &v89));
  v12 = v89;
  v61 = v7;
  v57 = a1;
  v59 = (void *)v8;
  if (v12)
  {
    v55 = v11;
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0u;
    obj = *(id *)(a1 + 32);
    v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v85, v94, 16);
    if (v13)
    {
      v14 = v13;
      v62 = *(id *)v86;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          v16 = v12;
          if (*(id *)v86 != v62)
            objc_enumerationMutation(obj);
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("friendCode == %@"), *(_QWORD *)(*((_QWORD *)&v85 + 1) + 8 * (_QWORD)i)));
          objc_msgSend(v64, "setPredicate:", v17);

          v84 = v12;
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v64, &v84));
          v12 = v84;

          if (v12)
          {
            v19 = v6;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v20 = v18;
            v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v80, v93, 16);
            if (v21)
            {
              v22 = v21;
              v23 = *(_QWORD *)v81;
              do
              {
                for (j = 0; j != v22; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v81 != v23)
                    objc_enumerationMutation(v20);
                  objc_msgSend(v5, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v80 + 1) + 8 * (_QWORD)j));
                }
                v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v80, v93, 16);
              }
              while (v22);
            }

            if (!os_log_GKGeneral)
              v26 = (id)GKOSLoggers(v25);
            v27 = (void *)os_log_GKError;
            v6 = v19;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
              sub_10003E734(v91, v27, v12, &v92);
          }
          else
          {
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "firstObject"));
            objc_msgSend(v58, "addObject:", v28);

          }
        }
        v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v85, v94, 16);
      }
      while (v14);
    }

    v11 = v58;
  }
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v63 = v11;
  v29 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v76, v90, 16);
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)v77;
    do
    {
      for (k = 0; k != v30; k = (char *)k + 1)
      {
        if (*(_QWORD *)v77 != v31)
          objc_enumerationMutation(v63);
        v33 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)k);
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "expirationDate"));
        v35 = objc_msgSend(v33, "_gkIsExpired:", v34);

        if ((v35 & 1) == 0)
        {
          v36 = objc_msgSend(objc_alloc((Class)GKFriendCodeDetailInternal), "initWithFriendCodeDetail:", v33);
          objc_msgSend(v6, "addObject:", v36);
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "friendCode"));
          objc_msgSend(v61, "removeObject:", v37);

          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "creatorPlayerId"));
          if (v38)
          {
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "creatorPlayerId"));
            objc_msgSend(v59, "addObject:", v39);

          }
        }
      }
      v30 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v76, v90, 16);
    }
    while (v30);
  }

  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKFriendService.m", 753, "-[GKFriendServicePrivate getFriendCodeDetailWithIdentifiers:handler:]_block_invoke"));
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v40));

  if (objc_msgSend(v61, "count"))
  {
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 3221225472;
    v70[2] = sub_100039728;
    v70[3] = &unk_1002BC010;
    v42 = v61;
    v43 = v57;
    v44 = *(_QWORD *)(v57 + 40);
    v71 = v42;
    v72 = v44;
    v73 = v6;
    v45 = v59;
    v74 = v59;
    v75 = *(id *)(v57 + 48);
    objc_msgSend(v41, "perform:", v70);

    v46 = v71;
  }
  else
  {
    v46 = objc_msgSend(v6, "copy");
    v43 = v57;
    objc_msgSend(*(id *)(v57 + 48), "setObject:forKeyedSubscript:", v46, CFSTR("GKCDFriendCodeDetails"));
    v45 = v59;
  }

  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v43 + 40), "clientProxy"));
  v48 = objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "replyQueue"));
  v49 = v43;
  v50 = (void *)v48;
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472;
  v65[2] = sub_10000F938;
  v65[3] = &unk_1002BB518;
  v51 = *(_QWORD *)(v49 + 40);
  v52 = *(void **)(v49 + 48);
  v66 = v45;
  v67 = v51;
  v68 = v52;
  v69 = v56;
  v53 = v56;
  v54 = v45;
  objc_msgSend(v41, "notifyOnQueue:block:", v50, v65);

}

id GKSavedAuthentiactionStateQueue()
{
  if (qword_100317FD8 != -1)
    dispatch_once(&qword_100317FD8, &stru_1002C31E8);
  return (id)qword_100317FD0;
}

void sub_10000B248(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  _QWORD v33[4];
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  _QWORD *v39;
  _QWORD v40[4];
  id v41;
  id v42;
  id v43;
  _QWORD v44[5];
  id v45;
  id v46;
  id v47;
  id v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[3];
  char v55;
  _BYTE v56[128];

  v32 = a2;
  v5 = a3;
  if (v5)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKFriendService.m", 1216, "-[GKFriendServicePrivate getActiveFriendRequests:]_block_invoke"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v6));

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v54[0] = 0;
    v54[1] = v54;
    v54[2] = 0x2020000000;
    v55 = 0;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v9 = v32;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v51;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v51 != v11)
            objc_enumerationMutation(v9);
          v13 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)i);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "friendCode"));
          objc_msgSend(v7, "setObject:forKeyedSubscript:", v13, v14);

          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "contactID"));
          v16 = objc_msgSend(v15, "length") == 0;

          if (!v16)
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "contactID"));
            objc_msgSend(v8, "addObject:", v17);

          }
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v50, v56, 16);
      }
      while (v10);
    }

    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_100008B04;
    v44[3] = &unk_1002BD500;
    v44[4] = *(_QWORD *)(a1 + 32);
    v18 = v7;
    v45 = v18;
    v19 = v30;
    v46 = v19;
    v20 = v28;
    v47 = v20;
    v21 = v29;
    v48 = v21;
    v49 = v54;
    objc_msgSend(v19, "perform:", v44);
    if (objc_msgSend(v8, "count"))
    {
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472;
      v40[2] = sub_10003C548;
      v40[3] = &unk_1002BB4A0;
      v41 = v8;
      v42 = v19;
      v43 = v31;
      objc_msgSend(v42, "perform:", v40);

    }
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "replyQueue"));
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10003C754;
    v33[3] = &unk_1002BD528;
    v24 = v20;
    v34 = v24;
    v25 = v31;
    v35 = v25;
    v38 = *(id *)(a1 + 40);
    v26 = v19;
    v39 = v54;
    v27 = *(_QWORD *)(a1 + 32);
    v36 = v26;
    v37 = v27;
    objc_msgSend(v26, "notifyOnQueue:block:", v23, v33);

    _Block_object_dispose(v54, 8);
    v5 = 0;
  }

}

void sub_10000B6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  _Block_object_dispose(&a54, 8);
  _Unwind_Resume(a1);
}

void sub_10000C090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;
  id *v25;

  objc_destroyWeak(v24);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000C5A0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "stripGKPlayerInternalPIIs");
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10000C7C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  unsigned __int8 v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  char v15;
  unsigned __int8 v16;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v6, "count"))
  {
    v7 = +[GKPlayerProfileCacheObject piecesToLoadForFamiliarity:](GKPlayerProfileCacheObject, "piecesToLoadForFamiliarity:", objc_msgSend(v5, "integerValue"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10002ABC8;
    v9[3] = &unk_1002BC990;
    v8 = *(void **)(a1 + 32);
    v9[4] = *(_QWORD *)(a1 + 40);
    v10 = v6;
    v11 = v5;
    v13 = *(id *)(a1 + 48);
    v12 = *(id *)(a1 + 32);
    v15 = *(_BYTE *)(a1 + 64);
    v16 = v7;
    v14 = *(id *)(a1 + 56);
    objc_msgSend(v8, "perform:", v9);

  }
}

void GKIncrementContextTransactionCount(void *a1, int a2, void *a3)
{
  id v4;
  _QWORD v5[4];
  id v6;
  int v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10000A1F4;
  v5[3] = &unk_1002C2B20;
  v7 = a2;
  v6 = a3;
  v4 = v6;
  objc_msgSend(a1, "performBlock:", v5);

}

void sub_10000E5EC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  double Current;
  uint64_t v14;
  objc_class *v15;
  uint64_t v16;
  uint64_t v17;
  __objc2_class **v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  unsigned int v31;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "_clientLookup"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
  v4 = v3;
  if (*(_DWORD *)(a1 + 64))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

    if (v6)
    {
LABEL_6:
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v6;
      v12 = v6;

      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "updateIfRecentlyInstalled");
      goto LABEL_7;
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", &off_1002DB868));
    if (v7)
    {
      v6 = v7;
      objc_msgSend(v7, "setPid:", *(unsigned int *)(a1 + 64));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, v8);

      objc_msgSend(v4, "removeObjectForKey:", &off_1002DB868);
      goto LABEL_6;
    }
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allValues"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));

    if (v6)
      goto LABEL_6;
  }
  if (!*(_BYTE *)(a1 + 68))
    goto LABEL_7;
  Current = CFAbsoluteTimeGetCurrent();
  v15 = (objc_class *)objc_opt_class(GKClientProxy, v14);
  if ((objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 56), v16), "isExtensionBundleID:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v18 = &off_1002BA3B8;
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGameCenterUIServiceIdentifier) & 1) != 0)
  {
    v18 = &off_1002BA650;
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGameCenterToolIdentifier) & 1) != 0
         || (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGameCenterDarwinTestIdentifier) & 1) != 0
         || (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGKTester2Identifier) & 1) != 0)
  {
    v18 = &off_1002BA610;
  }
  else
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKIMDPersistenceIdentifier) & 1) == 0
      && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKPreferencesIdentifier) & 1) == 0
      && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKMacOSPreferencesExtensionIdentifier) & 1) == 0
      && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGameCenterHostingContainerIdentifier) & 1) == 0
      && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGameCenterHUDActivityProcessIdentifier) & 1) == 0
      && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGameCenterOverlayProcessIdentifier) & 1) == 0
      && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKInternetAccountsIdentifier) & 1) == 0
      && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGameCenterMessageExtensionIdentifier) & 1) == 0
      && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKSpringboardIdentifier) & 1) == 0)
    {
      v28 = GKAccountsDaemonIdentifier;
      if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKAccountsDaemonIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKAppStoreBinaryIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKAppStoreIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKAppStoreDaemonIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKMessagesIndentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GCUITester) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKTVAppStoreIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKArcadeIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGameOverlayUIIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKAppStoreProductPageExtensionIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKWidgetIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKWidgetExtensionIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKAppStoreSuscribePageExtensionIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKAppStoreWidgetIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKArcadeWidgetIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKAppStoreKitIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKArcadeTopShelfExtensionIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKTVAppStoreTopShelfExtensionIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKAppStoreGameUISample) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKTVSettingsIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKPineboardIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", v28) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGameCenterTodayWidgetIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKMatchmakerExtensionIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKCopresenceCoreIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKMuseBuddyIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGameCenterRemoteAlertIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKDaemonIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKContactsUITesterIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKMobileAddressBookIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKContactViewViewServiceIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKContactsViewServiceIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKContactsUIIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKMobilePhoneIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKMobileSMSIdentifier) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKXCTestInternalAngel) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKAppleAccountSetupTool) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKAppleIDSetupDaemon) & 1) == 0
        && (objc_msgSend(*(id *)(a1 + 32), "isEqual:", GKAppleIDSettings) & 1) == 0)
      {
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_gkSHA256Hash"));
        if (objc_msgSend(v29, "isEqualToString:", CFSTR("t/IRG+OATWH+smiJ2A4GRp6fHjSftOF5bYwT7kv+1Mk=")))
        {

        }
        else
        {
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_gkSHA256Hash"));
          v31 = objc_msgSend(v30, "isEqualToString:", CFSTR("BKN3YPrkowJshOfzYN9kxtu/zEFYrAWOeXV3rzu9h1k="));

          if (!v31)
            goto LABEL_18;
        }
      }
    }
    v18 = &off_1002BA5F0;
  }
  v15 = (objc_class *)objc_opt_class(*v18, v17);
LABEL_18:
  v19 = objc_msgSend([v15 alloc], "initWithBundleIdentifier:bundleOrNil:pid:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 64));
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v21 = *(void **)(v20 + 40);
  *(_QWORD *)(v20 + 40) = v19;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
    if (!v23)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v23, *(_QWORD *)(a1 + 32));
    }
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v24, v25);

  }
  if (!os_log_GKGeneral)
    v26 = (id)GKOSLoggers(v22);
  v27 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_100106310(v27, Current);
LABEL_7:

}

void sub_10000F284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000F89C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_10000F8AC(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[15] + 16))(a1[15], 0, a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
}

uint64_t sub_10000F8F0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[15] + 16))(a1[15], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
}

void sub_10000F938(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  if (objc_msgSend(a1[4], "count"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "transport"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "localPlayer"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileService, "serviceWithTransport:forClient:localPlayer:", v2, v3, v4));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "array"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100039E7C;
    v7[3] = &unk_1002BCA30;
    v8 = a1[6];
    v9 = a1[7];
    objc_msgSend(v5, "getProfilesForPlayerIDs:handler:", v6, v7);

  }
  else
  {
    (*((void (**)(void))a1[7] + 2))();
  }
}

uint64_t sub_10000FA74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10000FA80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t start()
{
  void *v0;
  void *v1;
  unsigned int v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  id v7;
  NSObject *v8;
  _BOOL8 v9;
  id v10;
  NSObject *v11;
  _BOOL8 v12;
  id v13;
  NSObject *v14;
  _BOOL8 v15;
  id v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  int v23;
  void *v24;

  v0 = objc_autoreleasePoolPush();
  +[GKDaemonRuntimeStrategy setup](GKDaemonRuntimeStrategy, "setup");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  v2 = objc_msgSend(v1, "lockedDown");

  if (v2)
  {
    if (!os_log_GKGeneral)
      v4 = (id)GKOSLoggers(v3);
    v5 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Lockdown Mode is enabled. Exiting.", (uint8_t *)&v23, 2u);
    }
    objc_autoreleasePoolPop(v0);
    return 0;
  }
  else
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v3);
    v8 = os_log_GKDaemon;
    v9 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
    if (v9)
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "^^^^^^^^^^^^^^^^^^", (uint8_t *)&v23, 2u);
    }
    if (!os_log_GKGeneral)
      v10 = (id)GKOSLoggers(v9);
    v11 = os_log_GKDaemon;
    v12 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
    if (v12)
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "| GAMED STARTING |", (uint8_t *)&v23, 2u);
    }
    if (!os_log_GKGeneral)
      v13 = (id)GKOSLoggers(v12);
    v14 = os_log_GKDaemon;
    v15 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
    if (v15)
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "vvvvvvvvvvvvvvvvvv", (uint8_t *)&v23, 2u);
    }
    if (!os_log_GKGeneral)
      v16 = (id)GKOSLoggers(v15);
    v17 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v18 = v17;
      v19 = GKFrameworkVersionDescription();
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v23 = 138412290;
      v24 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Frameworks Versions:\n%@", (uint8_t *)&v23, 0xCu);

    }
    GKDaemonRun();
    v21 = +[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager");
    objc_autoreleasePoolPop(v0);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
    objc_msgSend(v22, "run");

    return 0xFFFFFFFFLL;
  }
}

void sub_100010600(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100010764(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  dispatch_queue_global_t global_queue;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transport"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "storeBag"));
  v6 = *(_QWORD *)(a1 + 40);
  global_queue = dispatch_get_global_queue(0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100010848;
  v10[3] = &unk_1002BB478;
  v11 = *(id *)(a1 + 48);
  v12 = v3;
  v9 = v3;
  objc_msgSend(v5, "getValuesForKeys:queue:completion:", v6, v8, v10);

}

uint64_t sub_100010848(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100010A6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
  +[NSData _gkLoadRemoteImageDataForURL:subdirectory:filename:queue:handler:](NSData, "_gkLoadRemoteImageDataForURL:subdirectory:filename:queue:handler:", v2, v3, v4, v5, *(_QWORD *)(a1 + 64));

}

void sub_100010AEC(uint64_t a1, char a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;

  if ((a2 & 1) != 0)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    if (!os_log_GKGeneral)
      v3 = (id)GKOSLoggers(a1);
    v4 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_FAULT))
      sub_100016C50(a1, v4);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
}

void sub_100010D48(id *a1, void *a2)
{
  id v3;
  dispatch_queue_global_t global_queue;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = a2;
  global_queue = dispatch_get_global_queue(0, 0);
  v5 = objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100010E1C;
  v7[3] = &unk_1002BB518;
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = v3;
  v6 = v3;
  dispatch_async(v5, v7);

}

void sub_100010E1C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;

  v2 = (_QWORD *)(a1 + 32);
  v3 = GKImageCachePathForSubdirectoryAndFilename(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)v4;
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 48), "_gkWriteToImageCacheWithURLString:", v4);
  }
  else
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(0);
    v7 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100016CC4(v2, v2 + 1, v7);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

uint64_t sub_100010ED4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100011084(id *a1, void *a2)
{
  id v3;
  dispatch_queue_global_t global_queue;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = a2;
  global_queue = dispatch_get_global_queue(0, 0);
  v5 = objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100011158;
  v7[3] = &unk_1002BB518;
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = v3;
  v6 = v3;
  dispatch_async(v5, v7);

}

void sub_100011158(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;

  v2 = GKImageCachePathForSubdirectoryAndFilename(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = objc_msgSend(objc_alloc((Class)NSData), "initWithContentsOfFile:", v4);
  if (objc_msgSend(v3, "length"))
    objc_msgSend(*(id *)(a1 + 48), "setResult:", v3);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000111D0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1000113A0(uint64_t a1, void *a2)
{
  id v3;
  dispatch_queue_global_t global_queue;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  global_queue = dispatch_get_global_queue(0, 0);
  v5 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100011460;
  block[3] = &unk_1002BB568;
  v8 = *(id *)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v6 = v3;
  dispatch_async(v5, block);

}

void sub_100011460(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;

  v2 = GKImageCachePathForSubdirectoryAndFilename(a1[4], a1[5]);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v5 = objc_msgSend(v4, "fileExistsAtPath:", v3);

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v10 = 0;
    objc_msgSend(v6, "removeItemAtPath:error:", v3, &v10);
    v7 = v10;

    if (v7)
    {
      if (!os_log_GKGeneral)
        v9 = (id)GKOSLoggers(v8);
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_100016D3C();
    }

  }
  (*(void (**)(void))(a1[6] + 16))();

}

uint64_t sub_100011564(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100011758(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ampController"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100011800;
  v6[3] = &unk_1002BB5B8;
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "getBagWithCompletion:", v6);

}

uint64_t sub_100011800(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100011830(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "result"));
  v3 = v2;
  if (v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "doubleForKey:", CFSTR("metrics/impressions/viewableThreshold")));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100011948;
    v7[3] = &unk_1002BB5E0;
    v8 = a1[5];
    v9 = a1[6];
    objc_msgSend(v4, "valueWithCompletion:", v7);

  }
  else
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(0);
    v6 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100016D9C(v6);
    (*((void (**)(void))a1[6] + 2))();
  }

}

void sub_100011948(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000119DC;
  v7[3] = &unk_1002BB450;
  v4 = *(NSObject **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

void sub_1000119DC(uint64_t a1)
{
  uint64_t v1;
  double v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "doubleValue");
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v2 / 1000.0));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v3);

}

void sub_100011F64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  if (a2)
  {
    v3 = a2;
    v6 = (id)objc_claimAutoreleasedReturnValue(+[GKAMPController controller](GKAMPController, "controller"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "originalBundleIdentifier"));
    objc_msgSend(v6, "reportClickStreamEventWithHostAppBundleId:metricsFields:", v5, v3);

  }
}

void sub_10001209C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  if (a2)
  {
    v3 = a2;
    v6 = (id)objc_claimAutoreleasedReturnValue(+[GKAMPController controller](GKAMPController, "controller"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "originalBundleIdentifier"));
    objc_msgSend(v6, "reportClickStreamEventWithHostAppBundleId:metricsFields:", v5, v3);

  }
}

void sub_1000121A8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "overlayServiceUtils"));
  objc_msgSend(v2, "emitMultiplayerEventWithMessage:", *(_QWORD *)(a1 + 40));

}

void sub_100012A60(id a1)
{
  GKFriendSuggestionDenier *v1;
  void *v2;

  v1 = objc_alloc_init(GKFriendSuggestionDenier);
  v2 = (void *)qword_100317E00;
  qword_100317E00 = (uint64_t)v1;

}

uint64_t sub_100012F08(uint64_t a1)
{
  uint64_t result;
  const __CFString *v3;
  const __CFString *v4;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    v3 = *(const __CFString **)(a1 + 32);
    if (v3)
      v4 = v3;
    else
      v4 = CFSTR("NewsApp");
    return (*(uint64_t (**)(uint64_t, _QWORD, _UNKNOWN **, const __CFString *))(result + 16))(result, 0, &off_1002DB4C0, v4);
  }
  return result;
}

void sub_100012F40(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = (void *)objc_opt_new(ASCAppLaunchTrampoline);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "handleURL:", *(_QWORD *)(a1 + 32)));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100013070;
  v11[3] = &unk_1002BB6C0;
  v12 = *(id *)(a1 + 40);
  v13 = *(id *)(a1 + 48);
  v6 = v3;
  v14 = v6;
  objc_msgSend(v5, "addSuccessBlock:", v11);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000132A8;
  v8[3] = &unk_1002BB6E8;
  v9 = *(id *)(a1 + 48);
  v10 = v6;
  v7 = v6;
  objc_msgSend(v5, "addErrorBlock:", v8);

}

void sub_100013070(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  __CFString *v7;
  __CFString *v8;
  id v9;
  NSObject *v10;
  __CFString *v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint8_t buf[8];
  _QWORD v16[2];
  _QWORD v17[2];

  v3 = a2;
  v4 = objc_msgSend(v3, "intValue");
  if ((_DWORD)v4 == 1)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(v4);
    v10 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "ASCAppLaunchTrampoline: Successfully opened app product page", buf, 2u);
    }
    if (!*(_QWORD *)(a1 + 32))
    {
      v11 = CFSTR("com.apple.AppStore");
      goto LABEL_23;
    }
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("https://apps.apple.com/app/id%@"), *(_QWORD *)(a1 + 32)));
    goto LABEL_16;
  }
  if (!(_DWORD)v4)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v4);
    v6 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ASCAppLaunchTrampoline: Successfully launched app", buf, 2u);
    }
    v7 = *(__CFString **)(a1 + 32);
    if (!v7)
      v7 = CFSTR("thirdPartyApp");
    v8 = v7;
LABEL_16:
    v11 = v8;
    goto LABEL_23;
  }
  if (!os_log_GKGeneral)
    v12 = (id)GKOSLoggers(v4);
  v13 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "ASCAppLaunchTrampoline: Successfully trampolined with unknown result", buf, 2u);
  }
  v11 = CFSTR("unknown");
LABEL_23:
  v16[0] = CFSTR("code");
  v16[1] = CFSTR("targetId");
  v17[0] = v3;
  v17[1] = v11;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 2));
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v14);

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1000132A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  int v7;
  void *v8;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    v7 = 138412290;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ASCAppLaunchTrampoline: Trampoline failed because of: %@", (uint8_t *)&v7, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100013390(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("code")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("targetId")));
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v7, v4, v6);

}

void sub_100013564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001357C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001358C(uint64_t a1)
{

}

void sub_100013594(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bundleIdentifier"));
  v7 = *(void **)(a1 + 32);

  if (v6 == v7)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }

}

void sub_100013854(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v2 = *(_QWORD *)(a1 + 40);
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("playerID")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("authToken")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("accountName")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("pushToken")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *, void *, void *, void *, void *))(v2 + 16))(v2, v8, v3, v4, v5, v6, v7);

}

void sub_100013A4C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  objc_msgSend(v1, "terminate");

}

void sub_100013C4C(uint64_t a1)
{
  void *v1;
  _QWORD v2[5];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100013CC4;
  v2[3] = &unk_1002BB758;
  v1 = *(void **)(a1 + 40);
  v2[4] = *(_QWORD *)(a1 + 32);
  v3 = v1;
  +[GKClientProxy removeAllCachesWithHandler:](GKClientProxy, "removeAllCachesWithHandler:", v2);

}

void sub_100013CC4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  _QWORD block[4];
  id v9;

  v2 = GKInsecureCacheRoot();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  +[GKUtilityServicePrivate removeCacheDirectory:](GKUtilityServicePrivate, "removeCacheDirectory:", v3);

  v4 = GKSupportDataRoot();
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  +[GKUtilityServicePrivate removeCacheDirectory:](GKUtilityServicePrivate, "removeCacheDirectory:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100013DA4;
  block[3] = &unk_1002BB540;
  v9 = *(id *)(a1 + 40);
  dispatch_async(v7, block);

}

uint64_t sub_100013DA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100013E4C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _QWORD block[4];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "replyQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100013EE8;
  block[3] = &unk_1002BB540;
  v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);

}

uint64_t sub_100013EE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100014044(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "refreshContentsForDataType:userInfo:", *(unsigned int *)(a1 + 32), 0);
}

uint64_t sub_100014168(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100014304(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;
  unsigned __int8 v14;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  v7 = objc_msgSend(v6, "isArcadeSubscriber");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[ASDSubscriptionEntitlements sharedInstance](ASDSubscriptionEntitlements, "sharedInstance"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000143F4;
  v11[3] = &unk_1002BB828;
  v14 = v7;
  v9 = *(void **)(a1 + 40);
  v11[4] = *(_QWORD *)(a1 + 32);
  v13 = v5;
  v12 = v9;
  v10 = v5;
  objc_msgSend(v8, "getSubscriptionEntitlementsForSegment:ignoreCaches:withResultHandler:", 1, 0, v11);

}

void sub_1000143F4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *i;
  void *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  id v29;
  void *v30;
  void *v31;
  double v32;
  double v33;
  void *v34;
  void *v35;
  id v36;
  NSObject *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  id v41;
  _QWORD v42[4];
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t buf[4];
  id v49;
  _BYTE v50[128];

  v6 = a2;
  v7 = a4;
  v8 = v7;
  if (v7)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(v7);
    v10 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR))
      sub_100016E3C((uint64_t)v8, v10, v11, v12, v13, v14, v15, v16);
    objc_msgSend(*(id *)(a1 + 40), "setError:", v8);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_38;
  }
  v17 = objc_msgSend(v6, "count");
  if (v17)
  {
    v40 = a1;
    v41 = v6;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v18 = v6;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v45;
      v22 = GKAppStoreArcadeOfferIdentifier;
      v23 = GKAppStoreArcadeAnnualOfferIdentifier;
      v39 = 0;
      while (2)
      {
        for (i = 0; i != v20; i = (char *)i + 1)
        {
          if (*(_QWORD *)v45 != v21)
            objc_enumerationMutation(v18);
          v25 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "offerID", v39));
          if (objc_msgSend(v26, "isEqualToString:", v22))
          {

LABEL_21:
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "expiryDate"));
            objc_msgSend(v31, "timeIntervalSinceNow");
            v33 = v32;

            if (v33 <= 0.0)
              v30 = 0;
            else
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "expiryDate"));
            v8 = v39;
            v29 = v25;
            goto LABEL_25;
          }
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "offerID"));
          v28 = objc_msgSend(v27, "isEqualToString:", v23);

          if (v28)
            goto LABEL_21;
        }
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
        v29 = 0;
        v30 = 0;
        v8 = v39;
        if (v20)
          continue;
        break;
      }
    }
    else
    {
      v29 = 0;
      v30 = 0;
    }
LABEL_25:

    a1 = v40;
    v6 = v41;
  }
  else
  {
    v29 = 0;
    v30 = 0;
  }
  if (!*(_BYTE *)(a1 + 56) || v30)
  {
    if (*(_BYTE *)(a1 + 56) || !v30)
      goto LABEL_33;
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 32)));
    objc_msgSend(v34, "setArcadeSubscriptionExpiration:handler:", v30, &stru_1002BB800);
  }
  else
  {
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 32)));
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", 0.0));
    objc_msgSend(v34, "setArcadeSubscriptionExpiration:handler:", v35, &stru_1002BB7E0);

  }
LABEL_33:
  if (!os_log_GKGeneral)
    v36 = (id)GKOSLoggers(v17);
  v37 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v49 = v29;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "checkAndUpdateArcadeSubscriberStatusWithHandler: updating arcade subscription state with entitlement %@", buf, 0xCu);
  }
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  v42[2] = sub_1000147CC;
  v42[3] = &unk_1002BB540;
  v43 = *(id *)(a1 + 48);
  objc_msgSend(v38, "updateArcadeSubscriptionState:completionHandler:", v29, v42);

LABEL_38:
}

uint64_t sub_1000147CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000147D8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_100014940(uint64_t a1, void *a2)
{
  id v3;
  GKFriendSuggester *v4;
  void *v5;
  GKFriendSuggesterSettingsProvider *v6;
  void *v7;
  void *v8;
  GKFriendSuggesterSettingsProvider *v9;
  GKFriendSuggester *v10;

  v3 = a2;
  v4 = [GKFriendSuggester alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contactIDs"));

  v6 = [GKFriendSuggesterSettingsProvider alloc];
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transport"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "storeBag"));
  v9 = -[GKFriendSuggesterSettingsProvider initWithStoreBag:](v6, "initWithStoreBag:", v8);
  v10 = -[GKFriendSuggester initWithDeniedContactIDs:settingsProvider:](v4, "initWithDeniedContactIDs:settingsProvider:", v5, v9);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100014A90(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKContactsIntegrationController sharedController](GKContactsIntegrationController, "sharedController"));
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKUtilityService.m", 904, "-[GKUtilityServicePrivate rerankedFriendSuggestionsHandlesWithHandler:]_block_invoke"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "transactionGroupWithName:", v6));

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100014C34;
  v17[3] = &unk_1002BB8A0;
  v8 = v7;
  v18 = v8;
  v19 = v3;
  v20 = v4;
  v9 = v4;
  v10 = v3;
  objc_msgSend(v8, "performOnManagedObjectContext:", v17);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "replyQueue"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100014CA8;
  v14[3] = &unk_1002BB758;
  v15 = v8;
  v16 = *(id *)(a1 + 40);
  v13 = v8;
  objc_msgSend(v13, "notifyOnQueue:block:", v12, v14);

}

void sub_100014C34(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  void (**v8)(void);

  v5 = *(void **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "rerankedHandlesWithContactsIntegrationController:context:", v6, a2));
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v7);

  v8[2]();
}

void sub_100014CA8(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100014D8C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "replyQueue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100014E44;
  v8[3] = &unk_1002BB450;
  v6 = *(id *)(a1 + 40);
  v9 = v3;
  v10 = v6;
  v7 = v3;
  dispatch_async(v5, v8);

}

void sub_100014E44(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[2];
  _QWORD v7[2];

  v6[0] = CFSTR("contactIDs");
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactIDs"));
  v6[1] = CFSTR("playerIDs");
  v7[0] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerIDs"));
  v7[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 2));
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);

}

uint64_t sub_1000150DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000150EC(_QWORD *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (void *)a1[4];
  v3 = a1[5];
  v7 = GKDeniedPlayerIdKey;
  v8 = v3;
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
  objc_msgSend(v4, "handleFriendSuggestionDenialWithNotificationPayload:error:handler:", v6, v5, a1[6]);

}

uint64_t sub_100015368(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100015378(_QWORD *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (void *)a1[4];
  v3 = a1[5];
  v7 = GKBlacklistedContactIdKey;
  v8 = v3;
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
  objc_msgSend(v4, "handleFriendSuggestionDenialWithNotificationPayload:error:handler:", v6, v5, a1[6]);

}

uint64_t sub_100015520(uint64_t a1)
{
  uint64_t result;
  _QWORD v3[4];
  id v4;

  if (!*(_QWORD *)(a1 + 32))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000155B4;
    v3[3] = &unk_1002BB918;
    v4 = *(id *)(a1 + 40);
    +[GKClientProxy enumerateClientsUsingBlock:](GKClientProxy, "enumerateClientsUsingBlock:", v3);

  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

id sub_1000155B4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "refreshContentsForDataType:userInfo:", 4, *(_QWORD *)(a1 + 32));
}

void sub_100015670(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_gkMapWithBlock:", &stru_1002BB958));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100015744;
  v8[3] = &unk_1002BB980;
  v6 = *(id *)(a1 + 40);
  v9 = v3;
  v10 = v6;
  v7 = v3;
  objc_msgSend(v5, "filterForContactIDsSupportingFriendingViaPushFromContactIDs:withCompletion:", v4, v8);

}

id sub_10001573C(id a1, GKFriendSuggestion *a2, unint64_t a3)
{
  return -[GKFriendSuggestion contactID](a2, "contactID", a3);
}

void sub_100015744(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR))
      sub_100016EA0((uint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[GKUtilityServicePrivate serializeFriendSuggestions:contactIDsSupportingPushFriending:](GKUtilityServicePrivate, "serializeFriendSuggestions:contactIDsSupportingPushFriending:", *(_QWORD *)(a1 + 32), v5));
  (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v17);

}

id sub_100015A68(id a1, GKFriendSuggestion *a2, unint64_t a3)
{
  return -[GKFriendSuggestion contactID](a2, "contactID", a3);
}

void sub_100015AE8(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactIDsFromSuggestions:", a2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithArray:](NSOrderedSet, "orderedSetWithArray:", v3));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "array"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100015BE0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKUtilityService.m", 1069, "-[GKUtilityServicePrivate fetchFriendSuggestionsWithHandler:]_block_invoke"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v4));

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100015D58;
  v15[3] = &unk_1002BB4A0;
  v15[4] = *(_QWORD *)(a1 + 32);
  v16 = v3;
  v6 = v5;
  v17 = v6;
  v7 = v3;
  objc_msgSend(v6, "perform:", v15);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "replyQueue"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100015FBC;
  v12[3] = &unk_1002BB450;
  v10 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v10;
  v11 = v6;
  objc_msgSend(v11, "notifyOnQueue:block:", v9, v12);

}

void sub_100015D58(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  GKRerankNetworkRequester *v5;
  void *v6;
  void *v7;
  GKRerankNetworkRequester *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100015F00;
  v15[3] = &unk_1002BB9F0;
  objc_copyWeak(&v16, &location);
  v4 = objc_retainBlock(v15);
  v5 = [GKRerankNetworkRequester alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v8 = -[GKRerankNetworkRequester initWithClientProxy:networkManager:transactionGroupProvider:](v5, "initWithClientProxy:networkManager:transactionGroupProvider:", v6, v7, v4);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKContactsIntegrationController sharedController](GKContactsIntegrationController, "sharedController"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100015F8C;
  v12[3] = &unk_1002BB9A8;
  v10 = *(void **)(a1 + 40);
  v13 = *(id *)(a1 + 48);
  v11 = v3;
  v14 = v11;
  objc_msgSend(v10, "suggestionsWithRerankRequester:contactsIntegrationController:transactionGroupProvider:handler:", v8, v9, v4, v12);

  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);

}

void sub_100015EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100015F00(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKUtilityService.m", 1076, "-[GKUtilityServicePrivate fetchFriendSuggestionsWithHandler:]_block_invoke_3"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transactionGroupWithName:", v2));

  return v3;
}

uint64_t sub_100015F8C(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100015FBC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_100016078(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKUtilityService.m", 1107, "-[GKUtilityServicePrivate getGameInviteFriendSuggestionsWithHandler:]_block_invoke"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v4));

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000161F0;
  v14[3] = &unk_1002BB590;
  v15 = v3;
  v6 = v5;
  v16 = v6;
  v7 = v3;
  objc_msgSend(v6, "perform:", v14);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "replyQueue"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000162B4;
  v11[3] = &unk_1002BB758;
  v12 = v6;
  v13 = *(id *)(a1 + 40);
  v10 = v6;
  objc_msgSend(v10, "notifyOnQueue:block:", v9, v11);

}

void sub_1000161F0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100016284;
  v6[3] = &unk_1002BB9A8;
  v4 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "gameInviteSuggestionsWithHandler:", v6);

}

uint64_t sub_100016284(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000162B4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t sub_100016374(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000164E4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  dispatch_queue_global_t global_queue;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  _QWORD v13[2];

  v3 = a2;
  v13[0] = GKBagKeyWidgetDrawerActivityLivePreview;
  v13[1] = GKBagKeyWidgetDrawerActivityTTL;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v13, 2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transport"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "storeBag"));
  global_queue = dispatch_get_global_queue(0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10001662C;
  v10[3] = &unk_1002BB478;
  v11 = *(id *)(a1 + 40);
  v12 = v3;
  v9 = v3;
  objc_msgSend(v6, "getValuesForKeys:queue:completion:", v4, v8, v10);

}

uint64_t sub_10001662C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100016684(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _UNKNOWN **v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _UNKNOWN **v10;
  _UNKNOWN **v11;
  uint64_t v12;
  void *v13;
  _UNKNOWN **v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = GKBagKeyWidgetDrawerActivityTTL;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", GKBagKeyWidgetDrawerActivityTTL));
  v5 = (void *)v4;
  if (v4)
    v6 = (_UNKNOWN **)v4;
  else
    v6 = &off_1002DB4D8;
  v14 = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v3));
  v9 = (void *)v8;
  if (v8)
    v10 = (_UNKNOWN **)v8;
  else
    v10 = &off_1002DB4D8;
  v11 = v10;

  v12 = *(_QWORD *)(a1 + 40);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, _UNKNOWN **, _UNKNOWN **))(v12 + 16))(v12, v13, v14, v11);

}

void sub_100016C0C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_100016C28(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100016C50(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 138412290;
  v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Not loading image with untrusted domain URL: %@", (uint8_t *)&v3, 0xCu);
  sub_100016C20();
}

void sub_100016CC4(_QWORD *a1, _QWORD *a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138412546;
  *(_QWORD *)&v3[4] = *a1;
  *(_WORD *)&v3[12] = 2112;
  *(_QWORD *)&v3[14] = *a2;
  sub_100016C0C((void *)&_mh_execute_header, (uint64_t)a2, a3, "Image failed to cache. nil url for: subdirectory: %@, filename: %@", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  sub_100016C20();
}

void sub_100016D3C()
{
  uint64_t v0;
  os_log_t v1;

  sub_100016C38();
  sub_100016C0C((void *)&_mh_execute_header, v0, v1, "Error deleting cached image (%@) %@");
  sub_100016C20();
}

void sub_100016D9C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot get threshold value without a bag.", v1, 2u);
}

void sub_100016DDC()
{
  uint64_t v0;
  os_log_t v1;

  sub_100016C38();
  sub_100016C0C((void *)&_mh_execute_header, v0, v1, "Failed to clear GameKit cache directory: %@, error: %@");
  sub_100016C20();
}

void sub_100016E3C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "checkAndUpdateArcadeSubscriberStatusWithHandler: Error updating arcade subscription status: %@ ", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_100016EA0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "Failed to retrieve friending-via-push contactIDs, error: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

id sub_100016F68(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "refreshContentsForDataType:userInfo:", *(unsigned int *)(a1 + 32), 0);
}

void sub_10001706C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *j;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];

  v2 = *(_QWORD *)(a1 + 48);
  if (v2 == 1)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("wasViewed == NO")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject objectsMatchingPredicate:context:](GKFriendRequestListEntryCacheObject, "objectsMatchingPredicate:context:", v11, v12));

    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v6 = v13;
    v14 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v16)
            objc_enumerationMutation(v6);
          objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i), "setWasViewed:", 1, (_QWORD)v21);
        }
        v15 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
      }
      while (v15);
    }
    goto LABEL_18;
  }
  if (!v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("wasViewed == NO")));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject objectsMatchingPredicate:context:](GKChallengeCacheObject, "objectsMatchingPredicate:context:", v3, v4));

    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v6 = v5;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v26;
      do
      {
        for (j = 0; j != v8; j = (char *)j + 1)
        {
          if (*(_QWORD *)v26 != v9)
            objc_enumerationMutation(v6);
          objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)j), "setWasViewed:", 1);
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
      }
      while (v8);
    }
LABEL_18:

  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController", (_QWORD)v21));
  objc_msgSend(v18, "setBadgeCount:forBundleID:badgeType:", 0, GKGameCenterIdentifier, *(_QWORD *)(a1 + 48));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "bundleIdentifier"));
  objc_msgSend(v18, "setBadgeCount:forBundleID:badgeType:", 0, v20, *(_QWORD *)(a1 + 48));

}

void sub_100017C98(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "appInitState"));
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("GKAppInitialized"));

  if ((v4 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(v5);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100027B5C();
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  (*(void (**)(uint64_t, id))(v7 + 16))(v7, objc_msgSend(v8, "isAppUnlistedAndDisallowed"));

}

uint64_t sub_100017FB8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_100018090(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000184B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  char v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100018598;
  v10[3] = &unk_1002BBAB0;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 40);
  v11 = v7;
  v12 = v8;
  v14 = *(_BYTE *)(a1 + 56);
  v13 = v3;
  v9 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-logout-user"), v6, v10);

}

void sub_100018598(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  id v21;
  void *v22;
  id v23;
  NSObject *v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int8x16_t v36;
  void **v37;
  uint64_t v38;
  void (*v39)(uint64_t, void *);
  void *v40;
  int8x16_t v41;
  uint8_t buf[4];
  id v43;

  v4 = a3;
  v5 = objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  if (!os_log_GKGeneral)
    v6 = (id)GKOSLoggers(v5);
  v7 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v43 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "gk-logout-user result:%@", buf, 0xCu);
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "credential"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "altDSID"));
  v10 = objc_msgSend(v9, "copy");

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "credential"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "DSID"));
  if (v12)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "credential"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "DSID"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v14, "longLongValue")));

  }
  else
  {
    v15 = 0;
  }

  v37 = _NSConcreteStackBlock;
  v38 = 3221225472;
  v39 = sub_100018A70;
  v40 = &unk_1002BB590;
  v36 = *(int8x16_t *)(a1 + 32);
  v16 = (id)v36.i64[0];
  v41 = vextq_s8(v36, v36, 8uLL);
  +[GKDispatchGroup waitUntilDone:](GKDispatchGroup, "waitUntilDone:", &v37);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v17)
  {
    if (!os_log_GKGeneral)
      v19 = (id)GKOSLoggers(v18);
    v20 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v43 = v10;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "telling authkit DSID %@ is no longer in use", buf, 0xCu);
    }
    v21 = objc_alloc_init((Class)AKAppleIDAuthenticationController);
    v22 = v21;
    if (v10)
    {
      if (!os_log_GKGeneral)
        v23 = (id)GKOSLoggers(v21);
      v24 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v43 = v10;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "GKAuth:telling authkit account is not in use using altDSID:%@", buf, 0xCu);
      }
      objc_msgSend(v22, "setAppleIDWithAltDSID:inUse:forService:", v10, 0, 6, *(_OWORD *)&v36, v37, v38, v39, v40);
    }
    else if (v15)
    {
      if (!os_log_GKGeneral)
        v25 = (id)GKOSLoggers(v21);
      v26 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v43 = v15;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "GKAuth:telling authkit account is not in use using DSID:%@", buf, 0xCu);
      }
      objc_msgSend(v22, "setAppleIDWithDSID:inUse:forService:", v15, 0, 6, *(_OWORD *)&v36, v37, v38, v39, v40);
    }
    objc_msgSend(*(id *)(a1 + 40), "notifyWidgetPlayerAuthenticationUpdated", *(_OWORD *)&v36);

  }
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[GKContactsIntegrationController sharedController](GKContactsIntegrationController, "sharedController", *(_OWORD *)&v36));
  objc_msgSend(v27, "clearCachesWithCompletionHandler:", &stru_1002BBA88);

  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "localPlayer"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "playerID"));
  +[GKClientProxy removeCacheForPlayerID:](GKClientProxy, "removeCacheForPlayerID:", v29);

  v31 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40), v30), "standardUserDefaults");
  v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
  objc_msgSend(v32, "removeObjectForKey:", CFSTR("GKLastPushTokenPlayerID"));
  objc_msgSend(v32, "removeObjectForKey:", CFSTR("GKLastPushTokenEnvironment"));
  objc_msgSend(v32, "removeObjectForKey:", CFSTR("GKLastPushTokenKey"));
  objc_msgSend(v32, "removeObjectForKey:", CFSTR("GKLastPushTokenDateKey"));
  if (*(_BYTE *)(a1 + 56))
    objc_msgSend(v32, "setBool:forKey:", 1, GKOptedOutOfGameCenter);
  else
    objc_msgSend(v32, "removeObjectForKey:", GKOptedOutOfGameCenter);
  objc_msgSend(v32, "synchronize");
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
  objc_msgSend(v33, "unbadgeAllApplications");

  v34 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v34, "reportEvent:type:", GKReporterDomainLogin, GKLoginSignOut);

  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ampController"));
  objc_msgSend(v35, "updateMetadataWithLocalPlayer:", 0);

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100018A70(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100018B3C;
  v9[3] = &unk_1002BB8F0;
  v6 = *(id *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v7;
  v12 = v3;
  v8 = v3;
  objc_msgSend(v4, "removeCredential:completionHandler:", v5, v9);

}

void sub_100018B3C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  _DWORD v11[2];

  v3 = a2;
  v4 = objc_msgSend(*(id *)(a1 + 32), "setError:", v3);
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v4);
  v6 = (void *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    v7 = v6;
    v11[0] = 67109120;
    v11[1] = objc_msgSend(v3, "code");
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKAccountService signOutPlayerWithOptOut: removeCred (error:%d)", (uint8_t *)v11, 8u);

  }
  v8 = objc_msgSend(*(id *)(a1 + 40), "setCredential:", 0);
  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v8);
  v10 = (void *)os_log_GKAccount;
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG))
    sub_100027BB4(v10);
  +[GKClientProxy authenticationDidChange](GKClientProxy, "authenticationDidChange");
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100018C90(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  id v4;

  v2 = a2;
  v3 = v2;
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v2);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_100027C44();

}

void sub_100018CF8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint8_t v6[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKAccountService signOutPlayerWithOptOut: notify", v6, 2u);
  }
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

}

void sub_10001910C(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "credential"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
  v8 = +[GKAccountServicePrivate lastWelcomeWhatsNewCopyVersionDisplayedForPlayerID:](GKAccountServicePrivate, "lastWelcomeWhatsNewCopyVersionDisplayedForPlayerID:", v7);

  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v9);
  v11 = (void *)os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    v12 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
    v15 = 138412290;
    v16 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "getLastWelcomeWhatsNewCopyVersionDisplayedForSignedInPlayerWithHandler: WhatsNew copy version displayed: %@", (uint8_t *)&v15, 0xCu);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v14);

  objc_msgSend(*(id *)(a1 + 40), "setError:", 0);
  v4[2](v4);

}

void sub_10001929C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = objc_msgSend(v5, "unsignedIntegerValue");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v3, v4);

}

void sub_1000196BC(id a1)
{
  id v1;

  if (!os_log_GKGeneral)
    v1 = (id)GKOSLoggers(a1);
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG))
    sub_100027C70();
}

void sub_10001987C(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "credential"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
  v8 = +[GKAccountServicePrivate lastPrivacyNoticeVersionDisplayedForPlayerID:](GKAccountServicePrivate, "lastPrivacyNoticeVersionDisplayedForPlayerID:", v7);

  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v9);
  v11 = (void *)os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    v12 = v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
    v15 = 138412290;
    v16 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "getLastPrivacyNoticeVersionDisplayedForSignedInPlayerWithHandler: Privacy notice version displayed: %@", (uint8_t *)&v15, 0xCu);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v8));
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v14);

  objc_msgSend(*(id *)(a1 + 40), "setError:", 0);
  v4[2](v4);

}

void sub_100019A0C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = objc_msgSend(v5, "unsignedIntegerValue");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v3, v4);

}

void sub_100019DC4(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  int v12;
  void *v13;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "credential"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKAccountServicePrivate lastPersonalizationVersionDisplayedForPlayerID:](GKAccountServicePrivate, "lastPersonalizationVersionDisplayedForPlayerID:", v7));

  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v9);
  v11 = os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    v12 = 138412290;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "getLastPersonalizationVersionDisplayedForSignedInPlayerWithHandler: personalization version displayed: %@", (uint8_t *)&v12, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v8);
  objc_msgSend(*(id *)(a1 + 40), "setError:", 0);
  v4[2](v4);

}

void sub_100019F18(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10001A0DC(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  int v12;
  void *v13;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "credential"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKAccountServicePrivate lastProfilePrivacyVersionDisplayedForPlayerID:](GKAccountServicePrivate, "lastProfilePrivacyVersionDisplayedForPlayerID:", v7));

  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v9);
  v11 = os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    v12 = 138412290;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "getLastProfilePrivacyVersionDisplayedForSignedInPlayerWithHandler: profile privacy version displayed: %@", (uint8_t *)&v12, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v8);
  objc_msgSend(*(id *)(a1 + 40), "setError:", 0);
  v4[2](v4);

}

void sub_10001A230(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10001A5D8(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  int v12;
  void *v13;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "credential"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKAccountServicePrivate lastFriendSuggestionsVersionDisplayedForPlayerID:](GKAccountServicePrivate, "lastFriendSuggestionsVersionDisplayedForPlayerID:", v7));

  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v9);
  v11 = os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    v12 = 138412290;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "getLastFriendSuggestionsVersionDisplayedForSignedInPlayerWithHandler: profile privacy version displayed: %@", (uint8_t *)&v12, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v8);
  objc_msgSend(*(id *)(a1 + 40), "setError:", 0);
  v4[2](v4);

}

void sub_10001A72C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10001AAD4(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  int v12;
  void *v13;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "credential"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKAccountServicePrivate lastContactsIntegrationConsentVersionDisplayedForPlayerID:](GKAccountServicePrivate, "lastContactsIntegrationConsentVersionDisplayedForPlayerID:", v7));

  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v9);
  v11 = os_log_GKOnboarding;
  if (os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO))
  {
    v12 = 138412290;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "getLastContactsIntegrationConsentVersionDisplayedForSignedInPlayerWithHandler: Contacts Integration Consent version displayed: %@", (uint8_t *)&v12, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v8);
  objc_msgSend(*(id *)(a1 + 40), "setError:", 0);
  v4[2](v4);

}

void sub_10001AC28(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

uint64_t sub_10001B20C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_10001BB8C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  id v10;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10001BC30;
  v7[3] = &unk_1002BBB20;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v8 = v4;
  v9 = v5;
  v10 = v3;
  v6 = v3;
  +[GKCloudGameSession primaryPlayerWithHandler:](GKCloudGameSession, "primaryPlayerWithHandler:", v7);

}

void sub_10001BC30(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG))
  {
    sub_100027C9C();
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v5)
  {
LABEL_5:
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bundleIdentifier"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[GKCloudGameSession isCloudDriveEnabledForBundleID:](GKCloudGameSession, "isCloudDriveEnabledForBundleID:", v10)));
    objc_msgSend(*(id *)(a1 + 32), "setResult:", v11);

  }
LABEL_6:
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10001BD50(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = objc_msgSend(v5, "BOOLValue");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v3, v4);

}

void sub_10001BFB4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKChallengeServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001C04C;
  v6[3] = &unk_1002BBB48;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "getCountOfChallengesWithHandler:", v6);

}

uint64_t sub_10001C04C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10001C058(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  void (**v12)(_QWORD);

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v6, v7));

  if ((objc_msgSend(v8, "supportsTurnBasedMultiplayer") & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10001C194;
    v11[3] = &unk_1002BBA68;
    v12 = v4;
    objc_msgSend(v9, "issueRequest:bagKey:clientProxy:handler:", 0, CFSTR("gk-tb-get-turn-counts"), v10, v11);

  }
  else
  {
    v4[2](v4);
  }

}

uint64_t sub_10001C194(uint64_t a1, void *a2, uint64_t a3)
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v13;
  id obj;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  if (a2 && !a3)
  {
    v13 = a1;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKey:", CFSTR("turn-counts")));
    v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v16 != v5)
            objc_enumerationMutation(obj);
          v7 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("turn-count")));
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("game-descriptor")));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("bundle-id")));
          if (v10)
          {
            v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
            objc_msgSend(v11, "setBadgeCount:forBundleID:badgeType:", objc_msgSend(v8, "unsignedIntegerValue"), v10, 2);

          }
        }
        v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v4);
    }

    a1 = v13;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10001C348(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
  objc_msgSend(v3, "badgeAllApplications");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleIdentifier"));
  objc_msgSend(v3, "registerBadgePermissionForBundleID:completionHandler:", v2, &stru_1002BBBB0);

}

void sub_10001C534(uint64_t a1)
{
  id v2;
  NSObject *v3;
  _BOOL8 v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  NSObject *v20;
  _BOOL8 v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  id v28;
  _QWORD v29[5];
  id v30;
  id v31;
  id v32;
  id v33;
  char v34;
  _QWORD v35[4];
  _QWORD v36[4];
  uint8_t buf[4];
  uint64_t v38;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  v4 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKAccountService _authenticateUsername", buf, 2u);
  }
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v4);
  v6 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v38 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "_authenticateUsername:%@", buf, 0xCu);
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKAccountService.m", 776, "-[GKAccountServicePrivate _authenticateUsername:password:altDSID:validateOnly:handler:]_block_invoke"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v8));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForServerCode:reason:](NSError, "userErrorForServerCode:reason:", 5000, 0));
  objc_msgSend(v9, "setError:", v10);

  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 40);
    if (v13)
    {
      if (*(_QWORD *)(a1 + 48))
        v12 = *(_QWORD *)(a1 + 48);
      v35[0] = CFSTR("username");
      v35[1] = CFSTR("password");
      v36[0] = v12;
      v36[1] = v13;
      v35[2] = CFSTR("validatePasswordOnly");
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72)));
      v36[2] = v14;
      v35[3] = CFSTR("udid");
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[GKDevice currentDevice](GKDevice, "currentDevice"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "udid"));
      v36[3] = v16;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v36, v35, 4));

      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10001C970;
      v29[3] = &unk_1002BBC50;
      v29[4] = *(_QWORD *)(a1 + 56);
      v30 = v17;
      v31 = v9;
      v32 = *(id *)(a1 + 32);
      v33 = *(id *)(a1 + 48);
      v34 = *(_BYTE *)(a1 + 72);
      v18 = v17;
      objc_msgSend(v31, "perform:", v29);

    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    if (!os_log_GKGeneral)
      v19 = (id)GKOSLoggers(v11);
    v20 = os_log_GKTrace;
    v21 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
    if (v21)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "_authenticateUsername: notify", buf, 2u);
    }
    if (!os_log_GKGeneral)
      v22 = (id)GKOSLoggers(v21);
    v23 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "_authenticateUsername: notify", buf, 2u);
    }
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "replyQueue"));
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_10001D2F8;
    v26[3] = &unk_1002BB450;
    v28 = *(id *)(a1 + 64);
    v27 = v9;
    objc_msgSend(v27, "notifyOnQueue:block:", v25, v26);

  }
}

void sub_10001C970(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  char v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transport"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10001CA5C;
  v9[3] = &unk_1002BBC28;
  v5 = *(_QWORD *)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 56);
  v6 = *(id *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 32);
  v12 = v6;
  v13 = v7;
  v15 = *(_BYTE *)(a1 + 72);
  v14 = v3;
  v8 = v3;
  objc_msgSend(v4, "postRequest:forBagKey:response:", v5, CFSTR("gk-authenticate-user"), v9);

}

void sub_10001CA5C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  _QWORD v39[4];
  id v40;
  id v41;
  id v42;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100027D04();
  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "representedItem"));
  v10 = (void *)v9;
  if (v9)
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v9);
    v12 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "_authenticateUsername:Result present for post request call for gk-authenticate-user", buf, 2u);
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", GKRequestStatusKey));
    v14 = objc_msgSend(v13, "integerValue");

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", GKPlayerIDKey));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("alias")));
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("auth-token")));
    v18 = (void *)v17;
    v38 = v14;
    if (v15 && v17)
    {
      v36 = v5;
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredential internalRepresentation](GKPlayerCredential, "internalRepresentation"));
      v20 = v16;
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKLocalPlayerInternal internalRepresentation](GKLocalPlayerInternal, "internalRepresentation"));
      objc_msgSend(v21, "setPlayerID:", v15);
      objc_msgSend(v21, "setAccountName:", *(_QWORD *)(a1 + 40));
      v37 = v20;
      objc_msgSend(v21, "setAlias:", v20);
      if (*(_QWORD *)(a1 + 48))
        objc_msgSend(v19, "setAltDSID:");
      +[GKContactsIntegrationUserSettings applySettingsToObject:fromResults:](GKContactsIntegrationUserSettings, "applySettingsToObject:fromResults:", v21, v10);
      objc_msgSend(v19, "setPlayerInternal:", v21);
      objc_msgSend(v19, "setAuthenticationToken:", v18);
      objc_msgSend(v19, "setAccountName:", *(_QWORD *)(a1 + 40));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
      objc_msgSend(v19, "setEnvironment:", objc_msgSend(v22, "environment"));

      if (v14 == (id)5029)
        v23 = 12;
      else
        v23 = 14;
      objc_msgSend(v19, "setScope:", v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKUtilityServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 56)));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "credential"));
      objc_msgSend(v25, "setAuthenticationToken:", v18);

      v26 = *(void **)(a1 + 32);
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_10001CEFC;
      v39[3] = &unk_1002BB4A0;
      v40 = v19;
      v41 = v35;
      v42 = v26;
      v27 = v35;
      v28 = v19;
      objc_msgSend(v26, "perform:", v39);
      objc_msgSend(*(id *)(a1 + 56), "notifyWidgetPlayerAuthenticationUpdated");
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v28, CFSTR("credential"));

      v5 = v36;
    }
    else
    {
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

      if (v31)
        goto LABEL_30;
      if (!os_log_GKGeneral)
        v33 = (id)GKOSLoggers(v32);
      v37 = v16;
      v34 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "_authenticateUsername:Server Error when posting request for gk-authenticat-user", buf, 2u);
      }
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForServerCode:reason:](NSError, "userErrorForServerCode:reason:", 3, CFSTR("no error, but missing playerID or token")));
      objc_msgSend(*(id *)(a1 + 32), "setError:", v21);
    }

    v16 = v37;
LABEL_30:
    if (*(_BYTE *)(a1 + 72) && v38 == (id)5029)
      objc_msgSend(*(id *)(a1 + 32), "setError:", 0);

    goto LABEL_34;
  }
  if (!os_log_GKGeneral)
    v29 = (id)GKOSLoggers(0);
  v30 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "_authenticateUsername:No result for Post request call", buf, 2u);
  }
LABEL_34:
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_10001CEFC(id *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id *v8;
  id *v9;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  id v27;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "altDSID"));

  if (v4)
  {
    v7 = a1[4];
    v6 = a1[5];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10001D2C4;
    v18[3] = &unk_1002BB6E8;
    v8 = &v19;
    v9 = &v20;
    v19 = a1[6];
    v20 = v3;
    v10 = v3;
    objc_msgSend(v6, "setPrimaryCredential:completionHandler:", v7, v18);
  }
  else
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v5);
    v12 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v13 = a1[4];
      *(_DWORD *)buf = 138412290;
      v27 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "missing altDSID for credential:%@ will try to get it from IDMS", buf, 0xCu);
    }
    v14 = a1[4];
    v15 = a1[5];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10001D0E4;
    v21[3] = &unk_1002BBC00;
    v8 = &v22;
    v16 = v14;
    v22 = v16;
    v9 = &v23;
    v23 = a1[5];
    v24 = a1[6];
    v25 = v3;
    v17 = v3;
    objc_msgSend(v15, "getAltDSIDFromIDMSForCredential:completionHandler:", v16, v21);

  }
}

void sub_10001D0E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint8_t buf[4];
  uint64_t v18;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v6)
    goto LABEL_5;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  v6 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v6)
  {
    sub_100027D64();
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    if (!v5)
      goto LABEL_11;
  }
  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v6);
  v10 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v11 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v18 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "fixed the credential (%@) with a missing altDSID", buf, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 32), "setAltDSID:", v5);
LABEL_11:
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10001D290;
  v14[3] = &unk_1002BB6E8;
  v15 = *(id *)(a1 + 48);
  v16 = *(id *)(a1 + 56);
  objc_msgSend(v12, "setPrimaryCredential:completionHandler:", v13, v14);

}

uint64_t sub_10001D290(uint64_t a1, uint64_t a2)
{
  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_10001D2C4(uint64_t a1, uint64_t a2)
{
  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10001D2F8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("credential")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10001D404(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "authenticationToken"));
  (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_10001D5B8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint64_t *v21;
  _QWORD v22[6];
  uint8_t buf[8];
  _QWORD v24[5];
  id v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = sub_10001D904;
  v31 = sub_10001D914;
  v32 = (id)objc_claimAutoreleasedReturnValue(+[GKAuthenticateResponse internalRepresentation](GKAuthenticateResponse, "internalRepresentation"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playerInternal"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playerID"));
  objc_msgSend((id)v28[5], "setPlayerID:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKAccountService.m", 1102, "-[GKAccountServicePrivate _constructAuthenticationResponseWithError:handler:]_block_invoke"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v5));

  objc_msgSend(v6, "setError:", *(_QWORD *)(a1 + 40));
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", GKServerStatusCode));

    if (v9 && objc_msgSend(v9, "integerValue") == (id)5047)
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10001D91C;
      v24[3] = &unk_1002BBCC8;
      v24[4] = *(_QWORD *)(a1 + 32);
      v25 = v6;
      v26 = &v27;
      objc_msgSend(v25, "perform:", v24);

    }
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));

  if (!v10)
  {
    if (!os_log_GKGeneral)
      v12 = (id)GKOSLoggers(v11);
    v13 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "_constructAuthenticationResponseWithError: no credential -- clearing appInit state", buf, 2u);
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    objc_msgSend(v14, "setAppInitState:", CFSTR("GKAppInitUnknown"));

  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10001DAA0;
  v22[3] = &unk_1002BBD18;
  v22[4] = *(_QWORD *)(a1 + 32);
  v22[5] = &v27;
  objc_msgSend(v6, "perform:", v22);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "replyQueue"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10001DB8C;
  v18[3] = &unk_1002BBD40;
  v20 = *(id *)(a1 + 48);
  v21 = &v27;
  v17 = v6;
  v19 = v17;
  objc_msgSend(v17, "notifyOnQueue:block:", v16, v18);

  _Block_object_dispose(&v27, 8);
}

void sub_10001D8E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001D904(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001D914(uint64_t a1)
{

}

void sub_10001D91C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transport"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "storeBag"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10001DA14;
  v11[3] = &unk_1002BBCA0;
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v13 = v3;
  v14 = v9;
  v12 = v8;
  v10 = v3;
  objc_msgSend(v5, "getURLForKey:queue:handler:", CFSTR("ds-password-change-url"), v7, v11);

}

void sub_10001DA14(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (v5)
    objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  if (v6)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setPasswordChangeURL:", v6);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setPasswordChangeRequired:", 1);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10001DAA0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10001DB1C;
  v7[3] = &unk_1002BBCF0;
  v5 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v8 = v3;
  v9 = v4;
  v6 = v3;
  objc_msgSend(v5, "_fetchLoginDisabledWithHandler:", v7);

}

uint64_t sub_10001DB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setLoginDisabled:", a2);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setSuppressLoginSheet:", a3);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setLoginBannerDisabled:", a4);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10001DB8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);

}

id sub_10001DD14(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "bundleID"));
  v4 = objc_msgSend(v2, "isEqualToString:", v3);

  return v4;
}

id sub_10001DE9C(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "gameRecord"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "game"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleID"));
  v6 = objc_msgSend(v2, "isEqualToString:", v5);

  return v6;
}

void sub_10001E334(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id v9;
  _BOOL8 v10;
  void *v11;
  void *v12;
  id v13;

  v5 = a3;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKey:", CFSTR("auth-token")));
  v7 = (void *)v6;
  v8 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v9 = (id)GKOSLoggers(v6);
    v8 = os_log_GKGeneral;
  }
  v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (v10)
  {
    sub_100027E24();
    if (v7)
      goto LABEL_5;
  }
  else if (v7)
  {
LABEL_5:
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));
    objc_msgSend(v12, "setAuthenticationToken:", v7);
    objc_msgSend(v12, "setScope:", objc_msgSend(v12, "scope") | 2);
    objc_msgSend(v11, "setCredential:completionHandler:", v12, &stru_1002BBDB0);

    goto LABEL_11;
  }
  if (!os_log_GKGeneral)
    v13 = (id)GKOSLoggers(v10);
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    sub_100027DC4();
LABEL_11:

}

void sub_10001E478(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  id v4;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (!os_log_GKGeneral)
      v4 = (id)GKOSLoggers(v2);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100027E88();
  }

}

void sub_10001E750(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10001E770(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "credential"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10001E850;
  v11[3] = &unk_1002BBE48;
  v6 = *(id *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 64);
  v12 = v6;
  v17 = v7;
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v13 = v8;
  v14 = v9;
  v15 = *(id *)(a1 + 56);
  v16 = v3;
  v10 = v3;
  objc_msgSend(v4, "initializeWithCredential:completionHandler:", v5, v11);

}

void sub_10001E850(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;

  v18 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "representedItem"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  v7 = objc_msgSend(v5, "code");

  if (v7 != (id)15)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("status")));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend(v8, "integerValue");

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10001EA10;
    v19[3] = &unk_1002BBE20;
    v20 = *(id *)(a1 + 40);
    v21 = *(id *)(a1 + 32);
    v10 = v6;
    v22 = v10;
    v11 = v18;
    v12 = *(_QWORD *)(a1 + 48);
    v23 = v11;
    v24 = v12;
    objc_msgSend(v9, "performBlockAndWait:", v19);

    v13 = *(void **)(a1 + 56);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "replyQueue"));
    objc_msgSend(v13, "sendPushTokenWithReplyQueue:", v15);

    if (v10)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("renew-auth-token")));
      v17 = objc_msgSend(v16, "BOOLValue");

      if (v17)
        objc_msgSend(*(id *)(a1 + 48), "renewAuthToken");
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_10001EA10(id *a1)
{
  unsigned __int8 v2;
  void *v3;
  void *v4;
  id v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;

  v2 = objc_msgSend(a1[4], "isGameCenter");
  v41 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "bundleIdentifier"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "context"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v41, v3));

  v5 = v4;
  if (a1[6])
  {
    objc_msgSend(a1[7], "TTL");
    if (v6 == 0.0)
    {
      v7 = 0;
    }
    else
    {
      objc_msgSend(a1[7], "TTL");
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:"));
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "objectForKey:", CFSTR("game-metadata")));
    objc_msgSend(v5, "updateWithServerRepresentation:expirationDate:", v8, v7);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name"));

  if (!v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[8], "clientProxy"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle _gkBundleWithPID:](NSBundle, "_gkBundleWithPID:", objc_msgSend(v10, "pid")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_gkLocalizedName"));
    objc_msgSend(v5, "setName:", v12);

  }
  v13 = a1[8];
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "context"));
  objc_msgSend(v13, "_syncPlayerOnboardingParametersInManagedObjectContext:withServerResult:", v14, a1[7]);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "context"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v15));

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "representedItem"));
  +[GKContactsIntegrationUserSettings applySettingsToObject:fromResults:](GKContactsIntegrationUserSettings, "applySettingsToObject:fromResults:", v16, v17);

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "contactsAssociationID"));
  v20 = objc_msgSend(v16, "contactsIntegrationConsent");
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "serviceLastUpdatedTimestamp"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[8], "clientProxy"));
  objc_msgSend(v18, "setContactAssociationID:contactIntegrationConsent:serviceLastUpdateTimestamp:forEnvironment:forcefully:completionHandler:", v19, v20, v21, objc_msgSend(v22, "environment"), 0, &stru_1002BBDF8);

  if ((v2 & 1) != 0)
  {
    v23 = a1[8];
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "context"));
    objc_msgSend(v23, "_postLaunchEventsForGame:moc:", v5, v24);
    v25 = v5;
  }
  else
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "objectForKey:", CFSTR("game-metadata")));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("bundle-id")));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "context"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "playerID"));
    +[GKCachingUtils ensureGameInGamesPlayed:playerID:bundleID:gameDescriptor:updateWidget:](GKCachingUtils, "ensureGameInGamesPlayed:playerID:bundleID:gameDescriptor:updateWidget:", v27, v28, v26, v24, 0);

    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleID"));
    objc_msgSend(v16, "setLastPlayedGame:", v29);

    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v16, "setLastPlayedDate:", v30);

    v31 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameRecordCacheObject recordForGame:playerProfile:](GKGameRecordCacheObject, "recordForGame:playerProfile:", v5, v16));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "lastPlayedDate"));
    objc_msgSend(v31, "setLastPlayedDate:", v32);

    if (a1[6])
      objc_msgSend(v31, "updateWithServerRepresentation:");
    v25 = v31;

    v33 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileService, "serviceFromService:", a1[8]));
    objc_msgSend(v33, "setOcelotStateForCurrentApp");
    v34 = a1[8];
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "context"));
    objc_msgSend(v34, "_addGameListEntryForGame:profile:moc:", v5, v16, v35);

    v36 = a1[8];
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "context"));
    objc_msgSend(v36, "_addAchievementPointsEntryForGame:record:profile:moc:", v5, v25, v16, v37);

    v38 = a1[8];
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "context"));
    objc_msgSend(v38, "_postLaunchEventsForGame:moc:", v5, v39);

  }
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "internalRepresentation"));
  objc_msgSend(a1[5], "setResult:", v40);

}

void sub_10001EEB8(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  id v4;

  v2 = a2;
  v3 = v2;
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v2);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_100027EE8();

}

void sub_10001EF24(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *, _QWORD))(v2 + 16))(v2, v4, v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));

}

void sub_10001F534(uint64_t a1, uint64_t a2)
{
  id v3;

  if (a2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 32)));
    objc_msgSend(v3, "setPrivacyNoticeVersion:withCompletionHandler:", a2, &stru_1002BBEB8);

  }
}

void sub_10001F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001F7DC(uint64_t a1)
{
  id v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;

  v2 = *(id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", *(_QWORD *)(a1 + 40)));
  v4 = objc_msgSend(v3, "isValid");
  **(_BYTE **)(a1 + 64) = v4;
  if (v4)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "internalRepresentation"));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

  }
  else
  {
    v8 = objc_claimAutoreleasedReturnValue(+[GKLocalPlayerInternal archivedProfile](GKLocalPlayerInternal, "archivedProfile"));
    v9 = a1 + 56;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v8;

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "accountName"));
    v13 = objc_msgSend(v12, "isEqual:", *(_QWORD *)(a1 + 32));

    if (v13)
    {
      if (!os_log_GKGeneral)
        v15 = (id)GKOSLoggers(v14);
      v16 = (void *)os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
        sub_100027F4C(v9, v16);
    }
    else
    {
      if (!os_log_GKGeneral)
        v17 = (id)GKOSLoggers(v14);
      v18 = (void *)os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
        sub_10002806C(a1 + 56, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "credential"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "playerInternal"));

      v21 = objc_claimAutoreleasedReturnValue(+[GKLocalPlayerInternal internalRepresentation](GKLocalPlayerInternal, "internalRepresentation"));
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v23 = *(void **)(v22 + 40);
      *(_QWORD *)(v22 + 40) = v21;

      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setAccountName:", v2);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "alias"));
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setAlias:", v24);

      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "playerID"));
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setPlayerID:", v25);

      if (!os_log_GKGeneral)
        v27 = (id)GKOSLoggers(v26);
      v28 = (void *)os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
        sub_100027FE0(v9, v28);

    }
  }

}

void sub_10001FB58(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001FBE4;
  v6[3] = &unk_1002BBF30;
  v8 = *(_QWORD *)(a1 + 40);
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "getFriendIDsForPlayer:commonFriends:handler:", 0, 0, v6);

}

void sub_10001FBE4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  v9 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_1000280F8(v9);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10001FDBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint8_t v11[8];
  _QWORD v12[4];
  id v13;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (v3 = *(_QWORD *)(a1 + 40)) != 0)
  {
    v4 = *(void **)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10001FF1C;
    v12[3] = &unk_1002BBF80;
    v13 = *(id *)(a1 + 64);
    objc_msgSend(v4, "_authenticateUsername:password:altDSID:validateOnly:handler:", v2, v3, v5, 0, v12);
    v6 = v13;
  }
  else
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(a1);
    v8 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "_fetchCredentialsForUsername: no username or password; attempt to grab credentials",
        v11,
        2u);
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "primaryCredentialForEnvironment:", objc_msgSend(v10, "environment")));

    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }

}

void sub_10001FF1C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  int v26;
  void *v27;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v6)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(0);
    v10 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v11 = v10;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "altDSID"));
      v26 = 138412290;
      v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "telling authkit altDSID %@ is in use", (uint8_t *)&v26, 0xCu);

    }
    v13 = objc_alloc_init((Class)AKAppleIDAuthenticationController);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "altDSID"));

    if (v14)
    {
      if (!os_log_GKGeneral)
        v16 = (id)GKOSLoggers(v15);
      v17 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v18 = v17;
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "altDSID"));
        v26 = 138412290;
        v27 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GKAuth:telling authkit account is in use using altDSID:%@", (uint8_t *)&v26, 0xCu);

      }
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "altDSID"));
      objc_msgSend(v13, "setAppleIDWithAltDSID:inUse:forService:", v20, 1, 6);
    }
    else
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "DSID"));

      if (!v21)
      {
LABEL_23:

        goto LABEL_24;
      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "DSID"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v22, "longLongValue")));

      if (!os_log_GKGeneral)
        v24 = (id)GKOSLoggers(v23);
      v25 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v26 = 138412290;
        v27 = v20;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "GKAuth:telling authkit account is in use using DSID:%@", (uint8_t *)&v26, 0xCu);
      }
      objc_msgSend(v13, "setAppleIDWithDSID:inUse:forService:", v20, 1, 6);
    }

    goto LABEL_23;
  }
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    sub_100028184();
LABEL_24:
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000202B4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKGameServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v1, "getGamesForPlayer:includeInstalled:handler:", 0, 1, &stru_1002BBFC0);

}

void sub_100020300(id a1, NSArray *a2, NSString *a3, NSError *a4)
{
  NSArray *v6;
  NSString *v7;
  NSError *v8;
  NSError *v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  NSObject *v14;
  NSError *v15;
  int v16;
  NSError *v17;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (v8)
  {
    if (!os_log_GKGeneral)
      v10 = (id)GKOSLoggers(v8);
    v11 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v16 = 138412290;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Could not preload stats for the current player due to:%@", (uint8_t *)&v16, 0xCu);
    }
  }
  else
  {
    if (!os_log_GKGeneral)
      v12 = (id)GKOSLoggers(0);
    v13 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v14 = v13;
      v15 = (NSError *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", -[NSArray count](v6, "count")));
      v16 = 138412290;
      v17 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "preloaded stats for %@ games for the current player", (uint8_t *)&v16, 0xCu);

    }
  }

}

void sub_100020684(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  char v27;
  _QWORD v28[4];
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v3 = *(unsigned __int8 *)(a1 + 72);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  objc_msgSend(v4, "setIsGameCenterEnabledClient:", v3);

  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 48))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "signInVisibilityManager"));
    objc_msgSend(v6, "reset");

    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKAccountService.m", 1639, "-[GKAccountServicePrivate authenticatePlayerWithUsername:password:altDSID:isGame:usingFastPath:handler:]_block_invoke"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v8));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKDevice currentDevice](GKDevice, "currentDevice"));
  v11 = objc_msgSend(v10, "isGameKitAvailable");

  if ((v11 & 1) != 0)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
    v13 = objc_msgSend(v12, "isGameCenterDisabled");

    if (!v13)
    {
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_100020948;
      v28[3] = &unk_1002BC010;
      v16 = *(id *)(a1 + 40);
      v17 = *(_QWORD *)(a1 + 32);
      v29 = v16;
      v30 = v17;
      v31 = *(id *)(a1 + 48);
      v32 = *(id *)(a1 + 56);
      v33 = v9;
      objc_msgSend(v33, "perform:", v28);

      goto LABEL_11;
    }
    v14 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKInternalErrorDomain, 103, 0));
  }
  else
  {
    v14 = objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 10, 0));
  }
  v15 = (void *)v14;
  objc_msgSend(v9, "setError:", v14);

LABEL_11:
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "replyQueue"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100020CC4;
  v22[3] = &unk_1002BC058;
  v19 = *(_QWORD *)(a1 + 32);
  v23 = v9;
  v24 = v19;
  v25 = v2;
  v27 = v7;
  v26 = *(id *)(a1 + 64);
  v20 = v2;
  v21 = v9;
  objc_msgSend(v21, "notifyOnQueue:block:", v18, v22);

}

void sub_100020948(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint8_t buf[4];
  uint64_t v17;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "fetch credentials with username:%@ ", buf, 0xCu);
  }
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100020A94;
  v13[3] = &unk_1002BBFE8;
  v14 = *(id *)(a1 + 64);
  v15 = v4;
  v12 = v4;
  objc_msgSend(v8, "_fetchCredentialsForUsername:password:altDSID:handler:", v9, v10, v11, v13);

}

void sub_100020A94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  _BOOL8 v10;
  id v11;
  NSObject *v12;
  _BOOL8 v13;
  id v14;
  id v15;
  NSObject *v16;
  int v17;
  _QWORD v18[2];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  v9 = os_log_GKDaemon;
  v10 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
  if (v10)
  {
    v17 = 138412290;
    v18[0] = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "authenticateWithCompletionHandler:fetched credentials for username. Credential:%@", (uint8_t *)&v17, 0xCu);
  }
  if (!os_log_GKGeneral)
    v11 = (id)GKOSLoggers(v10);
  v12 = os_log_GKDaemon;
  v13 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
  if (v13)
  {
    v17 = 138412290;
    v18[0] = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "error fetching credentials: %@", (uint8_t *)&v17, 0xCu);
  }
  if (v7)
  {
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v13);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000281E4();
  }
  else
  {
    if (!os_log_GKGeneral)
      v15 = (id)GKOSLoggers(v13);
    v16 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      v17 = 67109376;
      LODWORD(v18[0]) = v5 != 0;
      WORD2(v18[0]) = 1024;
      *(_DWORD *)((char *)v18 + 6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "authenticatePlayerWithUsername: creds(%d) error(%d)", (uint8_t *)&v17, 0xEu);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  if (v5)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, CFSTR("credential"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100020CC4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("credential")));
  if (v3)
  {
    v4 = (void *)objc_opt_class(*(_QWORD *)(a1 + 40), v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "serviceWithTransport:forClient:credential:", 0, v5, v3));

    objc_msgSend(*(id *)(a1 + 40), "setCredential:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKStoreBag storeBagForEnvironment:](GKStoreBag, "storeBagForEnvironment:", objc_msgSend(*(id *)(a1 + 48), "environment")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataTransport transportWithBag:clientProxy:credential:](GKDataTransport, "transportWithBag:clientProxy:credential:", v7, *(_QWORD *)(a1 + 48), v3));
    objc_msgSend(*(id *)(a1 + 40), "setTransport:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "bundleIdentifier"));
    objc_msgSend(v9, "registerBadgePermissionForBundleID:completionHandler:", v10, &stru_1002BC030);

    if (*(_BYTE *)(a1 + 64))
      objc_msgSend(*(id *)(a1 + 40), "updateBadgeCounts");
    objc_msgSend(v6, "_continueAuthenticationWithHandler:", *(_QWORD *)(a1 + 56));

  }
  else
  {
    CFAbsoluteTimeGetCurrent();
    v12 = *(void **)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 48);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    objc_msgSend(v12, "notifyClient:authenticationDidChangeWithError:handler:", v11, v13, *(_QWORD *)(a1 + 56));

    if (!os_log_GKGeneral)
      v15 = (id)GKOSLoggers(v14);
    v16 = (void *)os_log_GKPerf;
    if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
      sub_100028244(v16);
  }

}

void sub_100020F4C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100020FC0;
  v3[3] = &unk_1002BC080;
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v1, "_constructAuthenticationResponseWithError:handler:", v2, v3);

}

void sub_100020FC0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000282E0();
  }
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    (*(void (**)(uint64_t, id, void *))(v9 + 16))(v9, v5, v7);

}

void sub_10002118C(uint64_t a1, void *a2)
{
  id v3;
  CFAbsoluteTime Current;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  CFAbsoluteTime v14;

  v3 = a2;
  Current = CFAbsoluteTimeGetCurrent();
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  v9 = +[GKPlayerProfileCacheObject piecesToLoadForFamiliarity:](GKPlayerProfileCacheObject, "piecesToLoadForFamiliarity:", 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000212B0;
  v12[3] = &unk_1002BC0A8;
  v14 = Current;
  v13 = v3;
  v11 = v3;
  objc_msgSend(v8, "loadProfileForPlayer:pieces:context:handler:", v7, v9, v10, v12);

}

void sub_1000212B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  id v7;
  _BOOL8 v8;
  id v9;
  void *v10;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v3 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v3)
      sub_100028498();
  }
  v6 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v7 = (id)GKOSLoggers(v3);
    v6 = os_log_GKGeneral;
  }
  v8 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
  if (v8)
    sub_10002846C();
  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v8);
  v10 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_1000283E0(v10);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10002149C(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v3 = a2;
  v4 = v3;
  v5 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v6 = (id)GKOSLoggers(v3);
    v5 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    sub_1000284F8((uint64_t)a1, v5);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100021580;
  v10[3] = &unk_1002BC120;
  v7 = (void *)a1[5];
  v11 = (id)a1[4];
  v8 = v7;
  v14 = a1[7];
  v12 = v8;
  v13 = v4;
  v9 = v4;
  objc_msgSend(v11, "_initGameForLaunchedApp:withHandler:", 1, v10);

}

void sub_100021580(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  unsigned int v17;
  id v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  NSObject *v26;
  id v27;
  void *v28;
  NSObject *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void **v37;
  uint64_t v38;
  void (*v39)(uint64_t, void *);
  void *v40;
  uint64_t v41;
  id v42;
  _QWORD v43[4];
  id v44;
  unsigned int v45;
  uint8_t buf[4];
  void *v47;

  v7 = a2;
  v8 = a3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "adamID"));
  v12 = objc_msgSend(v11, "integerValue");

  if (!v12)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "adamID"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    objc_msgSend(v15, "setAdamID:", v14);

  }
  if (v9)
  {
    v16 = objc_msgSend(v9, "scope");
    v17 = v16;
    if (a4 <= 5028)
    {
      if (!a4)
      {
LABEL_24:
        v17 |= 2u;
LABEL_29:
        v24 = objc_msgSend(v9, "scope");
        if (v17 != (_DWORD)v24)
        {
          v29 = os_log_GKGeneral;
          if (!os_log_GKGeneral)
          {
            v30 = (id)GKOSLoggers(v24);
            v29 = os_log_GKGeneral;
          }
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            sub_100028658(v17, v29);
          v31 = *(void **)(a1 + 40);
          v43[0] = _NSConcreteStackBlock;
          v43[1] = 3221225472;
          v43[2] = sub_1000219E8;
          v43[3] = &unk_1002BC0F8;
          v44 = v9;
          v45 = v17;
          objc_msgSend(v31, "perform:", v43);

        }
        goto LABEL_35;
      }
      if (a4 != 5000)
      {
LABEL_25:
        if (!os_log_GKGeneral)
          v27 = (id)GKOSLoggers(v16);
        v28 = (void *)os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
          sub_1000286F4(v28, a4);
        goto LABEL_29;
      }
      if (!os_log_GKGeneral)
        v25 = (id)GKOSLoggers(v16);
      v26 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "server error coming back from appInit. Player is unauthenticated. Removing the authorization flag", buf, 2u);
      }
    }
    else if (a4 != 5029 && a4 != 5170)
    {
      if (a4 == 5172)
      {
        if (!os_log_GKGeneral)
          v18 = (id)GKOSLoggers(v16);
        v19 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v20 = v19;
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[GCFLocalizedStrings ERROR_APP_UNLISTED](_TtC20GameCenterFoundation19GCFLocalizedStrings, "ERROR_APP_UNLISTED"));
          *(_DWORD *)buf = 138412290;
          v47 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Disabling GameCenter for this game. %@", buf, 0xCu);

        }
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
        objc_msgSend(v22, "setIsAppUnlistedAndDisallowed:", 1);

        goto LABEL_24;
      }
      goto LABEL_25;
    }
    v17 &= ~2u;
    goto LABEL_29;
  }
  if (!os_log_GKGeneral)
    v23 = (id)GKOSLoggers(v13);
  v24 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v24)
    sub_10002862C();
LABEL_35:
  if (!os_log_GKGeneral)
    v32 = (id)GKOSLoggers(v24);
  v33 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_1000285A0(v33);
  v37 = _NSConcreteStackBlock;
  v38 = 3221225472;
  v39 = sub_100021AA4;
  v40 = &unk_1002BB590;
  v34 = *(void **)(a1 + 40);
  v41 = *(_QWORD *)(a1 + 32);
  v35 = v7;
  v42 = v35;
  objc_msgSend(v34, "perform:", &v37);
  if (a4 == 5172 || !a4)
  {
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy", v37, v38, v39, v40, v41));
    objc_msgSend(v36, "setAppInitState:", CFSTR("GKAppInitialized"));

  }
  objc_msgSend(*(id *)(a1 + 40), "setError:", v8, v37, v38, v39, v40, v41);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000219E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setScope:", *(unsigned int *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v5 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100021A98;
  v7[3] = &unk_1002BC0D0;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "setCredential:completionHandler:", v5, v7);

}

uint64_t sub_100021A98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100021AA4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v5 = *(_QWORD *)(a1 + 40);
  v6 = objc_msgSend(v4, "environment");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100021B50;
  v8[3] = &unk_1002BB540;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "setCurrentGame:serverEnvironment:reply:", v5, v6, v8);

}

uint64_t sub_100021B50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100021C98(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  unsigned int v6;
  id v7;

  v7 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleIdentifier"));
  v6 = objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 40), "notifyClient:playerAuthenticatedWithCredential:authenticatingBundleID:", v7, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    *a3 = 1;
  }

}

void sub_100021E3C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = objc_msgSend(*(id *)(a1 + 40), "length");
    if (v7)
      v7 = objc_msgSend(*(id *)(a1 + 32), "sendAuthenticationDidChangeNotificationWithAuthenticatingBundleID:completionHandler:", *(_QWORD *)(a1 + 40), &stru_1002BC1D0);
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v7);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100028798();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setCurrentGame:serverEnvironment:reply:", v5, objc_msgSend(*(id *)(a1 + 32), "environment"), &stru_1002BC190);
    objc_msgSend(*(id *)(a1 + 32), "setAppInitState:", CFSTR("GKAppInitialized"));
    objc_msgSend(*(id *)(a1 + 32), "sendAuthenticationDidChangeNotificationWithAuthenticatingBundleID:completionHandler:", *(_QWORD *)(a1 + 40), &stru_1002BC1B0);
  }

}

void sub_100022014(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  __CFString *v5;
  uint64_t v6;
  __CFString *v7;
  void *v8;
  uint64_t v9;
  char isKindOfClass;
  _QWORD v11[4];
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(id *)(a1 + 32) == v3)
  {
    v8 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100022108;
    v11[3] = &unk_1002BBB70;
    v12 = v3;
    objc_msgSend(v8, "perform:", v11);

  }
  else
  {
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appInitState"));
    v7 = v5;
    if (v5 != CFSTR("GKAppInitUnknown"))
    {

LABEL_6:
      objc_msgSend(*(id *)(a1 + 48), "notifyClient:playerAuthenticatedWithCredential:authenticatingBundleID:", v4, *(_QWORD *)(a1 + 56), 0);
      goto LABEL_7;
    }
    v9 = objc_opt_class(GKSpoofingClientProxy, v6);
    isKindOfClass = objc_opt_isKindOfClass(v4, v9);

    if ((isKindOfClass & 1) != 0)
      goto LABEL_6;
  }
LABEL_7:

}

void sub_100022108(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100022188;
  v6[3] = &unk_1002BB540;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "sendAuthenticationDidChangeNotificationWithAuthenticatingBundleID:completionHandler:", 0, v6);

}

uint64_t sub_100022188(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100022560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 40), a3);
}

void sub_100022578(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  _BOOL8 v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  double v23;
  double v24;
  void *v25;
  _BOOL8 v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[4];
  id v32;
  char v33;

  v3 = a2;
  if (!v3)
    v3 = objc_alloc_init((Class)NSDictionary);
  v4 = objc_msgSend(v3, "integerValueFromKey:defaultValue:", GKFullscreenSignInSheetLimit, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sheetConfig"));
  objc_msgSend(v5, "setLimit:", v4);

  v6 = objc_msgSend(v3, "integerValueFromKey:defaultValue:", GKFullscreenSignInSheetInitialLimit, -1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sheetConfig"));
  objc_msgSend(v7, "setInitialLimit:", v6);

  objc_msgSend(v3, "doubleValueFromKey:defaultValue:", GKFullscreenSignInSheetCooldown, 604800.0);
  v9 = v8;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sheetConfig"));
  objc_msgSend(v10, "setResetPeriod:", v9);

  objc_msgSend(v3, "doubleValueFromKey:defaultValue:", GKFullscreenSignInSheetMinTimeBetween, 0.0);
  v12 = v11;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sheetConfig"));
  objc_msgSend(v13, "setMinTimeBetweenAppearances:", v12);

  v14 = objc_msgSend(v3, "integerValueFromKey:defaultValue:", GKFullscreenSignInSheetEnabled, 0) != 0;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sheetConfig"));
  objc_msgSend(v15, "setEnabled:", v14);

  v16 = objc_msgSend(v3, "integerValueFromKey:defaultValue:", GKSignInBannerLimit, -1);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bannerConfig"));
  objc_msgSend(v17, "setLimit:", v16);

  v18 = objc_msgSend(v3, "integerValueFromKey:defaultValue:", GKSignInBannerInitialLimit, -1);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bannerConfig"));
  objc_msgSend(v19, "setInitialLimit:", v18);

  objc_msgSend(v3, "doubleValueFromKey:defaultValue:", GKSignInBannerCooldown, -1.0);
  v21 = v20;
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bannerConfig"));
  objc_msgSend(v22, "setResetPeriod:", v21);

  objc_msgSend(v3, "doubleValueFromKey:defaultValue:", GKSignInBannerMinTimeBetween, 0.0);
  v24 = v23;
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bannerConfig"));
  objc_msgSend(v25, "setMinTimeBetweenAppearances:", v24);

  v26 = objc_msgSend(v3, "integerValueFromKey:defaultValue:", GKSignInBannerEnabled, 0) != 0;
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bannerConfig"));
  objc_msgSend(v27, "setEnabled:", v26);

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "signInVisibilityManager"));
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100022894;
  v31[3] = &unk_1002BC240;
  v30 = *(_QWORD *)(a1 + 32);
  v32 = *(id *)(a1 + 40);
  v33 = *(_BYTE *)(a1 + 48);
  objc_msgSend(v29, "promptsDisabledWithConfig:scope:handler:", v30, 1, v31);

}

uint64_t sub_100022894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 40), a3);
}

id sub_100022980(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_continueAuthenticationWithLoginDisabled:handler:", a2, *(_QWORD *)(a1 + 40));
}

void sub_100022F4C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  objc_msgSend(v1, "refreshContentsForDataType:userInfo:", 12, 0);

}

void sub_100022F84(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerInternal"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playerID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v3, v4));

  v5 = v6;
  if (v6)
  {
    +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:](GKPlayerProfileCacheObject, "buildFamiliarilyLookupForProfile:", v6);
    v5 = v6;
  }

}

void sub_100023028(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  NSString *v10;
  id v11;
  int v12;
  unsigned __int8 v13;
  const __CFString *v14;
  const __CFString *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  _QWORD v37[5];
  id v38;
  id v39;
  id v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint8_t buf[4];
  id v47;
  __int16 v48;
  const __CFString *v49;
  __int16 v50;
  const __CFString *v51;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_100028824(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v42 = 0;
  v43 = &v42;
  v44 = 0x2020000000;
  v45 = 0;
  v37[2] = sub_100023468;
  v37[3] = &unk_1002BC2B8;
  v6 = *(void **)(a1 + 56);
  v37[4] = *(_QWORD *)(a1 + 48);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v38 = v6;
  v39 = *(id *)(a1 + 40);
  v41 = &v42;
  v40 = *(id *)(a1 + 32);
  v7 = objc_msgSend(v5, "performBlockAndWait:", v37);
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v7);
  v9 = os_log_GKDaemon;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = NSStringFromSelector(*(SEL *)(a1 + 80));
    v11 = (id)objc_claimAutoreleasedReturnValue(v10);
    v12 = *((unsigned __int8 *)v43 + 24);
    v13 = objc_msgSend(*(id *)(a1 + 56), "scope");
    v14 = CFSTR("YES");
    if (v12)
      v15 = CFSTR("YES");
    else
      v15 = CFSTR("NO");
    *(_DWORD *)buf = 138412802;
    v47 = v11;
    v48 = 2112;
    v49 = v15;
    if ((v13 & 2) == 0)
      v14 = CFSTR("NO");
    v50 = 2112;
    v51 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%@ profileIsValid:%@ PlayerIsAuthorized:%@", buf, 0x20u);

  }
  if (*((_BYTE *)v43 + 24) && (v16 = *(void **)(a1 + 56)) != 0)
    v17 = (objc_msgSend(v16, "scope") >> 1) & 1;
  else
    v17 = 0;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v17));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v18, CFSTR("authenticated"));

  if (*(_QWORD *)(a1 + 56))
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
    objc_msgSend(v21, "badgeAllApplications");

    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    +[GKClientProxy performDelayedRequestsForEnvironment:](GKClientProxy, "performDelayedRequestsForEnvironment:", objc_msgSend(v22, "environment"));

  }
  if ((_DWORD)v17)
  {
    v23 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 48), v20), "standardUserDefaults");
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    objc_msgSend(v24, "removeObjectForKey:", GKOptedOutOfGameCenter);

    v25 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 48)));
    v26 = *(void **)(a1 + 32);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1000235F0;
    v31[3] = &unk_1002BC010;
    v32 = *(id *)(a1 + 56);
    v27 = v25;
    v28 = *(_QWORD *)(a1 + 48);
    v33 = v27;
    v34 = v28;
    v35 = *(id *)(a1 + 64);
    v36 = *(id *)(a1 + 32);
    objc_msgSend(v26, "perform:", v31);

  }
  else
  {
    v29 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v30 = (id)GKOSLoggers(v19);
      v29 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      sub_1000287F8();
    objc_msgSend(*(id *)(a1 + 64), "setAppInitState:", CFSTR("GKAppInitUnknown"));
  }

  _Block_object_dispose(&v42, 8);
}

void sub_10002343C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_100023468(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountName"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_authenticatedLocalPlayerWithUsername:inContext:isValid:", v3, v4, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));

  if (!os_log_GKGeneral)
    v7 = (id)GKOSLoggers(v6);
  v8 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v13 = 138412290;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "authenticated LocalPlayerInternal:%@", (uint8_t *)&v13, 0xCu);
  }
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerID"));
  if (v9)
  {
    v10 = (void *)v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "alias"));

    if (v11)
      +[GKLocalPlayerInternal archiveProfile:](GKLocalPlayerInternal, "archiveProfile:", v5);
  }
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v5, CFSTR("localPlayer"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ampController"));
    objc_msgSend(v12, "updateMetadataWithLocalPlayer:", v5);

  }
}

void sub_1000235F0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerInternal"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerID"));

  v6 = *(void **)(a1 + 40);
  if (v5)
  {
    v15 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
  }
  else
  {
    v7 = &__NSArray0__struct;
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100023748;
  v10[3] = &unk_1002BB4C8;
  v8 = *(void **)(a1 + 56);
  v10[4] = *(_QWORD *)(a1 + 48);
  v11 = v8;
  v12 = *(id *)(a1 + 32);
  v13 = *(id *)(a1 + 64);
  v14 = v3;
  v9 = v3;
  objc_msgSend(v6, "preloadInstalledGamesScopedPlayerIDs:completion:", v7, v10);
  if (v5)

}

uint64_t sub_100023748(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "standardUserDefaults");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v4, "removeObjectForKey:", GKOptedOutOfGameCenter);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v5, "postNotificationName:object:", GKPrimaryCredentialDidChangeNotification, 0);

  objc_msgSend(*(id *)(a1 + 32), "_notifyAllClientsPlayerAuthenticatedFromClient:withCredential:replyGroup:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "notifyWidgetPlayerAuthenticationUpdated");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_1000237D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100023880;
  v7[3] = &unk_1002BC308;
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "_constructAuthenticationResponseWithError:handler:", v5, v7);

}

uint64_t sub_100023880(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  objc_msgSend(v5, "setError:", a3);
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("response"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000238E0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("response")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  if (v5 || !*(_QWORD *)(a1 + 40))
  {

  }
  else if (objc_msgSend(*(id *)(a1 + 48), "isGameCenter"))
  {
    _objc_msgSend(*(id *)(a1 + 56), "_preloadDataForGameCenterTabs");
  }
}

void sub_100023D74(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v5 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100023E18;
  v7[3] = &unk_1002BC0D0;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "setPrimaryCredential:completionHandler:", v5, v7);

}

void sub_100023E18(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    sub_1000288B4();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100023E9C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100023F18;
  v6[3] = &unk_1002BB540;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "updateClientSettings:", v6);

}

uint64_t sub_100023F18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100023F24(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v12 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v2, v3));

  +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:](GKPlayerProfileCacheObject, "buildFamiliarilyLookupForProfile:", v12);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "gameDescriptor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v5, v6));

  if (*(_QWORD *)(a1 + 56))
    objc_msgSend(v12, "setAlias:");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "playerInternal"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "playerID"));
  objc_msgSend(*(id *)(a1 + 64), "setPlayerID:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "internalRepresentation"));
  objc_msgSend(*(id *)(a1 + 40), "setResult:", *(_QWORD *)(a1 + 64));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "internalRepresentation"));
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v11, CFSTR("game"));

  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v10, CFSTR("player"));
}

void sub_100024094(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100024130;
  v6[3] = &unk_1002BC308;
  v4 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "authenticatePlayerWithUsername:password:handler:", 0, 0, v6);

}

uint64_t sub_100024130(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100024188(uint64_t a1)
{
  id v2;
  void *v3;
  int8x16_t v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  int8x16_t v8;
  id v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100024268;
  v7[3] = &unk_1002BB4A0;
  v4 = *(int8x16_t *)(a1 + 32);
  v2 = (id)v4.i64[0];
  v8 = vextq_s8(v4, v4, 8uLL);
  v9 = *(id *)(a1 + 48);
  objc_msgSend(v2, "perform:", v7);
  v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10002433C;
  v5[3] = &unk_1002BBB70;
  v6 = v3;
  objc_msgSend(v6, "perform:", v5);

}

void sub_100024268(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientProxy"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", CFSTR("game")));
  v6 = objc_msgSend(a1[6], "currentEnvironment");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100024330;
  v8[3] = &unk_1002BB540;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "setCurrentGame:serverEnvironment:reply:", v5, v6, v8);

}

uint64_t sub_100024330(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002433C(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(void);

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("player")));
  if (v3)
    +[GKClientProxy authenticationDidChange](GKClientProxy, "authenticationDidChange");
  v4[2]();

}

void sub_1000243A4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100024800(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v5 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000248A4;
  v7[3] = &unk_1002BC0D0;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "setPrimaryCredential:completionHandler:", v5, v7);

}

void sub_1000248A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    sub_1000288B4();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100024928(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000249A4;
  v6[3] = &unk_1002BB540;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "updateClientSettings:", v6);

}

uint64_t sub_1000249A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000249B0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v12 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v2, v3));

  +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:](GKPlayerProfileCacheObject, "buildFamiliarilyLookupForProfile:", v12);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "gameDescriptor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v5, v6));

  if (*(_QWORD *)(a1 + 56))
    objc_msgSend(v12, "setAlias:");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "playerInternal"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "playerID"));
  objc_msgSend(*(id *)(a1 + 64), "setPlayerID:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "internalRepresentation"));
  objc_msgSend(*(id *)(a1 + 40), "setResult:", *(_QWORD *)(a1 + 64));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "internalRepresentation"));
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v11, CFSTR("game"));

  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v10, CFSTR("player"));
}

void sub_100024B20(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100024BBC;
  v6[3] = &unk_1002BC308;
  v4 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "authenticatePlayerWithUsername:password:handler:", 0, 0, v6);

}

uint64_t sub_100024BBC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100024C14(uint64_t a1)
{
  id v2;
  void *v3;
  int8x16_t v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  int8x16_t v8;
  id v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100024CF4;
  v7[3] = &unk_1002BB4A0;
  v4 = *(int8x16_t *)(a1 + 32);
  v2 = (id)v4.i64[0];
  v8 = vextq_s8(v4, v4, 8uLL);
  v9 = *(id *)(a1 + 48);
  objc_msgSend(v2, "perform:", v7);
  v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100024DC8;
  v5[3] = &unk_1002BBB70;
  v6 = v3;
  objc_msgSend(v6, "perform:", v5);

}

void sub_100024CF4(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientProxy"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", CFSTR("game")));
  v6 = objc_msgSend(a1[6], "currentEnvironment");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100024DBC;
  v8[3] = &unk_1002BB540;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "setCurrentGame:serverEnvironment:reply:", v5, v6, v8);

}

uint64_t sub_100024DBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100024DC8(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(void);

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("player")));
  if (v3)
    +[GKClientProxy authenticationDidChange](GKClientProxy, "authenticationDidChange");
  v4[2]();

}

void sub_100024E30(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100025074(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100025124;
  v8[3] = &unk_1002BBFE8;
  v6 = *(_QWORD *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "_authenticateUsername:password:altDSID:validateOnly:handler:", v5, v6, 0, 1, v8);

}

uint64_t sub_100025124(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100025150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
    (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);

  }
}

void sub_100025E74(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v5 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v2, v3));

  +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:](GKPlayerProfileCacheObject, "buildFamiliarilyLookupForProfile:", v5);
  if (*(_QWORD *)(a1 + 48))
    objc_msgSend(v5, "setAlias:");
  if (*(_QWORD *)(a1 + 56))
    objc_msgSend(v5, "setFirstName:");
  v4 = v5;
  if (*(_QWORD *)(a1 + 64))
  {
    objc_msgSend(v5, "setLastName:");
    v4 = v5;
  }

}

void sub_100025F20(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  NSObject *v9;
  int v10;
  void *v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v4);
  v6 = os_log_GKDaemon;
  v7 = (id)os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
  if ((_DWORD)v7)
  {
    v10 = 138412290;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Account setup (Player did not change): current profile:%@", (uint8_t *)&v10, 0xCu);
  }
  if (*(_QWORD *)(a1 + 40))
    v7 = objc_msgSend(v3, "setAlias:");
  if (*(_QWORD *)(a1 + 48))
    v7 = objc_msgSend(v3, "setFirstName:");
  if (*(_QWORD *)(a1 + 56))
    v7 = objc_msgSend(v3, "setLastName:");
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v7);
  v9 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v10 = 138412290;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Account setup (Player did not change): updated profile:%@", (uint8_t *)&v10, 0xCu);
  }

}

void sub_100026240(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v10 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "credential"));
  v5 = objc_msgSend(v4, "copy");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v5, "setEnvironment:", objc_msgSend(v7, "environment"));

  if (*(_QWORD *)(a1 + 48))
    objc_msgSend(v5, "setAccountName:");
  if (*(_QWORD *)(a1 + 56))
  {
    objc_msgSend(v10, "setAlias:");
    objc_msgSend(v6, "setAlias:", *(_QWORD *)(a1 + 56));
  }
  if (*(_QWORD *)(a1 + 64))
  {
    objc_msgSend(v10, "setFirstName:");
    objc_msgSend(v6, "setFirstName:", *(_QWORD *)(a1 + 64));
  }
  if (*(_QWORD *)(a1 + 72))
  {
    objc_msgSend(v10, "setLastName:");
    objc_msgSend(v6, "setLastName:", *(_QWORD *)(a1 + 72));
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "credential"));
  objc_msgSend(v3, "replaceCredential:withCredential:completionHandler:", v8, v5, 0);

  v9 = *(_QWORD *)(a1 + 80);
  if (v9)
    (*(void (**)(void))(v9 + 16))();

}

void sub_10002659C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  if (!os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
  {
    if (v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  sub_100028914();
  if (!v4)
  {
LABEL_5:
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    objc_msgSend(v6, "setAppInitState:", CFSTR("GKAppInitialized"));

  }
LABEL_6:
  +[GKClientProxy authenticationDidChange](GKClientProxy, "authenticationDidChange");
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v4);

}

void sub_100026948(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  _QWORD v12[6];

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v12[0] = GKMaxPlayersP2P;
  v12[1] = GKMaxPlayersHosted;
  v12[2] = GKMaxPlayersTurnBased;
  v12[3] = GKMaxGameStateSizeTurnBased;
  v12[4] = GKExchangeDataMaximumSize;
  v12[5] = GKExchangeMaxPerPlayer;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v12, 6));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100026AB4;
  v9[3] = &unk_1002BB478;
  v10 = *(id *)(a1 + 48);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "getValuesForKeys:queue:completion:", v5, v7, v9);

}

uint64_t sub_100026AB4(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = GKMaxPlayersP2P;
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v3));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, CFSTR("GKMaxPlayersP2P"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", GKMaxPlayersHosted));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("GKMaxPlayersHosted"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", GKMaxPlayersTurnBased));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("GKMaxPlayersTurnBased"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", GKMaxGameStateSizeTurnBased));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, CFSTR("GKMaxGameStateSizeTurnBased"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", GKExchangeDataMaximumSize));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("GKExchangeDataMaximumSize"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", GKExchangeMaxPerPlayer));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, CFSTR("GKExchangeMaxPerPlayer"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_100026C24(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allValues"));
  objc_msgSend(v2, "updatePreferencesFromBag:", v3);

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100026E5C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localPlayer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerID"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100026F2C;
  v10[3] = &unk_1002BC498;
  v7 = *(id *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v11 = v7;
  v12 = v8;
  v13 = v3;
  v9 = v3;
  objc_msgSend(v4, "getAccountAgeCategoryForPlayerID:withCompletion:", v6, v10);

}

void sub_100026F2C(id *a1, int a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  uint8_t buf[16];

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v5);
    v8 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "checkActivitySharingRepromptWithCompletion: No, the user is under 18.", buf, 2u);
    }
    objc_msgSend(a1[4], "setResult:", &__kCFBooleanFalse);
    (*((void (**)(void))a1[6] + 2))();
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "transport"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "localPlayer"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileServicePrivate, "serviceWithTransport:forClient:localPlayer:", v9, v10, v11));

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000270BC;
    v14[3] = &unk_1002BC470;
    v15 = a1[4];
    v13 = a1[6];
    v16 = a1[5];
    v17 = v13;
    objc_msgSend(v12, "getProfilePrivacyWithHandler:", v14);

  }
}

void sub_1000270BC(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;
  uint8_t buf[8];
  _QWORD v18[2];

  if (a2 == 2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "transport"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "localPlayer"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKUtilityService, "serviceWithTransport:forClient:localPlayer:", v3, v4, v5));

    v18[0] = GKActivitySharingRepromptLimit;
    v18[1] = GKActivitySharingRepromptMinDaysBetween;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 2));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000272A8;
    v13[3] = &unk_1002BC448;
    v8 = *(id *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(void **)(a1 + 48);
    v14 = v8;
    v15 = v9;
    v16 = v10;
    objc_msgSend(v6, "getStoreBagValuesForKeys:handler:", v7, v13);

  }
  else
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(a1);
    v12 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "checkActivitySharingRepromptWithCompletion: No, the user's profile privacy is not Only You.", buf, 2u);
    }
    objc_msgSend(*(id *)(a1 + 32), "setResult:", &__kCFBooleanFalse);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_1000272A8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  if (!v3)
    v3 = &__NSDictionary0__struct;
  v6 = v3;
  v4 = objc_msgSend(v3, "integerValueFromKey:defaultValue:", GKActivitySharingRepromptLimit, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "shouldCadencedActivitySharingRepromptWithLimit:minDaysBetween:", v4, objc_msgSend(v6, "integerValueFromKey:defaultValue:", GKActivitySharingRepromptMinDaysBetween, 30))));
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v5);

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100027368(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, objc_msgSend(v2, "BOOLValue"));

}

void sub_100027994(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void sub_1000279BC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

id sub_100027A18(id a1)
{
  return a1;
}

id sub_100027A20(uint64_t a1, void *a2)
{
  return a2;
}

void sub_100027A34(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_100027A40(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

double sub_100027A50()
{
  return CFAbsoluteTimeGetCurrent();
}

void sub_100027A70(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t sub_100027A7C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100027A88()
{
  uint64_t v0;

  return v0;
}

void sub_100027A94()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100016C38();
  sub_100027A70((void *)&_mh_execute_header, v0, (uint64_t)v0, "Failure to save profile to %@ error %@", v1);
  sub_100016C20();
}

void sub_100027AFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "error while decoding GKPlayerInternal archive:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100027B5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A04();
}

void sub_100027B88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKAccountService notifyWidgetPlayerAuthenticationUpdated: Requesting a timeline reload.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100027BB4(void *a1)
{
  NSObject *v1;
  id v2;
  _DWORD v3[2];

  v2 = a1;
  v3[0] = 67109120;
  v3[1] = objc_msgSend((id)sub_100027A88(), "code");
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "GKAccountService signOutPlayerWithOptOut: removeCred (error:%d)", (uint8_t *)v3, 8u);

  sub_100016C20();
}

void sub_100027C44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Finished clearing contacts cache while signing out", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100027C70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Finished setting up metrics controller after privacy notice acceptance.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100027C9C()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100016C38();
  sub_100027994((void *)&_mh_execute_header, v0, (uint64_t)v0, "Retrieved primary player from game session: %@, error: %@", v1);
  sub_100016C20();
}

void sub_100027D04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "_authenticateUsername:Failed to post Request for gk-authenticate-user. Error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100027D64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error when trying to get the full credential:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100027DC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error renewing auth token: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100027E24()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "GKAccountService renewAuthToken server error:%@", v2);
  sub_100016C20();
}

void sub_100027E88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error from setCredential:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100027EE8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "Updated contacts integration info as part of app init. error: %@", v2);
  sub_100016C20();
}

void sub_100027F4C(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];

  v3 = a2;
  v4 = objc_msgSend((id)sub_100027A88(), "conciseDescription");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v2, v6, "Cached local player incomplete, using archived local player (%@)", v7);

  sub_1000279E0();
}

void sub_100027FE0(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  sub_100027A20(a1, a2);
  v3 = objc_msgSend((id)sub_100027A7C(), "conciseDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279EC();
  sub_100027994((void *)&_mh_execute_header, v2, v5, "local player djinned up:%@ for %@", v6);

  sub_1000279A0();
}

void sub_10002806C(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  sub_100027A20(a1, a2);
  v3 = objc_msgSend((id)sub_100027A7C(), "conciseDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279EC();
  sub_100027994((void *)&_mh_execute_header, v2, v5, "Cached local player incomplete, archived local player (%@) doesn't match %@", v6);

  sub_1000279A0();
}

void sub_1000280F8(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  int v3[6];

  sub_100027A18(a1);
  sub_100027A50();
  v3[0] = 136315394;
  sub_1000279CC();
  sub_100027994((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_1000279E0();
}

void sub_100028184()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "_fetchCredentialsForUsername: failed to authenticate username and password. Error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000281E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "authenticatePlayerWithUsername: failed to fetch creds. Error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100028244(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  int v3[6];

  v1 = sub_100027A18(a1);
  CFAbsoluteTimeGetCurrent();
  v3[0] = 136315394;
  sub_1000279CC();
  sub_100027994((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

}

void sub_1000282E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "authenticatePlayerWithUsername:Failed send authentication did change notification. Error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100028340(void *a1, void *a2)
{
  NSObject *v2;
  const char *v4;
  NSString *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint8_t v9[24];

  sub_100027A18(a1);
  v4 = (const char *)sub_100027A7C();
  v5 = NSStringFromSelector(v4);
  objc_claimAutoreleasedReturnValue(v5);
  v6 = objc_msgSend((id)sub_100027A88(), "credential");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  sub_100027A58();
  sub_100027994((void *)&_mh_execute_header, v2, v8, "%@ cred:%@", v9);

  sub_1000279A0();
}

void sub_1000283E0(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  int v3[6];

  sub_100027A18(a1);
  sub_100027A50();
  v3[0] = 136315394;
  sub_1000279CC();
  sub_100027994((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_1000279E0();
}

void sub_10002846C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Local player profile has been loaded, cached and is available", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100028498()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Encountered error when attempting to load profile: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000284F8(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v4;
  const char *v5;
  NSString *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint8_t v10[24];

  v4 = a2;
  v5 = (const char *)sub_100027A7C();
  v6 = NSStringFromSelector(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));
  sub_100027A58();
  sub_100027994((void *)&_mh_execute_header, v2, v9, "%@ cred:%@", v10);

  sub_1000279A0();
}

void sub_1000285A0(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  int v3[6];

  sub_100027A18(a1);
  sub_100027A50();
  v3[0] = 136315394;
  sub_1000279CC();
  sub_100027994((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_1000279E0();
}

void sub_10002862C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "EVIL: _initGame without player logged in", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100028658(unsigned int a1, void *a2)
{
  NSObject *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v3 = a1;
  v4 = a2;
  v6 = 134218240;
  v7 = v3;
  v8 = 2048;
  v9 = objc_msgSend((id)sub_100027A88(), "scope");
  sub_100027994((void *)&_mh_execute_header, v2, v5, "_initGame login scope change new:%lX old:%lX", (uint8_t *)&v6);

  sub_1000279A0();
}

void sub_1000286F4(void *a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
  sub_1000279EC();
  sub_100027A70((void *)&_mh_execute_header, v3, v5, "EVIL: don't know how to handle server error code (%@) for server error %@", v6);

  sub_1000279A0();
}

void sub_100028798()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error attempting to init game: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000287F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "unauthenticated -- clearing appInit state", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100028824(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  int v3[6];

  sub_100027A18(a1);
  sub_100027A50();
  v3[0] = 136315394;
  sub_1000279CC();
  sub_100027994((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_1000279E0();
}

void sub_1000288B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "error while trying to set primary credential:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100028914()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "setLoginStatus: error from setCredential:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100028C68(id *a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectAtIndexedSubscript:", a3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", v5));
  if (!v6)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(a1[6], "count")));
    objc_msgSend(a1[5], "setObject:forKeyedSubscript:", v6, v5);
  }
  objc_msgSend(v6, "addObject:", v7);

}

void sub_100028D18(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKGameServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100028DE0;
  v7[3] = &unk_1002BC540;
  v5 = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = v3;
  v6 = v3;
  objc_msgSend(v4, "getGameMetadataForBundleIDs:handler:", v5, v7);

}

void sub_100028DE0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100028E70;
  v7[3] = &unk_1002BC518;
  v8 = *(id *)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  objc_msgSend(a2, "enumerateObjectsUsingBlock:", v7);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v4, v5, v6);

}

void sub_100028E70(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleIdentifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100028F30;
  v9[3] = &unk_1002BC4F0;
  v7 = *(id *)(a1 + 40);
  v10 = v3;
  v11 = v7;
  v8 = v3;
  objc_msgSend(v6, "enumerateObjectsUsingBlock:", v9);

}

uint64_t sub_100028F30(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(a1 + 32));
}

void sub_10002901C(id a1, GKPlayerInternal *a2, GKGameInternal *a3)
{
  -[GKPlayerInternal setLastPlayedGame:](a2, "setLastPlayedGame:", a3);
}

void sub_100029100(id a1, GKPlayerInternal *a2, GKGameInternal *a3)
{
  -[GKPlayerInternal setLastChallengedGame:](a2, "setLastChallengedGame:", a3);
}

void sub_1000294D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100029508(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  _QWORD v45[4];
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  char v52;
  char v53;
  id v54;
  id v55;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
    goto LABEL_42;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject fetchRequestForContext:](GKPlayerProfileCacheObject, "fetchRequestForContext:", v5));
  objc_msgSend(v9, "setFetchLimit:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate > %@ && ((availablePieces & %d) = %d) && playerID in %@"), v8, *(unsigned __int8 *)(a1 + 100), *(unsigned __int8 *)(a1 + 100), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v9, "setPredicate:", v10);

  v55 = 0;
  v11 = objc_msgSend(v5, "countForFetchRequest:error:", v9, &v55);
  v12 = v55;
  v13 = v12;
  if (v12)
  {
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v12);
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
      sub_100034FBC();
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v11 == v7;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v11 == v7;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    v15 = v13;
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate != nil && ((availablePieces & %d) = %d) && playerID in %@"), *(unsigned __int8 *)(a1 + 100), *(unsigned __int8 *)(a1 + 100), *(_QWORD *)(a1 + 32)));
    objc_msgSend(v9, "setPredicate:", v16);

    v54 = v13;
    v17 = objc_msgSend(v5, "countForFetchRequest:error:", v9, &v54);
    v15 = v54;

    if (v15)
    {
      if (!os_log_GKGeneral)
        v19 = (id)GKOSLoggers(v18);
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
        sub_100034F5C();
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v17 == v7;
  }

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
LABEL_42:
    if (*(_DWORD *)(a1 + 96))
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfilesWithPlayerIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 32), v5));
      v21 = objc_msgSend(v20, "count");
      if (v21 != v7)
      {
        if (!os_log_GKGeneral)
          v22 = (id)GKOSLoggers(v21);
        v23 = os_log_GKCache;
        if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
          sub_100034EF4(a1, v23, v24, v25, v26, v27, v28, v29);
      }
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "_gkMapDictionaryWithKeyPath:", CFSTR("playerID")));
      if (*(_BYTE *)(a1 + 101))
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v7));
      else
        v31 = 0;
      if (*(_BYTE *)(a1 + 101))
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v7));
      else
        v32 = 0;
      if (*(_BYTE *)(a1 + 102))
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v7));
      else
        v33 = 0;
      v44 = v20;
      v34 = v5;
      if (*(_BYTE *)(a1 + 102))
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v7));
      else
        v35 = 0;
      v36 = *(void **)(a1 + 56);
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      v45[2] = sub_1000299E0;
      v45[3] = &unk_1002BC5F0;
      v37 = v30;
      v38 = *(_QWORD *)(a1 + 88);
      v46 = v37;
      v51 = v38;
      v52 = *(_BYTE *)(a1 + 101);
      v39 = v31;
      v47 = v39;
      v40 = v32;
      v48 = v40;
      v53 = *(_BYTE *)(a1 + 102);
      v41 = v33;
      v49 = v41;
      v42 = v35;
      v50 = v42;
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "_gkFilterWithBlock:", v45));
      objc_msgSend(*(id *)(a1 + 48), "setResult:", v43);

      if (objc_msgSend(v39, "count"))
        objc_msgSend(*(id *)(a1 + 64), "updateLastPlayedGames:forPlayers:group:", v39, v40, *(_QWORD *)(a1 + 48));
      v5 = v34;
      if (objc_msgSend(v41, "count"))
        objc_msgSend(*(id *)(a1 + 64), "updateChallengedGames:forPlayers:group:", v41, v42, *(_QWORD *)(a1 + 48));

    }
  }
  v6[2](v6);

}

id sub_1000299E0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  objc_class *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3));
  if (v4)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "internalRepresentationForCacheObject:", v4));
LABEL_8:
    v7 = v5;
    goto LABEL_9;
  }
  if (objc_msgSend(v3, "isEqualToString:", GKAnonymousPlayerID))
  {
    v6 = (objc_class *)GKAnonymousPlayerInternal;
LABEL_7:
    v5 = objc_alloc_init(v6);
    goto LABEL_8;
  }
  if (objc_msgSend(v3, "isEqualToString:", GKUnknownPlayerID))
  {
    v6 = (objc_class *)GKUnknownPlayerInternal;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_9:
  if (*(_BYTE *)(a1 + 80))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastPlayedGame"));
    if (v8)
    {
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v8);
      objc_msgSend(*(id *)(a1 + 48), "addObject:", v7);
    }

  }
  if (*(_BYTE *)(a1 + 81))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastChallengedGame"));
    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 56), "addObject:", v9);
      objc_msgSend(*(id *)(a1 + 64), "addObject:", v7);
    }

  }
  return v7;
}

void sub_100029B10(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id, _QWORD, _QWORD, _QWORD))(v2 + 16))(v2, v3, 0, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));

}

void sub_100029E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

id sub_100029E3C(id a1, id a2)
{
  id v2;
  void *v3;
  void *v4;
  _QWORD v6[2];

  v6[0] = CFSTR("GKPlayerInternal");
  v6[1] = a2;
  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v6, 2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKResourceIdentifier resourceIdentifierForKeys:](GKResourceIdentifier, "resourceIdentifierForKeys:", v3));

  return v4;
}

void sub_100029EEC(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  unsigned int v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  int8x16_t v20;
  _QWORD v21[4];
  id v22;
  int8x16_t v23;
  uint64_t v24;
  char v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  char v30;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_gkMapWithBlock:", &stru_1002BC6C0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v4));

  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_10002A1D4;
  v26[3] = &unk_1002BC710;
  v6 = *(void **)(a1 + 40);
  v27 = *(id *)(a1 + 48);
  v28 = *(id *)(a1 + 40);
  v30 = *(_BYTE *)(a1 + 88);
  v7 = v5;
  v29 = v7;
  v8 = objc_msgSend(v6, "performBlockAndWait:", v26);
  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v8);
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
    sub_10003501C();
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allObjects"));
  v11 = objc_msgSend(v10, "mutableCopy");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%hhu"), *(unsigned __int8 *)(a1 + 88)));
  objc_msgSend(v11, "addObject:", v12);
  objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v11, CFSTR("callParams"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v14 = objc_retainBlock(*(id *)(a1 + 72));
  v15 = objc_msgSend(v13, "doesCallbackListExistFor:parameters:callback:", CFSTR("gk-get-profile-info"), v11, v14);

  if (v15)
  {
    objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("skipCallbacks"));
  }
  else if (objc_msgSend(v7, "count"))
  {
    v16 = *(void **)(a1 + 56);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10002A2FC;
    v21[3] = &unk_1002BC7B0;
    v17 = v10;
    v25 = *(_BYTE *)(a1 + 88);
    v18 = *(_QWORD *)(a1 + 80);
    v22 = v17;
    v24 = v18;
    v20 = *(int8x16_t *)(a1 + 56);
    v19 = (id)v20.i64[0];
    v23 = vextq_s8(v20, v20, 8uLL);
    objc_msgSend(v16, "perform:", v21);

  }
  v3[2](v3);

}

id sub_10002A194(id a1, GKResourceIdentifier *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GKResourceIdentifier keys](a2, "keys", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 1));

  return v4;
}

void sub_10002A1D4(uint64_t a1)
{
  void *v2;
  id v3;
  _QWORD v4[4];
  id v5;
  char v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v3 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfilesWithPlayerIDs:inManagedObjectContext:", v2, *(_QWORD *)(a1 + 40)));

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10002A28C;
  v4[3] = &unk_1002BC6E8;
  v6 = *(_BYTE *)(a1 + 56);
  v5 = *(id *)(a1 + 48);
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v4);

}

void sub_10002A28C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (objc_msgSend(v5, "availablePieces") == *(unsigned __int8 *)(a1 + 40)
    && (objc_msgSend(v5, "expired") & 1) == 0)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerID"));
    objc_msgSend(v3, "removeObject:", v4);

  }
}

void sub_10002A2FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  char v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKProfileService profileRequestForPlayerIDs:pieces:](GKProfileService, "profileRequestForPlayerIDs:pieces:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 64)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10002A414;
  v10[3] = &unk_1002BC788;
  v7 = *(void **)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v11 = v7;
  v8 = *(id *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 64);
  v12 = v8;
  v13 = v3;
  v9 = v3;
  objc_msgSend(v5, "issueRequest:bagKey:clientProxy:handler:", v4, CFSTR("gk-get-profile-info"), v6, v10);

}

void sub_10002A414(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  double v13;
  char v14;

  v7 = a2;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a4;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v7)
  {
    v8 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10002A504;
    v9[3] = &unk_1002BC760;
    v13 = a4;
    v10 = v7;
    v11 = *(id *)(a1 + 40);
    v14 = *(_BYTE *)(a1 + 64);
    v12 = *(id *)(a1 + 32);
    objc_msgSend(v8, "performOnManagedObjectContext:", v9);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10002A504(uint64_t a1, void *a2, void *a3)
{
  id v5;
  double v6;
  void (**v7)(_QWORD);
  void *v8;
  id *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  char v32;

  v5 = a2;
  v6 = *(double *)(a1 + 56);
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", v6));
  v9 = (id *)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("profile-infos")));
  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfilesWithPlayerIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 40), v5));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_gkMapDictionaryWithKeyPath:", CFSTR("input-id")));
    if (!objc_msgSend(v12, "count"))
    {
      v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_gkMapDictionaryWithKeyPath:", CFSTR("player-id")));

      v12 = (void *)v13;
    }
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_10002A760;
    v28[3] = &unk_1002BC738;
    v29 = v12;
    v30 = v8;
    v32 = *(_BYTE *)(a1 + 64);
    v31 = v5;
    v14 = v12;
    objc_msgSend(v11, "enumerateObjectsUsingBlock:", v28);

  }
  else
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v9, "objectForKeyedSubscript:", CFSTR("status")));

    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v9, "objectForKeyedSubscript:", CFSTR("status")));
      v17 = (uint64_t)objc_msgSend(v16, "integerValue");

    }
    else
    {
      v17 = 1;
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKServerErrorDomain, v17, 0));
    objc_msgSend(*(id *)(a1 + 48), "setError:", v18);

    if (!os_log_GKGeneral)
      v20 = (id)GKOSLoggers(v19);
    v21 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100035048((uint64_t)v9, v21, v22, v23, v24, v25, v26, v27);
  }
  v7[2](v7);

}

void sub_10002A760(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerID"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5));

  if (v7)
    v6 = v7;
  else
    v6 = &__NSDictionary0__struct;
  objc_msgSend(v4, "updateWithServerRepresentation:expirationDate:pieces:", v6, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 48), "refreshObject:mergeChanges:", v4, 1);

}

void sub_10002A7F8(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  double v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("callParams")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("skipCallbacks")));

  if (v3)
    v4 = 1;
  else
    v4 = v2 == 0;
  if (!v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "retrieveAndClearCallbacks:parameters:", CFSTR("gk-get-profile-info"), v2));

    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v7 = v6;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v16;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v16 != v10)
            objc_enumerationMutation(v7);
          v12 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v11);
          v13 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error", (_QWORD)v15));
          (*(void (**)(uint64_t, void *, double))(v12 + 16))(v12, v14, v13);

          v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v9);
    }

  }
}

void sub_10002AA74(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002AB0C;
  block[3] = &unk_1002BB658;
  v6 = a2;
  v3 = *(NSObject **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v4 = v6;
  dispatch_sync(v3, block);

}

void sub_10002AB0C(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10002AB74;
  v2[3] = &unk_1002BC828;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "enumerateObjectsUsingBlock:", v2);

}

void sub_10002AB74(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerID"));
  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v4, v3);

}

void sub_10002ABC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _BOOL8 v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  __int16 v20;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = objc_msgSend(*(id *)(a1 + 48), "integerValue");
  v7 = *(_QWORD *)(a1 + 64) != 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10002AD08;
  v12[3] = &unk_1002BC968;
  v13 = *(id *)(a1 + 40);
  v9 = *(id *)(a1 + 56);
  v20 = *(_WORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 32);
  v14 = v9;
  v15 = v10;
  v17 = *(id *)(a1 + 64);
  v18 = *(id *)(a1 + 72);
  v16 = *(id *)(a1 + 48);
  v19 = v3;
  v11 = v3;
  objc_msgSend(v4, "fetchProfilesForPlayerIDs:familiarity:responseKind:context:handler:", v5, v6, v7, v8, v12);

}

void sub_10002AD08(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  id v19;
  void *v20;
  id v21;
  int8x16_t v22;
  _QWORD v23[4];
  id v24;
  int8x16_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  _QWORD v30[5];
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  char v36;

  v9 = a2;
  v10 = a3;
  v11 = v10;
  if ((a4 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v12 = (id)GKOSLoggers(v10);
    v13 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
      sub_1000350DC(a1, v13, v14);
    v15 = *(void **)(a1 + 40);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKProfileService.m", 456, "-[GKProfileService getProfilesForPlayerIDs:discardingStaleData:handler:]_block_invoke"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "transactionGroupWithName:", v16));

    v18 = *(unsigned __int8 *)(a1 + 88);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10002AF98;
    v30[3] = &unk_1002BC8F0;
    v30[4] = *(_QWORD *)(a1 + 48);
    v31 = *(id *)(a1 + 32);
    v36 = *(_BYTE *)(a1 + 89);
    v32 = *(id *)(a1 + 40);
    v19 = v17;
    v33 = v19;
    v34 = *(id *)(a1 + 64);
    v35 = *(id *)(a1 + 72);
    objc_msgSend(v19, "perform:", v30);
    if (v18 || (a5 & 1) == 0)
    {
      v20 = *(void **)(a1 + 40);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_10002B2A0;
      v23[3] = &unk_1002BC940;
      v24 = v19;
      v22 = *(int8x16_t *)(a1 + 40);
      v21 = (id)v22.i64[0];
      v25 = vextq_s8(v22, v22, 8uLL);
      v26 = *(id *)(a1 + 32);
      v27 = *(id *)(a1 + 56);
      v28 = *(id *)(a1 + 64);
      v29 = *(id *)(a1 + 72);
      objc_msgSend(v20, "perform:", v23);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();

}

void sub_10002AF98(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 80);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10002B0AC;
  v12[3] = &unk_1002BC8C8;
  v8 = *(id *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(a1 + 40);
  v13 = v8;
  v14 = v9;
  v15 = v10;
  v17 = *(id *)(a1 + 64);
  v16 = *(id *)(a1 + 48);
  v18 = *(id *)(a1 + 72);
  v19 = v3;
  v11 = v3;
  objc_msgSend(v4, "loadProfilesForPlayerIDs:pieces:context:handler:", v5, v6, v7, v12);

}

uint64_t sub_10002B0AC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "setError:", v4);
  LODWORD(v3) = objc_msgSend(v4, "gkIsNotConnectedToInternetError");

  if ((_DWORD)v3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10002B1A0;
    v7[3] = &unk_1002BC8A0;
    v5 = *(void **)(a1 + 32);
    v7[4] = *(_QWORD *)(a1 + 40);
    v8 = *(id *)(a1 + 48);
    v10 = *(id *)(a1 + 64);
    v9 = *(id *)(a1 + 56);
    v11 = *(id *)(a1 + 72);
    objc_msgSend(v5, "perform:", v7);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
}

void sub_10002B1A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 2 * (*(_QWORD *)(a1 + 56) != 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10002B270;
  v9[3] = &unk_1002BC878;
  v10 = *(id *)(a1 + 64);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "fetchProfilesForPlayerIDs:familiarity:responseKind:context:handler:", v5, 0, v6, v7, v9);

}

uint64_t sub_10002B270(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10002B2A0(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v3 = a2;
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10002B3CC;
  v10[3] = &unk_1002BC918;
  v11 = a1[6];
  v7 = a1[4];
  v8 = a1[5];
  v12 = v7;
  v13 = v8;
  v14 = a1[7];
  v15 = a1[8];
  v16 = a1[9];
  v17 = a1[10];
  v18 = v3;
  v9 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v10);

}

void sub_10002B3CC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = objc_msgSend(*(id *)(a1 + 64), "integerValue");
    v7 = 2 * (*(_QWORD *)(a1 + 72) != 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10002B4FC;
    v9[3] = &unk_1002BC878;
    v10 = *(id *)(a1 + 80);
    v11 = *(id *)(a1 + 88);
    objc_msgSend(v4, "fetchProfilesForPlayerIDs:familiarity:responseKind:context:handler:", v5, v6, v7, v8, v9);

  }
}

uint64_t sub_10002B4FC(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10002B52C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;
  id v15;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("playerIDtoScopedIDs")));
  v3 = (void *)v2;
  v4 = &__NSDictionary0__struct;
  if (v2)
    v4 = (void *)v2;
  v5 = v4;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002B654;
  block[3] = &unk_1002BC3F8;
  v6 = *(NSObject **)(a1 + 40);
  v12 = *(id *)(a1 + 32);
  v13 = *(id *)(a1 + 48);
  v14 = *(id *)(a1 + 56);
  v15 = v5;
  v10 = v5;
  dispatch_sync(v6, block);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v7 + 16))(v7, v8, v9);

}

void sub_10002B654(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  id (*v6)(uint64_t, void *);
  void *v7;
  id v8;
  id v9;

  v4 = _NSConcreteStackBlock;
  v5 = 3221225472;
  v6 = sub_10002B6F0;
  v7 = &unk_1002BCA58;
  v2 = *(void **)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_gkFilterWithBlock:", &v4));
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v3, v4, v5, v6, v7);

}

id sub_10002B6F0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v4));

  objc_msgSend(v5, "setScopedIDs:", v6);
  return v5;
}

void sub_10002B8F8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v12 = GKFriendSupportPageURL;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10002BA20;
  v9[3] = &unk_1002BB478;
  v10 = *(id *)(a1 + 48);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "getValuesForKeys:queue:completion:", v5, v7, v9);

}

void sub_10002BA20(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6 || (v6 = objc_msgSend(v5, "count")) == 0)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000351BC();
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", GKFriendSupportPageURL));
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v9);

  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10002BAFC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10002BD68(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void (**v7)(_QWORD);
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;
  id v12;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10002BE28;
  v8[3] = &unk_1002BCAA8;
  v4 = *(void **)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v10 = v5;
  v11 = v6;
  v12 = *(id *)(a1 + 32);
  v7 = a2;
  objc_msgSend(v4, "performOnManagedObjectContext:", v8);
  v7[2](v7);

}

void sub_10002BE28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](GKPlayerProfileCacheObject, "selfPlayerID"));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v5));
    objc_msgSend(v8, "setStatus:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v8, "expire");
    if (*(_QWORD *)(a1 + 32))
      v9 = *(const __CFString **)(a1 + 32);
    else
      v9 = &stru_1002CE2A8;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceWithID:representedItem:](GKResource, "resourceWithID:representedItem:", v7, v9));
    v11 = *(void **)(a1 + 40);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "credential"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "setPlayerStatusWriterWithCredential:", v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v10));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10002BFA4;
    v15[3] = &unk_1002BB6E8;
    v16 = *(id *)(a1 + 56);
    v17 = v6;
    objc_msgSend(v13, "writeResources:handler:", v14, v15);

  }
}

uint64_t sub_10002BFA4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10002BFD4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10002C208(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void (**v8)(_QWORD);
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10002C2C4;
  v9[3] = &unk_1002BCAA8;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(void **)(a1 + 56);
  v10 = v5;
  v11 = v6;
  v12 = v7;
  v13 = *(id *)(a1 + 64);
  v8 = a2;
  objc_msgSend(v4, "performOnManagedObjectContext:", v9);
  v8[2](v8);

}

void sub_10002C2C4(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  objc_msgSend(v6, "setAvatarType:", *(_QWORD *)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "localPlayer"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "playerID"));
  v9 = GKAvatarSubdirectoryNameForPlayerID();
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "imageCacheKeyPathsByKey"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10002C408;
  v14[3] = &unk_1002BCAD0;
  v15 = *(id *)(a1 + 48);
  v16 = *(id *)(a1 + 56);
  v17 = v10;
  v18 = v6;
  v12 = v6;
  v13 = v10;
  objc_msgSend(v11, "enumerateKeysAndObjectsUsingBlock:", v14);

  v5[2](v5);
}

void sub_10002C408(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  void *v11;
  id v12;

  v12 = a3;
  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v6));

  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = GKImageCachePathForSubdirectoryAndFilename(*(_QWORD *)(a1 + 48), v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_msgSend(*(id *)(a1 + 56), "setValue:forKeyPath:", v11, v12);
    objc_msgSend(v7, "_gkWriteToImageCacheWithURLString:", v11);

  }
}

uint64_t sub_10002C4C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002C69C(uint64_t a1, void *a2)
{
  void *v4;
  void (**v5)(_QWORD);
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10002C760;
  v6[3] = &unk_1002BCAA8;
  v4 = *(void **)(a1 + 32);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  v9 = *(id *)(a1 + 32);
  v5 = a2;
  objc_msgSend(v4, "performOnManagedObjectContext:", v6);
  v5[2](v5);

}

void sub_10002C760(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  id v20;
  _QWORD v21[2];
  _QWORD v22[2];

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localPlayer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerID"));

  v21[0] = CFSTR("photo-data");
  v21[1] = GKAvatarTypeKey;
  v7 = *(_QWORD *)(a1 + 48);
  v22[0] = *(_QWORD *)(a1 + 40);
  v22[1] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 2));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceWithID:representedItem:](GKMutableResource, "resourceWithID:representedItem:", v6, v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "setPlayerPhotoWriterWithCredential:", v11));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v9));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10002C928;
  v17[3] = &unk_1002BB8F0;
  v14 = *(id *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 32);
  v18 = v14;
  v19 = v15;
  v20 = v4;
  v16 = v4;
  objc_msgSend(v12, "writeResources:handler:", v13, v17);

}

uint64_t sub_10002C928(uint64_t a1, uint64_t a2)
{
  _QWORD v5[5];

  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  if (!a2)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10002C9B0;
    v5[3] = &unk_1002BB918;
    v5[4] = *(_QWORD *)(a1 + 40);
    +[GKClientProxy enumerateClientsUsingBlock:](GKClientProxy, "enumerateClientsUsingBlock:", v5);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10002C9B0(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v4 = objc_msgSend(v5, "isEqual:", v3);

  if ((v4 & 1) == 0)
    objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 16, 0);

}

uint64_t sub_10002CA18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002CC00(int8x16_t *a1, void *a2)
{
  id v3;
  void (**v4)(_QWORD);
  int8x16_t v5;
  _QWORD v6[4];
  int8x16_t v7;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10002CC9C;
  v6[3] = &unk_1002BB850;
  v5 = a1[2];
  v3 = (id)v5.i64[0];
  v7 = vextq_s8(v5, v5, 8uLL);
  v4 = a2;
  objc_msgSend(v3, "performOnManagedObjectContext:", v6);
  v4[2](v4);

}

void sub_10002CC9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  objc_msgSend(v6, "clearImages");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localPlayer"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "playerID"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceWithID:](GKResource, "resourceWithID:", v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "deletePlayerPhotoWriterWithCredential:", v11));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v9));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10002CE0C;
  v15[3] = &unk_1002BB6E8;
  v16 = *(id *)(a1 + 40);
  v17 = v5;
  v14 = v5;
  objc_msgSend(v12, "writeResources:handler:", v13, v15);

}

uint64_t sub_10002CE0C(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_10002CE3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002CF5C(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  int8x16_t v10;
  _QWORD v11[4];
  int8x16_t v12;
  id v13;
  unsigned __int8 v14;
  const __CFString *v15;
  void *v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  v4 = objc_msgSend(v3, "isFindable");
  objc_msgSend(v3, "setFindable:", *(unsigned __int8 *)(a1 + 56));
  v15 = CFSTR("findable");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)));
  v16 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10002D108;
  v11[3] = &unk_1002BBAB0;
  v10 = *(int8x16_t *)(a1 + 32);
  v9 = (id)v10.i64[0];
  v12 = vextq_s8(v10, v10, 8uLL);
  v14 = v4;
  v13 = *(id *)(a1 + 48);
  objc_msgSend(v7, "issueRequest:bagKey:clientProxy:handler:", v6, CFSTR("gk-set-findable"), v8, v11);

}

void sub_10002D108(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  char v12;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10002D1F4;
    v10[3] = &unk_1002BCAF8;
    v11 = *(id *)(a1 + 40);
    v12 = *(_BYTE *)(a1 + 56);
    objc_msgSend(v7, "performBlock:", v10);

  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    objc_msgSend(v8, "refreshContentsForDataType:userInfo:", 6, 0);

  }
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v6);

}

void sub_10002D1F4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v3 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  objc_msgSend(v3, "setFindable:", *(unsigned __int8 *)(a1 + 40));
}

void sub_10002D3F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD v22[2];
  _QWORD v23[2];

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "alias"));
  objc_msgSend(v6, "setAlias:", *(_QWORD *)(a1 + 32));
  v8 = *(_QWORD *)(a1 + 32);
  v22[1] = CFSTR("suggestions-count");
  v23[0] = v8;
  v22[0] = CFSTR("player-nickname");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56)));
  v23[1] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 2));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10002D5B0;
  v17[3] = &unk_1002BCB48;
  v13 = *(id *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 40);
  v18 = v13;
  v19 = v14;
  v20 = v7;
  v21 = v5;
  v15 = v7;
  v16 = v5;
  objc_msgSend(v11, "issueRequest:bagKey:clientProxy:handler:", v10, CFSTR("gk-set-player-nickname"), v12, v17);

}

void sub_10002D5B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id *v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;

  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("suggestions")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("player-nickname-update-status")));

  v9 = objc_msgSend(v8, "unsignedIntegerValue");
  if (v7)
    v10 = v7;
  else
    v10 = &__NSArray0__struct;
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v9));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, CFSTR("updateStatus"));

  objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  if (v5 || v9)
  {
    if (objc_msgSend(v7, "count"))
      goto LABEL_11;
    v14 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v15 = (id)GKOSLoggers(0);
      v14 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      sub_10003527C();
      if (v5)
        goto LABEL_12;
    }
    else
    {
LABEL_11:
      if (v5)
      {
LABEL_12:
        v16 = objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &off_1002DB538, CFSTR("updateStatus"));
        if (!os_log_GKGeneral)
          v17 = (id)GKOSLoggers(v16);
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
          sub_10003521C();
      }
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10002D82C;
    v19[3] = &unk_1002BB658;
    v13 = &v20;
    v20 = *(id *)(a1 + 32);
    v21 = *(id *)(a1 + 48);
    objc_msgSend(v18, "performBlock:", v19);

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    goto LABEL_17;
  }
  v12 = *(void **)(a1 + 40);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10002D820;
  v22[3] = &unk_1002BB540;
  v13 = &v23;
  v23 = *(id *)(a1 + 56);
  objc_msgSend(v12, "invalidateCachedProfileForLocalPlayerWithHandler:", v22);
LABEL_17:

}

uint64_t sub_10002D820(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002D82C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v3 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  objc_msgSend(v3, "setAlias:", *(_QWORD *)(a1 + 40));
}

void sub_10002D898(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("updateStatus")));
  v4 = objc_msgSend(v3, "unsignedIntegerValue");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, id, void *))(v2 + 16))(v2, v6, v4, v5);

}

void sub_10002DB48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10002DC20;
  v8[3] = &unk_1002BCB98;
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-get-suggested-player-nickname"), v6, v8);

}

void sub_10002DC20(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("suggestions")));
  v7 = objc_msgSend(v6, "count");
  if (v7)
    goto LABEL_5;
  v8 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v9 = (id)GKOSLoggers(0);
    v8 = os_log_GKGeneral;
  }
  v7 = (id)os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)v7)
  {
    sub_100035308();
    if (!v5)
      goto LABEL_10;
  }
  else
  {
LABEL_5:
    if (!v5)
      goto LABEL_10;
  }
  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v7);
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    sub_1000352A8();
LABEL_10:
  if (v6)
    v11 = v6;
  else
    v11 = &__NSArray0__struct;
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v11);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10002DD34(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10002DF70(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10002E048;
  v8[3] = &unk_1002BCB98;
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-get-localized-key"), v6, v8);

}

void sub_10002E048(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;

  v5 = a3;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("value")));
  v7 = (void *)v6;
  if (v6)
  {
    v6 = (uint64_t)objc_msgSend((id)v6, "length");
    if (v6)
      goto LABEL_6;
  }
  v8 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v9 = (id)GKOSLoggers(v6);
    v8 = os_log_GKGeneral;
  }
  v6 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (!(_DWORD)v6)
  {
LABEL_6:
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    sub_100035394();
    if (!v5)
      goto LABEL_11;
  }
  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v6);
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    sub_100035334();
LABEL_11:
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v7);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10002E158(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10002E31C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  id *v8;
  id *v9;
  int v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  unsigned int v19;
  uint64_t v20;
  id v21;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  v7 = objc_msgSend(v6, "globalFriendListAccess");
  v8 = (id *)&GKGlobalFriendListAccessAllowed;
  v9 = (id *)&GKGlobalFriendListAccessDenied;
  v10 = *(_DWORD *)(a1 + 48);
  if (v10 != 1)
    v9 = (id *)&GKGlobalFriendListAccessUndetermined;
  if (v10)
    v8 = v9;
  v11 = *v8;
  v20 = GKGlobalFriendListAccessKey;
  v21 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
  objc_msgSend(v6, "setGlobalFriendListAccess:", *(unsigned int *)(a1 + 48));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10002E498;
  v16[3] = &unk_1002BCBE8;
  v13 = *(void **)(a1 + 32);
  v14 = *(id *)(a1 + 40);
  v19 = v7;
  v17 = v14;
  v18 = v5;
  v15 = v5;
  objc_msgSend(v13, "setProfileSettings:handler:", v12, v16);

}

uint64_t sub_10002E498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  int v12;

  objc_msgSend(*(id *)(a1 + 32), "setError:");
  if (a3)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10002E540;
    v10[3] = &unk_1002BCBC0;
    v11 = *(id *)(a1 + 32);
    v12 = *(_DWORD *)(a1 + 48);
    objc_msgSend(v8, "performBlock:", v10);

  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v5, v6, v7);
}

void sub_10002E540(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v3 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  objc_msgSend(v3, "setGlobalFriendListAccess:", *(unsigned int *)(a1 + 40));
}

void sub_10002E5AC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10002E778(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  const __CFString *v12;
  void *v13;

  v3 = a2;
  v12 = CFSTR("arcade-subscription-expiration");
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSince1970");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4 * 1000.0));
  v13 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10002E8A0;
  v9[3] = &unk_1002BB478;
  v7 = *(void **)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v7, "setProfileSettings:handler:", v6, v9);

}

uint64_t sub_10002E8A0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10002E8CC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10002EB30(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  _BOOL8 v10;
  id v11;
  uint8_t v12[16];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  v9 = os_log_GKDaemon;
  v10 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
  if (v10)
  {
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Done syncing friend invites allowed flag.", v12, 2u);
  }
  if (v7)
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v10);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000353C0();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10002EE40(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  _BOOL8 v10;
  id v11;
  uint8_t v12[16];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  v9 = os_log_GKOnboarding;
  v10 = os_log_type_enabled(os_log_GKOnboarding, OS_LOG_TYPE_INFO);
  if (v10)
  {
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Done syncing privacy notice version.", v12, 2u);
  }
  if (v7)
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v10);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100035420();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10002F19C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  unsigned int v17;
  _QWORD v18[3];
  _QWORD v19[3];
  const __CFString *v20;
  void *v21;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  v7 = objc_msgSend(v6, "achievementsVisibility");
  v20 = CFSTR("privacy-settings");
  v8 = *(_QWORD *)(a1 + 32);
  v18[0] = CFSTR("achievements");
  v18[1] = CFSTR("friends");
  v19[0] = v8;
  v19[1] = v8;
  v18[2] = CFSTR("games-played");
  v19[2] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 3));
  v21 = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));

  objc_msgSend(v6, "setAchievementsVisibility:", *(unsigned int *)(a1 + 56));
  objc_msgSend(v6, "setGamesPlayedVisibility:", *(unsigned int *)(a1 + 56));
  objc_msgSend(v6, "setFriendsVisibility:", *(unsigned int *)(a1 + 56));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10002F338;
  v14[3] = &unk_1002BCBE8;
  v11 = *(void **)(a1 + 40);
  v12 = *(id *)(a1 + 48);
  v17 = v7;
  v15 = v12;
  v16 = v5;
  v13 = v5;
  objc_msgSend(v11, "setProfileSettings:handler:", v10, v14);

}

uint64_t sub_10002F338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  int v12;

  objc_msgSend(*(id *)(a1 + 32), "setError:");
  if (a3)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10002F3E0;
    v10[3] = &unk_1002BCBC0;
    v11 = *(id *)(a1 + 32);
    v12 = *(_DWORD *)(a1 + 48);
    objc_msgSend(v8, "performBlock:", v10);

  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v5, v6, v7);
}

void sub_10002F3E0(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v3 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  objc_msgSend(v3, "setGamesPlayedVisibility:", *(unsigned int *)(a1 + 40));
  objc_msgSend(v3, "setFriendsVisibility:", *(unsigned int *)(a1 + 40));
  objc_msgSend(v3, "setAchievementsVisibility:", *(unsigned int *)(a1 + 40));

}

void sub_10002F464(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v2)
    objc_msgSend(*(id *)(a1 + 40), "refreshContentsForDataType:userInfo:", 17, 0);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

void sub_10002F658(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v6 = *(_QWORD *)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10002F738;
  v11[3] = &unk_1002BCC88;
  v8 = *(id *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 40);
  v12 = v8;
  v13 = v9;
  v14 = v4;
  v10 = v4;
  objc_msgSend(v5, "issueRequest:bagKey:clientProxy:handler:", v6, CFSTR("gk-set-profile-settings"), v7, v11);

}

void sub_10002F738(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  if (v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10002F7FC;
    v8[3] = &unk_1002BB540;
    v7 = *(void **)(a1 + 40);
    v9 = *(id *)(a1 + 48);
    objc_msgSend(v7, "invalidateCachedProfileForLocalPlayerWithHandler:", v8);

  }
}

uint64_t sub_10002F7FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002F808(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10002F978(id a1, NSManagedObjectContext *a2, id a3)
{
  void (**v4)(_QWORD);
  id v5;

  v4 = (void (**)(_QWORD))a3;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  objc_msgSend(v5, "expire");
  v4[2](v4);

}

uint64_t sub_10002F9E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002FBA0(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  id v7;

  v5 = a3;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v7, "achievementsVisibility")));
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v6);

  v5[2](v5);
}

void sub_10002FC38(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(_QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(v2, "intValue"));

}

void sub_10002FE48(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v6, "contactsIntegrationConsent")));
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v7);

  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v8);
  v10 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v11 = *(void **)(a1 + 32);
    v12 = v10;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "result"));
    v14 = 138412290;
    v15 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "GKProfileService: getContactsIntegrationConsentWithCompletionHandler: result=%@", (uint8_t *)&v14, 0xCu);

  }
  v5[2](v5);

}

void sub_10002FF9C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(_QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(v2, "intValue"));

}

void sub_10003020C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  id v8;
  id v9;
  int v10;
  id *v11;
  id *v12;
  int v13;
  id v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  void (**v19)(_QWORD);
  id v20;
  int v21;
  id location;
  uint64_t v23;
  id v24;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v5));
  v8 = objc_msgSend(v7, "contactsIntegrationConsent");
  if (*(_DWORD *)(a1 + 48) == (_DWORD)v8)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(v8);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100035480();
    v6[2](v6);
  }
  else
  {
    v10 = (int)v8;
    objc_msgSend(v7, "setContactsIntegrationConsent:");
    v11 = (id *)&GKContactsIntegrationConsentAllowed;
    v12 = (id *)&GKContactsIntegrationConsentDenied;
    v13 = *(_DWORD *)(a1 + 48);
    if (v13)
      v12 = (id *)&GKContactsIntegrationConsentUndetermined;
    if (v13 != 1)
      v11 = v12;
    v14 = *v11;
    v23 = GKContactsIntegrationConsentKey;
    v24 = v14;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
    objc_initWeak(&location, *(id *)(a1 + 32));
    v16 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100030448;
    v17[3] = &unk_1002BCD40;
    v18 = *(id *)(a1 + 40);
    objc_copyWeak(&v20, &location);
    v21 = v10;
    v19 = v6;
    objc_msgSend(v16, "setProfileSettings:handler:", v15, v17);

    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);

  }
}

void sub_100030424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100030448(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  int v17;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);
  v7 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100030550;
  v13[3] = &unk_1002BCD18;
  objc_copyWeak(&v16, (id *)(a1 + 48));
  v8 = v6;
  v14 = v8;
  v17 = *(_DWORD *)(a1 + 56);
  v9 = v5;
  v15 = v9;
  objc_msgSend(v7, "performOnManagedObjectContext:", v13);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v10, v11, v12);

  objc_destroyWeak(&v16);
}

void sub_100030538(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100030550(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  id v6;
  id WeakRetained;
  void *v8;
  int *v9;
  unsigned int v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  _QWORD v21[4];
  void (**v22)(_QWORD);
  uint8_t buf[16];

  v5 = a3;
  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v6));

  if (*(_QWORD *)(a1 + 32))
  {
    v10 = *(_DWORD *)(a1 + 56);
    v9 = (int *)(a1 + 56);
    v11 = objc_msgSend(v8, "setContactsIntegrationConsent:", v10);
    if (!os_log_GKGeneral)
      v12 = (id)GKOSLoggers(v11);
    v13 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000354B8(v9, v13);
    v5[2](v5);
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", GKContactsAssociationIDKey));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[GKContactsIntegrationUserSettings associationIDFromServerResult:](GKContactsIntegrationUserSettings, "associationIDFromServerResult:", v14));
    objc_msgSend(v8, "setContactsAssociationID:", v15);

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", GKServiceLastUpdateTimestamp));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[GKContactsIntegrationUserSettings dateFromServerResult:](GKContactsIntegrationUserSettings, "dateFromServerResult:", v16));
    objc_msgSend(v8, "setServiceLastUpdatedTimestamp:", v17);

    if (!os_log_GKGeneral)
      v19 = (id)GKOSLoggers(v18);
    v20 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "GKProfileService: setContactsIntegrationConsent from game center server succeeded", buf, 2u);
    }
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100030784;
    v21[3] = &unk_1002BC0D0;
    v22 = v5;
    objc_msgSend(WeakRetained, "updateContactsIntegrationInfoFromLocalPlayerProfile:completionHandler:", v8, v21);

  }
}

uint64_t sub_100030784(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100030790(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v2)
    objc_msgSend(*(id *)(a1 + 40), "refreshContentsForDataType:userInfo:", 17, 0);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

uint64_t sub_100030A18(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100030C88(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactsIntegrationController"));
  v11 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  v6 = *(unsigned __int8 *)(a1 + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100030D98;
  v8[3] = &unk_1002BCD68;
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "getRelationshipsForContacts:updateExistingContactEntries:completionHandler:", v5, v6, v8);

}

uint64_t sub_100030D98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v6;
  id v7;

  v6 = *(void **)(a1 + 32);
  v7 = a4;
  objc_msgSend(v6, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100030DF0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_1000310A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactsIntegrationController"));
  v5 = *(unsigned __int8 *)(a1 + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10003117C;
  v8[3] = &unk_1002BCD90;
  v6 = *(_QWORD *)(a1 + 40);
  v9 = *(id *)(a1 + 48);
  v11 = v3;
  v10 = *(id *)(a1 + 40);
  v7 = v3;
  objc_msgSend(v4, "getRelationshipsForContacts:updateExistingContactEntries:completionHandler:", v6, v5, v8);

}

void sub_10003117C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v9)
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v9);
    v12 = (void *)os_log_GKContacts;
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_100035640(v12, v10);
    objc_msgSend(*(id *)(a1 + 32), "setResult:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setError:", v10);
  }
  else
  {
    if (v7)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKProfileServicePrivate parseContactAssociationIDsFromRelationships:contactAssociationIDMap:contacts:](GKProfileServicePrivate, "parseContactAssociationIDsFromRelationships:contactAssociationIDMap:contacts:", v7, v8, *(_QWORD *)(a1 + 40)));
      objc_msgSend(*(id *)(a1 + 32), "setResult:", v13);
      objc_msgSend(*(id *)(a1 + 32), "setError:", 0);
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

      goto LABEL_10;
    }
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_100035614();
    objc_msgSend(*(id *)(a1 + 32), "setResult:", 0);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_10:

}

void sub_1000312E8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

uint64_t sub_100031434(uint64_t a1)
{
  id v2;
  uint64_t result;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_1000356D0();
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_100031568(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = os_log_GKContacts;
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_1000356FC(a1, v6, v7, v8, v9, v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v4);

}

void sub_100031774(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void (**v6)(_QWORD);
  id v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contactsIntegrationController"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "filterForContactIDsSupportingFriendingViaPushFromContactIDs:withContext:", *(_QWORD *)(a1 + 48), v7));

  objc_msgSend(*(id *)(a1 + 40), "setResult:", v8);
  v6[2](v6);

}

void sub_100031804(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_1000319EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100031A94;
  v10[3] = &unk_1002BCDB8;
  v6 = *(id *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 32);
  v11 = v6;
  v12 = v8;
  v13 = v3;
  v14 = v7;
  v9 = v3;
  objc_msgSend(v4, "getProfilesForPlayerIDs:handler:", v5, v10);

}

void sub_100031A94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[5];
  id v14;

  v5 = a2;
  v6 = *(void **)(a1 + 32);
  v7 = a3;
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, CFSTR("profiles"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);

  if (!v7 && (*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100031B68;
    v13[3] = &unk_1002BB850;
    v12 = *(void **)(a1 + 32);
    v13[4] = *(_QWORD *)(a1 + 40);
    v14 = v5;
    objc_msgSend(v12, "performOnManagedObjectContext:", v13);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v8, v9, v10, v11);

}

void sub_100031B68(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void (**v8)(void);

  v5 = *(void **)(a1 + 32);
  v8 = a3;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contactsIntegrationController"));
  objc_msgSend(v7, "populateContactInfoForProfiles:withContext:", *(_QWORD *)(a1 + 40), v6);

  v8[2]();
}

void sub_100031BE0(uint64_t a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v2 = (void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v4);
    v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100035764(v2, v6);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, _QWORD, void *))(v7 + 16))(v7, 0, v8);

  }
  else
  {
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("profiles")));
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

void sub_100031F4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100031F74(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  id v18;
  void (**v19)(_QWORD);
  uint64_t v20;
  char v21;
  uint8_t buf[4];
  uint64_t v23;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", *(_QWORD *)(a1 + 32), a2));
  v7 = objc_msgSend(v6, "isValid");
  if ((_DWORD)v7)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v7);
    v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Profile is still valid for: %@", buf, 0xCu);
    }
    v5[2](v5);
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKProfileService profileRequestForPlayerIDs:pieces:](GKProfileService, "profileRequestForPlayerIDs:pieces:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 72)));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100032168;
    v16[3] = &unk_1002BCE30;
    v17 = *(id *)(a1 + 56);
    v14 = *(id *)(a1 + 40);
    v21 = *(_BYTE *)(a1 + 72);
    v15 = *(_QWORD *)(a1 + 64);
    v18 = v14;
    v20 = v15;
    v19 = v5;
    objc_msgSend(v12, "issueRequest:bagKey:clientProxy:handler:", v11, CFSTR("gk-get-profile-info"), v13, v16);

  }
}

void sub_100032168(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  double v19;
  char v20;

  v7 = a2;
  v8 = a3;
  if (v7)
  {
    v9 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100032294;
    v12[3] = &unk_1002BCE08;
    v19 = a4;
    v13 = v7;
    v10 = *(id *)(a1 + 40);
    v20 = *(_BYTE *)(a1 + 64);
    v11 = *(_QWORD *)(a1 + 56);
    v14 = v10;
    v18 = v11;
    v15 = *(id *)(a1 + 32);
    v16 = v8;
    v17 = *(id *)(a1 + 48);
    objc_msgSend(v9, "performOnManagedObjectContext:", v12);

  }
  else
  {
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a4;
    objc_msgSend(*(id *)(a1 + 32), "setError:", v8);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_100032294(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  char v17;

  v12 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 80)));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("profile-infos")));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfilesWithPlayerIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 40), v12));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_gkMapDictionaryWithKeyPath:", CFSTR("input-id")));
    if (!objc_msgSend(v9, "count"))
    {
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_gkMapDictionaryWithKeyPath:", CFSTR("player-id")));

      v9 = (void *)v10;
    }
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100032434;
    v13[3] = &unk_1002BC738;
    v14 = v9;
    v15 = v6;
    v17 = *(_BYTE *)(a1 + 88);
    v16 = v12;
    v11 = v9;
    objc_msgSend(v8, "enumerateObjectsUsingBlock:", v13);

  }
  v5[2](v5);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = *(_QWORD *)(a1 + 80);
  objc_msgSend(*(id *)(a1 + 48), "setError:", *(_QWORD *)(a1 + 56));
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_100032434(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerID"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5));

  if (v7)
    v6 = v7;
  else
    v6 = &__NSDictionary0__struct;
  objc_msgSend(v4, "updateWithServerRepresentation:expirationDate:pieces:", v6, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 48), "refreshObject:mergeChanges:", v4, 1);

}

void sub_1000324CC(uint64_t a1)
{
  uint64_t v1;
  double v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);

}

uint64_t sub_100032650(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100032664(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  _QWORD v29[5];
  id v30;
  id v31;
  id v32;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000357FC();
  }
  else if (objc_msgSend(v5, "count"))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));
    v10 = *(void **)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKProfileService.m", 1483, "-[GKProfileServicePrivate preloadInstalledGamesScopedPlayerIDs:completion:]_block_invoke"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "transactionGroupWithName:", v11));

    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_1000328B0;
    v29[3] = &unk_1002BCAA8;
    v13 = *(void **)(a1 + 40);
    v29[4] = *(_QWORD *)(a1 + 32);
    v30 = v13;
    v14 = v9;
    v31 = v14;
    v15 = v12;
    v32 = v15;
    objc_msgSend(v15, "performOnManagedObjectContext:", v29);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "replyQueue"));
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1000329A0;
    v23[3] = &unk_1002BCEA8;
    v24 = v15;
    v18 = *(id *)(a1 + 48);
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(void **)(a1 + 40);
    v28 = v18;
    v25 = v19;
    v26 = v20;
    v27 = v14;
    v21 = v14;
    v22 = v15;
    objc_msgSend(v22, "notifyOnQueue:block:", v17, v23);

    goto LABEL_9;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_9:

}

void sub_1000328B0(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "filterPlayerIDsThatNeedPreloading:gameBundleIDs:moc:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v9));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v6, "count")));
  objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v7, CFSTR("incompletePlayerIDsCount"));

  if (objc_msgSend(v6, "count"))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchScopedIDsCacheKeysWithPlayerIDs:gameBundleIDs:moc:", v6, *(_QWORD *)(a1 + 48), v9));
    objc_msgSend(*(id *)(a1 + 56), "setResult:", v8);
    v5[2](v5);

  }
  else
  {
    v5[2](v5);
  }

}

void sub_1000329A0(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("incompletePlayerIDsCount")));
  v3 = objc_msgSend(v2, "unsignedIntValue");

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    v6 = *(void **)(a1 + 40);
    v5 = *(void **)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100032ABC;
    v8[3] = &unk_1002BCE80;
    v9 = v5;
    v10 = *(id *)(a1 + 56);
    v11 = *(id *)(a1 + 64);
    objc_msgSend(v6, "fetchAndCacheScopedPlayerIDs:gameBundleIDs:scopedIDsCacheKeys:cacheOnly:handler:", v9, v7, v4, 1, v8);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
}

void sub_100032ABC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = os_log_GKGeneral;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100035910();
  }
  else
  {
    if (!os_log_GKGeneral)
    {
      v10 = (id)GKOSLoggers(0);
      v8 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      sub_10003585C(a1, v8);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

id sub_100033058(id a1, NSDictionary *a2, unint64_t a3)
{
  return -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("playerId"));
}

uint64_t sub_100033068(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2) ^ 1;
}

id sub_100033270(id a1, NSDictionary *a2, unint64_t a3)
{
  NSDictionary *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", CFSTR("gameBundleId")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", CFSTR("playerId")));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKProfileServicePrivate cacheKeyForScopedIDsWithGameBundleID:playerID:](GKProfileServicePrivate, "cacheKeyForScopedIDsWithGameBundleID:playerID:", v4, v5));
  return v6;
}

BOOL sub_1000332F4(id a1, NSString *a2, NSDictionary *a3)
{
  return +[GKScopedIDs availableForPlayerID:](GKScopedIDs, "availableForPlayerID:", a2);
}

void sub_100033304(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(_QWORD);
  void *v9;
  id v10;
  id v11;

  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v11 = 0;
  v8 = a3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "loadCachedScopedPlayerIDs:gameBundleIDs:error:moc:", v6, v7, &v11, a2));
  v10 = v11;
  objc_msgSend(*(id *)(a1 + 56), "setError:", v10);
  objc_msgSend(*(id *)(a1 + 56), "setResult:", v9);

  v8[2](v8);
}

void sub_1000333AC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  void *v14;
  id v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint8_t buf[4];
  id v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  id v30;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)v2;
  v4 = &__NSArray0__struct;
  if (v2)
    v4 = (void *)v2;
  v5 = v4;

  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  v7 = (void *)v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
      sub_100035A90();
  }
  v9 = objc_msgSend(*(id *)(a1 + 40), "count");
  v10 = (id)((_QWORD)objc_msgSend(*(id *)(a1 + 48), "count") * (_QWORD)v9);
  v11 = objc_msgSend(v5, "count");
  if (v11 == v10)
  {
    v12 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v13 = (id)GKOSLoggers(v11);
      v12 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      sub_1000359D0();
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[GKScopedIDsUtils incompletePlayerIDs:gameBundleIDs:scopedIDs:](GKScopedIDsUtils, "incompletePlayerIDs:gameBundleIDs:scopedIDs:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v5));
    v15 = objc_msgSend(v14, "count");
    v16 = os_log_GKGeneral;
    if (v15)
    {
      if (!os_log_GKGeneral)
      {
        v17 = (id)GKOSLoggers(v15);
        v16 = os_log_GKGeneral;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        v21 = v16;
        *(_DWORD *)buf = 134218496;
        v26 = objc_msgSend(v5, "count");
        v27 = 2048;
        v28 = v10;
        v29 = 2048;
        v30 = objc_msgSend(v14, "count");
        _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Loading scoped ids from server after cache hits: %lu, expected: %lu, incompletes: %lu", buf, 0x20u);

      }
      v19 = *(_QWORD *)(a1 + 48);
      v18 = *(void **)(a1 + 56);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100033694;
      v22[3] = &unk_1002BCA30;
      v23 = v5;
      v24 = *(id *)(a1 + 64);
      objc_msgSend(v18, "fetchAndCacheScopedPlayerIDs:gameBundleIDs:cachedScopedIDs:handler:", v14, v19, v23, v22);

    }
    else
    {
      if (!os_log_GKGeneral)
      {
        v20 = (id)GKOSLoggers(0);
        v16 = os_log_GKGeneral;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        sub_100035A30();
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    }

  }
}

void sub_100033694(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  id v10;
  int v11;
  id v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(+[GKScopedIDsUtils mergeWithScopedIDs:with:](GKScopedIDsUtils, "mergeWithScopedIDs:with:", *(_QWORD *)(a1 + 32), v5));
  v8 = (void *)v7;
  v9 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v10 = (id)GKOSLoggers(v7);
    v9 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v11 = 138412802;
    v12 = v5;
    v13 = 2112;
    v14 = v8;
    v15 = 2112;
    v16 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Loaded scoped ids from server: %@, merged: %@, error: %@", (uint8_t *)&v11, 0x20u);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

id sub_100033C20(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playerId"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameBundleId"));
  v7 = objc_msgSend(v4, "isForPlayerID:gameBundleID:", v5, v6);

  return v7;
}

id sub_100033DF4(id a1, GKScopedIDs *a2, unint64_t a3)
{
  return +[GKProfileServicePrivate cacheKeyForScopedIDs:](GKProfileServicePrivate, "cacheKeyForScopedIDs:", a2);
}

uint64_t sub_100034174(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10003418C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  _QWORD v14[2];
  _QWORD v15[2];

  v3 = a2;
  v14[0] = CFSTR("related-player-ids");
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerIDs"));
  v14[1] = CFSTR("games");
  v15[0] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "gameBundleIDs"));
  v15[1] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 2));
  v8 = *(unsigned __int8 *)(a1 + 64);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000342D4;
  v11[3] = &unk_1002BCA30;
  v9 = *(_QWORD *)(a1 + 48);
  v12 = *(id *)(a1 + 56);
  v13 = v3;
  v10 = v3;
  objc_msgSend(v4, "fetchAndCacheScopedPlayerIDsForRequest:scopedIDsCacheKeys:cacheOnly:handler:", v7, v9, v8, v11);

}

void sub_1000342D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v5)
    objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  if (objc_msgSend(v8, "count"))
  {
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, v7);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100034370(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, &__NSArray0__struct);

  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray array](NSArray, "array"));
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allValues"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allValues"));

    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v15;
      do
      {
        v9 = 0;
        v10 = v3;
        do
        {
          if (*(_QWORD *)v15 != v8)
            objc_enumerationMutation(v5);
          v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKScopedIDsUtils mergeWithScopedIDs:with:](GKScopedIDsUtils, "mergeWithScopedIDs:with:", v10, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v9)));

          v9 = (char *)v9 + 1;
          v10 = v3;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v7);
    }

    v11 = *(_QWORD *)(a1 + 40);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, void *, void *))(v11 + 16))(v11, v3, v12);

  }
}

void sub_100034660(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  _QWORD v19[4];
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  char v26;

  v5 = a2;
  v6 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("status")));
    if ((objc_msgSend(v7, "isEqualToNumber:", &off_1002DB550) & 1) != 0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("results")));
      v9 = *(void **)(a1 + 32);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKProfileService.m", 1801, "-[GKProfileServicePrivate fetchAndCacheScopedPlayerIDsForRequest:scopedIDsCacheKeys:cacheOnly:handler:]_block_invoke"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "transactionGroupWithName:", v10));

      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_1000348B8;
      v22[3] = &unk_1002BD0A0;
      v23 = v8;
      v24 = *(id *)(a1 + 40);
      v26 = *(_BYTE *)(a1 + 56);
      v12 = v11;
      v25 = v12;
      v13 = v8;
      objc_msgSend(v12, "performOnManagedObjectContext:", v22);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "replyQueue"));
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_100034C1C;
      v19[3] = &unk_1002BB450;
      v16 = *(id *)(a1 + 48);
      v20 = v12;
      v21 = v16;
      v17 = v12;
      objc_msgSend(v17, "notifyOnQueue:block:", v15, v19);

    }
    else
    {
      v18 = *(_QWORD *)(a1 + 48);
      v13 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKServerErrorDomain, objc_msgSend(v7, "integerValue"), 0));
      (*(void (**)(uint64_t, void *, id))(v18 + 16))(v18, &__NSArray0__struct, v13);
    }

  }
}

void sub_1000348B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  _UNKNOWN **v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  _UNKNOWN **v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  BOOL v18;
  void *v19;
  void *v20;
  GKCDScopedIds *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void (**v26)(_QWORD);
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id obj;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];

  v29 = a2;
  v26 = a3;
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  obj = *(id *)(a1 + 32);
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v36;
    v32 = GKGamePlayerIDKey;
    v8 = &off_1002DB550;
    v30 = a1;
    v31 = GKTeamPlayerIDKey;
    do
    {
      v9 = 0;
      v33 = v6;
      do
      {
        if (*(_QWORD *)v36 != v7)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("status")));
        v12 = objc_msgSend(v11, "isEqualToNumber:", v8);

        if (v12)
        {
          v13 = v8;
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("bundle-id")));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("player-id")));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v32));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v31));
          if (v14)
            v18 = v15 == 0;
          else
            v18 = 1;
          if (!v18)
          {
            if (objc_msgSend(v16, "length"))
            {
              if (objc_msgSend(v17, "length"))
              {
                v19 = *(void **)(a1 + 40);
                v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKProfileServicePrivate cacheKeyForScopedIDsWithGameBundleID:playerID:](GKProfileServicePrivate, "cacheKeyForScopedIDsWithGameBundleID:playerID:", v14, v15));
                LOBYTE(v19) = objc_msgSend(v19, "containsObject:", v20);

                a1 = v30;
                if ((v19 & 1) == 0)
                {
                  v21 = -[GKCDScopedIds initWithContext:]([GKCDScopedIds alloc], "initWithContext:", v29);
                  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
                  -[GKCDScopedIds setFetchedOn:](v21, "setFetchedOn:", v22);

                  a1 = v30;
                  -[GKCDScopedIds setPlayerId:](v21, "setPlayerId:", v15);
                  -[GKCDScopedIds setGameBundleId:](v21, "setGameBundleId:", v14);
                  -[GKCDScopedIds setGamePlayerId:](v21, "setGamePlayerId:", v16);
                  -[GKCDScopedIds setTeamPlayerId:](v21, "setTeamPlayerId:", v17);
                  if (!*(_BYTE *)(v30 + 56))
                  {
                    v23 = (void *)objc_claimAutoreleasedReturnValue(+[GKProfileServicePrivate makeGKScopedIDsFromInternal:](GKProfileServicePrivate, "makeGKScopedIDsFromInternal:", v21));
                    if (v23)
                    {
                      v28 = v23;
                      objc_msgSend(v27, "addObject:", v23);
                      v23 = v28;
                    }

                  }
                }
              }
            }
          }

          v8 = v13;
          v6 = v33;
        }
        v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    }
    while (v6);
  }

  if (*(_BYTE *)(a1 + 56))
  {
    objc_msgSend(*(id *)(a1 + 48), "setResult:", &__NSArray0__struct);
    v24 = v27;
  }
  else
  {
    v24 = v27;
    v25 = objc_msgSend(v27, "copy");
    objc_msgSend(*(id *)(a1 + 48), "setResult:", v25);

  }
  v26[2](v26);

}

void sub_100034C1C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_100034DBC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDScopedIds _gkFetchRequest](GKCDScopedIds, "_gkFetchRequest"));
  v8 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v7);
  v11 = 0;
  v9 = objc_msgSend(v5, "executeRequest:error:", v8, &v11);
  v10 = v11;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v10);
  v6[2](v6);

}

void sub_100034E88(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_100034EE4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100034EF4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100034EE4((void *)&_mh_execute_header, a2, a3, "Cache validity error! Missing results for %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_100034F5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Load cache failed for unexpired profile and incomplete response. Error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100034FBC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Load cache failed for unexpired profile. Error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003501C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "loadProfilesForPlayerIDs: Finished collecting unique player IDs to load", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100035048(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "loadProfilesForPlayerIDs: server response did not contain expected results: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000350B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Not enriching profiles with scoped ids because gameBundleID is nil", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000350DC(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 136315394;
  v5 = "-[GKProfileService getProfilesForPlayerIDs:discardingStaleData:handler:]_block_invoke_8";
  v6 = 2112;
  v7 = v3;
  sub_100027994((void *)&_mh_execute_header, a2, a3, "Cache miss - %s %@", (uint8_t *)&v4);
  sub_100016C20();
}

void sub_10003515C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Failed to fetch scoped ids for profiles, error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000351BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "getFriendSupportPageURLWithHandler - no friend support page url in bag, error = %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003521C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "setPlayerNickname - server error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003527C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "setPlayerNickname - server returned zero nickname suggestions", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000352A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "getSuggestionsForNickname - server error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100035308()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "getSuggestionsForNickname - server returned zero nickname suggestions", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100035334()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "getTermsAndConditionsWithHandler - server error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100035394()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "getTermsAndConditionsWithHandler - server returned invalid url", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000353C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "GKProfileService: setFriendInvitesAllowedFlag failed: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100035420()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "GKProfileService: setPrivacyNoticeVersion error=%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100035480()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100027A0C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "GKProfileService: profile already has the consent flag we are attempting to change to.", v1, 2u);
  sub_100027A04();
}

void sub_1000354B8(int *a1, NSObject *a2)
{
  int v2;
  _DWORD v3[2];

  v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "GKProfileService: setContactsIntegrationConsent error, reverted to %d", (uint8_t *)v3, 8u);
  sub_100027A04();
}

void sub_10003552C(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v3, v5, "Will not proceed getting relationsips for contact %@ because there is no completion block", v6);

  sub_1000279E0();
}

void sub_1000355BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Attempting to get relationships without a contact.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000355E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Will not proceed getting relationsips for contacts because there is no completion block", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100035614()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "getContactAssociationIDsForContacts: Unable to get relationships for contacts: relationships list was nil", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100035640(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v3, v5, "getContactAssociationIDsForContacts: Unable to get relationships for contacts: %@", v6);

  sub_1000279E0();
}

void sub_1000356D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Finished starting contacts controller", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000356FC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100034EE4((void *)&_mh_execute_header, a2, a3, "Finished syncing handles: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_100035764(void **a1, void *a2)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[24];

  v2 = *a1;
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "error"));
  sub_1000279B0();
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to fetch friends with error: %@", v5, 0xCu);

  sub_1000279E0();
}

void sub_1000357FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Failed to fetch installed game ids: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003585C(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  id v5;
  id v6;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  id v11;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = objc_msgSend(v3, "count");
  v6 = objc_msgSend(*(id *)(a1 + 40), "count");
  v8 = 134218240;
  v9 = v5;
  v10 = 2048;
  v11 = v6;
  sub_100027994((void *)&_mh_execute_header, v4, v7, "Preloaded scoped ids records for %lu players and %lu installed games", (uint8_t *)&v8);

}

void sub_100035910()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Failed to preload installed games scoped ids: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100035970()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Failed to query count of cached scoped ids: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000359D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Loaded all scoped ids from cache: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100035A30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "No player missing scoped ids found, using cached value: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100035A90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Ignoring error loading scoped ids from cache: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100035AF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Not loading scoped ids for empty list of effective game bundle ids", v2, v3, v4, v5, v6);
  sub_100027A04();
}

uint64_t sub_100035C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  return result;
}

void sub_100035CA8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "transport"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localPlayer"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileService, "serviceWithTransport:forClient:localPlayer:", v8, v5, v6));
  objc_msgSend(v7, "getProfilesForPlayerIDs:handler:", v4, *(_QWORD *)(a1 + 40));

}

NSPredicate *__cdecl sub_100035D70(id a1, NSString *a2, BOOL a3, NSDate *a4)
{
  return +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("player.playerID = %@"), a4, a2);
}

NSPredicate *__cdecl sub_100035DB4(id a1, NSString *a2, BOOL a3, NSDate *a4)
{
  return +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("player.playerID = %@"), a4, a2);
}

id sub_100035F00(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "getProfilesForPlayerIDs:handler:", a2, *(_QWORD *)(a1 + 40));
}

void sub_100035F20(uint64_t a1, void *a2, void *a3, double a4)
{
  void *v7;
  id v8;
  id v9;
  id v10;
  __int128 v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  __int128 v18;
  double v19;

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100036030;
  v12[3] = &unk_1002BD150;
  v13 = a2;
  v14 = a3;
  v7 = *(void **)(a1 + 32);
  v15 = *(id *)(a1 + 40);
  v16 = *(id *)(a1 + 48);
  v19 = a4;
  v17 = *(id *)(a1 + 32);
  v11 = *(_OWORD *)(a1 + 56);
  v8 = (id)v11;
  v18 = v11;
  v9 = v14;
  v10 = v13;
  objc_msgSend(v7, "performOnManagedObjectContext:", v12);

}

void sub_100036030(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  if (v7 && !*(_QWORD *)(a1 + 40))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("results")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", *(_QWORD *)(a1 + 48), v5));
    v10 = *(_QWORD *)(a1 + 56);
    if (v10)
    {
      v19 = 0;
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "existingObjectWithID:error:", v10, &v19));
      v12 = v19;
      v13 = v12;
      if (v12)
      {
        if (!os_log_GKGeneral)
          v14 = (id)GKOSLoggers(v12);
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
          sub_10003E42C();
      }

    }
    else
    {
      v11 = 0;
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[GKContactsIntegrationController sharedController](GKContactsIntegrationController, "sharedController"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "entries"));
    objc_msgSend(v15, "updateIDSEntriesFromOldFriendEntries:againstServerRepresentation:withContext:", v16, v8, v5);

    if (v11)
      objc_msgSend(v5, "deleteObject:", v11);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[GKFriendListCacheObject cacheFriendList:withTimeToLive:forProfile:managedObjectContext:commonFriends:](GKFriendListCacheObject, "cacheFriendList:withTimeToLive:forProfile:managedObjectContext:commonFriends:", v8, v9, v5, 0, *(double *)(a1 + 88)));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "filterableFriends"));
    objc_msgSend(*(id *)(a1 + 64), "setObject:forKeyedSubscript:", v18, CFSTR("filterablePlayers"));

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = *(double *)(a1 + 88) > 0.0;
  }
  objc_msgSend(*(id *)(a1 + 64), "setError:", *(_QWORD *)(a1 + 40));
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  v6[2](v6);

}

void sub_10003623C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  int v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *i;
  uint64_t v27;
  void *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  void *v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  id v39;
  __int16 v40;
  id v41;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("playerID")));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("skipCallbacks")));

    if (v3)
    {
      if (!os_log_GKGeneral)
        v5 = (id)GKOSLoggers(v4);
      v6 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: not calling handler because callbacks are skipped", buf, 2u);
      }
    }
    else
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("filterablePlayers")));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKFriendService filterFriends:filter:](GKFriendService, "filterFriends:filter:", v11, *(unsigned int *)(a1 + 64)));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_gkValuesForKeyPath:", CFSTR("playerID")));

      if (!os_log_GKGeneral)
        v15 = (id)GKOSLoggers(v14);
      v16 = (void *)os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        v17 = *(_DWORD *)(a1 + 64);
        v18 = v16;
        *(_DWORD *)buf = 67109632;
        v37 = v17;
        v38 = 2048;
        v39 = objc_msgSend(v13, "count");
        v40 = 2048;
        v41 = objc_msgSend(v11, "count");
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: filter %d kept %lu player IDs from %lu filterable players", buf, 0x1Cu);

      }
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
      v35 = v2;
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v35, 1));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "retrieveAndClearCallbacks:parameters:", CFSTR("gk-get-friend-player-ids"), v20));

      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v22 = v21;
      v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      if (v23)
      {
        v24 = v23;
        v25 = *(_QWORD *)v31;
        do
        {
          for (i = 0; i != v24; i = (char *)i + 1)
          {
            if (*(_QWORD *)v31 != v25)
              objc_enumerationMutation(v22);
            v27 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error", (_QWORD)v30));
            (*(void (**)(uint64_t, void *, void *))(v27 + 16))(v27, v13, v28);

          }
          v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
        }
        while (v24);
      }

      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      {
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
        objc_msgSend(v29, "refreshContentsForDataType:userInfo:", 2, 0);

      }
    }
  }
  else
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(0);
    v8 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "getFriendIDsForPlayer: not calling handler because callbacks are skipped", buf, 2u);
    }
    v9 = *(_QWORD *)(a1 + 48);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v10);

  }
}

void sub_100036778(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10003684C;
  v8[3] = &unk_1002BCC88;
  v6 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v6;
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", 0, CFSTR("gk-get-nearby-friend-token"), v5, v8);

}

void sub_10003684C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  const __CFString *v13;
  id v14;
  id v15;

  v5 = a3;
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKey:", CFSTR("friend-token")));
  v7 = -[__CFString length](v6, "length");
  if (!v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localPlayer"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "playerID"));
    v10 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NEARBY_TOKEN_%@"), v9));

    v6 = (__CFString *)v10;
  }
  v11 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v12 = (id)GKOSLoggers(v7);
    v11 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    sub_10003E4EC();
  if (v6)
    v13 = v6;
  else
    v13 = &stru_1002CE2A8;
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v13);
  v14 = objc_msgSend(*(id *)(a1 + 40), "setError:", v5);
  if (v5)
  {
    if (!os_log_GKGeneral)
      v15 = (id)GKOSLoggers(v14);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10003E48C();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000369B8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100036CCC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  const __CFString *v12;
  uint64_t v13;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v12 = CFSTR("friend-tokens");
  v13 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100036E04;
  v9[3] = &unk_1002BCB98;
  v10 = *(id *)(a1 + 48);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v6, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-establish-nearby-relationship"), v7, v9);

}

void sub_100036E04(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;

  v4 = a3;
  v5 = objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  if (v4)
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(v5);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10003E5B4();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100036E98(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10003705C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  const __CFString *v12;
  uint64_t v13;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v12 = CFSTR("request-id");
  v13 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100037194;
  v9[3] = &unk_1002BCB98;
  v10 = *(id *)(a1 + 48);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v6, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-get-friend-code"), v7, v9);

}

void sub_100037194(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  v5 = a3;
  v6 = v5;
  v8 = v5;
  if (a2 && !v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKey:", CFSTR("friend-code")));
    objc_msgSend(*(id *)(a1 + 32), "setResult:", v7);

    v6 = v8;
  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100037218(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

id sub_1000373A8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "getProfilesForPlayerIDs:fetchOptions:handler:", a2, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_100037450(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "transport"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localPlayer"));
  v8 = (id)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileServicePrivate, "serviceWithTransport:forClient:localPlayer:", v5, v6, v7));

  objc_msgSend(v8, "getProfilesForPlayerIDs:fetchOptions:handler:", v4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_1000375A4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "transport"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localPlayer"));
  v8 = (id)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileServicePrivate, "serviceWithTransport:forClient:localPlayer:", v5, v6, v7));

  objc_msgSend(v8, "getProfilesForPlayerIDs:fetchOptions:handler:", v4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_100037908(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (**v6)(_QWORD);
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](GKPlayerProfileCacheObject, "selfPlayerID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, v8, 0));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameStatServicePrivate currentFriendsPlayedList:](GKGameStatServicePrivate, "currentFriendsPlayedList:", v7));
  objc_msgSend(v10, "setExpirationDate:", 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("playerID == %@"), *(_QWORD *)(a1 + 32)));
  +[GKCacheObject deleteObjectsMatchingPredicate:context:](GKFriendListEntryCacheObject, "deleteObjectsMatchingPredicate:context:", v11, v7);

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("playerID == %@"), *(_QWORD *)(a1 + 32)));
  +[GKCacheObject deleteObjectsMatchingPredicate:context:](GKRecentPlayerListEntryCacheObject, "deleteObjectsMatchingPredicate:context:", v12, v7);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("player.playerID IN %@"), v9));
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKFriendListCacheObject, "expireObjectsMatchingPredicate:context:", v13, v7);

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("player.playerID IN %@"), v9));
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKRecentPlayerListCacheObject, "expireObjectsMatchingPredicate:context:", v14, v7);

  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKFriendRecommendationListCacheObject, "expireObjectsMatchingPredicate:context:", 0, v7);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKFriendRequestListCacheObject, "expireObjectsMatchingPredicate:context:", 0, v7);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID"));
  v17 = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
  +[GKPlayerProfileCacheObject removeFamiliarPlayerIDs:familiarity:](GKPlayerProfileCacheObject, "removeFamiliarPlayerIDs:familiarity:", v16, 2);

  v6[2](v6);
}

void sub_100037B68(uint64_t a1)
{
  id v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  objc_msgSend(v2, "refreshContentsForDataType:userInfo:", 2, 0);

}

void sub_100037D38(id *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;

  v3 = a2;
  if (v3)
  {
    v4 = objc_msgSend(a1[5], "setError:", v3);
    v5 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v6 = (id)GKOSLoggers(v4);
      v5 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      sub_10003E6A4();
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientProxy"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "localPlayer"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKGameStatServicePrivate, "serviceWithTransport:forClient:localPlayer:", 0, v7, v8));

    objc_msgSend(v9, "expireGamesFriendsPlayed");
    objc_msgSend(a1[5], "performOnManagedObjectContext:", &stru_1002BD210);

  }
  if (a1[6])
  {
    v10 = a1[5];
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientProxy"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "replyQueue"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100037FEC;
    v15[3] = &unk_1002BC3D0;
    v18 = a1[6];
    v13 = v3;
    v14 = a1[4];
    v16 = v13;
    v17 = v14;
    objc_msgSend(v10, "notifyOnQueue:block:", v12, v15);

  }
}

void sub_100037EC0(id a1, NSManagedObjectContext *a2, id a3)
{
  NSManagedObjectContext *v4;
  void (**v5)(_QWORD);
  void *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;

  v4 = a2;
  v5 = (void (**)(_QWORD))a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameStatServicePrivate currentFriendsPlayedList:](GKGameStatServicePrivate, "currentFriendsPlayedList:", v4));
  if (v6)
    -[NSManagedObjectContext deleteObject:](v4, "deleteObject:", v6);
  +[GKCacheObject deleteObjectsMatchingPredicate:context:](GKFriendListEntryCacheObject, "deleteObjectsMatchingPredicate:context:", 0, v4);
  +[GKCacheObject deleteObjectsMatchingPredicate:context:](GKRecentPlayerListEntryCacheObject, "deleteObjectsMatchingPredicate:context:", 0, v4);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKFriendListCacheObject, "expireObjectsMatchingPredicate:context:", 0, v4);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKFriendRecommendationListCacheObject, "expireObjectsMatchingPredicate:context:", 0, v4);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKFriendRequestListCacheObject, "expireObjectsMatchingPredicate:context:", 0, v4);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKRecentPlayerListCacheObject, "expireObjectsMatchingPredicate:context:", 0, v4);
  v5[2](v5);

  v8 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v9 = (id)GKOSLoggers(v7);
    v8 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    sub_10003E708();

}

void sub_100037FEC(uint64_t a1)
{
  id v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v2, "refreshContentsForDataType:userInfo:", 2, 0);

}

void sub_1000381C0(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  const __CFString *v14;
  void *v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "playerID"));
  if (v4)
  {
    v14 = CFSTR("reported-player-id");
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "playerID"));
    v15 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));

  }
  else
  {
    v6 = 0;
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100038340;
  v10[3] = &unk_1002BCC88;
  v11 = a1[4];
  v12 = a1[6];
  v13 = v3;
  v9 = v3;
  objc_msgSend(v7, "issueRequest:bagKey:clientProxy:handler:", v6, CFSTR("gk-report-a-concern-metadata"), v8, v10);

}

void sub_100038340(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("reported-player")));
  if (objc_msgSend(v7, "count"))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("nickname")));
    objc_msgSend(*(id *)(a1 + 32), "setAlias:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("first-name")));
    objc_msgSend(*(id *)(a1 + 32), "setFirstName:", v9);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("last-name")));
    objc_msgSend(*(id *)(a1 + 32), "setLastName:", v10);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("concerns")));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000384C4;
  v13[3] = &unk_1002BD238;
  v14 = *(id *)(a1 + 32);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_gkMapWithBlock:", v13));
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v12);

  objc_msgSend(*(id *)(a1 + 40), "setError:", v6);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

id sub_1000384C4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKConcernInternal internalRepresentation](GKConcernInternal, "internalRepresentation"));
  objc_msgSend(v4, "setPlayer:", *(_QWORD *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("id")));
  objc_msgSend(v4, "setConcernID:", objc_msgSend(v5, "unsignedLongValue"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("value")));
  objc_msgSend(v4, "setMessage:", v6);

  return v4;
}

void sub_10003856C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_1000387E4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  _QWORD v13[3];
  _QWORD v14[3];

  v3 = a2;
  v13[0] = CFSTR("reported-player-id");
  v13[1] = CFSTR("comments");
  v4 = *(_QWORD *)(a1 + 40);
  v14[0] = *(_QWORD *)(a1 + 32);
  v14[1] = v4;
  v13[2] = CFSTR("concern-id");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 48), "concernID")));
  v14[2] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 3));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100038960;
  v10[3] = &unk_1002BCB98;
  v11 = *(id *)(a1 + 64);
  v12 = v3;
  v9 = v3;
  objc_msgSend(v7, "issueRequest:bagKey:clientProxy:handler:", v6, CFSTR("gk-report-a-concern"), v8, v10);

}

uint64_t sub_100038960(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10003898C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

NSPredicate *__cdecl sub_1000389D0(id a1, NSString *a2, BOOL a3, NSDate *a4)
{
  NSPredicate *v4;
  uint64_t v6;

  if (a4)
    v4 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate > %@  && common = %d && player.playerID = %@"), a4, a3, a2);
  else
    v4 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate != nil && common = %d && player.playerID = %@"), a3, a2, v6);
  return (NSPredicate *)(id)objc_claimAutoreleasedReturnValue(v4);
}

void sub_100038B9C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  const __CFString *v12;
  uint64_t v13;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v12 = CFSTR("friend-code");
  v13 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100038CD4;
  v9[3] = &unk_1002BCB98;
  v10 = *(id *)(a1 + 48);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v6, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-cancel-friend-code"), v7, v9);

}

uint64_t sub_100038CD4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100038D00(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_100038EBC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v10 = *(_QWORD *)(a1 + 48);
    if (v10)
      (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v7);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "expireFriendList");
    v8 = *(void **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100038F88;
    v11[3] = &unk_1002BC0D0;
    v12 = *(id *)(a1 + 48);
    objc_msgSend(v8, "_invalidateCacheForFriendCode:handler:", v9, v11);

  }
}

void sub_100038F88(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (!v3)
  {
    +[GKClientProxy enumerateClientsUsingBlock:](GKClientProxy, "enumerateClientsUsingBlock:", &stru_1002BD298);
    v3 = 0;
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
    v3 = v5;
  }

}

void sub_100038FEC(id a1, GKClientProxy *a2, BOOL *a3)
{
  -[GKClientProxy refreshContentsForDataType:userInfo:](a2, "refreshContentsForDataType:userInfo:", 3, 0);
}

void sub_100039198(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  const __CFString *v12;
  uint64_t v13;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v12 = CFSTR("friend-code");
  v13 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000392D0;
  v9[3] = &unk_1002BCB98;
  v10 = *(id *)(a1 + 48);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v6, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-reject-friend-code"), v7, v9);

}

uint64_t sub_1000392D0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000392FC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v2)
    objc_msgSend(*(id *)(a1 + 40), "_invalidateCacheForFriendCode:handler:", *(_QWORD *)(a1 + 48), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v3, "refreshContentsForDataType:userInfo:", 3, 0);

  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

  }
}

void sub_100039520(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;
  _BYTE v21[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDFriendCodeDetail _gkFetchRequest](GKCDFriendCodeDetail, "_gkFetchRequest"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("friendCode == %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v7, "setPredicate:", v8);

  v20 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v7, &v20));
  v10 = v20;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v11 = v9;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v17;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v17 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(v5, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v15));
        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v13);
  }

  objc_msgSend(*(id *)(a1 + 40), "setError:", v10);
  v6[2](v6);

}

void sub_1000396CC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_100039728(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  int8x16_t v10;
  _QWORD v11[4];
  int8x16_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  const __CFString *v17;
  uint64_t v18;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v17 = CFSTR("friend-codes");
  v18 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000398AC;
  v11[3] = &unk_1002BD2E8;
  v10 = *(int8x16_t *)(a1 + 32);
  v8 = (id)v10.i64[0];
  v12 = vextq_s8(v10, v10, 8uLL);
  v13 = *(id *)(a1 + 48);
  v14 = *(id *)(a1 + 56);
  v15 = *(id *)(a1 + 64);
  v16 = v3;
  v9 = v3;
  objc_msgSend(v6, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-view-friend-code-details"), v7, v11);

}

void sub_1000398AC(id *a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  double v25;

  v7 = a2;
  v8 = a3;
  v9 = a1[4];
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKFriendService.m", 763, "-[GKFriendServicePrivate getFriendCodeDetailWithIdentifiers:handler:]_block_invoke_3"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "transactionGroupWithName:", v10));

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100039A7C;
  v18[3] = &unk_1002BD2C0;
  v19 = v7;
  v20 = v8;
  v21 = a1[5];
  v25 = a4;
  v22 = a1[6];
  v23 = a1[7];
  v24 = a1[8];
  v12 = v8;
  v13 = v7;
  objc_msgSend(v11, "performOnManagedObjectContext:", v18);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientProxy"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "replyQueue"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100039E70;
  v16[3] = &unk_1002BB540;
  v17 = a1[9];
  objc_msgSend(v11, "notifyOnQueue:block:", v15, v16);

}

void sub_100039A7C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  GKCDFriendCodeDetail *v18;
  void *v19;
  GKCDFriendCodeDetail *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  void (**v33)(_QWORD);
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  if (v7 && !*(_QWORD *)(a1 + 40))
  {
    v33 = v6;
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("results")));
    if (objc_msgSend(v37, "count"))
    {
      v8 = 0;
      do
      {
        v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", v8));
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDFriendCodeDetail _gkFetchRequest](GKCDFriendCodeDetail, "_gkFetchRequest"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("friendCode == %@"), v9));
        objc_msgSend(v10, "setPredicate:", v11);

        v35 = v10;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v10, 0));
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v40;
          do
          {
            v16 = 0;
            do
            {
              if (*(_QWORD *)v40 != v15)
                objc_enumerationMutation(v12);
              objc_msgSend(v5, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)v16));
              v16 = (char *)v16 + 1;
            }
            while (v14 != v16);
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
          }
          while (v14);
        }
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectAtIndexedSubscript:", v8));
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 80)));
        v18 = [GKCDFriendCodeDetail alloc];
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDFriendCodeDetail entity](GKCDFriendCodeDetail, "entity"));
        v20 = -[GKCDFriendCodeDetail initWithEntity:insertIntoManagedObjectContext:](v18, "initWithEntity:insertIntoManagedObjectContext:", v19, v5);

        v36 = (void *)v9;
        -[GKCDFriendCodeDetail setFriendCode:](v20, "setFriendCode:", v9);
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("creator-player-id")));
        -[GKCDFriendCodeDetail setCreatorPlayerId:](v20, "setCreatorPlayerId:", v21);

        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("friend-code-state")));
        -[GKCDFriendCodeDetail setFriendCodeState:](v20, "setFriendCodeState:", v22);

        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("num-uses")));
        -[GKCDFriendCodeDetail setNumUses:](v20, "setNumUses:", v23);

        v34 = v17;
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("already-used-player-ids")));
        v25 = v24;
        if (v24 && objc_msgSend(v24, "count"))
        {
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "componentsJoinedByString:", CFSTR(",")));
          -[GKCDFriendCodeDetail setAlreadyUsedPlayerIds:](v20, "setAlreadyUsedPlayerIds:", v26);

        }
        -[GKCDFriendCodeDetail setExpirationDate:](v20, "setExpirationDate:", v38);
        v27 = objc_msgSend(objc_alloc((Class)GKFriendCodeDetailInternal), "initWithFriendCodeDetail:", v20);
        objc_msgSend(*(id *)(a1 + 56), "addObject:", v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDFriendCodeDetail creatorPlayerId](v20, "creatorPlayerId"));

        if (v28)
        {
          v29 = *(void **)(a1 + 64);
          v30 = a1;
          v31 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDFriendCodeDetail creatorPlayerId](v20, "creatorPlayerId"));
          objc_msgSend(v29, "addObject:", v31);

          a1 = v30;
        }

        ++v8;
      }
      while (v8 < (unint64_t)objc_msgSend(v37, "count"));
    }
    v32 = objc_msgSend(*(id *)(a1 + 56), "copy");
    objc_msgSend(*(id *)(a1 + 72), "setObject:forKeyedSubscript:", v32, CFSTR("GKCDFriendCodeDetails"));

    v6 = v33;
  }
  objc_msgSend(*(id *)(a1 + 72), "setError:", *(_QWORD *)(a1 + 40));
  v6[2](v6);

}

uint64_t sub_100039E70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100039E7C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  objc_msgSend(v5, "setError:", a3);
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("GKPlayers"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10003A36C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  id v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSManagedObject _gkRetrieveCleanEntry:request:](NSManagedObject, "_gkRetrieveCleanEntry:request:", a2, v5));
  v8 = v7;
  if (v7)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "timeToLive"));
    if ((objc_msgSend(v8, "_gkIsExpired:", v9) & 1) == 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activityData"));
      v25 = 0;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary _gkDictionaryWithServerDataJson:error:](NSDictionary, "_gkDictionaryWithServerDataJson:error:", v10, &v25));
      v12 = v25;

      if (v12)
      {
        if (!os_log_GKGeneral)
          v14 = (id)GKOSLoggers(v13);
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
          sub_10003E7B4();
        objc_msgSend(*(id *)(a1 + 72), "setError:", v12);
      }
      else
      {
        v21 = objc_msgSend(objc_alloc((Class)GKPlayerActivityInternal), "initWithServerResponse:", v11);
        v22 = objc_msgSend(*(id *)(a1 + 72), "setResult:", v21);
        if (!os_log_GKGeneral)
          v23 = (id)GKOSLoggers(v22);
        v24 = os_log_GKTrace;
        if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "PlayerActivity: loaded from cache", buf, 2u);
        }

      }
    }

  }
  else
  {
    if (!os_log_GKGeneral)
      v15 = (id)GKOSLoggers(0);
    v16 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      v17 = *(_QWORD *)(a1 + 40);
      v18 = *(_QWORD *)(a1 + 48);
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 138413058;
      v27 = v17;
      v28 = 2112;
      v29 = v18;
      v30 = 2112;
      v31 = v19;
      v32 = 2112;
      v33 = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "PlayerActivity: No cache results found for continuation: %@, bundleID: %@, and playerID: %@, and GameCategoryFilter: %@", buf, 0x2Au);
    }
  }
  v6[2](v6);

}

void sub_10003A604(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(id, id, _QWORD);
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "result"));
  v3 = v2;
  if (v2 && a1[14])
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "error"));

    if (!v4)
    {
      v5 = (void (**)(id, id, _QWORD))a1[14];
      v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "result"));
      v5[2](v5, v13, 0);

      return;
    }
  }
  else
  {

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKFriendService.m", 930, "-[GKFriendServicePrivate getPlayerActivityFeed:bundleID:continuation:gameCategoryFilter:handler:]_block_invoke"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v6));

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10003A890;
  v17[3] = &unk_1002BD388;
  v18 = a1[5];
  v19 = a1[6];
  v20 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v21 = v8;
  v22 = v9;
  v10 = v7;
  v23 = v10;
  v24 = a1[10];
  v25 = a1[11];
  v26 = a1[12];
  v27 = a1[13];
  objc_msgSend(v10, "perform:", v17);
  if (a1[14])
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[9], "clientProxy"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "replyQueue"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10003B0F4;
    v14[3] = &unk_1002BB758;
    v15 = v10;
    v16 = a1[14];
    objc_msgSend(v15, "notifyOnQueue:block:", v12, v14);

  }
}

void sub_10003A890(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("NoGameId")) & 1) == 0)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), CFSTR("bundle-id"));
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v5, CFSTR("player-id"));
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("continuation-key"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  v8 = objc_msgSend(v7, "activityFeedTestFeedOnly");

  if (v8)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("include-test-feed"));
  v9 = *(_QWORD *)(a1 + 56);
  if (v9)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("type"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "clientProxy"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10003AA94;
  v15[3] = &unk_1002BD360;
  v12 = *(id *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 64);
  v16 = v12;
  v17 = v13;
  v18 = *(id *)(a1 + 80);
  v19 = *(id *)(a1 + 88);
  v20 = *(id *)(a1 + 32);
  v21 = *(id *)(a1 + 96);
  v22 = *(id *)(a1 + 104);
  v23 = v3;
  v14 = v3;
  objc_msgSend(v10, "issueRequest:bagKey:clientProxy:handler:", v4, CFSTR("gk-get-activity-feed"), v11, v15);

}

void sub_10003AA94(id *a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  double v33;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (!v7 || v8)
  {
    objc_msgSend(a1[4], "setError:", v8);
  }
  else
  {
    v10 = objc_msgSend(objc_alloc((Class)GKPlayerActivityInternal), "initWithServerResponse:", v7);
    objc_msgSend(a1[4], "setResult:", v10);

  }
  v11 = a1[5];
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKFriendService.m", 957, "-[GKFriendServicePrivate getPlayerActivityFeed:bundleID:continuation:gameCategoryFilter:handler:]_block_invoke_3"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "transactionGroupWithName:", v12));

  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10003ACEC;
  v24[3] = &unk_1002BD338;
  v25 = a1[6];
  v26 = v9;
  v14 = v13;
  v27 = v14;
  v28 = v7;
  v29 = a1[7];
  v30 = a1[8];
  v31 = a1[9];
  v33 = a4;
  v32 = a1[10];
  v15 = v7;
  v16 = v9;
  objc_msgSend(v14, "performOnManagedObjectContext:", v24);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "replyQueue"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10003B04C;
  v20[3] = &unk_1002BB568;
  v21 = v14;
  v22 = a1[4];
  v23 = a1[11];
  v19 = v14;
  objc_msgSend(v19, "notifyOnQueue:block:", v18, v20);

}

void sub_10003ACEC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  GKCDPlayerActivity *v7;
  uint64_t v8;
  GKCDPlayerActivity *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  GKCDPlayerActivity *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  NSObject *v27;
  id v28;
  uint8_t buf[8];
  id v30;

  v5 = a2;
  v6 = a3;
  v7 = (GKCDPlayerActivity *)objc_claimAutoreleasedReturnValue(+[NSManagedObject _gkRetrieveCleanEntry:request:](NSManagedObject, "_gkRetrieveCleanEntry:request:", v5, *(_QWORD *)(a1 + 32)));
  v8 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    v9 = v7;
    if (v8)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDPlayerActivity activityData](v7, "activityData"));
      v30 = 0;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary _gkDictionaryWithServerDataJson:error:](NSDictionary, "_gkDictionaryWithServerDataJson:error:", v10, &v30));
      v12 = v30;

      if (v12)
      {
        if (!os_log_GKGeneral)
          v14 = (id)GKOSLoggers(v13);
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
          sub_10003E874();
        objc_msgSend(*(id *)(a1 + 48), "setError:", v12);
      }
      else
      {
        v15 = objc_msgSend(objc_alloc((Class)GKPlayerActivityInternal), "initWithServerResponse:", v11);
        v16 = objc_msgSend(*(id *)(a1 + 48), "setResult:", v15);
        if (!os_log_GKGeneral)
          v17 = (id)GKOSLoggers(v16);
        v18 = os_log_GKTrace;
        if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Player Activity: loaded from stale cache", buf, 2u);
        }

      }
LABEL_26:
      v6[2](v6);

      goto LABEL_27;
    }
LABEL_17:
    v21 = *(_QWORD *)(a1 + 56);
    v28 = 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v21, 1, &v28));
    v22 = v28;
    v12 = v22;
    if (v22)
    {
      if (!os_log_GKGeneral)
        v23 = (id)GKOSLoggers(v22);
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_10003E814();
    }
    else
    {
      -[GKCDPlayerActivity setActivityData:](v9, "setActivityData:", v11);
      -[GKCDPlayerActivity setContinuation:](v9, "setContinuation:", *(_QWORD *)(a1 + 64));
      -[GKCDPlayerActivity setGameID:](v9, "setGameID:", *(_QWORD *)(a1 + 72));
      -[GKCDPlayerActivity setTargetPlayerID:](v9, "setTargetPlayerID:", *(_QWORD *)(a1 + 80));
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 96)));
      -[GKCDPlayerActivity setTimeToLive:](v9, "setTimeToLive:", v24);

      -[GKCDPlayerActivity setGameCategoryFilter:](v9, "setGameCategoryFilter:", *(_QWORD *)(a1 + 88));
      v25 = -[GKCDPlayerActivity setVersion:](v9, "setVersion:", CFSTR("v1.0"));
      if (!os_log_GKGeneral)
        v26 = (id)GKOSLoggers(v25);
      v27 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Player Activity: updated cache from network", buf, 2u);
      }
    }
    goto LABEL_26;
  }
  if (!v8)
  {
    v19 = [GKCDPlayerActivity alloc];
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDPlayerActivity entity](GKCDPlayerActivity, "entity"));
    v9 = -[GKCDPlayerActivity initWithEntity:insertIntoManagedObjectContext:](v19, "initWithEntity:insertIntoManagedObjectContext:", v20, v5);

    goto LABEL_17;
  }
  v6[2](v6);
LABEL_27:

}

uint64_t sub_10003B04C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  void *v5;

  v2 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v3 = (id)GKOSLoggers(a1);
    v2 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_10003E8D4(a1, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "result"));

  if (!v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    objc_msgSend(*(id *)(a1 + 40), "setResult:", v5);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10003B0F4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v3 = (id)GKOSLoggers(a1);
    v2 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_10003E8D4(a1, v2);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v5, v6);

}

void sub_10003B2EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDPlayerActivity _gkFetchRequest](GKCDPlayerActivity, "_gkFetchRequest"));
  v8 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v7);
  v11 = 0;
  v9 = objc_msgSend(v5, "executeRequest:error:", v8, &v11);
  v10 = v11;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v10);
  v6[2](v6);

}

void sub_10003B3B8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_10003B568(id a1, NSManagedObjectContext *a2, id a3)
{
  void (**v4)(_QWORD);
  NSManagedObjectContext *v5;
  void *v6;
  id v7;

  v4 = (void (**)(_QWORD))a3;
  v5 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[GKCacheObject fetchRequestForContext:](GKFriendListCacheObject, "fetchRequestForContext:", v5));
  objc_msgSend(v7, "setReturnsDistinctResults:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSManagedObject _gkRetrieveCleanEntry:request:](NSManagedObject, "_gkRetrieveCleanEntry:request:", v5, v7));

  objc_msgSend(v6, "expire");
  v4[2](v4);

}

void sub_10003B608(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  objc_msgSend(v1, "refreshContentsForDataType:userInfo:", 2, 0);

}

void sub_10003B640(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;

  v1 = GKInsecureCacheRoot(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (id)gkEnsureDirectory(v2);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("messageInboxCache.plist")));

  v5 = (void *)qword_100317E10;
  qword_100317E10 = v4;

}

void sub_10003B698(id a1)
{
  dword_100317E20 = 0;
}

void sub_10003B918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;

  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
    v5 = objc_msgSend(v4, "fakeFriendRequestCount");

    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localPlayer"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10003B9FC;
    v10[3] = &unk_1002BD1F0;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v12 = v5;
    v10[4] = v8;
    v11 = v9;
    objc_msgSend(v6, "getFriendsForPlayer:handler:", v7, v10);

  }
}

void sub_10003B9FC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;

  v3 = a2;
  v4 = objc_msgSend(v3, "count");
  if ((unint64_t)v4 >= *(_QWORD *)(a1 + 48))
    v5 = *(id *)(a1 + 48);
  else
    v5 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transport"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localPlayer"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileServicePrivate, "serviceWithTransport:forClient:localPlayer:", v6, v7, v8));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10003BB28;
  v12[3] = &unk_1002BD460;
  v10 = *(void **)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = v5;
  v13 = v3;
  v14 = v10;
  v11 = v3;
  objc_msgSend(v9, "getSuggestionsForNickname:suggestionsCount:handler:", CFSTR("Skeezix"), 20, v12);

}

void sub_10003BB28(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  const __CFString *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD v64[4];
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[128];

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v66, v70, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v67;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v67 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * (_QWORD)i);
        v10 = objc_msgSend(v9, "length");
        v64[0] = _NSConcreteStackBlock;
        v64[1] = 3221225472;
        v64[2] = sub_10003C358;
        v64[3] = &unk_1002BD438;
        v65 = v3;
        objc_msgSend(v9, "enumerateSubstringsInRange:options:usingBlock:", 0, v10, 3, v64);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v66, v70, 16);
    }
    while (v6);
  }

  v11 = objc_msgSend(v4, "count");
  if ((unint64_t)v11 <= 1)
    v12 = 1;
  else
    v12 = (uint64_t)v11;
  v45 = v12;
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v13 = a1;
  if (*(uint64_t *)(a1 + 48) >= 1)
  {
    v62 = 0;
    v63 = 0;
    v14 = 0;
    v60 = 0;
    v61 = 0;
    v59 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v13 + 32), "objectAtIndexedSubscript:", v16 % *(_QWORD *)(v13 + 56)));
      v18 = objc_msgSend(v17, "copy");

      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "alias"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v16));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@"), v19, v20));
      objc_msgSend(v18, "setAlias:", v21);

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "playerID"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v16));
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@"), v22, v23));
      objc_msgSend(v18, "setPlayerID:", v24);

      v25 = objc_alloc_init((Class)GKMessageInboxEntryInternal);
      objc_msgSend(v18, "setInboxEntry:", v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v16));
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v26));
      objc_msgSend(v25, "setFriendCode:", v27);

      objc_msgSend(v18, "setIsInContacts:", 0);
      switch(v16)
      {
        case 1:
          v28 = v25;
          v29 = CFSTR("user@email.com");
          break;
        case 2:
          v28 = v25;
          v29 = CFSTR("555-987-6543");
          break;
        case 4:
          objc_msgSend(v25, "setSenderHandle:", CFSTR("555-987-6543"));
          objc_msgSend(v25, "setSenderAlias:", CFSTR("gracec@email.com"));
          objc_msgSend(v25, "setContactName:", CFSTR("Grace Copeland"));
          goto LABEL_23;
        default:
          v30 = v62 % 0xA;
          v31 = v63 % 0xA;
          if (v16 % 5uLL == 1)
          {
            v50 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v31));
            v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v14 % 0xAuLL));
            v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v30));
            v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v61 % 0xA));
            v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v60 % 0xA));
            v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v59 % 0xA));
            v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v15 % 0xA));
            v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("555-%@%@%@-%@%@%@%@"), v50, v48, v46, v52, v44, v34, v35));
            objc_msgSend(v25, "setSenderHandle:", v36);

            v37 = (void *)v50;
          }
          else
          {
            if (v16 % 5uLL == 4)
            {
              v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", (uint64_t)((unint64_t)(v16 + 1) >> 2) % v45));
              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", (uint64_t)(7 * ((unint64_t)(v16 + 1) >> 2)) % v45));
              v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ %@"), v54, v32));
              objc_msgSend(v25, "setContactName:", v33);

LABEL_23:
              objc_msgSend(v18, "setIsInContacts:", 1);
LABEL_27:
              v13 = a1;
              goto LABEL_28;
            }
            v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v31));
            v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v14 % 0xAuLL));
            v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v30));
            v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v61 % 0xA));
            v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v60 % 0xA));
            v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v59 % 0xA));
            v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v15 % 0xA));
            v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("555-%@%@%@-%@%@%@%@"), v51, v49, v47, v53, v38, v39, v56));
            objc_msgSend(v25, "setSenderHandle:", v40);

            v55 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", v16 % v45));
            v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v16));
            v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", v14 % v45));
            v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@@%@.com"), v55, v41, v42));
            objc_msgSend(v25, "setSenderAlias:", v43);

            v37 = (void *)v55;
          }

          goto LABEL_27;
      }
      objc_msgSend(v28, "setSenderHandle:", v29);
      v13 = a1;
LABEL_28:
      objc_msgSend(v58, "addObject:", v18);

      ++v16;
      v15 += 29;
      v59 += 23;
      v60 += 17;
      v61 += 11;
      v62 += 7;
      v14 += 3;
      v63 += 13;
    }
    while (v16 < *(_QWORD *)(v13 + 48));
  }
  (*(void (**)(void))(*(_QWORD *)(v13 + 40) + 16))();

}

id sub_10003C358(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_10003C364(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  v5 = (void *)a1[4];
  v4 = (void *)a1[5];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10003C408;
  v9[3] = &unk_1002BD488;
  v6 = v4;
  v7 = a1[6];
  v11 = v3;
  v12 = v7;
  v10 = v6;
  v8 = v3;
  objc_msgSend(v5, "removeMessageInboxEntries:handler:", v6, v9);

}

void sub_10003C408(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10003E978((uint64_t)a1, (uint64_t)v4, v6);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(0);
    v8 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v9 = a1[4];
      v10 = 138412290;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "removed inbox entries: %@", (uint8_t *)&v10, 0xCu);
    }
  }
  (*(void (**)(void))(a1[5] + 16))();

}

void sub_10003C548(uint64_t a1, void *a2)
{
  CNContactStore *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  CNContactStore *v19;
  void (**v20)(_QWORD);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  id v25;
  _BYTE v26[128];
  void *v27;

  v20 = a2;
  v3 = objc_opt_new(CNContactStore);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactFormatter descriptorForRequiredKeysForStyle:](CNContactFormatter, "descriptorForRequiredKeysForStyle:", 0));
  v27 = v4;
  v5 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v27, 1));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CNContact predicateForContactsWithIdentifiers:](CNContact, "predicateForContactsWithIdentifiers:", v6));

  v25 = 0;
  v18 = (void *)v5;
  v19 = v3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[CNContactStore unifiedContactsMatchingPredicate:keysToFetch:error:](v3, "unifiedContactsMatchingPredicate:keysToFetch:error:", v7, v5, &v25));
  v9 = v25;
  objc_msgSend(*(id *)(a1 + 40), "setError:", v9);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v10 = v8;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        v16 = *(void **)(a1 + 48);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "identifier"));
        objc_msgSend(v16, "setObject:forKeyedSubscript:", v15, v17);

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v12);
  }

  v20[2](v20);
}

void sub_10003C754(uint64_t a1)
{
  void *v2;
  CNContactFormatter *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allValues"));
  v3 = objc_opt_new(CNContactFormatter);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "inboxEntry", (_QWORD)v18));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contactID"));

        if (v11)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v11));
          if (v12)
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(-[CNContactFormatter stringFromContact:](v3, "stringFromContact:", v12));
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "inboxEntry"));
            objc_msgSend(v14, "setContactName:", v13);

          }
        }

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v6);
  }

  v15 = *(_QWORD *)(a1 + 64);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
  (*(void (**)(uint64_t, id, void *))(v15 + 16))(v15, v4, v16);

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
    objc_msgSend(v17, "refreshContentsForDataType:userInfo:", 3, 0);

  }
}

void sub_10003CAFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10003CB14(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  int8x16_t v13;
  _QWORD v14[4];
  int8x16_t v15;
  id v16;
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  id v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  void *v25;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inboxEntry"));

  if (v4)
  {
    v5 = *(void **)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inboxEntry"));
    v25 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10003CEF4;
    v14[3] = &unk_1002BD578;
    v18 = *(_BYTE *)(a1 + 56);
    v13 = *(int8x16_t *)(a1 + 32);
    v8 = (id)v13.i64[0];
    v15 = vextq_s8(v13, v13, 8uLL);
    v17 = *(_QWORD *)(a1 + 48);
    v16 = v3;
    objc_msgSend(v5, "removeMessageInboxEntries:handler:", v7, v14);

    v9 = (void *)v15.i64[1];
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 56);
    v11 = *(void **)(a1 + 40);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerID"));
    if (v10)
    {
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_10003CD10;
      v22[3] = &unk_1002BD550;
      v24 = *(_QWORD *)(a1 + 48);
      v23 = v3;
      objc_msgSend(v11, "acceptFriendInvitationWithPlayerID:completion:", v12, v22);

      v9 = v23;
    }
    else
    {
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_10003CE30;
      v19[3] = &unk_1002BD550;
      v21 = *(_QWORD *)(a1 + 48);
      v20 = v3;
      objc_msgSend(v11, "ignoreFriendInvitationWithPlayerID:completion:", v12, v19);

      v9 = v20;
    }
  }

}

void sub_10003CD10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  int v9;
  void *v10;

  v3 = a2;
  v4 = v3;
  v5 = os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(v3);
    v7 = os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      v9 = 138412290;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKFriendService didAccept: accept native friend request failed: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    if (!os_log_GKGeneral)
    {
      v8 = (id)GKOSLoggers(0);
      v5 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      sub_10003E9F4();
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10003CE30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  id v7;

  v3 = a2;
  v4 = v3;
  v5 = os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10003EA4C();
  }
  else
  {
    if (!os_log_GKGeneral)
    {
      v7 = (id)GKOSLoggers(0);
      v5 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      sub_10003EA20();
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10003CEF4(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  void *v5;
  id *v6;
  id *v7;
  id v8;
  id v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[4];
  id v13;
  __int128 v14;
  _QWORD v15[4];
  id v16;
  __int128 v17;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "inboxEntry"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "friendCode"));
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10003D03C;
    v15[3] = &unk_1002BD488;
    v6 = &v16;
    v16 = *(id *)(a1 + 40);
    v7 = (id *)&v17;
    v10 = *(_OWORD *)(a1 + 48);
    v8 = (id)v10;
    v17 = v10;
    objc_msgSend(v3, "acceptFriendRequestWithIdentifier:sendPush:handler:", v5, 1, v15);
  }
  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10003D164;
    v12[3] = &unk_1002BD488;
    v6 = &v13;
    v13 = *(id *)(a1 + 40);
    v7 = (id *)&v14;
    v11 = *(_OWORD *)(a1 + 48);
    v9 = (id)v11;
    v14 = v11;
    objc_msgSend(v3, "rejectFriendRequestWithIdentifier:handler:", v5, v12);
  }

}

void sub_10003D03C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  int v9;
  void *v10;

  v3 = a2;
  v4 = v3;
  v5 = os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(v3);
    v7 = os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      v9 = 138412290;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "acccept friend code failed: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    if (!os_log_GKGeneral)
    {
      v8 = (id)GKOSLoggers(0);
      v5 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      sub_10003EAAC(a1, v5);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10003D164(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  id v7;

  v3 = a2;
  v4 = v3;
  v5 = os_log_GKGeneral;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10003EBE4();
  }
  else
  {
    if (!os_log_GKGeneral)
    {
      v7 = (id)GKOSLoggers(0);
      v5 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      sub_10003EB48(a1, v5);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10003D230(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    objc_msgSend(v2, "refreshContentsForDataType:userInfo:", 3, 0);

  }
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

id sub_10003D43C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "refreshContentsForDataType:userInfo:", 21, *(_QWORD *)(a1 + 32));
}

NSSecureCoding *__cdecl sub_10003D4DC(id a1, NSDictionary *a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("friends-last-activities")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_gkMapWithBlock:", &stru_1002BD628));

  return (NSSecureCoding *)v3;
}

id sub_10003D528(id a1, NSDictionary *a2, unint64_t a3)
{
  NSDictionary *v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)GKFriendActivityInternal), "initWithServerRepresentation:", v3);

  return v4;
}

NSSecureCoding *__cdecl sub_10003D670(id a1, NSDictionary *a2)
{
  return (NSSecureCoding *)-[NSDictionary _gkSubDictionaryWithKeys:](a2, "_gkSubDictionaryWithKeys:", &off_1002DC5D8);
}

void sub_10003D860(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10003D8F4;
  v6[3] = &unk_1002BCA30;
  v4 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "getActiveFriendRequests:", v6);

}

void sub_10003D8F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      v11 = 138412290;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Unable to fetch iMessage friend requests --- %@", (uint8_t *)&v11, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v5, CFSTR("messagesFriendRequests"));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10003DA18(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10003DABC;
  v8[3] = &unk_1002BD690;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "getFriendInvitationMailboxWithType:completion:", CFSTR("inbox"), v8);

}

void sub_10003DABC(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKFriending;
    if (os_log_type_enabled(os_log_GKFriending, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Unable to fetch native friend requests --- %@", buf, 0xCu);
    }
    objc_msgSend(a1[4], "setError:", v7);
    (*((void (**)(void))a1[6] + 2))();
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("inbox")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_gkMapWithBlock:", &stru_1002BD668));

    if (objc_msgSend(v11, "count"))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "transport"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "localPlayer"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileServicePrivate, "serviceWithTransport:forClient:localPlayer:", v12, v13, v14));
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10003DCF8;
      v16[3] = &unk_1002BCA30;
      v17 = a1[4];
      v18 = a1[6];
      objc_msgSend(v15, "getProfilesForPlayerIDs:fetchOptions:handler:", v11, 1, v16);

    }
    else
    {
      (*((void (**)(void))a1[6] + 2))();
    }

  }
}

id sub_10003DCE8(id a1, NSDictionary *a2, unint64_t a3)
{
  return -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("issuing-player-id"));
}

uint64_t sub_10003DCF8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "result"));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, CFSTR("nativeFriendRequests"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10003DD58(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("messagesFriendRequests")));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("nativeFriendRequests")));

  v5 = objc_alloc((Class)NSMutableArray);
  if (v12)
    v6 = v12;
  else
    v6 = &__NSArray0__struct;
  v7 = objc_msgSend(v5, "initWithArray:", v6);
  v8 = v7;
  if (v4)
    v9 = v4;
  else
    v9 = &__NSArray0__struct;
  objc_msgSend(v7, "addObjectsFromArray:", v9);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = objc_msgSend(v8, "copy");
  (*(void (**)(uint64_t, id, _QWORD))(v10 + 16))(v10, v11, 0);

}

void sub_10003E240(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  char v12;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10003E304;
  v9[3] = &unk_1002BD6B8;
  v12 = *(_BYTE *)(a1 + 48);
  v7 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v4;
  v11 = v7;
  v8 = v4;
  dispatch_async(v6, v9);

}

uint64_t sub_10003E304(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    objc_msgSend(v2, "refreshContentsForDataType:userInfo:", 3, 0);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10003E350(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

id sub_10003E374(uint64_t a1, void *a2)
{
  return a2;
}

id sub_10003E380(uint64_t a1, void *a2)
{
  return a2;
}

void sub_10003E38C(uint64_t a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = a2;
  v4 = GKStackTraceWithFrameLimit(10);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v7 = 138412546;
  v8 = a1;
  sub_10003E364();
  sub_100027A70((void *)&_mh_execute_header, v3, v6, "getFriendIDsForPlayer: internal without playerID:%@: %@", (uint8_t *)&v7);

  sub_1000279A0();
}

void sub_10003E42C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "getFriendIDsForPlayer: encountered a fetch error while trying to lookup a game access list: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003E48C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "getNearbyTokenForLocalPlayerWithHandler server error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003E4EC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "getNearbyTokenForLocalPlayerWithHandler: nearby token received:%@", v2);
  sub_100016C20();
}

void sub_10003E550()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "establishNearbyRelationshipsUsingPlayerTokens: nearby tokens:%@", v2);
  sub_100016C20();
}

void sub_10003E5B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "establishNearbyRelationshipsUsingPlayerTokens: server error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003E614()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "removeFriendWithPlayer: Removing a friend with playerID %@", v2);
  sub_100016C20();
}

void sub_10003E678()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "removeAllFriends: starting...", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10003E6A4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "removeAllFriends: failed with error: %@", v2);
  sub_100016C20();
}

void sub_10003E708()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "removeAllFriends: succeeded", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10003E734(uint8_t *a1, void *a2, void *a3, _QWORD *a4)
{
  NSObject *v7;
  void *v8;

  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "localizedDescription"));
  *(_DWORD *)a1 = 138412290;
  *a4 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error loading friend code from cache: %@", a1, 0xCu);

}

void sub_10003E7B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "PlayerActivity Error deserializing cached activity feed: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003E814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Player Activity Error: serializing new activity feed cache: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003E874()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Player Activity Error deserializing stale cached activity feed: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003E8D4(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_10003E380(a1, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "result"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  sub_10003E364();
  sub_10003E350((void *)&_mh_execute_header, v7, v8, "Player Activity: finished network group result: %@, error: %@", v9, v10, v11, v12, 2u);

  sub_1000279A0();
}

void sub_10003E978(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  sub_100027A70((void *)&_mh_execute_header, a3, (uint64_t)a3, "removal of %@ failed due to %@", (uint8_t *)&v4);
  sub_100016C20();
}

void sub_10003E9F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKFriendSerivce didAccept: accepted native friend request", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10003EA20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKFriendSerivce didAccept: ignored native friend request", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10003EA4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "GKFriendService didAccept: ignore native friend request failed: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003EAAC(uint64_t a1, void *a2)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];

  v3 = sub_10003E374(a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "inboxEntry"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "friendCode"));
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v3, v6, "accepted friendCode: %@", v7);

  sub_1000279A0();
}

void sub_10003EB48(uint64_t a1, void *a2)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];

  v3 = sub_10003E374(a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "inboxEntry"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "friendCode"));
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v3, v6, "rejected friendCode: %@", v7);

  sub_1000279A0();
}

void sub_10003EBE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "reject friend code failed: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10003EF84(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  void *v10;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "entityName"));
  v7 = 138412546;
  v8 = a1;
  v9 = 2112;
  v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Cache Error: %@ failed to retrieve cache for fetched entity: %@", (uint8_t *)&v7, 0x16u);

}

void sub_10003F040(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Fetch error occurred.", v1, 2u);
}

void sub_10003F0CC(id a1)
{
  GKGameActivityStore *v1;
  void *v2;

  v1 = objc_alloc_init(GKGameActivityStore);
  v2 = (void *)qword_100317E30;
  qword_100317E30 = (uint64_t)v1;

}

void sub_10003F21C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)ASCLockupViewGroup), "initWithName:", CFSTR("ASCLockupView.Group.gameCenter"));
  v2 = (void *)qword_100317E48;
  qword_100317E48 = (uint64_t)v1;

}

void sub_10003F250(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9;

  v2 = (void *)qword_100317E48;
  v3 = *(_QWORD *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10003F2F0;
  v6[3] = &unk_1002BD798;
  v9 = *(id *)(a1 + 56);
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v2, "_cacheLockupsWithCollectionRequest:withCompletionBlock:", v3, v6);

}

void sub_10003F2F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void (*v9)(void);
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  id v27;
  _QWORD v28[5];
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[4];
  id v36;
  _BYTE v37[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100052254();
    v9 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
    goto LABEL_7;
  }
  if (!objc_msgSend(v5, "count"))
  {
    v9 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
LABEL_7:
    v9();
    goto LABEL_17;
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_10003F63C;
  v35[3] = &unk_1002BD748;
  v24 = a1;
  v36 = *(id *)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_gkFilterWithBlock:", v35));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m", 106, "-[GKGameService getArcadeHighlightForAdamID:count:handler:]_block_invoke_2"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  objc_msgSend(v12, "setResult:", v13);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v5 = v10;
  v14 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v32 != v16)
          objc_enumerationMutation(v5);
        v18 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_10003F6AC;
        v28[3] = &unk_1002BB4A0;
        v28[4] = v18;
        v19 = v12;
        v29 = v19;
        v30 = v13;
        objc_msgSend(v19, "perform:", v28);

      }
      v15 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
    }
    while (v15);
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v24 + 40), "clientProxy"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "replyQueue"));
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10003F990;
  v25[3] = &unk_1002BB450;
  v22 = *(id *)(v24 + 48);
  v26 = v12;
  v27 = v22;
  v23 = v12;
  objc_msgSend(v23, "notifyOnQueue:block:", v21, v25);

  v7 = 0;
LABEL_17:

}

id sub_10003F63C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "id"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "numberValue"));

  if (objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 32)))
    v6 = 0;
  else
    v6 = v3;
  v7 = v6;

  return v7;
}

void sub_10003F6AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD v16[3];

  v3 = a2;
  v4 = (void *)qword_100317E48;
  v5 = *(_QWORD *)(a1 + 32);
  v16[0] = _ASCLockupKeyIcon;
  v16[1] = _ASCLockupKeyTitle;
  v16[2] = _ASCLockupKeySubtitle;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v16, 3));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v6));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10003F80C;
  v11[3] = &unk_1002BD770;
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  v12 = v8;
  v13 = v9;
  v14 = *(id *)(a1 + 48);
  v15 = v3;
  v10 = v3;
  objc_msgSend(v4, "_lockupDictionaryForRequest:includingKeys:withCompletionBlock:", v5, v7, v11);

}

void sub_10003F80C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000522B4();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  }
  else
  {
    v9 = objc_alloc_init((Class)GKGameHighlightInternal);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "id"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "numberValue"));
    objc_msgSend(v9, "setAdamID:", v11);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", _ASCLockupKeyIcon));
    objc_msgSend(v9, "setArtwork:", v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", _ASCLockupKeyTitle));
    objc_msgSend(v9, "setTitle:", v13);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", _ASCLockupKeySubtitle));
    objc_msgSend(v9, "setSubtitle:", v14);

    objc_msgSend(*(id *)(a1 + 48), "addObject:", v9);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10003F990(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10003FB68(id *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  void (**v22)(_QWORD);

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings _gkFetchRequest](GKCDGameSettings, "_gkFetchRequest"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("bundleID == %@"), a1[4]));
  objc_msgSend(v7, "setPredicate:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v7, 0));
  if (!objc_msgSend(v9, "count"))
  {
    v11 = 0;
LABEL_6:
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v16 = GKBagKeyGetPerGameSettings;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10003FD7C;
    v18[3] = &unk_1002BD7E8;
    v19 = a1[6];
    v20 = a1[4];
    v21 = v5;
    v22 = v6;
    objc_msgSend(v15, "issueRequest:bagKey:clientProxy:handler:", &__NSDictionary0__struct, v16, v17, v18);

    goto LABEL_7;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
  v11 = v10;
  if (!v10)
    goto LABEL_6;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "expirationDate"));
  v13 = objc_msgSend(v11, "_gkIsExpired:", v12);

  if (v13)
    goto LABEL_6;
  v14 = objc_msgSend(objc_alloc((Class)GKGameSettingsInternal), "initWithGameSettings:", v11);
  objc_msgSend(a1[6], "setResult:", v14);

  v6[2](v6);
LABEL_7:

}

void sub_10003FD7C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", a4));
  if (v7 && !a3)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10003FE9C;
    v13[3] = &unk_1002BD310;
    v12 = *(void **)(a1 + 32);
    v14 = *(id *)(a1 + 40);
    v15 = *(id *)(a1 + 48);
    v16 = 0;
    v17 = v7;
    v18 = v11;
    v19 = *(id *)(a1 + 32);
    objc_msgSend(v12, "performOnManagedObjectContext:", v13);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v8, v9, v10);

}

void sub_10003FE9C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  GKCDGameSettings *v20;
  void *v21;
  GKCDGameSettings *v22;
  void *v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  _BYTE v30[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings _gkFetchRequest](GKCDGameSettings, "_gkFetchRequest"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("bundleID == %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v7, "setPredicate:", v8);

  v9 = *(void **)(a1 + 40);
  v29 = 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "executeFetchRequest:error:", v7, &v29));
  v11 = v29;
  v12 = v11;
  if (v11)
  {
    if (!os_log_GKGeneral)
      v13 = (id)GKOSLoggers(v11);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100052314();
  }
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v14 = v10;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v26;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v26 != v17)
          objc_enumerationMutation(v14);
        objc_msgSend(v5, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v18));
        v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v16);
  }

  v19 = *(id *)(a1 + 56);
  v20 = [GKCDGameSettings alloc];
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings entity](GKCDGameSettings, "entity"));
  v22 = -[GKCDGameSettings initWithEntity:insertIntoManagedObjectContext:](v20, "initWithEntity:insertIntoManagedObjectContext:", v21, v5);

  -[GKCDGameSettings setBundleID:](v22, "setBundleID:", *(_QWORD *)(a1 + 32));
  -[GKCDGameSettings setExpirationDate:](v22, "setExpirationDate:", *(_QWORD *)(a1 + 64));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("allow-friend-list-access")));
  -[GKCDGameSettings setAllowFriendListAccess:](v22, "setAllowFriendListAccess:", v23);

  v24 = objc_msgSend(objc_alloc((Class)GKGameSettingsInternal), "initWithGameSettings:", v22);
  objc_msgSend(*(id *)(a1 + 72), "setResult:", v24);

  v6[2](v6);
}

void sub_10004013C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10004031C(id *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  GKCDGameSettings *v10;
  unint64_t v11;
  void *v12;
  GKCDGameSettings *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void (**v31)(_QWORD);
  _QWORD v32[4];
  id v33;
  id v34;
  id v35;
  void (**v36)(_QWORD);
  _QWORD v37[2];
  _QWORD v38[2];

  v5 = a2;
  v31 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings _gkFetchRequest](GKCDGameSettings, "_gkFetchRequest"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "bundleID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("bundleID == %@"), v7));
  objc_msgSend(v6, "setPredicate:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v6, 0));
  if (objc_msgSend(v9, "count"))
  {
    v10 = (GKCDGameSettings *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
    if ((unint64_t)objc_msgSend(v9, "count") >= 2)
    {
      v11 = 1;
      do
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", v11));
        objc_msgSend(v5, "deleteObject:", v12);

        ++v11;
      }
      while (v11 < (unint64_t)objc_msgSend(v9, "count"));
    }
  }
  else
  {
    v13 = [GKCDGameSettings alloc];
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings entity](GKCDGameSettings, "entity"));
    v10 = -[GKCDGameSettings initWithEntity:insertIntoManagedObjectContext:](v13, "initWithEntity:insertIntoManagedObjectContext:", v14, v5);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "bundleID"));
    -[GKCDGameSettings setBundleID:](v10, "setBundleID:", v15);

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "serverAllowFriendListAccessValue"));
    -[GKCDGameSettings setAllowFriendListAccess:](v10, "setAllowFriendListAccess:", v16);

  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameSettings allowFriendListAccess](v10, "allowFriendListAccess"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "serverAllowFriendListAccessValue"));
  -[GKCDGameSettings setAllowFriendListAccess:](v10, "setAllowFriendListAccess:", v18);
  if (objc_msgSend(v18, "length"))
  {
    v38[0] = v18;
    v37[0] = CFSTR("allow-friend-list-access");
    v37[1] = CFSTR("for-bundle-id");
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "bundleID"));
    v38[1] = v19;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v38, v37, 2));

    v30 = v17;
    v21 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameSettings objectID](v10, "objectID"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v29 = v6;
    v23 = GKBagKeySetPerGameSettings;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "clientProxy"));
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1000406D0;
    v32[3] = &unk_1002BD7E8;
    v33 = a1[5];
    v34 = v21;
    v35 = v30;
    v25 = v31;
    v36 = v31;
    v26 = v21;
    v27 = v23;
    v6 = v29;
    objc_msgSend(v22, "issueRequest:bagKey:clientProxy:handler:", v20, v27, v24, v32);

    v17 = v30;
  }
  else
  {
    -[GKCDGameSettings setAllowFriendListAccess:](v10, "setAllowFriendListAccess:", v17);
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 3, 0));
    objc_msgSend(a1[5], "setError:", v28);

    v25 = v31;
    v31[2](v31);
  }

}

void sub_1000406D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v4 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100040790;
  v7[3] = &unk_1002BB8A0;
  v5 = *(void **)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v9 = v4;
  v10 = *(id *)(a1 + 48);
  v6 = v4;
  objc_msgSend(v5, "performOnManagedObjectContext:", v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100040790(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void (**v16)(_QWORD);
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  id v36;
  id v37;
  uint8_t buf[4];
  uint64_t v39;
  _BYTE v40[128];

  v5 = a2;
  v6 = a3;
  v7 = a1[4];
  v37 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "existingObjectWithID:error:", v7, &v37));
  v9 = v37;
  v10 = v9;
  if (v9)
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v9);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100052378();
  }
  if (a1[5])
    objc_msgSend(v8, "setAllowFriendListAccess:", a1[6]);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList _gkFetchRequest](GKCDGameAccessList, "_gkFetchRequest"));
  v36 = 0;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v12, &v36));
  v14 = v36;
  v15 = v14;
  if (v13 || a1[5])
  {
    v30 = v14;
    v31 = v12;
    v16 = v6;
    v17 = v10;
    v18 = v8;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v19 = v13;
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v33;
      do
      {
        v23 = 0;
        do
        {
          if (*(_QWORD *)v33 != v22)
            objc_enumerationMutation(v19);
          objc_msgSend(v5, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)v23), v30, v31, (_QWORD)v32);
          v23 = (char *)v23 + 1;
        }
        while (v21 != v23);
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
      }
      while (v21);
    }

    if (!os_log_GKGeneral)
      v25 = (id)GKOSLoggers(v24);
    v26 = os_log_GKDaemon;
    v8 = v18;
    v10 = v17;
    v6 = v16;
    v15 = v30;
    v12 = v31;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v27 = a1[5];
      *(_DWORD *)buf = 138412290;
      v39 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Could not fetch data from cache: %@", buf, 0xCu);
    }
  }
  if (objc_msgSend(v13, "count", v30, v31))
  {
    v28 = 0;
    do
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", v28));
      objc_msgSend(v5, "deleteObject:", v29);

      ++v28;
    }
    while (v28 < (unint64_t)objc_msgSend(v13, "count"));
  }
  v6[2](v6);

}

void sub_100040A70(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_100040C4C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100040D00;
  v10[3] = &unk_1002BD838;
  v6 = *(id *)(a1 + 48);
  v14 = v3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v11 = v6;
  v12 = v7;
  v13 = v8;
  v9 = v3;
  objc_msgSend(v4, "getPerGameSettingsForBundleID:handler:", v5, v10);

}

void sub_100040D00(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setError:");
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else if (objc_msgSend(a2, "allowFriendListAccess") == (id)2)
  {
    v5 = *(void **)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 48);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100040E1C;
    v8[3] = &unk_1002BD810;
    v9 = *(id *)(a1 + 32);
    v6 = *(id *)(a1 + 56);
    v10 = *(_QWORD *)(a1 + 40);
    v11 = v6;
    objc_msgSend(v5, "_getPerGameFriendsPlayerIDForBundleID:handler:", v4, v8);

  }
  else
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 102, 0));
    objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  }
}

void sub_100040E1C(id *a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;

  if (a3)
  {
    objc_msgSend(a1[4], "setError:");
    (*((void (**)(void))a1[6] + 2))();
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "_gkValuesForKeyPath:", CFSTR("playerID")));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "transport"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "localPlayer"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileService, "serviceWithTransport:forClient:localPlayer:", v5, v6, v7));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100040F60;
    v9[3] = &unk_1002BCA30;
    v10 = a1[4];
    v11 = a1[6];
    objc_msgSend(v8, "getProfilesForPlayerIDs:handler:", v4, v9);

  }
}

void sub_100040F60(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (!a3)
    objc_msgSend(*(id *)(a1 + 32), "setResult:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100040FBC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100041180(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  void *v7;
  NSNumber *v8;
  void *v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  _QWORD v14[2];

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "connection"));

  v11 = 0u;
  v12 = 0u;
  if (v6)
    objc_msgSend(v6, "auditToken");
  v13[0] = kTCCAccessCheckOptionPurposeRequired;
  v13[1] = kTCCAccessCheckOptionPrompt;
  v14[0] = &__kCFBooleanTrue;
  v14[1] = &__kCFBooleanTrue;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 2));
  v10[0] = v11;
  v10[1] = v12;
  v8 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", TCCAccessCheckAuditToken(kTCCServiceGameCenterFriends, v10, v7) != 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v9);

  v4[2](v4);
}

void sub_1000412D0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, objc_msgSend(v2, "BOOLValue"));

  }
}

void sub_1000414A8(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  uint64_t v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "connection"));

  v9 = 0u;
  v10 = 0u;
  if (v6)
    objc_msgSend(v6, "auditToken");
  v7 = *(_QWORD *)(a1 + 40);
  v8[0] = v9;
  v8[1] = v10;
  TCCAccessResetForBundleIdWithAuditToken(kTCCServiceGameCenterFriends, v7, v8);
  v4[2](v4);

}

uint64_t sub_10004154C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

NSArray *__cdecl sub_1000416E8(id a1, NSOrderedSet *a2)
{
  NSOrderedSet *v2;
  dispatch_queue_t current_queue;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  NSOrderedSet *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  GKPlayerInternal *v17;
  void *v18;
  id v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v2 = a2;
  current_queue = dispatch_get_current_queue();
  v4 = objc_claimAutoreleasedReturnValue(current_queue);
  if (dispatch_queue_get_specific(v4, CFSTR("com.apple.gamed.cachequeue")) != CFSTR("com.apple.gamed.cachequeue"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s not invoked on managed object context queue at %@"), "-[GKGameService _getPerGameFriendsPlayerIDForBundleID:handler:]_block_invoke", v5));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m"));
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "lastPathComponent")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (_queueContext == (__bridge const void * _Nonnull)GKCacheQueueID)\n[%s (%s:%d)]"), v6, "-[GKGameService _getPerGameFriendsPlayerIDForBundleID:handler:]_block_invoke", objc_msgSend(v8, "UTF8String"), 422));

    +[NSException raise:format:](NSException, "raise:format:", CFSTR("GameKit Exception"), CFSTR("%@"), v9);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", -[NSOrderedSet count](v2, "count")));
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v11 = v2;
  v12 = -[NSOrderedSet countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v22;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v22 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v15);
        v17 = objc_opt_new(GKPlayerInternal);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "playerID"));
        -[GKPlayerInternal setPlayerID:](v17, "setPlayerID:", v18);

        objc_msgSend(v10, "addObject:", v17);
        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = -[NSOrderedSet countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v13);
  }

  v19 = objc_msgSend(v10, "copy");
  return (NSArray *)v19;
}

void sub_100041948(id *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void (**v11)(_QWORD);
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  uint64_t v17;
  id v18;
  NSObject *v19;
  GKCDGameFriendList *v20;
  GKCDGameFriendList *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t (**v30)(id, void *);
  void *v31;
  uint64_t v32;
  void *v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  id v38;
  void (**v39)(_QWORD);
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  id v44;
  uint8_t buf[4];
  id v46;
  _BYTE v47[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameFriendList _gkFetchRequest](GKCDGameFriendList, "_gkFetchRequest"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("bundleID == %@"), a1[4]));
  objc_msgSend(v7, "setPredicate:", v8);

  v44 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v7, &v44));
  v10 = v44;
  if (v10)
  {
    v11 = v6;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v12 = v9;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v40, v47, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v41 != v15)
            objc_enumerationMutation(v12);
          objc_msgSend(v5, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i));
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v40, v47, 16);
      }
      while (v14);
    }

    if (!os_log_GKGeneral)
      v18 = (id)GKOSLoggers(v17);
    v19 = os_log_GKDaemon;
    v6 = v11;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v46 = v10;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Could not fetch data from cache: %@", buf, 0xCu);
    }
  }
  else if (objc_msgSend(v9, "count"))
  {
    v20 = (GKCDGameFriendList *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));
    goto LABEL_16;
  }
  v21 = [GKCDGameFriendList alloc];
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameFriendList entity](GKCDGameFriendList, "entity"));
  v20 = -[GKCDGameFriendList initWithEntity:insertIntoManagedObjectContext:](v21, "initWithEntity:insertIntoManagedObjectContext:", v22, v5);

  -[GKCDGameFriendList setBundleID:](v20, "setBundleID:", a1[4]);
LABEL_16:
  v23 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameFriendList expirationDate](v20, "expirationDate"));
  v24 = -[GKCDGameFriendList _gkIsExpired:](v20, "_gkIsExpired:", v23);

  if (v24)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v26 = GKBagKeyGetPerGameFriendPlayerIDs;
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_100041D34;
    v34[3] = &unk_1002BD8C8;
    v35 = a1[6];
    v36 = a1[4];
    v37 = v5;
    v38 = a1[7];
    v39 = v6;
    objc_msgSend(v25, "issueRequest:bagKey:clientProxy:handler:", &__NSDictionary0__struct, v26, v27, v34);

  }
  else
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameFriendList entries](v20, "entries"));
    v29 = objc_msgSend(v28, "count");

    if (v29)
    {
      v30 = (uint64_t (**)(id, void *))a1[7];
      v31 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameFriendList entries](v20, "entries"));
      v32 = v30[2](v30, v31);
      v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      objc_msgSend(a1[6], "setResult:", v33);

    }
    v6[2](v6);
  }

}

void sub_100041D34(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  double v20;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v7 && !a3)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("results")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableOrderedSet orderedSetWithCapacity:](NSMutableOrderedSet, "orderedSetWithCapacity:", objc_msgSend(v8, "count")));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100041E94;
    v13[3] = &unk_1002BD8A0;
    v10 = *(void **)(a1 + 32);
    v14 = *(id *)(a1 + 40);
    v15 = *(id *)(a1 + 48);
    v16 = v8;
    v17 = v9;
    v20 = a4;
    v18 = *(id *)(a1 + 32);
    v19 = *(id *)(a1 + 56);
    v11 = v9;
    v12 = v8;
    objc_msgSend(v10, "performOnManagedObjectContext:", v13);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_100041E94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  GKCDGameFriend *v21;
  void *v22;
  GKCDGameFriend *v23;
  void *v24;
  void *v25;
  GKCDGameFriendList *v26;
  void *v27;
  GKCDGameFriendList *v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void (**v37)(_QWORD);
  id obj;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  id v47;
  _BYTE v48[128];
  _BYTE v49[128];

  v5 = a2;
  v37 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameFriendList _gkFetchRequest](GKCDGameFriendList, "_gkFetchRequest"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("bundleID == %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v6, "setPredicate:", v7);

  v8 = *(void **)(a1 + 40);
  v47 = 0;
  v36 = v6;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "executeFetchRequest:error:", v6, &v47));
  v35 = v47;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v10 = v9;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v44;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v44 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(v5, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v14));
        v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
    }
    while (v12);
  }
  v34 = v10;

  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  obj = *(id *)(a1 + 48);
  v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v40;
    do
    {
      v18 = 0;
      do
      {
        v19 = a1;
        if (*(_QWORD *)v40 != v17)
          objc_enumerationMutation(obj);
        v20 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)v18);
        v21 = [GKCDGameFriend alloc];
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameFriend entity](GKCDGameFriend, "entity"));
        v23 = -[GKCDGameFriend initWithEntity:insertIntoManagedObjectContext:](v21, "initWithEntity:insertIntoManagedObjectContext:", v22, v5);

        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("player-id")));
        -[GKCDGameFriend setPlayerID:](v23, "setPlayerID:", v24);

        a1 = v19;
        objc_msgSend(*(id *)(v19 + 56), "addObject:", v23);

        v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
    }
    while (v16);
  }

  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 80)));
  v26 = [GKCDGameFriendList alloc];
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameFriendList entity](GKCDGameFriendList, "entity"));
  v28 = -[GKCDGameFriendList initWithEntity:insertIntoManagedObjectContext:](v26, "initWithEntity:insertIntoManagedObjectContext:", v27, *(_QWORD *)(a1 + 40));

  -[GKCDGameFriendList setExpirationDate:](v28, "setExpirationDate:", v25);
  -[GKCDGameFriendList setBundleID:](v28, "setBundleID:", *(_QWORD *)(a1 + 32));
  if (objc_msgSend(*(id *)(a1 + 56), "count"))
  {
    v29 = objc_msgSend(*(id *)(a1 + 56), "copy");
    -[GKCDGameFriendList setEntries:](v28, "setEntries:", v29);

    v30 = *(_QWORD *)(a1 + 72);
    v31 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameFriendList entries](v28, "entries"));
    v32 = (*(uint64_t (**)(uint64_t, void *))(v30 + 16))(v30, v31);
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    objc_msgSend(*(id *)(a1 + 64), "setResult:", v33);

  }
  v37[2](v37);

}

void sub_10004222C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100042558(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  GKCDLoadedGame *v20;
  void *v21;
  GKCDLoadedGame *v22;
  void *v23;
  void *v24;
  void *v25;
  void (**v26)(_QWORD);
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];

  v5 = a2;
  v26 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDLoadedGame _gkFetchRequest](GKCDLoadedGame, "_gkFetchRequest"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("bundleId IN %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v6, "setPredicate:");
  v25 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSManagedObject _gkObjectsFromFetchRequest:withContext:](NSManagedObject, "_gkObjectsFromFetchRequest:withContext:", v6, v5));
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v32;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v32 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(a1 + 40);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v11), "bundleId"));
        objc_msgSend(v12, "removeObject:", v13);

        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
    }
    while (v9);
  }
  v23 = v7;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v14 = *(id *)(a1 + 40);
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v28;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v28 != v17)
          objc_enumerationMutation(v14);
        v19 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v18);
        v20 = [GKCDLoadedGame alloc];
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDLoadedGame entity](GKCDLoadedGame, "entity"));
        v22 = -[GKCDLoadedGame initWithEntity:insertIntoManagedObjectContext:](v20, "initWithEntity:insertIntoManagedObjectContext:", v21, v5);

        -[GKCDLoadedGame setBundleId:](v22, "setBundleId:", v19);
        v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v16);
  }

  objc_msgSend(*(id *)(a1 + 48), "setResult:", *(_QWORD *)(a1 + 40));
  v26[2](v26);

}

void sub_1000427E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  uint64_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  if (objc_msgSend(v2, "count") && *(_QWORD *)(a1 + 40))
  {
    v3 = *(void **)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 40);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10004290C;
    v7[3] = &unk_1002BCA30;
    v6 = *(void **)(a1 + 64);
    v7[4] = *(_QWORD *)(a1 + 56);
    v8 = v6;
    objc_msgSend(v3, "loadScopedPlayerIDs:gameBundleIDs:handler:", v4, v5, v7);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }

}

void sub_10004290C(uint64_t a1, void *a2, void *a3)
{
  void *v3;
  void *v4;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  v8 = v7;
  if (!v7)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playerInternal"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "scopedIDs"));
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "playerInternal"));
  objc_msgSend(v10, "setScopedIDs:", v8);

  if (!v7)
  {

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t sub_100042A98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100042CD0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  if (a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionGroupBypassingMultiUser"));
    objc_msgSend(v3, "performOnManagedObjectContext:", &stru_1002BD960);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "replyQueue"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100042F18;
    v6[3] = &unk_1002BB540;
    v7 = *(id *)(a1 + 40);
    objc_msgSend(v3, "notifyOnQueue:block:", v5, v6);

  }
}

void sub_100042DB0(id a1, NSManagedObjectContext *a2, id a3)
{
  NSManagedObjectContext *v4;
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  _BYTE v19[128];

  v4 = a2;
  v5 = (void (**)(_QWORD))a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList _gkFetchRequest](GKCDGameAccessList, "_gkFetchRequest"));
  v18 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSManagedObjectContext executeFetchRequest:error:](v4, "executeFetchRequest:error:", v6, &v18));
  v8 = v18;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v15;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v15 != v12)
          objc_enumerationMutation(v9);
        -[NSManagedObjectContext deleteObject:](v4, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v13), (_QWORD)v14);
        v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
    }
    while (v11);
  }

  v5[2](v5);
}

uint64_t sub_100042F18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000430BC(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void (**v18)(void);
  id v19;
  id v20;
  NSObject *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id *v31;
  void *v32;
  void (**v33)(void);
  id v34;
  id obj;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[4];
  id v42;
  id v43;
  id v44;
  void (**v45)(void);
  uint8_t *v46;
  uint8_t buf[8];
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[128];
  const __CFString *v52;
  id v53;

  v34 = a2;
  v33 = a3;
  if (*(_QWORD *)(a1 + 32) && *(_QWORD *)(a1 + 56))
  {
    v31 = (id *)a1;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cachedGamesPlayed:context:"));
    v32 = v5;
    if (v5
      && (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "expirationDate")),
          v7 = v32,
          v8 = objc_msgSend(v32, "_gkIsExpired:", v6),
          v6,
          !v8))
    {
      v19 = objc_alloc_init((Class)NSMutableArray);
      v36 = v19;
      if (!os_log_GKGeneral)
      {
        v20 = (id)GKOSLoggers(v19);
        v7 = v32;
      }
      v21 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "getGamesPlayedMetaData using cache", buf, 2u);
      }
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "entries"));
      v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v51, 16);
      if (v22)
      {
        v23 = 0;
        v24 = 0;
        v25 = *(_QWORD *)v38;
        do
        {
          v26 = 0;
          v27 = v23;
          v28 = v24;
          do
          {
            if (*(_QWORD *)v38 != v25)
              objc_enumerationMutation(obj);
            v29 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)v26);
            v24 = objc_msgSend(objc_alloc((Class)GKGameInternal), "initWithCacheObject:", v29);

            v23 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameRecordInternal gameRecordForGame:](GKGameRecordInternal, "gameRecordForGame:", v24));
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "timeStamp"));
            objc_msgSend(v23, "setLastPlayedDate:", v30);

            objc_msgSend(v36, "addObject:", v23);
            v26 = (char *)v26 + 1;
            v27 = v23;
            v28 = v24;
          }
          while (v22 != v26);
          v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v51, 16);
        }
        while (v22);

      }
      objc_msgSend(v31[5], "setResult:", v36);
      v33[2]();
    }
    else
    {
      v9 = v31[4];
      v52 = CFSTR("requested-player-id");
      v53 = v9;
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1));
      *(_QWORD *)buf = 0;
      v48 = buf;
      v49 = 0x2020000000;
      v50 = 0;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v10, "timeIntervalSince1970");
      v12 = v11;

      v50 = v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31[6], "clientProxy"));
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472;
      v41[2] = sub_10004350C;
      v41[3] = &unk_1002BD9D8;
      v46 = buf;
      v15 = v31[5];
      v16 = v31[6];
      v42 = v15;
      v43 = v16;
      v44 = v31[4];
      v45 = v33;
      objc_msgSend(v13, "issueRequest:bagKey:clientProxy:handler:", v36, CFSTR("gk-get-games-played-metadata"), v14, v41);

      _Block_object_dispose(buf, 8);
    }

    v18 = v33;
  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 8, 0));
    objc_msgSend(*(id *)(a1 + 40), "setError:", v17);

    v18 = v33;
    ((void (*)(void (**)(void)))v33[2])(v33);
  }

}

void sub_1000434EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_10004350C(_QWORD *a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t *v31;
  double v32;
  uint64_t v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t buf[4];
  void *v38;

  v7 = a2;
  v8 = a3;
  v33 = 0;
  v34 = (double *)&v33;
  v35 = 0x2020000000;
  v36 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v9, "timeIntervalSince1970");
  v11 = v10;

  v36 = v11;
  v12 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", a4));
  v13 = (void *)v12;
  if (!os_log_GKGeneral)
    v14 = (id)GKOSLoggers(v12);
  v15 = os_log_GKDaemon;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v34[3] - *(double *)(*(_QWORD *)(a1[8] + 8) + 24)));
    *(_DWORD *)buf = 138412290;
    v38 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "getGamesPlayedMetaData perf server:%@", buf, 0xCu);

  }
  v17 = (void *)a1[4];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100043788;
  v23[3] = &unk_1002BD9B0;
  v24 = v17;
  v18 = v8;
  v25 = v18;
  v19 = v7;
  v30 = a1[8];
  v20 = a1[5];
  v21 = (void *)a1[6];
  v26 = v19;
  v27 = v20;
  v28 = v21;
  v22 = v13;
  v32 = a4;
  v29 = v22;
  v31 = &v33;
  objc_msgSend(v24, "performOnManagedObjectContext:", v23);
  (*(void (**)(void))(a1[7] + 16))();

  _Block_object_dispose(&v33, 8);
}

void sub_100043764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100043788(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  GamesPlayed *v13;
  GamesPlayed *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *j;
  void *v29;
  void *v30;
  GKGameCacheObject *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  double v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  void (**v57)(_QWORD);
  void *v58;
  GamesPlayed *v59;
  id v60;
  id obj;
  id v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint8_t buf[4];
  void *v84;
  __int16 v85;
  void *v86;
  _BYTE v87[128];
  _BYTE v88[128];
  _BYTE v89[128];

  v60 = a2;
  v5 = a3;
  v6 = objc_msgSend(*(id *)(a1 + 32), "setError:", *(_QWORD *)(a1 + 40));
  if (*(_QWORD *)(a1 + 48) && !*(_QWORD *)(a1 + 40))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v10, "timeIntervalSince1970");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v11;

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("results")));
    v66 = objc_alloc_init((Class)NSMutableArray);
    v13 = (GamesPlayed *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "cachedGamesPlayed:context:", *(_QWORD *)(a1 + 64), v60));
    if (!v13)
    {
      v14 = [GamesPlayed alloc];
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[GamesPlayed entity](GamesPlayed, "entity"));
      v13 = -[GamesPlayed initWithEntity:insertIntoManagedObjectContext:](v14, "initWithEntity:insertIntoManagedObjectContext:", v15, v60);

      -[GamesPlayed setPlayerID:](v13, "setPlayerID:", *(_QWORD *)(a1 + 64));
    }
    v59 = v13;
    -[GamesPlayed setExpirationDate:](v13, "setExpirationDate:", *(_QWORD *)(a1 + 72));
    v68 = objc_alloc_init((Class)NSMutableSet);
    v65 = objc_alloc_init((Class)NSMutableDictionary);
    v67 = objc_alloc_init((Class)NSMutableSet);
    v70 = objc_alloc_init((Class)NSMutableDictionary);
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v16 = v12;
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v79, v89, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v80;
      do
      {
        for (i = 0; i != v18; i = (char *)i + 1)
        {
          if (*(_QWORD *)v80 != v19)
            objc_enumerationMutation(v16);
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)i), "objectForKeyedSubscript:", CFSTR("game-metadata")));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("bundle-id")));
          objc_msgSend(v67, "addObject:", v22);

        }
        v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v79, v89, 16);
      }
      while (v18);
    }

    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("bundleID IN %@"), v67));
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject fetchRequestForContext:](GKGameCacheObject, "fetchRequestForContext:", v60));
    objc_msgSend(v24, "setPredicate:", v23);
    v58 = v24;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "executeFetchRequest:error:", v24, 0));
    v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v76;
      do
      {
        for (j = 0; j != v26; j = (char *)j + 1)
        {
          if (*(_QWORD *)v76 != v27)
            objc_enumerationMutation(obj);
          v29 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)j);
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "bundleID"));
          objc_msgSend(v70, "setObject:forKeyedSubscript:", v29, v30);

        }
        v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
      }
      while (v26);
    }
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v62 = v16;
    v69 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v71, v87, 16);
    if (v69)
    {
      v56 = v23;
      v57 = v5;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v63 = *(_QWORD *)v72;
      v64 = a1;
      do
      {
        v34 = 0;
        v35 = v32;
        v36 = v33;
        do
        {
          if (*(_QWORD *)v72 != v63)
            objc_enumerationMutation(v62);
          v37 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * (_QWORD)v34);
          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("game-metadata")));
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("bundle-id")));

          v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "objectForKeyedSubscript:", v39));
          v31 = (GKGameCacheObject *)v40;
          if (!v40)
            v31 = -[GKGameCacheObject initWithContext:]([GKGameCacheObject alloc], "initWithContext:", v60);
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("game-metadata")));
          v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(v64 + 96)));
          -[GKGameCacheObject updateWithServerRepresentation:expirationDate:](v31, "updateWithServerRepresentation:expirationDate:", v41, v42);

          -[GKGameCacheObject setBundleID:](v31, "setBundleID:", v39);
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("timestamp")));
          v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate _gkDateFromServerTimestamp:](NSDate, "_gkDateFromServerTimestamp:", v43));
          -[GKGameCacheObject setTimeStamp:](v31, "setTimeStamp:", v44);

          objc_msgSend(v68, "addObject:", v31);
          v45 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameCacheObject adamID](v31, "adamID"));
          objc_msgSend(v65, "setObject:forKeyedSubscript:", v31, v45);

          v32 = objc_msgSend(objc_alloc((Class)GKGameInternal), "initWithCacheObject:", v31);
          v33 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameRecordInternal gameRecordForGame:](GKGameRecordInternal, "gameRecordForGame:", v32));

          v46 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameCacheObject timeStamp](v31, "timeStamp"));
          objc_msgSend(v33, "setLastPlayedDate:", v46);

          objc_msgSend(v66, "addObject:", v33);
          v34 = (char *)v34 + 1;
          v35 = v32;
          v36 = v33;
        }
        while (v69 != v34);
        v69 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v71, v87, 16);
      }
      while (v69);

      v23 = v56;
      v5 = v57;
      a1 = v64;
    }

    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v47, "timeIntervalSince1970");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = v48;

    v49 = -[GamesPlayed setEntries:](v59, "setEntries:", v68);
    if (!os_log_GKGeneral)
      v50 = (id)GKOSLoggers(v49);
    v51 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v52 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24)
          - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
      v53 = v51;
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v52));
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v62, "count")));
      *(_DWORD *)buf = 138412546;
      v84 = v54;
      v85 = 2112;
      v86 = v55;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "getGamesPlayedMetaData perf cache time:%@ results %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 32), "setResult:", v66);
    v5[2](v5);

  }
  else
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v6);
    v8 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v9 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v84 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Error: %@", buf, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 32), "setError:", *(_QWORD *)(a1 + 40));
    v5[2](v5);
  }

}

void sub_100043F60(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100044160(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  void (**v44)(_QWORD);
  uint8_t buf[4];
  uint64_t v46;

  v5 = a3;
  if (*(_QWORD *)(a1 + 32))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCachingUtils ensureGamesPlayedList:playerID:](GKCachingUtils, "ensureGamesPlayedList:playerID:", a2));
    v7 = objc_msgSend(*(id *)(a1 + 48), "longValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "expirationDate"));
    if ((objc_msgSend(v6, "_gkIsExpired:", v8) & 1) == 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "withinSecs"));
      if (objc_msgSend(v9, "longValue"))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "withinSecs"));
        if ((uint64_t)v7 > (uint64_t)objc_msgSend(v10, "longValue"))
        {

          goto LABEL_6;
        }
        v27 = *(_QWORD *)(a1 + 48);

        if (!v27 || !v7)
          goto LABEL_7;
      }
      else
      {

      }
      if (!os_log_GKGeneral)
        v28 = (id)GKOSLoggers(v11);
      v29 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v30 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v46 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Using cached games played descriptors for : %@", buf, 0xCu);
      }
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entries"));
      v32 = objc_msgSend(v31, "count");

      if (v32)
      {
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entries"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithOrderedSet:](NSOrderedSet, "orderedSetWithOrderedSet:", v33));

        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "internalGameSummariesFromResults:limit:", v34, *(_QWORD *)(a1 + 64)));
        objc_msgSend(*(id *)(a1 + 40), "setResult:", v35);

      }
      v5[2](v5);
      goto LABEL_28;
    }
LABEL_6:

LABEL_7:
    if (!os_log_GKGeneral)
      v12 = (id)GKOSLoggers(v11);
    v13 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v14 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v46 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Going to server for games played descriptors for : %@", buf, 0xCu);
    }
    v15 = objc_alloc_init((Class)NSMutableDictionary);
    v16 = *(void **)(a1 + 32);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "localPlayer"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "playerID"));
    LOBYTE(v16) = objc_msgSend(v16, "isEqualToString:", v18);

    if ((v16 & 1) == 0)
      objc_msgSend(v15, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), CFSTR("requested-player-id"));
    if (*(_QWORD *)(a1 + 48) && v7)
      objc_msgSend(v15, "setObject:forKeyedSubscript:");
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectID"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_1000445B4;
    v36[3] = &unk_1002BD360;
    v37 = *(id *)(a1 + 40);
    v38 = v19;
    v39 = *(id *)(a1 + 32);
    v40 = *(id *)(a1 + 48);
    v22 = v6;
    v23 = *(_QWORD *)(a1 + 56);
    v24 = *(void **)(a1 + 64);
    v41 = v22;
    v42 = v23;
    v43 = v24;
    v44 = v5;
    v25 = v19;
    objc_msgSend(v20, "issueRequest:bagKey:clientProxy:handler:", v15, CFSTR("gk-get-games-played-summaries"), v21, v36);

LABEL_28:
    goto LABEL_29;
  }
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 8));
  objc_msgSend(*(id *)(a1 + 40), "setError:", v26);

  v5[2](v5);
LABEL_29:

}

void sub_1000445B4(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  double v28;

  v7 = a2;
  v8 = a3;
  v9 = objc_alloc_init((Class)NSMutableArray);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v8);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100044724;
  v17[3] = &unk_1002BDA28;
  v10 = *(void **)(a1 + 32);
  v18 = *(id *)(a1 + 40);
  v19 = *(id *)(a1 + 48);
  v20 = v7;
  v28 = a4;
  v21 = v8;
  v22 = v9;
  v23 = *(id *)(a1 + 56);
  v24 = *(id *)(a1 + 64);
  v11 = *(id *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(void **)(a1 + 80);
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v14 = v9;
  v15 = v8;
  v16 = v7;
  objc_msgSend(v10, "performOnManagedObjectContext:", v17);
  (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();

}

void sub_100044724(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  BOOL v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  GameSummary *v22;
  uint64_t v23;
  void *i;
  GameSummary *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  GameSummary *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _UNKNOWN **v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void (**v45)(_QWORD);
  void *v46;
  id obj;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  id v52;
  _BYTE v53[128];

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  v52 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "existingObjectWithID:error:", v7, &v52));
  v9 = v52;
  v10 = v9;
  if (v9)
    v11 = 1;
  else
    v11 = v8 == 0;
  if (v11)
  {
    if (!os_log_GKGeneral)
      v12 = (id)GKOSLoggers(v9);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000523DC();
    v13 = objc_claimAutoreleasedReturnValue(+[GKCachingUtils ensureGamesPlayedList:playerID:](GKCachingUtils, "ensureGamesPlayedList:playerID:", v5, *(_QWORD *)(a1 + 40)));

    v8 = (void *)v13;
  }
  if (*(_QWORD *)(a1 + 48) && !*(_QWORD *)(a1 + 56))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[GKCachingUtils existingGamePlatforms:](GKCachingUtils, "existingGamePlatforms:", v5));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 112)));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("results")));
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    obj = v19;
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
    if (v20)
    {
      v21 = v20;
      v42 = v18;
      v43 = v10;
      v46 = v16;
      v44 = v8;
      v45 = v6;
      v22 = 0;
      v23 = *(_QWORD *)v49;
      do
      {
        for (i = 0; i != v21; i = (char *)i + 1)
        {
          v25 = v22;
          if (*(_QWORD *)v49 != v23)
            objc_enumerationMutation(obj);
          v26 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)i);
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("game")));
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("timestamp")));
          v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate _gkDateFromServerTimestamp:](NSDate, "_gkDateFromServerTimestamp:", v28));

          v30 = [GameSummary alloc];
          v31 = (void *)objc_claimAutoreleasedReturnValue(+[GameSummary entity](GameSummary, "entity"));
          v22 = -[GameSummary initWithEntity:insertIntoManagedObjectContext:](v30, "initWithEntity:insertIntoManagedObjectContext:", v31, v5);

          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("adam-id")));
          -[GameSummary setAdamID:](v22, "setAdamID:", v32);

          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("bundle-id")));
          -[GameSummary setBundleID:](v22, "setBundleID:", v33);

          v34 = objc_claimAutoreleasedReturnValue(-[GameSummary bundleID](v22, "bundleID"));
          if (v34)
          {
            v35 = (void *)v34;
            v36 = (void *)objc_claimAutoreleasedReturnValue(-[GameSummary adamID](v22, "adamID"));

            if (v36)
            {
              -[GameSummary setPlayedAt:](v22, "setPlayedAt:", v29);
              v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("is-arcade-game")));
              -[GameSummary setIsArcade:](v22, "setIsArcade:", v37);

              v38 = (void *)objc_claimAutoreleasedReturnValue(+[GKCachingUtils compatiblePlatforms:platformLookup:moc:](GKCachingUtils, "compatiblePlatforms:platformLookup:moc:", v27, v46, v5));
              -[GameSummary setCompatiblePlatforms:](v22, "setCompatiblePlatforms:", v38);

              objc_msgSend(*(id *)(a1 + 64), "addObject:", v22);
            }
          }

        }
        v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
      }
      while (v21);

      v8 = v44;
      v6 = v45;
      v16 = v46;
      v18 = v42;
      v10 = v43;
    }
    objc_msgSend(v8, "setExpirationDate:", v18);
    if (*(_QWORD *)(a1 + 72))
      v39 = *(_UNKNOWN ***)(a1 + 72);
    else
      v39 = &off_1002DB568;
    objc_msgSend(v8, "setWithinSecs:", v39);
    if (objc_msgSend(*(id *)(a1 + 64), "count"))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithArray:](NSOrderedSet, "orderedSetWithArray:", *(_QWORD *)(a1 + 64)));
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "entries"));
      objc_msgSend(v8, "removeEntries:", v40);

      objc_msgSend(v8, "addEntries:", v17);
      objc_msgSend(*(id *)(a1 + 88), "setObject:forKeyedSubscript:", v17, CFSTR("response"));
    }
    else
    {
      v17 = 0;
    }

    goto LABEL_34;
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "entries"));
  v15 = objc_msgSend(v14, "count");

  if (v15)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "entries"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithOrderedSet:](NSOrderedSet, "orderedSetWithOrderedSet:", v16));
LABEL_34:

    goto LABEL_35;
  }
  v17 = 0;
LABEL_35:
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 96), "internalGameSummariesFromResults:limit:", v17, *(_QWORD *)(a1 + 104)));
  objc_msgSend(*(id *)(a1 + 88), "setResult:", v41);
  v6[2](v6);

}

void sub_100044C04(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

uint64_t sub_100044DB4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_100044DC8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "replyQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100044EAC;
  block[3] = &unk_1002BC3D0;
  v9 = *(id *)(a1 + 40);
  v14 = v6;
  v15 = v9;
  v13 = v5;
  v10 = v6;
  v11 = v5;
  dispatch_async(v8, block);

}

uint64_t sub_100044EAC(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100045080(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ampController"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100045158;
  v7[3] = &unk_1002BDAB8;
  v5 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v5;
  v11 = v3;
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  v6 = v3;
  objc_msgSend(v4, "getBagWithCompletion:", v7);

}

void sub_100045158(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localPlayer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "language"));
  v16 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKAppMetadataFetcher createFor:language:bag:error:](GKAppMetadataFetcher, "createFor:language:bag:error:", v6, v8, v4, &v16));

  v10 = v16;
  if (v10)
  {
    objc_msgSend(*(id *)(a1 + 40), "setError:", v10);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10004533C;
    v13[3] = &unk_1002BB478;
    v14 = *(id *)(a1 + 40);
    v15 = *(id *)(a1 + 64);
    objc_msgSend(v9, "fetchWithBundleIDs:adamIDs:batchSize:ttl:refreshExpiredCompletion:completionHandler:", v12, v11, 100, &stru_1002BDA90, v13, 900.0);

  }
}

void sub_1000452D0(id a1, NSDictionary *a2)
{
  NSDictionary *v2;
  NSDictionary *v3;
  id v4;
  void *v5;

  v2 = a2;
  v3 = v2;
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v2);
  v5 = (void *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
    sub_10005243C(v5, v3);

}

uint64_t sub_10004533C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100045394(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100045558(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  GKAppMetadataCache *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  GKAppMetadataCache *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  void (**v13)(_QWORD);
  id v14;

  v3 = a2;
  v4 = [GKAppMetadataCache alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localPlayer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "language"));
  v14 = 0;
  v9 = -[GKAppMetadataCache initWithPlayerID:language:error:](v4, "initWithPlayerID:language:error:", v6, v8, &v14);
  v10 = v14;

  if (v10)
  {
    objc_msgSend(*(id *)(a1 + 40), "setError:", v10);
    v3[2](v3);
  }
  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000456A8;
    v11[3] = &unk_1002BB6E8;
    v12 = *(id *)(a1 + 40);
    v13 = v3;
    -[GKAppMetadataCache deleteAllWithCompletionHandler:](v9, "deleteAllWithCompletionHandler:", v11);

  }
}

uint64_t sub_1000456A8(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000456D8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_100045C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100045C6C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;
  void (**v8)(void);

  v8 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKTopGamesListCacheObject, "firstObjectMatchingPredicate:context:", 0, a2));
  if (objc_msgSend(v5, "isValid"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "internalRepresentation"));
    objc_msgSend(*(id *)(a1 + 32), "setResult:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "seed"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("seed"));

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v5, "expired") ^ 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) &= *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                           + 24);
  }
  v8[2]();

}

void sub_100045D68(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
  (*(void (**)(uint64_t, id, void *, _QWORD, _QWORD))(v2 + 16))(v2, v4, v3, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));

}

void sub_100045FA8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10004607C;
  v7[3] = &unk_1002BCB98;
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", &off_1002DC360, CFSTR("gk-get-top-game-list"), v5, v7);

}

void sub_10004607C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  double v15;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v7)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, CFSTR("ttl"));

    v12 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100046160;
    v13[3] = &unk_1002BDB08;
    v15 = a4;
    v14 = v7;
    objc_msgSend(v12, "performOnManagedObjectContext:", v13);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v8, v9, v10);

}

void sub_100046160(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  GKTopGamesListCacheObject *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (GKTopGamesListCacheObject *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKTopGamesListCacheObject, "firstObjectMatchingPredicate:context:", 0, v8));
  if (!v6)
    v6 = -[GKCacheObject initWithManagedObjectContext:]([GKTopGamesListCacheObject alloc], "initWithManagedObjectContext:", v8);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 40)));
  -[GKTopGamesListCacheObject updateWithServerRepresentation:expirationDate:](v6, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 32), v7);
  v5[2](v5);

}

void sub_10004621C(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ttl")));
  objc_msgSend(v6, "doubleValue");
  v4 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);

}

void sub_1000463F4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000464A8;
  v9[3] = &unk_1002BDB80;
  v6 = *(id *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v7;
  v12 = v3;
  v8 = v3;
  objc_msgSend(v4, "fetchTopGamesInContext:handler:", v5, v9);

}

uint64_t sub_1000464A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  int8x16_t v15;
  _QWORD v16[4];
  id v17;
  int8x16_t v18;
  _QWORD v19[5];
  id v20;

  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  if ((a4 & 1) == 0)
  {
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m", 1071, "-[GKGameServicePrivate getTopGamesWithHandler:]_block_invoke_2"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transactionGroupWithName:", v9));

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10004660C;
    v19[3] = &unk_1002BB590;
    v19[4] = *(_QWORD *)(a1 + 40);
    v11 = v10;
    v20 = v11;
    objc_msgSend(v11, "perform:", v19);
    if ((a5 & 1) == 0)
    {
      v12 = *(void **)(a1 + 32);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1000466E8;
      v16[3] = &unk_1002BB4A0;
      v17 = v11;
      v15 = *(int8x16_t *)(a1 + 32);
      v13 = (id)v15.i64[0];
      v18 = vextq_s8(v15, v15, 8uLL);
      objc_msgSend(v12, "perform:", v16);

    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10004660C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000466B8;
  v7[3] = &unk_1002BDB30;
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "loadTopGamesWithContext:handler:", v5, v7);

}

uint64_t sub_1000466B8(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000466E8(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000467C8;
  v10[3] = &unk_1002BB518;
  v11 = a1[6];
  v7 = a1[4];
  v8 = a1[5];
  v12 = v7;
  v13 = v8;
  v14 = v3;
  v9 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v10);

}

void sub_1000467C8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000468C4;
    v6[3] = &unk_1002BDB58;
    v7 = *(id *)(a1 + 32);
    v8 = *(id *)(a1 + 56);
    objc_msgSend(v4, "fetchTopGamesInContext:handler:", v5, v6);

  }
}

uint64_t sub_1000468C4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000468F4(id *a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "result"));
  objc_msgSend(a1[4], "setResult:", 0);
  if (objc_msgSend(v2, "count"))
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100046A3C;
    v10[3] = &unk_1002BB4A0;
    v3 = a1[4];
    v10[4] = a1[5];
    v11 = v2;
    v12 = a1[4];
    objc_msgSend(v3, "perform:", v10);

  }
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100046B30;
  v7[3] = &unk_1002BB450;
  v9 = a1[6];
  v8 = a1[4];
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v7);

}

void sub_100046A3C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100046AD8;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getGameMetadataForBundleIDs:handler:", v5, v7);

}

uint64_t sub_100046AD8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100046B30(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100046DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100046DC8(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  uint64_t v14;
  id v15;
  char v16;
  id v17;
  NSObject *v18;
  unsigned int v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  uint64_t v27;
  _BYTE v28[128];

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKOnDeviceMultiplayerGameListCacheObject, "firstObjectMatchingPredicate:context:", 0, a2));
  v7 = v6;
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIDs"));
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v9 = *(id *)(a1 + 32);
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v23;
      while (2)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v23 != v12)
            objc_enumerationMutation(v9);
          v14 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
          v15 = objc_msgSend(v8, "containsObject:", v14, (_QWORD)v22);
          if ((v15 & 1) == 0)
          {
            if (!os_log_GKGeneral)
              v17 = (id)GKOSLoggers(v15);
            v18 = os_log_GKMatch;
            v16 = 1;
            if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v27 = v14;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "needForceUpdate = YES, since one/more bundleID is not existing in the cached list: %@", buf, 0xCu);
            }
            goto LABEL_15;
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
        if (v11)
          continue;
        break;
      }
    }
    v16 = 0;
LABEL_15:

    v19 = objc_msgSend(v7, "isValid");
    if ((v16 & 1) == 0 && v19)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "multiplayerGames"));
      objc_msgSend(*(id *)(a1 + 40), "setResult:", v20);

      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "seed"));
      objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v21, CFSTR("seed"));

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v7, "expired") ^ 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) &= *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                             + 24);
    }

  }
  v5[2](v5);

}

void sub_100047038(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
  (*(void (**)(uint64_t, id, void *, _QWORD, _QWORD))(v2 + 16))(v2, v4, v3, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));

}

void sub_1000472A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  const __CFString *v13;
  void *v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](GKApplicationWorkspace, "defaultWorkspace"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "gameDescriptorsWithInstalledBundleVersionsForBundleIDs:", *(_QWORD *)(a1 + 32)));

  v13 = CFSTR("games");
  v14 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100047404;
  v10[3] = &unk_1002BCB98;
  v11 = *(id *)(a1 + 48);
  v12 = v3;
  v9 = v3;
  objc_msgSend(v7, "issueRequest:bagKey:clientProxy:handler:", v6, CFSTR("gk-get-game-features"), v8, v10);

}

void sub_100047404(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  double v15;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v7)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, CFSTR("ttl"));

    v12 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000474E8;
    v13[3] = &unk_1002BDB08;
    v15 = a4;
    v14 = v7;
    objc_msgSend(v12, "performOnManagedObjectContext:", v13);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v8, v9, v10);

}

void sub_1000474E8(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  GKOnDeviceMultiplayerGameListCacheObject *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (GKOnDeviceMultiplayerGameListCacheObject *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKOnDeviceMultiplayerGameListCacheObject, "firstObjectMatchingPredicate:context:", 0, v8));
  if (!v6)
    v6 = -[GKCacheObject initWithManagedObjectContext:]([GKOnDeviceMultiplayerGameListCacheObject alloc], "initWithManagedObjectContext:", v8);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 40)));
  -[GKOnDeviceMultiplayerGameListCacheObject updateWithServerRepresentation:expirationDate:](v6, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 32), v7);
  v5[2](v5);

}

void sub_1000475A4(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ttl")));
  objc_msgSend(v6, "doubleValue");
  v4 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);

}

void sub_10004779C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004786C;
  v10[3] = &unk_1002BDBD0;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(id *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v11 = v7;
  v12 = v8;
  v13 = *(id *)(a1 + 48);
  v14 = v3;
  v9 = v3;
  objc_msgSend(v4, "fetchOnDeviceMultiplayerGamesInContext:forBundleIDs:handler:", v5, v6, v10);

}

uint64_t sub_10004786C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  int8x16_t v15;
  _QWORD v16[4];
  id v17;
  int8x16_t v18;
  id v19;
  _QWORD v20[5];
  id v21;
  id v22;

  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  if ((a4 & 1) == 0)
  {
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m", 1199, "-[GKGameServicePrivate getOnDeviceMultiplayerGamesForBundleIDs:handler:]_block_invoke_2"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transactionGroupWithName:", v9));

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000479FC;
    v20[3] = &unk_1002BB4A0;
    v20[4] = *(_QWORD *)(a1 + 40);
    v11 = v10;
    v21 = v11;
    v22 = *(id *)(a1 + 48);
    objc_msgSend(v11, "perform:", v20);
    if ((a5 & 1) == 0)
    {
      v12 = *(void **)(a1 + 32);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100047AE4;
      v16[3] = &unk_1002BC3A8;
      v17 = v11;
      v15 = *(int8x16_t *)(a1 + 32);
      v13 = (id)v15.i64[0];
      v18 = vextq_s8(v15, v15, 8uLL);
      v19 = *(id *)(a1 + 48);
      objc_msgSend(v12, "perform:", v16);

    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1000479FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100047AB4;
  v8[3] = &unk_1002BDB30;
  v6 = *(_QWORD *)(a1 + 48);
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadOnDeviceMultiplayerGamesWithContext:forBundleIDs:handler:", v5, v6, v8);

}

uint64_t sub_100047AB4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100047AE4(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v3 = a2;
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100047BD4;
  v10[3] = &unk_1002BB4C8;
  v11 = a1[6];
  v7 = a1[4];
  v8 = a1[5];
  v12 = v7;
  v13 = v8;
  v14 = a1[7];
  v15 = v3;
  v9 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v10);

}

void sub_100047BD4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v6 = *(_QWORD *)(a1 + 56);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100047CD8;
    v7[3] = &unk_1002BDB58;
    v8 = *(id *)(a1 + 32);
    v9 = *(id *)(a1 + 64);
    objc_msgSend(v4, "fetchOnDeviceMultiplayerGamesInContext:forBundleIDs:handler:", v5, v6, v7);

  }
}

uint64_t sub_100047CD8(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100047D08(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);

  }
}

void sub_100047E58(uint64_t a1, void *a2)
{
  id v3;
  dispatch_queue_global_t global_queue;
  NSObject *v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  global_queue = dispatch_get_global_queue(-32768, 0);
  v5 = objc_claimAutoreleasedReturnValue(global_queue);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100047F1C;
  v8[3] = &unk_1002BB518;
  v6 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v6;
  v10 = *(id *)(a1 + 48);
  v11 = v3;
  v7 = v3;
  dispatch_async(v5, v8);

}

void sub_100047F1C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;

  v2 = objc_autoreleasePoolPush();
  v3 = v2;
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v2);
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
    sub_1000524C0();
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](GKApplicationWorkspace, "defaultWorkspace"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "availableGameIdentifiers"));
  v7 = objc_msgSend(v6, "count");
  if (v7)
  {
    v11 = v7;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", v7));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", v11));
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100048118;
    v27[3] = &unk_1002BDBF8;
    v28 = v5;
    v14 = v12;
    v29 = v14;
    v15 = v13;
    v30 = v15;
    objc_msgSend(v6, "enumerateObjectsUsingBlock:", v27);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000481AC;
    v21[3] = &unk_1002BDA50;
    v22 = v14;
    v16 = *(void **)(a1 + 40);
    v23 = *(id *)(a1 + 48);
    v24 = v15;
    v17 = *(id *)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 32);
    v25 = v17;
    v26 = v18;
    v19 = v15;
    v20 = v14;
    objc_msgSend(v16, "performOnManagedObjectContext:", v21);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v8, v9, v10);

  objc_autoreleasePoolPop(v3);
}

void sub_100048118(id *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_autoreleasePoolPush();
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "applicationProxyForBundleID:", v6));
  objc_msgSend(a1[5], "addObject:", v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "purchaseDate"));
  if (v5)
    objc_msgSend(a1[6], "setObject:forKeyedSubscript:", v5, v6);

  objc_autoreleasePoolPop(v3);
}

void sub_1000481AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  GKGameListCacheObject *v16;
  _QWORD v17[5];
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;

  v5 = a2;
  v6 = a3;
  v7 = objc_autoreleasePoolPush();
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gamesForBundleIDs:context:](GKGameCacheObject, "gamesForBundleIDs:context:", v8, v5));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject profileForPlayer:context:](GKPlayerProfileCacheObject, "profileForPlayer:context:", *(_QWORD *)(a1 + 40), v5));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameRecordCacheObject recordsForGames:playerProfile:](GKGameRecordCacheObject, "recordsForGames:playerProfile:", v9, v10));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000483AC;
  v20[3] = &unk_1002BDC20;
  v21 = *(id *)(a1 + 48);
  v12 = v5;
  v22 = v12;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v20);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100048438;
  v17[3] = &unk_1002BB4A0;
  v13 = *(void **)(a1 + 56);
  v17[4] = *(_QWORD *)(a1 + 64);
  v18 = *(id *)(a1 + 32);
  v14 = v12;
  v19 = v14;
  objc_msgSend(v13, "perform:", v17);
  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "gameList"));
  v16 = (GKGameListCacheObject *)v15;
  if (v10 && !v15)
  {
    v16 = -[GKCacheObject initWithManagedObjectContext:]([GKGameListCacheObject alloc], "initWithManagedObjectContext:", v14);
    -[GKGameListCacheObject setPlayer:](v16, "setPlayer:", v10);
  }
  -[GKListCacheObject updateSeed](v16, "updateSeed");
  objc_msgSend(v14, "refreshObject:mergeChanges:", v16, 1);
  v6[2](v6);

  objc_autoreleasePoolPop(v7);
}

void sub_1000483AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "game"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleID"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));
  objc_msgSend(v3, "setPurchaseDate:", v5);

  objc_msgSend(*(id *)(a1 + 40), "refreshObject:mergeChanges:", v3, 1);
}

void sub_100048438(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allObjects"));
  v6 = *(_QWORD *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000484DC;
  v8[3] = &unk_1002BDC48;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadGameMetadataForBundleIDs:context:handler:", v5, v6, v8);

}

uint64_t sub_1000484DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100048720(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100048744(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  _QWORD v25[5];
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject fetchRequestForContext:](GKGameListCacheObject, "fetchRequestForContext:", v5));
  objc_msgSend(v8, "setFetchLimit:", 1);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate != nil && player.playerID = %@"), v7));
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate > %@ && player.playerID = %@"), v10, v7));

  }
  objc_msgSend(v8, "setPredicate:", v9);
  v30 = 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v8, &v30));
  v12 = v30;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v13 != 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v13 != 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) && *(_DWORD *)(a1 + 72))
  {
    v24 = v7;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "seed"));
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v14, CFSTR("seed"));

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "entries"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "_gkValuesForKeyPath:", CFSTR("bundleID")));

    if (*(_BYTE *)(a1 + 76))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v16));
      v23 = v12;
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](GKApplicationWorkspace, "defaultWorkspace"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "availableGameIdentifiers"));
      objc_msgSend(v17, "addObjectsFromArray:", v19);

      v12 = v23;
      v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "allObjects"));

      v16 = (void *)v20;
    }
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100048A3C;
    v25[3] = &unk_1002BC010;
    v21 = *(void **)(a1 + 40);
    v25[4] = *(_QWORD *)(a1 + 48);
    v26 = *(id *)(a1 + 32);
    v27 = v16;
    v28 = v5;
    v29 = *(id *)(a1 + 40);
    v22 = v16;
    objc_msgSend(v21, "perform:", v25);

    v7 = v24;
  }
  v6[2](v6);

}

void sub_100048A3C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100048AF0;
  v9[3] = &unk_1002BDB58;
  v10 = *(id *)(a1 + 64);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "fetchGameStatsForPlayer:bundleIdentifiers:responseKind:context:handler:", v5, v6, 2, v7, v9);

}

void sub_100048AF0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:comparator:](NSSortDescriptor, "sortDescriptorWithKey:ascending:comparator:", CFSTR("self"), 0, &stru_1002BDC88));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", v6));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sortedArrayUsingDescriptors:", v4));

  objc_msgSend(*(id *)(a1 + 32), "setResult:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

int64_t sub_100048BA4(id a1, id a2, id a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  int64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v4 = a2;
  v5 = a3;
  v6 = v4;
  v7 = v5;
  v8 = objc_msgSend(v6, "platform");
  if ((v8 == (id)1) == (objc_msgSend(v7, "platform") != (id)1))
  {
    if (v8 == (id)1)
      v11 = -1;
    else
      v11 = 1;
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastPlayedDate"));
    if (v9)
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastPlayedDate"));
    else
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "purchaseDate"));
    v12 = (void *)v10;

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "lastPlayedDate"));
    if (v13)
      v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "lastPlayedDate"));
    else
      v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "purchaseDate"));
    v15 = (void *)v14;

    v11 = (int64_t)objc_msgSend(v12, "compare:", v15);
  }

  return v11;
}

void sub_100048CC8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
  (*(void (**)(uint64_t, id, void *, _QWORD, _QWORD))(v2 + 16))(v2, v4, v3, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));

}

void sub_100048F2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100048F44(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void (**v7)(_QWORD);
  unsigned __int8 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  int8x16_t v20;
  _QWORD v21[4];
  id v22;
  int8x16_t v23;
  id v24;
  id v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint8_t buf[4];
  void *v29;

  v5 = a2;
  v6 = *(void **)(a1 + 32);
  v7 = a3;
  v8 = objc_msgSend(v6, "isLocalPlayer");
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerID"));
  if (v9)
  {
    v10 = *(void **)(a1 + 40);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "replyQueue"));
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10004917C;
    v21[3] = &unk_1002BDDE0;
    v27 = v8;
    v22 = v9;
    v20 = *(int8x16_t *)(a1 + 40);
    v13 = (id)v20.i64[0];
    v23 = vextq_s8(v20, v20, 8uLL);
    v26 = *(_QWORD *)(a1 + 56);
    v24 = v5;
    v25 = *(id *)(a1 + 32);
    objc_msgSend(v10, "performOnQueue:block:", v12, v21);

    v14 = v22;
  }
  else
  {
    if (!os_log_GKGeneral)
      v15 = (id)GKOSLoggers(0);
    v16 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v17 = *(void **)(a1 + 48);
      v18 = v16;
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "clientProxy"));
      *(_DWORD *)buf = 138412290;
      v29 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Cannot load games with no playerID and no localPlayer for %@", buf, 0xCu);

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 17, 0));
    objc_msgSend(*(id *)(a1 + 40), "setError:", v14);
  }

  v7[2](v7);
}

void sub_10004917C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  char v21;
  const __CFString *v22;
  uint64_t v23;

  v3 = a2;
  if (*(_BYTE *)(a1 + 80))
  {
    v4 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    v22 = CFSTR("requested-player-id");
    v23 = v5;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100049314;
  v13[3] = &unk_1002BDDB8;
  v8 = *(id *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 72);
  v14 = v8;
  v20 = v9;
  v15 = *(id *)(a1 + 56);
  v10 = *(id *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v16 = v10;
  v17 = v11;
  v21 = *(_BYTE *)(a1 + 80);
  v18 = *(id *)(a1 + 64);
  v19 = v3;
  v12 = v3;
  objc_msgSend(v6, "issueRequest:bagKey:clientProxy:handler:", v4, CFSTR("gk-get-games-played-descriptor"), v7, v13);

}

void sub_100049314(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  double v19;
  char v20;

  v11 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v11 && !a3)
  {
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = a4;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10004942C;
    v12[3] = &unk_1002BDD90;
    v19 = a4;
    v7 = *(void **)(a1 + 40);
    v13 = *(id *)(a1 + 48);
    v14 = *(id *)(a1 + 40);
    v15 = v11;
    v8 = *(id *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(void **)(a1 + 64);
    v16 = v8;
    v17 = v9;
    v20 = *(_BYTE *)(a1 + 88);
    v18 = v10;
    objc_msgSend(v7, "performBlockAndWait:", v12);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_10004942C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  GKGameListCacheObject *v5;
  BOOL v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  id v14;
  GKGameListCacheObject *v15;
  id v16;
  id v17;
  char v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 80)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "gameList"));
  v5 = (GKGameListCacheObject *)v4;
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v5 = -[GKCacheObject initWithManagedObjectContext:]([GKGameListCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
    -[GKGameListCacheObject setPlayer:](v5, "setPlayer:", v3);
  }
  -[GKGameListCacheObject updateWithServerRepresentation:expirationDate:](v5, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 48), v2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameListCacheObject seed](v5, "seed"));
  objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v7, CFSTR("seed"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameListCacheObject entries](v5, "entries"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "array"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_gkMapWithBlock:", &stru_1002BDCF0));

  if (objc_msgSend(v10, "count"))
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100049608;
    v12[3] = &unk_1002BDD68;
    v11 = *(void **)(a1 + 56);
    v12[4] = *(_QWORD *)(a1 + 64);
    v13 = v10;
    v14 = *(id *)(a1 + 40);
    v15 = v5;
    v16 = *(id *)(a1 + 56);
    v18 = *(_BYTE *)(a1 + 88);
    v17 = *(id *)(a1 + 72);
    objc_msgSend(v11, "perform:", v12);

  }
}

id sub_100049600(id a1, GKGameListEntryCacheObject *a2, unint64_t a3)
{
  return -[GKGameListEntryCacheObject bundleID](a2, "bundleID", a3);
}

void sub_100049608(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  char v16;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10004975C;
  v8[3] = &unk_1002BDD40;
  objc_copyWeak(&v15, &location);
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  v11 = *(id *)(a1 + 64);
  v16 = *(_BYTE *)(a1 + 80);
  v12 = *(id *)(a1 + 72);
  v13 = *(id *)(a1 + 40);
  v7 = v3;
  v14 = v7;
  objc_msgSend(v4, "loadGameMetadataForBundleIDs:context:handler:", v5, v6, v8);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);

}

void sub_100049740(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10004975C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;
  char v9;
  _QWORD v10[4];
  id v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004985C;
  v10[3] = &unk_1002BBBD8;
  v3 = *(void **)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  objc_msgSend(v3, "performBlockAndWait:", v10);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100049868;
  v5[3] = &unk_1002BDD18;
  v9 = *(_BYTE *)(a1 + 88);
  v5[4] = WeakRetained;
  v4 = *(void **)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  v7 = *(id *)(a1 + 64);
  v8 = *(id *)(a1 + 72);
  objc_msgSend(v4, "perform:", v5);

}

id sub_10004985C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setDetailsLoaded:", 1);
}

void sub_100049868(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)(a1 + 64))
  {
    v6 = *(void **)(a1 + 32);
    v5 = *(void **)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100049938;
    v11[3] = &unk_1002BCA30;
    v12 = v5;
    v13 = v4;
    objc_msgSend(v6, "getGameStatsForPlayer:bundleIDs:handler:", v12, v7, v11);

  }
  else
  {
    (*((void (**)(id))v3 + 2))(v3);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v8, v9, v10);

}

void sub_100049938(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  void *v15;

  v5 = a2;
  v6 = a3;
  v8 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(v6, v7);
    v10 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138412546;
      v13 = v11;
      v14 = 2112;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Error getting the stats for player:%@ error:%@", (uint8_t *)&v12, 0x16u);
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100049A38(uint64_t a1)
{
  uint64_t v2;
  double v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *, double))(v2 + 16))(v2, v5, v4, v3);

}

void sub_100049D0C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](GKPlayerProfileCacheObject, "selfPlayerID"));
  objc_msgSend(*(id *)(a1 + 32), "setPlayerID:", v2);

}

void sub_100049D54(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  char v19;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100049EC0;
  v12[3] = &unk_1002BDED0;
  objc_copyWeak(&v18, &location);
  v13 = *(id *)(a1 + 40);
  v9 = *(id *)(a1 + 48);
  v19 = *(_BYTE *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 32);
  v14 = v9;
  v15 = v10;
  v16 = *(id *)(a1 + 56);
  v11 = v3;
  v17 = v11;
  objc_msgSend(v4, "fetchGamesForPlayer:includeInstalled:responseKind:context:handler:", v5, v6 != 0, v7 != 0, v8, v12);

  objc_destroyWeak(&v18);
  objc_destroyWeak(&location);

}

void sub_100049E9C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_100049EC0(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  id v9;
  id v10;
  id WeakRetained;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id *v21;
  void *v22;
  id v23;
  int8x16_t v24;
  _QWORD v25[4];
  id v26[3];
  _QWORD v27[4];
  id v28;
  int8x16_t v29;
  void *v30;
  id v31;
  id v32;
  char v33;
  _QWORD v34[5];
  id v35;
  id v36;
  _QWORD *v37;
  _QWORD v38[3];
  char v39;

  v9 = a2;
  v10 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v12 = WeakRetained;
  if ((a4 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v13 = (id)GKOSLoggers(WeakRetained);
    v14 = (void *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
      sub_100052528(a1, v14);
    v15 = *(void **)(a1 + 40);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m", 1495, "-[GKGameServicePrivate getGamesForPlayer:includeInstalled:handler:]_block_invoke"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "transactionGroupWithName:", v16));

    v38[0] = 0;
    v38[1] = v38;
    v38[2] = 0x2020000000;
    v39 = 0;
    if (*(_BYTE *)(a1 + 80))
      objc_msgSend(v12, "scanInstalledGamesForPlayer:transaction:", *(_QWORD *)(a1 + 32), v17);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10004A1D0;
    v34[3] = &unk_1002BDE58;
    v34[4] = v12;
    v35 = *(id *)(a1 + 32);
    v18 = v17;
    v36 = v18;
    v37 = v38;
    objc_msgSend(v18, "perform:", v34);
    if ((a5 & 1) != 0)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "clientProxy"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "replyQueue"));
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_10004A5C0;
      v25[3] = &unk_1002BDEA8;
      v26[2] = v38;
      v26[0] = v18;
      v26[1] = v12;
      objc_msgSend(v26[0], "notifyOnQueue:block:", v20, v25);
      v21 = v26;

    }
    else
    {
      v22 = *(void **)(a1 + 40);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_10004A328;
      v27[3] = &unk_1002BCA08;
      v28 = v18;
      v24 = *(int8x16_t *)(a1 + 40);
      v23 = (id)v24.i64[0];
      v29 = vextq_s8(v24, v24, 8uLL);
      v30 = v12;
      v31 = *(id *)(a1 + 32);
      v33 = *(_BYTE *)(a1 + 80);
      v32 = *(id *)(a1 + 56);
      objc_msgSend(v22, "perform:", v27);
      v21 = &v28;

      v19 = (void *)v29.i64[1];
    }

    _Block_object_dispose(v38, 8);
  }
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v9, CFSTR("games"));
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v10, CFSTR("seed"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_10004A1B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10004A1D0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004A294;
  v10[3] = &unk_1002BDE30;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v12 = v3;
  v13 = v8;
  v11 = v7;
  v9 = v3;
  objc_msgSend(v4, "loadGamesForPlayer:context:handler:", v5, v6, v10);

}

void sub_10004A294(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  void *v7;
  BOOL v9;
  id v10;

  v7 = *(void **)(a1 + 32);
  v10 = a3;
  objc_msgSend(v7, "setObject:forKeyedSubscript:", a2, CFSTR("seed"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v10);
  v9 = a4 > 0.0 && v10 == 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v9;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10004A328(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  char v18;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10004A430;
  v11[3] = &unk_1002BDE80;
  v12 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(void **)(a1 + 64);
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v18 = *(_BYTE *)(a1 + 80);
  v16 = *(id *)(a1 + 72);
  v17 = v3;
  v10 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v11);

}

void sub_10004A430(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(unsigned __int8 *)(a1 + 80);
    v7 = 2 * (*(_QWORD *)(a1 + 64) != 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10004A558;
    v9[3] = &unk_1002BDB58;
    v10 = *(id *)(a1 + 32);
    v11 = *(id *)(a1 + 72);
    objc_msgSend(v4, "fetchGamesForPlayer:includeInstalled:responseKind:context:handler:", v5, v6, v7, v8, v9);

  }
}

uint64_t sub_10004A558(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("games"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("seed"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10004A5C0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
    v3 = (void *)v2;
    if (v2)
    {
      v6 = GKRefreshSeedKey;
      v7 = v2;
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
    }
    else
    {
      v4 = 0;
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 5, v4);

  }
}

void sub_10004A6A4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("games")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);

}

void sub_10004A98C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10004A9B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  BOOL v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  _QWORD v23[4];
  id v24;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject fetchRequestForContext:](GKGameRecordCacheObject, "fetchRequestForContext:", v5));
  objc_msgSend(v8, "setFetchLimit:", *(_QWORD *)(a1 + 72));
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerID"));
  v11 = (void *)v10;
  v12 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("player.playerID = %@ && game.bundleID in %@"), v10, v12));
    objc_msgSend(v8, "setPredicate:", v13);

  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate > %@ && player.playerID = %@ && game.bundleID in %@"), v7, v10, v12));
    objc_msgSend(v8, "setPredicate:", v14);

    v15 = objc_msgSend(v5, "countForFetchRequest:error:", v8, 0) == *(id *)(a1 + 72);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v15;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v15;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerID"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate != nil && player.playerID = %@ && game.bundleID in %@"), v16, *(_QWORD *)(a1 + 40)));
      objc_msgSend(v8, "setPredicate:", v17);

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v5, "countForFetchRequest:error:", v8, 0) == *(id *)(a1 + 72);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) && *(_DWORD *)(a1 + 80))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v8, 0));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "_gkMapDictionaryWithKeyPath:", CFSTR("game.bundleID")));
    v20 = *(void **)(a1 + 40);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10004AC4C;
    v23[3] = &unk_1002BDF20;
    v24 = v19;
    v21 = v19;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "_gkFilterWithBlock:", v23));
    objc_msgSend(*(id *)(a1 + 48), "setResult:", v22);

  }
  v6[2](v6);

}

id sub_10004AC4C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2));
  if (v2)
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameRecordInternal internalRepresentationForCacheObject:](GKGameRecordInternal, "internalRepresentationForCacheObject:", v2));
  else
    v3 = 0;

  return v3;
}

void sub_10004ACA4(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id, _QWORD, _QWORD, _QWORD))(v2 + 16))(v2, v3, 0, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));

}

void sub_10004AEE4(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  void *v14;
  id v15;
  int8x16_t v16;
  _QWORD v17[4];
  id v18;
  id v19;
  int8x16_t v20;
  id v21;
  unsigned int v22;
  _QWORD v23[4];
  id v24;

  v5 = a3;
  v6 = a2;
  v7 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithArray:", *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject profileForPlayer:context:](GKPlayerProfileCacheObject, "profileForPlayer:context:", *(_QWORD *)(a1 + 40), v6));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gamesForBundleIDs:context:](GKGameCacheObject, "gamesForBundleIDs:context:", *(_QWORD *)(a1 + 32), v6));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameRecordCacheObject recordsForGames:playerProfile:](GKGameRecordCacheObject, "recordsForGames:playerProfile:", v9, v8));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID"));
  v12 = +[GKPlayerProfileCacheObject familiarityForPlayerID:](GKPlayerProfileCacheObject, "familiarityForPlayerID:", v11);

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10004B0E0;
  v23[3] = &unk_1002BDF70;
  v13 = v7;
  v24 = v13;
  objc_msgSend(v10, "enumerateObjectsUsingBlock:", v23);
  if (objc_msgSend(v13, "count"))
  {
    v14 = *(void **)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10004B160;
    v17[3] = &unk_1002BE000;
    v18 = v13;
    v22 = v12;
    v19 = *(id *)(a1 + 40);
    v16 = *(int8x16_t *)(a1 + 48);
    v15 = (id)v16.i64[0];
    v20 = vextq_s8(v16, v16, 8uLL);
    v21 = v8;
    objc_msgSend(v14, "perform:", v17);

  }
  v5[2](v5);

}

void sub_10004B0E0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  if (objc_msgSend(v6, "valid") && (objc_msgSend(v6, "expired") & 1) == 0)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "game"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleID"));
    objc_msgSend(v3, "removeObject:", v5);

  }
}

void sub_10004B160(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[2];
  _QWORD v19[2];
  const __CFString *v20;
  void *v21;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_gkMapWithBlock:", &stru_1002BDFB0));
  if (*(_DWORD *)(a1 + 72) == 1
    || (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID")), v6, !v6))
  {
    v20 = CFSTR("games-played");
    v21 = v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
  }
  else
  {
    v18[0] = CFSTR("games-played");
    v18[1] = CFSTR("requested-player-id");
    v19[0] = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID"));
    v19[1] = v7;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 2));

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10004B3F4;
  v13[3] = &unk_1002BD7E8;
  v14 = *(id *)(a1 + 56);
  v15 = *(id *)(a1 + 64);
  v16 = v4;
  v17 = v3;
  v11 = v3;
  v12 = v4;
  objc_msgSend(v9, "issueRequest:bagKey:clientProxy:handler:", v8, CFSTR("gk-get-games-played"), v10, v13);

}

id sub_10004B368(id a1, NSString *a2, unint64_t a3)
{
  NSString *v3;
  void *v4;
  const __CFString *v6;
  NSString *v7;

  v6 = CFSTR("bundle-id");
  v7 = a2;
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));

  return v4;
}

void sub_10004B3F4(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  double v17;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v7 && !a3)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, CFSTR("ttl"));

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10004B500;
    v13[3] = &unk_1002BCB70;
    v12 = *(void **)(a1 + 32);
    v14 = *(id *)(a1 + 40);
    v17 = a4;
    v15 = *(id *)(a1 + 48);
    v16 = v7;
    objc_msgSend(v12, "performOnManagedObjectContext:", v13);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v8, v9, v10);

}

void sub_10004B500(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void (**v7)(_QWORD);
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = a3;
  objc_msgSend(v5, "refreshObject:mergeChanges:", v6, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 56)));
  v14 = (id)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gamesForBundleIDs:context:](GKGameCacheObject, "gamesForBundleIDs:context:", *(_QWORD *)(a1 + 40), v5));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameRecordCacheObject recordsForGames:playerProfile:](GKGameRecordCacheObject, "recordsForGames:playerProfile:", v14, *(_QWORD *)(a1 + 32)));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("results")));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10004B690;
  v15[3] = &unk_1002BDFD8;
  v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_gkMapDictionaryWithKeyPath:", CFSTR("game.bundleID")));
  v17 = v8;
  v18 = v5;
  v19 = *(id *)(a1 + 40);
  v11 = v5;
  v12 = v8;
  v13 = v16;
  objc_msgSend(v10, "enumerateObjectsUsingBlock:", v15);
  v7[2](v7);

}

void sub_10004B690(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  _DWORD v17[2];
  __int16 v18;
  void *v19;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("status")));
  v7 = objc_msgSend(v6, "integerValue");

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("game-metadata")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("bundle-id")));
  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v9));
    v11 = v10;
    if (v10)
    {
      if (v7)
      {
        if (!os_log_GKGeneral)
          v12 = (id)GKOSLoggers(v10);
        v13 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v14 = *(void **)(a1 + 56);
          v15 = v13;
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", a3));
          v17[0] = 67109378;
          v17[1] = (_DWORD)v7;
          v18 = 2112;
          v19 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Unrecognized game(%d) %@", (uint8_t *)v17, 0x12u);

        }
        objc_msgSend(v11, "setExpirationDate:", *(_QWORD *)(a1 + 40));
      }
      else
      {
        objc_msgSend(v10, "updateWithServerRepresentation:expirationDate:", v5, *(_QWORD *)(a1 + 40));
        objc_msgSend(v11, "setValid:", 1);
        objc_msgSend(*(id *)(a1 + 48), "refreshObject:mergeChanges:", v11, 1);
      }
    }

  }
}

void sub_10004B864(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ttl")));
  objc_msgSend(v6, "doubleValue");
  v4 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);

}

void sub_10004BAC8(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void (**v8)(_QWORD);
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10004BB98;
  v9[3] = &unk_1002BE0A0;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(void **)(a1 + 56);
  v10 = v5;
  v11 = v6;
  v12 = v7;
  v14 = *(id *)(a1 + 64);
  v13 = *(id *)(a1 + 32);
  v8 = a2;
  objc_msgSend(v4, "performOnManagedObjectContext:", v9);
  v8[2](v8);

}

void sub_10004BB98(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _BOOL8 v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id location;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKLocalPlayerInternal internalRepresentation](GKLocalPlayerInternal, "internalRepresentation"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](GKPlayerProfileCacheObject, "selfPlayerID"));
  objc_msgSend(v7, "setPlayerID:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "playerID"));
  v10 = v7;
  if (v9)
    v10 = a1[4];
  v11 = v10;

  objc_initWeak(&location, a1[5]);
  v12 = a1[5];
  v13 = a1[6];
  v14 = a1[8] != 0;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10004BD6C;
  v19[3] = &unk_1002BE078;
  objc_copyWeak(&v26, &location);
  v20 = a1[7];
  v15 = v11;
  v21 = v15;
  v16 = a1[6];
  v17 = a1[5];
  v22 = v16;
  v23 = v17;
  v24 = a1[8];
  v18 = v6;
  v25 = v18;
  objc_msgSend(v12, "fetchGameStatsForPlayer:bundleIdentifiers:responseKind:context:handler:", v15, v13, v14, v5, v19);

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);

}

void sub_10004BD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004BD6C(uint64_t a1, void *a2, uint64_t a3, char a4, char a5)
{
  id *v8;
  id v9;
  id WeakRetained;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  _QWORD v30[5];
  id v31;
  id v32;
  id v33;
  _QWORD v34[5];
  id v35;
  id v36;

  v8 = (id *)(a1 + 80);
  v9 = a2;
  WeakRetained = objc_loadWeakRetained(v8);
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("records"));

  if ((a4 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v12 = (id)GKOSLoggers(v11);
    v13 = (void *)os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
      sub_1000525D4(a1, v13);
    v14 = *(void **)(a1 + 32);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m", 1728, "-[GKGameServicePrivate getGameStatsForPlayer:bundleIDs:handler:]_block_invoke"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "transactionGroupWithName:", v15));

    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10004BFEC;
    v34[3] = &unk_1002BB4A0;
    v34[4] = WeakRetained;
    v35 = *(id *)(a1 + 48);
    v17 = v16;
    v36 = v17;
    objc_msgSend(v17, "perform:", v34);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10004C09C;
    v30[3] = &unk_1002BC3A8;
    v30[4] = WeakRetained;
    v31 = *(id *)(a1 + 40);
    v32 = *(id *)(a1 + 48);
    v18 = v17;
    v33 = v18;
    objc_msgSend(v18, "perform:", v30);
    if ((a5 & 1) == 0)
    {
      v19 = *(void **)(a1 + 32);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_10004C18C;
      v22[3] = &unk_1002BE050;
      v20 = v18;
      v21 = *(_QWORD *)(a1 + 56);
      v23 = v20;
      v24 = v21;
      v25 = *(id *)(a1 + 32);
      v26 = WeakRetained;
      v27 = *(id *)(a1 + 40);
      v28 = *(id *)(a1 + 48);
      v29 = *(id *)(a1 + 64);
      objc_msgSend(v19, "perform:", v22);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_10004BFEC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10004C090;
  v8[3] = &unk_1002BDC48;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadGameMetadataForBundleIDs:context:handler:", v5, v6, v8);

}

uint64_t sub_10004C090(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10004C09C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10004C15C;
  v9[3] = &unk_1002BDB30;
  v10 = *(id *)(a1 + 56);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "loadGameStatsForPlayer:bundleIdentifiers:context:handler:", v5, v6, v7, v9);

}

uint64_t sub_10004C15C(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10004C18C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10004C2A0;
  v11[3] = &unk_1002BE028;
  v12 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(void **)(a1 + 64);
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v16 = *(id *)(a1 + 72);
  v17 = *(id *)(a1 + 80);
  v18 = v3;
  v10 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v11);

}

void sub_10004C2A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 64);
    v7 = 2 * (*(_QWORD *)(a1 + 72) != 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10004C3C4;
    v9[3] = &unk_1002BDB58;
    v10 = *(id *)(a1 + 32);
    v11 = *(id *)(a1 + 80);
    objc_msgSend(v4, "fetchGameStatsForPlayer:bundleIdentifiers:responseKind:context:handler:", v5, v6, v7, v8, v9);

  }
}

uint64_t sub_10004C3C4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, CFSTR("records"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10004C3FC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("records")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10004C6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10004C70C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  id v7;
  void *v8;
  void *v9;
  void *v10;
  BOOL v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _BOOL8 v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  _QWORD v30[4];
  id v31;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(*(id *)(a1 + 32), "count");
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    goto LABEL_19;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject fetchRequestForContext:](GKGameCacheObject, "fetchRequestForContext:", v5));
  objc_msgSend(v9, "setFetchLimit:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate > %@ && name != nil && bundleID in %@"), v8, *(_QWORD *)(a1 + 32)));
  objc_msgSend(v9, "setPredicate:", v10);

  v11 = objc_msgSend(v5, "countForFetchRequest:error:", v9, 0) == v7;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v11;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v11;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate != nil && name != nil && bundleID in %@"), *(_QWORD *)(a1 + 32)));
    objc_msgSend(v9, "setPredicate:", v12);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v5, "countForFetchRequest:error:", v9, 0) == v7;
  }

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
LABEL_19:
    if (*(_DWORD *)(a1 + 64))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gamesForBundleIDs:context:](GKGameCacheObject, "gamesForBundleIDs:context:", *(_QWORD *)(a1 + 32), v5));
      v14 = objc_msgSend(v13, "count");
      if (v14 != v7)
      {
        if (!os_log_GKGeneral)
          v15 = (id)GKOSLoggers(v14);
        v16 = os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG);
        if (v16)
          sub_1000526D8();
        v17 = os_log_GKGeneral;
        if (!os_log_GKGeneral)
        {
          v18 = (id)GKOSLoggers(v16);
          v17 = os_log_GKGeneral;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          sub_1000526A4(v17, v19, v20, v21, v22, v23, v24, v25);
      }
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_gkMapDictionaryWithKeyPath:", CFSTR("bundleID")));
      v27 = *(void **)(a1 + 32);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_10004C9DC;
      v30[3] = &unk_1002BDF20;
      v31 = v26;
      v28 = v26;
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "_gkFilterWithBlock:", v30));
      objc_msgSend(*(id *)(a1 + 40), "setResult:", v29);

    }
  }
  v6[2](v6);

}

id sub_10004C9DC(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2));
  if (v2)
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameInternal internalRepresentationForCacheObject:](GKGameInternal, "internalRepresentationForCacheObject:", v2));
  else
    v3 = 0;

  return v3;
}

void sub_10004CA34(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id, _QWORD, _QWORD))(v2 + 16))(v2, v3, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));

}

void sub_10004CCD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10004CCE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  NSMutableSet *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  int8x16_t v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  int8x16_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject fetchRequestForContext:](GKGameCacheObject, "fetchRequestForContext:", v5));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("bundleID in %@"), *(_QWORD *)(a1 + 32)));
  objc_msgSend(v7, "setPredicate:", v8);

  v29 = v5;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v7, 0));
  v10 = objc_opt_new(NSMutableSet);
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v11 = v9;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v13; i = (char *)i + 1)
      {
        if (*(_QWORD *)v35 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v16, "expired") & 1) == 0)
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "bundleID"));

          if (v17)
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "bundleID"));
            -[NSMutableSet addObject:](v10, "addObject:", v18);

          }
        }
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    }
    while (v13);
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v19, "minusSet:", v10);
  if (objc_msgSend(v19, "count"))
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](GKApplicationWorkspace, "defaultWorkspace"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "allObjects"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "gameDescriptorsWithInstalledBundleVersionsForBundleIDs:", v21));

    v23 = *(void **)(a1 + 40);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "replyQueue"));
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10004CFE4;
    v30[3] = &unk_1002BDE58;
    v31 = v22;
    v28 = *(int8x16_t *)(a1 + 40);
    v26 = (id)v28.i64[0];
    v32 = vextq_s8(v28, v28, 8uLL);
    v33 = *(_QWORD *)(a1 + 56);
    v27 = v22;
    objc_msgSend(v23, "performOnQueue:block:", v25, v30);

  }
  v6[2](v6);

}

void sub_10004CFE4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;

  v3 = a2;
  v15 = CFSTR("game");
  v16 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004D13C;
  v10[3] = &unk_1002BE168;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v11 = v7;
  v14 = v8;
  v12 = *(id *)(a1 + 32);
  v13 = v3;
  v9 = v3;
  objc_msgSend(v5, "issueRequest:bagKey:clientProxy:handler:", v4, CFSTR("gk-get-game-metadata"), v6, v10);

}

void sub_10004D13C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  double v12;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v7 && !a3)
  {
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a4;
    v8 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10004D214;
    v9[3] = &unk_1002BE140;
    v12 = a4;
    v10 = v7;
    v11 = *(id *)(a1 + 40);
    objc_msgSend(v8, "performOnManagedObjectContext:", v9);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10004D214(uint64_t a1, void *a2, void *a3)
{
  id v5;
  double v6;
  void (**v7)(_QWORD);
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;

  v5 = a2;
  v6 = *(double *)(a1 + 48);
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", v6));
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("game-metadata")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gamesForGameDescriptors:context:](GKGameCacheObject, "gamesForGameDescriptors:context:", *(_QWORD *)(a1 + 40), v5));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10004D340;
  v14[3] = &unk_1002BE118;
  v15 = v9;
  v16 = v8;
  v17 = v5;
  v10 = v5;
  v11 = v8;
  v12 = v9;
  objc_msgSend(v13, "enumerateObjectsUsingBlock:", v14);
  v7[2](v7);

}

void sub_10004D340(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;
  id v8;

  v8 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", CFSTR("status")));
  v7 = objc_msgSend(v6, "integerValue");

  if (!v7)
    objc_msgSend(v5, "updateWithServerRepresentation:expirationDate:", v8, *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 48), "refreshObject:mergeChanges:", v5, 1);

}

void sub_10004D3DC(uint64_t a1)
{
  uint64_t v1;
  double v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);

}

void sub_10004D600(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _BOOL8 v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 64) != 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10004D70C;
  v11[3] = &unk_1002BE208;
  v12 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  v13 = v8;
  v14 = v9;
  v15 = *(id *)(a1 + 56);
  v16 = *(id *)(a1 + 64);
  v17 = v3;
  v10 = v3;
  objc_msgSend(v4, "fetchGameMetadataForBundleIDs:responseKind:context:handler:", v5, v6, v7, v11);

}

uint64_t sub_10004D70C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  int8x16_t v19;
  int8x16_t v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  int8x16_t v25;
  id v26;
  _QWORD v27[4];
  int8x16_t v28;
  id v29;

  v7 = objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, CFSTR("games"));
  if ((a3 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v7);
    v9 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
      sub_100052740(a1, v9, v10);
    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m", 1913, "-[GKGameServicePrivate getGameMetadataForBundleIDs:handler:]_block_invoke"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "transactionGroupWithName:", v12));

    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_10004D920;
    v27[3] = &unk_1002BB4A0;
    v19 = *(int8x16_t *)(a1 + 40);
    v14 = (id)v19.i64[0];
    v28 = vextq_s8(v19, v19, 8uLL);
    v15 = v13;
    v29 = v15;
    objc_msgSend(v15, "perform:", v27);
    if ((a4 & 1) == 0)
    {
      v16 = *(void **)(a1 + 32);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_10004DA0C;
      v21[3] = &unk_1002BE1E0;
      v22 = v15;
      v23 = *(id *)(a1 + 56);
      v24 = *(id *)(a1 + 32);
      v20 = *(int8x16_t *)(a1 + 40);
      v17 = (id)v20.i64[0];
      v25 = vextq_s8(v20, v20, 8uLL);
      v26 = *(id *)(a1 + 64);
      objc_msgSend(v16, "perform:", v21);

    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
}

void sub_10004D920(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10004D9DC;
  v8[3] = &unk_1002BDB30;
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadGameMetadataForBundleIDs:context:handler:", v5, v6, v8);

}

uint64_t sub_10004D9DC(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10004DA0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004DAE4;
  v10[3] = &unk_1002BE1B8;
  v11 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(void **)(a1 + 64);
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = *(id *)(a1 + 72);
  v16 = v3;
  v9 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v5, v10);

}

void sub_10004DAE4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = 2 * (*(_QWORD *)(a1 + 64) != 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10004DC04;
    v8[3] = &unk_1002BE190;
    v9 = *(id *)(a1 + 32);
    v10 = *(id *)(a1 + 72);
    objc_msgSend(v4, "fetchGameMetadataForBundleIDs:responseKind:context:handler:", v5, v6, v7, v8);

  }
}

uint64_t sub_10004DC04(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, CFSTR("games"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10004DC3C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("games")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10004DD68(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  BOOL v9;
  void *v10;
  double v11;
  BOOL v12;
  void *v13;
  NSObject *v14;
  id v15;
  id v16;
  _QWORD block[4];
  id v18;
  id v19;
  BOOL v20;
  BOOL v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", CFSTR("bundle-id")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", CFSTR("bundle-version")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject fetchRequestForContext:](GKGameRatingCacheObject, "fetchRequestForContext:", a1[5]));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("bundleID = %@ && bundleVersion = %@"), v2, v3));
  objc_msgSend(v4, "setPredicate:", v5);

  objc_msgSend(v4, "setFetchLimit:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "executeFetchRequest:error:", v4, 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "rating"));
  v9 = v8 != 0;

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "expirationDate"));
  objc_msgSend(v10, "timeIntervalSinceNow");
  v12 = v11 > 0.0;

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "clientProxy"));
  v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "replyQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004DF28;
  block[3] = &unk_1002BE258;
  v15 = a1[7];
  v18 = v7;
  v19 = v15;
  v20 = v12;
  v21 = v9;
  v16 = v7;
  dispatch_async(v14, block);

}

void sub_10004DF28(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rating"));
  objc_msgSend(v3, "floatValue");
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 16))(v2, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));

}

void sub_10004E178(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10004E190(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  const __CFString *v16;
  void *v17;
  uint64_t v18;

  v3 = a2;
  v18 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  v16 = CFSTR("games");
  v17 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10004E308;
  v11[3] = &unk_1002BE2A8;
  v12 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v14 = v3;
  v15 = v9;
  v13 = v8;
  v10 = v3;
  objc_msgSend(v6, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-get-game-ratings"), v7, v11);

}

void sub_10004E308(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;

  v7 = a2;
  v8 = a3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", a4));
  if (v7 && !v8)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10004E418;
    v11[3] = &unk_1002BB4A0;
    v10 = *(void **)(a1 + 32);
    v12 = *(id *)(a1 + 40);
    v13 = v7;
    v14 = v9;
    objc_msgSend(v10, "perform:", v11);

  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v8);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a4;
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10004E418(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10004E4D4;
  v6[3] = &unk_1002BB518;
  v4 = a1[4];
  v7 = a1[5];
  v8 = a1[4];
  v9 = a1[6];
  v10 = v3;
  v5 = v3;
  objc_msgSend(v4, "performBlock:", v6);

}

void sub_10004E4D4(uint64_t a1)
{
  id v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ratings")));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10004E580;
  v3[3] = &unk_1002BE280;
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v3);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10004E580(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("game")));
  v5 = (id)objc_claimAutoreleasedReturnValue(+[GKGameRatingCacheObject ratingForGameDescriptor:context:](GKGameRatingCacheObject, "ratingForGameDescriptor:context:", v4, *(_QWORD *)(a1 + 32)));

  objc_msgSend(v5, "updateWithServerRepresentation:expirationDate:", v3, *(_QWORD *)(a1 + 40));
}

void sub_10004E604(uint64_t a1)
{
  uint64_t v1;
  double v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);

}

void sub_10004E708(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  char v18;
  unsigned __int8 v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "achievementPointsList"));
  if (objc_msgSend(v2, "isValid"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "internalRepresentation"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "seed"));
    v5 = objc_msgSend(v2, "detailsLoaded");
    v6 = v5 & (objc_msgSend(v2, "expired") ^ 1);
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m", 2036, "-[GKGameServicePrivate fetchGamesWithAchievementStatsForPlayer:context:handler:]_block_invoke"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v7));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "replyQueue"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10004E8BC;
  v14[3] = &unk_1002BE2F8;
  v11 = a1[6];
  v16 = v4;
  v17 = v11;
  v15 = v3;
  v18 = v6;
  v19 = v5;
  v12 = v4;
  v13 = v3;
  objc_msgSend(v8, "notifyOnQueue:block:", v10, v14);

}

uint64_t sub_10004E8BC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
}

void sub_10004EABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10004EAD4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void (**v7)(_QWORD);
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;

  v5 = a2;
  v6 = *(void **)(a1 + 32);
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
  v9 = *(void **)(a1 + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "replyQueue"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10004EC08;
  v17[3] = &unk_1002BD500;
  v12 = *(_QWORD *)(a1 + 48);
  v18 = v8;
  v19 = v12;
  v20 = v5;
  v21 = *(id *)(a1 + 32);
  v13 = *(id *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 56);
  v22 = v13;
  v23 = v14;
  v15 = v5;
  v16 = v8;
  objc_msgSend(v9, "performOnQueue:block:", v11, v17);

  v7[2](v7);
}

void sub_10004EC08(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  const __CFString *v19;
  uint64_t v20;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v19 = CFSTR("requested-player-id");
    v20 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
  }
  else
  {
    v5 = 0;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10004ED80;
  v12[3] = &unk_1002BE370;
  v13 = *(id *)(a1 + 48);
  v14 = *(id *)(a1 + 56);
  v8 = *(id *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 40);
  v15 = v8;
  v16 = v9;
  v10 = *(_QWORD *)(a1 + 72);
  v17 = v3;
  v18 = v10;
  v11 = v3;
  objc_msgSend(v6, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-get-games-played-descriptors-with-achievements"), v7, v12);

}

void sub_10004ED80(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  double v18;

  v11 = a2;
  v7 = a3;
  if (v11 && !v7)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10004EE94;
    v12[3] = &unk_1002BE348;
    v8 = *(void **)(a1 + 32);
    v13 = *(id *)(a1 + 40);
    v14 = *(id *)(a1 + 32);
    v18 = a4;
    v15 = v11;
    v9 = *(id *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v16 = v9;
    v17 = v10;
    objc_msgSend(v8, "performBlockAndWait:", v12);

  }
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = a4;
  objc_msgSend(*(id *)(a1 + 48), "setError:", v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_10004EE94(uint64_t a1)
{
  GKAchievementPointsListCacheObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  GKAchievementPointsListCacheObject *v7;
  id v8;
  void *v9;
  void **v10;
  uint64_t v11;
  void (*v12)(uint64_t, void *);
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  GKAchievementPointsListCacheObject *v17;

  v2 = (GKAchievementPointsListCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "achievementPointsList"));
  if (!v2)
  {
    v2 = -[GKCacheObject initWithManagedObjectContext:]([GKAchievementPointsListCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "setAchievementPointsList:", v2);
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 72)));
  -[GKAchievementPointsListCacheObject updateWithServerRepresentation:expirationDate:](v2, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 48), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[GKAchievementPointsListCacheObject entries](v2, "entries"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_gkValuesForKeyPath:", CFSTR("gameRecord.game.bundleID")));

  v10 = _NSConcreteStackBlock;
  v11 = 3221225472;
  v12 = sub_10004EFF8;
  v13 = &unk_1002BC3A8;
  v6 = *(void **)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = v5;
  v16 = *(id *)(a1 + 40);
  v17 = v2;
  v7 = v2;
  v8 = v5;
  objc_msgSend(v6, "perform:", &v10);
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[GKAchievementPointsListCacheObject seed](v7, "seed", v10, v11, v12, v13, v14));
  objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v9, CFSTR("seed"));

}

void sub_10004EFF8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10004F0B8;
  v8[3] = &unk_1002BE320;
  v9 = v6;
  v10 = *(id *)(a1 + 56);
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadGameMetadataForBundleIDs:context:handler:", v5, v9, v8);

}

void sub_10004F0B8(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10004F130;
  v3[3] = &unk_1002BBBD8;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "performBlockAndWait:", v3);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

id sub_10004F130(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setDetailsLoaded:", 1);
}

void sub_10004F13C(uint64_t a1)
{
  uint64_t v2;
  double v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *, double))(v2 + 16))(v2, v5, v4, v3);

}

void sub_10004F368(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void (**v7)(_QWORD);
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10004F414;
  v8[3] = &unk_1002BB8A0;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v9 = v5;
  v10 = v6;
  v11 = *(id *)(a1 + 32);
  v7 = a2;
  objc_msgSend(v4, "performOnManagedObjectContext:", v8);
  v7[2](v7);

}

void sub_10004F414(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  id v18;
  id v19;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v8, v7));

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10004F51C;
  v15[3] = &unk_1002BDBD0;
  v10 = *(void **)(a1 + 40);
  v11 = *(id *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 40);
  v16 = v11;
  v17 = v12;
  v18 = v9;
  v19 = v5;
  v13 = v5;
  v14 = v9;
  objc_msgSend(v10, "fetchGamesWithAchievementStatsForPlayer:context:handler:", v14, v7, v15);

}

void sub_10004F51C(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  id *v20;
  void *v21;
  id v22;
  int8x16_t v23;
  _QWORD v24[4];
  _QWORD v25[3];
  _QWORD v26[4];
  id v27;
  int8x16_t v28;
  id v29;
  _QWORD v30[5];
  id v31;
  id v32;
  _QWORD *v33;
  _QWORD v34[3];
  char v35;

  v9 = a2;
  v10 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("games"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, CFSTR("seed"));
  if ((a4 & 1) == 0)
  {
    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m", 2106, "-[GKGameServicePrivate getGamesWithAchievementStatsForPlayer:handler:]_block_invoke_3"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "transactionGroupWithName:", v12));

    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x2020000000;
    v35 = 0;
    v30[2] = sub_10004F798;
    v30[3] = &unk_1002BDE58;
    v14 = *(void **)(a1 + 48);
    v30[4] = *(_QWORD *)(a1 + 40);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v31 = v14;
    v15 = v13;
    v32 = v15;
    v33 = v34;
    objc_msgSend(v15, "perform:", v30);
    if ((a5 & 1) != 0)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "replyQueue"));
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10004FB54;
      v24[3] = &unk_1002BDEA8;
      v25[2] = v34;
      v18 = v15;
      v19 = *(_QWORD *)(a1 + 40);
      v25[0] = v18;
      v25[1] = v19;
      objc_msgSend(v18, "notifyOnQueue:block:", v17, v24);
      v20 = (id *)v25;

    }
    else
    {
      v21 = *(void **)(a1 + 32);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_10004F8FC;
      v26[3] = &unk_1002BC3A8;
      v27 = v15;
      v23 = *(int8x16_t *)(a1 + 32);
      v22 = (id)v23.i64[0];
      v28 = vextq_s8(v23, v23, 8uLL);
      v29 = *(id *)(a1 + 48);
      objc_msgSend(v21, "perform:", v26);
      v20 = &v27;

      v16 = (void *)v28.i64[1];
    }

    _Block_object_dispose(v34, 8);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10004F780(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10004F798(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004F85C;
  v10[3] = &unk_1002BDE30;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v12 = v3;
  v13 = v8;
  v11 = v7;
  v9 = v3;
  objc_msgSend(v4, "loadGamesWithAchievementStatsForPlayer:context:handler:", v5, v6, v10);

}

void sub_10004F85C(uint64_t a1, void *a2, void *a3, double a4)
{
  void *v7;
  id v8;
  BOOL v10;
  id v11;

  v7 = *(void **)(a1 + 32);
  v11 = a3;
  v8 = a2;
  objc_msgSend(v7, "setError:", v11);
  v10 = a4 > 0.0 && v11 == 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v10;
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, CFSTR("seed"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10004F8FC(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v3 = a2;
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004F9EC;
  v10[3] = &unk_1002BB4C8;
  v11 = a1[6];
  v7 = a1[4];
  v8 = a1[5];
  v12 = v7;
  v13 = v8;
  v14 = a1[7];
  v15 = v3;
  v9 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v10);

}

void sub_10004F9EC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10004FAEC;
    v7[3] = &unk_1002BDB58;
    v8 = *(id *)(a1 + 32);
    v9 = *(id *)(a1 + 64);
    objc_msgSend(v4, "fetchGamesWithAchievementStatsForPlayer:context:handler:", v5, v6, v7);

  }
}

uint64_t sub_10004FAEC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("games"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("seed"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10004FB54(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
    v3 = (void *)v2;
    if (v2)
    {
      v6 = GKRefreshSeedKey;
      v7 = v2;
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
    }
    else
    {
      v4 = 0;
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 5, v4);

  }
}

void sub_10004FC38(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("games")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);

}

void sub_10004FE6C(uint64_t a1, void *a2)
{
  void *v4;
  void (**v5)(_QWORD);
  _QWORD v6[5];
  id v7;
  id v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10004FF1C;
  v6[3] = &unk_1002BB8A0;
  v4 = *(void **)(a1 + 32);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 32);
  v5 = a2;
  objc_msgSend(v4, "performOnManagedObjectContext:", v6);
  v5[2](v5);

}

void sub_10004FF1C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localPlayer"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "playerID"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceWithID:](GKMutableResource, "resourceWithID:", v9));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceForRemoveGames:](GKResource, "resourceForRemoveGames:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v11, "addObject:", v12);
  objc_msgSend(v10, "setRepresentedItem:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v7));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("player = %@ && game.bundleID = %@"), v13, *(_QWORD *)(a1 + 40)));
  +[GKCacheObject deleteObjectsMatchingPredicate:context:](GKGameRecordCacheObject, "deleteObjectsMatchingPredicate:context:", v14, v7);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "credential"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "removeGameWriterWithCredential:", v16));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v10));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100050128;
  v20[3] = &unk_1002BB6E8;
  v21 = *(id *)(a1 + 48);
  v22 = v5;
  v19 = v5;
  objc_msgSend(v17, "writeResources:handler:", v18, v20);

}

uint64_t sub_100050128(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_100050158(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000502C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  id v23;
  _BYTE v24[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDLoadedGame _gkFetchRequest](GKCDLoadedGame, "_gkFetchRequest"));
  v23 = 0;
  v18 = v5;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v7, &v23));
  v9 = v23;
  v10 = objc_alloc_init((Class)NSMutableSet);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v11 = v8;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v20;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v20 != v14)
          objc_enumerationMutation(v11);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v15), "bundleId"));
        objc_msgSend(v10, "addObject:", v16);

        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    }
    while (v13);
  }

  v17 = objc_msgSend(v10, "copy");
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v17);

  objc_msgSend(*(id *)(a1 + 32), "setError:", v9);
  v6[2](v6);

}

void sub_100050484(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  if (objc_msgSend(v4, "count"))
  {
    v2 = *(_QWORD *)(a1 + 48);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "restoreGameIdCacheWithHandler:", *(_QWORD *)(a1 + 48));
  }

}

uint64_t sub_100050658(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), a2);
}

void sub_100050950(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  void *v22;

  v5 = a3;
  v6 = a2;
  v7 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v7, "setResultType:", 2);
  v16 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "executeRequest:error:", v7, &v16));

  v9 = v16;
  v10 = v9;
  if (v9)
    v9 = objc_msgSend(*(id *)(a1 + 40), "setError:", v9);
  if (!os_log_GKGeneral)
    v11 = (id)GKOSLoggers(v9);
  v12 = (void *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
  {
    v13 = v12;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "result"));
    v15 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    v18 = v14;
    v19 = 2112;
    v20 = v15;
    v21 = 2112;
    v22 = v10;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Cleared %@ cached %@ entities (error: %@)", buf, 0x20u);

  }
  v5[2](v5);

}

void sub_100050AF0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

NSArray *__cdecl sub_100050C5C(id a1, NSSet *a2)
{
  NSSet *v2;
  dispatch_queue_t current_queue;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;

  v2 = a2;
  current_queue = dispatch_get_current_queue();
  v4 = objc_claimAutoreleasedReturnValue(current_queue);
  if (dispatch_queue_get_specific(v4, CFSTR("com.apple.gamed.cachequeue")) != CFSTR("com.apple.gamed.cachequeue"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s not invoked on managed object context queue at %@"), "-[GKGameServicePrivate getFriendListAccessForAllGames:]_block_invoke", v5));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameService.m"));
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "lastPathComponent")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (_queueContext == (__bridge const void * _Nonnull)GKCacheQueueID)\n[%s (%s:%d)]"), v6, "-[GKGameServicePrivate getFriendListAccessForAllGames:]_block_invoke", objc_msgSend(v8, "UTF8String"), 2265));

    +[NSException raise:format:](NSException, "raise:format:", CFSTR("GameKit Exception"), CFSTR("%@"), v9);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet _gkMapWithBlock:](v2, "_gkMapWithBlock:", &stru_1002BE418));
  return (NSArray *)v10;
}

id sub_100050DA8(id a1, GKCDGameSettings *a2)
{
  GKCDGameSettings *v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameSettings bundleID](v2, "bundleID"));
  if ((objc_msgSend(v3, "isEqualToString:", GKGameCenterIdentifier) & 1) != 0)
    v4 = 0;
  else
    v4 = objc_msgSend(objc_alloc((Class)GKGameSettingsInternal), "initWithGameSettings:", v2);

  return v4;
}

void sub_100050E1C(id *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  id v9;
  void (**v10)(_QWORD);
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  uint64_t v18;
  id v19;
  NSObject *v20;
  GKCDGameAccessList *v21;
  GKCDGameAccessList *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t (**v32)(id, void *);
  void *v33;
  uint64_t v34;
  void *v35;
  _QWORD v36[4];
  id v37;
  id v38;
  void (**v39)(_QWORD);
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  id v44;
  uint8_t buf[4];
  id v46;
  _BYTE v47[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList _gkFetchRequest](GKCDGameAccessList, "_gkFetchRequest"));
  v44 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v7, &v44));
  v9 = v44;
  if (v9)
  {
    v10 = v6;
    v11 = v7;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v12 = v8;
    v13 = v8;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v40, v47, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(_QWORD *)v41 != v16)
            objc_enumerationMutation(v13);
          objc_msgSend(v5, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i));
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v40, v47, 16);
      }
      while (v15);
    }

    if (!os_log_GKGeneral)
      v19 = (id)GKOSLoggers(v18);
    v20 = os_log_GKDaemon;
    v7 = v11;
    v6 = v10;
    v8 = v12;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v46 = v9;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Could not fetch data from cache: %@", buf, 0xCu);
    }
  }
  else if (objc_msgSend(v8, "count"))
  {
    v21 = (GKCDGameAccessList *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));
    goto LABEL_16;
  }
  v22 = [GKCDGameAccessList alloc];
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList entity](GKCDGameAccessList, "entity"));
  v21 = -[GKCDGameAccessList initWithEntity:insertIntoManagedObjectContext:](v22, "initWithEntity:insertIntoManagedObjectContext:", v23, v5);

LABEL_16:
  v24 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameAccessList expirationDate](v21, "expirationDate"));
  v25 = -[GKCDGameAccessList _gkIsExpired:](v21, "_gkIsExpired:", v24);

  if (v25)
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v27 = GKBagKeyGetAllowFriendListAccessForAllGames;
    v28 = v8;
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientProxy"));
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_1000511BC;
    v36[3] = &unk_1002BE468;
    v37 = a1[5];
    v38 = a1[6];
    v39 = v6;
    objc_msgSend(v26, "issueRequest:bagKey:clientProxy:handler:", &__NSDictionary0__struct, v27, v29, v36);

    v8 = v28;
  }
  else
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameAccessList entries](v21, "entries"));
    v31 = objc_msgSend(v30, "count");

    if (v31)
    {
      v32 = (uint64_t (**)(id, void *))a1[6];
      v33 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameAccessList entries](v21, "entries"));
      v34 = v32[2](v32, v33);
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      objc_msgSend(a1[5], "setResult:", v35);

    }
    v6[2](v6);
  }

}

void sub_1000511BC(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;
  double v16;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v7 && !a3)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000512F4;
    v11[3] = &unk_1002BE440;
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("results")));
    v13 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", objc_msgSend(v12, "count")));
    v16 = a4;
    v8 = *(void **)(a1 + 32);
    v14 = v8;
    v15 = *(id *)(a1 + 40);
    v9 = v13;
    v10 = v12;
    objc_msgSend(v8, "performOnManagedObjectContext:", v11);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000512F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  void *j;
  void *v20;
  GKCDGameSettings *v21;
  void *v22;
  GKCDGameSettings *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  GKCDGameAccessList *v28;
  void *v29;
  GKCDGameAccessList *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void (**v38)(_QWORD);
  id obj;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[128];
  _BYTE v50[128];

  v5 = a2;
  v38 = a3;
  v48 = 0;
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList _gkFetchRequest](GKCDGameAccessList, "_gkFetchRequest"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:"));
  v7 = 0;
  v8 = v7;
  if (v7)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(v7);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000527F4();
  }
  v36 = v8;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v10 = v6;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v45;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v45 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(v5, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i));
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v44, v50, 16);
    }
    while (v12);
  }

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v15 = a1;
  obj = *(id *)(a1 + 32);
  v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v41;
    do
    {
      for (j = 0; j != v17; j = (char *)j + 1)
      {
        if (*(_QWORD *)v41 != v18)
          objc_enumerationMutation(obj);
        v20 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)j);
        v21 = [GKCDGameSettings alloc];
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameSettings entity](GKCDGameSettings, "entity"));
        v23 = -[GKCDGameSettings initWithEntity:insertIntoManagedObjectContext:](v21, "initWithEntity:insertIntoManagedObjectContext:", v22, v5);

        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("allow-friend-list-access")));
        -[GKCDGameSettings setAllowFriendListAccess:](v23, "setAllowFriendListAccess:", v24);

        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("bundle-id")));
        -[GKCDGameSettings setBundleID:](v23, "setBundleID:", v25);

        objc_msgSend(*(id *)(v15 + 40), "addObject:", v23);
      }
      v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
    }
    while (v17);
  }

  v26 = v15;
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(v15 + 64)));
  v28 = [GKCDGameAccessList alloc];
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDGameAccessList entity](GKCDGameAccessList, "entity"));
  v30 = -[GKCDGameAccessList initWithEntity:insertIntoManagedObjectContext:](v28, "initWithEntity:insertIntoManagedObjectContext:", v29, v5);

  -[GKCDGameAccessList setExpirationDate:](v30, "setExpirationDate:", v27);
  if (objc_msgSend(*(id *)(v26 + 40), "count"))
  {
    v31 = objc_msgSend(*(id *)(v26 + 40), "copy");
    -[GKCDGameAccessList setEntries:](v30, "setEntries:", v31);

    v32 = *(_QWORD *)(v26 + 56);
    v33 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDGameAccessList entries](v30, "entries"));
    v34 = (*(uint64_t (**)(uint64_t, void *))(v32 + 16))(v32, v33);
    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    objc_msgSend(*(id *)(v26 + 48), "setResult:", v35);

  }
  v38[2](v38);

}

void sub_1000516C0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100051854(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005195C;
  v8[3] = &unk_1002BE4E0;
  v9 = *(id *)(a1 + 40);
  v6 = *(id *)(a1 + 48);
  v11 = v3;
  v12 = v6;
  v10 = *(_QWORD *)(a1 + 32);
  v7 = v3;
  objc_msgSend(v4, "getGameMetadataForBundleIDs:handler:", v5, v8);

}

void sub_10005195C(id *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
  v5 = (void *)v4;
  if (v4)
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(v4);
    v7 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v8 = v7;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v3, "count")));
      *(_DWORD *)buf = 138412546;
      v22 = v9;
      v23 = 2112;
      v24 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Loaded %@ games for bundleID, pick the first one out of: %@", buf, 0x16u);

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "transport"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "localPlayer"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKGameStatService, "serviceWithTransport:forClient:localPlayer:", v10, v11, v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "gameDescriptor"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "localPlayer"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100051BF0;
    v17[3] = &unk_1002BCE80;
    v18 = a1[6];
    v19 = a1[4];
    v20 = a1[7];
    objc_msgSend(v13, "getLeaderboardsForGameDescriptor:player:setIdentifier:handler:", v14, v15, 0, v17);

  }
  else
  {
    if (!os_log_GKGeneral)
      v16 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100052854();
    (*((void (**)(void))a1[7] + 2))();
  }

}

void sub_100051BF0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  id v31;

  v3 = a2;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100051EA4;
  v22[3] = &unk_1002BE4B8;
  v23 = *(id *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_gkFilterWithBlock:", v22));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));

  if (v5)
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v6);
    v8 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v9 = v8;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v3, "count")));
      v11 = *(_QWORD *)(a1 + 40);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "leaderboardID"));
      *(_DWORD *)buf = 138413058;
      v25 = v10;
      v26 = 2112;
      v27 = v11;
      v28 = 2112;
      v29 = v12;
      v30 = 2112;
      v31 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Loaded %@ leaderboards for bundleID: %@.\n Pick the first one matching leaderboardID: (%@) out of: %@", buf, 0x2Au);

    }
    v13 = objc_alloc((Class)GKGameActivityInternal);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "activityType"));
    v15 = *(_QWORD *)(a1 + 40);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
    v17 = objc_msgSend(v13, "initWithActivityType:bundleID:andUserInfo:", v14, v15, v16);

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameService sharedGameActivityStore](GKGameService, "sharedGameActivityStore"));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100051F18;
    v20[3] = &unk_1002BB540;
    v21 = *(id *)(a1 + 48);
    objc_msgSend(v18, "add:completionHandler:", v17, v20);

  }
  else
  {
    if (!os_log_GKGeneral)
      v19 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000528B8();
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

id sub_100051EA4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "leaderboardID"));
  if (objc_msgSend(v4, "isEqualToString:", v5))
    v6 = v3;
  else
    v6 = 0;
  v7 = v6;

  return v7;
}

uint64_t sub_100051F18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100052020(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000520E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100052180(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10005223C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100052254()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "_cacheLockupsWithCollectionRequest returned error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000522B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "_lockupDictionaryForRequest returned error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100052314()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100052248();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Unable to lookup game settings: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100052378()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100052248();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Unable to lookup existing game settings object. %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000523DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Encountered a fetch error while trying to lookup a game list: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10005243C(void *a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = a1;
  objc_msgSend(a2, "count");
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v3, v4, "Finished refreshing %lu expired metadatas", v5);

  sub_1000279E0();
}

void sub_1000524C0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100052248();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "%@ Scanning installed apps", v2);
  sub_100016C20();
}

void sub_100052528(uint64_t a1, void *a2)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  void *v9;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "conciseDescription"));
  v6 = 136315394;
  v7 = "-[GKGameServicePrivate getGamesForPlayer:includeInstalled:handler:]_block_invoke_3";
  v8 = 2112;
  v9 = v4;
  sub_100027994((void *)&_mh_execute_header, v3, v5, "Cache miss - %s %@", (uint8_t *)&v6);

  sub_1000279E0();
}

void sub_1000525D4(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  void *v10;
  __int16 v11;
  uint64_t v12;

  v3 = *(void **)(a1 + 40);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "conciseDescription"));
  v6 = *(_QWORD *)(a1 + 48);
  v7 = 136315650;
  v8 = "-[GKGameServicePrivate getGameStatsForPlayer:bundleIDs:handler:]_block_invoke_3";
  v9 = 2112;
  v10 = v5;
  v11 = 2112;
  v12 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Cache miss - %s %@ %@", (uint8_t *)&v7, 0x20u);

}

void sub_1000526A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "Cache Validity Error! Missing Results", a5, a6, a7, a8, 0);
}

void sub_1000526D8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100052248();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "Cache validity error! Missing results for %@", v2);
  sub_100016C20();
}

void sub_100052740(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = 136315394;
  v5 = "-[GKGameServicePrivate getGameMetadataForBundleIDs:handler:]_block_invoke_2";
  v6 = 2112;
  v7 = v3;
  sub_100027994((void *)&_mh_execute_header, a2, a3, "Cache miss - %s %@", (uint8_t *)&v4);
  sub_100016C20();
}

void sub_1000527C0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "Scanning installed apps after cache reset", a5, a6, a7, a8, 0);
}

void sub_1000527F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Unable to lookup game access list: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100052854()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100052248();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Failed to load games for activity creation, with bundleID: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000528B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100052248();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Failed to load leaderboards for activity creation, with bundleID: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100052BC8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v5 = a3;
  v6 = a2;
  v11 = objc_msgSend(v6, "copy");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession obfuscatedIdentifierForPlayerIdentifier:containerName:](GKCloudGameSession, "obfuscatedIdentifierForPlayerIdentifier:containerName:", v7, *(_QWORD *)(a1 + 32)));
  objc_msgSend(v11, "setIdentifier:", v8);

  v9 = *(_QWORD *)(a1 + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v5));

  (*(void (**)(uint64_t, id, void *))(v9 + 16))(v9, v11, v10);
}

void sub_100052EE4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100052F98;
  v8[3] = &unk_1002BE560;
  v6 = *(_QWORD *)(a1 + 56);
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v7 = v3;
  +[GKCloudGameSession createSessionWithContainerName:title:maxConnectedPlayers:handler:](GKCloudGameSession, "createSessionWithContainerName:title:maxConnectedPlayers:handler:", v4, v5, v6, v8);

}

uint64_t sub_100052F98(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v6));

  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005300C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  if (*(_QWORD *)(a1 + 40))
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "createGKGameSession"));
    v3 = *(_QWORD *)(a1 + 40);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, void *, void *))(v3 + 16))(v3, v2, v4);

  }
}

void sub_100053240(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000532E0;
  v6[3] = &unk_1002BCA30;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  +[GKCloudGameSession sessionsForContainerName:handler:](GKCloudGameSession, "sessionsForContainerName:handler:", v4, v6);

}

uint64_t sub_1000532E0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v6));

  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100053354(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v2, "count")));
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = v2;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v8), "createGKGameSession", (_QWORD)v12));
          objc_msgSend(v3, "addObject:", v9);

          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v6);
    }

    v10 = *(_QWORD *)(a1 + 40);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, void *, void *))(v10 + 16))(v10, v3, v11);

  }
}

void sub_100053574(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v5 = a3;
  if (*(_QWORD *)(a1 + 32))
  {
    v11 = (uint64_t)v5;
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "createGKGameSession"));
    v7 = v11;
    v8 = (void *)v6;
    if (!(v11 | v6))
      v7 = objc_claimAutoreleasedReturnValue(+[NSError _gkUserErrorForGameSessionErrorCode:userInfo:](NSError, "_gkUserErrorForGameSessionErrorCode:userInfo:", 16, 0));
    v12 = (void *)v7;
    v9 = *(_QWORD *)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v7));
    (*(void (**)(uint64_t, void *, void *))(v9 + 16))(v9, v8, v10);

    v5 = v12;
  }

}

void sub_1000537F4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100053894;
  v6[3] = &unk_1002BB6E8;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  +[GKCloudGameSession removeSessionWithIdentifier:handler:](GKCloudGameSession, "removeSessionWithIdentifier:handler:", v4, v6);

}

uint64_t sub_100053894(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000538C4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_1000539D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actualIdentifiersForObsfucatedPlayerIDs:inSession:", *(_QWORD *)(a1 + 40), v5));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100053ACC;
    v9[3] = &unk_1002BD988;
    v11 = *(id *)(a1 + 48);
    v10 = v5;
    objc_msgSend(v10, "removePlayers:handler:", v7, v9);

LABEL_5:
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v6));
    (*(void (**)(uint64_t, _QWORD, void *))(v8 + 16))(v8, 0, v7);
    goto LABEL_5;
  }
LABEL_6:

}

void sub_100053ACC(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = a2;
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "createGKGameSession"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v4));

    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v6, v5);
  }
}

void sub_100053C14(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = a3;
    v6 = a2;
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "createGKGameSession"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "data"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v5));
    (*(void (**)(uint64_t, id, void *, void *))(v3 + 16))(v3, v9, v7, v8);

  }
}

void sub_100053E78(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100053F40;
  v6[3] = &unk_1002BE600;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = v3;
  v5 = v3;
  +[GKCloudGameSession sessionForIdentifier:handler:](GKCloudGameSession, "sessionForIdentifier:handler:", v4, v6);

}

void sub_100053F40(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", a3));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  if (v5)
  {
    v10 = *(void **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10005403C;
    v11[3] = &unk_1002BC3A8;
    v12 = v5;
    v13 = *(id *)(a1 + 40);
    v14 = *(id *)(a1 + 48);
    v15 = *(id *)(a1 + 32);
    objc_msgSend(v10, "perform:", v11);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v7, v8, v9);

}

void sub_10005403C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000540F8;
  v8[3] = &unk_1002BE5D8;
  v6 = *(_QWORD *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = *(id *)(a1 + 32);
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "saveData:changeTag:handler:", v5, v6, v8);

}

uint64_t sub_1000540F8(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;

  v5 = *(void **)(a1 + 40);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "createGKGameSession"));
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v8);

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("conflictingData"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v6));

  objc_msgSend(*(id *)(a1 + 32), "setError:", v9);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1000541A0(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("conflictingData")));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id, void *, void *))(v1 + 16))(v1, v5, v3, v4);

  }
}

void sub_10005443C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000544D8;
  v5[3] = &unk_1002BE538;
  v6 = *(id *)(a1 + 32);
  v7 = v3;
  v4 = v3;
  +[GKCloudGameSession primaryPlayerWithHandler:](GKCloudGameSession, "primaryPlayerWithHandler:", v5);

}

void sub_1000544D8(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  if (a2)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, CFSTR("playerID"));
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

    if (v6)
      goto LABEL_5;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v7));
    objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }

LABEL_5:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100054588(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100054628;
  v6[3] = &unk_1002BE560;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  +[GKCloudGameSession sessionForIdentifier:handler:](GKCloudGameSession, "sessionForIdentifier:handler:", v4, v6);

}

void sub_100054628(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  v5 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("session"));
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "error"));

    if (!v6)
    {
      if (v11)
      {
        v7 = objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:"));
      }
      else
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "record"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "share"));

        if (v10)
          goto LABEL_8;
        v7 = objc_claimAutoreleasedReturnValue(+[NSError _gkUserErrorForGameSessionErrorCode:userInfo:](NSError, "_gkUserErrorForGameSessionErrorCode:userInfo:", 4, 0));
      }
      v8 = (void *)v7;
      objc_msgSend(*(id *)(a1 + 32), "setError:", v7);

    }
  }
LABEL_8:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100054714(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKConnectionManager sharedManager](GKConnectionManager, "sharedManager"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000547C4;
  v7[3] = &unk_1002BE628;
  v5 = *(_QWORD *)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "isBusyChangingConnectionStateForSession:handler:", v5, v7);

}

uint64_t sub_1000547C4(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v3, CFSTR("isBusy"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100054818(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("session")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("playerID")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("isBusy")));
  v5 = objc_msgSend(v4, "BOOLValue");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  if (v6 || (v5 & 1) != 0 || !v2)
  {

  }
  else if (v3)
  {
    v7 = *(_QWORD *)(a1 + 64);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100054988;
    v10[3] = &unk_1002BE6C8;
    v10[4] = *(_QWORD *)(a1 + 40);
    v14 = v7;
    v11 = v2;
    v13 = *(id *)(a1 + 56);
    v12 = *(id *)(a1 + 48);
    objc_msgSend(v11, "saveConnectionState:forPlayerWithID:handler:", v7, v3, v10);

    goto LABEL_9;
  }
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, _QWORD, void *))(v8 + 16))(v8, 0, v9);

  }
LABEL_9:

}

void sub_100054988(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  _QWORD block[4];
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD v21[5];
  id v22;
  id v23;
  uint64_t v24;

  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100054B50;
    v21[3] = &unk_1002BE650;
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(void **)(a1 + 40);
    v21[4] = *(_QWORD *)(a1 + 32);
    v24 = v8;
    v22 = v9;
    v23 = *(id *)(a1 + 56);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v21);

    v7 = v22;
    goto LABEL_7;
  }
  if (objc_msgSend(v3, "code") == (id)14)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100054B60;
    block[3] = &unk_1002BE6A0;
    v5 = *(id *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 32);
    v16 = v5;
    v17 = v6;
    v20 = *(_QWORD *)(a1 + 64);
    v18 = *(id *)(a1 + 48);
    v19 = *(id *)(a1 + 56);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    v7 = v16;
LABEL_7:

    goto LABEL_8;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "replyQueue"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100054C50;
    v12[3] = &unk_1002BB450;
    v14 = *(id *)(a1 + 56);
    v13 = v4;
    dispatch_async(v11, v12);

    v7 = v14;
    goto LABEL_7;
  }
LABEL_8:

}

id sub_100054B50(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "didSaveConnectionState:forGameSession:handler:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100054B60(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  uint64_t v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "record"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "recordID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneID"));
  v7[0] = _NSConcreteStackBlock;
  v7[2] = sub_100054C40;
  v7[3] = &unk_1002BE678;
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(void **)(a1 + 48);
  v7[4] = *(_QWORD *)(a1 + 40);
  v10 = v5;
  v7[1] = 3221225472;
  v8 = v6;
  v9 = *(id *)(a1 + 56);
  +[GKCloudGameSession updateCacheForZoneID:handler:](GKCloudGameSession, "updateCacheForZoneID:handler:", v4, v7);

}

id sub_100054C40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setConnectionState:forSessionWithIdentifier:handler:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100054C50(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", *(_QWORD *)(a1 + 32)));
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_100054EA4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKConnectionManager sharedManager](GKConnectionManager, "sharedManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100054F6C;
  v7[3] = &unk_1002BB6E8;
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "disconnectConnectionsForClient:reason:handler:", v5, 0, v7);

}

uint64_t sub_100054F6C(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100054F9C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKConnectionManager sharedManager](GKConnectionManager, "sharedManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005506C;
  v8[3] = &unk_1002BB6E8;
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "connectToGameSession:forClient:handler:", v5, v6, v8);

}

uint64_t sub_10005506C(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005509C(uint64_t a1)
{
  void *v2;
  _BOOL8 v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD block[5];
  id v17;
  id v18;
  _BOOL8 v19;

  if (*(_QWORD *)(a1 + 64) == 2)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    v3 = v2 == 0;

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100055274;
    block[3] = &unk_1002BE650;
    v4 = *(void **)(a1 + 48);
    block[4] = *(_QWORD *)(a1 + 40);
    v19 = v3;
    v17 = v4;
    v18 = *(id *)(a1 + 56);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    return;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    if (v5)
    {
      v6 = (id)v5;
    }
    else
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKConnectionManager sharedManager](GKConnectionManager, "sharedManager"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "connectionErrorBySessionID"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
      v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));

      v6 = v14;
      if (!v14)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "createGKGameSession"));
        v6 = 0;
        goto LABEL_9;
      }
    }
    v10 = 0;
LABEL_9:
    v15 = v6;
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKConnectionManager sharedManager](GKConnectionManager, "sharedManager"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "connectionErrorBySessionID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", 0, v13);

  }
}

void sub_100055274(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  objc_msgSend(v3, "_setConnectionState:forSessionWithIdentifier:handler:", v2, v4, *(_QWORD *)(a1 + 48));

}

void sub_100055424(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;
  _QWORD v9[4];
  void (**v10)(_QWORD, _QWORD, _QWORD);

  v5 = a2;
  v6 = a3;
  v7 = *(void (***)(_QWORD, _QWORD, _QWORD))(a1 + 32);
  if (v7)
  {
    if (v5)
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1000554F4;
      v9[3] = &unk_1002BE718;
      v10 = v7;
      objc_msgSend(v5, "getShareURLWithHandler:", v9);

    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v6));
      ((void (**)(_QWORD, _QWORD, void *))v7)[2](v7, 0, v8);

    }
  }

}

void sub_1000554F4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;

  v8 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    if (!(v8 | v5))
    {
      v5 = objc_claimAutoreleasedReturnValue(+[NSError _gkUserErrorForGameSessionErrorCode:userInfo:](NSError, "_gkUserErrorForGameSessionErrorCode:userInfo:", 1, 0));
      v6 = *(_QWORD *)(a1 + 32);
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v5));
    (*(void (**)(uint64_t, unint64_t, void *))(v6 + 16))(v6, v8, v7);

  }
}

void sub_100055754(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000557F4;
  v6[3] = &unk_1002BE560;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  +[GKCloudGameSession sessionForIdentifier:handler:](GKCloudGameSession, "sessionForIdentifier:handler:", v4, v6);

}

void sub_1000557F4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v9 = v5;
  if (a2)
  {
    objc_msgSend(v6, "setObject:forKeyedSubscript:", a2, CFSTR("session"));
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "error"));

    if (v9 && !v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v9));
      objc_msgSend(*(id *)(a1 + 32), "setError:", v8);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100055898(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;
  id v13;
  id v14;
  char v15;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("session")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
    v4 = 1;
  else
    v4 = v2 == 0;
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
      (*(void (**)(uint64_t, _QWORD, void *))(v5 + 16))(v5, 0, v6);

    }
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "actualIdentifiersForObsfucatedPlayerIDs:inSession:", *(_QWORD *)(a1 + 48), v2));
    objc_initWeak(&location, v2);
    v8 = *(unsigned __int8 *)(a1 + 72);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100055A2C;
    v10[3] = &unk_1002BE7B8;
    objc_copyWeak(&v14, &location);
    v9 = *(void **)(a1 + 48);
    v10[4] = *(_QWORD *)(a1 + 40);
    v15 = *(_BYTE *)(a1 + 72);
    v11 = v9;
    v12 = *(id *)(a1 + 56);
    v13 = *(id *)(a1 + 64);
    objc_msgSend(v2, "setBadged:forPlayerIDs:handler:", v8, v7, v10);

    objc_destroyWeak(&v14);
    objc_destroyWeak(&location);

  }
}

void sub_100055A10(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100055A2C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;
  id v14;
  id v15;
  char v16;

  v3 = a2;
  if (objc_msgSend(v3, "code") == (id)14)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100055BC0;
    block[3] = &unk_1002BE768;
    objc_copyWeak(&v15, (id *)(a1 + 64));
    v4 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v16 = *(_BYTE *)(a1 + 72);
    v12 = v4;
    v13 = *(id *)(a1 + 48);
    v14 = *(id *)(a1 + 56);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    objc_destroyWeak(&v15);
  }
  else if (*(_QWORD *)(a1 + 56))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100055CD8;
    v7[3] = &unk_1002BE790;
    v9 = *(id *)(a1 + 56);
    v8 = v3;
    objc_copyWeak(&v10, (id *)(a1 + 64));
    dispatch_async(v6, v7);

    objc_destroyWeak(&v10);
  }

}

void sub_100055BC0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;
  char v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "record"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "zoneID"));
  v7[0] = _NSConcreteStackBlock;
  v7[2] = sub_100055CC0;
  v7[3] = &unk_1002BE740;
  v6 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 72);
  v7[1] = 3221225472;
  v8 = v6;
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  +[GKCloudGameSession updateCacheForZoneID:handler:](GKCloudGameSession, "updateCacheForZoneID:handler:", v5, v7);

}

id sub_100055CC0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setBadged:forPlayerIDs:forSessionWithIdentifier:shouldReportMetrics:handler:", *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, *(_QWORD *)(a1 + 56));
}

void sub_100055CD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v6;
  id WeakRetained;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "createGKGameSession"));
    v4 = *(_QWORD *)(a1 + 32);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v4));
  (*(void (**)(uint64_t, void *, void *))(v1 + 16))(v1, v3, v6);

  if (!v2)
  {

  }
}

void sub_100055F88(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  char v15;

  v3 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100056044;
  v10[3] = &unk_1002BE858;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(void **)(a1 + 56);
  v11 = v5;
  v12 = v6;
  v8 = v7;
  v15 = *(_BYTE *)(a1 + 64);
  v13 = v8;
  v14 = v3;
  v9 = v3;
  +[GKCloudGameSession sessionForIdentifier:handler:](GKCloudGameSession, "sessionForIdentifier:handler:", v4, v10);

}

void sub_100056044(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  char v14;
  id location;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, CFSTR("session"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "actualIdentifiersForObsfucatedPlayerIDs:inSession:", *(_QWORD *)(a1 + 48), v5));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("identifiers"));
    if (*(_BYTE *)(a1 + 64))
    {
      objc_initWeak(&location, v5);
      v8 = *(void **)(a1 + 32);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_1000561C4;
      v10[3] = &unk_1002BE830;
      v11 = v5;
      v14 = *(_BYTE *)(a1 + 64);
      v12 = v7;
      objc_copyWeak(&v13, &location);
      objc_msgSend(v8, "perform:", v10);
      objc_destroyWeak(&v13);

      objc_destroyWeak(&location);
    }

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v6));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v9);

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1000561A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000561C4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  char v12;

  v3 = a2;
  v4 = *(unsigned __int8 *)(a1 + 56);
  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000562AC;
  v8[3] = &unk_1002BE7E0;
  objc_copyWeak(&v11, (id *)(a1 + 48));
  v12 = *(_BYTE *)(a1 + 56);
  v9 = *(id *)(a1 + 40);
  v7 = v3;
  v10 = v7;
  objc_msgSend(v5, "setBadged:forPlayerIDs:handler:", v4, v6, v8);

  objc_destroyWeak(&v11);
}

void sub_100056298(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000562AC(uint64_t a1, void *a2)
{
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;
  char v7;

  if (objc_msgSend(a2, "code") == (id)14)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100056380;
    v3[3] = &unk_1002BE808;
    objc_copyWeak(&v6, (id *)(a1 + 48));
    v7 = *(_BYTE *)(a1 + 56);
    v4 = *(id *)(a1 + 32);
    v5 = *(id *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

    objc_destroyWeak(&v6);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

void sub_100056380(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  char v11;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "record"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "recordID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "zoneID"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000564A4;
  v7[3] = &unk_1002BE7E0;
  objc_copyWeak(&v10, v2);
  v11 = *(_BYTE *)(a1 + 56);
  v8 = *(id *)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  +[GKCloudGameSession updateCacheForZoneID:handler:](GKCloudGameSession, "updateCacheForZoneID:handler:", v6, v7);

  objc_destroyWeak(&v10);
}

void sub_100056490(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000564A4(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = *(unsigned __int8 *)(a1 + 56);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100056538;
  v5[3] = &unk_1002BC0D0;
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  objc_msgSend(WeakRetained, "setBadged:forPlayerIDs:handler:", v3, v4, v5);

}

uint64_t sub_100056538(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100056544(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("session")));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("identifiers")));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKConnectionManager sharedManager](GKConnectionManager, "sharedManager"));
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100056688;
    v11[3] = &unk_1002BD988;
    v13 = *(id *)(a1 + 72);
    v12 = v2;
    objc_msgSend(v4, "sendNotificationMessageOfType:forSession:localizedFormatKey:arguments:userMessage:data:recipientIDs:handler:", 121, v12, v5, v6, v7, v8, v3, v11);

  }
  else
  {
    v9 = *(_QWORD *)(a1 + 72);
    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
      (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v10);

    }
  }

}

void sub_100056688(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    v8 = v3;
    if (v3)
      v6 = 0;
    else
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "createGKGameSession"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v8));
    (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v6, v7);

    v4 = v8;
    if (!v8)
    {

      v4 = 0;
    }
  }

}

void sub_100056958(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  id v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = a2;
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", a3));
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v5, v6);

  }
}

void sub_100056A74(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  id v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v5 = a2;
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", a3));
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v5, v6);

  }
}

void sub_100056BF8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  id v13;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKConnectionManager sharedManager](GKConnectionManager, "sharedManager"));
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100056D08;
    v12[3] = &unk_1002BC0D0;
    v13 = *(id *)(a1 + 48);
    objc_msgSend(v7, "sendNotificationMessageOfType:forSession:localizedFormatKey:arguments:userMessage:data:recipientIDs:handler:", 120, v5, 0, 0, v8, 0, v9, v12);

  }
  else
  {
    v10 = *(_QWORD *)(a1 + 48);
    if (v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v6));
      (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);

    }
  }

}

void sub_100056D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", a2));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
}

void sub_100056EF4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100056F94;
  v6[3] = &unk_1002BE560;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  +[GKCloudGameSession sessionForIdentifier:handler:](GKCloudGameSession, "sessionForIdentifier:handler:", v4, v6);

}

void sub_100056F94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = v5;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, CFSTR("session"));
  }
  else if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", v5));
    objc_msgSend(*(id *)(a1 + 32), "setError:", v7);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100057030(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  int8x16_t v9;
  _QWORD v10[4];
  id v11;
  int8x16_t v12;
  id v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("session")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  if (v3)
    v4 = 1;
  else
    v4 = v2 == 0;
  if (v4)
  {

  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100057170;
      v10[3] = &unk_1002BE8D0;
      v11 = v2;
      v9 = *(int8x16_t *)(a1 + 40);
      v6 = (id)v9.i64[0];
      v12 = vextq_s8(v9, v9, 8uLL);
      v13 = *(id *)(a1 + 56);
      v14 = *(id *)(a1 + 64);
      objc_msgSend(v11, "saveConnectionState:forPlayerWithID:handler:", 0, v5, v10);

      goto LABEL_11;
    }
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
LABEL_11:

}

void sub_100057170(id *a1, void *a2)
{
  id v3;
  void *v4;
  id *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  _QWORD block[4];
  _QWORD v17[2];
  id v18;
  id v19;
  id v20;

  v3 = a2;
  v4 = v3;
  if (v3 && objc_msgSend(v3, "code") == (id)14)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000572F4;
    block[3] = &unk_1002BB4C8;
    v5 = (id *)v17;
    v6 = a1[4];
    v7 = a1[5];
    v8 = a1[6];
    v17[0] = v6;
    v17[1] = v7;
    v18 = v8;
    v19 = a1[7];
    v20 = a1[8];
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    v9 = v18;
LABEL_6:

    goto LABEL_7;
  }
  if (a1[8])
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "replyQueue"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000573F0;
    v12[3] = &unk_1002BB568;
    v5 = &v13;
    v13 = a1[6];
    v14 = v4;
    v15 = a1[8];
    dispatch_async(v11, v12);

    v9 = v14;
    goto LABEL_6;
  }
LABEL_7:

}

void sub_1000572F4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "record"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "recordID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneID"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000573E0;
  v6[3] = &unk_1002BE8A8;
  v5 = *(void **)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v5;
  v8 = *(id *)(a1 + 56);
  v9 = *(id *)(a1 + 64);
  +[GKCloudGameSession updateCacheForZoneID:handler:](GKCloudGameSession, "updateCacheForZoneID:handler:", v4, v6);

}

id sub_1000573E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "saveConnectionStateForLostPlayerWithCloudID:sessionIdentifier:handler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1000573F0(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;
  __int16 v12;
  id v13;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = (void *)os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    v4 = objc_retainAutorelease(*(id *)(a1 + 32));
    v5 = v3;
    v6 = objc_msgSend(v4, "UTF8String");
    v7 = objc_msgSend(*(id *)(a1 + 40), "code");
    v10 = 136315394;
    v11 = v6;
    v12 = 2048;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Saved connection state for lost player: %s, error.code: %ld", (uint8_t *)&v10, 0x16u);

  }
  v8 = *(_QWORD *)(a1 + 48);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkGameSessionErrorForCloudKitError:](NSError, "_gkGameSessionErrorForCloudKitError:", *(_QWORD *)(a1 + 40)));
  (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);

}

void sub_100057518(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 134217984;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid SGConnectionState (%ld) attempted to be set for player", (uint8_t *)&v2, 0xCu);
}

void sub_100057684(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v3 = a2;
  v5 = objc_opt_class(LSApplicationProxy, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2020000000;
    v13 = 0;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "requiredDeviceCapabilities"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000577A4;
    v9[3] = &unk_1002BE8F8;
    v9[4] = &v10;
    objc_msgSend(v6, "enumerateObjectsUsingBlock:", v9);

    if ((objc_msgSend(v3, "isGameCenterEnabled") & 1) != 0 || *((_BYTE *)v11 + 24))
    {
      v7 = *(void **)(a1 + 32);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleIdentifier"));
      objc_msgSend(v7, "addObject:", v8);

    }
    _Block_object_dispose(&v10, 8);
  }

}

void sub_10005778C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000577A4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "isEqualToString:", CFSTR("gamekit"));
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_10005788C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v4 = objc_opt_class(LSApplicationProxy, v3);
  if ((objc_opt_isKindOfClass(v10, v4) & 1) != 0)
  {
    v5 = objc_msgSend(objc_alloc((Class)GKApplicationProxy), "initWithProxy:", v10);
    if (objc_msgSend(v5, "isGameCenterEnabled"))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleID"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "itemName"));

      if (v7)
      {
        v8 = *(void **)(a1 + 32);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "itemName"));
        objc_msgSend(v8, "setObject:forKey:", v6, v9);

      }
    }

  }
}

void sub_100057AF8(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "cannot openURL: %@, because of error: %@", (uint8_t *)&v3, 0x16u);
}

void sub_100057FC8(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void (**v8)(_QWORD);
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  int v16;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000580B4;
  v9[3] = &unk_1002BE9E8;
  v4 = *(void **)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  v11 = *(id *)(a1 + 32);
  v5 = *(id *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(void **)(a1 + 64);
  v12 = v5;
  v13 = v6;
  v16 = *(_DWORD *)(a1 + 80);
  v14 = v7;
  v15 = *(id *)(a1 + 72);
  v8 = a2;
  objc_msgSend(v4, "performOnManagedObjectContext:", v9);
  v8[2](v8);

}

void sub_1000580B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  unsigned int v8;
  char v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  _QWORD v25[6];
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  id v29;
  _QWORD v30[4];
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  _QWORD *v37;
  int v38;
  _QWORD v39[3];
  char v40;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKCompatiblePlayerListCacheObject, "firstObjectMatchingPredicate:context:", *(_QWORD *)(a1 + 32), v5));
  v8 = objc_msgSend(v7, "isValid");
  v9 = v8;
  if (!v8
    || (v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "internalRepresentation")),
        objc_msgSend(*(id *)(a1 + 40), "setResult:", v10),
        v10,
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "expirationDate")),
        objc_msgSend(v11, "timeIntervalSinceNow"),
        v13 = v12,
        v11,
        v13 <= 0.0))
  {
    v14 = *(void **)(a1 + 40);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameStatService.m", 136, "-[GKGameStatService _getRecentMatchesForGameDescriptor:type:reference:handler:]_block_invoke_2"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "transactionGroupWithName:", v15));

    v39[0] = 0;
    v39[1] = v39;
    v39[2] = 0x2020000000;
    v40 = 0;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100058388;
    v30[3] = &unk_1002BE998;
    v17 = *(id *)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 56);
    v31 = v17;
    v32 = v18;
    v19 = v16;
    v33 = v19;
    v34 = v7;
    v38 = *(_DWORD *)(a1 + 80);
    v35 = *(id *)(a1 + 64);
    v36 = *(id *)(a1 + 72);
    v37 = v39;
    objc_msgSend(v19, "perform:", v30);
    if ((v9 & 1) != 0)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "replyQueue"));
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_10005885C;
      v25[3] = &unk_1002BE9C0;
      v25[4] = *(_QWORD *)(a1 + 56);
      v25[5] = v39;
      objc_msgSend(v19, "notifyOnQueue:block:", v21, v25);

    }
    else
    {
      v22 = *(void **)(a1 + 40);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_100058720;
      v26[3] = &unk_1002BB4A0;
      v23 = v19;
      v24 = *(_QWORD *)(a1 + 56);
      v27 = v23;
      v28 = v24;
      v29 = *(id *)(a1 + 40);
      objc_msgSend(v22, "perform:", v26);

    }
    _Block_object_dispose(v39, 8);

  }
  v6[2](v6);

}

void sub_100058370(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100058388(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  int v17;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000584AC;
  v10[3] = &unk_1002BE970;
  v11 = *(id *)(a1 + 48);
  v12 = *(id *)(a1 + 56);
  v17 = *(_DWORD *)(a1 + 88);
  v13 = *(id *)(a1 + 64);
  v7 = *(id *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v15 = v3;
  v16 = v8;
  v14 = v7;
  v9 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-get-friends-who-played-game"), v6, v10);

}

void sub_1000584AC(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  void *v8;
  id v9;
  id v10;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  double v20;
  int v21;

  v9 = a2;
  v7 = a3;
  if (v9 && !v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v11 = _NSConcreteStackBlock;
    v12 = 3221225472;
    v13 = sub_1000585F4;
    v14 = &unk_1002BE948;
    v15 = *(id *)(a1 + 40);
    v20 = a4;
    v16 = *(id *)(a1 + 32);
    v21 = *(_DWORD *)(a1 + 80);
    v17 = *(id *)(a1 + 48);
    v18 = *(id *)(a1 + 56);
    v19 = v9;
    objc_msgSend(v8, "performBlockAndWait:", &v11);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = a4 > 0.0;
  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7, v9, v11, v12, v13, v14);
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_1000585F4(uint64_t a1)
{
  void *v2;
  GKCompatiblePlayerListCacheObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  GKCompatiblePlayerListCacheObject *v9;

  v9 = (GKCompatiblePlayerListCacheObject *)*(id *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 72)));
  if (!v9)
  {
    v3 = [GKCompatiblePlayerListCacheObject alloc];
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
    v9 = -[GKCacheObject initWithManagedObjectContext:](v3, "initWithManagedObjectContext:", v4);

    -[GKCompatiblePlayerListCacheObject setType:](v9, "setType:", *(unsigned int *)(a1 + 80));
    -[GKCompatiblePlayerListCacheObject setReference:](v9, "setReference:", *(_QWORD *)(a1 + 48));
    v5 = *(_QWORD *)(a1 + 56);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v5, v6));
    -[GKCompatiblePlayerListCacheObject setGame:](v9, "setGame:", v7);

  }
  -[GKCompatiblePlayerListCacheObject updateWithServerRepresentation:expirationDate:](v9, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 64), v2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[GKPlayerListCacheObject internalRepresentation](v9, "internalRepresentation"));
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v8);

}

void sub_100058720(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000587F8;
  v8[3] = &unk_1002BB568;
  v9 = a1[6];
  v10 = a1[4];
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v8);

}

uint64_t sub_1000587F8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "result"));
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v3);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10005885C(uint64_t a1)
{
  id v1;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    objc_msgSend(v1, "refreshContentsForDataType:userInfo:", 7, 0);

  }
}

void sub_1000588B0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_gkValuesForKeyPath:", CFSTR("player.playerID")));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileService, "serviceFromService:", *(_QWORD *)(a1 + 40)));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100058988;
  v5[3] = &unk_1002BCA30;
  v6 = *(id *)(a1 + 32);
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v4, "getProfilesForPlayerIDs:handler:", v3, v5);

}

void sub_100058988(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "_gkMapDictionaryWithKeyPath:", CFSTR("playerID")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100058A80;
  v14[3] = &unk_1002BEA38;
  v15 = v6;
  v8 = v6;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_gkMapWithBlock:", v14));

  v10 = *(_QWORD *)(a1 + 40);
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  v12 = (void *)v11;
  if (v11)
    v13 = (id)v11;
  else
    v13 = v5;
  (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v9, v13);

}

id sub_100058A80(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "player"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerID"));

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));
    objc_msgSend(v3, "setPlayer:", v6);

  }
  return v3;
}

void sub_100058C14(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  BOOL v10;
  void *v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  _QWORD block[4];
  id v17;
  id v18;
  id v19;
  BOOL v20;
  char v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("player == %@ && game == %@"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKRecentPlayerListCacheObject, "firstObjectMatchingPredicate:context:", v2, *(_QWORD *)(a1 + 48)));

  v4 = objc_msgSend(v3, "isValid");
  v5 = v4;
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "internalRepresentation"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "seed"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expirationDate"));
    objc_msgSend(v8, "timeIntervalSinceNow");
    v10 = v9 > 0.0;

  }
  else
  {
    v10 = 0;
    v6 = 0;
    v7 = 0;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "replyQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100058DA0;
  block[3] = &unk_1002BE2F8;
  v13 = *(id *)(a1 + 64);
  v18 = v7;
  v19 = v13;
  v17 = v6;
  v20 = v10;
  v21 = v5;
  v14 = v7;
  v15 = v6;
  dispatch_async(v12, block);

}

uint64_t sub_100058DA0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
}

void sub_100058EAC(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  BOOL v10;
  void *v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  _QWORD block[4];
  id v17;
  id v18;
  id v19;
  BOOL v20;
  char v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("player == %@ && otherPlayer == %@"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKRecentGameListCacheObject, "firstObjectMatchingPredicate:context:", v2, *(_QWORD *)(a1 + 48)));

  v4 = objc_msgSend(v3, "isValid");
  v5 = v4;
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "internalRepresentation"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "seed"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expirationDate"));
    objc_msgSend(v8, "timeIntervalSinceNow");
    v10 = v9 > 0.0;

  }
  else
  {
    v10 = 0;
    v6 = 0;
    v7 = 0;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "replyQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100059038;
  block[3] = &unk_1002BE2F8;
  v13 = *(id *)(a1 + 64);
  v18 = v7;
  v19 = v13;
  v17 = v6;
  v20 = v10;
  v21 = v5;
  v14 = v7;
  v15 = v6;
  dispatch_async(v12, block);

}

uint64_t sub_100059038(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
}

void sub_1000592D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1000592F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];

  v5 = a2;
  v6 = a3;
  v28[0] = CFSTR("count");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 80)));
  v29[0] = v7;
  v28[1] = CFSTR("since-time");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_gkServerTimestamp"));
  v29[1] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 2));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v9));

  v11 = *(void **)(a1 + 40);
  if (v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "gameDescriptor"));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v12, CFSTR("game"));

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10005952C;
  v19[3] = &unk_1002BEAB0;
  v27 = *(_QWORD *)(a1 + 72);
  v20 = *(id *)(a1 + 56);
  v21 = v5;
  v22 = *(id *)(a1 + 64);
  v23 = *(id *)(a1 + 40);
  v15 = *(id *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 48);
  v24 = v15;
  v25 = v16;
  v26 = v6;
  v17 = v6;
  v18 = v5;
  objc_msgSend(v13, "issueRequest:bagKey:clientProxy:handler:", v10, CFSTR("gk-get-recently-matched"), v14, v19);

}

void sub_10005952C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  double v22;

  v7 = a2;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = a4;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v7 && !a3)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100059654;
    v14[3] = &unk_1002BEA88;
    v11 = *(void **)(a1 + 32);
    v15 = *(id *)(a1 + 40);
    v22 = a4;
    v16 = *(id *)(a1 + 48);
    v17 = *(id *)(a1 + 56);
    v18 = *(id *)(a1 + 64);
    v19 = v7;
    v12 = *(id *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 72);
    v20 = v12;
    v21 = v13;
    objc_msgSend(v11, "perform:", v14);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, v9, v10);

}

void sub_100059654(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005975C;
  v8[3] = &unk_1002BEA60;
  v17 = *(_QWORD *)(a1 + 88);
  v4 = *(void **)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 32);
  v12 = *(id *)(a1 + 56);
  v13 = *(id *)(a1 + 64);
  v5 = *(id *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v14 = v5;
  v15 = v6;
  v16 = v3;
  v7 = v3;
  objc_msgSend(v4, "performBlock:", v8);

}

void sub_10005975C(uint64_t a1)
{
  void *v2;
  void *v3;
  GKRecentPlayerListCacheObject *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *i;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id obj;
  _QWORD v29[4];
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[4];
  id v39;
  id v40;
  id v41;
  _QWORD v42[5];
  id v43;
  _BYTE v44[128];
  void *v45;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 96)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("player == %@ && game == %@"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v4 = (GKRecentPlayerListCacheObject *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKRecentPlayerListCacheObject, "firstObjectMatchingPredicate:context:", v3, *(_QWORD *)(a1 + 48)));

  if (!v4)
  {
    v4 = -[GKCacheObject initWithManagedObjectContext:]([GKRecentPlayerListCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 48));
    -[GKRecentPlayerListCacheObject setGame:](v4, "setGame:", *(_QWORD *)(a1 + 40));
    -[GKRecentPlayerListCacheObject setPlayer:](v4, "setPlayer:", *(_QWORD *)(a1 + 32));
  }
  -[GKRecentPlayerListCacheObject setSinceDate:](v4, "setSinceDate:", *(_QWORD *)(a1 + 56));
  -[GKRecentPlayerListCacheObject updateWithServerRepresentation:expirationDate:](v4, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 64), v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[GKRecentPlayerListCacheObject entries](v4, "entries"));
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[GKRecentPlayerListCacheObject entries](v4, "entries"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_gkValuesForKeyPath:", CFSTR("playerID")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "arrayByAddingObject:", v9));

    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100059B34;
    v42[3] = &unk_1002BB590;
    v11 = *(void **)(a1 + 72);
    v42[4] = *(_QWORD *)(a1 + 80);
    v12 = v10;
    v43 = v12;
    objc_msgSend(v11, "perform:", v42);
    if (*(_QWORD *)(a1 + 40))
    {
      v27 = v2;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKGameServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 80)));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bundleID"));
      v45 = v14;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v45, 1));

      v16 = *(void **)(a1 + 72);
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_100059CC8;
      v38[3] = &unk_1002BB4A0;
      v17 = v13;
      v39 = v17;
      v18 = v15;
      v40 = v18;
      v41 = *(id *)(a1 + 48);
      objc_msgSend(v16, "perform:", v38);
      v26 = v12;
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfilesWithPlayerIDs:inManagedObjectContext:", v12, *(_QWORD *)(a1 + 48)));
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      obj = v19;
      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
      if (v20)
      {
        v21 = v20;
        v22 = *(_QWORD *)v35;
        do
        {
          for (i = 0; i != v21; i = (char *)i + 1)
          {
            if (*(_QWORD *)v35 != v22)
              objc_enumerationMutation(obj);
            v24 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
            v25 = *(void **)(a1 + 72);
            v29[0] = _NSConcreteStackBlock;
            v29[1] = 3221225472;
            v29[2] = sub_100059D64;
            v29[3] = &unk_1002BC3A8;
            v30 = v17;
            v31 = v24;
            v32 = v18;
            v33 = *(id *)(a1 + 48);
            objc_msgSend(v25, "perform:", v29);

          }
          v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
        }
        while (v21);
      }

      v2 = v27;
      v12 = v26;
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();

}

void sub_100059B34(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileService, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  v5 = *(_QWORD *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100059BDC;
  v7[3] = &unk_1002BCA80;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "getProfilesForPlayerIDs:handler:", v5, v7);

}

void sub_100059BDC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  int v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v8 = v6;
  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v6, v7);
  v10 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v11 = 138412290;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "recent Player profiles:%@", (uint8_t *)&v11, 0xCu);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100059CC8(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100059D58;
  v8[3] = &unk_1002BDC48;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadGameMetadataForBundleIDs:context:handler:", v5, v6, v8);

}

uint64_t sub_100059D58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100059D64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "internalRepresentation"));
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100059E14;
  v9[3] = &unk_1002BDC48;
  v10 = v3;
  v8 = v3;
  objc_msgSend(v4, "loadGameStatsForPlayer:bundleIdentifiers:context:handler:", v5, v7, v6, v9);

}

uint64_t sub_100059E14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100059E20(uint64_t a1)
{
  uint64_t v1;
  double v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);

}

void sub_10005A174(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10005A194(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[3];
  _QWORD v7[3];

  v6[0] = CFSTR("count");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 56)));
  v7[0] = v2;
  v6[1] = CFSTR("since-time");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_gkServerTimestamp"));
  v7[1] = v3;
  v6[2] = CFSTR("other-player-id");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
  v7[2] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v7, v6, 3));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, CFSTR("request"));

}

void sub_10005A2A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("request")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10005A3F4;
  v10[3] = &unk_1002BEAB0;
  v18 = *(_QWORD *)(a1 + 80);
  v11 = *(id *)(a1 + 32);
  v12 = *(id *)(a1 + 48);
  v13 = *(id *)(a1 + 56);
  v14 = *(id *)(a1 + 64);
  v7 = *(id *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 40);
  v15 = v7;
  v16 = v8;
  v17 = v3;
  v9 = v3;
  objc_msgSend(v5, "issueRequest:bagKey:clientProxy:handler:", v4, CFSTR("gk-get-recently-matched"), v6, v10);

}

void sub_10005A3F4(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  double v22;

  v7 = a2;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = a4;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v7 && !a3)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10005A51C;
    v14[3] = &unk_1002BEA88;
    v11 = *(void **)(a1 + 32);
    v15 = *(id *)(a1 + 40);
    v22 = a4;
    v16 = *(id *)(a1 + 48);
    v17 = *(id *)(a1 + 56);
    v18 = *(id *)(a1 + 64);
    v19 = v7;
    v12 = *(id *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 72);
    v20 = v12;
    v21 = v13;
    objc_msgSend(v11, "perform:", v14);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v8, v9, v10);

}

void sub_10005A51C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005A624;
  v8[3] = &unk_1002BEA60;
  v17 = *(_QWORD *)(a1 + 88);
  v4 = *(void **)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 32);
  v12 = *(id *)(a1 + 56);
  v13 = *(id *)(a1 + 64);
  v5 = *(id *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v14 = v5;
  v15 = v6;
  v16 = v3;
  v7 = v3;
  objc_msgSend(v4, "performBlock:", v8);

}

void sub_10005A624(uint64_t a1)
{
  void *v2;
  void *v3;
  GKRecentGameListCacheObject *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  _QWORD v30[4];
  id v31;
  id v32;
  id v33;
  _QWORD v34[5];
  id v35;
  id v36;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 96)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("player == %@ && otherPlayer == %@"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v4 = (GKRecentGameListCacheObject *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKRecentGameListCacheObject, "firstObjectMatchingPredicate:context:", v3, *(_QWORD *)(a1 + 48)));

  if (!v4)
  {
    v4 = -[GKCacheObject initWithManagedObjectContext:]([GKRecentGameListCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 48));
    -[GKRecentGameListCacheObject setPlayer:](v4, "setPlayer:", *(_QWORD *)(a1 + 32));
    -[GKRecentGameListCacheObject setOtherPlayer:](v4, "setOtherPlayer:", *(_QWORD *)(a1 + 40));
  }
  -[GKRecentGameListCacheObject setSinceDate:](v4, "setSinceDate:", *(_QWORD *)(a1 + 56));
  -[GKRecentGameListCacheObject updateWithServerRepresentation:expirationDate:](v4, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 64), v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[GKRecentGameListCacheObject entries](v4, "entries"));
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[GKRecentGameListCacheObject entries](v4, "entries"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_gkValuesForKeyPath:", CFSTR("bundleID")));

    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10005A944;
    v34[3] = &unk_1002BB4A0;
    v9 = *(void **)(a1 + 72);
    v34[4] = *(_QWORD *)(a1 + 80);
    v35 = *(id *)(a1 + 32);
    v36 = *(id *)(a1 + 40);
    objc_msgSend(v9, "perform:", v34);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKGameServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 80)));
    v11 = *(void **)(a1 + 72);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10005AA78;
    v30[3] = &unk_1002BB4A0;
    v12 = v10;
    v31 = v12;
    v13 = v8;
    v32 = v13;
    v33 = *(id *)(a1 + 48);
    objc_msgSend(v11, "perform:", v30);
    v14 = *(void **)(a1 + 72);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10005AB14;
    v25[3] = &unk_1002BC3A8;
    v15 = v12;
    v26 = v15;
    v27 = *(id *)(a1 + 32);
    v16 = v13;
    v28 = v16;
    v29 = *(id *)(a1 + 48);
    objc_msgSend(v14, "perform:", v25);
    v17 = *(void **)(a1 + 72);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10005ABD0;
    v20[3] = &unk_1002BC3A8;
    v21 = v15;
    v22 = *(id *)(a1 + 32);
    v23 = v16;
    v24 = *(id *)(a1 + 48);
    v18 = v16;
    v19 = v15;
    objc_msgSend(v17, "perform:", v20);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();

}

void sub_10005A944(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileService, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID"));
  v11[0] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
  v11[1] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v11, 2));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10005AA6C;
  v9[3] = &unk_1002BCA80;
  v10 = v3;
  v8 = v3;
  objc_msgSend(v4, "getProfilesForPlayerIDs:handler:", v7, v9);

}

uint64_t sub_10005AA6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005AA78(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005AB08;
  v8[3] = &unk_1002BDC48;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadGameMetadataForBundleIDs:context:handler:", v5, v6, v8);

}

uint64_t sub_10005AB08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005AB14(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "internalRepresentation"));
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10005ABC4;
  v9[3] = &unk_1002BDC48;
  v10 = v3;
  v8 = v3;
  objc_msgSend(v4, "loadGameStatsForPlayer:bundleIdentifiers:context:handler:", v5, v7, v6, v9);

}

uint64_t sub_10005ABC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005ABD0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "internalRepresentation"));
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10005AC80;
  v9[3] = &unk_1002BDC48;
  v10 = v3;
  v8 = v3;
  objc_msgSend(v4, "loadGameStatsForPlayer:bundleIdentifiers:context:handler:", v5, v7, v6, v9);

}

uint64_t sub_10005AC80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005AC8C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);

}

void sub_10005AE94(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void (**v7)(_QWORD);
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005AF40;
  v8[3] = &unk_1002BB8A0;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v9 = v5;
  v10 = v6;
  v11 = *(id *)(a1 + 32);
  v7 = a2;
  objc_msgSend(v4, "performOnManagedObjectContext:", v8);
  v7[2](v7);

}

void sub_10005AF40(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v5));
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dictionaryForRequest"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v9, v5));

  }
  else
  {
    v10 = 0;
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10005B084;
  v17[3] = &unk_1002BEB50;
  v11 = *(void **)(a1 + 40);
  v12 = *(id *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 40);
  v18 = v12;
  v19 = v13;
  v20 = v7;
  v21 = v10;
  v22 = v6;
  v14 = v6;
  v15 = v10;
  v16 = v7;
  objc_msgSend(v11, "fetchRecentPlayersWithPlayer:game:context:handler:", v16, v15, v5, v17);

}

void sub_10005B084(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  _QWORD v25[4];
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  _QWORD v32[5];
  id v33;
  id v34;
  id v35;
  uint8_t buf[4];
  id v37;

  v9 = a2;
  v10 = a3;
  v11 = v10;
  if (a4 && (a5 & 1) != 0)
  {
    if (!os_log_GKGeneral)
      v12 = (id)GKOSLoggers(v10);
    v13 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v37 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "GKFriendList:recent list of players:%@", buf, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("players"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, CFSTR("seed"));
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v10);
    v15 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v37 = v9;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "GKFriendList:list from cache is not valid/good going to server:%@", buf, 0xCu);
    }
    v16 = *(void **)(a1 + 32);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameStatService.m", 464, "-[GKGameStatService getRecentPlayersForGameDescriptor:handler:]_block_invoke"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "transactionGroupWithName:", v17));

    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10005B3A4;
    v32[3] = &unk_1002BC3A8;
    v19 = *(void **)(a1 + 48);
    v32[4] = *(_QWORD *)(a1 + 40);
    v33 = v19;
    v34 = *(id *)(a1 + 56);
    v20 = v18;
    v35 = v20;
    objc_msgSend(v20, "perform:", v32);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "replyQueue"));
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10005B494;
    v25[3] = &unk_1002BE880;
    v26 = *(id *)(a1 + 32);
    v27 = v20;
    v23 = *(void **)(a1 + 48);
    v28 = *(_QWORD *)(a1 + 40);
    v29 = v23;
    v30 = *(id *)(a1 + 56);
    v31 = *(id *)(a1 + 64);
    v24 = v20;
    objc_msgSend(v24, "notifyOnQueue:block:", v22, v25);

  }
}

void sub_10005B3A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10005B464;
  v9[3] = &unk_1002BDB30;
  v10 = *(id *)(a1 + 56);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "loadRecentPlayersWithPlayer:game:context:handler:", v5, v6, v7, v9);

}

uint64_t sub_10005B464(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005B494(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 64);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10005B5BC;
    v8[3] = &unk_1002BDB80;
    v9 = *(id *)(a1 + 32);
    v10 = *(id *)(a1 + 40);
    v11 = *(id *)(a1 + 72);
    objc_msgSend(v4, "fetchRecentPlayersWithPlayer:game:context:handler:", v5, v6, v7, v8);

  }
}

uint64_t sub_10005B5BC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("players"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("seed"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10005B644(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("players")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);

}

void sub_10005B858(int8x16_t *a1, void *a2)
{
  id v3;
  void (**v4)(_QWORD);
  int8x16_t v5;
  _QWORD v6[4];
  int8x16_t v7;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10005B8F4;
  v6[3] = &unk_1002BB850;
  v5 = a1[2];
  v3 = (id)v5.i64[0];
  v7 = vextq_s8(v5, v5, 8uLL);
  v4 = a2;
  objc_msgSend(v3, "performOnManagedObjectContext:", v6);
  v4[2](v4);

}

void sub_10005B8F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;

  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "playerID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v8, v6));

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10005BA28;
  v16[3] = &unk_1002BEB50;
  v10 = *(void **)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v17 = v11;
  v18 = v12;
  v19 = v7;
  v20 = v9;
  v21 = v5;
  v13 = v5;
  v14 = v9;
  v15 = v7;
  objc_msgSend(v10, "fetchRecentGamesBetweenPlayer:otherPlayer:context:handler:", v15, v14, v6, v16);

}

uint64_t sub_10005BA28(uint64_t a1, uint64_t a2, void *a3, int a4, char a5)
{
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  int8x16_t v19;
  _QWORD v20[4];
  id v21;
  int8x16_t v22;
  id v23;
  id v24;
  _QWORD v25[5];
  id v26;
  id v27;
  id v28;

  v9 = *(void **)(a1 + 32);
  v10 = a3;
  objc_msgSend(v9, "setObject:forKeyedSubscript:", a2, CFSTR("games"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, CFSTR("seed"));

  if (!a4 || (a5 & 1) == 0)
  {
    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameStatService.m", 517, "-[GKGameStatService getRecentGamesWithPlayer:handler:]_block_invoke_3"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "transactionGroupWithName:", v12));

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10005BC1C;
    v25[3] = &unk_1002BC3A8;
    v14 = *(void **)(a1 + 48);
    v25[4] = *(_QWORD *)(a1 + 40);
    v26 = v14;
    v27 = *(id *)(a1 + 56);
    v15 = v13;
    v28 = v15;
    objc_msgSend(v15, "perform:", v25);
    if ((a5 & 1) == 0)
    {
      v16 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10005BD0C;
      v20[3] = &unk_1002BC010;
      v21 = v15;
      v19 = *(int8x16_t *)(a1 + 32);
      v17 = (id)v19.i64[0];
      v22 = vextq_s8(v19, v19, 8uLL);
      v23 = *(id *)(a1 + 48);
      v24 = *(id *)(a1 + 56);
      objc_msgSend(v16, "perform:", v20);

    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_10005BC1C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10005BCDC;
  v9[3] = &unk_1002BDB30;
  v10 = *(id *)(a1 + 56);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "loadRecentGamesBetweenPlayer:otherPlayer:context:handler:", v5, v6, v7, v9);

}

uint64_t sub_10005BCDC(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005BD0C(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v3 = a2;
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10005BE10;
  v10[3] = &unk_1002BE880;
  v11 = a1[6];
  v7 = a1[4];
  v8 = a1[5];
  v12 = v7;
  v13 = v8;
  v14 = a1[7];
  v15 = a1[8];
  v16 = v3;
  v9 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v10);

}

void sub_10005BE10(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 64);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10005BF24;
    v8[3] = &unk_1002BDB58;
    v9 = *(id *)(a1 + 32);
    v10 = *(id *)(a1 + 72);
    objc_msgSend(v4, "fetchRecentGamesBetweenPlayer:otherPlayer:context:handler:", v5, v6, v7, v8);

  }
}

uint64_t sub_10005BF24(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("games"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("seed"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005BF8C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("games")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *, void *))(v2 + 16))(v2, v5, v3, v4);

}

uint64_t sub_10005C0B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005C180(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", a1[4], a1[5]));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "achievementDescriptionList"));
  if (objc_msgSend(v3, "isValid"))
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "internalRepresentation"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expirationDate"));
    objc_msgSend(v4, "timeIntervalSinceNow");

  }
  else
  {
    v5 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_10005C480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005C4A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10005C4B4(uint64_t a1)
{

}

void sub_10005C4BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (**v6)(_QWORD);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  double v27;
  __int128 v28;
  _QWORD v29[4];
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  __int128 v34;
  uint64_t v35;
  const __CFString *v36;
  void *v37;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v5, a2));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleID"));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "achievementDescriptionList"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "expirationDate"));
    objc_msgSend(v12, "timeIntervalSinceNow");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v13;

    if (v11 && !objc_msgSend(v11, "expired"))
    {
      objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", &off_1002DB598, CFSTR("skipCallbacks"));
      v26 = *(_QWORD *)(a1 + 56);
      v27 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
      (*(void (**)(uint64_t, id, double))(v26 + 16))(v26, v23, v27);
    }
    else
    {
      v36 = CFSTR("game");
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "gameDescriptor"));
      v37 = v14;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1));

      v16 = *(void **)(a1 + 40);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "replyQueue"));
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10005C78C;
      v29[3] = &unk_1002BEBF0;
      v28 = *(_OWORD *)(a1 + 56);
      v19 = (id)v28;
      v34 = v28;
      v20 = *(id *)(a1 + 40);
      v21 = *(_QWORD *)(a1 + 48);
      v30 = v20;
      v31 = v21;
      v22 = *(_QWORD *)(a1 + 72);
      v32 = v15;
      v35 = v22;
      v33 = *(id *)(a1 + 32);
      v23 = v15;
      objc_msgSend(v16, "performOnQueue:block:", v18, v29);

    }
    v6[2](v6);

  }
  else
  {
    v24 = *(_QWORD *)(a1 + 56);
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 15, 0));
    (*(void (**)(uint64_t, void *, double))(v24 + 16))(v24, v25, 0.0);

    v6[2](v6);
    v11 = v6;
  }

}

void sub_10005C78C(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  void *v5;
  id v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void (**v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v24, 1));
  v6 = objc_retainBlock(*(id *)(a1 + 64));
  v7 = objc_msgSend(v4, "doesCallbackListExistFor:parameters:callback:", CFSTR("gk-get-game-achievements"), v5, v6);

  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &off_1002DB598, CFSTR("skipCallbacks"));
    v3[2](v3);
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pushCredentialForEnvironment:", objc_msgSend(v9, "environment")));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v12 = *(_QWORD *)(a1 + 48);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10005C9B8;
    v17[3] = &unk_1002BEBC8;
    v14 = *(id *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 80);
    v18 = v14;
    v23 = v15;
    v19 = *(id *)(a1 + 56);
    v20 = v10;
    v21 = *(_QWORD *)(a1 + 40);
    v22 = v3;
    v16 = v10;
    objc_msgSend(v11, "issueRequestForPlayer:bagKey:clientProxy:locale:playerCredential:handler:", v12, CFSTR("gk-get-game-achievements"), v13, 0, v16, v17);

  }
}

void sub_10005C9B8(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  double v16;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = a4;
  if (v7 && !a3)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10005CAA4;
    v11[3] = &unk_1002BEBA0;
    v8 = *(void **)(a1 + 32);
    v12 = *(id *)(a1 + 40);
    v16 = a4;
    v13 = v7;
    v9 = *(id *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v14 = v9;
    v15 = v10;
    objc_msgSend(v8, "performOnManagedObjectContext:", v11);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_10005CAA4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  GKAchievementDescriptionListCacheObject *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  GKAchievementThatAFriendHasListCacheObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  GKAchievementDescriptionListCacheObject *v24;
  id v25;
  id obj;
  void *v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  v5 = a2;
  v25 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", *(_QWORD *)(a1 + 32), v5));
  v7 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 64)));
  v28 = v6;
  v8 = (GKAchievementDescriptionListCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "achievementDescriptionList"));
  if (!v8)
  {
    v8 = -[GKCacheObject initWithManagedObjectContext:]([GKAchievementDescriptionListCacheObject alloc], "initWithManagedObjectContext:", v5);
    -[GKAchievementDescriptionListCacheObject setGame:](v8, "setGame:", v28);
  }
  v27 = (void *)v7;
  -[GKAchievementDescriptionListCacheObject updateWithServerRepresentation:expirationDate:](v8, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 40), v7);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v24 = v8;
  obj = (id)objc_claimAutoreleasedReturnValue(-[GKAchievementDescriptionListCacheObject entries](v8, "entries"));
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v32;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v32 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v12);
        v14 = -[GKCacheObject initWithManagedObjectContext:]([GKAchievementThatAFriendHasListCacheObject alloc], "initWithManagedObjectContext:", v5);
        -[GKAchievementThatAFriendHasListCacheObject setGame:](v14, "setGame:", v28);
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v5));
        -[GKAchievementThatAFriendHasListCacheObject setPlayer:](v14, "setPlayer:", v15);

        -[GKAchievementThatAFriendHasListCacheObject setAchievementDescription:](v14, "setAchievementDescription:", v13);
        v16 = *(_QWORD *)(a1 + 40);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerInternal"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "playerID"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
        -[GKAchievementThatAFriendHasListCacheObject updateWithServerRepresentation:expirationDate:playerId:achievementId:](v14, "updateWithServerRepresentation:expirationDate:playerId:achievementId:", v16, v27, v18, v19);

        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    }
    while (v10);
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileService, "serviceFromService:", *(_QWORD *)(a1 + 56)));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameStatService friendsRequiringHydration:](GKGameStatService, "friendsRequiringHydration:", *(_QWORD *)(a1 + 40)));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "allObjects"));
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10005CDA0;
  v29[3] = &unk_1002BCA80;
  v30 = v25;
  v23 = v25;
  objc_msgSend(v20, "getProfilesForPlayerIDs:handler:", v22, v29);

}

uint64_t sub_10005CDA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005CDAC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  double v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("skipCallbacks")));
  if (v2)
  {

  }
  else if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "retrieveAndClearCallbacks:parameters:", CFSTR("gk-get-game-achievements"), v4));

    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v6 = v5;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v15;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v15 != v9)
            objc_enumerationMutation(v6);
          v11 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v10);
          v12 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error", (_QWORD)v14));
          (*(void (**)(uint64_t, void *, double))(v11 + 16))(v11, v13, v12);

          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v8);
    }

  }
}

void sub_10005DA80(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10005DB70;
  v14[3] = &unk_1002BECB8;
  v9 = *(id *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  v15 = v9;
  v16 = v10;
  v17 = v11;
  v18 = v5;
  v19 = *(id *)(a1 + 56);
  v20 = v6;
  v12 = v6;
  v13 = v5;
  objc_msgSend(v7, "fetchAchievementDescriptionsForGameDescriptor:context:handler:", v8, v13, v14);

}

void sub_10005DB70(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  _QWORD v29[5];
  id v30;
  id v31;
  id v32;
  _QWORD *v33;
  _QWORD v34[3];
  char v35;

  v9 = a2;
  v10 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("results"));
  if (!a4 || (a5 & 1) == 0)
  {
    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameStatService.m", 809, "-[GKGameStatService getAchievementDescriptionsForGameDescriptor:handler:]_block_invoke_2"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "transactionGroupWithName:", v12));

    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x2020000000;
    v35 = 0;
    v29[2] = sub_10005DDD8;
    v29[3] = &unk_1002BBE70;
    v14 = *(void **)(a1 + 48);
    v29[4] = *(_QWORD *)(a1 + 40);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v30 = v14;
    v31 = *(id *)(a1 + 56);
    v33 = v34;
    v15 = v13;
    v32 = v15;
    objc_msgSend(v15, "perform:", v29);
    if ((a5 & 1) != 0)
    {
      v16 = *(_QWORD *)(a1 + 64);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_10005E0EC;
      v21[3] = &unk_1002BE9C0;
      v21[4] = *(_QWORD *)(a1 + 40);
      v21[5] = v34;
      objc_msgSend(v15, "notifyOnQueue:block:", v16, v21);
    }
    else
    {
      v17 = *(void **)(a1 + 32);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_10005DEEC;
      v22[3] = &unk_1002BEC90;
      v23 = v15;
      v24 = *(id *)(a1 + 64);
      v18 = *(id *)(a1 + 32);
      v19 = *(_QWORD *)(a1 + 40);
      v20 = *(void **)(a1 + 48);
      v25 = v18;
      v26 = v19;
      v27 = v20;
      v28 = *(id *)(a1 + 56);
      objc_msgSend(v17, "perform:", v22);

    }
    _Block_object_dispose(v34, 8);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_10005DDC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10005DDD8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005DE88;
  v8[3] = &unk_1002BEC68;
  v11 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadAchievementDescriptionsForGameDescriptor:context:handler:", v5, v6, v8);

}

void sub_10005DE88(_QWORD *a1, void *a2, double a3)
{
  BOOL v5;
  void *v6;
  id v7;

  v5 = a3 > 0.0 && a2 == 0;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v5;
  v6 = (void *)a1[4];
  v7 = a2;
  objc_msgSend(v6, "setError:", v7);
  (*(void (**)(void))(a1[5] + 16))();

}

void sub_10005DEEC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10005DFC4;
  v10[3] = &unk_1002BE880;
  v11 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(void **)(a1 + 64);
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = *(id *)(a1 + 72);
  v16 = v3;
  v9 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v5, v10);

}

void sub_10005DFC4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 64);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10005E0B4;
    v7[3] = &unk_1002BDB58;
    v8 = *(id *)(a1 + 32);
    v9 = *(id *)(a1 + 72);
    objc_msgSend(v4, "fetchAchievementDescriptionsForGameDescriptor:context:handler:", v5, v6, v7);

  }
}

uint64_t sub_10005E0B4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, CFSTR("results"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005E0EC(uint64_t a1)
{
  id v1;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    objc_msgSend(v1, "refreshContentsForDataType:userInfo:", 8, 0);

  }
}

void sub_10005E140(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("results")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10005E3C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10005E3DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;

  v5 = a2;
  v6 = a3;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10005E4D8;
  v14[3] = &unk_1002BED70;
  v15 = v5;
  v7 = *(void **)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v16 = v8;
  v17 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 32);
  v18 = v9;
  v19 = v11;
  v20 = v6;
  v21 = v10;
  v12 = v6;
  v13 = v5;
  objc_msgSend(v7, "loadAchievementDescriptionsForGameDescriptor:context:handler:", v8, v13, v14);

}

void sub_10005E4D8(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10005E598;
  v9[3] = &unk_1002BED48;
  v2 = *(void **)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  v11 = *(id *)(a1 + 32);
  v12 = *(id *)(a1 + 48);
  v3 = *(id *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 64);
  v13 = v3;
  v14 = v5;
  v15 = v4;
  objc_msgSend(v2, "performBlockAndWait:", v9);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), v6, v7, v8);

}

void sub_10005E598(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  void *v6;
  id v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id obj;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  _QWORD v32[4];
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v3 = objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", *(_QWORD *)(a1 + 40)));
  v29 = (void *)v3;
  if (objc_msgSend(*(id *)(a1 + 48), "count"))
    v4 = 0;
  else
    v4 = v3 == 0;
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", 0, CFSTR("results"));
    objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", 0, CFSTR("missingPlayers"));
  }
  else
  {
    if (objc_msgSend(*(id *)(a1 + 48), "count"))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfilesWithPlayers:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfilesWithPlayers:inManagedObjectContext:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40)));
    }
    else
    {
      v39 = v3;
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v39, 1));
    }
    v6 = v5;
    v7 = objc_msgSend(v5, "count");
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", v7));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v7));
    objc_msgSend(*(id *)(a1 + 40), "refreshObject:mergeChanges:", v2, 1);
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    obj = v6;
    v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    if (v30)
    {
      v27 = *(_QWORD *)v35;
      do
      {
        for (i = 0; i != v30; i = (char *)i + 1)
        {
          if (*(_QWORD *)v35 != v27)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
          objc_msgSend(*(id *)(a1 + 40), "refreshObject:mergeChanges:", v9, 1);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "achievementLists"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](NSMutableSet, "setWithSet:", v10));

          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "achievementLists"));
          objc_msgSend(v11, "intersectSet:", v12);

          v31 = v11;
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "anyObject"));
          v14 = v13;
          if (!v13 || objc_msgSend(v13, "expired"))
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "internalRepresentation"));
            objc_msgSend(v26, "addObject:", v15);

          }
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "internalRepresentation"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "_gkMapWithBlock:", &stru_1002BECF8));
          v18 = *(void **)(a1 + 64);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "playerID"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bundleID"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "getFriendsWhoHaveTheseAchievements:playerID:gameBundleID:context:", v17, v19, v20, *(_QWORD *)(a1 + 40)));

          v32[0] = _NSConcreteStackBlock;
          v32[1] = 3221225472;
          v32[2] = sub_10005E9AC;
          v32[3] = &unk_1002BED20;
          v33 = v16;
          v22 = v16;
          objc_msgSend(v21, "enumerateObjectsUsingBlock:", v32);
          if (v22)
            v23 = v22;
          else
            v23 = &__NSArray0__struct;
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "playerID"));
          objc_msgSend(v28, "setObject:forKeyedSubscript:", v23, v24);

        }
        v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      }
      while (v30);
    }

    objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v26, CFSTR("missingPlayers"));
    objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v28, CFSTR("results"));

  }
}

id sub_10005E9A4(id a1, GKAchievementInternal *a2, unint64_t a3)
{
  return -[GKAchievementInternal identifier](a2, "identifier", a3);
}

void sub_10005E9AC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  id v6;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", a3));
  objc_msgSend(v6, "setFriendsWhoHaveThis:", v5);

}

void sub_10005EA08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("results")));
  v5 = (id)v3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v2 + 16))(v2, v3, 1, 0);
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("missingPlayers")));
    (*(void (**)(uint64_t, id, _QWORD, void *))(v2 + 16))(v2, v5, 0, v4);

  }
}

void sub_10005ECB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10005ECD0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void (**v36)(_QWORD);
  void *v37;
  uint64_t v38;
  _QWORD v39[4];
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t buf[4];
  void *v52;
  __int16 v53;
  uint64_t v54;
  _QWORD v55[3];
  _BYTE v56[128];

  v5 = a2;
  v36 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryForRequest"));
  v37 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v6, v5));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleID"));
  v35 = v7;
  v33 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "gameDescriptor"));
  v38 = a1;
  v9 = *(id *)(a1 + 40);
  if (!v9 || (v9 = objc_msgSend(v9, "count")) == 0)
  {
    v10 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v11 = (id)GKOSLoggers(v9);
      v10 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      sub_100071EF0();
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set", v33));
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v13 = *(id *)(a1 + 40);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v48;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(_QWORD *)v48 != v16)
          objc_enumerationMutation(v13);
        v18 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i);
        v19 = objc_msgSend(v18, "length");
        if (v19 && (v19 = objc_msgSend(v8, "length")) != 0)
        {
          v55[0] = CFSTR("GKPlayerAchievements");
          v55[1] = v8;
          v55[2] = v18;
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v55, 3));
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKResourceIdentifier resourceIdentifierForKeys:](GKResourceIdentifier, "resourceIdentifierForKeys:", v20));
          objc_msgSend(v12, "addObject:", v21);

        }
        else
        {
          v22 = os_log_GKGeneral;
          if (!os_log_GKGeneral)
          {
            v23 = (id)GKOSLoggers(v19);
            v22 = os_log_GKGeneral;
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
          {
            v24 = *(_QWORD *)(v38 + 40);
            *(_DWORD *)buf = 138412546;
            v52 = v8;
            v53 = 2112;
            v54 = v24;
            _os_log_fault_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "================ GameKit - GKGameStatService requested a simulated crash.\nachievementsForPlayersAndGame:players:context:handler: got an invalid playerID from bundleID: %@, playerIDs: %@ ================", buf, 0x16u);
          }
        }
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
    }
    while (v15);
  }

  v25 = *(void **)(v38 + 48);
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v38 + 56), "clientProxy"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "replyQueue"));
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_10005F0A4;
  v39[3] = &unk_1002BEDE0;
  v40 = v12;
  v41 = *(id *)(v38 + 48);
  v28 = *(id *)(v38 + 64);
  v29 = *(_QWORD *)(v38 + 56);
  v42 = v34;
  v43 = v29;
  v44 = v35;
  v45 = v28;
  v46 = *(_QWORD *)(v38 + 72);
  v30 = v35;
  v31 = v34;
  v32 = v12;
  objc_msgSend(v25, "performOnQueue:block:", v27, v39);

  v36[2](v36);
}

void sub_10005F0A4(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_gkMapWithBlock:", &stru_1002BEDB8));
  if (objc_msgSend(v5, "count"))
  {
    v6 = *(void **)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10005F208;
    v12[3] = &unk_1002BEDE0;
    v13 = v6;
    v14 = v5;
    v18 = *(id *)(a1 + 72);
    v7 = *(id *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(void **)(a1 + 64);
    v15 = v7;
    v16 = v8;
    v10 = v9;
    v11 = *(_QWORD *)(a1 + 80);
    v17 = v10;
    v19 = v11;
    objc_msgSend(v13, "perform:", v12);

  }
  v3[2](v3);

}

id sub_10005F1C8(id a1, GKResourceIdentifier *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GKResourceIdentifier keys](a2, "keys", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 2));

  return v4;
}

void sub_10005F208(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  void (**v17)(_QWORD);
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("playerIDsToLoad"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 40);
  v6 = objc_retainBlock(*(id *)(a1 + 72));
  LODWORD(v5) = objc_msgSend(v4, "doesCallbackListExistFor:parameters:callback:", CFSTR("gk-get-player-achievements"), v5, v6);

  if ((_DWORD)v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &off_1002DB598, CFSTR("skipCallbacks"));
    v3[2](v3);
  }
  else
  {
    v19[0] = CFSTR("game");
    v19[1] = CFSTR("requested-player-ids");
    v7 = *(_QWORD *)(a1 + 40);
    v20[0] = *(_QWORD *)(a1 + 48);
    v20[1] = v7;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 2));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10005F3FC;
    v13[3] = &unk_1002BD178;
    v14 = *(id *)(a1 + 32);
    v15 = *(id *)(a1 + 40);
    v11 = *(id *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 80);
    v16 = v11;
    v18 = v12;
    v17 = v3;
    objc_msgSend(v9, "issueRequest:bagKey:clientProxy:handler:", v8, CFSTR("gk-get-player-achievements"), v10, v13);

  }
}

void sub_10005F3FC(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *, void *);
  void *v14;
  id v15;
  id v16;
  id v17;
  double v18;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (v7 && !v8)
  {
    v11 = _NSConcreteStackBlock;
    v12 = 3221225472;
    v13 = sub_10005F4F0;
    v14 = &unk_1002BCB70;
    v10 = *(void **)(a1 + 32);
    v15 = *(id *)(a1 + 40);
    v18 = a4;
    v16 = v7;
    v17 = *(id *)(a1 + 48);
    objc_msgSend(v10, "performOnManagedObjectContext:", &v11);

  }
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = a4;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v9, v11, v12, v13, v14);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10005F4F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  GKAchievementListCacheObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void (**v21)(_QWORD);
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  const __CFString *v30;
  void *v31;
  _BYTE v32[128];

  v5 = a2;
  v21 = a3;
  v24 = v5;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfilesWithPlayerIDs:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfilesWithPlayerIDs:inManagedObjectContext:", *(_QWORD *)(a1 + 32), v5));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "_gkMapDictionaryWithKeyPath:", CFSTR("playerID")));
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 56)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("results")));
  v22 = a1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "achievementLists"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_gkMapDictionaryWithKeyPath:", CFSTR("player.playerID")));

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v9 = v6;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", CFSTR("player-id")));
        if (v15)
        {
          v16 = (GKAchievementListCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v15));
          if (!v16)
          {
            v16 = -[GKCacheObject initWithManagedObjectContext:]([GKAchievementListCacheObject alloc], "initWithManagedObjectContext:", v24);
            -[GKAchievementListCacheObject setGame:](v16, "setGame:", *(_QWORD *)(v22 + 48));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v15));
            -[GKAchievementListCacheObject setPlayer:](v16, "setPlayer:", v17);

          }
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("achievements")));
          v30 = CFSTR("results");
          v31 = v18;
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
          -[GKAchievementListCacheObject updateWithServerRepresentation:expirationDate:](v16, "updateWithServerRepresentation:expirationDate:", v19, v25);

        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
    }
    while (v11);
  }

  v21[2](v21);
}

void sub_10005F7A8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  double v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("skipCallbacks")));

  if (!v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("playerIDsToLoad")));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "retrieveAndClearCallbacks:parameters:", CFSTR("gk-get-player-achievements"), v4));

    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v6 = v5;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v15;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v15 != v9)
            objc_enumerationMutation(v6);
          v11 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v10);
          v12 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error", (_QWORD)v14));
          (*(void (**)(uint64_t, void *, double))(v11 + 16))(v11, v13, v12);

          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v8);
    }

  }
}

id sub_10005F9D8(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return -[GKPlayerInternal playerID](a2, "playerID", a3);
}

void sub_10005FC08(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10005FCB8;
  v9[3] = &unk_1002BDB30;
  v10 = *(id *)(a1 + 64);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "loadAchievementsForGameDescriptor:players:context:handler:", v5, v6, v7, v9);

}

uint64_t sub_10005FCB8(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005FCE8(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;

  v2 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10005FDAC;
  v6[3] = &unk_1002BEC90;
  v7 = v2;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(void **)(a1 + 56);
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v11 = *(id *)(a1 + 64);
  v12 = *(id *)(a1 + 72);
  objc_msgSend(v7, "perform:", v6);

}

void sub_10005FDAC(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  void (**v12)(_QWORD);

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v5)
  {
    v3[2](v3);
  }
  else
  {
    v6 = *(void **)(a1 + 48);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "dictionaryForRequest"));
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 72);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10005FEB4;
    v10[3] = &unk_1002BEE70;
    v11 = *(id *)(a1 + 32);
    v12 = v3;
    objc_msgSend(v6, "fetchAchievementsForGameDescriptor:players:context:handler:", v7, v8, v9, v10);

  }
}

uint64_t sub_10005FEB4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100060174(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD v12[5];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10006026C;
  v12[3] = &unk_1002BEED8;
  v12[4] = v7;
  v9 = *(_QWORD *)(a1 + 48);
  v13 = *(id *)(a1 + 56);
  v14 = v5;
  v15 = *(id *)(a1 + 64);
  v16 = *(id *)(a1 + 48);
  v17 = v6;
  v10 = v6;
  v11 = v5;
  objc_msgSend(v7, "fetchAchievementsForGameDescriptor:players:context:handler:", v8, v9, v11, v12);

}

void sub_10006026C(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  void *v7;
  unsigned __int8 v8;
  id v9;
  id v10;
  _QWORD v11[4];
  unsigned __int8 v12;

  v9 = a2;
  if ((a3 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "primeCacheWithAchievementDescriptions:context:gameDescriptor:players:missingPlayers:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy", v9));
  v8 = objc_msgSend(v7, "isDevSigned");

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100060334;
  v11[3] = &unk_1002BEEB0;
  v12 = v8;
  objc_msgSend(v10, "enumerateKeysAndObjectsUsingBlock:", v11);
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v10);
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

id sub_100060334(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD v4[4];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100060390;
  v4[3] = &unk_1002BEE90;
  v5 = *(_BYTE *)(a1 + 32);
  return objc_msgSend(a3, "enumerateObjectsUsingBlock:", v4);
}

void sub_100060390(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  id v7;

  v3 = a2;
  v4 = v3;
  if (!*(_BYTE *)(a1 + 32))
  {
    v5 = objc_msgSend(v3, "releaseState");
    if (v5 != (id)1)
    {
      v6 = os_log_GKGeneral;
      if (!os_log_GKGeneral)
      {
        v7 = (id)GKOSLoggers(v5);
        v6 = os_log_GKGeneral;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        sub_100071F8C();
      objc_msgSend(v4, "setReleaseState:", 0);
    }
  }

}

void sub_100060420(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_1000606BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000606D4(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void (**v7)(_QWORD);
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000607A0;
  v8[3] = &unk_1002BEF00;
  v4 = *(void **)(a1 + 32);
  v8[4] = *(_QWORD *)(a1 + 40);
  v9 = *(id *)(a1 + 48);
  v5 = *(id *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v10 = v5;
  v12 = v6;
  v11 = *(id *)(a1 + 32);
  v7 = a2;
  objc_msgSend(v4, "performOnManagedObjectContext:", v8);
  v7[2](v7);

}

void sub_1000607A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *i;
  void *v29;
  void *v30;
  GKAchievementCacheObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  float v43;
  double v44;
  double v45;
  double v46;
  GKAchievementNetworkRequest *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  GKAchievementNetworkRequest *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void (**v59)(_QWORD);
  void *v60;
  id v61;
  void *v62;
  id obj;
  unsigned __int8 v64;
  uint64_t v65;
  id v66;
  void *v67;
  _QWORD v68[4];
  id v69;
  void (**v70)(_QWORD);
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[128];

  v5 = a2;
  v59 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleIdentifier"));
  v60 = v5;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v8, v5));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "achievementLists"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](NSMutableSet, "setWithSet:", v10));

  v58 = v6;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "achievementLists"));
  objc_msgSend(v11, "intersectSet:", v12);

  v56 = v11;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "anyObject"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "entries"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "_gkMapDictionaryWithKeyPath:", CFSTR("identifier")));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v15));

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "entries"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "_gkMapDictionaryWithKeyPath:", CFSTR("groupIdentifier")));
  objc_msgSend(v16, "addEntriesFromDictionary:", v18);

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "achievementDescriptionList"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "entries"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "_gkMapDictionaryWithKeyPath:", CFSTR("identifier")));
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v21));

  v57 = v9;
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "achievementDescriptionList"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "entries"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "_gkMapDictionaryWithKeyPath:", CFSTR("groupIdentifier")));
  objc_msgSend(v22, "addEntriesFromDictionary:", v25);

  v55 = v13;
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "entries"));
  v61 = objc_msgSend(v26, "mutableCopy");

  v27 = v22;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  obj = *(id *)(a1 + 40);
  v62 = v22;
  v66 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v75, 16);
  if (!v66)
    goto LABEL_19;
  v65 = *(_QWORD *)v72;
  do
  {
    for (i = 0; i != v66; i = (char *)i + 1)
    {
      if (*(_QWORD *)v72 != v65)
        objc_enumerationMutation(obj);
      v29 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * (_QWORD)i);
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "identifier"));
      v31 = (GKAchievementCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKey:", v30));
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKey:", v30));
      if (v32)
      {
        if (!v31)
        {
          v31 = -[GKCacheObject initWithManagedObjectContext:]([GKAchievementCacheObject alloc], "initWithManagedObjectContext:", v60);
          objc_msgSend(v61, "addObject:", v31);
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "identifier"));
          -[GKAchievementCacheObject setIdentifier:](v31, "setIdentifier:", v33);

          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "groupIdentifier"));
          -[GKAchievementCacheObject setGroupIdentifier:](v31, "setGroupIdentifier:", v34);

        }
        v67 = v29;
        v35 = (void *)objc_claimAutoreleasedReturnValue(-[GKAchievementCacheObject identifier](v31, "identifier"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "identifier"));
        if ((objc_msgSend(v35, "isEqualToString:", v36) & 1) != 0)
        {
          v37 = (void *)objc_claimAutoreleasedReturnValue(-[GKAchievementCacheObject groupIdentifier](v31, "groupIdentifier"));
          v38 = v16;
          v39 = a1;
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "groupIdentifier"));
          v64 = objc_msgSend(v37, "isEqualToString:", v40);

          a1 = v39;
          v16 = v38;
          v27 = v62;

          if ((v64 & 1) != 0)
            goto LABEL_14;
        }
        else
        {

        }
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "identifier"));
        -[GKAchievementCacheObject setIdentifier:](v31, "setIdentifier:", v41);

        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "groupIdentifier"));
        -[GKAchievementCacheObject setGroupIdentifier:](v31, "setGroupIdentifier:", v42);

LABEL_14:
        v29 = v67;
      }
      -[GKAchievementCacheObject percentComplete](v31, "percentComplete");
      v44 = v43;
      objc_msgSend(v29, "percentComplete");
      if (v45 > v44)
      {
        objc_msgSend(v29, "percentComplete");
        *(float *)&v46 = v46;
        -[GKAchievementCacheObject setPercentComplete:](v31, "setPercentComplete:", v46);
        -[GKAchievementCacheObject setLastReportedDate:](v31, "setLastReportedDate:", *(_QWORD *)(a1 + 48));
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      }

    }
    v66 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v71, v75, 16);
  }
  while (v66);
LABEL_19:

  objc_msgSend(v55, "setEntries:", v61);
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v47 = [GKAchievementNetworkRequest alloc];
    v48 = *(_QWORD *)(a1 + 40);
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "bundleIdentifier"));
    v51 = -[GKAchievementNetworkRequest initWithAchievements:bundleID:](v47, "initWithAchievements:bundleID:", v48, v50);

    v52 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v68[0] = _NSConcreteStackBlock;
    v68[1] = 3221225472;
    v68[2] = sub_100060DF8;
    v68[3] = &unk_1002BB6E8;
    v69 = *(id *)(a1 + 56);
    v54 = v59;
    v70 = v59;
    objc_msgSend(v52, "writeToNetwork:clientProxy:handler:", v51, v53, v68);

    v27 = v62;
  }
  else
  {
    v54 = v59;
    v59[2](v59);
  }

}

uint64_t sub_100060DF8(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100060E28(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    objc_msgSend(v2, "refreshContentsForDataType:userInfo:", 8, 0);

  }
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = *(id *)(a1 + 48);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKBiomeManager shared](GKBiomeManager, "shared", (_QWORD)v12));
        objc_msgSend(v11, "logEarnedWithAchievement:", v10);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

}

void sub_100061114(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void (**v7)(_QWORD);
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000611B0;
  v8[3] = &unk_1002BB850;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 40);
  v9 = v5;
  v10 = v6;
  v7 = a2;
  objc_msgSend(v5, "performOnManagedObjectContext:", v8);
  v7[2](v7);

}

void sub_1000611B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  int8x16_t v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  int8x16_t v22;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v5));
  if (v7)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000613E4;
    v21[3] = &unk_1002BB590;
    v18 = *(int8x16_t *)(a1 + 32);
    v22 = vextq_s8(v18, v18, 8uLL);
    objc_msgSend((id)v18.i64[0], "perform:", v21);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bundleIdentifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v9, v5));

    objc_msgSend(v7, "expire");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameRecordCacheObject recordForGame:playerProfile:](GKGameRecordCacheObject, "recordForGame:playerProfile:", v10, v7));
    objc_msgSend(v11, "expire");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game = %@ AND player = %@"), v10, v7));
    +[GKCacheObject deleteObjectsMatchingPredicate:context:](GKAchievementListCacheObject, "deleteObjectsMatchingPredicate:context:", v12, v5);

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
    v14 = *(void **)(a1 + 32);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "replyQueue"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000614E0;
    v19[3] = &unk_1002BBBD8;
    v20 = v13;
    v16 = v13;
    objc_msgSend(v14, "notifyOnQueue:block:", v15, v19);

  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSError gkUnauthenticatedError](NSError, "gkUnauthenticatedError"));
    objc_msgSend(*(id *)(a1 + 32), "setError:", v17);

  }
  v6[2](v6);

}

void sub_1000613E4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000614B4;
  v7[3] = &unk_1002BCB98;
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", 0, CFSTR("gk-reset-achievements"), v5, v7);

}

uint64_t sub_1000614B4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_1000614E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "refreshContentsForDataType:userInfo:", 8, 0);
}

void sub_1000614F0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_100061728(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void (**v7)(_QWORD);
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000617D4;
  v8[3] = &unk_1002BB4A0;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v9 = v5;
  v10 = v6;
  v11 = *(id *)(a1 + 32);
  v7 = a2;
  objc_msgSend(v4, "perform:", v8);
  v7[2](v7);

}

void sub_1000617D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100061890;
  v8[3] = &unk_1002BEF50;
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadScoresWithService:context:handler:", v5, v6, v8);

}

uint64_t sub_100061890(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("result"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000618F0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("result")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100061BE4(uint64_t a1, void *a2)
{
  id v3;
  GKScoreNetworkRequest *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  GKScoreNetworkRequest *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v3 = a2;
  v4 = [GKScoreNetworkRequest alloc];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIdentifier"));
  v8 = -[GKScoreNetworkRequest initWithScores:bundleID:eligibleChallenges:](v4, "initWithScores:bundleID:eligibleChallenges:", v5, v7, *(_QWORD *)(a1 + 48));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100061D04;
  v12[3] = &unk_1002BB6E8;
  v13 = *(id *)(a1 + 56);
  v14 = v3;
  v11 = v3;
  objc_msgSend(v9, "writeToNetwork:clientProxy:handler:", v8, v10, v12);

}

uint64_t sub_100061D04(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100061D34(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10006214C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSPredicate *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bundleIdentifier"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
  v5 = (void *)v4;
  if (v2)
    v6 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game.bundleID = %@ AND player.playerID = %@ AND set.identifier = %@"), v3, v4, *(_QWORD *)(a1 + 32));
  else
    v6 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game.bundleID = %@ AND player.playerID = %@ AND set.identifier = nil"), v3, v4, v17);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKLeaderboardListCacheObject, "firstObjectMatchingPredicate:context:", v7, *(_QWORD *)(a1 + 56)));
  v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "internalRepresentation"));
  if (*(_QWORD *)(a1 + 32))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dictionaryForRequest"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v9, *(_QWORD *)(a1 + 56)));

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "leaderboardSetWithIdentifier:", *(_QWORD *)(a1 + 32)));
    objc_msgSend(*(id *)(a1 + 64), "cleanUpLeaderboardTitles:set:context:", v18, v11, *(_QWORD *)(a1 + 56));

  }
  v12 = objc_msgSend(v8, "isValid");
  if ((_DWORD)v12)
  {
    v13 = objc_msgSend(v8, "expired") ^ 1;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "game"));
    if (objc_msgSend(v14, "numberOfCategories"))
    {
      v15 = objc_msgSend(v18, "count");

      if (v15)
        v13 = v13;
      else
        v13 = 0;
    }
    else
    {

    }
  }
  else
  {
    v13 = 0;
  }
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
    (*(void (**)(uint64_t, id, uint64_t, id))(v16 + 16))(v16, v18, v13, v12);

}

void sub_100062664(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10006267C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;

  v3 = a2;
  v4 = objc_alloc_init((Class)NSMutableDictionary);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryForRequest"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v5, CFSTR("game"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("player-id"));

  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, CFSTR("set-name"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v9 = *(_QWORD *)(a1 + 56);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "clientProxy"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100062824;
  v12[3] = &unk_1002BEF78;
  v19 = *(_QWORD *)(a1 + 88);
  v13 = *(id *)(a1 + 72);
  v14 = *(id *)(a1 + 80);
  v15 = *(id *)(a1 + 32);
  v16 = *(id *)(a1 + 40);
  v17 = *(id *)(a1 + 48);
  v18 = v3;
  v11 = v3;
  objc_msgSend(v8, "issueRequest:bagKey:clientProxy:handler:", v4, v9, v10, v12);

}

void sub_100062824(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  double v15;

  v8 = a2;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = a4;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v8 && !a3)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100062934;
    v9[3] = &unk_1002BE348;
    v15 = a4;
    v7 = *(void **)(a1 + 40);
    v10 = *(id *)(a1 + 48);
    v11 = *(id *)(a1 + 40);
    v12 = *(id *)(a1 + 56);
    v13 = *(id *)(a1 + 64);
    v14 = v8;
    objc_msgSend(v7, "performBlockAndWait:", v9);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_100062934(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  GKLeaderboardListCacheObject *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *j;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  GKLeaderboardCacheObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  GKLeaderboardListCacheObject *v33;
  void *v34;
  void *v35;
  id v36;
  id obj;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  _BYTE v48[128];

  v2 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 72)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryForRequest"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v3, *(_QWORD *)(a1 + 40)));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
  v6 = objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v5, *(_QWORD *)(a1 + 40)));

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "leaderboardSetWithIdentifier:", *(_QWORD *)(a1 + 56)));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "defaultCategory"));

  if (!v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectForKey:", CFSTR("default-category-name")));
    objc_msgSend(v4, "setDefaultCategory:", v9);

  }
  v10 = -[GKCacheObject initWithManagedObjectContext:]([GKLeaderboardListCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
  v35 = v4;
  -[GKLeaderboardListCacheObject setGame:](v10, "setGame:", v4);
  v34 = (void *)v6;
  -[GKLeaderboardListCacheObject setPlayer:](v10, "setPlayer:", v6);
  v31 = (void *)v7;
  -[GKLeaderboardListCacheObject setSet:](v10, "setSet:", v7);
  v32 = (void *)v2;
  v33 = v10;
  -[GKLeaderboardListCacheObject updateWithServerRepresentation:expirationDate:](v10, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 64), v2);
  v11 = objc_alloc_init((Class)NSMutableDictionary);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", CFSTR("results")));
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  obj = v12;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(_QWORD *)v44 != v15)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
        v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("global-alltime-info")));
        if (!v18)
          v18 = v17;
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("base-leaderboard-id")));
        if (!v19)
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("category-name")));
        objc_msgSend(v11, "setObject:forKeyedSubscript:", v17, v19);

      }
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
    }
    while (v14);
  }
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v36 = (id)objc_claimAutoreleasedReturnValue(-[GKLeaderboardListCacheObject entries](v10, "entries"));
  v20 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
  if (v20)
  {
    v21 = v20;
    v38 = *(_QWORD *)v40;
    do
    {
      for (j = 0; j != v21; j = (char *)j + 1)
      {
        if (*(_QWORD *)v40 != v38)
          objc_enumerationMutation(v36);
        v23 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)j);
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleIdentifier"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "baseLeaderboardID"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game.bundleID = %@ AND player.playerID = %@ AND baseLeaderboardID = %@ AND isPrimary == YES"), v24, v25, v26));

        v28 = (GKLeaderboardCacheObject *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKLeaderboardCacheObject, "firstObjectMatchingPredicate:context:", v27, *(_QWORD *)(a1 + 40)));
        if (!v28)
        {
          v28 = -[GKCacheObject initWithManagedObjectContext:]([GKLeaderboardCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
          -[GKLeaderboardCacheObject setGame:](v28, "setGame:", v35);
          -[GKLeaderboardCacheObject setPlayer:](v28, "setPlayer:", v34);
        }
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "baseLeaderboardID"));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v29));
        -[GKLeaderboardCacheObject updateWithServerRepresentation:](v28, "updateWithServerRepresentation:", v30);

        objc_msgSend(v23, "setLeaderboard:", v28);
      }
      v21 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
    }
    while (v21);
  }

}

void sub_100062DB0(uint64_t a1)
{
  uint64_t v1;
  double v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);

}

void sub_1000632B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1000632CC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "internalRepresentationWithPieces:", 0));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100063350(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 6, 0));
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_1000633A8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 17, 0));
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_100063400(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32) && (v4 = *(void **)(a1 + 40)) != 0)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100063524;
    v7[3] = &unk_1002BEC90;
    v5 = *(void **)(a1 + 48);
    v7[4] = *(_QWORD *)(a1 + 56);
    v8 = v4;
    v9 = *(id *)(a1 + 32);
    v10 = *(id *)(a1 + 64);
    v11 = *(id *)(a1 + 48);
    v12 = *(id *)(a1 + 72);
    objc_msgSend(v5, "perform:", v7);
    v3[2](v3);

  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 17, 0));
    objc_msgSend(*(id *)(a1 + 48), "setError:", v6);

  }
}

void sub_100063524(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "context"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100063644;
  v13[3] = &unk_1002BF068;
  v9 = *(id *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  v14 = v9;
  v15 = v10;
  v16 = v11;
  v17 = *(id *)(a1 + 48);
  v18 = *(id *)(a1 + 56);
  v19 = *(id *)(a1 + 72);
  v20 = v3;
  v12 = v3;
  objc_msgSend(v4, "fetchLeaderboardsForGameDescriptor:player:setIdentifier:context:handler:", v5, v6, v7, v8, v13);

}

void sub_100063644(uint64_t a1, void *a2, char a3, char a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _QWORD v19[6];
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  _QWORD v28[5];
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  _QWORD *v34;
  _QWORD v35[3];
  char v36;

  v7 = a2;
  if ((a3 & 1) == 0)
  {
    v35[0] = 0;
    v35[1] = v35;
    v35[2] = 0x2020000000;
    v36 = 0;
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameStatService.m", 1545, "-[GKGameStatService getLeaderboardsForGameDescriptor:player:setIdentifier:handler:]_block_invoke_4"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transactionGroupWithName:", v9));

    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_1000638E4;
    v28[3] = &unk_1002BEFF0;
    v11 = *(void **)(a1 + 48);
    v28[4] = *(_QWORD *)(a1 + 40);
    v29 = v11;
    v30 = *(id *)(a1 + 56);
    v31 = *(id *)(a1 + 64);
    v32 = *(id *)(a1 + 32);
    v12 = v10;
    v33 = v12;
    v34 = v35;
    objc_msgSend(v12, "perform:", v28);
    if ((a4 & 1) != 0)
    {
      v13 = *(_QWORD *)(a1 + 72);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_100063C90;
      v19[3] = &unk_1002BE9C0;
      v19[4] = *(_QWORD *)(a1 + 40);
      v19[5] = v35;
      objc_msgSend(v12, "notifyOnQueue:block:", v13, v19);
    }
    else
    {
      v14 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100063A38;
      v20[3] = &unk_1002BF040;
      v21 = v12;
      v22 = *(id *)(a1 + 72);
      v15 = *(id *)(a1 + 32);
      v16 = *(_QWORD *)(a1 + 40);
      v17 = *(void **)(a1 + 48);
      v23 = v15;
      v24 = v16;
      v25 = v17;
      v26 = *(id *)(a1 + 56);
      v27 = *(id *)(a1 + 64);
      objc_msgSend(v14, "perform:", v20);

    }
    _Block_object_dispose(v35, 8);
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "updateSigningStatusIfChanged:", v7));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v18, CFSTR("leaderboards"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
}

void sub_1000638CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000638E4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "context"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000639C4;
  v12[3] = &unk_1002BEFC8;
  v9 = *(id *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v14 = v3;
  v15 = v10;
  v13 = v9;
  v11 = v3;
  objc_msgSend(v4, "loadLeaderboardsForGameDescriptor:player:setIdentifier:context:bagKey:handler:", v5, v6, v7, v8, CFSTR("gk-get-leaderboard-categories"), v12);

}

void sub_1000639C4(_QWORD *a1, void *a2, double a3)
{
  void *v5;
  BOOL v7;
  id v8;

  v5 = (void *)a1[4];
  v8 = a2;
  objc_msgSend(v5, "setError:", v8);
  v7 = a3 > 0.0 && v8 == 0;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v7;
  (*(void (**)(void))(a1[5] + 16))();

}

void sub_100063A38(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100063B24;
  v10[3] = &unk_1002BC420;
  v11 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(void **)(a1 + 64);
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = *(id *)(a1 + 72);
  v16 = *(id *)(a1 + 80);
  v17 = v3;
  v9 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v5, v10);

}

void sub_100063B24(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 72);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100063C40;
    v11[3] = &unk_1002BF018;
    v9 = *(id *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    v12 = v9;
    v13 = v10;
    v14 = *(id *)(a1 + 80);
    objc_msgSend(v4, "fetchLeaderboardsForGameDescriptor:player:setIdentifier:context:handler:", v5, v6, v7, v8, v11);

  }
}

uint64_t sub_100063C40(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "updateSigningStatusIfChanged:", a2));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v3, CFSTR("leaderboards"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100063C90(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;
  void *v5;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v4 = CFSTR("scroll");
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
    v5 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));
    objc_msgSend(v1, "refreshContentsForDataType:userInfo:", 9, v3);

  }
}

void sub_100063D68(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("leaderboards")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100063F78(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  int8x16_t v12;
  _QWORD v13[4];
  id v14;
  int8x16_t v15;
  id v16;
  _QWORD v17[2];
  _QWORD v18[2];

  v3 = a2;
  v17[0] = CFSTR("timestamp");
  v4 = objc_claimAutoreleasedReturnValue(+[NSDate _gkServerTimestamp](NSDate, "_gkServerTimestamp"));
  v5 = (void *)v4;
  v17[1] = CFSTR("category");
  v6 = *(const __CFString **)(a1 + 32);
  if (!v6)
    v6 = &stru_1002CE2A8;
  v18[0] = v4;
  v18[1] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 2));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100064110;
  v13[3] = &unk_1002BD7E8;
  v14 = *(id *)(a1 + 48);
  v12 = *(int8x16_t *)(a1 + 32);
  v10 = (id)v12.i64[0];
  v15 = vextq_s8(v12, v12, 8uLL);
  v16 = v3;
  v11 = v3;
  objc_msgSend(v8, "issueRequest:bagKey:clientProxy:handler:", v7, CFSTR("gk-set-default-leaderboard"), v9, v13);

}

void sub_100064110(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  int8x16_t v7;
  id v8;
  _QWORD v9[4];
  int8x16_t v10;
  id v11;

  v4 = a3;
  v8 = v4;
  if (!v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000641E8;
    v9[3] = &unk_1002BC380;
    v7 = *(int8x16_t *)(a1 + 32);
    v6 = (id)v7.i64[0];
    v10 = vextq_s8(v7, v7, 8uLL);
    v11 = *(id *)(a1 + 48);
    objc_msgSend(v5, "performBlockAndWait:", v9);

    v4 = 0;
  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v4, *(_OWORD *)&v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000641E8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "gameDescriptor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v8 = (id)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v3, v4));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameRecordCacheObject recordForGame:playerProfile:](GKGameRecordCacheObject, "recordForGame:playerProfile:", v8, v6));
  objc_msgSend(v7, "setDefaultLeaderboardIdentifier:", *(_QWORD *)(a1 + 48));

}

void sub_1000642D4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10006443C(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v10 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastObject"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "defaultLeaderboardIdentifier"));
  v7 = v10 | v6;

  if (!v7)
    v10 = objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 16, 0));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "defaultLeaderboardIdentifier"));
  (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))(v8, v9, v10);

}

void sub_1000646EC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  char v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  int8x16_t v21;
  _QWORD v22[4];
  id v23;
  int8x16_t v24;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  char v30;
  const __CFString *v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v2, v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "leaderboardSetList"));
  v6 = objc_msgSend(v5, "isValid");
  v7 = v6;
  if (!v6
    || (v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "internalRepresentation")),
        objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v8, CFSTR("sets")),
        v8,
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "expirationDate")),
        objc_msgSend(v9, "timeIntervalSinceNow"),
        v11 = v10,
        v9,
        v11 <= 0.0))
  {
    v12 = *(void **)(a1 + 40);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameStatService.m", 1669, "-[GKGameStatService getLeaderboardSetsForGameDescriptor:handler:]_block_invoke"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "transactionGroupWithName:", v13));

    v15 = *(_QWORD *)(a1 + 32);
    v31 = CFSTR("game");
    v32 = v15;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10006496C;
    v25[3] = &unk_1002BD050;
    v16 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
    v17 = *(_QWORD *)(a1 + 48);
    v26 = v16;
    v27 = v17;
    v18 = v14;
    v28 = v18;
    v29 = v4;
    v30 = v7;
    objc_msgSend(v18, "perform:", v25);
    if ((v7 & 1) == 0)
    {
      v19 = *(void **)(a1 + 40);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100064C50;
      v22[3] = &unk_1002BB4A0;
      v23 = v18;
      v21 = *(int8x16_t *)(a1 + 40);
      v20 = (id)v21.i64[0];
      v24 = vextq_s8(v21, v21, 8uLL);
      objc_msgSend(v19, "perform:", v22);

    }
  }

}

void sub_10006496C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  char v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100064A60;
  v9[3] = &unk_1002BBAB0;
  v10 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  v13 = *(_BYTE *)(a1 + 64);
  v11 = v7;
  v12 = v3;
  v8 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-get-leaderboard-sets"), v6, v9);

}

void sub_100064A60(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  void *v8;
  id v9;
  id v10;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  id v15;
  id v16;
  id v17;
  double v18;
  char v19;

  v9 = a2;
  v7 = a3;
  if (v9 && !v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v11 = _NSConcreteStackBlock;
    v12 = 3221225472;
    v13 = sub_100064B6C;
    v14 = &unk_1002BF090;
    v15 = *(id *)(a1 + 40);
    v18 = a4;
    v16 = *(id *)(a1 + 32);
    v17 = v9;
    v19 = *(_BYTE *)(a1 + 56);
    objc_msgSend(v8, "performBlockAndWait:", &v11);

  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7, v9, v11, v12, v13, v14);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100064B6C(uint64_t a1)
{
  void *v2;
  GKLeaderboardSetListCacheObject *v3;
  void *v4;
  void *v5;
  GKLeaderboardSetListCacheObject *v6;

  v6 = (GKLeaderboardSetListCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "leaderboardSetList"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 56)));
  if (!v6)
  {
    v3 = [GKLeaderboardSetListCacheObject alloc];
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
    v6 = -[GKCacheObject initWithManagedObjectContext:](v3, "initWithManagedObjectContext:", v4);

    objc_msgSend(*(id *)(a1 + 32), "setLeaderboardSetList:", v6);
  }
  -[GKLeaderboardSetListCacheObject updateWithServerRepresentation:expirationDate:](v6, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 48), v2);
  if (!*(_BYTE *)(a1 + 64))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[GKListCacheObject internalRepresentation](v6, "internalRepresentation"));
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v5, CFSTR("sets"));

  }
}

void sub_100064C50(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100064D28;
  v8[3] = &unk_1002BB568;
  v9 = a1[6];
  v10 = a1[4];
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v8);

}

uint64_t sub_100064D28(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("sets")));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v2, CFSTR("sets"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v3);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100064DA4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("sets")));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);

  }
}

void sub_100065124(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[3];
  _QWORD v18[3];

  v3 = a2;
  v17[0] = CFSTR("game");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryForRequest"));
  v18[0] = v4;
  v17[1] = CFSTR("player-id");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID"));
  v17[2] = CFSTR("base-leaderboard-ids");
  v6 = *(_QWORD *)(a1 + 48);
  v18[1] = v5;
  v18[2] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 3));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000652E0;
  v11[3] = &unk_1002BF0B8;
  v12 = *(id *)(a1 + 64);
  v13 = *(id *)(a1 + 72);
  v14 = *(id *)(a1 + 32);
  v15 = *(id *)(a1 + 40);
  v16 = v3;
  v10 = v3;
  objc_msgSend(v8, "issueRequest:bagKey:clientProxy:handler:", v7, CFSTR("gk-get-leaderboards"), v9, v11);

}

void sub_1000652E0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v6 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v6 && !a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000653D4;
    v7[3] = &unk_1002BBE20;
    v5 = *(void **)(a1 + 40);
    v8 = *(id *)(a1 + 48);
    v9 = *(id *)(a1 + 40);
    v10 = *(id *)(a1 + 56);
    v11 = v6;
    v12 = *(id *)(a1 + 32);
    objc_msgSend(v5, "performBlockAndWait:", v7);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_1000653D4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  GKLeaderboardCacheObject *v15;
  void *v16;
  void *v17;
  void *v18;
  id obj;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryForRequest"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v2, *(_QWORD *)(a1 + 40)));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v3, *(_QWORD *)(a1 + 40)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("results")));
  v5 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v4, "count"));
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = v4;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("base-leaderboard-id")));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleIdentifier"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game.bundleID = %@ AND player.playerID = %@ AND baseLeaderboardID = %@ AND isPrimary == YES"), v12, v13, v11));

        v15 = (GKLeaderboardCacheObject *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKLeaderboardCacheObject, "firstObjectMatchingPredicate:context:", v14, *(_QWORD *)(a1 + 40)));
        if (!v15)
        {
          v15 = -[GKCacheObject initWithManagedObjectContext:]([GKLeaderboardCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
          -[GKLeaderboardCacheObject setGame:](v15, "setGame:", v18);
          -[GKLeaderboardCacheObject setPlayer:](v15, "setPlayer:", v17);
        }
        -[GKLeaderboardCacheObject updateWithServerRepresentation:](v15, "updateWithServerRepresentation:", v10);
        v16 = (void *)objc_claimAutoreleasedReturnValue(-[GKLeaderboardCacheObject internalRepresentation](v15, "internalRepresentation"));
        objc_msgSend(v5, "addObject:", v16);

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v7);
  }

  objc_msgSend(*(id *)(a1 + 64), "setResult:", v5);
}

void sub_100065684(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

id sub_100065798(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "baseLeaderboardID"));
  LODWORD(v4) = objc_msgSend(v4, "containsObject:", v5);

  if ((_DWORD)v4)
    v6 = v3;
  else
    v6 = 0;

  return v6;
}

void sub_100065894(uint64_t a1, void *a2)
{
  id v3;
  BOOL v4;
  id v5;

  v3 = a2;
  if (!*(_BYTE *)(a1 + 32))
  {
    v5 = v3;
    v4 = objc_msgSend(v3, "releaseState") == (id)1;
    v3 = v5;
    if (!v4)
    {
      objc_msgSend(v5, "setReleaseState:", 0);
      v3 = v5;
    }
  }

}

void sub_100065E0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_100065E24(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 17, 0));
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_100065E7C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "internalRepresentationWithPieces:", 0));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100065F00(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 6, 0));
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_100065F58(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 17, 0));
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_100065FB0(uint64_t a1, void *a2)
{
  void *v4;
  void (**v5)(_QWORD);
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000660B0;
  v6[3] = &unk_1002BF040;
  v4 = *(void **)(a1 + 32);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  v9 = *(id *)(a1 + 64);
  v10 = *(id *)(a1 + 32);
  v11 = *(id *)(a1 + 72);
  v12 = *(id *)(a1 + 80);
  v5 = a2;
  objc_msgSend(v4, "perform:", v6);
  v5[2](v5);

}

void sub_1000660B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "context"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000661E4;
  v13[3] = &unk_1002BF1F0;
  v9 = *(id *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  v14 = v9;
  v15 = v10;
  v16 = v11;
  v17 = *(id *)(a1 + 48);
  v18 = *(id *)(a1 + 56);
  v19 = *(id *)(a1 + 72);
  v20 = *(id *)(a1 + 80);
  v21 = v3;
  v12 = v3;
  objc_msgSend(v4, "fetchLeaderboardsForGameDescriptor:player:setIdentifier:context:handler:", v5, v6, v7, v8, v13);

}

void sub_1000661E4(uint64_t a1, void *a2, char a3, int a4)
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[6];
  _QWORD v33[4];
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  _QWORD v39[5];
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t *v45;
  _QWORD v46[4];
  id v47;
  _QWORD v48[6];
  _QWORD v49[4];
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  id v57;
  _QWORD v58[5];
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char v68;

  v7 = a2;
  if ((a3 & 1) != 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameStatService leaderboards:filteredWithIDs:](GKGameStatService, "leaderboards:filteredWithIDs:", v7, *(_QWORD *)(a1 + 72)));

    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_100066BD0;
    v46[3] = &unk_1002BF178;
    v9 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v8, "count")));
    v47 = v9;
    objc_msgSend(v8, "enumerateObjectsUsingBlock:", v46);
    if (objc_msgSend(v9, "count"))
    {
      v65 = 0;
      v66 = &v65;
      v67 = 0x2020000000;
      v68 = 0;
      v10 = *(void **)(a1 + 32);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameStatService.m", 1913, "-[GKGameStatService getLeaderboardsForGameDescriptor:player:leaderboardIDs:setIdentifier:handler:]_block_invoke_4"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "transactionGroupWithName:", v11));

      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_100066C5C;
      v39[3] = &unk_1002BEFF0;
      v39[4] = *(_QWORD *)(a1 + 40);
      v40 = v9;
      v41 = *(id *)(a1 + 48);
      v42 = *(id *)(a1 + 56);
      v43 = *(id *)(a1 + 32);
      v13 = v12;
      v44 = v13;
      v45 = &v65;
      objc_msgSend(v13, "perform:", v39);
      if (objc_msgSend(*(id *)(a1 + 72), "count"))
      {
        v14 = *(void **)(a1 + 32);
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472;
        v33[2] = sub_100066DBC;
        v33[3] = &unk_1002BC010;
        v34 = v13;
        v35 = *(id *)(a1 + 80);
        v36 = *(id *)(a1 + 32);
        v15 = v8;
        v16 = *(_QWORD *)(a1 + 40);
        v37 = v15;
        v38 = v16;
        objc_msgSend(v14, "perform:", v33);

      }
      else
      {
        v29 = *(_QWORD *)(a1 + 80);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_1000671A0;
        v32[3] = &unk_1002BE9C0;
        v32[4] = *(_QWORD *)(a1 + 40);
        v32[5] = &v65;
        objc_msgSend(v13, "notifyOnQueue:block:", v29, v32);
      }

      _Block_object_dispose(&v65, 8);
    }
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "updateSigningStatusIfChanged:", v8));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v30, CFSTR("leaderboards"));

    (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();
  }
  else
  {
    v65 = 0;
    v66 = &v65;
    v67 = 0x2020000000;
    v68 = 0;
    v17 = *(void **)(a1 + 32);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameStatService.m", 1856, "-[GKGameStatService getLeaderboardsForGameDescriptor:player:leaderboardIDs:setIdentifier:handler:]_block_invoke_4"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "transactionGroupWithName:", v18));

    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472;
    v58[2] = sub_10006677C;
    v58[3] = &unk_1002BEFF0;
    v20 = *(void **)(a1 + 48);
    v58[4] = *(_QWORD *)(a1 + 40);
    v59 = v20;
    v60 = *(id *)(a1 + 56);
    v61 = *(id *)(a1 + 64);
    v62 = *(id *)(a1 + 32);
    v21 = v19;
    v63 = v21;
    v64 = &v65;
    objc_msgSend(v21, "perform:", v58);
    if (a4 && !objc_msgSend(*(id *)(a1 + 72), "count"))
    {
      v31 = *(_QWORD *)(a1 + 80);
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472;
      v48[2] = sub_100066B78;
      v48[3] = &unk_1002BE9C0;
      v48[4] = *(_QWORD *)(a1 + 40);
      v48[5] = &v65;
      objc_msgSend(v21, "notifyOnQueue:block:", v31, v48);
    }
    else
    {
      v22 = *(void **)(a1 + 32);
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472;
      v49[2] = sub_1000668D0;
      v49[3] = &unk_1002BF150;
      v50 = v21;
      v51 = *(id *)(a1 + 80);
      v23 = *(id *)(a1 + 32);
      v24 = *(_QWORD *)(a1 + 40);
      v25 = *(void **)(a1 + 48);
      v52 = v23;
      v53 = v24;
      v54 = v25;
      v55 = *(id *)(a1 + 56);
      v56 = *(id *)(a1 + 64);
      v57 = *(id *)(a1 + 72);
      objc_msgSend(v22, "perform:", v49);

    }
    v26 = *(void **)(a1 + 40);
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameStatService leaderboards:filteredWithIDs:](GKGameStatService, "leaderboards:filteredWithIDs:", v7, *(_QWORD *)(a1 + 72)));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "updateSigningStatusIfChanged:", v27));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v28, CFSTR("leaderboards"));

    (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();
    _Block_object_dispose(&v65, 8);
    v8 = v7;
  }

}

void sub_100066760(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10006677C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "context"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10006685C;
  v12[3] = &unk_1002BEFC8;
  v9 = *(id *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v14 = v3;
  v15 = v10;
  v13 = v9;
  v11 = v3;
  objc_msgSend(v4, "loadLeaderboardsForGameDescriptor:player:setIdentifier:context:bagKey:handler:", v5, v6, v7, v8, CFSTR("gk-get-leaderboards"), v12);

}

void sub_10006685C(_QWORD *a1, void *a2, double a3)
{
  void *v5;
  BOOL v7;
  id v8;

  v5 = (void *)a1[4];
  v8 = a2;
  objc_msgSend(v5, "setError:", v8);
  v7 = a3 > 0.0 && v8 == 0;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v7;
  (*(void (**)(void))(a1[5] + 16))();

}

void sub_1000668D0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000669D0;
  v10[3] = &unk_1002BF128;
  v11 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(void **)(a1 + 64);
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = *(id *)(a1 + 72);
  v16 = *(id *)(a1 + 80);
  v17 = *(id *)(a1 + 88);
  v18 = v3;
  v9 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v5, v10);

}

void sub_1000669D0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();
  }
  else
  {
    v4 = *(void **)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 72);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100066B00;
    v11[3] = &unk_1002BF100;
    v9 = *(id *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    v12 = v9;
    v13 = v10;
    v14 = *(id *)(a1 + 80);
    v15 = *(id *)(a1 + 88);
    objc_msgSend(v4, "fetchLeaderboardsForGameDescriptor:player:setIdentifier:context:handler:", v5, v6, v7, v8, v11);

  }
}

uint64_t sub_100066B00(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameStatService leaderboards:filteredWithIDs:](GKGameStatService, "leaderboards:filteredWithIDs:", a2, *(_QWORD *)(a1 + 48)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "updateSigningStatusIfChanged:", v4));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, CFSTR("leaderboards"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_100066B78(uint64_t a1)
{
  id v1;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    objc_msgSend(v1, "refreshContentsForDataType:userInfo:", 9, &off_1002DC388);

  }
}

void sub_100066BD0(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  double v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  if (objc_msgSend(v8, "type") == (id)1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nextStartDate"));
    objc_msgSend(v3, "timeIntervalSinceNow");
    v5 = v4;

    if (v5 <= 0.0)
    {
      v6 = *(void **)(a1 + 32);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "baseLeaderboardID"));
      objc_msgSend(v6, "addObject:", v7);

    }
  }

}

void sub_100066C5C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "context"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100066D34;
  v12[3] = &unk_1002BF1A0;
  v9 = *(id *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v14 = v3;
  v15 = v10;
  v13 = v9;
  v11 = v3;
  objc_msgSend(v4, "updateLeaderboardsWithIDs:gameDescriptor:player:context:handler:", v5, v6, v7, v8, v12);

}

void sub_100066D34(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = *(void **)(a1 + 32);
  v7 = a3;
  v6 = a2;
  objc_msgSend(v5, "setError:", v7);
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v6);

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v7 == 0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100066DBC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100066E88;
  v9[3] = &unk_1002BB4C8;
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v12 = v6;
  v13 = v7;
  v14 = v3;
  v8 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v5, v9);

}

uint64_t sub_100066E88(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void **v18;
  uint64_t v19;
  void (*v20)(uint64_t, void *);
  void *v21;
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (!v3)
  {
    v4 = objc_alloc_init((Class)NSMutableDictionary);
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "result"));
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v25 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "baseLeaderboardID"));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, v11);

        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v7);
    }

    v12 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 48), "count"));
    v13 = *(void **)(a1 + 48);
    v18 = _NSConcreteStackBlock;
    v19 = 3221225472;
    v20 = sub_1000670B8;
    v21 = &unk_1002BF1C8;
    v22 = v12;
    v23 = v4;
    v14 = v4;
    v15 = v12;
    objc_msgSend(v13, "enumerateObjectsUsingBlock:", &v18);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "updateSigningStatusIfChanged:", v15, v18, v19, v20, v21));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v16, CFSTR("leaderboards"));

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_1000670B8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;

  v3 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "baseLeaderboardID"));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v6));
  v8 = (void *)v7;
  if (v7)
    v9 = (id)v7;
  else
    v9 = v5;
  objc_msgSend(v3, "addObject:", v9);

  v10 = *(void **)(a1 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "baseLeaderboardID"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));
  if (v12)
  {
    v14 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v15 = (id)GKOSLoggers(v13);
      v14 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      sub_1000720D8(v14, v12);
  }

}

void sub_1000671A0(uint64_t a1)
{
  id v1;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    objc_msgSend(v1, "refreshContentsForDataType:userInfo:", 9, &off_1002DC3B0);

  }
}

void sub_1000671F8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v2 = a1 + 32;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v4);
    v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100072198(v2, v6);
  }
  v7 = *(void **)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("leaderboards")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "bundleIdentifier"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100067340;
  v11[3] = &unk_1002BF218;
  v13 = *(id *)(a1 + 64);
  v12 = *(id *)(a1 + 32);
  objc_msgSend(v7, "mixinHasActiveChallengesWithLeaderboards:playerID:bundleID:completionHandler:", v8, v9, v10, v11);

}

void sub_100067340(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);

}

uint64_t sub_100067544(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100067554(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10007221C();
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_gkDistinctValuesForKeyPath:", CFSTR("leaderboardID")));
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v10 = a1[4];
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v23 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "baseLeaderboardID"));
          objc_msgSend(v15, "setHasActiveChallenges:", objc_msgSend(v9, "containsObject:", v16));

        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      }
      while (v12);
    }

  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "replyQueue"));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100067780;
  v19[3] = &unk_1002BB450;
  v21 = a1[6];
  v20 = a1[4];
  dispatch_async(v18, v19);

}

uint64_t sub_100067780(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100067850(_QWORD *a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("recordID = %@"), a1[4]));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKLeaderboardCacheObject, "firstObjectMatchingPredicate:context:", v3, a1[5]));
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_100067BE0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[5];
  _QWORD v20[5];

  v3 = a2;
  v19[0] = CFSTR("game");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryForRequest"));
  v20[0] = v4;
  v19[1] = CFSTR("player-id");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID"));
  v20[1] = v5;
  v19[2] = CFSTR("leaderboard-id");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
  v20[2] = v6;
  v20[3] = &off_1002DB598;
  v19[3] = CFSTR("count");
  v19[4] = CFSTR("player-played-in-only");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)));
  v20[4] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 5));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100067E08;
  v12[3] = &unk_1002BD2E8;
  v13 = *(id *)(a1 + 64);
  v14 = *(id *)(a1 + 72);
  v15 = *(id *)(a1 + 32);
  v16 = *(id *)(a1 + 40);
  v17 = *(id *)(a1 + 48);
  v18 = v3;
  v11 = v3;
  objc_msgSend(v9, "issueRequest:bagKey:clientProxy:handler:", v8, CFSTR("gk-get-previous-leaderboard-instances"), v10, v12);

}

void sub_100067E08(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v6 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v6 && !a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100067F10;
    v7[3] = &unk_1002BC358;
    v5 = *(void **)(a1 + 40);
    v8 = *(id *)(a1 + 48);
    v9 = *(id *)(a1 + 40);
    v10 = *(id *)(a1 + 56);
    v11 = v6;
    v12 = *(id *)(a1 + 64);
    v13 = *(id *)(a1 + 32);
    objc_msgSend(v5, "performBlockAndWait:", v7);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_100067F10(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  GKLeaderboardCacheObject *v10;
  void *v11;
  id v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryForRequest"));
  v12 = (id)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v2, *(_QWORD *)(a1 + 40)));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v3, *(_QWORD *)(a1 + 40)));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", CFSTR("results")));
  if (objc_msgSend(v5, "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 0));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "recordID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("recordID = %@"), v7));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKLeaderboardCacheObject, "firstObjectMatchingPredicate:context:", v8, *(_QWORD *)(a1 + 40)));
    v10 = -[GKCacheObject initWithManagedObjectContext:]([GKLeaderboardCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
    -[GKLeaderboardCacheObject setGame:](v10, "setGame:", v12);
    -[GKLeaderboardCacheObject setPlayer:](v10, "setPlayer:", v4);
    -[GKLeaderboardCacheObject updateWithServerRepresentation:](v10, "updateWithServerRepresentation:", v6);
    -[GKLeaderboardCacheObject setIsPrimary:](v10, "setIsPrimary:", 0);
    objc_msgSend(v9, "setPreviousInstance:", v10);
    objc_msgSend(v9, "setPreviousInstanceLoaded:", 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue(-[GKLeaderboardCacheObject internalRepresentation](v10, "internalRepresentation"));
    objc_msgSend(*(id *)(a1 + 72), "setResult:", v11);

  }
}

void sub_1000680D0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100068640(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_100068658(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 17, 0));
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_1000686B0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "internalRepresentationWithPieces:", 0));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100068734(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 6, 0));
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_10006878C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 17, 0));
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_1000687E4(uint64_t a1, void *a2)
{
  void *v4;
  void (**v5)(_QWORD);
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;
  id v10;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000688BC;
  v6[3] = &unk_1002BC010;
  v4 = *(void **)(a1 + 32);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 32);
  v9 = *(id *)(a1 + 56);
  v10 = *(id *)(a1 + 64);
  v5 = a2;
  objc_msgSend(v4, "perform:", v6);
  v5[2](v5);

}

void sub_1000688BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000689C8;
  v11[3] = &unk_1002BF268;
  v7 = *(id *)(a1 + 48);
  v17 = v3;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v12 = v7;
  v13 = v8;
  v14 = v9;
  v15 = *(id *)(a1 + 56);
  v16 = *(id *)(a1 + 64);
  v10 = v3;
  objc_msgSend(v4, "fetchLeaderboardWithRecordID:context:handler:", v5, v6, v11);

}

void sub_1000689C8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v3 = a2;
  if (objc_msgSend(v3, "previousInstanceLoaded"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "previousInstance"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "internalRepresentation"));

    objc_msgSend(*(id *)(a1 + 32), "setResult:", v5);
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(void **)(a1 + 40);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100068B28;
    v14[3] = &unk_1002BF240;
    v15 = *(id *)(a1 + 32);
    v11 = *(id *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(void **)(a1 + 48);
    v20 = v11;
    v16 = v12;
    v17 = v13;
    v18 = *(id *)(a1 + 56);
    v19 = *(id *)(a1 + 64);
    objc_msgSend(v9, "loadPreviousInstanceForLeaderboard:gameDescriptor:player:playerPlayedIn:context:handler:", v6, v7, v8, 1, v10, v14);

  }
}

void sub_100068B28(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "setResult:", v5);
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(void **)(a1 + 40);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100068C30;
    v11[3] = &unk_1002BEF50;
    v12 = *(id *)(a1 + 32);
    v13 = *(id *)(a1 + 72);
    objc_msgSend(v9, "loadPreviousInstanceForLeaderboard:gameDescriptor:player:playerPlayedIn:context:handler:", v6, v7, v8, 0, v10, v11);

  }
}

uint64_t sub_100068C30(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  objc_msgSend(v5, "setError:", a3);
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100068C88(uint64_t a1)
{
  id *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t v18;

  v2 = (id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v4);
    v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10007233C((uint64_t)v2, v6);
  }
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "result"));
  v8 = (void *)v7;
  if (v7)
  {
    v9 = *(void **)(a1 + 40);
    v18 = v7;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "bundleIdentifier"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100068E4C;
    v15[3] = &unk_1002BF218;
    v17 = *(id *)(a1 + 64);
    v16 = *(id *)(a1 + 32);
    objc_msgSend(v9, "mixinHasActiveChallengesWithLeaderboards:playerID:bundleID:completionHandler:", v10, v11, v12, v15);

    v13 = v17;
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 64);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, _QWORD, void *))(v14 + 16))(v14, 0, v13);
  }

}

void sub_100068E4C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);

}

void sub_10006900C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000690C0;
  v5[3] = &unk_1002BF290;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "_gkMapDictionaryWithKeyPath:", CFSTR("playerID")));
  v3 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v4 = v6;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000690C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "player"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerID"));

  if (!v5)
  {
LABEL_9:
    v7 = *(id *)(a1 + 40);
    goto LABEL_10;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));
  v7 = v6;
  if (!v6
    || (v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "displayNameWithOptions:", 0)),
        v9 = objc_msgSend(v8, "length"),
        v8,
        !v9))
  {
    v10 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v11 = (id)GKOSLoggers(v6);
      v10 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      sub_1000723C0();

    goto LABEL_9;
  }
LABEL_10:
  objc_msgSend(v3, "setPlayer:", v7);

}

void sub_100069398(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  unsigned int v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void (**v27)(_QWORD);
  void *v28;
  id v29;
  void *v30;
  void *v31;
  _QWORD v32[5];
  id v33;
  uint64_t *v34;
  _QWORD v35[4];
  id v36;
  id v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  id v44;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v5));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "internalRepresentation"));
  v39 = 0;
  v40 = &v39;
  v41 = 0x3032000000;
  v42 = sub_10005C4A4;
  v43 = sub_10005C4B4;
  v44 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("player-score")));
  if (objc_msgSend(v9, "count"))
  {
    v10 = objc_alloc_init((Class)GKLeaderboardEntryInternal);
    v11 = (void *)v40[5];
    v40[5] = (uint64_t)v10;

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("context")));
    v13 = objc_msgSend(v12, "integerValue");
    objc_msgSend((id)v40[5], "setContext:", v13);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("score-value")));
    v15 = objc_msgSend(v14, "integerValue");
    objc_msgSend((id)v40[5], "setScore:", v15);

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("formatted-score-value")));
    objc_msgSend((id)v40[5], "setFormattedScore:", v16);

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("rank")));
    v18 = objc_msgSend(v17, "integerValue");
    objc_msgSend((id)v40[5], "setRank:", v18);

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("timestamp")));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate _gkDateFromServerTimestamp:](NSDate, "_gkDateFromServerTimestamp:", v19));
    objc_msgSend((id)v40[5], "setDate:", v20);

    objc_msgSend((id)v40[5], "setPlayer:", v8);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "baseLeaderboardID"));
    objc_msgSend((id)v40[5], "setBaseLeaderboardID:", v21);

  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("total-entries")));
  v23 = objc_msgSend(v22, "integerValue");

  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("results")));
  v31 = v5;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_100069768;
  v35[3] = &unk_1002BF2B8;
  v36 = *(id *)(a1 + 40);
  v25 = v8;
  v37 = v25;
  v38 = &v39;
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "_gkMapWithBlock:", v35));
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_10006999C;
  v32[3] = &unk_1002BBCC8;
  v27 = v6;
  v28 = *(void **)(a1 + 48);
  v32[4] = *(_QWORD *)(a1 + 56);
  v29 = v26;
  v33 = v29;
  v34 = &v39;
  objc_msgSend(v28, "perform:", v32);
  objc_msgSend(*(id *)(a1 + 48), "setResult:", v40[5]);
  objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v29, CFSTR("entries"));
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v23));
  objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v30, CFSTR("count"));

  v27[2](v27);
  _Block_object_dispose(&v39, 8);

}

void sub_100069744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100069768(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;

  v3 = a2;
  v4 = objc_alloc_init((Class)GKLeaderboardEntryInternal);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("context")));
  objc_msgSend(v4, "setContext:", objc_msgSend(v5, "integerValue"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("score-value")));
  objc_msgSend(v4, "setScore:", objc_msgSend(v6, "integerValue"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("formatted-score-value")));
  objc_msgSend(v4, "setFormattedScore:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("rank")));
  objc_msgSend(v4, "setRank:", objc_msgSend(v8, "integerValue"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("timestamp")));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate _gkDateFromServerTimestamp:](NSDate, "_gkDateFromServerTimestamp:", v9));
  objc_msgSend(v4, "setDate:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "baseLeaderboardID"));
  objc_msgSend(v4, "setBaseLeaderboardID:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("player-descriptor")));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("player-id")));

  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID"));
    v15 = objc_msgSend(v13, "isEqualToString:", v14);

    if (!v15)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerInternal internalRepresentation](GKPlayerInternal, "internalRepresentation"));
      objc_msgSend(v4, "setPlayer:", v19);

      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "player"));
      objc_msgSend(v18, "setPlayerID:", v13);
      goto LABEL_6;
    }
    objc_msgSend(v4, "setPlayer:", *(_QWORD *)(a1 + 40));
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    if (!*(_QWORD *)(v16 + 40))
    {
      v17 = v4;
      v18 = *(void **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v17;
LABEL_6:

    }
  }

  return v4;
}

void sub_10006999C(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = a1[5];
  v6 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100069A34;
  v8[3] = &unk_1002BB540;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "updatePlayersForEntries:localPlayerEntry:handler:", v5, v6, v8);

}

uint64_t sub_100069A34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100069A40(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("entries")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("count")));
  (*(void (**)(uint64_t, id, void *, id, _QWORD))(v2 + 16))(v2, v5, v3, objc_msgSend(v4, "integerValue"), 0);

}

NSString *__cdecl sub_100069DF8(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return (NSString *)-[GKPlayerInternal playerID](a2, "playerID", a3);
}

void sub_100069E00(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;

  v3 = a2;
  v4 = objc_alloc_init((Class)NSMutableDictionary);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryForRequest"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v5, CFSTR("game"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("player-id"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "baseLeaderboardID"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, CFSTR("base-leaderboard-id"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "identifier"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v8, CFSTR("leaderboard-id"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "timeScopeName:", *(_QWORD *)(a1 + 96)));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("time-scope"));

  if (objc_msgSend(*(id *)(a1 + 64), "count"))
  {
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 64), CFSTR("player-ids"));
    v10 = CFSTR("gk-get-leaderboard-entries-for-players");
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "playerScopeName:", *(_QWORD *)(a1 + 104)));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v11, CFSTR("player-scope"));

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 112)));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v12, CFSTR("starting-rank"));

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 120)));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v13, CFSTR("count"));

    v10 = CFSTR("gk-get-leaderboard-entries");
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10006A0A8;
  v20[3] = &unk_1002BF0B8;
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(id *)(a1 + 80);
  v18 = *(_QWORD *)(a1 + 56);
  v21 = v17;
  v22 = v18;
  v23 = *(id *)(a1 + 88);
  v24 = *(id *)(a1 + 48);
  v25 = v3;
  v19 = v3;
  objc_msgSend(v14, "issueRequest:bagKey:clientProxy:locale:handler:", v4, v10, v15, v16, v20);

}

void sub_10006A0A8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;
  id v11;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v5 && !a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10006A190;
    v7[3] = &unk_1002BC010;
    v6 = *(void **)(a1 + 32);
    v7[4] = *(_QWORD *)(a1 + 40);
    v8 = v5;
    v9 = *(id *)(a1 + 48);
    v10 = *(id *)(a1 + 56);
    v11 = *(id *)(a1 + 32);
    objc_msgSend(v6, "perform:", v7);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_10006A190(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10006A240;
  v9[3] = &unk_1002BF320;
  v10 = *(id *)(a1 + 64);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "generateEntriesFromServerResponse:context:leaderboard:handler:", v5, v6, v7, v9);

}

uint64_t sub_10006A240(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v7;
  id v8;
  void *v9;

  v7 = *(void **)(a1 + 32);
  v8 = a3;
  objc_msgSend(v7, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, CFSTR("entries"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a4));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("count"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10006A2DC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("entries")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("count")));
  v5 = objc_msgSend(v4, "integerValue");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *, id, void *))(v2 + 16))(v2, v7, v3, v5, v6);

}

void sub_10006AA2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Unwind_Resume(a1);
}

void sub_10006AA44(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 17, 0));
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, id))(v1 + 16))(v1, 0, 0, 0, v2);

}

void sub_10006AAA4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 17, 0));
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, id))(v1 + 16))(v1, 0, 0, 0, v2);

}

void sub_10006AB04(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "internalRepresentationWithPieces:", 0));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10006AB88(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 6, 0));
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, id))(v1 + 16))(v1, 0, 0, 0, v2);

}

void sub_10006ABE8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 17, 0));
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, id))(v1 + 16))(v1, 0, 0, 0, v2);

}

void sub_10006AC48(uint64_t a1, void *a2)
{
  void *v4;
  __int128 v5;
  void (**v6)(_QWORD);
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10006AD54;
  v7[3] = &unk_1002BF370;
  v4 = *(void **)(a1 + 32);
  v7[4] = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = *(id *)(a1 + 64);
  v5 = *(_OWORD *)(a1 + 104);
  v14 = *(_OWORD *)(a1 + 88);
  v15 = v5;
  v11 = *(id *)(a1 + 72);
  v12 = *(id *)(a1 + 32);
  v13 = *(id *)(a1 + 80);
  v6 = a2;
  objc_msgSend(v4, "perform:", v7);
  v6[2](v6);

}

void sub_10006AD54(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  __int128 v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  v14 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "context"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10006AE50;
  v15[3] = &unk_1002BF320;
  v11 = *(_QWORD *)(a1 + 80);
  v16 = *(id *)(a1 + 72);
  v17 = v3;
  v13 = *(_OWORD *)(a1 + 104);
  v12 = v3;
  objc_msgSend(v14, "loadEntriesForLeaderboard:gameDescriptor:localPlayer:playerScope:timeScope:range:players:context:locale:handler:", v4, v5, v6, v7, v8, v13, v9, v10, v11, v15);

}

uint64_t sub_10006AE50(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  id v10;
  id v11;
  void *v12;

  v9 = *(void **)(a1 + 32);
  v10 = a3;
  v11 = a2;
  objc_msgSend(v9, "setError:", a5);
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v11);

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, CFSTR("entries"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a4));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v12, CFSTR("totalPlayerCount"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10006AF08(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("entries")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("totalPlayerCount")));
  v5 = objc_msgSend(v4, "integerValue");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *, id, void *))(v2 + 16))(v2, v7, v3, v5, v6);

}

void sub_10006B1A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id obj;
  _QWORD v34[4];
  id v35;
  id v36;
  _QWORD v37[4];
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  _BYTE v53[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  obj = v3;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v49;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v49 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)v9);
        v11 = objc_alloc_init((Class)GKScoreInternal);
        objc_msgSend(v11, "setDate:", *(_QWORD *)(a1 + 32));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "baseLeaderboardID"));
        objc_msgSend(v11, "setLeaderboardIdentifier:", v12);

        objc_msgSend(v11, "setValue:", *(_QWORD *)(a1 + 88));
        objc_msgSend(v11, "setContext:", *(_QWORD *)(a1 + 96));
        objc_msgSend(v11, "setPlayer:", *(_QWORD *)(a1 + 40));
        if (objc_msgSend(v10, "type") == (id)1)
          v13 = v4;
        else
          v13 = v5;
        objc_msgSend(v13, "addObject:", v11);
        v14 = *(void **)(a1 + 48);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "baseLeaderboardID"));
        objc_msgSend(v14, "removeObject:", v15);

        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v53, 16);
    }
    while (v7);
  }

  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v16 = *(id *)(a1 + 48);
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v45;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v45 != v19)
          objc_enumerationMutation(v16);
        v21 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)v20);
        v22 = objc_alloc_init((Class)GKScoreInternal);
        objc_msgSend(v22, "setDate:", *(_QWORD *)(a1 + 32));
        objc_msgSend(v22, "setLeaderboardIdentifier:", v21);
        objc_msgSend(v22, "setValue:", *(_QWORD *)(a1 + 88));
        objc_msgSend(v22, "setContext:", *(_QWORD *)(a1 + 96));
        objc_msgSend(v22, "setPlayer:", *(_QWORD *)(a1 + 40));
        objc_msgSend(v5, "addObject:", v22);

        v20 = (char *)v20 + 1;
      }
      while (v18 != v20);
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
    }
    while (v18);
  }

  +[GKScoreSubmissionBulletin presentForScores:](GKScoreSubmissionBulletin, "presentForScores:", v4);
  +[GKScoreSubmissionBulletin presentForScores:](GKScoreSubmissionBulletin, "presentForScores:", v5);
  v23 = *(void **)(a1 + 56);
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "clientProxy"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "replyQueue"));
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_10006B5AC;
  v37[3] = &unk_1002BF3E8;
  v26 = v4;
  v38 = v26;
  v39 = *(id *)(a1 + 56);
  v27 = *(id *)(a1 + 72);
  v28 = *(_QWORD *)(a1 + 64);
  v40 = v27;
  v41 = v28;
  v43 = *(_QWORD *)(a1 + 88);
  v29 = v5;
  v42 = v29;
  objc_msgSend(v23, "performOnQueue:block:", v25, v37);

  if (*(_QWORD *)(a1 + 80))
  {
    v30 = *(void **)(a1 + 56);
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "clientProxy"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "replyQueue"));
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10006BE0C;
    v34[3] = &unk_1002BB758;
    v35 = *(id *)(a1 + 56);
    v36 = *(id *)(a1 + 80);
    objc_msgSend(v30, "notifyOnQueue:block:", v32, v34);

  }
}

void sub_10006B5AC(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  int8x16_t v12;
  _QWORD v13[4];
  id v14;
  int8x16_t v15;
  id v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10006B704;
    v18[3] = &unk_1002BF3C0;
    v4 = *(void **)(a1 + 40);
    v19 = *(id *)(a1 + 32);
    v5 = *(id *)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 56);
    v20 = v5;
    v21 = v6;
    v7 = *(id *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 72);
    v22 = v7;
    v23 = v8;
    objc_msgSend(v4, "perform:", v18);

  }
  if (objc_msgSend(*(id *)(a1 + 64), "count"))
  {
    v9 = *(void **)(a1 + 40);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10006BBF4;
    v13[3] = &unk_1002BF3C0;
    v10 = *(void **)(a1 + 64);
    v17 = *(_QWORD *)(a1 + 72);
    v14 = v10;
    v12 = *(int8x16_t *)(a1 + 48);
    v11 = (id)v12.i64[0];
    v15 = vextq_s8(v12, v12, 8uLL);
    v16 = *(id *)(a1 + 40);
    objc_msgSend(v9, "perform:", v13);

  }
  v3[2](v3);

}

void sub_10006B704(uint64_t a1, void *a2)
{
  id v3;
  NSMutableArray *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSMutableDictionary *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  int8x16_t v16;
  _QWORD v17[4];
  id v18;
  int8x16_t v19;
  id v20;
  id v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v3 = a2;
  v4 = objc_opt_new(NSMutableArray);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v5 = *(id *)(a1 + 32);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v24;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v24 != v8)
          objc_enumerationMutation(v5);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v9), "serverRepresentation"));
        -[NSMutableArray addObject:](v4, "addObject:", v10);

        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v7);
  }

  v11 = objc_opt_new(NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v4, CFSTR("scores"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("eligible-challenges"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10006B948;
  v17[3] = &unk_1002BF398;
  v18 = *(id *)(a1 + 32);
  v16 = *(int8x16_t *)(a1 + 40);
  v14 = (id)v16.i64[0];
  v19 = vextq_s8(v16, v16, 8uLL);
  v20 = *(id *)(a1 + 56);
  v21 = v3;
  v22 = *(_QWORD *)(a1 + 64);
  v15 = v3;
  objc_msgSend(v12, "issueRequest:bagKey:clientProxy:handler:", v11, CFSTR("gk-submit-scores"), v13, v17);

}

void sub_10006B948(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  id v13;
  NSObject *v14;
  GKScoreNetworkRequest *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  GKScoreNetworkRequest *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    if (!os_log_GKGeneral)
      v13 = (id)GKOSLoggers(v6);
    v14 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "In-process score submission failed due to error: %@", buf, 0xCu);
    }
    v15 = [GKScoreNetworkRequest alloc];
    v16 = *(_QWORD *)(a1 + 32);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "bundleIdentifier"));
    v19 = -[GKScoreNetworkRequest initWithScores:bundleID:eligibleChallenges:](v15, "initWithScores:bundleID:eligibleChallenges:", v16, v18, *(_QWORD *)(a1 + 48));

    v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10006BBC4;
    v22[3] = &unk_1002BB6E8;
    v23 = *(id *)(a1 + 56);
    v24 = *(id *)(a1 + 64);
    objc_msgSend(v20, "writeToNetwork:clientProxy:handler:", v19, v21, v22);

  }
  else
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(0);
    v9 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 72);
      v11 = v9;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v10));
      *(_DWORD *)buf = 138412290;
      v26 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Score %@ submitted successfully in-process", buf, 0xCu);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }

}

uint64_t sub_10006BBC4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10006BBF4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  GKScoreNetworkRequest *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  GKScoreNetworkRequest *v14;
  void *v15;
  void *v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 64);
    v8 = v6;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v7));
    *(_DWORD *)buf = 138412290;
    v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Score %@ submitted via store and forward for classic", buf, 0xCu);

  }
  v10 = [GKScoreNetworkRequest alloc];
  v11 = *(_QWORD *)(a1 + 32);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "bundleIdentifier"));
  v14 = -[GKScoreNetworkRequest initWithScores:bundleID:eligibleChallenges:](v10, "initWithScores:bundleID:eligibleChallenges:", v11, v13, *(_QWORD *)(a1 + 48));

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10006BDDC;
  v18[3] = &unk_1002BB6E8;
  v19 = *(id *)(a1 + 56);
  v20 = v4;
  v17 = v4;
  objc_msgSend(v15, "writeToNetwork:clientProxy:handler:", v14, v16, v18);

}

uint64_t sub_10006BDDC(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10006BE0C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v2 = a1 + 32;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v4);
    v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10007251C(v2, v6);
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

}

void sub_10006C0C4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  int8x16_t v17;
  _QWORD v18[4];
  id v19;
  int8x16_t v20;
  id v21;
  id v22;
  id v23;

  v3 = a2;
  v4 = objc_alloc_init((Class)GKScoreInternal);
  objc_msgSend(v4, "setDate:", *(_QWORD *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  objc_msgSend(v4, "setLeaderboardIdentifier:", v5);

  objc_msgSend(v4, "setValue:", *(_QWORD *)(a1 + 80));
  objc_msgSend(v4, "setContext:", *(_QWORD *)(a1 + 88));
  objc_msgSend(v4, "setPlayer:", *(_QWORD *)(a1 + 48));
  v23 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v23, 1));
  +[GKScoreSubmissionBulletin presentForScores:](GKScoreSubmissionBulletin, "presentForScores:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "serverRepresentation"));
  v8 = objc_msgSend(v7, "mutableCopy");

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "leaderboardIdentifier"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, CFSTR("leaderboard-id"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, CFSTR("player-id"));

  v11 = *(_QWORD *)(a1 + 56);
  if (v11)
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v11, CFSTR("challenges"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "clientProxy"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10006C320;
  v18[3] = &unk_1002BF0B8;
  v19 = v4;
  v17 = *(int8x16_t *)(a1 + 56);
  v14 = (id)v17.i64[0];
  v20 = vextq_s8(v17, v17, 8uLL);
  v21 = *(id *)(a1 + 72);
  v22 = v3;
  v15 = v3;
  v16 = v4;
  objc_msgSend(v12, "issueRequest:bagKey:clientProxy:handler:", v8, CFSTR("gk-submit-instance-score"), v13, v18);

}

void sub_10006C320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  GKInstanceScoreNetworkRequest *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  GKInstanceScoreNetworkRequest *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;

  if (!a2 || a3)
  {
    v4 = [GKInstanceScoreNetworkRequest alloc];
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIdentifier"));
    v8 = -[GKInstanceScoreNetworkRequest initWithInstanceScore:bundleID:challenges:](v4, "initWithInstanceScore:bundleID:challenges:", v5, v7, *(_QWORD *)(a1 + 48));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10006C460;
    v11[3] = &unk_1002BB6E8;
    v12 = *(id *)(a1 + 56);
    v13 = *(id *)(a1 + 64);
    objc_msgSend(v9, "writeToNetwork:clientProxy:handler:", v8, v10, v11);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
}

uint64_t sub_10006C460(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10006C490(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v2 = a1 + 32;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v4);
    v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000725A0(v2, v6);
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

}

void sub_10006C7C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD block[4];
  id v34;
  id v35;
  id v36;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    if (v5)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("status")));
      v10 = objc_msgSend(v9, "longValue");

      if (!v10)
      {
        v12 = objc_alloc_init((Class)GKLeaderboardSummaryInternal);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("start-date")));
        objc_msgSend(v12, "setStartDate:", objc_msgSend(v18, "longValue"));

        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("duration")));
        objc_msgSend(v12, "setDuration:", objc_msgSend(v19, "longValue"));

        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("next-start-date")));
        objc_msgSend(v12, "setNextStartDate:", objc_msgSend(v20, "longValue"));

        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("score-value")));
        objc_msgSend(v12, "setScoreValue:", objc_msgSend(v21, "longValue"));

        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("rank")));
        objc_msgSend(v12, "setRank:", objc_msgSend(v22, "longValue"));

        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("total-entries")));
        objc_msgSend(v12, "setTotalEntries:", objc_msgSend(v23, "longValue"));

        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("friend-rank")));
        objc_msgSend(v12, "setFriendRank:", objc_msgSend(v24, "longValue"));

        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("total-friend-entries")));
        objc_msgSend(v12, "setTotalFriendEntries:", objc_msgSend(v25, "longValue"));

        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("context")));
        objc_msgSend(v12, "setContext:", objc_msgSend(v26, "longValue"));

        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("leaderboard-id")));
        objc_msgSend(v12, "setLeaderboardID:", v27);

        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("base-leaderboard-id")));
        objc_msgSend(v12, "setBaseLeaderboardID:", v28);

        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("group-id")));
        objc_msgSend(v12, "setGroupID:", v29);

        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("title")));
        objc_msgSend(v12, "setTitle:", v30);

        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("type")));
        objc_msgSend(v12, "setType:", v31);

        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("formatted-score-value")));
        objc_msgSend(v12, "setFormattedScoreValue:", v32);

        v11 = 0;
        goto LABEL_7;
      }
    }
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 3, 0));
  }
  v11 = v8;
  v12 = 0;
LABEL_7:
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "replyQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006CBA0;
  block[3] = &unk_1002BC3D0;
  v15 = *(id *)(a1 + 40);
  v35 = v11;
  v36 = v15;
  v34 = v12;
  v16 = v11;
  v17 = v12;
  dispatch_async(v14, block);

}

uint64_t sub_10006CBA0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10006CC74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  _QWORD v7[4];
  __int16 v8;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10006CD0C;
  v7[3] = &unk_1002BF458;
  v8 = *(_WORD *)(a1 + 40);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "_gkFilterWithBlock:", v7));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v5);

}

id sub_10006CD0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = v3;
  if ((*(_BYTE *)(a1 + 32)
     || (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lastReportedDate")), v5, v5))
    && (*(_BYTE *)(a1 + 33)
     || !objc_msgSend(v4, "isHidden")
     || objc_msgSend(v4, "isCompleted")))
  {
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_10006CE84(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  __int16 v16;
  void *v17;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKGameServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bundleIdentifier"));
  v17 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10006CFCC;
  v10[3] = &unk_1002BF5C0;
  v16 = *(_WORD *)(a1 + 72);
  v11 = *(id *)(a1 + 48);
  v12 = v3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  v13 = v7;
  v14 = v8;
  v9 = v3;
  objc_msgSend(v4, "getGameMetadataForBundleIDs:handler:", v6, v10);

}

void sub_10006CFCC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  _QWORD *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  _QWORD *v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  __int16 v25;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10006D1B4;
  v22[3] = &unk_1002BF4F8;
  v25 = *(_WORD *)(a1 + 72);
  v23 = *(id *)(a1 + 32);
  v7 = v6;
  v24 = v7;
  v8 = objc_retainBlock(v22);
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    v9 = objc_alloc_init((Class)NSMutableArray);
    v10 = *(void **)(a1 + 40);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10006D3BC;
    v20[3] = &unk_1002BF570;
    v21 = v9;
    v11 = v9;
    objc_msgSend(v10, "enumerateKeysAndObjectsUsingBlock:", v20);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKContactsIntegrationController sharedController](GKContactsIntegrationController, "sharedController"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "replyQueue"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10006D4EC;
    v15[3] = &unk_1002BF598;
    v18 = *(id *)(a1 + 56);
    v19 = v8;
    v16 = *(id *)(a1 + 40);
    v17 = v5;
    objc_msgSend(v12, "populateContactInfoForProfiles:replyOnQueue:withCompletionHandler:", v11, v14, v15);

  }
}

id sub_10006D1B4(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameStatServicePrivate filterUnreportedAndHiddenAchievements:includeUnreported:includeHidden:](GKGameStatServicePrivate, "filterUnreportedAndHiddenAchievements:includeUnreported:includeHidden:", a2, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49)));
  v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10006D274;
  v9[3] = &unk_1002BF4D0;
  v5 = v3;
  v10 = v5;
  v11 = *(id *)(a1 + 40);
  objc_msgSend(v4, "enumerateObjectsUsingBlock:", v9);
  v6 = v11;
  v7 = v5;

  return v7;
}

void sub_10006D274(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v8 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "playerID"));
  v4 = objc_msgSend(v3, "length");

  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "playerID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10006D358;
    v9[3] = &unk_1002BF4A8;
    v10 = *(id *)(a1 + 40);
    v11 = v8;
    objc_msgSend(v7, "enumerateObjectsUsingBlock:", v9);

  }
}

void sub_10006D358(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "setGameHint:", v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "minimalInternal"));
  objc_msgSend(v4, "setPlayer:", v5);

}

void sub_10006D3BC(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10006D428;
  v4[3] = &unk_1002BF548;
  v5 = *(id *)(a1 + 32);
  objc_msgSend(a3, "enumerateObjectsUsingBlock:", v4);

}

void sub_10006D428(uint64_t a1, void *a2)
{
  void *v3;
  _QWORD v4[4];
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "friendsWhoHaveThis"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10006D4A8;
  v4[3] = &unk_1002BF520;
  v5 = *(id *)(a1 + 32);
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v4);

}

void sub_10006D4A8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "friendPlayer"));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_10006D4EC(_QWORD *a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v3 = (id)GKOSLoggers(a1);
    v2 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_100072624();
  v4 = a1[6];
  v5 = (*(uint64_t (**)(void))(a1[7] + 16))();
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  (*(void (**)(uint64_t, void *, _QWORD))(v4 + 16))(v4, v6, a1[5]);

}

void sub_10006D798(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  __int128 v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t v18;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10006D880;
  v15[3] = &unk_1002BF610;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(id *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 112);
  v17 = v3;
  v18 = v12;
  v16 = v11;
  v14 = *(_OWORD *)(a1 + 96);
  v13 = v3;
  objc_msgSend(v4, "getEntriesForLeaderboard:gameDescriptor:localPlayer:playerScope:timeScope:range:players:handler:", v5, v6, v7, v8, v9, v14, v10, v15);

}

void sub_10006D880(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;

  v9 = a3;
  v10 = *(void **)(a1 + 32);
  v11 = a2;
  objc_msgSend(v10, "setError:", a5);
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v11);

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("entries"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a4));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v12, CFSTR("totalPlayerCount"));

  if (!a5 && (*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_gkValuesForKeyPath:", CFSTR("player")));
    v14 = *(void **)(a1 + 32);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10006D9B8;
    v16[3] = &unk_1002BCCF0;
    v17 = v13;
    v15 = v13;
    objc_msgSend(v14, "performOnManagedObjectContext:", v16);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10006D9B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void (**v7)(void);

  v7 = a3;
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKContactsIntegrationController sharedController](GKContactsIntegrationController, "sharedController"));
  objc_msgSend(v6, "populateContactInfoForProfiles:withContext:", *(_QWORD *)(a1 + 32), v5);

  v7[2]();
}

void sub_10006DA34(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("entries")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("totalPlayerCount")));
  v5 = objc_msgSend(v4, "integerValue");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *, id, void *))(v2 + 16))(v2, v7, v3, v5, v6);

}

void sub_10006DCB0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[2];
  _QWORD v18[2];

  if (a3)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 0);
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastObject"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "defaultLeaderboardIdentifier"));
    v6 = *(void **)(a1 + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10006DEB0;
    v15[3] = &unk_1002BF660;
    v16 = v5;
    v7 = v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_gkMapWithBlock:", v15));
    v17[0] = CFSTR("game");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dictionaryForRequest"));
    v17[1] = CFSTR("scores");
    v18[0] = v9;
    v18[1] = v8;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 2));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10006DFA0;
    v13[3] = &unk_1002BBA68;
    v14 = *(id *)(a1 + 56);
    objc_msgSend(v11, "issueRequest:bagKey:clientProxy:handler:", v10, CFSTR("gk-get-hypothetical-score-rank"), v12, v13);

  }
}

id sub_10006DEB0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "leaderboardIdentifier"));
  if (!v4)
    v4 = *(id *)(a1 + 32);
  v9[0] = CFSTR("score-value");
  v5 = objc_msgSend(v3, "value");

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v5));
  v9[1] = CFSTR("category");
  v10[0] = v6;
  v10[1] = v4;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 2));

  return v7;
}

void sub_10006DFA0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("results")));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

id sub_10006E0DC(id a1, NSDictionary *a2, unint64_t a3)
{
  return -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("bundle-id"));
}

void sub_10006E0EC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  id v6;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", a3));
  objc_msgSend(v5, "updateWithGameDescriptor:", v6);

}

void sub_10006E308(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  void *v31;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (!v7 || v8)
  {
    if (!v8)
    {
      v8 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 3, 0));
      v9 = v8;
    }
    if (!os_log_GKGeneral)
      v19 = (id)GKOSLoggers(v8);
    v20 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v29 = v7;
      v30 = 2112;
      v31 = v9;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Error getting games friends played from server plist: %@, error: %@", buf, 0x16u);
    }
    v21 = *(_QWORD *)(a1 + 48);
    if (v21)
      (*(void (**)(uint64_t, _QWORD, void *))(v21 + 16))(v21, 0, v9);
  }
  else
  {
    v10 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", a4));
    v11 = (void *)v10;
    if (!os_log_GKGeneral)
      v12 = (id)GKOSLoggers(v10);
    v13 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Games friends played data new expiration date is: %@", buf, 0xCu);
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionGroupBypassingMultiUser"));
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10006E564;
    v22[3] = &unk_1002BF740;
    v15 = v7;
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(void **)(a1 + 40);
    v23 = v15;
    v24 = v16;
    v25 = v17;
    v26 = v11;
    v27 = *(id *)(a1 + 48);
    v18 = v11;
    objc_msgSend(v14, "performOnManagedObjectContext:", v22);

    v9 = 0;
  }

}

void sub_10006E564(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  FriendsPlayedGameList *v24;
  void *v25;
  FriendsPlayedGameList *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  void *j;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void (**v48)(_QWORD);
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[4];
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint8_t v64[128];
  uint8_t buf[4];
  void *v66;
  __int16 v67;
  void *v68;
  _BYTE v69[128];

  v5 = a2;
  v48 = a3;
  v6 = objc_alloc_init((Class)NSMutableDictionary);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject fetchRequestForContext:](GKPlayerProfileCacheObject, "fetchRequestForContext:", v5));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("friendBiDirectional == %@"), &off_1002DB598));
  objc_msgSend(v7, "setPredicate:", v8);

  v47 = v7;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:", v7, 0));
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v60, v69, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v61;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v61 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)i);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "playerID"));
        objc_msgSend(v6, "setObject:forKeyedSubscript:", v14, v15);

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v60, v69, 16);
    }
    while (v11);
  }
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("results")));
  v17 = (void *)v16;
  if (!os_log_GKGeneral)
    v18 = (id)GKOSLoggers(v16);
  v19 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v20 = v19;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v9, "count")));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v17, "count")));
    *(_DWORD *)buf = 138412546;
    v66 = v21;
    v67 = 2112;
    v68 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Number of cached friends: %@, games and players: %@", buf, 0x16u);

  }
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "_gkMapWithBlock:", &stru_1002BF6F0));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ensureGameObjectsForDescriptors:moc:"));
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[FriendsPlayedGameList _gkFetchRequest](FriendsPlayedGameList, "_gkFetchRequest"));
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "executeFetchRequest:error:"));
  v24 = [FriendsPlayedGameList alloc];
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[FriendsPlayedGameList entity](FriendsPlayedGameList, "entity"));
  v26 = -[FriendsPlayedGameList initWithEntity:insertIntoManagedObjectContext:](v24, "initWithEntity:insertIntoManagedObjectContext:", v25, v5);

  v27 = objc_alloc_init((Class)NSMutableSet);
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472;
  v53[2] = sub_10006EAE0;
  v53[3] = &unk_1002BF718;
  v42 = v23;
  v54 = v42;
  v29 = v5;
  v55 = v29;
  v43 = v6;
  v56 = v43;
  v57 = *(id *)(a1 + 48);
  v30 = v28;
  v58 = v30;
  v31 = v27;
  v59 = v31;
  v46 = v17;
  objc_msgSend(v17, "enumerateObjectsUsingBlock:", v53);
  -[FriendsPlayedGameList setEntries:](v26, "setEntries:", v31);
  -[FriendsPlayedGameList setExpirationDate:](v26, "setExpirationDate:", *(_QWORD *)(a1 + 56));
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v32 = v41;
  v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v49, v64, 16);
  if (v33)
  {
    v34 = v33;
    v35 = *(_QWORD *)v50;
    do
    {
      for (j = 0; j != v34; j = (char *)j + 1)
      {
        if (*(_QWORD *)v50 != v35)
          objc_enumerationMutation(v32);
        objc_msgSend(v29, "deleteObject:", *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)j));
      }
      v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v49, v64, 16);
    }
    while (v34);
  }

  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentLocalPlayer"));
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKFriendServicePrivate, "serviceWithTransport:forClient:localPlayer:", 0, v37, v38));

  objc_msgSend(v39, "notifyWidgetFriendListUpdated");
  v40 = *(_QWORD *)(a1 + 64);
  if (v40)
    (*(void (**)(uint64_t, id, _QWORD))(v40 + 16))(v40, v30, 0);
  v48[2](v48);

}

id sub_10006EAD0(id a1, NSDictionary *a2, unint64_t a3)
{
  return -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("game"));
}

void sub_10006EAE0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  FriendPlayedGameEntry *v7;
  void *v8;
  FriendPlayedGameEntry *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSObject *v21;
  FriendPlayedEntry *v22;
  void *v23;
  FriendPlayedEntry *v24;
  double v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  unsigned int v33;
  id v34;
  NSObject *v35;
  FriendPlayedGameEntry *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  void *v48;
  _BYTE v49[128];

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3));
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "internalRepresentation"));
  v7 = [FriendPlayedGameEntry alloc];
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[FriendPlayedGameEntry entity](FriendPlayedGameEntry, "entity"));
  v9 = -[FriendPlayedGameEntry initWithEntity:insertIntoManagedObjectContext:](v7, "initWithEntity:insertIntoManagedObjectContext:", v8, *(_QWORD *)(a1 + 40));

  v36 = v9;
  v38 = v6;
  -[FriendPlayedGameEntry setGame:](v9, "setGame:", v6);
  v41 = objc_alloc_init((Class)NSMutableSet);
  v37 = v5;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("friends")));
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v44;
    v39 = *(_QWORD *)v44;
    v40 = v10;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v44 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("player-id")));
        if (v16)
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v16));

          if (v17)
          {
            v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("played-at")));
            v19 = (void *)v18;
            if (v18)
            {
              if (!os_log_GKGeneral)
                v20 = (id)GKOSLoggers(v18);
              v21 = os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                v48 = v15;
                _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Using friendInfo: %@", buf, 0xCu);
              }
              v22 = [FriendPlayedEntry alloc];
              v23 = (void *)objc_claimAutoreleasedReturnValue(+[FriendPlayedEntry entity](FriendPlayedEntry, "entity"));
              v24 = -[FriendPlayedEntry initWithEntity:insertIntoManagedObjectContext:](v22, "initWithEntity:insertIntoManagedObjectContext:", v23, *(_QWORD *)(a1 + 40));

              objc_msgSend(v19, "doubleValue");
              v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", v25 / 1000.0));
              -[FriendPlayedEntry setPlayedAt:](v24, "setPlayedAt:", v26);
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v16));
              -[FriendPlayedEntry setFriend:](v24, "setFriend:", v27);

              objc_msgSend(v41, "addObject:", v24);
              v28 = objc_alloc((Class)GKFriendPlayerInternal);
              v29 = (void *)objc_claimAutoreleasedReturnValue(-[FriendPlayedEntry friend](v24, "friend"));
              v30 = objc_msgSend(v28, "initWithCacheObject:", v29);

              objc_msgSend(v30, "setLastPlayedGame:", v42);
              objc_msgSend(v30, "setLastPlayedDate:", v26);
              v31 = *(void **)(a1 + 56);
              if (!v31
                || (v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "bundleID")),
                    v33 = objc_msgSend(v31, "containsObject:", v32),
                    v32,
                    v33))
              {
                objc_msgSend(*(id *)(a1 + 64), "addObject:", v30);
              }

              v13 = v39;
              v10 = v40;
            }
            else
            {
              if (!os_log_GKGeneral)
                v34 = (id)GKOSLoggers(0);
              v35 = os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                v48 = v15;
                _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Missing required field, skipping friendInfo: %@", buf, 0xCu);
              }
            }

          }
        }

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
    }
    while (v12);
  }
  -[FriendPlayedGameEntry setFriendsPlayed:](v36, "setFriendsPlayed:", v41);
  objc_msgSend(*(id *)(a1 + 72), "addObject:", v36);

}

void sub_10006F308(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v5 = a3;
  v9 = (id)objc_claimAutoreleasedReturnValue(+[GKGameStatServicePrivate currentFriendsPlayedList:](GKGameStatServicePrivate, "currentFriendsPlayedList:", a2));
  if (v9)
    objc_msgSend(v9, "setExpirationDate:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentLocalPlayer"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKFriendServicePrivate, "serviceWithTransport:forClient:localPlayer:", 0, v6, v7));

  objc_msgSend(v8, "expireFriendList");
  objc_msgSend(v8, "notifyWidgetFriendListUpdated");
  v5[2](v5);

}

void sub_10006F550(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[5];
  id v28;

  v5 = a2;
  v6 = a3;
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x3032000000;
  v27[3] = sub_10005C4A4;
  v27[4] = sub_10005C4B4;
  v28 = 0;
  if (v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    v7 = objc_alloc_init((Class)NSMutableDictionary);
    if (*(_QWORD *)(a1 + 72))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:"));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v8, CFSTR("limit"));

    }
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v9, CFSTR("type"));
    if (*(_QWORD *)(a1 + 80))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:"));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v10, CFSTR("within-secs"));

    }
    v11 = *(void **)(a1 + 40);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKGameStatService.m", 3162, "-[GKGameStatServicePrivate getGamesFriendsPlayed:type:fetchOptions:withinSecs:matchingBundleIDs:handler:]_block_invoke"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "transactionGroupWithName:forPlayerID:", v12, v13));

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10006F7AC;
    v20[3] = &unk_1002BF790;
    v25 = v27;
    v15 = *(id *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 40);
    v21 = v15;
    v22 = v16;
    v17 = v7;
    v23 = v17;
    v18 = *(id *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 88);
    v24 = v18;
    v26 = v19;
    objc_msgSend(v14, "performOnManagedObjectContext:", v20);

  }
  _Block_object_dispose(v27, 8);

}

void sub_10006F78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006F7AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *i;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unsigned int v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  id v34;
  void *v35;
  NSObject *v36;
  void *v37;
  id v38;
  void *v39;
  NSObject *v40;
  void *v41;
  id v42;
  NSObject *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void (**v47)(_QWORD);
  id v48;
  id obj;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint8_t buf[4];
  void *v63;
  _BYTE v64[128];
  _BYTE v65[128];

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(+[GKGameStatServicePrivate currentFriendsPlayedList:](GKGameStatServicePrivate, "currentFriendsPlayedList:", v5));
  v8 = (void *)v7;
  v53 = a1;
  if (v7)
  {
    v47 = v6;
    v48 = v5;
    v9 = objc_alloc_init((Class)NSMutableArray);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v46 = v8;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "entries"));
    v12 = a1;
    v51 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v65, 16);
    if (v51)
    {
      v50 = *(_QWORD *)v59;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v59 != v50)
            objc_enumerationMutation(obj);
          v52 = v13;
          v14 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * v13);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "game"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "internalRepresentation"));

          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "friendsPlayed"));
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
          if (v18)
          {
            v19 = v18;
            v20 = *(_QWORD *)v55;
            do
            {
              for (i = 0; i != v19; i = (char *)i + 1)
              {
                if (*(_QWORD *)v55 != v20)
                  objc_enumerationMutation(v17);
                v22 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * (_QWORD)i);
                v23 = *(void **)(v12 + 32);
                if (v23)
                {
                  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "game"));
                  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "bundleID"));
                  v26 = objc_msgSend(v23, "containsObject:", v25);

                  v12 = v53;
                  if (!v26)
                    continue;
                }
                v27 = objc_alloc((Class)GKFriendPlayerInternal);
                v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "friend"));
                v29 = objc_msgSend(v27, "initWithCacheObject:", v28);

                objc_msgSend(v29, "setLastPlayedGame:", v16);
                v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "playedAt"));
                objc_msgSend(v29, "setLastPlayedDate:", v30);

                objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v12 + 64) + 8) + 40), "addObject:", v29);
              }
              v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
            }
            while (v19);
          }

          v13 = v52 + 1;
        }
        while ((id)(v52 + 1) != v51);
        v51 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v65, 16);
      }
      while (v51);
    }

    a1 = v12;
    v6 = v47;
    v5 = v48;
    v8 = v46;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "expirationDate"));
    v32 = objc_msgSend(v8, "_gkIsExpired:", v31);

    if (v32)
    {
      if (!os_log_GKGeneral)
        v34 = (id)GKOSLoggers(v33);
      v35 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v36 = v35;
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "expirationDate"));
        *(_DWORD *)buf = 138412290;
        v63 = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Games friends played cache data is expired, refreshing from server: %@", buf, 0xCu);

      }
      objc_msgSend(*(id *)(v53 + 40), "loadGamesFriendsPlayed:matchingBundleIDs:handler:", *(_QWORD *)(v53 + 48), *(_QWORD *)(v53 + 32), 0);
    }
    else
    {
      if (!os_log_GKGeneral)
        v42 = (id)GKOSLoggers(v33);
      v43 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Using games friends played cache data as it is still valid", buf, 2u);
      }
    }
    if ((*(_BYTE *)(v53 + 72) & 1) != 0)
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[GKContactsIntegrationController sharedController](GKContactsIntegrationController, "sharedController"));
      objc_msgSend(v44, "populateContactInfoForProfiles:withContext:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 64) + 8) + 40), v5);

    }
    v45 = *(_QWORD *)(v53 + 56);
    if (v45)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v45 + 16))(v45, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 64) + 8) + 40), 0);
  }
  else
  {
    if (!os_log_GKGeneral)
      v38 = (id)GKOSLoggers(v7);
    v39 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v40 = v39;
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "expirationDate"));
      *(_DWORD *)buf = 138412290;
      v63 = v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "No games friends played cache data, refreshing from server: %@", buf, 0xCu);

    }
    objc_msgSend(*(id *)(v53 + 40), "loadGamesFriendsPlayed:matchingBundleIDs:handler:", *(_QWORD *)(v53 + 48), *(_QWORD *)(v53 + 32), *(_QWORD *)(v53 + 56));
  }
  v6[2](v6);

}

void sub_1000709A4(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  double v23;

  v7 = a2;
  v8 = a3;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionGroupBypassingMultiUser"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100070AA8;
  v16[3] = &unk_1002BF830;
  v23 = a4;
  v17 = v7;
  v18 = v8;
  v10 = *(id *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(a1 + 40);
  v22 = v10;
  v19 = v11;
  v20 = v12;
  v21 = v9;
  v13 = v9;
  v14 = v8;
  v15 = v7;
  objc_msgSend(v13, "performOnManagedObjectContext:", v16);

}

void sub_100070AA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[4];
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  void (**v51)(_QWORD);
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  void (*v58)(uint64_t);
  id v59;
  _QWORD v60[5];
  id v61;
  uint64_t v62;
  uint8_t buf[4];
  uint64_t v64;
  __int16 v65;
  void *v66;

  v5 = a2;
  v6 = a3;
  v60[0] = 0;
  v60[1] = v60;
  v60[2] = 0x3032000000;
  v60[3] = sub_10005C4A4;
  v60[4] = sub_10005C4B4;
  v61 = 0;
  v7 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 80)));
  v8 = (void *)v7;
  v54 = 0;
  v55 = &v54;
  v56 = 0x3032000000;
  v57 = sub_10005C4A4;
  v58 = sub_10005C4B4;
  v59 = 0;
  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v7);
  v10 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v11 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    v64 = v11;
    v65 = 2112;
    v66 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "THE reengagement server response is: %@ with expiration of: %@", buf, 0x16u);
  }
  v12 = *(void **)(a1 + 40);
  if (v12)
  {
    v13 = v55;
    v14 = v12;
    v15 = (void *)v13[5];
    v13[5] = (uint64_t)v14;
LABEL_7:

    if (!os_log_GKGeneral)
      v17 = (id)GKOSLoggers(v16);
    v18 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v19 = *(_QWORD *)(a1 + 32);
      v20 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v64 = v19;
      v65 = 2112;
      v66 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "error getting reengagement from server plist %@ error: %@", buf, 0x16u);
    }
    v21 = *(_QWORD *)(a1 + 72);
    if (v21)
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v21 + 16))(v21, 0, 0, v55[5]);
    v6[2](v6);
    goto LABEL_26;
  }
  v22 = *(void **)(a1 + 32);
  if (!v22)
  {
    v34 = objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 3, 0));
    v15 = (void *)v55[5];
    v55[5] = v34;
    goto LABEL_7;
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("results")));
  if (objc_msgSend(v23, "count"))
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectAtIndexedSubscript:", 0));
    v25 = *(void **)(a1 + 48);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("game")));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ensureGameObject:gameDescriptor:", v5, v26));

    v28 = *(void **)(a1 + 48);
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("game")));
    v62 = *(_QWORD *)(a1 + 56);
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v62, 1));
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100070FD0;
    v42[3] = &unk_1002BF808;
    v43 = *(id *)(a1 + 40);
    v50 = *(id *)(a1 + 72);
    v51 = v6;
    v31 = *(id *)(a1 + 64);
    v52 = v60;
    v32 = *(_QWORD *)(a1 + 48);
    v44 = v31;
    v45 = v32;
    v46 = v23;
    v47 = *(id *)(a1 + 56);
    v48 = v8;
    v33 = v27;
    v49 = v33;
    v53 = &v54;
    objc_msgSend(v28, "fetchAchievementsForGameDescriptor:players:context:handler:", v29, v30, v5, v42);

  }
  else
  {
    if (!os_log_GKGeneral)
      v35 = (id)GKOSLoggers(0);
    v36 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v37 = *(_QWORD *)(a1 + 32);
      v38 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v64 = v37;
      v65 = 2112;
      v66 = v38;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "No reengagement results from server plist %@ error: %@", buf, 0x16u);
    }
    v39 = objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 3, 0));
    v40 = (void *)v55[5];
    v55[5] = v39;

    v41 = *(_QWORD *)(a1 + 72);
    if (v41)
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v41 + 16))(v41, 0, 0, v55[5]);
    v6[2](v6);
  }

LABEL_26:
  _Block_object_dispose(&v54, 8);

  _Block_object_dispose(v60, 8);
}

void sub_100070F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_100070FD0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD v13[5];
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2;
  v7 = a4;
  if (*(_QWORD *)(a1 + 32))
  {
    v8 = *(_QWORD *)(a1 + 88);
    if (v8)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v8 + 16))(v8, 0, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
  }
  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100071110;
    v13[3] = &unk_1002BF7E0;
    v10 = *(void **)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v20 = *(_QWORD *)(a1 + 104);
    v13[4] = v9;
    v14 = *(id *)(a1 + 56);
    v15 = *(id *)(a1 + 64);
    v16 = *(id *)(a1 + 72);
    v18 = *(id *)(a1 + 88);
    v11 = *(id *)(a1 + 80);
    v12 = *(_QWORD *)(a1 + 112);
    v17 = v11;
    v21 = v12;
    v19 = *(id *)(a1 + 96);
    objc_msgSend(v10, "performOnManagedObjectContext:", v13);

  }
}

void sub_100071110(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (**v12)(void);

  v12 = a3;
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "processReengagementResults:localPlayer:expirationDate:context:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  if (*(_QWORD *)(a1 + 72))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "internalRepresentation"));
    if (!v8 || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
    {
      v9 = objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 3, 0));
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

  }
  v12[2]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();

}

uint64_t sub_100071280(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000713EC(id *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void (**v39)(_QWORD);
  void *v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;

  v5 = a2;
  v6 = a3;
  v7 = a1[4];
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "playerID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "existingReengagementAchievement:context:", v8, v5));

  if (!os_log_GKGeneral)
    v11 = (id)GKOSLoggers(v10);
  v12 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v13 = v12;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "expirationDate"));
    *(_DWORD *)buf = 138412546;
    v42 = v9;
    v43 = 2112;
    v44 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "achievementEntry = %@ and expiry : %@", buf, 0x16u);

  }
  if (v9
    && (v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "expirationDate")),
        v16 = objc_msgSend(v9, "_gkIsExpired:", v15),
        v15,
        (v16 & 1) == 0))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bundleID"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v17, v5));

    v19 = objc_msgSend(objc_alloc((Class)GKGameDescriptor), "initWithCacheObject:", v18);
    v20 = v19;
    if (!os_log_GKGeneral)
      v21 = (id)GKOSLoggers(v19);
    v22 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v23 = v22;
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "expirationDate"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bundleID"));
      *(_DWORD *)buf = 138412546;
      v42 = v24;
      v43 = 2112;
      v44 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Using reengagement cache as it is still valid: %@ game: %@", buf, 0x16u);

    }
    v26 = a1[4];
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "playerID"));
    v40 = v27;
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v40, 1));
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100071768;
    v32[3] = &unk_1002BF8D0;
    v29 = a1[6];
    v30 = a1[4];
    v33 = v29;
    v34 = v30;
    v35 = v9;
    v38 = a1[7];
    v36 = v18;
    v37 = a1[5];
    v39 = v6;
    v31 = v18;
    objc_msgSend(v26, "achievementsForPlayersAndGameDescriptor:players:context:handler:", v20, v28, v5, v32);

  }
  else
  {
    objc_msgSend(a1[4], "loadReengagementAchievements:handler:", a1[5], a1[7]);
    v6[2](v6);
  }

}

void sub_100071768(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100071830;
  v3[3] = &unk_1002BF8A8;
  v2 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  v4 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 72);
  v5 = *(id *)(a1 + 56);
  v6 = *(id *)(a1 + 64);
  v8 = *(id *)(a1 + 80);
  objc_msgSend(v2, "performOnManagedObjectContext:", v3);

}

void sub_100071830(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  void (**v7)(_QWORD);
  id v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;

  v5 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v7 = a3;
  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleID"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "percentComplete"));
  objc_msgSend(v11, "doubleValue");
  v13 = v12;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lastReportedDate"));
  v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "findAchievementInternal:identifier:context:existingPercent:existingDate:", v9, v10, v8, v14, v13));

  if (v17)
  {
    v15 = *(_QWORD *)(a1 + 64);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "internalRepresentation"));
    (*(void (**)(uint64_t, id, void *, _QWORD))(v15 + 16))(v15, v17, v16, 0);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "loadReengagementAchievements:handler:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  v7[2](v7);

  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
}

void sub_100071ACC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKAchievementListCacheObject _gkFetchRequest](GKAchievementListCacheObject, "_gkFetchRequest"));
  v8 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v7);
  v11 = 0;
  v9 = objc_msgSend(v5, "executeRequest:error:", v8, &v11);
  v10 = v11;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v10);
  v6[2](v6);

}

void sub_100071B98(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_100071D4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKLeaderboardListCacheObject _gkFetchRequest](GKLeaderboardListCacheObject, "_gkFetchRequest"));
  v8 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v7);
  v11 = 0;
  v9 = objc_msgSend(v5, "executeRequest:error:", v8, &v11);
  v10 = v11;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v10);
  v6[2](v6);

}

void sub_100071E18(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_100071E74(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

id sub_100071E80(uint64_t a1, void *a2)
{
  return a2;
}

void sub_100071E8C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v0, v1, "Encountered fetch error while querying friends who have this achievement: %@", v2);
  sub_100016C20();
}

void sub_100071EF0()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100027A0C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "================ GameKit - GKGameStatService requested a simulated crash.\nachievementsForPlayersAndGame:players:context:handler: got nil playerIDs or count is zero. ================", v1, 2u);
  sub_100027A04();
}

void sub_100071F28()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v0, v1, "Unable to get achievements for game descriptor with no bundle-id: %@", v2);
  sub_100016C20();
}

void sub_100071F8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "App's signing status seems to have changed, setting release state to 'unknown' for achievements.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100071FB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "getLeaderboardsForGameDescriptor: no player given, and no authenticated player", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100071FE4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v0, v1, "no playerID for internal %@", v2);
  sub_100016C20();
}

void sub_100072048()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "getLeaderboardsForGameDescriptor: no game descriptor specified", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100072074()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v0, v1, "getLeaderboardsForGameDescriptor: no playerID for internal %@", v2);
  sub_100016C20();
}

void sub_1000720D8(void *a1, void *a2)
{
  NSObject *v2;
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;

  v4 = a1;
  v5 = objc_msgSend((id)sub_100027A88(), "baseLeaderboardID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "startDate"));
  v9 = 138412546;
  v10 = v6;
  v11 = 2112;
  v12 = v7;
  sub_100027994((void *)&_mh_execute_header, v2, v8, "getLeaderboardsForGameDescriptor - updated: %@, %@", (uint8_t *)&v9);

}

void sub_100072198(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  sub_100071E80(a1, a2);
  v3 = objc_msgSend((id)sub_100027A88(), "error");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v2, v5, "getLeaderboardsForGameDescriptor: %@", v6);

  sub_1000279E0();
}

void sub_10007221C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v0, v1, "Failed to retrieve active leaderboard challenges: %@", v2);
  sub_100016C20();
}

void sub_100072280()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "getPreviousInstanceForLeaderboard: no game descriptor specified", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000722AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "getPreviousInstanceForLeaderboard: no player given, and no authenticated player", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000722D8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v0, v1, "getPreviousInstanceForLeaderboard: no playerID for internal %@", v2);
  sub_100016C20();
}

void sub_10007233C(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  sub_100071E80(a1, a2);
  v3 = objc_msgSend((id)sub_100027A88(), "error");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v2, v5, "getPreviousInstanceForLeaderboard: %@", v6);

  sub_1000279E0();
}

void sub_1000723C0()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_1000279B0();
  v3 = 2112;
  v4 = v0;
  sub_100027994((void *)&_mh_execute_header, v1, (uint64_t)v1, "No internal or displayName for playerID:%@ (entry:%@). Will be changed to anonymous", v2);
  sub_100016C20();
}

void sub_100072434()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "getEntriesForLeaderboard: no game descriptor specified", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100072460()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "loadEntriesForLeaderboard: invalid leaderboard parameter.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10007248C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "getEntriesForLeaderboard: no player given, and no authenticated player", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000724B8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v0, v1, "getEntriesForLeaderboard: no playerID for internal %@", v2);
  sub_100016C20();
}

void sub_10007251C(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  sub_100071E80(a1, a2);
  v3 = objc_msgSend((id)sub_100027A88(), "error");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v2, v5, "submitScore: %@", v6);

  sub_1000279E0();
}

void sub_1000725A0(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  sub_100071E80(a1, a2);
  v3 = objc_msgSend((id)sub_100027A88(), "error");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v2, v5, "submitInstanceScore: %@", v6);

  sub_1000279E0();
}

void sub_100072624()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Finished populating contact information for Friends Who Have This Achievement", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100072774(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "issuingPlayer"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playerID"));

  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "receivingPlayer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerID"));

  if (v6)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);

}

void sub_100072810(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileService, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allObjects"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000728D8;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getProfilesForPlayerIDs:handler:", v5, v7);

}

void sub_1000728D8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "_gkMapDictionaryWithKeyPath:", CFSTR("playerID")));
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100072970;
  v6[3] = &unk_1002BF8F8;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "enumerateObjectsUsingBlock:", v6);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100072970(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "receivingPlayer"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playerID"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v4));
    objc_msgSend(v9, "setReceivingPlayer:", v5);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "issuingPlayer"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v7));
    objc_msgSend(v9, "setIssuingPlayer:", v8);

  }
}

id sub_100072AFC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "compatibleBundleIDs"));
  v5 = objc_msgSend(v4, "containsObject:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)v5)
    objc_msgSend(v3, "setBundleID:", *(_QWORD *)(a1 + 32));

  return v5;
}

void sub_100072F5C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKGameServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allObjects"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100073024;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getGameMetadataForBundleIDs:handler:", v5, v7);

}

void sub_100073024(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v10 = a2;
  v5 = a3;
  v6 = objc_autoreleasePoolPush();
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_gkMapDictionaryWithKeyPath:", CFSTR("bundleIdentifier")));
  v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000730F8;
  v11[3] = &unk_1002BF8F8;
  v12 = v7;
  v9 = v7;
  objc_msgSend(v8, "enumerateObjectsUsingBlock:", v11);

  objc_autoreleasePoolPop(v6);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000730F8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));
  objc_msgSend(v3, "setGame:", v4);

}

void sub_1000731EC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;

  v15 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](GKPlayerProfileCacheObject, "selfPlayerID"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject fetchRequestForContext:](GKChallengeListCacheObject, "fetchRequestForContext:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v3, "setResultType:", 1);
  objc_msgSend(v3, "setFetchLimit:", 1);
  objc_msgSend(v3, "setReturnsDistinctResults:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate > %@ && player.playerID = %@"), v2, v15));
  objc_msgSend(v3, "setPredicate:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "executeFetchRequest:error:", v3, 0));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));

  if (v6)
  {
    v7 = (void *)v6;
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_8;
    goto LABEL_6;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("expirationDate != nil && player.playerID = %@"), v15));
  objc_msgSend(v3, "setPredicate:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "executeFetchRequest:error:", v3, 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firstObject"));

  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    if (!v7)
    {
      v14 = 0;
      v13 = 0;
      goto LABEL_7;
    }
LABEL_6:
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectWithID:", v7));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "entries"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_gkValuesForKeyPath:", CFSTR("challengeID")));

    v10 = *(_QWORD *)(a1 + 40);
    v14 = 1;
LABEL_7:
    (*(void (**)(uint64_t, void *, BOOL, uint64_t))(v10 + 16))(v10, v13, v6 != 0, v14);

  }
LABEL_8:

}

void sub_1000735AC(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientProxy"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000736A4;
  v7[3] = &unk_1002BD7E8;
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = v3;
  v6 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", 0, CFSTR("gk-get-challenge-ids"), v5, v7);

}

void sub_1000736A4(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  double v15;

  v10 = a2;
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, CFSTR("ttl"));

  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  if (v10 && !v7)
  {
    v9 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000737CC;
    v11[3] = &unk_1002BEB00;
    v15 = a4;
    v12 = v9;
    v13 = v10;
    v14 = *(id *)(a1 + 48);
    objc_msgSend(v12, "performBlockAndWait:", v11);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000737CC(uint64_t a1)
{
  void *v2;
  GKChallengeListCacheObject *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v10 = (id)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 56)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", *(_QWORD *)(a1 + 32)));
  v3 = (GKChallengeListCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "challengeList"));
  if (!v3)
  {
    v3 = -[GKCacheObject initWithManagedObjectContext:]([GKChallengeListCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 32));
    -[GKChallengeListCacheObject setPlayer:](v3, "setPlayer:", v2);
  }
  -[GKChallengeListCacheObject updateWithServerRepresentation:expirationDate:](v3, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 40), v10);
  if (objc_msgSend(*(id *)(a1 + 48), "isGameCenter"))
  {
    v4 = objc_alloc((Class)NSFetchRequest);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKChallengeCacheObject entityName](GKChallengeCacheObject, "entityName"));
    v6 = objc_msgSend(v4, "initWithEntityName:", v5);

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("wasViewed == NO")));
    objc_msgSend(v6, "setPredicate:", v7);

    v8 = objc_msgSend(*(id *)(a1 + 32), "countForFetchRequest:error:", v6, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
    objc_msgSend(v9, "setBadgeCount:forBundleID:badgeType:", v8, GKGameCenterIdentifier, 0);

  }
}

void sub_100073934(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ttl")));
  objc_msgSend(v6, "doubleValue");
  v4 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v5, v4);

}

void sub_100073BD4(uint64_t a1, void *a2)
{
  void *v4;
  void (**v5)(_QWORD);
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100073C98;
  v6[3] = &unk_1002BC3A8;
  v4 = *(void **)(a1 + 32);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 32);
  v9 = *(id *)(a1 + 56);
  v5 = a2;
  objc_msgSend(v4, "perform:", v6);
  v5[2](v5);

}

void sub_100073C98(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100073D7C;
  v11[3] = &unk_1002BF948;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v12 = v7;
  v13 = v8;
  v14 = v9;
  v15 = *(id *)(a1 + 56);
  v16 = v3;
  v10 = v3;
  objc_msgSend(v4, "fetchChallengesForGameDescriptor:context:handler:", v5, v6, v11);

}

void sub_100073D7C(uint64_t a1, void *a2, char a3, char a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[6];
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  _QWORD v25[5];
  id v26;
  id v27;
  id v28;
  _QWORD *v29;
  _QWORD v30[3];
  char v31;

  v7 = a2;
  if ((a3 & 1) == 0)
  {
    v30[0] = 0;
    v30[1] = v30;
    v30[2] = 0x2020000000;
    v31 = 0;
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKChallengeService.m", 261, "-[GKChallengeService getChallengesForGameDescriptor:handler:]_block_invoke_3"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transactionGroupWithName:", v9));

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100073FB4;
    v25[3] = &unk_1002BE2D0;
    v11 = *(void **)(a1 + 48);
    v25[4] = *(_QWORD *)(a1 + 40);
    v26 = v11;
    v27 = *(id *)(a1 + 32);
    v12 = v10;
    v28 = v12;
    v29 = v30;
    objc_msgSend(v12, "perform:", v25);
    if ((a4 & 1) != 0)
    {
      v13 = *(_QWORD *)(a1 + 56);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1000742CC;
      v18[3] = &unk_1002BE9C0;
      v18[4] = *(_QWORD *)(a1 + 40);
      v18[5] = v30;
      objc_msgSend(v12, "notifyOnQueue:block:", v13, v18);
    }
    else
    {
      v14 = *(void **)(a1 + 32);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1000740EC;
      v19[3] = &unk_1002BC010;
      v20 = v12;
      v15 = *(id *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 40);
      v17 = *(void **)(a1 + 48);
      v21 = v15;
      v22 = v16;
      v23 = v17;
      v24 = *(id *)(a1 + 32);
      objc_msgSend(v14, "perform:", v19);

    }
    _Block_object_dispose(v30, 8);
  }
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("challengeIDs"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_100073F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100073FB4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100074078;
  v10[3] = &unk_1002BEFC8;
  v7 = *(id *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v12 = v3;
  v13 = v8;
  v11 = v7;
  v9 = v3;
  objc_msgSend(v4, "loadChallengesForGameDescriptor:context:handler:", v5, v6, v10);

}

void sub_100074078(_QWORD *a1, void *a2, double a3)
{
  void *v5;
  BOOL v7;
  id v8;

  v5 = (void *)a1[4];
  v8 = a2;
  objc_msgSend(v5, "setError:", v8);
  v7 = a3 > 0.0 && v8 == 0;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v7;
  (*(void (**)(void))(a1[5] + 16))();

}

void sub_1000740EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[2] = sub_1000741B4;
  v8[3] = &unk_1002BB4C8;
  v4 = *(void **)(a1 + 56);
  v8[4] = *(_QWORD *)(a1 + 48);
  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8[1] = 3221225472;
  v9 = v4;
  v10 = *(id *)(a1 + 64);
  v11 = *(id *)(a1 + 32);
  v12 = v3;
  v7 = v3;
  objc_msgSend(v5, "notifyOnQueue:block:", v6, v8);

}

void sub_1000741B4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100074274;
  v5[3] = &unk_1002BF018;
  v6 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  v8 = *(id *)(a1 + 64);
  objc_msgSend(v2, "fetchChallengesForGameDescriptor:context:handler:", v3, v4, v5);

}

uint64_t sub_100074274(uint64_t a1, uint64_t a2)
{
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, CFSTR("challengeIDs"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v3);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1000742CC(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;
  void *v5;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v4 = CFSTR("scroll");
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
    v5 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));
    objc_msgSend(v1, "refreshContentsForDataType:userInfo:", 1, v3);

  }
}

void sub_1000743A4(id *a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "error"));

  if (!v2)
  {
    v3 = a1[4];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000744FC;
    v18[3] = &unk_1002BB4A0;
    v4 = v3;
    v5 = a1[5];
    v6 = a1[6];
    v19 = v4;
    v20 = v5;
    v21 = v6;
    objc_msgSend(v4, "perform:", v18);

  }
  v7 = a1[4];
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "replyQueue"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100074644;
  v12[3] = &unk_1002BB4C8;
  v13 = a1[4];
  v10 = a1[6];
  v11 = a1[5];
  v14 = v10;
  v15 = v11;
  v16 = a1[7];
  v17 = a1[8];
  objc_msgSend(v7, "notifyOnQueue:block:", v9, v12);

}

void sub_1000744FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("challengeIDs")));
  v5 = *(void **)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("bundle-id")));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000745DC;
  v8[3] = &unk_1002BCA30;
  v9 = *(id *)(a1 + 32);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v5, "getChallengeDetailsForChallengeIDs:receiverID:clientBundleID:handler:", v4, 0, v6, v8);

}

void sub_1000745DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, CFSTR("challenges"));
  if (v5)
    objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100074644(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("challenges")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("bundle-id")));
  if (objc_msgSend(v2, "isEqual:", GKGameOverlayUIIdentifier))
  {

LABEL_4:
    v5 = v11;
    goto LABEL_10;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("bundle-id")));
  v4 = objc_msgSend(v3, "isEqual:", GKDaemonIdentifier);

  if ((v4 & 1) != 0)
    goto LABEL_4;
  v6 = *(void **)(a1 + 48);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("bundle-id")));
  v8 = v7;
  if (!v7)
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "bundleIdentifier"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_filterChallenges:compatibleWithBundleID:", v11, v8));
  if (!v7)

LABEL_10:
  v9 = *(_QWORD *)(a1 + 64);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v9 + 16))(v9, v5, v10);

}

void sub_1000749A0(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  _QWORD v14[3];
  char v15;

  v3 = a2;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100074A98;
  v8[3] = &unk_1002BFA50;
  v4 = *(void **)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 32);
  v13 = v14;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(void **)(a1 + 56);
  v10 = v5;
  v11 = v6;
  v12 = v7;
  objc_msgSend(v4, "performOnManagedObjectContext:", v8);
  v3[2](v3);

  _Block_object_dispose(v14, 8);
}

void sub_100074A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100074A98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  BOOL v10;
  id v11;
  id v12;
  uint64_t v13;
  double v14;
  void *i;
  void *v16;
  void *v17;
  double v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  int8x16_t v41;
  id v42;
  void *v43;
  void (**v44)(void);
  _QWORD v45[6];
  _QWORD v46[4];
  id v47;
  id v48;
  _QWORD v49[4];
  id v50;
  id v51;
  int8x16_t v52;
  id v53;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  id v57;
  _QWORD v58[3];
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[128];

  v5 = a2;
  v44 = a3;
  v42 = objc_msgSend(*(id *)(a1 + 32), "count");
  v43 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKChallengeCacheObject challengesWithChallengeIDs:context:](GKChallengeCacheObject, "challengesWithChallengeIDs:context:", *(_QWORD *)(a1 + 32), v5));
  v7 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithArray:", *(_QWORD *)(a1 + 32));
  v8 = objc_msgSend(v6, "count");
  v9 = objc_msgSend(*(id *)(a1 + 32), "count");
  v60 = 0u;
  v61 = 0u;
  v10 = v8 == v9;
  v62 = 0u;
  v63 = 0u;
  v11 = v6;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v60, v64, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v61;
    v14 = INFINITY;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v61 != v13)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v16, "hasDetails"))
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "detailsExpirationDate"));
          objc_msgSend(v17, "timeIntervalSinceNow");
          v19 = v18 > 0.0;

          if (v19)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "challengeID"));
            objc_msgSend(v7, "removeObject:", v20);

          }
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "detailsExpirationDate"));
          objc_msgSend(v21, "timeIntervalSinceNow");
          v23 = v22;

          v14 = fmin(v14, v23);
        }
        else
        {
          v10 = 0;
        }
      }
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v60, v64, 16);
    }
    while (v12);
  }
  else
  {
    v14 = INFINITY;
  }

  if (objc_msgSend(v7, "count") != 0 && !v10
    || (v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "valueForKeyPath:", CFSTR("internalRepresentation"))),
        objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v24, CFSTR("challenges")),
        v24,
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1,
        v14 <= 0.0))
  {
    v25 = *(void **)(a1 + 40);
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKChallengeService.m", 381, "-[GKChallengeService getChallengeDetailsForChallengeIDs:receiverID:clientBundleID:handler:]_block_invoke_2"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "transactionGroupWithName:", v26));

    v58[0] = 0;
    v58[1] = v58;
    v58[2] = 0x2020000000;
    v59 = 0;
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_gkMapWithBlock:", &stru_1002BF968));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "replyQueue"));
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_100075058;
    v49[3] = &unk_1002BFA28;
    v31 = v28;
    v50 = v31;
    v51 = *(id *)(a1 + 56);
    v41 = *(int8x16_t *)(a1 + 40);
    v32 = (id)v41.i64[0];
    v52 = vextq_s8(v41, v41, 8uLL);
    v55 = v58;
    v33 = v27;
    v53 = v33;
    v57 = v42;
    v34 = *(id *)(a1 + 32);
    v35 = *(_QWORD *)(a1 + 64);
    v54 = v34;
    v56 = v35;
    objc_msgSend(v33, "performOnQueue:block:", v30, v49);

    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "replyQueue"));
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      v45[2] = sub_100075818;
      v45[3] = &unk_1002BE9C0;
      v45[4] = *(_QWORD *)(a1 + 48);
      v45[5] = v58;
      objc_msgSend(v33, "notifyOnQueue:block:", v37, v45);

    }
    else
    {
      v38 = *(void **)(a1 + 40);
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "replyQueue"));
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472;
      v46[2] = sub_10007579C;
      v46[3] = &unk_1002BB658;
      v47 = *(id *)(a1 + 40);
      v48 = v33;
      objc_msgSend(v38, "join:queue:block:", v48, v40, v46);

    }
    _Block_object_dispose(v58, 8);

  }
  v44[2]();

}

void sub_100074F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

id sub_100074FA8(id a1, id a2)
{
  id v2;
  void *v3;
  void *v4;
  _QWORD v6[2];

  v6[0] = CFSTR("GKChallengeInternal");
  v6[1] = a2;
  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v6, 2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKResourceIdentifier resourceIdentifierForKeys:](GKResourceIdentifier, "resourceIdentifierForKeys:", v3));

  return v4;
}

void sub_100075058(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  void *v25;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_gkMapWithBlock:", &stru_1002BF988));
  v24 = CFSTR("challenge-ids");
  v25 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v5));

  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    objc_msgSend(v6, "setObject:forKey:", v7, CFSTR("player-id"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100075260;
  v16[3] = &unk_1002BFA00;
  v10 = *(id *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 80);
  v17 = v10;
  v21 = v11;
  v12 = *(id *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 96);
  v18 = v12;
  v23 = v13;
  v14 = *(id *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 88);
  v19 = v14;
  v20 = v3;
  v15 = v3;
  objc_msgSend(v8, "issueRequest:bagKey:clientProxy:handler:", v6, CFSTR("gk-get-challenges"), v9, v16);

}

id sub_100075220(id a1, GKResourceIdentifier *a2, unint64_t a3)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GKResourceIdentifier keys](a2, "keys", a3));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 1));

  return v4;
}

void sub_100075260(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  void **v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  double v24;
  uint64_t v25;

  v13 = a2;
  v7 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  if (v13 && !v7)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = a4 > 0.0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
    v15 = _NSConcreteStackBlock;
    v16 = 3221225472;
    v17 = sub_1000753A8;
    v18 = &unk_1002BF9D8;
    v24 = a4;
    v9 = v13;
    v10 = *(_QWORD *)(a1 + 80);
    v19 = v9;
    v25 = v10;
    v20 = *(id *)(a1 + 48);
    v11 = *(id *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 72);
    v21 = v11;
    v23 = v12;
    v22 = *(id *)(a1 + 40);
    objc_msgSend(v8, "performBlockAndWait:", &v15);

  }
  objc_msgSend(*(id *)(a1 + 40), "setError:", v7, v13, v15, v16, v17, v18);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000753A8(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *j;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  _QWORD v34[4];
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];

  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 72)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("results")));
  v3 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", *(_QWORD *)(a1 + 80));
  v4 = *(_QWORD *)(a1 + 40);
  v32 = a1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKChallengeCacheObject challengesWithChallengeIDs:context:](GKChallengeCacheObject, "challengesWithChallengeIDs:context:", v4, v5));

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v41;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v41 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "challengeID"));
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, v13);

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
    }
    while (v9);
  }
  v31 = v7;

  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v14 = v2;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v37;
    do
    {
      for (j = 0; j != v16; j = (char *)j + 1)
      {
        if (*(_QWORD *)v37 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)j);
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", CFSTR("status"), v31));
        v21 = objc_msgSend(v20, "integerValue");

        if (!v21)
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", CFSTR("challenge")));
          v23 = v22;
          if (v22)
          {
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKey:", CFSTR("challenge-id")));
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v24));
            if (v25)
            {
              v26 = v25;
              objc_msgSend(v25, "updateWithServerRepresentation:", v23);
            }
            else
            {
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v32 + 48), "context"));
              v26 = (void *)objc_claimAutoreleasedReturnValue(+[GKChallengeCacheObject challengeWithServerRepresentation:context:](GKChallengeCacheObject, "challengeWithServerRepresentation:context:", v23, v27));

            }
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "challengeID"));
            objc_msgSend(v3, "setObject:forKeyedSubscript:", v26, v28);

            objc_msgSend(v26, "setDetailsExpirationDate:", v33);
          }

        }
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
    }
    while (v16);
  }

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 64) + 8) + 24))
  {
    v29 = *(void **)(v32 + 40);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10007575C;
    v34[3] = &unk_1002BF9B0;
    v35 = v3;
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "_gkFilterWithBlock:", v34));
    objc_msgSend(*(id *)(v32 + 56), "setObject:forKeyedSubscript:", v30, CFSTR("challenges"));

  }
}

id sub_10007575C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "internalRepresentation"));

  return v3;
}

void sub_10007579C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("challenges")));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v2, CFSTR("challenges"));

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v3);

}

void sub_100075818(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;
  void *v5;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v4 = CFSTR("scroll");
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
    v5 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));
    objc_msgSend(v1, "refreshContentsForDataType:userInfo:", 1, v3);

  }
}

void sub_1000758F0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[5];
  id v18;
  id v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("challenges")));
  v3 = v2;
  if (v2)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100075A54;
    v17[3] = &unk_1002BB4A0;
    v4 = *(void **)(a1 + 32);
    v17[4] = *(_QWORD *)(a1 + 40);
    v18 = v2;
    v19 = *(id *)(a1 + 32);
    objc_msgSend(v4, "perform:", v17);

  }
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100075BD4;
  v11[3] = &unk_1002BCFC0;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(void **)(a1 + 48);
  v12 = v3;
  v13 = v8;
  v14 = v9;
  v16 = *(id *)(a1 + 56);
  v15 = *(id *)(a1 + 32);
  v10 = v3;
  objc_msgSend(v5, "notifyOnQueue:block:", v7, v11);

}

void sub_100075A54(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  id v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKChallengeService.m", 473, "-[GKChallengeService getChallengeDetailsForChallengeIDs:receiverID:clientBundleID:handler:]_block_invoke_12"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v4));

  objc_msgSend(*(id *)(a1 + 32), "_determineCompatibleGamesForChallenges:dispatchGroup:", *(_QWORD *)(a1 + 40), v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100075B98;
  v10[3] = &unk_1002BB518;
  v8 = *(void **)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v8;
  v12 = *(id *)(a1 + 48);
  v13 = v3;
  v9 = v3;
  objc_msgSend(v5, "notifyOnQueue:block:", v7, v10);

}

uint64_t sub_100075B98(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_updatePlayersForChallenges:dispatchGroup:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_updateGamesForChallenges:dispatchGroup:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_100075BD4(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;

  v14 = *(id *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v3 = objc_msgSend(v2, "isGameCenter");

  if ((v3 & 1) != 0)
  {
    v4 = v14;
  }
  else
  {
    v5 = *(void **)(a1 + 48);
    if (v5)
    {
      v6 = v5;
    }
    else
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
      v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleIdentifier"));

    }
    v8 = *(void **)(a1 + 32);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100075D30;
    v16[3] = &unk_1002BFA78;
    v9 = v6;
    v17 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "indexesOfObjectsPassingTest:", v16));
    if (objc_msgSend(v10, "count"))
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectsAtIndexes:", v10));
    else
      v11 = 0;

    v4 = (void *)v11;
  }
  v12 = *(_QWORD *)(a1 + 64);
  if (v12)
  {
    v15 = v4;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "error"));
    (*(void (**)(uint64_t, id, void *))(v12 + 16))(v12, v15, v13);

    v4 = v15;
  }

}

id sub_100075D30(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "compatibleBundleIDs"));
  v4 = objc_msgSend(v3, "containsObject:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t sub_100076008(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000761E8(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  int8x16_t v21;
  _QWORD v22[4];
  id v23;
  int8x16_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v5 = *(id *)(a1 + 32);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v30;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v30 != v8)
          objc_enumerationMutation(v5);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v9), "challengeID"));
        objc_msgSend(v4, "addObject:", v10);

        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    }
    while (v7);
  }

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v11 = v4;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v26;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v26 != v14)
          objc_enumerationMutation(v11);
        v16 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](GKBulletinController, "sharedController"));
        objc_msgSend(v17, "clearChallengeBulletinsForChallengeID:", v16);

        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    }
    while (v13);
  }

  v18 = *(void **)(a1 + 40);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10007644C;
  v22[3] = &unk_1002BB8A0;
  v23 = v11;
  v21 = *(int8x16_t *)(a1 + 40);
  v19 = (id)v21.i64[0];
  v24 = vextq_s8(v21, v21, 8uLL);
  v20 = v11;
  objc_msgSend(v18, "performOnManagedObjectContext:", v22);
  v3[2](v3);

}

void sub_10007644C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  GKAbortChallengeNetworkRequest *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  GKAbortChallengeNetworkRequest *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("challengeID in %@"), *(_QWORD *)(a1 + 32)));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject objectsMatchingPredicate:context:](GKChallengeCacheObject, "objectsMatchingPredicate:context:", v7, v5));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
  v10 = GKGameCenterIdentifier;
  v28 = v9;
  v11 = (char *)objc_msgSend(v9, "badgeCountForBundleID:badgeType:", GKGameCenterIdentifier, 0);
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v12 = v8;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v33;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v33 != v15)
          objc_enumerationMutation(v12);
        v11 -= objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)v16), "wasViewed") ^ 1;
        v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    }
    while (v14);
  }

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
  objc_msgSend(v17, "setBadgeCount:forBundleID:badgeType:", v11, v10, 0);

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v5));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "challengeList"));
  objc_msgSend(v19, "expire");

  +[GKCacheObject deleteObjectsMatchingPredicate:context:](GKChallengeCacheObject, "deleteObjectsMatchingPredicate:context:", v7, v5);
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKChallengeListCacheObject, "expireObjectsMatchingPredicate:context:", 0, v5);
  v20 = [GKAbortChallengeNetworkRequest alloc];
  v21 = *(_QWORD *)(a1 + 32);
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "bundleIdentifier"));
  v24 = -[GKChallengeNetworkRequest initWithChallenges:bundleID:](v20, "initWithChallenges:bundleID:", v21, v23);

  v25 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100076744;
  v29[3] = &unk_1002BB6E8;
  v30 = *(id *)(a1 + 48);
  v31 = v6;
  v27 = v6;
  objc_msgSend(v25, "writeToNetwork:clientProxy:handler:", v24, v26, v29);

}

uint64_t sub_100076744(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100076774(uint64_t a1)
{
  id v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  objc_msgSend(v2, "refreshContentsForDataType:userInfo:", 1, &off_1002DC3D8);

}

void sub_1000769E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100076A0C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v5 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "challengeList"));
  if (objc_msgSend(v3, "isValid"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "entries"));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v4, "count");

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v3, "expired");
  }
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, CFSTR("profile"));

}

void sub_100076AD4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100076B8C;
  v9[3] = &unk_1002BEFC8;
  v6 = *(id *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v11 = v3;
  v12 = v7;
  v10 = v6;
  v8 = v3;
  objc_msgSend(v4, "loadChallengesForGameDescriptor:context:handler:", 0, v5, v9);

}

void sub_100076B8C(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100076C28;
  v9[3] = &unk_1002BC800;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v10 = v4;
  v11 = v5;
  objc_msgSend(v3, "performBlockAndWait:", v9);

  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v6, v7, v8);
}

void sub_100076C28(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("profile")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  objc_msgSend(v2, "refreshObject:mergeChanges:", v5, 1);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "challengeList"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "entries"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v4, "count");

}

void sub_100076CC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);

}

void sub_100076EB4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = GKBagKeyChallengeApprovedGames;
  v8 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", GKBagKeyChallengeApprovedGames));

  v6 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v4));
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

  }
  else
  {
    (*(void (**)(uint64_t, _UNKNOWN **))(v6 + 16))(v6, &off_1002DC5F0);
  }

}

_TtC14GameDaemonCore17GKCacheableEntity *__cdecl sub_10007718C(id a1, NSDictionary *a2)
{
  NSDictionary *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  const __CFString *v11;
  void *v12;

  v2 = a2;
  v3 = objc_alloc((Class)GKLeaderboardChallengeInternal);
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("result")));

  v5 = objc_msgSend(v3, "initWithServerRepresentation:", v4);
  v11 = CFSTR("challenge-id");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "challengeID"));
  v12 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager makeEntityIDWithRequest:bagKey:](GKNetworkRequestManager, "makeEntityIDWithRequest:bagKey:", v7, CFSTR("gk-challenge-detail")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheableEntity createWithBagKey:entityID:entity:](_TtC14GameDaemonCore17GKCacheableEntity, "createWithBagKey:entityID:entity:", CFSTR("gk-challenge-detail"), v8, v5));

  return (_TtC14GameDaemonCore17GKCacheableEntity *)v9;
}

NSSecureCoding *__cdecl sub_1000773DC(id a1, NSDictionary *a2)
{
  NSDictionary *v2;
  id v3;

  v2 = a2;
  v3 = objc_msgSend(objc_alloc((Class)GKLeaderboardChallengeInternal), "initWithServerRepresentation:", v2);

  return (NSSecureCoding *)v3;
}

NSSecureCoding *__cdecl sub_10007756C(id a1, NSDictionary *a2)
{
  NSDictionary *v2;
  id v3;

  v2 = a2;
  v3 = objc_msgSend(objc_alloc((Class)GKLeaderboardChallengeSummaryInternal), "initWithServerRepresentation:", v2);

  return (NSSecureCoding *)v3;
}

void sub_10007786C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100077924;
  v9[3] = &unk_1002BB450;
  v7 = *(id *)(a1 + 40);
  v10 = v4;
  v11 = v7;
  v8 = v4;
  dispatch_async(v6, v9);

}

uint64_t sub_100077924(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100077A90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "replyQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100077B74;
  block[3] = &unk_1002BB608;
  v13 = v6;
  v9 = *(id *)(a1 + 40);
  v14 = v5;
  v15 = v9;
  v10 = v5;
  v11 = v6;
  dispatch_async(v8, block);

}

void sub_100077B74(_QWORD *a1)
{
  uint64_t v1;
  id v2;

  v1 = a1[6];
  if (a1[4])
  {
    (*(void (**)(_QWORD, _QWORD))(v1 + 16))(a1[6], 0);
  }
  else
  {
    v2 = objc_msgSend(objc_alloc((Class)GKLeaderboardChallengeInviteStatusInternal), "initWithServerRepresentation:", a1[5]);
    (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v2, 0);

  }
}

void sub_100077E80(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:description:](NSError, "userErrorForCode:description:", 8, CFSTR("Request playerID does not match local player")));
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

NSSecureCoding *__cdecl sub_10007804C(id a1, NSDictionary *a2)
{
  NSDictionary *v2;
  id v3;

  v2 = a2;
  v3 = objc_msgSend(objc_alloc((Class)GKLeaderboardChallengeComparisonInternal), "initWithServerRepresentation:", v2);

  return (NSSecureCoding *)v3;
}

NSSecureCoding *__cdecl sub_100078200(id a1, NSDictionary *a2)
{
  NSDictionary *v2;
  id v3;

  v2 = a2;
  v3 = objc_msgSend(objc_alloc((Class)GKLeaderboardChallengeDetailsPageInternal), "initWithServerRepresentation:", v2);

  return (NSSecureCoding *)v3;
}

NSSecureCoding *__cdecl sub_1000783B4(id a1, NSDictionary *a2)
{
  NSDictionary *v2;
  id v3;

  v2 = a2;
  v3 = objc_msgSend(objc_alloc((Class)GKLeaderboardChallengeCompletedSummaryInternal), "initWithServerRepresentation:", v2);

  return (NSSecureCoding *)v3;
}

void sub_10007857C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100078D08((uint64_t)v7, v9);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "activeChallenges"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "actives"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_gkDistinctValuesForKeyPath:", CFSTR("challengeID")));

    v13 = *(void **)(a1 + 32);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allObjects"));
    objc_msgSend(v13, "getLeaderboardChallengeDetailsForChallengeIDs:allowStaleData:completionHandler:", v14, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));

  }
}

void sub_1000788D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100078988;
  v10[3] = &unk_1002BE508;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 40);
  v11 = v7;
  v12 = v8;
  v13 = v3;
  v9 = v3;
  objc_msgSend(v4, "getLeaderboardChallengeDetailsForChallengeID:allowStaleData:completionHandler:", v5, v6, v10);

}

void sub_100078988(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }
  else if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, *(_QWORD *)(a1 + 40));
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000789FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allValues"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allValues"));
  v4 = (void *)v3;
  if (v3)
    v5 = (void *)v3;
  else
    v5 = &__NSArray0__struct;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v5, v6);

}

void sub_100078B98(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientProxy"));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "replyQueue"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100078C94;
  v11[3] = &unk_1002BD7C0;
  v12 = v6;
  v15 = a1[6];
  v13 = v5;
  v14 = a1[5];
  v9 = v5;
  v10 = v6;
  dispatch_async(v8, v11);

}

void sub_100078C94(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 32))
  {
    (*(void (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)(a1 + 56), 0);
  }
  else
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));
    (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v2, 0);

  }
}

void sub_100078D08(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to retrieve leaderboard challenge summary: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100078FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100079000(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100079010(uint64_t a1)
{

}

void sub_100079018(uint64_t a1, int a2, void *a3)
{
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[7];

  v6 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKMultiplayerMatchService.m", 114, "-[GKMultiplayerMatchService fetchPseudonymIfNeededWithTransportContext:withCompletionHandler:]_block_invoke"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v7));

  v9 = *(_QWORD *)(a1 + 48);
  if (a2 && !*(_QWORD *)(*(_QWORD *)(v9 + 8) + 40))
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100079178;
    v16[3] = &unk_1002BFBD0;
    v10 = *(_QWORD *)(a1 + 56);
    v16[4] = *(_QWORD *)(a1 + 32);
    v16[5] = v10;
    v16[6] = v9;
    objc_msgSend(v8, "perform:", v16);
    v9 = *(_QWORD *)(a1 + 48);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000792A4;
  v12[3] = &unk_1002BFBF8;
  v11 = *(_QWORD *)(a1 + 56);
  v14 = v9;
  v15 = v11;
  v13 = *(id *)(a1 + 40);
  objc_msgSend(v8, "notifyOnMainQueueWithBlock:", v12);

}

void sub_100079178(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  __int128 v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pseudonymManager"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100079218;
  v6[3] = &unk_1002BFBA8;
  v8 = *(_OWORD *)(a1 + 40);
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "fetchPseudonymWithCompletionHandler:", v6);

}

void sub_100079218(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1[5] + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v12 = v5;

  v9 = *(_QWORD *)(a1[6] + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;
  v11 = v6;

  (*(void (**)(void))(a1[4] + 16))();
}

uint64_t sub_1000792A4(_QWORD *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);

  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
  {
    if (!os_log_GKGeneral)
      v2 = (id)GKOSLoggers(a1);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_10008974C();
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40)
    || (v3 = objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 35, *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))), v4 = *(_QWORD *)(a1[5] + 8), v5 = *(void **)(v4 + 40), *(_QWORD *)(v4 + 40) = v3, v5, *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40)))
  {
    v6 = *(uint64_t (**)(void))(a1[4] + 16);
  }
  else
  {
    v6 = *(uint64_t (**)(void))(a1[4] + 16);
  }
  return v6();
}

void sub_1000796CC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  objc_msgSend(v4, "beginTransaction:", CFSTR("matchRequest"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000797F8;
  v11[3] = &unk_1002BFC70;
  v6 = *(void **)(a1 + 40);
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v6;
  v13 = *(id *)(a1 + 48);
  v17 = v3;
  v14 = *(id *)(a1 + 56);
  v7 = *(id *)(a1 + 64);
  v9 = *(void **)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v15 = v7;
  v18 = v8;
  v16 = v9;
  v10 = v3;
  objc_msgSend(v5, "getValidNATTypeWithForceRelay:withHandler:", 0, v11);

}

void sub_1000797F8(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000798F0;
  v10[3] = &unk_1002BFC48;
  v11 = *(id *)(a1 + 48);
  v17 = *(id *)(a1 + 80);
  v6 = *(id *)(a1 + 56);
  v18 = a2;
  v7 = *(_QWORD *)(a1 + 32);
  v12 = v6;
  v13 = v7;
  v8 = *(id *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 88);
  v14 = v8;
  v19 = v9;
  v15 = *(id *)(a1 + 72);
  v16 = *(id *)(a1 + 40);
  objc_msgSend(v4, "fetchPseudonymIfNeededWithTransportContext:withCompletionHandler:", v5, v10);

}

void sub_1000798F0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  id v25;

  v5 = a2;
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setSelfPseudonym:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKReachability _gkReachabilityForInternetConnection](GKReachability, "_gkReachabilityForInternetConnection"));
    v7 = *(_QWORD *)(a1 + 88) | (8 * (objc_msgSend(v6, "_gkCurrentReachabilityStatus") == 2));
    v9 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 48), v8), "makeBaseServerRequestForMatchRequest:playerCount:rematchID:connInfo:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 64), v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v12 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 48), v11), "makePlayersDictionaryForMatchRequest:transportContext:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    objc_msgSend(v10, "setObject:forKey:", v13, CFSTR("players"));

    if (objc_msgSend(*(id *)(a1 + 56), "matchType"))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 1));
      objc_msgSend(v10, "setObject:forKey:", v14, GKServerHostedKey);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 72), "enrichServerRequest:withMatchRequest:selfPseudonym:", v10, *(_QWORD *)(a1 + 56), v5);
      objc_msgSend(*(id *)(a1 + 48), "validateRequests:andFileMultiplayerTTRIfNeededWithContext:", v10, CFSTR("[Internal Only] Found invalid transport version for matchmaking request."));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", GKMatchClientDataKey));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 88)));
      objc_msgSend(v14, "setObject:forKey:", v15, CFSTR("nat-type"));

      v16 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "pushToken"));

      if (v17)
        objc_msgSend(v14, "setObject:forKey:", v17, GKMatchPushTokenKey);
      objc_msgSend(v14, "setObject:forKey:", v5, GKTransportPseudonymKey);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 56), "isLateJoin")));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v18, CFSTR("is-late-join"));

    }
    objc_msgSend(*(id *)(a1 + 40), "setServerRequest:", v10);
    v19 = *(void **)(a1 + 32);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100079BB4;
    v22[3] = &unk_1002BB4A0;
    v20 = *(_QWORD *)(a1 + 48);
    v23 = v10;
    v24 = v20;
    v25 = v19;
    v21 = v10;
    objc_msgSend(v19, "perform:", v22);
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();

  }
}

void sub_100079BB4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100079C90;
  v9[3] = &unk_1002BCC88;
  v7 = *(void **)(a1 + 48);
  v9[4] = *(_QWORD *)(a1 + 40);
  v10 = v7;
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-request-match"), v6, v9);

}

void sub_100079C90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v5 = a3;
  v9 = v5;
  if (!v5)
  {
    v6 = *(void **)(a1 + 32);
    v7 = a2;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "clientProxy"));
    objc_msgSend(v8, "processMatchResponse:", v7);

    v5 = 0;
  }
  objc_msgSend(*(id *)(a1 + 40), "setError:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100079D1C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  if ((objc_msgSend(*(id *)(a1 + 32), "isCancelled") & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "isTimeout") & 1) != 0)
  {
    v2 = 33;
  }
  else
  {
    if (!objc_msgSend(*(id *)(a1 + 32), "isNetworkError"))
      goto LABEL_8;
    v2 = 3;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", v2, 0));
  objc_msgSend(*(id *)(a1 + 40), "setError:", v3);

LABEL_8:
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
    (*(void (**)(uint64_t, uint64_t, void *))(v4 + 16))(v4, v5, v6);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  objc_msgSend(v7, "setCurrentMatchResponse:", 0);

  v8 = (id)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  objc_msgSend(v8, "endTransaction:", CFSTR("matchRequest"));

}

void sub_10007A790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007A7BC(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  id WeakRetained;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  void (**v9)(_QWORD);

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v6 = *(_QWORD *)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "clientProxy"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10007A8A8;
    v8[3] = &unk_1002BBA68;
    v9 = v3;
    objc_msgSend(v5, "issueRequest:bagKey:clientProxy:handler:", v6, CFSTR("gk-cancel-match"), v7, v8);

  }
  else
  {
    v3[2](v3);
  }

}

uint64_t sub_10007A8A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10007ACB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10007ACCC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  BOOL v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  uint64_t v35;
  id v36;
  _QWORD v37[4];
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  const __CFString *v47;
  uint64_t v48;
  const __CFString *v49;
  uint64_t v50;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "gameDescriptor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v8, v5));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game == %@ && playerGroup == %@ && queueName == %@"), v9, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKFlowRateCacheObject, "firstObjectMatchingPredicate:context:", v10, v5));
  v12 = v11;
  if (v11)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "playersPerMinute"));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v13, "unsignedIntegerValue");

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "expirationDate"));
    objc_msgSend(v14, "timeIntervalSinceNow");
    v16 = v15 > 0.0;

  }
  else
  {
    v16 = 0;
  }
  if (!os_log_GKGeneral)
    v17 = (id)GKOSLoggers(v11);
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
  {
    sub_100089824();
    if (v16)
      goto LABEL_16;
  }
  else if (v16)
  {
    goto LABEL_16;
  }
  v18 = *(void **)(a1 + 56);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKMultiplayerMatchService.m", 412, "-[GKMultiplayerMatchService getFlowRateWithPlayerGroup:queueName:handler:]_block_invoke"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "transactionGroupWithName:", v19));

  v21 = *(_QWORD *)(a1 + 40);
  if (v21)
  {
    v49 = CFSTR("bucket-id");
    v50 = v21;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1));
  }
  else
  {
    v22 = 0;
  }
  v23 = *(_QWORD *)(a1 + 48);
  if (v23)
  {
    v47 = CFSTR("queue-name");
    v48 = v23;
    v24 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1));

    v22 = (void *)v24;
  }
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_10007B08C;
  v37[3] = &unk_1002BFD60;
  v25 = v22;
  v26 = *(_QWORD *)(a1 + 32);
  v38 = v25;
  v39 = v26;
  v27 = v20;
  v40 = v27;
  v41 = v12;
  v42 = v5;
  v43 = v9;
  v44 = *(id *)(a1 + 40);
  v28 = *(id *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 64);
  v45 = v28;
  v46 = v29;
  objc_msgSend(v27, "perform:", v37);
  if (!v12)
  {
    v30 = *(void **)(a1 + 56);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10007B3F8;
    v33[3] = &unk_1002BB4A0;
    v31 = v27;
    v32 = *(_QWORD *)(a1 + 32);
    v34 = v31;
    v35 = v32;
    v36 = *(id *)(a1 + 56);
    objc_msgSend(v30, "perform:", v33);

  }
LABEL_16:
  v6[2](v6);

}

void sub_10007B08C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10007B1D0;
  v10[3] = &unk_1002BFD38;
  v11 = *(id *)(a1 + 48);
  v12 = *(id *)(a1 + 56);
  v13 = *(id *)(a1 + 64);
  v14 = *(id *)(a1 + 72);
  v15 = *(id *)(a1 + 80);
  v7 = *(id *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v17 = v3;
  v18 = v8;
  v16 = v7;
  v9 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-get-flow-rate"), v6, v10);

}

void sub_10007B1D0(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  double v20;

  v11 = a2;
  v7 = a3;
  if (v11 && !v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10007B314;
    v12[3] = &unk_1002BFD10;
    v13 = *(id *)(a1 + 40);
    v14 = *(id *)(a1 + 48);
    v15 = *(id *)(a1 + 56);
    v16 = *(id *)(a1 + 64);
    v17 = *(id *)(a1 + 72);
    v9 = v11;
    v20 = a4;
    v10 = *(_QWORD *)(a1 + 88);
    v18 = v9;
    v19 = v10;
    objc_msgSend(v8, "performBlockAndWait:", v12);

  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();

}

void sub_10007B314(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  GKFlowRateCacheObject *v5;

  v5 = (GKFlowRateCacheObject *)*(id *)(a1 + 32);
  if (!v5)
  {
    v5 = -[GKCacheObject initWithManagedObjectContext:]([GKFlowRateCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
    -[GKFlowRateCacheObject setGame:](v5, "setGame:", *(_QWORD *)(a1 + 48));
    -[GKFlowRateCacheObject setPlayerGroup:](v5, "setPlayerGroup:", *(_QWORD *)(a1 + 56));
    -[GKFlowRateCacheObject setQueueName:](v5, "setQueueName:", *(_QWORD *)(a1 + 64));
  }
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "valueForKey:", CFSTR("players-per-min")));
  -[GKFlowRateCacheObject setPlayersPerMinute:](v5, "setPlayersPerMinute:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 88)));
  -[GKFlowRateCacheObject setExpirationDate:](v5, "setExpirationDate:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[GKFlowRateCacheObject playersPerMinute](v5, "playersPerMinute"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = objc_msgSend(v4, "unsignedIntegerValue");

}

void sub_10007B3F8(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10007B4D0;
  v8[3] = &unk_1002BB568;
  v9 = a1[6];
  v10 = a1[4];
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v8);

}

uint64_t sub_10007B4D0(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10007B514(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);

}

void sub_10007B728(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSPredicate *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  char v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  int8x16_t v34;
  _QWORD v35[4];
  id v36;
  int8x16_t v37;
  _QWORD v38[4];
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  uint8_t buf[4];
  void *v45;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("short-bundle-version")));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("bundle-id")));
  v9 = *(void **)(a1 + 32);
  if (v7)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("short-bundle-version")));
    v11 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("bundleID = %@ AND shortVersion = %@"), v8, v10);
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("bundle-version")));
    v11 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("bundleID = %@ AND version = %@"), v8, v10);
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject firstObjectMatchingPredicate:context:](GKCompatibilityListCacheObject, "firstObjectMatchingPredicate:context:", v12, v5));
  v14 = objc_msgSend(v13, "isValid");
  v15 = v14;
  if (!v14)
    goto LABEL_10;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "internalRepresentation"));
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v16, CFSTR("result"));

  if (!os_log_GKGeneral)
    v18 = (id)GKOSLoggers(v17);
  v19 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v20 = *(void **)(a1 + 40);
    v21 = v19;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("result")));
    *(_DWORD *)buf = 138412290;
    v45 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "List of compatible games:%@", buf, 0xCu);

  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "expirationDate"));
  objc_msgSend(v23, "timeIntervalSinceNow");
  v25 = v24;

  if (v25 <= 0.0)
  {
LABEL_10:
    v26 = *(void **)(a1 + 40);
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKMultiplayerMatchService.m", 491, "-[GKMultiplayerMatchService getCompatibilityMatrix:handler:]_block_invoke"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "transactionGroupWithName:", v27));

    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_10007BABC;
    v38[3] = &unk_1002BC010;
    v29 = *(id *)(a1 + 32);
    v30 = *(_QWORD *)(a1 + 48);
    v39 = v29;
    v40 = v30;
    v31 = v28;
    v41 = v31;
    v42 = v13;
    v43 = v5;
    objc_msgSend(v31, "perform:", v38);
    if ((v15 & 1) == 0)
    {
      v32 = *(void **)(a1 + 40);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_10007BE88;
      v35[3] = &unk_1002BB4A0;
      v36 = v31;
      v34 = *(int8x16_t *)(a1 + 40);
      v33 = (id)v34.i64[0];
      v37 = vextq_s8(v34, v34, 8uLL);
      objc_msgSend(v32, "perform:", v35);

    }
  }
  v6[2](v6);

}

void sub_10007BABC(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  const __CFString *v14;
  id v15;

  v3 = a2;
  v14 = CFSTR("game");
  v15 = a1[4];
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10007BC34;
  v8[3] = &unk_1002BF0B8;
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  v12 = a1[4];
  v13 = v3;
  v7 = v3;
  objc_msgSend(v5, "issueRequest:bagKey:clientProxy:handler:", v4, CFSTR("gk-get-compatible-games"), v6, v8);

}

void sub_10007BC34(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  double v16;

  v9 = a2;
  v7 = a3;
  if (v9 && !v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10007BD60;
    v10[3] = &unk_1002BE348;
    v11 = *(id *)(a1 + 40);
    v16 = a4;
    v12 = *(id *)(a1 + 48);
    v13 = *(id *)(a1 + 56);
    v14 = v9;
    v15 = *(id *)(a1 + 32);
    objc_msgSend(v8, "performBlockAndWait:", v10);

  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_10007BD60(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  GKCompatibilityListCacheObject *v7;

  v7 = (GKCompatibilityListCacheObject *)*(id *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 72)));
  if (!v7)
  {
    v7 = -[GKCacheObject initWithManagedObjectContext:]([GKCompatibilityListCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("bundle-id")));
    -[GKCompatibilityListCacheObject setBundleID:](v7, "setBundleID:", v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("bundle-version")));
    -[GKCompatibilityListCacheObject setVersion:](v7, "setVersion:", v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("short-bundle-version")));
    -[GKCompatibilityListCacheObject setShortVersion:](v7, "setShortVersion:", v5);

  }
  -[GKCompatibilityListCacheObject updateWithServerRepresentation:expirationDate:](v7, "updateWithServerRepresentation:expirationDate:", *(_QWORD *)(a1 + 56), v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[GKListCacheObject internalRepresentation](v7, "internalRepresentation"));
  objc_msgSend(*(id *)(a1 + 64), "setObject:forKeyedSubscript:", v6, CFSTR("result"));

}

void sub_10007BE88(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = a1[4];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10007BF60;
  v8[3] = &unk_1002BB568;
  v9 = a1[6];
  v10 = a1[4];
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v8);

}

uint64_t sub_10007BF60(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("result")));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v3, CFSTR("result"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10007BFDC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("result")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10007C270(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareRecordID"));
  v15 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession privateDatabase](GKCloudGameSession, "privateDatabase"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10007C3B0;
  v10[3] = &unk_1002BD770;
  v11 = *(id *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v12 = v7;
  v13 = v8;
  v14 = v3;
  v9 = v3;
  +[GKCloudGameSession fetchShareRecordsWithRecordIDs:inDatabase:handler:](GKCloudGameSession, "fetchShareRecordsWithRecordIDs:inDatabase:handler:", v5, v6, v10);

}

void sub_10007C3B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD v14[4];
  id v15;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "shareRecordID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

  if (v9)
  {
    objc_msgSend(v9, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("invitedPlayers"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10007C4F8;
    v14[3] = &unk_1002BFD88;
    v11 = *(void **)(a1 + 48);
    v15 = *(id *)(a1 + 56);
    objc_msgSend(v11, "saveRecord:withHandler:", v9, v14);

  }
  else
  {
    if (!os_log_GKGeneral)
      v12 = (id)GKOSLoggers(v10);
    v13 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_100089904((void **)(a1 + 32), v13, (uint64_t)v5);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_10007C4F8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  uint8_t v11[16];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_1000899B8();
  }
  else
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(0);
    v10 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Saved invitee record to CloudKit, where invitedPlayers entry maps [MessagesID : playerID].", v11, 2u);
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10007C908(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  void *v4;
  void *v5;
  uint64_t v6;
  const __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  __CFString *v19;
  __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned __int8 v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  char v43;
  unsigned __int8 v44;
  BOOL v45;
  _QWORD v46[4];
  id v47;
  id v48;
  uint64_t v49;

  v2 = a2;
  v49 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "hasGuestPlayers")));
  objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("requires-guest-player-capability"));

  objc_msgSend(v4, "setObject:forKey:", *(_QWORD *)(a1 + 40), CFSTR("peers"));
  if (*(_BYTE *)(a1 + 88))
  {
    v6 = 3;
    v7 = CFSTR("nearby");
  }
  else if (objc_msgSend(*(id *)(a1 + 56), "count")
         || objc_msgSend(*(id *)(a1 + 40), "count")
         && (v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", 0)),
             v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("push-token"))),
             v9,
             v8,
             v9))
  {
    v6 = 4;
    v7 = CFSTR("shareplay");
  }
  else
  {
    v6 = 1;
    v7 = CFSTR("standard");
  }
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, CFSTR("mode"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6));
  objc_msgSend(*(id *)(a1 + 48), "setApproachUsed:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "isLateJoin")));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v11, CFSTR("is-late-join"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "pushToken"));

  if (v13)
    objc_msgSend(v4, "setObject:forKey:", v13, CFSTR("self-push-token"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "clientProxy"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fetchOrCreateInviteSession"));

  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472;
  v46[2] = sub_10007CDE0;
  v46[3] = &unk_1002BB658;
  v16 = v15;
  v47 = v16;
  v17 = v4;
  v48 = v17;
  objc_msgSend(v16, "performSync:", v46);
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v2));
  objc_msgSend(v17, "setObject:forKey:", v18, CFSTR("self-nat-type"));

  v19 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inviteMessage"));
  v20 = v19;
  if (!v19)
    v19 = &stru_1002CE2A8;
  v21 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString dataUsingEncoding:](v19, "dataUsingEncoding:", 4));

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", (char *)objc_msgSend(v21, "length") + 2));
  objc_msgSend(v22, "appendBytes:length:", &v49, 1);
  v45 = objc_msgSend(*(id *)(a1 + 32), "matchType") == (id)1;
  objc_msgSend(v22, "appendBytes:length:", &v45, 1);
  objc_msgSend(v22, "appendData:", v21);
  objc_msgSend(v22, "appendBytes:length:", &unk_1002328C8, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "defaultInviteVersionFromMinimumSupportedTransportVersion"));
  v24 = objc_msgSend(v23, "unsignedIntValue");

  v44 = v24;
  objc_msgSend(v22, "appendBytes:length:", &v44, 1);
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", v22, CFSTR("s"), 0));
  objc_msgSend(v17, "setObject:forKey:", v25, GKMatchClientDataKey);
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "playerGroup")));
  objc_msgSend(v25, "setObject:forKey:", v26, CFSTR("g"));

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "playerAttributes")));
  objc_msgSend(v25, "setObject:forKey:", v27, CFSTR("a"));

  v28 = *(void **)(a1 + 64);
  v29 = *(_QWORD *)(a1 + 72);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_10007CEF4;
  v34[3] = &unk_1002BFDD8;
  v41 = *(id *)(a1 + 80);
  v42 = v49;
  v35 = *(id *)(a1 + 48);
  v36 = v13;
  v37 = *(id *)(a1 + 72);
  v38 = v17;
  v30 = *(_QWORD *)(a1 + 64);
  v43 = *(_BYTE *)(a1 + 89);
  v39 = v30;
  v40 = v16;
  v31 = v16;
  v32 = v17;
  v33 = v13;
  objc_msgSend(v28, "fetchPseudonymIfNeededWithTransportContext:withCompletionHandler:", v29, v34);

}

void sub_10007CDE0(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionToken"));
  v3 = v2;
  if (v2)
    v2 = objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v2, CFSTR("session-token"));
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v2);
  v5 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v6 = *(void **)(a1 + 32);
    v7 = v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "sessionToken"));
    v9 = 138412290;
    v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Session token for initiate request: %@", (uint8_t *)&v9, 0xCu);

  }
}

void sub_10007CEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  char v19;
  uint8_t buf[4];
  uint64_t v21;

  if (a3)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), 0, *(_QWORD *)(a1 + 88), a3, *(_QWORD *)(a1 + 32));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setSelfPseudonym:", a2);
    objc_msgSend(*(id *)(a1 + 32), "setSelfPushToken:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 48), "enrichServerRequest:andInviteResponse:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32));
    v4 = objc_msgSend(*(id *)(a1 + 64), "validateRequests:andFileMultiplayerTTRIfNeededWithContext:", *(_QWORD *)(a1 + 56), CFSTR("[Internal Only] Found invalid transport version for invitation request."));
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v4);
    v6 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "gk-invitation-initiate request: %@", buf, 0xCu);
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "clientProxy"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10007D100;
    v13[3] = &unk_1002BFDB0;
    v14 = *(id *)(a1 + 32);
    v15 = *(id *)(a1 + 48);
    v19 = *(_BYTE *)(a1 + 96);
    v16 = *(id *)(a1 + 72);
    v11 = *(id *)(a1 + 80);
    v12 = *(_QWORD *)(a1 + 88);
    v17 = v11;
    v18 = v12;
    objc_msgSend(v8, "issueRequest:bagKey:clientProxy:handler:", v9, CFSTR("gk-invitation-initiate"), v10, v13);

  }
}

void sub_10007D100(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  _QWORD v49[4];
  id v50;
  id v51;
  id v52;
  uint8_t buf[4];
  void *v54;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = v6;
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_100089A78();
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("status")));

    if (!v9)
      goto LABEL_10;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("status")));
    v11 = objc_msgSend(v10, "integerValue");

    if (v11 != (id)5020)
      goto LABEL_10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("peers")));
    v13 = objc_msgSend(v12, "count");

    if (!v13
      || (v14 = v5,
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo")),
          v16 = objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 5020, v15)), v7, v15, v7 = (void *)v16, !v5))
    {
LABEL_10:
      v17 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    v18 = v5;
    if (!os_log_GKGeneral)
      v19 = (id)GKOSLoggers(v18);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
      sub_100089A18();
    v7 = 0;
    if (!v5)
      goto LABEL_10;
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", GKSuggestedTransportVersionKey));
  v21 = v20;
  if (v20 && objc_msgSend(v20, "integerValue"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setTransportVersionToUse:", v21);
  }
  else
  {
    v22 = objc_msgSend(*(id *)(a1 + 40), "validTransportSelected");
    if ((_DWORD)v22)
    {
      if (!os_log_GKGeneral)
        v23 = (id)GKOSLoggers(v22);
      v24 = (void *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        v25 = *(void **)(a1 + 40);
        v26 = v24;
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "selectedTransport"));
        *(_DWORD *)buf = 138412290;
        v54 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "We didn't get transport suggestion from server, but we have previously selected transport. Use it. %@", buf, 0xCu);

      }
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectedTransport"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v28, "version")));
      objc_msgSend(*(id *)(a1 + 32), "setTransportVersionToUse:", v29);

    }
  }
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transportVersionToUse"));

  if (!v30)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v34 = objc_msgSend(*(id *)(a1 + 32), "setTransportVersionToUse:", &off_1002DB5B0);
      if (!os_log_GKGeneral)
        v35 = (id)GKOSLoggers(v34);
      v36 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Use V2 transport since message invitees are all available for v2.", buf, 2u);
      }
    }
    else
    {
      v37 = *(void **)(a1 + 40);
      v48 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "forceEnabledTransportVersions"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "forceDisabledTransportVersions"));
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "defaultTransportWithForceEnabledTransports:andForceDisabledTransports:", v38, v40));
      v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v41, "version")));
      objc_msgSend(*(id *)(a1 + 32), "setTransportVersionToUse:", v42);

      if (!os_log_GKGeneral)
        v44 = (id)GKOSLoggers(v43);
      v45 = (void *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        v46 = v45;
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 1));
        *(_DWORD *)buf = 138412290;
        v54 = v47;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Default to use GKDefaultTransportVersionIfNeeded = %@, since this is not included in the response.", buf, 0xCu);

      }
    }
  }

  v17 = v5;
LABEL_27:
  v31 = *(void **)(a1 + 48);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  v49[2] = sub_10007D664;
  v49[3] = &unk_1002BC380;
  v32 = v17;
  v50 = v32;
  v51 = *(id *)(a1 + 48);
  v52 = *(id *)(a1 + 32);
  objc_msgSend(v31, "performSync:", v49);
  v33 = *(_QWORD *)(a1 + 56);
  if (v33)
    (*(void (**)(uint64_t, id, _QWORD, void *, _QWORD))(v33 + 16))(v33, v32, *(_QWORD *)(a1 + 64), v7, *(_QWORD *)(a1 + 32));

}

void sub_10007D664(id *a1)
{
  id v2;
  void *v3;
  id v4;
  NSObject *v5;
  _BOOL8 v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKey:", CFSTR("session-token")));
  v3 = v2;
  if (v2)
  {
    objc_msgSend(a1[5], "setSessionToken:", v2);
    v2 = objc_msgSend(a1[6], "setSessionToken:", v3);
  }
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v2);
  v5 = os_log_GKMatch;
  v6 = os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO);
  if (v6)
  {
    v12 = 138412290;
    v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Session token from initiate response: %@", (uint8_t *)&v12, 0xCu);
  }
  if (!os_log_GKGeneral)
    v7 = (id)GKOSLoggers(v6);
  v8 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v9 = a1[5];
    v10 = v8;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sessionToken"));
    v12 = 138412290;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "session.sessionToken %@", (uint8_t *)&v12, 0xCu);

  }
}

void sub_10007DBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  id *v25;
  uint64_t v26;

  objc_destroyWeak(v25);
  objc_destroyWeak((id *)(v26 - 144));
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_10007DC2C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "messagesID"));

  if (v6)
  {
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "messagesID"));
    objc_msgSend(v7, "addObject:", v8);

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }

}

void sub_10007DCB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id WeakRetained;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _BOOL8 v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (!os_log_GKGeneral)
    v11 = (id)GKOSLoggers(v9);
  v12 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v13 = v12;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v7, "count")));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "count")));
    v22 = 138412802;
    v23 = v10;
    v24 = 2112;
    v25 = v14;
    v26 = 2112;
    v27 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Fetched IDS message V2. Error: %@. available: %@ unavailable: %@", (uint8_t *)&v22, 0x20u);

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = objc_msgSend(*(id *)(a1 + 56), "count");
  v21 = v20 == objc_msgSend(v7, "count") && objc_msgSend(v8, "count") == 0;
  objc_msgSend(WeakRetained, "loadCloudKitShareURLWithPlayer:matchRequest:transportContext:availableForMessageV2:handler:", v17, v18, v19, v21, *(_QWORD *)(a1 + 64));

}

void sub_10007E0BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 72);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10007E1C4;
  v11[3] = &unk_1002BFEA0;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  v17 = v3;
  v9 = *(_QWORD *)(a1 + 32);
  v12 = v8;
  v13 = v9;
  v14 = *(id *)(a1 + 64);
  v15 = *(id *)(a1 + 48);
  v16 = *(id *)(a1 + 40);
  v10 = v3;
  objc_msgSend(v4, "initiateInvitationForMatchRequest:recipients:devicePushTokenMap:isNearbyInvite:availableForMessageV2:transportContext:handler:", v5, &__NSArray0__struct, 0, 0, v6, v7, v11);

}

void sub_10007E1C4(uint64_t a1, void *a2, unsigned __int8 a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  NSObject *v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  NSObject *v63;
  void *v64;
  id v65;
  uint64_t v66;
  id v67;
  id v68;
  _QWORD v69[4];
  id v70;
  uint64_t v71;
  id v72;
  id v73;
  id v74;
  id v75;
  _QWORD v76[4];
  id v77;
  id v78;
  uint8_t buf[4];
  id v80;

  v9 = a2;
  v10 = a4;
  v11 = a5;
  v12 = v11;
  if (v10)
  {
    if (!os_log_GKGeneral)
      v13 = (id)GKOSLoggers(v11);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_100089BA0();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v10);
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    v68 = v9;
    v14 = objc_alloc_init((Class)NSMutableDictionary);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "bundleIdentifier"));
    objc_msgSend(v14, "setObject:forKey:", v16, CFSTR("bundle-id"));

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "bundleVersion"));
    objc_msgSend(v14, "setObject:forKey:", v18, CFSTR("bundle-version"));

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "bundleShortVersion"));

    if (v20)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "bundleShortVersion"));
      objc_msgSend(v14, "setObject:forKey:", v22, CFSTR("short-bundle-version"));

    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "adamID"));

    if (v24)
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "adamID"));
      objc_msgSend(v14, "setObject:forKey:", v26, CFSTR("adam-id"));

    }
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerID"));
    objc_msgSend(v14, "setObject:forKey:", v27, CFSTR("playerID"));

    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a3));
    objc_msgSend(v14, "setObject:forKey:", v28, CFSTR("self-nat-type"));

    objc_msgSend(*(id *)(a1 + 56), "enrichConnectionDictionary:inviteResponse:", v14, v12);
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "fetchOrCreateInviteSession"));

    v76[0] = _NSConcreteStackBlock;
    v76[1] = 3221225472;
    v76[2] = sub_10007EA70;
    v76[3] = &unk_1002BB658;
    v77 = v30;
    v31 = v14;
    v78 = v31;
    v67 = v77;
    objc_msgSend(v77, "performSync:", v76);
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "pushToken"));

    if (v33)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "base64EncodedStringWithOptions:", 0));
      objc_msgSend(v31, "setObject:forKey:", v34, CFSTR("self-push-token"));

    }
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 64), "playerGroup")));
    objc_msgSend(v31, "setObject:forKey:", v35, CFSTR("g"));

    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 64), "playerAttributes")));
    objc_msgSend(v31, "setObject:forKey:", v36, CFSTR("a"));

    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 64), "matchType")));
    objc_msgSend(v31, "setObject:forKey:", v37, CFSTR("matchType"));

    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "defaultInviteVersionFromMinimumSupportedTransportVersion"));
    objc_msgSend(v31, "setObject:forKey:", v38, CFSTR("inviteVersion"));

    objc_msgSend(v31, "setObject:forKey:", &off_1002DB5C8, CFSTR("invite-type"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "selfPseudonym"));
    objc_msgSend(v31, "setObject:forKey:", v39, GKTransportPseudonymKey);

    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "transportVersionToUse"));
    objc_msgSend(v31, "setObject:forKey:", v40, GKSuggestedTransportVersionPushShortKey);

    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "transportVersionToUse"));
    v42 = objc_msgSend(v41, "integerValue");

    if (v42 == (id)2)
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lobbyParticipantsInfo"));

      if (v45)
      {
        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lobbyParticipantsInfo"));
        objc_msgSend(v44, "setObject:forKey:", v46, GKInviteLobbyParticipantsKey);

      }
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "gameParticipantsInfo"));

      if (v47)
      {
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "gameParticipantsInfo"));
        objc_msgSend(v44, "setObject:forKey:", v48, GKInviteGameParticipantsKey);

      }
      if (objc_msgSend(v44, "count"))
      {
        v75 = 0;
        v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v44, 1, &v75));
        v50 = v75;
        v51 = v50;
        if (v49)
        {
          objc_msgSend(v31, "setObject:forKey:", v49, GKInviteArchivedParticipantInfoKey);
        }
        else if (v50)
        {
          if (!os_log_GKGeneral)
            v52 = (id)GKOSLoggers(v50);
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
            sub_100089B38();
        }

      }
      objc_msgSend(v31, "setObject:forKey:", &off_1002DB5B0, CFSTR("inviteVersion"));

    }
    if (!os_log_GKGeneral)
      v53 = (id)GKOSLoggers(v43);
    v54 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v80 = v31;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "GK-InviteMessages: loadDataForURL connectionDictionary: %@", buf, 0xCu);
    }
    v55 = objc_msgSend(objc_alloc((Class)CKRecordZoneID), "initWithZoneName:ownerName:", CFSTR("com.apple.legacygaming.invites"), CKCurrentUserDefaultName);
    v56 = objc_msgSend(objc_alloc((Class)CKRecord), "initWithRecordType:zoneID:", CFSTR("LegacyMultiplayerInvites"), v55);
    v74 = 0;
    v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v31, 1, &v74));
    v58 = v74;
    if (v58)
    {
      v59 = objc_msgSend(*(id *)(a1 + 32), "setError:", v58);
      if (!os_log_GKGeneral)
        v60 = (id)GKOSLoggers(v59);
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
        sub_100089AD8();
    }
    else
    {
      v61 = objc_msgSend(v56, "setObject:forKeyedSubscript:", v57, CFSTR("connectionData"));
      if (!os_log_GKGeneral)
        v62 = (id)GKOSLoggers(v61);
      v63 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v80 = v57;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "GK-InviteMessages: loadDataForURL record for inviteData: %@", buf, 0xCu);
      }
      v64 = *(void **)(a1 + 32);
      v69[0] = _NSConcreteStackBlock;
      v69[1] = 3221225472;
      v69[2] = sub_10007EB7C;
      v69[3] = &unk_1002BC3A8;
      v65 = v56;
      v66 = *(_QWORD *)(a1 + 40);
      v70 = v65;
      v71 = v66;
      v72 = v12;
      v73 = *(id *)(a1 + 32);
      objc_msgSend(v64, "perform:", v69);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

    v9 = v68;
  }

}

void sub_10007EA70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  int v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionToken"));
  v3 = v2;
  if (v2)
  {
    v4 = *(void **)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "base64EncodedStringWithOptions:", 0));
    objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("session-token"));

  }
  if (!os_log_GKGeneral)
    v6 = (id)GKOSLoggers(v2);
  v7 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v8 = 138412290;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Session token for CloudKit record: %@", (uint8_t *)&v8, 0xCu);
  }

}

void sub_10007EB7C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  uint8_t buf[4];
  uint64_t v28;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "share"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "recordID"));
  v6 = v5;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    v8 = objc_alloc((Class)CKRecordID);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordName"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), CFSTR("share"), v10));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneID"));
    v7 = objc_msgSend(v8, "initWithRecordName:zoneID:", v11, v13);

  }
  v14 = *(void **)(a1 + 40);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordID"));
  objc_msgSend(v14, "setShareRecordID:", v15);

  if (!os_log_GKGeneral)
    v17 = (id)GKOSLoggers(v16);
  v18 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v19 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v28 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Setting up CKShare for record: %@", buf, 0xCu);
  }
  v21 = *(_QWORD *)(a1 + 32);
  v20 = *(void **)(a1 + 40);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10007EDD8;
  v23[3] = &unk_1002BFE78;
  v24 = *(id *)(a1 + 48);
  v25 = *(id *)(a1 + 56);
  v26 = v3;
  v22 = v3;
  objc_msgSend(v20, "setupInviteShareWithRecordID:rootRecord:handler:", v7, v21, v23);

}

void sub_10007EDD8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "URL"));
  objc_msgSend(*(id *)(a1 + 32), "setCloudKitShareURL:", v6);

  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), CFSTR("inviteResponse"));
  if (v5)
  {
    v7 = objc_msgSend(*(id *)(a1 + 40), "setError:", v5);
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v7);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_100089C00();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10007EEA0(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("inviteResponse")));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);

  }
}

void sub_10007F0F8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[5];
  id v23;
  id v24;
  id v25;
  _BYTE v26[128];

  v6 = a2;
  v7 = a4;
  if (objc_msgSend(*(id *)(a1 + 32), "zoneNotFoundFromOperation:operationError:", CFSTR("setupInviteShareWithRecordID"), v7))
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10007F31C;
    v22[3] = &unk_1002BE8A8;
    v8 = *(void **)(a1 + 40);
    v22[4] = *(_QWORD *)(a1 + 32);
    v23 = v8;
    v24 = *(id *)(a1 + 48);
    v25 = *(id *)(a1 + 64);
    +[GKCloudGameSession createZoneWithName:handler:](GKCloudGameSession, "createZoneWithName:handler:", CFSTR("com.apple.legacygaming.invites"), v22);

  }
  else if (*(_QWORD *)(a1 + 64))
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v9 = v6;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    if (v10)
    {
      v17 = v6;
      v11 = *(_QWORD *)v19;
      while (2)
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v11)
            objc_enumerationMutation(v9);
          v13 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "recordID"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "recordID"));
          v16 = objc_msgSend(v14, "isEqual:", v15);

          if (v16)
          {
            v10 = v13;
            goto LABEL_14;
          }
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
        if (v10)
          continue;
        break;
      }
LABEL_14:
      v6 = v17;
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }

}

id *sub_10007F31C(id *result, uint64_t a2)
{
  if (!a2)
    return (id *)_objc_msgSend(result[4], "setupInviteShareWithRecordID:rootRecord:shouldRetry:handler:", result[5], result[6], 0, result[7]);
  return result;
}

void sub_10007F6E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];
  id v9;
  id v10;

  v5 = a4;
  if (objc_msgSend(*(id *)(a1 + 32), "zoneNotFoundFromOperation:operationError:", CFSTR("saveRecord"), v5))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10007F7C0;
    v8[3] = &unk_1002BB8F0;
    v6 = *(void **)(a1 + 40);
    v8[4] = *(_QWORD *)(a1 + 32);
    v9 = v6;
    v10 = *(id *)(a1 + 48);
    +[GKCloudGameSession createZoneWithName:handler:](GKCloudGameSession, "createZoneWithName:handler:", CFSTR("com.apple.legacygaming.invites"), v8);

  }
  else
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (v7)
      (*(void (**)(uint64_t, _QWORD, id))(v7 + 16))(v7, *(_QWORD *)(a1 + 40), v5);
  }

}

id *sub_10007F7C0(id *result, uint64_t a2)
{
  if (!a2)
    return (id *)_objc_msgSend(result[4], "saveRecord:shouldRetry:withHandler:", result[5], 0, result[6]);
  return result;
}

void sub_10007FC70(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if ((objc_msgSend(v5, "isGuestPlayer") & 1) == 0)
  {
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerID"));
    objc_msgSend(v3, "addObject:", v4);

  }
}

void sub_10007FCCC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void (**v30)(_QWORD);
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v37[5];
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  char v45;
  _QWORD v46[5];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  const __CFString *v55;
  uint64_t v56;
  _QWORD v57[2];
  _QWORD v58[2];
  const __CFString *v59;
  uint64_t v60;
  _BYTE v61[128];
  _BYTE v62[128];

  v30 = a2;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v51, v62, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v52;
    v31 = *(_QWORD *)v52;
    v32 = v3;
    do
    {
      v7 = 0;
      v33 = v5;
      do
      {
        if (*(_QWORD *)v52 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)v7);
        v9 = *(void **)(a1 + 40);
        if (v9)
        {
          v35 = v7;
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v8));
          if (objc_msgSend(v10, "count"))
          {
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v11 = v10;
            v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v47, v61, 16);
            if (v12)
            {
              v13 = v12;
              v34 = v10;
              v14 = *(_QWORD *)v48;
              do
              {
                v15 = 0;
                do
                {
                  if (*(_QWORD *)v48 != v14)
                    objc_enumerationMutation(v11);
                  v16 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)v15);
                  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary", v30));
                  objc_msgSend(v17, "setObject:forKeyedSubscript:", v8, CFSTR("raw-id"));
                  objc_msgSend(v17, "setObject:forKeyedSubscript:", v16, CFSTR("push-token"));
                  objc_msgSend(*(id *)(a1 + 48), "addObject:", v17);

                  v15 = (char *)v15 + 1;
                }
                while (v13 != v15);
                v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v47, v61, 16);
              }
              while (v13);
              v6 = v31;
              v3 = v32;
              v5 = v33;
              v10 = v34;
            }
            else
            {
              v5 = v33;
            }
          }
          else
          {
            v24 = *(void **)(a1 + 48);
            v59 = CFSTR("raw-id");
            v60 = v8;
            v11 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v60, &v59, 1));
            objc_msgSend(v24, "addObject:", v11);
          }

          v7 = v35;
        }
        else
        {
          v18 = *(void **)(a1 + 56);
          if (v18
            && (v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)v7)))) != 0)
          {
            v36 = *(void **)(a1 + 48);
            v57[0] = CFSTR("raw-id");
            v57[1] = CFSTR("push-token");
            v58[0] = v8;
            v58[1] = v19;
            v20 = v6;
            v21 = v3;
            v22 = (void *)v19;
            v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v58, v57, 2));
            objc_msgSend(v36, "addObject:", v23);

            v10 = v22;
            v3 = v21;
            v6 = v20;
          }
          else
          {
            v25 = *(void **)(a1 + 48);
            v55 = CFSTR("raw-id");
            v56 = v8;
            v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1, v30));
            objc_msgSend(v25, "addObject:", v10);
          }
        }

        v26 = *(void **)(a1 + 64);
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 0));
        objc_msgSend(v26, "setObject:forKey:", v27, v8);

        v7 = (char *)v7 + 1;
      }
      while (v7 != v5);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v51, v62, 16);
    }
    while (v5);
  }

  if (objc_msgSend(*(id *)(a1 + 48), "count"))
  {
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_10008013C;
    v46[3] = &unk_1002BCCF0;
    v28 = *(void **)(a1 + 72);
    v46[4] = *(_QWORD *)(a1 + 80);
    objc_msgSend(v28, "performOnManagedObjectContext:", v46);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_10008020C;
    v37[3] = &unk_1002BFF40;
    v29 = *(void **)(a1 + 72);
    v37[4] = *(_QWORD *)(a1 + 80);
    v38 = *(id *)(a1 + 88);
    v39 = *(id *)(a1 + 48);
    v40 = *(id *)(a1 + 40);
    v45 = *(_BYTE *)(a1 + 104);
    v41 = *(id *)(a1 + 96);
    v42 = *(id *)(a1 + 72);
    v43 = *(id *)(a1 + 32);
    v44 = *(id *)(a1 + 64);
    objc_msgSend(v29, "perform:", v37);

  }
  v30[2](v30);

}

void sub_10008013C(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v5 = a3;
  v6 = a2;
  v10 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v6));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleIdentifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v8, v6));

  objc_msgSend(v10, "expireRecentMatchesWithGame:", v9);
  v5[2](v5);

}

void sub_10008020C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned __int8 *)(a1 + 96);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10008031C;
  v13[3] = &unk_1002BFEA0;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(id *)(a1 + 72);
  v19 = v3;
  v11 = *(_QWORD *)(a1 + 32);
  v14 = v10;
  v15 = v11;
  v16 = *(id *)(a1 + 80);
  v17 = *(id *)(a1 + 88);
  v18 = *(id *)(a1 + 48);
  v12 = v3;
  objc_msgSend(v4, "initiateInvitationForMatchRequest:recipients:devicePushTokenMap:isNearbyInvite:availableForMessageV2:transportContext:handler:", v5, v6, v7, v8, 0, v9, v13);

}

void sub_10008031C(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v8 = a2;
  v9 = a4;
  v10 = a5;
  if (v8 && v9 && (v11 = objc_msgSend(v9, "code"), v11 != (id)5020))
  {
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v11);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_100089CC0();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v9);
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileService, "serviceFromService:", *(_QWORD *)(a1 + 40)));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000804E0;
    v15[3] = &unk_1002BFF18;
    v13 = *(_QWORD *)(a1 + 48);
    v15[4] = *(_QWORD *)(a1 + 40);
    v16 = v8;
    v17 = v9;
    v18 = *(id *)(a1 + 56);
    v19 = *(id *)(a1 + 64);
    v20 = v10;
    v21 = *(id *)(a1 + 32);
    v22 = *(id *)(a1 + 72);
    objc_msgSend(v12, "getProfilesForPlayerIDs:handler:", v13, v15);

  }
}

void sub_1000804E0(id *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  id v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  NSObject *v32;
  id v33;
  id *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  void *j;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  void *k;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  void *m;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  id *v65;
  id obj;
  char v67;
  void *v68;
  void *v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[128];
  _BYTE v88[128];
  uint8_t v89[128];
  uint8_t buf[4];
  void *v91;
  __int16 v92;
  id v93;
  __int16 v94;
  void *v95;
  _BYTE v96[128];

  v5 = a2;
  v62 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientProxy"));
  v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "fetchOrCreateInviteSession"));

  v61 = v5;
  v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_gkMapDictionaryWithKeyPath:", CFSTR("playerID")));
  v65 = a1;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKey:", CFSTR("peers")));
  v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  obj = v7;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v96, 16);
  if (v8)
  {
    v9 = v8;
    v67 = 0;
    v10 = *(_QWORD *)v84;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v84 != v10)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("raw-id")));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("status")));
        v15 = objc_msgSend(v14, "integerValue");

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "objectForKeyedSubscript:", v13));
        v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("push-token")));
        v18 = (void *)v17;
        if (v16)
          v19 = v15 == 0;
        else
          v19 = 0;
        if (!v19 || v17 == 0)
        {
          if (!os_log_GKGeneral)
            v21 = (id)GKOSLoggers(v17);
          v22 = (void *)os_log_GKMatch;
          v67 = 1;
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
          {
            v23 = v22;
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "conciseDescription"));
            *(_DWORD *)buf = 138412802;
            v91 = v24;
            v92 = 2048;
            v93 = v15;
            v94 = 2112;
            v95 = v18;
            v67 = 1;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Invite to %@ failed with status %ld. pushToken: %@", buf, 0x20u);

          }
        }
        else
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "objectForKeyedSubscript:", v13));
          v26 = objc_msgSend(v25, "mutableCopy");
          v27 = v26;
          if (v26)
            v28 = v26;
          else
            v28 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
          v29 = v28;

          objc_msgSend(v29, "addObject:", v18);
          objc_msgSend(v69, "setObject:forKeyedSubscript:", v29, v13);
          v30 = objc_msgSend(v68, "addInvitee:reference:", v16, v18);
          if (!os_log_GKGeneral)
            v31 = (id)GKOSLoggers(v30);
          v32 = os_log_GKMatch;
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v91 = v68;
            v92 = 2112;
            v93 = v16;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "InviteSession (%@) added one player: %@.", buf, 0x16u);
          }

        }
      }
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v96, 16);
    }
    while (v9);
  }
  else
  {
    v67 = 0;
  }

  v33 = v62;
  v34 = v65;
  if (v62 || (v33 = v65[6]) != 0)
  {
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "userInfo"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "objectForKey:", NSUnderlyingErrorKey));

    if (objc_msgSend(v36, "isGKCompoundError"))
    {
      v64 = v36;
      v63 = v33;
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65[5], "objectForKeyedSubscript:", CFSTR("peers")));
      v38 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v39 = v37;
      v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v79, v89, 16);
      if (v40)
      {
        v41 = v40;
        v42 = *(_QWORD *)v80;
        do
        {
          for (j = 0; j != v41; j = (char *)j + 1)
          {
            if (*(_QWORD *)v80 != v42)
              objc_enumerationMutation(v39);
            v44 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)j);
            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("status")));
            v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("raw-id")));
            if (objc_msgSend(v45, "integerValue"))
              objc_msgSend(v65[7], "setObject:forKey:", v45, v46);
            else
              objc_msgSend(v38, "addObject:", v46);

          }
          v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v79, v89, 16);
        }
        while (v41);
      }

      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65[7], "allKeys"));
      v48 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
      if (v48)
      {
        v49 = v48;
        v50 = *(_QWORD *)v76;
        do
        {
          for (k = 0; k != v49; k = (char *)k + 1)
          {
            if (*(_QWORD *)v76 != v50)
              objc_enumerationMutation(v47);
            v52 = *(_QWORD *)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)k);
            if ((objc_msgSend(v38, "containsObject:", v52) & 1) == 0)
            {
              v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 1));
              objc_msgSend(v65[7], "setObject:forKeyedSubscript:", v53, v52);

            }
            if (objc_msgSend(v38, "containsObject:", v52))
              objc_msgSend(v65[7], "setObject:forKeyedSubscript:", &off_1002DB5E0, v52);
          }
          v49 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
        }
        while (v49);
      }

      v33 = v63;
      v34 = v65;
      v36 = v64;
    }
    else
    {
      if (v36)
        v54 = v36;
      else
        v54 = v33;
      v39 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v54, "code")));
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v38 = v65[8];
      v55 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v71, v87, 16);
      if (v55)
      {
        v56 = v55;
        v57 = *(_QWORD *)v72;
        do
        {
          for (m = 0; m != v56; m = (char *)m + 1)
          {
            if (*(_QWORD *)v72 != v57)
              objc_enumerationMutation(v38);
            v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v71 + 1) + 8 * (_QWORD)m), "objectForKey:", CFSTR("raw-id")));
            objc_msgSend(v65[7], "setObject:forKey:", v39, v59);

          }
          v56 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v71, v87, 16);
        }
        while (v56);
      }
    }

  }
  if ((v67 & 1) != 0)
  {
    v60 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
    objc_msgSend(v60, "reportEvent:type:", GKReporterDomainInvite, GKReporterInviteFail);

  }
  objc_msgSend(v34[9], "setInvitedUserIDs:", v34[7]);
  objc_msgSend(v34[9], "setPlayerTokenMap:", v69);
  objc_msgSend(v34[10], "setObject:forKeyedSubscript:", v34[9], CFSTR("inviteResponse"));
  objc_msgSend(v34[10], "setError:", v33);
  (*((void (**)(void))v34[11] + 2))();

}

void sub_100080CB4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v2, "reportEvent:type:", GKReporterDomainInvite, GKReporterInviteInitiate);

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("inviteResponse")));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);

  }
}

void sub_100080F98(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *i;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *j;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id obj;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD v34[3];
  _QWORD v35[3];
  _QWORD v36[2];
  _QWORD v37[2];
  _BYTE v38[128];
  _BYTE v39[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count")));
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  obj = *(id *)(v1 + 32);
  v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
  if (v23)
  {
    v21 = v1;
    v22 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v23; i = (char *)i + 1)
      {
        if (*(_QWORD *)v31 != v22)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 40), "referencesForInvitee:", v4));
        if (objc_msgSend(v5, "count"))
        {
          v24 = v5;
          v25 = i;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v6 = v5;
          v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
          if (v7)
          {
            v8 = v7;
            v9 = *(_QWORD *)v27;
            do
            {
              for (j = 0; j != v8; j = (char *)j + 1)
              {
                if (*(_QWORD *)v27 != v9)
                  objc_enumerationMutation(v6);
                v11 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)j);
                v36[0] = CFSTR("id");
                v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerID"));
                v36[1] = CFSTR("push-token");
                v37[0] = v12;
                v37[1] = v11;
                v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 2));
                objc_msgSend(v2, "addObject:", v13);

              }
              v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
            }
            while (v8);
          }

          v1 = v21;
          objc_msgSend(*(id *)(v21 + 40), "removeInvitee:reference:", v4, 0);
          v5 = v24;
          i = v25;
        }

      }
      v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
    }
    while (v23);
  }

  if (objc_msgSend(v2, "count"))
  {
    v14 = *(_QWORD *)(v1 + 48);
    v34[0] = CFSTR("session-token");
    v34[1] = CFSTR("peers");
    v35[0] = v14;
    v35[1] = v2;
    v34[2] = CFSTR("reason");
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 0));
    v35[2] = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v35, v34, 3));

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 56), "clientProxy"));
    objc_msgSend(v17, "issueRequest:bagKey:clientProxy:handler:", v16, CFSTR("gk-invitation-cancel"), v18, &stru_1002BFFA8);

    v19 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
    objc_msgSend(v19, "reportEvent:type:", GKReporterDomainInvite, GKReporterInviteUninvite);

  }
  dispatch_group_leave(*(dispatch_group_t *)(v1 + 64));

}

uint64_t sub_1000812EC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000814E0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100081580;
  v8[3] = &unk_1002BB568;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 40);
  v9 = v5;
  v10 = v6;
  v11 = v3;
  v7 = v3;
  objc_msgSend(v5, "performAsync:", v8);

}

void sub_100081580(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allInvitees"));
  if (objc_msgSend(v2, "count"))
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100081638;
    v4[3] = &unk_1002BB540;
    v3 = *(void **)(a1 + 40);
    v5 = *(id *)(a1 + 48);
    objc_msgSend(v3, "removePlayersFromGameInviteV2:handler:", v2, v4);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "removeAllInvitees");
    objc_msgSend(*(id *)(a1 + 32), "removeAllResponses");
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

uint64_t sub_100081638(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100081644(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v2, "reportEvent:type:", GKReporterDomainInvite, GKReporterInviteCancel);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  objc_msgSend(v3, "deleteInviteSession");

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100081D3C(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  __objc2_meth_list *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *log;
  _QWORD v31[4];
  id v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  void (**v39)(_QWORD);
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;

  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[MultiplayerGroupList _gkFetchRequest](MultiplayerGroupList, "_gkFetchRequest"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSManagedObject _gkRetrieveCleanEntry:request:](NSManagedObject, "_gkRetrieveCleanEntry:request:", v6, v7));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v10 = objc_msgSend(v9, "relatedTasksExistForBagKey:", CFSTR("gk-get-player-groups"));

  v11 = &OBJC_INSTANCE_METHODS_GKTurnBasedMultiplayerTurnReminderBulletin;
  if (!v8
    || ((v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "expirationDate")),
         v13 = objc_msgSend(v8, "_gkIsExpired:", v12),
         v12,
         v13)
      ? (v15 = v10 == (id)2)
      : (v15 = 0),
        v15))
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_1000820B8;
    v34[3] = &unk_1002BF0B8;
    v35 = *(id *)(a1 + 48);
    v24 = v7;
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(void **)(a1 + 40);
    v36 = v24;
    v37 = v25;
    v38 = v26;
    v39 = v5;
    objc_msgSend(v22, "issueRequest:bagKey:clientProxy:handler:", &__NSDictionary0__struct, CFSTR("gk-get-player-groups"), v23, v34);

  }
  else
  {
    if (!os_log_GKGeneral)
      v16 = (id)GKOSLoggers(v14);
    v17 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      log = v17;
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "expirationDate"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "entries"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v19, "count")));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v10 != (id)2));
      *(_DWORD *)buf = 138412802;
      v41 = v18;
      v42 = 2112;
      v43 = v20;
      v44 = 2112;
      v45 = v21;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "getMultiPlayerGroups using cache: %@ %@ storeAndForwardActiveUseCache: %@", buf, 0x20u);

      v11 = &OBJC_INSTANCE_METHODS_GKTurnBasedMultiplayerTurnReminderBulletin;
    }
    objc_msgSend(*(id *)(a1 + 32), "convertToInternalObjects:results:", v8, *(_QWORD *)(a1 + 40));
    v5[2](v5);
  }
  v27 = *(void **)(a1 + 48);
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "replyQueue"));
  v31[0] = _NSConcreteStackBlock;
  v31[1] = v11[254];
  v31[2] = sub_10008265C;
  v31[3] = &unk_1002BB450;
  v33 = *(id *)(a1 + 56);
  v32 = *(id *)(a1 + 48);
  objc_msgSend(v27, "notifyOnQueue:block:", v29, v31);

}

void sub_1000820B8(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  double v22;
  uint8_t buf[4];
  id v24;

  v7 = a2;
  v8 = a3;
  v9 = objc_msgSend(*(id *)(a1 + 32), "setError:", v8);
  if (!v7 || v8)
  {
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v9);
    v15 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v24 = v8;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "getMultiPlayerGroups error: %@", buf, 0xCu);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100082250;
    v16[3] = &unk_1002BFFD0;
    v10 = *(void **)(a1 + 32);
    v17 = *(id *)(a1 + 40);
    v11 = v7;
    v12 = *(_QWORD *)(a1 + 48);
    v13 = *(void **)(a1 + 56);
    v18 = v11;
    v19 = v12;
    v22 = a4;
    v20 = v13;
    v21 = *(id *)(a1 + 64);
    objc_msgSend(v10, "performOnManagedObjectContext:", v16);

  }
}

void sub_100082250(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  MultiplayerGroupList *v7;
  void *v8;
  id v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *i;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void (**v30)(_QWORD);
  id obj;
  uint64_t v32;
  NSMutableSet *v33;
  void *v34;
  MultiplayerGroupList *v35;
  uint64_t v36;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t v42[128];
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;

  v5 = a2;
  v30 = a3;
  v36 = a1;
  v34 = v5;
  v6 = objc_claimAutoreleasedReturnValue(+[NSManagedObject _gkRetrieveCleanEntry:request:](NSManagedObject, "_gkRetrieveCleanEntry:request:", v5, *(_QWORD *)(a1 + 32)));
  v35 = (MultiplayerGroupList *)v6;
  if (!v6)
  {
    v7 = [MultiplayerGroupList alloc];
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[MultiplayerGroupList entity](MultiplayerGroupList, "entity"));
    v35 = -[MultiplayerGroupList initWithEntity:insertIntoManagedObjectContext:](v7, "initWithEntity:insertIntoManagedObjectContext:", v8, v34);

  }
  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v6);
  v10 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v11 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[MultiplayerGroupList expirationDate](v35, "expirationDate"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(-[MultiplayerGroupList entries](v35, "entries"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v13, "count")));
    *(_DWORD *)buf = 138412546;
    v44 = v12;
    v45 = 2112;
    v46 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "getMultiPlayerGroups from server: %@ %@", buf, 0x16u);

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v36 + 40), "objectForKey:", CFSTR("groups")));
  v33 = objc_opt_new(NSMutableSet);
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  obj = v15;
  v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
  if (v37)
  {
    v32 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v37; i = (char *)i + 1)
      {
        if (*(_QWORD *)v39 != v32)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("participants")));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("played-at")));
        v20 = objc_msgSend(v19, "longValue");
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("player-group-id")));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("properties")));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("numberOfAutomatched")));
        v24 = objc_msgSend(v23, "integerValue");
        v25 = *(void **)(v36 + 48);
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v18));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ensureGroup:participants:playedAt:numberOfAutomatched:moc:list:", v21, v26, v20, v24, v34, v35));

        -[NSMutableSet addObject:](v33, "addObject:", v27);
      }
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
    }
    while (v37);
  }

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(v36 + 72)));
  -[MultiplayerGroupList setExpirationDate:](v35, "setExpirationDate:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue(-[MultiplayerGroupList entries](v35, "entries"));
  -[MultiplayerGroupList removeEntries:](v35, "removeEntries:", v29);

  -[MultiplayerGroupList addEntries:](v35, "addEntries:", v33);
  objc_msgSend(*(id *)(v36 + 48), "convertToInternalObjects:results:", v35, *(_QWORD *)(v36 + 56));
  v30[2](v30);
  (*(void (**)(void))(*(_QWORD *)(v36 + 64) + 16))();

}

void sub_10008265C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100082820(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  GKMultiplayerGroupRequest *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  const __CFString *v17;
  void *v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", *(_QWORD *)(a1 + 32)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[MultiplayerGroupList _gkFetchRequest](MultiplayerGroupList, "_gkFetchRequest"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSManagedObject _gkRetrieveCleanEntry:request:](NSManagedObject, "_gkRetrieveCleanEntry:request:", v3, v5));
  v7 = objc_msgSend(*(id *)(a1 + 40), "ensureGroup:participants:playedAt:numberOfAutomatched:moc:list:", *(_QWORD *)(a1 + 48), v4, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v3, v6);
  v8 = -[GKMultiplayerGroupRequest initWithGroupID:]([GKMultiplayerGroupRequest alloc], "initWithGroupID:", *(_QWORD *)(a1 + 48));
  -[GKMultiplayerGroupRequest setBundleID:](v8, "setBundleID:", *(_QWORD *)(a1 + 56));
  -[GKMultiplayerGroupRequest setParticipants:](v8, "setParticipants:", v4);
  if (*(_QWORD *)(a1 + 72))
    -[GKMultiplayerGroupRequest setPlayedAt:](v8, "setPlayedAt:");
  -[GKMultiplayerGroupRequest setPlayerGroupID:](v8, "setPlayerGroupID:", *(_QWORD *)(a1 + 48));
  v17 = CFSTR("numberOfAutomatched");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 80)));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v9));
  v18 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1));
  v12 = objc_msgSend(v11, "mutableCopy");
  -[GKMultiplayerGroupRequest setRequestData:](v8, "setRequestData:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100082A6C;
  v15[3] = &unk_1002BC0D0;
  v16 = *(id *)(a1 + 64);
  objc_msgSend(v13, "writeToNetwork:clientProxy:handler:", v8, v14, v15);

}

void sub_100082A6C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint8_t v8[16];

  v3 = a2;
  v5 = v3;
  if (!os_log_GKGeneral)
    v6 = (id)GKOSLoggers(v3, v4);
  v7 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKMultiplayerGroupRequest successfully registered with store and forward", v8, 2u);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100082DB8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  v6 = objc_msgSend(v5, "forceRelay");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100082ED4;
  v9[3] = &unk_1002C0048;
  v7 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v7;
  v11 = *(id *)(a1 + 48);
  v12 = *(id *)(a1 + 56);
  v14 = v3;
  v13 = *(id *)(a1 + 64);
  v8 = v3;
  objc_msgSend(v4, "getValidNATTypeWithForceRelay:withHandler:", v6, v9);

}

void sub_100082ED4(id *a1, unsigned __int8 a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  unsigned __int8 v38;
  _QWORD v39[7];
  _QWORD v40[7];
  const __CFString *v41;
  void *v42;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dataUsingEncoding:", 4));
  objc_msgSend(v4, "appendData:", v7);

  if (objc_msgSend(a1[5], "version"))
  {
    objc_msgSend(v4, "appendBytes:length:", &unk_1002328C8, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
    v9 = objc_msgSend(v8, "maximumInviteVersionSupported");

    v38 = v9;
    objc_msgSend(v4, "appendBytes:length:", &v38, 1);
  }
  v41 = CFSTR("s");
  v42 = v4;
  v29 = v4;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1));
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v10));

  v39[0] = CFSTR("session-token");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "sessionToken"));
  v40[0] = v11;
  v39[1] = CFSTR("self-nat-type");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2));
  v40[1] = v12;
  v39[2] = CFSTR("peer-id");
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "peerID"));
  v40[2] = v13;
  v39[3] = CFSTR("peer-push-token");
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "peerPushToken"));
  v40[3] = v14;
  v39[4] = CFSTR("peer-nat-type");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(a1[5], "peerNATType")));
  v40[4] = v15;
  v39[5] = CFSTR("peer-nat-ip");
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "peerNATIP"));
  v40[5] = v16;
  v39[6] = CFSTR("peer-blob");
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "peerBlob"));
  v40[6] = v17;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v40, v39, 7));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v18));

  objc_msgSend(a1[6], "enrichServerRequestWithConnectionData:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "pushToken"));

  if (v21)
    objc_msgSend(v19, "setObject:forKey:", v21, CFSTR("self-push-token"));
  v22 = a1[4];
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_1000832A4;
  v30[3] = &unk_1002C0020;
  v23 = a1[6];
  v31 = a1[7];
  v37 = a1[9];
  v32 = a1[8];
  v33 = v28;
  v24 = a1[4];
  v25 = a1[5];
  v34 = v19;
  v35 = v24;
  v36 = v25;
  v26 = v19;
  v27 = v28;
  objc_msgSend(v22, "fetchPseudonymIfNeededWithTransportContext:withCompletionHandler:", v23, v30);

}

void sub_1000832A4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint8_t buf[4];
  uint64_t v20;

  v5 = a2;
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setSelfPseudonym:", v5);
    objc_msgSend(*(id *)(a1 + 48), "setObject:forKey:", v5, GKTransportPseudonymKey);
    v6 = objc_msgSend(*(id *)(a1 + 56), "setObject:forKey:", *(_QWORD *)(a1 + 48), CFSTR("client-data"));
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v6);
    v8 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Created data request for gk-invitation-accept request: %@", buf, 0xCu);
    }
    v10 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10008346C;
    v13[3] = &unk_1002BC010;
    v11 = *(id *)(a1 + 56);
    v12 = *(_QWORD *)(a1 + 64);
    v14 = v11;
    v15 = v12;
    v16 = *(id *)(a1 + 40);
    v17 = *(id *)(a1 + 72);
    v18 = *(id *)(a1 + 32);
    objc_msgSend(v10, "perform:", v13);
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();

  }
}

void sub_10008346C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10008356C;
  v8[3] = &unk_1002BD7E8;
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  v11 = *(id *)(a1 + 64);
  v12 = v3;
  v7 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-invitation-accept"), v6, v8);

}

uint64_t sub_10008356C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResponsePlist:", a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sessionID"));
  objc_msgSend(*(id *)(a1 + 32), "setSessionID:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "transportVersionToUse"));
  objc_msgSend(*(id *)(a1 + 32), "setTransportVersionToUse:", v8);

  objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), CFSTR("acceptResponse"));
  objc_msgSend(*(id *)(a1 + 48), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_100083618(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("acceptResponse")));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, void *, void *))(v1 + 16))(v1, v3, v4);

  }
  v5 = (id)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v5, "reportEvent:type:", GKReporterDomainInvite, GKReporterInviteAcceptApp);

}

uint64_t sub_100083974(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100083A54(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  _QWORD *v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[8];
  _QWORD v22[5];
  id v23;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", CFSTR("getAcceptedGameInvite")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "gameDescriptor"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](GKBulletinController, "sharedController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "acceptedInviteManager"));
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "multiplayerInviteForGame:", v4));
  v8 = (void *)v7;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x3032000000;
  v22[3] = sub_100079000;
  v22[4] = sub_100079010;
  v23 = 0;
  if (v7)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(v7);
    v10 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GKMatchMaker invite manager and bullentin are set", buf, 2u);
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "originatorPlayer"));

    if (!v11)
    {
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_100083CD0;
      v19[3] = &unk_1002BBB70;
      v20 = v8;
      objc_msgSend(v2, "perform:", v19);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "replyQueue"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100083D58;
    v14[3] = &unk_1002C0070;
    v15 = v8;
    v18 = v22;
    v17 = *(id *)(a1 + 40);
    v16 = v5;
    objc_msgSend(v2, "notifyOnQueue:block:", v12, v14);

  }
  else
  {
    v13 = *(_QWORD *)(a1 + 40);
    if (v13)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v13 + 16))(v13, 0, 0);
  }
  _Block_object_dispose(v22, 8);

}

void sub_100083CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100083CD0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100083D4C;
  v6[3] = &unk_1002BC0D0;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "loadOriginatorPlayerWithCompletionHandler:", v6);

}

uint64_t sub_100083D4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100083D58(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  int v8;
  void *v9;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKInviteInternal inviteWithBulletin:](GKInviteInternal, "inviteWithBulletin:"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "declineReason"));

    if (v3)
    {
      if (!os_log_GKGeneral)
        v4 = (id)GKOSLoggers(a1);
      v5 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        LOWORD(v8) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Found a declined invite due to incompatible transport version.", (uint8_t *)&v8, 2u);
      }
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(a1 + 32));
    }
  }
  else
  {
    v2 = 0;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(a1);
    v7 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKGetAcceptedInviteHandler invite: %@", (uint8_t *)&v8, 0xCu);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    objc_msgSend(*(id *)(a1 + 40), "withdrawBulletin:");

}

void sub_100084154(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "gameDescriptor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v10 = (id)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v3, v4));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game = %@"), v10));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject objectsMatchingPredicate:context:](GKPlayerToInviteCacheObject, "objectsMatchingPredicate:context:", v5, v6));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_gkMapWithBlock:", &stru_1002C00B0));
  if (objc_msgSend(v8, "count"))
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v8, CFSTR("players"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  objc_msgSend(v9, "_gkDeleteObjects:", v7);

}

id sub_100084298(id a1, id a2, unint64_t a3)
{
  return objc_msgSend(a2, "internalRepresentation", a3);
}

void sub_1000842A0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("players")));
  (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_1000843F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008440C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionToken"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 0);
  return result;
}

void sub_100084780(uint64_t a1, uint64_t a2)
{
  __CFString *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  GKInviteSession *v28;
  GKInviteSession *v29;
  id v30;
  void *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  GKInviteSession *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD v41[4];
  GKInviteSession *v42;
  id v43;
  id v44;
  id v45;
  unsigned __int8 v46;
  char v47;
  uint64_t v48;
  uint8_t buf[4];
  GKInviteSession *v50;
  __int16 v51;
  void *v52;
  _QWORD v53[2];
  _QWORD v54[2];
  void *v55;
  _QWORD v56[5];
  _QWORD v57[5];
  _QWORD v58[6];
  _QWORD v59[6];

  v48 = a2;
  v47 = 0;
  if (*(_QWORD *)(a1 + 32))
    v3 = *(__CFString **)(a1 + 32);
  else
    v3 = &stru_1002CE2A8;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString dataUsingEncoding:](v3, "dataUsingEncoding:", 4));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", (char *)objc_msgSend(v4, "length") + 2));
  objc_msgSend(v5, "appendBytes:length:", &v48, 1);
  objc_msgSend(v5, "appendBytes:length:", &v47, 1);
  v40 = v4;
  objc_msgSend(v5, "appendData:", v4);
  objc_msgSend(v5, "appendBytes:length:", &unk_1002328C8, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  v7 = objc_msgSend(v6, "maximumInviteVersionSupported");

  v46 = v7;
  objc_msgSend(v5, "appendBytes:length:", &v46, 1);
  v59[0] = *(_QWORD *)(a1 + 40);
  v58[0] = CFSTR("B");
  v58[1] = CFSTR("A");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKViceroyNATConfiguration externalAddressForSelfConnectionData:](GKViceroyNATConfiguration, "externalAddressForSelfConnectionData:"));
  v59[1] = v8;
  v58[2] = CFSTR("N");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v48));
  v59[2] = v9;
  v58[3] = CFSTR("i");
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleIdentifier"));
  v59[3] = v11;
  v58[4] = CFSTR("v");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "bundleVersion"));
  v58[5] = CFSTR("s");
  v59[4] = v13;
  v59[5] = v5;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v59, v58, 6));

  v39 = v14;
  v15 = objc_msgSend(v14, "mutableCopy");
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "bundleShortVersion"));

  if (v17)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "bundleShortVersion"));
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v19, CFSTR("V"));

  }
  v20 = v15;
  v57[0] = *(_QWORD *)(a1 + 56);
  v56[0] = CFSTR("session-token");
  v56[1] = CFSTR("self-push-token");
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "pushToken"));
  v23 = v22;
  if (!v22)
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
  v57[1] = v23;
  v56[2] = CFSTR("reason");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 2));
  v57[2] = v24;
  v56[3] = CFSTR("peers");
  v53[0] = CFSTR("id");
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "playerID"));
  v53[1] = CFSTR("push-token");
  v54[0] = v25;
  v54[1] = *(_QWORD *)(a1 + 72);
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v54, v53, 2));
  v55 = v26;
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v55, 1));
  v56[4] = CFSTR("client-data");
  v57[3] = v27;
  v57[4] = v20;
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v57, v56, 5));

  if (!v22)
  v28 = -[GKInviteSession initWithSessionToken:]([GKInviteSession alloc], "initWithSessionToken:", *(_QWORD *)(a1 + 56));
  v29 = v28;
  if (!os_log_GKGeneral)
    v30 = (id)GKOSLoggers(v28);
  v31 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v32 = v31;
    v33 = (void *)objc_claimAutoreleasedReturnValue(-[GKInviteSession sessionToken](v29, "sessionToken"));
    *(_DWORD *)buf = 134218242;
    v50 = v29;
    v51 = 2112;
    v52 = v33;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "SendReconnectInvitation: created a new GKInviteSession(%p): %@", buf, 0x16u);

  }
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  objc_msgSend(v34, "setInviteSession:", v29);

  v35 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_100084D20;
  v41[3] = &unk_1002BD7E8;
  v42 = v29;
  v43 = *(id *)(a1 + 64);
  v44 = *(id *)(a1 + 72);
  v45 = *(id *)(a1 + 80);
  v37 = v29;
  objc_msgSend(v35, "issueRequest:bagKey:clientProxy:handler:", v38, CFSTR("gk-invitation-send"), v36, v41);

}

void sub_100084D20(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (!v5)
    objc_msgSend(*(id *)(a1 + 32), "addInvitee:reference:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);

}

void sub_100085444(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "serverRepresentation"));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_100085488(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "serverRepresentation"));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1000854CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  void *v15;

  v5 = a2;
  v6 = a3;
  v8 = v6;
  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v6, v7);
  v10 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v12 = 138412546;
    v13 = v5;
    v14 = 2112;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Invitation send done. plist: %@, error: %@", (uint8_t *)&v12, 0x16u);
  }
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v8);

}

void sub_100085BF0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  else
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100089D28();
  }

}

void sub_100085C78(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  void *v14;

  v5 = a2;
  v6 = a3;
  v8 = v6;
  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v6, v7);
  v10 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v11 = 138412546;
    v12 = v5;
    v13 = 2112;
    v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "TTRLogs send is done. plist: %@, error: %@", (uint8_t *)&v11, 0x16u);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100085F28(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100086000;
  v9[3] = &unk_1002BCB98;
  v10 = *(id *)(a1 + 56);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, v6, v7, v9);

}

uint64_t sub_100086000(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("result"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100086060(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("result")));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);

  }
}

void sub_1000861A4(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  void *v11;
  int v12;
  id v13;

  v4 = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pushToken"));

  if (v6)
    objc_msgSend(v4, "setObject:forKey:", v6, CFSTR("self-push-token"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
  objc_msgSend(v4, "setObject:forKey:", v7, CFSTR("self-nat-type"));

  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v8);
  v10 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v12 = 138412290;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "relayInit serverRequest:%@", (uint8_t *)&v12, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 40), "_performRelayAction:request:handler:", CFSTR("gk-invitation-relay-initiate"), v4, *(_QWORD *)(a1 + 48));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v11, "reportEvent:type:", GKReporterDomainRelay, GKReporterRelayInitiate);

}

void sub_100086400(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  void *v11;
  int v12;
  id v13;

  v4 = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pushToken"));

  if (v6)
    objc_msgSend(v4, "setObject:forKey:", v6, CFSTR("self-push-token"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
  objc_msgSend(v4, "setObject:forKey:", v7, CFSTR("self-nat-type"));

  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v8);
  v10 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v12 = 138412290;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "relayUpdate serverRequest:%@", (uint8_t *)&v12, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 40), "_performRelayAction:request:handler:", CFSTR("gk-invitation-relay-update"), v4, *(_QWORD *)(a1 + 48));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v11, "reportEvent:type:", GKReporterDomainRelay, GKReporterRelayUpdate);

}

void sub_1000868A0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  NSErrorDomain v14;
  void *i;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  NSString *v28;
  id v29;
  uint64_t v30;
  BOOL v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[4];
  id v45;
  _BYTE v46[128];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v2, v3));

  objc_msgSend(v4, "setAvailablePieces:", objc_msgSend(v4, "availablePieces") | 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", 600.0));
  objc_msgSend(v4, "setExpirationDate:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("alias")));
  objc_msgSend(v4, "setAlias:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("photos")));
  v8 = v7;
  if (v7 && objc_msgSend(v7, "count"))
    v9 = objc_msgSend(v4, "updateImagesWithImageURLs:", v8);
  v35 = v8;
  v36 = a1;
  v37 = v4;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("photoData")));
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v41;
    v14 = NSCocoaErrorDomain;
    v38 = v10;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v41 != v13)
          objc_enumerationMutation(v10);
        v16 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v16));
        if (v17)
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v16));
          v19 = GKImageCachePathForURL();
          v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "lastPathComponent"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "stringByAppendingPathComponent:", v21));

          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
          v39 = 0;
          objc_msgSend(v23, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v20, 1, 0, &v39);
          v24 = v39;

          if (v24)
          {
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "domain"));
            if ((objc_msgSend(v25, "isEqual:", v14) & 1) == 0)
            {

              goto LABEL_16;
            }
            v26 = v12;
            v27 = v13;
            v28 = v14;
            v29 = objc_msgSend(v24, "code");

            v31 = v29 == (id)516;
            v14 = v28;
            v13 = v27;
            v12 = v26;
            v10 = v38;
            if (!v31)
            {
LABEL_16:
              if (!os_log_GKGeneral)
                v32 = (id)GKOSLoggers(v30);
              v33 = os_log_GKMatch;
              if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v45 = v24;
                _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "GKMultiplayerMatchService error while trying to create path error/warning while updating cache with nearby: %@", buf, 0xCu);
              }
            }
          }
          objc_msgSend(v17, "writeToFile:atomically:", v22, 1);
          _gkMarkFileAsPurgeable(v22);

        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
    }
    while (v12);
  }
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "internalRepresentation"));
  objc_msgSend(*(id *)(v36 + 40), "setResult:", v34);

}

void sub_100086C6C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_100086F04(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    (*(void (**)(void))(v1 + 16))();
  }
  else
  {
    if (!os_log_GKGeneral)
      v2 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_100089D88();
  }
}

uint64_t sub_100086F78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000871BC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    (*(void (**)(void))(v1 + 16))();
  }
  else
  {
    if (!os_log_GKGeneral)
      v2 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_100089DB4();
  }
}

uint64_t sub_100087230(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000874C4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  else
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_100089DE0();
  }

}

uint64_t sub_100087548(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100087790(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    (*(void (**)(void))(v1 + 16))();
  }
  else
  {
    if (!os_log_GKGeneral)
      v2 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_100089E0C();
  }
}

uint64_t sub_100087804(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100087AE4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t v12[16];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100089E38();
  }
  else if (!objc_msgSend(v5, "count"))
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(0);
    v10 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "0 multiplyaer games loaded on this device.", v12, 2u);
    }
  }
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    (*(void (**)(uint64_t, id, void *))(v11 + 16))(v11, v5, v7);

}

void sub_100087F5C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a3;
  v5 = objc_msgSend(a2, "containsObject:", *(_QWORD *)(a1 + 32));
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v5, v7);

}

void sub_10008829C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  _BYTE *v23;
  _BYTE buf[24];
  void *v25;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (!os_log_GKGeneral)
    v11 = (id)GKOSLoggers(v9);
  v12 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2112;
    v25 = v10;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "nearbyDiscovery playerFoundHandler called back. playerID: %@, deviceID: %@, discoveryInfo: %@", buf, 0x20u);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  LOBYTE(v25) = 0;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1000884CC;
  v18[3] = &unk_1002C0178;
  v23 = buf;
  v19 = *(id *)(a1 + 32);
  v13 = v7;
  v20 = v13;
  v14 = v8;
  v21 = v14;
  v15 = v10;
  v22 = v15;
  v16 = +[GKClientProxy enumerateClientsUsingBlock:](GKClientProxy, "enumerateClientsUsingBlock:", v18);
  if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
  {
    if (!os_log_GKGeneral)
      v17 = (id)GKOSLoggers(v16);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
      sub_100089E98();
  }

  _Block_object_dispose(buf, 8);
}

void sub_1000884AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000884CC(_QWORD *a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  id v8;

  v5 = a2;
  if (!*(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24))
  {
    v8 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
    v7 = objc_msgSend(v6, "isEqualToString:", a1[4]);

    v5 = v8;
    if (v7)
    {
      objc_msgSend(v8, "nearbyPlayerFoundForPlayerID:deviceID:discoveryInfo:", a1[5], a1[6], a1[7]);
      v5 = v8;
      *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = 1;
      *a3 = 1;
    }
  }

}

void sub_100088560(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v5 = a2;
  v6 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000886C0;
  v11[3] = &unk_1002C01C8;
  v15 = &v16;
  v12 = *(id *)(a1 + 32);
  v7 = v5;
  v13 = v7;
  v8 = v6;
  v14 = v8;
  v9 = +[GKClientProxy enumerateClientsUsingBlock:](GKClientProxy, "enumerateClientsUsingBlock:", v11);
  if (!*((_BYTE *)v17 + 24))
  {
    if (!os_log_GKGeneral)
      v10 = (id)GKOSLoggers(v9);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
      sub_100089EF8();
  }

  _Block_object_dispose(&v16, 8);
}

void sub_1000886A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000886C0(_QWORD *a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  id v8;

  v5 = a2;
  if (!*(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24))
  {
    v8 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
    v7 = objc_msgSend(v6, "isEqualToString:", a1[4]);

    v5 = v8;
    if (v7)
    {
      objc_msgSend(v8, "nearbyPlayerLostForPlayerID:deviceID:", a1[5], a1[6]);
      v5 = v8;
      *a3 = 1;
    }
  }

}

void sub_100088744(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000888C8;
  v15[3] = &unk_1002C0178;
  v20 = &v21;
  v16 = *(id *)(a1 + 32);
  v10 = v7;
  v17 = v10;
  v11 = v8;
  v18 = v11;
  v12 = v9;
  v19 = v12;
  v13 = +[GKClientProxy enumerateClientsUsingBlock:](GKClientProxy, "enumerateClientsUsingBlock:", v15);
  if (!*((_BYTE *)v22 + 24))
  {
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v13);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
      sub_100089F58();
  }

  _Block_object_dispose(&v21, 8);
}

void sub_1000888B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000888C8(_QWORD *a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  id v8;

  v5 = a2;
  if (!*(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24))
  {
    v8 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
    v7 = objc_msgSend(v6, "isEqualToString:", a1[4]);

    v5 = v8;
    if (v7)
    {
      objc_msgSend(v8, "nearbyDataReceivedForPlayerID:deviceID:data:", a1[5], a1[6], a1[7]);
      v5 = v8;
      *a3 = 1;
    }
  }

}

uint64_t sub_100088C44(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    result = *(_QWORD *)(result + 32);
    if (result)
      return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100088C5C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  else
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_100089FE4();
  }

}

void sub_100089440(id *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  GKPlayerToInviteCacheObject *v16;
  void *v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v5 = a2;
  v6 = a3;
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "serverRepresentation"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:"));
  v8 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game = %@"), v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "context"));
  v18 = (void *)v8;
  +[GKCacheObject deleteObjectsMatchingPredicate:context:](GKPlayerToInviteCacheObject, "deleteObjectsMatchingPredicate:context:", v8, v9);

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v10 = a1[6];
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v21;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v21 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v14);
        v16 = -[GKCacheObject initWithManagedObjectContext:]([GKPlayerToInviteCacheObject alloc], "initWithManagedObjectContext:", v5);
        -[GKPlayerToInviteCacheObject setGame:](v16, "setGame:", v7);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "playerID"));
        -[GKPlayerToInviteCacheObject setPlayerID:](v16, "setPlayerID:", v17);

        v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v12);
  }

  v6[2](v6);
}

void sub_100089630(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD block[4];
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleIdentifier"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000896C4;
  block[3] = &unk_1002BBBD8;
  v6 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000896C4(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  id v4;

  v2 = GKGetApplicationStateForBundleID(*(void **)(a1 + 32));
  if (v2 == 8 || (v3 = v2, GKLaunchApplicationWithIdentifier(*(void **)(a1 + 32), 0), v3 >= 4))
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:](GKClientProxy, "clientForBundleID:", *(_QWORD *)(a1 + 32)));
    objc_msgSend(v4, "acceptMultiplayerGameInvite");

  }
}

void sub_100089740(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_10008974C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100089740(__stack_chk_guard);
  sub_100052248();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Failed to fetch pseudonym for local player. Error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000897B4()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100016C38();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Get flow rate for player group: %@, queue name: %@", v1, 0x16u);
  sub_100016C20();
}

void sub_100089824()
{
  int v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  int v4;

  sub_1000279B0();
  v3 = 1024;
  v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Fetched GKFlowRateCacheObject: %@, valid? %hhd", v2, 0x12u);
  sub_100016C20();
}

void sub_1000898A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Get compatibility matrix: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089904(void **a1, void *a2, uint64_t a3)
{
  void *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;

  v4 = *a1;
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "shareRecordID"));
  v8 = 138412546;
  v9 = v6;
  v10 = 2112;
  v11 = a3;
  sub_100027A70((void *)&_mh_execute_header, v5, v7, "setShareInvitees - No CKRecord found fetching shareRecordID %@ error: %@", (uint8_t *)&v8);

}

void sub_1000899B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error saving record with share invitees %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089A18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Response for gk-invitation-initiate: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089A78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Failed to post request for bag key gk-invitation-initiate due to error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089AD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error archiving connection dictionary for share record: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089B38()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100016C38();
  sub_100027A70((void *)&_mh_execute_header, v0, (uint64_t)v0, "Failed to archive participant info: %@. Error: %@", v1);
  sub_100016C20();
}

void sub_100089BA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error while initiating invitation for share URL: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089C00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error while setting up invite share recordID: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089C60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Failed to unarchive object with error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089CC0()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100016C38();
  sub_100027A70((void *)&_mh_execute_header, v0, (uint64_t)v0, "invite for match request failed with error: %@, result: %@", v1);
  sub_100016C20();
}

void sub_100089D28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Found nil handler for requestTTRLogsWith. Error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089D88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "no handler set for starting nearby browsing", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100089DB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "no handler set for stopping nearby browsing", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100089DE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "no handler set for starting nearby advertising", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100089E0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "no handler set for stopping nearby advertising", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100089E38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error retrieving games for Data Detectors: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089E98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100089740(__stack_chk_guard);
  sub_100052248();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "cannot find a client proxy which has the same bundleIdentifier with '%@' so not calling nearbyPlayerFoundForPlayerID", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089EF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100089740(__stack_chk_guard);
  sub_100052248();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "cannot find a client proxy which has the same bundleIdentifier with '%@' so not calling nearbyPlayerLostForPlayerID", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089F58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100089740(__stack_chk_guard);
  sub_100052248();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "cannot find a client proxy which has the same bundleIdentifier with '%@' so not calling nearbyDataReceivedForPlayerID", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100089FB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "no handler set for forgetParticipant", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100089FE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "no handler set for sendDataToParticipant", v2, v3, v4, v5, v6);
  sub_100027A04();
}

id sub_10008A12C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  id v10;
  int v12;
  const char *v13;
  __int16 v14;
  id v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deniedContactIDs"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contactID"));
  v6 = objc_msgSend(v4, "containsObject:", v5);

  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v7);
    v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v12 = 136315394;
      v13 = "-[GKDeniedSuggestionsModifier nonDeniedRecipientsFromInitialRecipients:]_block_invoke";
      v14 = 2112;
      v15 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s filtering out: %@", (uint8_t *)&v12, 0x16u);
    }
    v10 = 0;
  }
  else
  {
    v10 = v3;
  }

  return v10;
}

void sub_10008ABCC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  int8x16_t v11;
  _QWORD v12[4];
  id v13;
  id v14;
  _QWORD v15[4];
  int8x16_t v16;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10008AD44;
  v15[3] = &unk_1002BB658;
  v11 = *(int8x16_t *)(a1 + 32);
  v5 = (id)v11.i64[0];
  v16 = vextq_s8(v11, v11, 8uLL);
  objc_msgSend(v4, "performBlock:", v15);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "updateRequestWithPushToken:", *(_QWORD *)(a1 + 48)));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10008AE60;
  v12[3] = &unk_1002BCB98;
  v13 = *(id *)(a1 + 32);
  v14 = v3;
  v10 = v3;
  objc_msgSend(v7, "issueRequest:bagKey:clientProxy:handler:", v8, CFSTR("gk-tb-create-session"), v9, v12);

}

void sub_10008AD44(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bundleIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v3, v4));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "turnBasedSessionList"));
  objc_msgSend(v6, "expire");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleIdentifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v11 = (id)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v8, v9));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "turnBasedSessionList"));
  objc_msgSend(v10, "expire");

}

uint64_t sub_10008AE60(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKey:", CFSTR("session-id")));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("sessionID"));

  objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10008AED8(id *a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  _QWORD v12[5];
  _QWORD v13[5];
  id v14;
  id v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", CFSTR("sessionID")));
  v3 = v2;
  if (v2)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10008B050;
    v13[3] = &unk_1002BB4A0;
    v4 = a1[4];
    v13[4] = a1[5];
    v14 = v2;
    v15 = a1[4];
    objc_msgSend(v4, "perform:", v13);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10008B1E4;
    v12[3] = &unk_1002BBB70;
    v5 = a1[4];
    v12[4] = a1[5];
    objc_msgSend(v5, "perform:", v12);

  }
  if (a1[6])
  {
    v6 = a1[4];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "replyQueue"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008B26C;
    v9[3] = &unk_1002BB758;
    v10 = a1[4];
    v11 = a1[6];
    objc_msgSend(v6, "notifyOnQueue:block:", v8, v9);

  }
}

void sub_10008B050(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10008B140;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v5, 1, v7);

}

void sub_10008B140(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

    if (!v6)
      objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("result"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10008B1E4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10008B260;
  v6[3] = &unk_1002BCA80;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "getTurnBasedMatchesWithHandler:", v6);

}

uint64_t sub_10008B260(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10008B26C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("result")));
  if (!v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

    if (v3)
      goto LABEL_4;
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 1, 0));
    objc_msgSend(*(id *)(a1 + 32), "setError:", v2);
  }

LABEL_4:
  v4 = *(_QWORD *)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("result")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v6, v5);

}

void sub_10008B408(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKGameServicePrivate, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allObjects"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10008B4D0;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getGameMetadataForBundleIDs:handler:", v5, v7);

}

void sub_10008B4D0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "_gkMapDictionaryWithKeyPath:", CFSTR("bundleIdentifier")));
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bundleID", (_QWORD)v12));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v10));
        objc_msgSend(v9, "setGame:", v11);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10008B9A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  void *v34;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleID"));
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleVersion"));
    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v4));
      if (!v6)
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", *(_QWORD *)(a1 + 48)));
        objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v4);
      }
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortBundleVersion"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObject:forKey:](NSMutableDictionary, "dictionaryWithObject:forKey:", v5, CFSTR("bundleVersion")));
      v9 = v8;
      if (v7)
        objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, CFSTR("shortBundleVersion"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v3, "platform")));
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v10, CFSTR("platform"));

      v11 = objc_msgSend(v6, "addObject:", v9);
      if (!os_log_GKGeneral)
        v12 = (id)GKOSLoggers(v11);
      v13 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v34 = v9;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "bundle version dict %@", buf, 0xCu);
      }
      if (v7)
        v14 = v7;
      else
        v14 = v5;
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), v4, v14));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v15));
      if (!v16)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", *(_QWORD *)(a1 + 48)));
        objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v16, v15);
      }
      objc_msgSend(v16, "addObject:", v3);

    }
    else
    {
      v25 = os_log_GKGeneral;
      if (!os_log_GKGeneral)
      {
        v26 = (id)GKOSLoggers(0);
        v25 = os_log_GKGeneral;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        sub_1000991B0((uint64_t)v3, v25, v27, v28, v29, v30, v31, v32);
    }

  }
  else
  {
    v17 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v18 = (id)GKOSLoggers(0);
      v17 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      sub_10009914C((uint64_t)v3, v17, v19, v20, v21, v22, v23, v24);
  }

}

void sub_10008BC94(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  int8x16_t v11;
  id v12;
  id v13;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("bundleVersion")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("shortBundleVersion")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("platform")));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10008BDAC;
  v10[3] = &unk_1002C02B0;
  v11 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  v12 = *(id *)(a1 + 56);
  v13 = v3;
  v9 = v3;
  objc_msgSend(v4, "_determineCompatibleBundleIDForAppID:bundleVersion:shortBundleVersion:platform:withCompletionHandler:", v5, v6, v7, v8, v10);

}

void sub_10008BDAC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  const __CFString *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("shortBundleVersion")));
  v14 = *(_QWORD *)(a1 + 40);
  if (v13)
    v15 = CFSTR("shortBundleVersion");
  else
    v15 = CFSTR("bundleVersion");
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v15));
  v17 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), v14, v16));

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = (void *)v17;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v17));
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v20; i = (char *)i + 1)
      {
        if (*(_QWORD *)v26 != v21)
          objc_enumerationMutation(v18);
        v23 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v23, "setBundleID:", v9);
        objc_msgSend(v23, "setBundleVersion:", v10);
        objc_msgSend(v23, "setShortBundleVersion:", v11);
        objc_msgSend(v23, "setPlatform:", objc_msgSend(v12, "integerValue"));
      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v20);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_10008BFA0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10008C07C;
  v9[3] = &unk_1002BB518;
  v7 = *(void **)(a1 + 48);
  v9[4] = *(_QWORD *)(a1 + 40);
  v10 = v7;
  v11 = *(id *)(a1 + 56);
  v12 = v3;
  v8 = v3;
  objc_msgSend(v4, "notifyOnQueue:block:", v6, v9);

}

uint64_t sub_10008C07C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_updateGamesForTurnBasedMatches:dispatchGroup:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_10008C3C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKMultiplayerMatchService, "serviceFromService:", *(_QWORD *)(a1 + 32)));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10008C488;
  v7[3] = &unk_1002BCE80;
  v5 = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = v3;
  v6 = v3;
  objc_msgSend(v4, "getCompatibilityMatrix:handler:", v5, v7);

}

void sub_10008C488(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  id v11;
  _UNKNOWN **v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  unsigned int v29;
  void *v30;
  id v31;
  uint64_t v32;
  id obj;
  unsigned __int8 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t v39[128];
  uint8_t buf[4];
  id v41;

  v5 = a2;
  v6 = a3;
  v26 = v6;
  if (!os_log_GKGeneral)
    v7 = (id)GKOSLoggers(v6);
  v8 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v41 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "compatibility matrix result %@", buf, 0xCu);
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](GKApplicationWorkspace, "defaultWorkspace", v26));
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  obj = v5;
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
  if (v10)
  {
    v11 = v10;
    v12 = &IDSCopyIDForPhoneNumber_ptr;
    v13 = *(_QWORD *)v36;
    v28 = v9;
    v32 = *(_QWORD *)v36;
    do
    {
      v14 = 0;
      v31 = v11;
      do
      {
        if (*(_QWORD *)v36 != v13)
          objc_enumerationMutation(obj);
        v15 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v14);
        if (objc_msgSend(v12[130], "supportsPlatform:", objc_msgSend(v15, "platform")))
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "bundleID"));
          if (objc_msgSend(v9, "applicationIsInstalled:", v16))
          {
            v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle _gkBundleWithIdentifier:](NSBundle, "_gkBundleWithIdentifier:", v16));
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "_gkBundleVersion"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "_gkBundleShortVersion"));
            v34 = objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", v16);

            if (v19)
            {
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "shortVersions"));
              if ((objc_msgSend(v30, "containsObject:", v19) & 1) == 0)
              {
                v20 = 1;
                goto LABEL_17;
              }
LABEL_22:

LABEL_23:
              objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v16, CFSTR("bundleID"));
              objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v18, CFSTR("bundleVersion"));
              objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v19, CFSTR("shortBundleVersion"));
              v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v15, "platform")));
              objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v23, CFSTR("platform"));

              if ((v34 & 1) != 0)
              {

                goto LABEL_35;
              }
              goto LABEL_24;
            }
            v20 = 0;
          }
          else
          {
            v20 = 0;
            v34 = 0;
            v19 = 0;
            v18 = 0;
          }
LABEL_17:
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "shortVersions"));
          if ((objc_msgSend(v21, "containsObject:", CFSTR("-1")) & 1) != 0)
          {

            v11 = v31;
            if (v20)
              goto LABEL_22;
            goto LABEL_23;
          }
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "versions"));
          if ((objc_msgSend(v22, "containsObject:", v18) & 1) != 0)
          {

            v11 = v31;
            if ((v20 & 1) != 0)
              goto LABEL_22;
            goto LABEL_23;
          }
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "versions"));
          v29 = objc_msgSend(v24, "containsObject:", CFSTR("-1"));

          if ((v20 & 1) != 0)
          {

            v9 = v28;
            v11 = v31;
            if ((v29 & 1) != 0)
              goto LABEL_23;
          }
          else
          {
            v9 = v28;
            v11 = v31;
            if (v29)
              goto LABEL_23;
          }
LABEL_24:

          v12 = &IDSCopyIDForPhoneNumber_ptr;
          v13 = v32;
        }
        v14 = (char *)v14 + 1;
      }
      while (v11 != v14);
      v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      v11 = v25;
    }
    while (v25);
  }
LABEL_35:

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10008C870(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("bundleID")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("bundleVersion")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("shortBundleVersion")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("platform")));
  (*(void (**)(uint64_t, id, void *, void *, void *))(v2 + 16))(v2, v6, v3, v4, v5);

}

void sub_10008C9E8(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  int v13;
  void *v14;
  uint64_t v15;
  void *i;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  void *v39;

  objc_msgSend(*(id *)(a1 + 32), "refreshObject:mergeChanges:", *(_QWORD *)(a1 + 40), 1);
  v2 = objc_alloc((Class)NSFetchRequest);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject entityName](GKTurnBasedSessionCacheObject, "entityName"));
  v4 = objc_msgSend(v2, "initWithEntityName:", v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sessionIDs"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject selfPlayerID](GKPlayerProfileCacheObject, "selfPlayerID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("sessionID IN %@ && currentPlayerID = %@ && status IN %@"), v5, v6, &off_1002DC608));
  objc_msgSend(v4, "setPredicate:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("bundleID"), 1));
  v39 = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v39, 1));
  objc_msgSend(v4, "setSortDescriptors:", v9);

  v32 = v4;
  v33 = a1;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "executeFetchRequest:error:", v4, 0));
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v11)
  {
    v12 = v11;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(_QWORD *)v35 != v15)
          objc_enumerationMutation(v10);
        v17 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "bundleID"));
        v19 = objc_msgSend(v18, "isEqualToString:", v14);

        if ((v19 & 1) != 0)
        {
          ++v13;
        }
        else
        {
          if (v14)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
            objc_msgSend(v20, "setBadgeCount:forBundleID:badgeType:", v13, v14, 2);

          }
          v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "bundleID"));

          v13 = 1;
          v14 = (void *)v21;
        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    }
    while (v12);
  }
  else
  {
    v14 = 0;
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v33 + 40), "game"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "bundleID"));

  v24 = objc_msgSend(v10, "count");
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v33 + 48), "clientProxy"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "bundleIdentifier"));
  v27 = objc_msgSend(v23, "isEqualToString:", v26);

  if (v27)
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", *(_QWORD *)(v33 + 32)));
    objc_msgSend(v28, "setNumberOfTurns:", v24);

  }
  v29 = GKGameCenterIdentifier;
  if (objc_msgSend(v23, "isEqualToString:", GKGameCenterIdentifier))
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
    objc_msgSend(v30, "setBadgeCount:forBundleID:badgeType:", (int)v24, v29, 2);

  }
  v31 = *(_QWORD *)(v33 + 56);
  if (v31)
    (*(void (**)(void))(v31 + 16))();

}

void sub_10008CE80(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  int8x16_t v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  id v20;
  uint8_t *v21;
  _QWORD *v22;
  _QWORD v23[4];
  int8x16_t v24;
  id v25;
  id v26;
  uint8_t *v27;
  _QWORD *v28;
  _QWORD v29[3];
  char v30;
  uint8_t buf[8];
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKTurnBasedService: loadTurnBasedMatchesForGame:", buf, 2u);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKTurnBasedService.m", 418, "-[GKTurnBasedService loadTurnBasedMatchesForGame:loadDetails:prefetchOnly:context:handler:]_block_invoke"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheTransactionGroup transactionGroupWithName:context:client:](GKCacheTransactionGroup, "transactionGroupWithName:context:client:", v4, v5, v6));

  *(_QWORD *)buf = 0;
  v32 = buf;
  v33 = 0x2020000000;
  v34 = 0;
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x2020000000;
  v30 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "replyQueue"));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10008D130;
  v23[3] = &unk_1002C0300;
  v16 = *(int8x16_t *)(a1 + 32);
  v10 = (id)v16.i64[0];
  v24 = vextq_s8(v16, v16, 8uLL);
  v25 = *(id *)(a1 + 48);
  v11 = v7;
  v26 = v11;
  v27 = buf;
  v28 = v29;
  objc_msgSend(v11, "performOnQueue:block:", v9, v23);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "replyQueue"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10008D50C;
  v17[3] = &unk_1002C0328;
  v20 = *(id *)(a1 + 56);
  v21 = buf;
  v14 = v11;
  v22 = v29;
  v15 = *(_QWORD *)(a1 + 40);
  v18 = v14;
  v19 = v15;
  objc_msgSend(v14, "notifyOnQueue:block:", v13, v17);

  _Block_object_dispose(v29, 8);
  _Block_object_dispose(buf, 8);

}

void sub_10008D10C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10008D130(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  __int128 v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10008D238;
  v9[3] = &unk_1002C02D8;
  v10 = *(id *)(a1 + 40);
  v11 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 32);
  v12 = v6;
  v13 = v7;
  v15 = *(_OWORD *)(a1 + 64);
  v14 = v3;
  v8 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", 0, CFSTR("gk-tb-find-sessions"), v5, v9);

}

void sub_10008D238(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  BOOL v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  double v20;

  v13 = a2;
  v7 = a3;
  if (v13)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10008D368;
    v14[3] = &unk_1002BE348;
    v8 = *(void **)(a1 + 32);
    v15 = *(id *)(a1 + 40);
    v16 = *(id *)(a1 + 32);
    v17 = v13;
    v20 = a4;
    v9 = *(id *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v18 = v9;
    v19 = v10;
    objc_msgSend(v8, "performBlockAndWait:", v14);

  }
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = a4;
  v12 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) > 0.0 && v7 == 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v12;
  objc_msgSend(*(id *)(a1 + 48), "setError:", v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_10008D368(uint64_t a1)
{
  GKTurnBasedSessionListCacheObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  GKTurnBasedSessionListCacheObject *v6;
  _QWORD v7[5];
  GKTurnBasedSessionListCacheObject *v8;
  id v9;

  v2 = (GKTurnBasedSessionListCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "turnBasedSessionList"));
  objc_msgSend(*(id *)(a1 + 40), "refreshObject:mergeChanges:", *(_QWORD *)(a1 + 32), 1);
  if (!v2)
  {
    v2 = -[GKCacheObject initWithManagedObjectContext:]([GKTurnBasedSessionListCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "setTurnBasedSessionList:", v2);
  }
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 72)));
  -[GKTurnBasedSessionListCacheObject updateWithServerRepresentation:expirationDate:](v2, "updateWithServerRepresentation:expirationDate:", v3, v4);

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10008D470;
  v7[3] = &unk_1002BB4A0;
  v5 = *(void **)(a1 + 56);
  v7[4] = *(_QWORD *)(a1 + 64);
  v8 = v2;
  v9 = *(id *)(a1 + 40);
  v6 = v2;
  objc_msgSend(v5, "perform:", v7);

}

void sub_10008D470(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10008D500;
  v8[3] = &unk_1002BB540;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "_determineTurnBasedBadgeCountFromList:context:completionHandler:", v5, v6, v8);

}

uint64_t sub_10008D500(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10008D50C(uint64_t a1)
{
  uint64_t v2;
  double v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, double))(v2 + 16))(v2, v4, v3);

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 14, 0);

  }
}

void sub_10008D6D4(id *a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint8_t *v15;
  _QWORD *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  _QWORD *v21;
  uint8_t *v22;
  _QWORD v23[3];
  char v24;
  uint8_t buf[8];
  uint8_t *v26;
  uint64_t v27;
  char v28;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKTurnBasedService: fetchTurnBasedMatchesForGame:", buf, 2u);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKTurnBasedService.m", 471, "-[GKTurnBasedService fetchTurnBasedMatchesForGame:context:handler:]_block_invoke"));
  v5 = a1[4];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheTransactionGroup transactionGroupWithName:context:client:](GKCacheTransactionGroup, "transactionGroupWithName:context:client:", v4, v5, v6));

  *(_QWORD *)buf = 0;
  v26 = buf;
  v27 = 0x2020000000;
  v28 = 0;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2020000000;
  v24 = 0;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10008D944;
  v17[3] = &unk_1002C0378;
  v18 = a1[4];
  v19 = a1[6];
  v21 = v23;
  v22 = buf;
  v8 = v7;
  v20 = v8;
  objc_msgSend(v8, "perform:", v17);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "replyQueue"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10008DAD8;
  v12[3] = &unk_1002BC640;
  v14 = a1[7];
  v11 = v8;
  v13 = v11;
  v15 = buf;
  v16 = v23;
  objc_msgSend(v11, "notifyOnQueue:block:", v10, v12);

  _Block_object_dispose(v23, 8);
  _Block_object_dispose(buf, 8);

}

void sub_10008D920(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10008D944(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;
  __int128 v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10008DA0C;
  v6[3] = &unk_1002C0350;
  v7 = v4;
  v8 = *(id *)(a1 + 40);
  v11 = *(_OWORD *)(a1 + 56);
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v5 = v3;
  objc_msgSend(v7, "performBlock:", v6);

}

void sub_10008DA0C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "refreshObject:mergeChanges:", *(_QWORD *)(a1 + 40), 1);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "turnBasedSessionList"));
  if (objc_msgSend(v4, "isValid"))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend(v4, "expired") ^ 1;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sessionIDs"));
    objc_msgSend(*(id *)(a1 + 48), "setResult:", v2);

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "seed"));
    objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v3, CFSTR("seed"));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10008DAD8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("seed")));
  (*(void (**)(uint64_t, id, void *, _QWORD, _QWORD))(v2 + 16))(v2, v4, v3, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));

}

void sub_10008DC38(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  id v20;
  char v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  id v25;
  uint8_t buf[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID:", buf, 2u);
  }
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKTurnBasedService.m", 504, "-[GKTurnBasedService getTurnBasedMatchesAndCompatibleBundleID:handler:]_block_invoke"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "transactionGroupWithName:", v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "replyQueue"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10008DE3C;
  v22[3] = &unk_1002C03F0;
  v9 = v6;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  v23 = v9;
  v24 = v10;
  v25 = v11;
  objc_msgSend(v9, "performOnQueue:block:", v8, v22);

  if (*(_QWORD *)(a1 + 40))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "replyQueue"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10008E628;
    v17[3] = &unk_1002BCB20;
    v14 = v9;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(a1 + 40);
    v18 = v14;
    v19 = v15;
    v21 = *(_BYTE *)(a1 + 48);
    v20 = v16;
    objc_msgSend(v14, "notifyOnQueue:block:", v13, v17);

  }
}

void sub_10008DE3C(uint64_t a1, void *a2)
{
  id v4;
  void (**v5)(_QWORD);
  int8x16_t v6;
  _QWORD v7[4];
  int8x16_t v8;
  id v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10008DEF8;
  v7[3] = &unk_1002BE490;
  v6 = *(int8x16_t *)(a1 + 32);
  v4 = (id)v6.i64[0];
  v8 = vextq_s8(v6, v6, 8uLL);
  v9 = *(id *)(a1 + 48);
  v5 = a2;
  objc_msgSend(v4, "performOnManagedObjectContext:", v7);
  v5[2](v5);

}

void sub_10008DEF8(id *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint8_t buf[16];

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "context"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v6, v7));

  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v9);
  v11 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: fetching TB match for games", buf, 2u);
  }
  v12 = a1[4];
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "context"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10008E098;
  v18[3] = &unk_1002C03C8;
  v14 = a1[5];
  v15 = a1[4];
  v19 = v14;
  v20 = v15;
  v21 = v8;
  v22 = a1[6];
  v23 = v4;
  v16 = v4;
  v17 = v8;
  objc_msgSend(v12, "fetchTurnBasedMatchesForGame:context:handler:", v17, v13, v18);

}

uint64_t sub_10008E098(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v20[4];
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  _QWORD v25[5];
  id v26;
  id v27;
  id v28;

  v7 = *(void **)(a1 + 32);
  v8 = a3;
  objc_msgSend(v7, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, CFSTR("seed"));

  if ((a4 & 1) == 0)
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKTurnBasedService.m", 517, "-[GKTurnBasedService getTurnBasedMatchesAndCompatibleBundleID:handler:]_block_invoke"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "transactionGroupWithName:", v10));

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10008E278;
    v25[3] = &unk_1002C03A0;
    v12 = *(void **)(a1 + 48);
    v25[4] = *(_QWORD *)(a1 + 40);
    v26 = v12;
    v28 = *(id *)(a1 + 56);
    v13 = v11;
    v27 = v13;
    objc_msgSend(v13, "perform:", v25);
    v14 = *(void **)(a1 + 32);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "replyQueue"));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10008E3D4;
    v20[3] = &unk_1002BC3F8;
    v21 = *(id *)(a1 + 32);
    v22 = v13;
    v17 = *(void **)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 40);
    v24 = v17;
    v18 = v13;
    objc_msgSend(v14, "join:queue:block:", v18, v16, v20);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_10008E278(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  _BOOL8 v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint8_t buf[16];

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: loading TB match for games", buf, 2u);
  }
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 56) == 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10008E3A4;
  v12[3] = &unk_1002BDB30;
  v13 = *(id *)(a1 + 48);
  v14 = v4;
  v11 = v4;
  objc_msgSend(v7, "loadTurnBasedMatchesForGame:loadDetails:prefetchOnly:context:handler:", v8, 1, v9, v10, v12);

}

uint64_t sub_10008E3A4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10008E3D4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  objc_msgSend(*(id *)(a1 + 32), "setError:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
  if (!v3)
  {
    v4 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10008E4AC;
    v6[3] = &unk_1002BC3A8;
    v5 = *(void **)(a1 + 56);
    v6[4] = *(_QWORD *)(a1 + 48);
    v7 = v5;
    v8 = *(id *)(a1 + 40);
    v9 = *(id *)(a1 + 32);
    objc_msgSend(v4, "perform:", v6);

  }
}

void sub_10008E4AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint8_t buf[16];

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: fetching TB match for games", buf, 2u);
  }
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10008E5C8;
  v11[3] = &unk_1002BDB58;
  v12 = *(id *)(a1 + 56);
  v13 = v4;
  v10 = v4;
  objc_msgSend(v7, "fetchTurnBasedMatchesForGame:context:handler:", v8, v9, v11);

}

uint64_t sub_10008E5C8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("seed"));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10008E628(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;
  char v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = objc_msgSend(v2, "count");
  v4 = *(void **)(a1 + 32);
  if (v3)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10008E77C;
    v11[3] = &unk_1002BBAD8;
    v11[4] = *(_QWORD *)(a1 + 40);
    v12 = v2;
    v13 = *(id *)(a1 + 32);
    v14 = *(_BYTE *)(a1 + 56);
    objc_msgSend(v4, "perform:", v11);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setResult:", 0);
  }
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10008E914;
  v8[3] = &unk_1002BB450;
  v10 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 32);
  objc_msgSend(v5, "notifyOnQueue:block:", v7, v8);

}

void sub_10008E77C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  id v15;
  char v16;
  uint8_t buf[16];

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GKTurnBasedService: getTurnBasedMatchesAndCompatibleBundleID: get details for TB match for games", buf, 2u);
  }
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10008E890;
  v12[3] = &unk_1002C0418;
  v9 = *(id *)(a1 + 48);
  v16 = *(_BYTE *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 32);
  v13 = v9;
  v14 = v10;
  v15 = v4;
  v11 = v4;
  objc_msgSend(v7, "getDetailsForTurnBasedMatchIDs:includeGameData:prefetchOnly:handler:", v8, 0, 0, v12);

}

void sub_10008E890(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;

  v7 = a2;
  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", v7);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  if (*(_BYTE *)(a1 + 56))
    objc_msgSend(*(id *)(a1 + 40), "_determineCompatibleGamesForMatches:dispatchGroup:", v7, *(_QWORD *)(a1 + 32));
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10008E914(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10008E9F0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;

  v3 = a2;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10008EB64;
  v16[3] = &unk_1002C0468;
  v17 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", 0));
  v4 = v17;
  v5 = objc_retainBlock(v16);
  v6 = *(void **)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10008EBE0;
  v14[3] = &unk_1002C04B8;
  v15 = v5;
  v7 = v5;
  objc_msgSend(v6, "enumerateObjectsUsingBlock:", v14);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKProfileService, "serviceFromService:", *(_QWORD *)(a1 + 40)));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allObjects"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10008ED1C;
  v11[3] = &unk_1002BCA30;
  v12 = *(id *)(a1 + 32);
  v13 = v3;
  v10 = v3;
  objc_msgSend(v8, "getProfilesForPlayerIDs:handler:", v9, v11);

}

void sub_10008EB64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v9 = v3;
    v5 = objc_msgSend(v3, "isAutomatchPlayer");
    v4 = v9;
    if ((v5 & 1) == 0)
    {
      v6 = objc_msgSend(v9, "isGuestPlayer");
      v4 = v9;
      if ((v6 & 1) == 0)
      {
        v7 = *(void **)(a1 + 32);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "playerID"));
        objc_msgSend(v7, "addObject:", v8);

        v4 = v9;
      }
    }
  }

}

void sub_10008EBE0(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentPlayer"));
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "participants"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10008EC98;
  v7[3] = &unk_1002C0490;
  v8 = *(id *)(a1 + 32);
  objc_msgSend(v6, "enumerateObjectsUsingBlock:", v7);

}

void sub_10008EC98(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "player"));
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

  v6 = *(_QWORD *)(a1 + 32);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "invitedBy"));

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_10008ED1C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10008EE00;
  v12[3] = &unk_1002C04E0;
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "_gkMapDictionaryWithKeyPath:", CFSTR("playerID")));
  v3 = v13;
  v4 = objc_retainBlock(v12);
  v5 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10008EE54;
  v10[3] = &unk_1002C04B8;
  v11 = v4;
  v6 = v4;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v10);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v7, v8, v9);

}

id sub_10008EE00(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "playerID"));
  if (v3)
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3));
  else
    v4 = 0;

  return v4;
}

void sub_10008EE54(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v10 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "currentPlayer"));
  v4 = objc_msgSend(v3, "isGuestPlayer");

  if ((v4 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "currentPlayer"));
    v7 = (*(uint64_t (**)(uint64_t, void *))(v5 + 16))(v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v10, "setCurrentPlayer:", v8);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "participants"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10008EF48;
  v11[3] = &unk_1002C0490;
  v12 = *(id *)(a1 + 32);
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v11);

}

void sub_10008EF48(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;

  v15 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "player"));
  v4 = objc_msgSend(v3, "isGuestPlayer");

  if ((v4 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "player"));
    v7 = (*(uint64_t (**)(uint64_t, void *))(v5 + 16))(v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v15, "setPlayer:", v8);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "invitedBy"));
  v10 = objc_msgSend(v9, "isGuestPlayer");

  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "invitedBy"));
    v13 = (*(uint64_t (**)(uint64_t, void *))(v11 + 16))(v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    objc_msgSend(v15, "setInvitedBy:", v14);

  }
}

void sub_10008F16C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  char v24;
  _QWORD v25[3];
  char v26;
  _QWORD v27[3];
  char v28;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKTurnBasedService.m", 640, "-[GKTurnBasedService fetchDetailsForTurnBasedMatchIDs:includeGameData:responseKind:context:handler:]_block_invoke"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheTransactionGroup transactionGroupWithName:context:client:](GKCacheTransactionGroup, "transactionGroupWithName:context:client:", v2, v3, v4));

  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x2020000000;
  v28 = 0;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2020000000;
  v26 = 0;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10008F37C;
  v17[3] = &unk_1002BDCB0;
  v6 = *(id *)(a1 + 48);
  v21 = v27;
  v22 = v25;
  v23 = *(_DWORD *)(a1 + 64);
  v24 = *(_BYTE *)(a1 + 68);
  v7 = *(_QWORD *)(a1 + 40);
  v18 = v6;
  v19 = v7;
  v8 = v5;
  v20 = v8;
  objc_msgSend(v8, "performOnManagedObjectContext:", v17);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "replyQueue"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10008F7C8;
  v12[3] = &unk_1002BC640;
  v14 = *(id *)(a1 + 56);
  v11 = v8;
  v13 = v11;
  v15 = v27;
  v16 = v25;
  objc_msgSend(v11, "notifyOnQueue:block:", v10, v12);

  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v27, 8);

}

void sub_10008F358(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10008F37C(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  id v7;
  id v8;
  void *v9;
  BOOL v10;
  void *v11;
  id v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint8_t v23[8];
  _QWORD v24[4];
  id v25;
  char v26;
  _QWORD v27[4];
  int8x16_t v28;
  char v29;

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v7 = a2;
  v8 = objc_msgSend(v6, "count");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject sessionsWithSessionIDs:inContext:](GKTurnBasedSessionCacheObject, "sessionsWithSessionIDs:inContext:", *(_QWORD *)(a1 + 32), v7));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v9, "count") == v8;
  v10 = *(int *)(a1 + 72) >= 1 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) != 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v10;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10008F60C;
  v27[3] = &unk_1002C0508;
  v29 = *(_BYTE *)(a1 + 76);
  v28 = vextq_s8(*(int8x16_t *)(a1 + 56), *(int8x16_t *)(a1 + 56), 8uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_gkFilterWithBlock:", v27));
  v12 = objc_msgSend(v11, "count");
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (v12)
    v14 = 1;
  else
    v14 = *(_BYTE *)(v13 + 24) == 0;
  v15 = !v14;
  *(_BYTE *)(v13 + 24) = v15;
  if (*(_DWORD *)(a1 + 72) == 2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) &= *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_gkMapDictionaryWithKeyPath:", CFSTR("sessionID")));
    v17 = *(void **)(a1 + 32);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10008F754;
    v24[3] = &unk_1002C0530;
    v18 = v16;
    v25 = v18;
    v26 = *(_BYTE *)(a1 + 76);
    v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "_gkFilterWithBlock:", v24));
    v20 = (void *)v19;
    if (!os_log_GKGeneral)
      v21 = (id)GKOSLoggers(v19);
    v22 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "fetchDetailsForTurnBasedMatchIDs:Group Matches with SessionIDs have been set", v23, 2u);
    }
    objc_msgSend(*(id *)(a1 + 40), "_updatePlayersForMatches:group:", v20, *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 48), "setResult:", v20);

  }
  v5[2](v5);

}

id sub_10008F60C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  double v5;
  double v6;
  _BOOL4 v7;
  uint64_t v8;
  void *v9;
  double v10;
  double v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  id v16;
  NSObject *v17;
  void *v18;
  uint8_t v20[16];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expirationDate"));
  objc_msgSend(v4, "timeIntervalSinceNow");
  v6 = v5;
  v7 = v5 > 0.0;

  if (*(_BYTE *)(a1 + 48))
  {
    v7 = v6 > 0.0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataExpirationDate"));
    objc_msgSend(v9, "timeIntervalSinceNow");
    v11 = v10;

    v12 = v11 > 0.0;
    if (v11 <= 0.0)
      v7 = 0;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (!*(_BYTE *)(v13 + 24))
      v12 = 0;
    *(_BYTE *)(v13 + 24) = v12;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v14 + 24))
    v15 = v7;
  else
    v15 = 0;
  *(_BYTE *)(v14 + 24) = v15;
  if (v7)
  {
    if (!os_log_GKGeneral)
      v16 = (id)GKOSLoggers(v8);
    v17 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "fetchDetailsForTurnBasedMatchIDs:Session Valid for match ID, returning sessionID", v20, 2u);
    }
    v18 = 0;
  }
  else
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionID"));
  }

  return v18;
}

id sub_10008F754(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "internalRepresentation"));
  if (*(_BYTE *)(a1 + 40))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "gameData"));
    objc_msgSend(v4, "setMatchData:", v5);

  }
  return v4;
}

void sub_10008F7C8(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id, _QWORD, _QWORD, _QWORD))(v2 + 16))(v2, v3, 0, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));

}

void sub_10008F950(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  _QWORD *v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  _QWORD v21[4];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKTurnBasedService.m", 706, "-[GKTurnBasedService loadDetailsForTurnBasedMatchIDs:includeGameData:context:handler:]_block_invoke"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheTransactionGroup transactionGroupWithName:context:client:](GKCacheTransactionGroup, "transactionGroupWithName:context:client:", v2, v3, v4));

  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  v21[3] = 0;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10008FB24;
  v15[3] = &unk_1002C05C8;
  v16 = *(id *)(a1 + 48);
  v20 = *(_BYTE *)(a1 + 64);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 40);
  v17 = v6;
  v18 = v7;
  v19 = v21;
  objc_msgSend(v6, "performOnManagedObjectContext:", v15);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "replyQueue"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10009010C;
  v11[3] = &unk_1002BBD40;
  v13 = *(id *)(a1 + 56);
  v14 = v21;
  v10 = v6;
  v12 = v10;
  objc_msgSend(v10, "notifyOnQueue:block:", v9, v11);

  _Block_object_dispose(v21, 8);
}

void sub_10008FB0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10008FB24(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  int8x16_t v12;
  _QWORD v13[4];
  id v14;
  int8x16_t v15;
  id v16;
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  char v20;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject sessionsWithSessionIDs:inContext:](GKTurnBasedSessionCacheObject, "sessionsWithSessionIDs:inContext:", *(_QWORD *)(a1 + 32), a2));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10008FC68;
  v19[3] = &unk_1002C0578;
  v20 = *(_BYTE *)(a1 + 64);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_gkFilterWithBlock:", v19));
  if (objc_msgSend(v7, "count"))
  {
    v8 = *(void **)(a1 + 40);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10008FD10;
    v13[3] = &unk_1002C05A0;
    v14 = v7;
    v18 = *(_BYTE *)(a1 + 64);
    v12 = *(int8x16_t *)(a1 + 40);
    v9 = (id)v12.i64[0];
    v15 = vextq_s8(v12, v12, 8uLL);
    v10 = v6;
    v11 = *(_QWORD *)(a1 + 56);
    v16 = v10;
    v17 = v11;
    objc_msgSend(v8, "perform:", v13);

  }
  v5[2](v5);

}

id sub_10008FC68(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  void *v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "expirationDate"));
  objc_msgSend(v4, "timeIntervalSinceNow");
  v6 = v5;

  if (*(_BYTE *)(a1 + 32))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataExpirationDate"));
    objc_msgSend(v7, "timeIntervalSinceNow");
    v9 = v8;

    if (v6 > 0.0 && v9 > 0.0)
      goto LABEL_4;
LABEL_6:
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionID"));
    goto LABEL_7;
  }
  if (v6 <= 0.0)
    goto LABEL_6;
LABEL_4:
  v10 = 0;
LABEL_7:

  return v10;
}

void sub_10008FD10(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD v18[3];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v17[0] = CFSTR("session-ids");
  v17[1] = CFSTR("get-game-state");
  v18[0] = v4;
  v18[1] = &off_1002DB640;
  v17[2] = CFSTR("get-exchanges");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(unsigned __int8 *)(a1 + 72)));
  v18[2] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 3));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10008FEA4;
  v12[3] = &unk_1002BE2A8;
  v13 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v15 = v3;
  v16 = v10;
  v14 = v9;
  v11 = v3;
  objc_msgSend(v7, "issueRequest:bagKey:clientProxy:handler:", v6, CFSTR("gk-tb-get-session"), v8, v12);

}

void sub_10008FEA4(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;

  v7 = a2;
  v8 = a3;
  if (v7)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", a4));
    v10 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10008FFB4;
    v12[3] = &unk_1002BB8A0;
    v13 = v7;
    v14 = *(id *)(a1 + 40);
    v15 = v9;
    v11 = v9;
    objc_msgSend(v10, "performOnManagedObjectContext:", v12);

  }
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a4;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v8);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10008FFB4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void (**v5)(_QWORD);
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("sessions")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_gkMapDictionaryWithKeyPath:", CFSTR("sessionID")));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100090094;
  v9[3] = &unk_1002BE280;
  v10 = v6;
  v11 = *(id *)(a1 + 48);
  v7 = v6;
  objc_msgSend(v8, "enumerateObjectsUsingBlock:", v9);
  v5[2](v5);

}

void sub_100090094(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("session-id")));
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3));
    objc_msgSend(v4, "updateWithServerRepresentation:expirationDate:", v5, *(_QWORD *)(a1 + 40));

  }
}

void sub_10009010C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v3, v2);

}

void sub_100090278(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  id v18;
  id v19;
  char v20;
  char v21;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKTurnBasedService.m", 772, "-[GKTurnBasedService getDetailsForTurnBasedMatchIDs:includeGameData:prefetchOnly:handler:]_block_invoke"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "transactionGroupWithName:", v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100090430;
  v16[3] = &unk_1002C0668;
  v7 = *(id *)(a1 + 48);
  v20 = *(_BYTE *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v19 = v7;
  v16[4] = v8;
  v17 = v9;
  v21 = *(_BYTE *)(a1 + 57);
  v10 = v4;
  v18 = v10;
  objc_msgSend(v10, "performOnQueue:block:", v6, v16);

  if (*(_QWORD *)(a1 + 48))
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "replyQueue"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100090A58;
    v13[3] = &unk_1002BB450;
    v15 = *(id *)(a1 + 48);
    v14 = v10;
    objc_msgSend(v14, "notifyOnQueue:block:", v12, v13);

  }
}

void sub_100090430(uint64_t a1, void *a2)
{
  id v3;
  BOOL v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  char v20;
  char v21;

  v3 = a2;
  if (*(_BYTE *)(a1 + 64))
    v4 = 1;
  else
    v4 = *(_QWORD *)(a1 + 56) == 0;
  v5 = !v4;
  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(unsigned __int8 *)(a1 + 65);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100090548;
  v14[3] = &unk_1002C0640;
  v10 = *(id *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(a1 + 40);
  v15 = v10;
  v16 = v11;
  v17 = v12;
  v20 = *(_BYTE *)(a1 + 65);
  v21 = *(_BYTE *)(a1 + 64);
  v18 = *(id *)(a1 + 56);
  v19 = v3;
  v13 = v3;
  objc_msgSend(v6, "fetchDetailsForTurnBasedMatchIDs:includeGameData:responseKind:context:handler:", v7, v8, v5, v9, v14);

}

void sub_100090548(uint64_t a1, void *a2, uint64_t a3, char a4, char a5)
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  char v26;
  _QWORD v27[5];
  id v28;
  id v29;
  char v30;

  v8 = a2;
  if ((a4 & 1) == 0)
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKTurnBasedService.m", 783, "-[GKTurnBasedService getDetailsForTurnBasedMatchIDs:includeGameData:prefetchOnly:handler:]_block_invoke_3"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "transactionGroupWithName:", v10));

    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100090734;
    v27[3] = &unk_1002BBAD8;
    v12 = *(void **)(a1 + 48);
    v27[4] = *(_QWORD *)(a1 + 40);
    v28 = v12;
    v30 = *(_BYTE *)(a1 + 72);
    v13 = v11;
    v29 = v13;
    objc_msgSend(v13, "perform:", v27);
    if ((a5 & 1) == 0 && !*(_BYTE *)(a1 + 73))
    {
      v14 = *(void **)(a1 + 32);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "replyQueue"));
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100090870;
      v20[3] = &unk_1002C0618;
      v21 = v13;
      v25 = *(id *)(a1 + 56);
      v17 = *(id *)(a1 + 32);
      v18 = *(_QWORD *)(a1 + 40);
      v19 = *(void **)(a1 + 48);
      v22 = v17;
      v23 = v18;
      v24 = v19;
      v26 = *(_BYTE *)(a1 + 72);
      objc_msgSend(v14, "join:queue:block:", v21, v16, v20);

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v8);
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_100090734(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 56);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000907E8;
  v9[3] = &unk_1002BDC48;
  v10 = v3;
  v8 = v3;
  objc_msgSend(v4, "loadDetailsForTurnBasedMatchIDs:includeGameData:context:handler:", v5, v6, v7, v9);

}

void sub_1000907E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100099214((uint64_t)v4, v6);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100090870(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  int v6;
  int v7;
  void *v8;
  void **v9;
  uint64_t v10;
  void (*v11)(uint64_t, void *);
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  int v16;
  char v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v2)
  {
    v3 = *(void **)(a1 + 56);
    v4 = *(_QWORD *)(a1 + 64) == 0;
    v9 = _NSConcreteStackBlock;
    v11 = sub_100090954;
    v12 = &unk_1002C05F0;
    v5 = *(void **)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    v6 = !v4;
    v7 = 2 * v6;
    v10 = 3221225472;
    v14 = v3;
    v17 = *(_BYTE *)(a1 + 72);
    v16 = v7;
    v15 = *(id *)(a1 + 40);
    objc_msgSend(v5, "perform:", &v9);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error", v9, v10, v11, v12, v13));
  objc_msgSend(*(id *)(a1 + 40), "setError:", v8);

}

void sub_100090954(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 60);
  v7 = *(unsigned int *)(a1 + 56);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100090A28;
  v10[3] = &unk_1002BDB58;
  v11 = *(id *)(a1 + 48);
  v12 = v3;
  v9 = v3;
  objc_msgSend(v4, "fetchDetailsForTurnBasedMatchIDs:includeGameData:responseKind:context:handler:", v5, v6, v7, v8, v10);

}

uint64_t sub_100090A28(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100090A58(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100090EC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  const __CFString *v26;
  uint64_t v27;
  const __CFString *v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD v31[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1000911BC;
  v23[3] = &unk_1002BB658;
  v24 = *(id *)(a1 + 40);
  v25 = *(id *)(a1 + 32);
  objc_msgSend(v4, "performBlockAndWait:", v23);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "participants"));
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "participants"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", (int)objc_msgSend(*(id *)(a1 + 48), "currentParticipant")));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "player"));
    v10 = objc_msgSend(v9, "isGuestPlayer");
    v11 = *(void **)(a1 + 56);
    if (v10)
    {
      v31[0] = *(_QWORD *)(a1 + 40);
      v30[0] = CFSTR("session-id");
      v30[1] = CFSTR("guest-id");
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "guestIdentifier"));
      v31[1] = v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v31, v30, 2));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "updateRequestWithPushToken:", v13));

    }
    else
    {
      v28 = CFSTR("session-id");
      v29 = *(_QWORD *)(a1 + 40);
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "updateRequestWithPushToken:", v12));
    }

  }
  else
  {
    v15 = *(void **)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 40);
    v26 = CFSTR("session-id");
    v27 = v16;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "updateRequestWithPushToken:", v8));
  }

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "clientProxy"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100091254;
  v20[3] = &unk_1002BCB98;
  v21 = *(id *)(a1 + 32);
  v22 = v3;
  v19 = v3;
  objc_msgSend(v17, "issueRequest:bagKey:clientProxy:handler:", v14, CFSTR("gk-tb-accept"), v18, v20);

}

void sub_1000911BC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:](GKTurnBasedSessionCacheObject, "sessionWithID:inManagedObjectContext:", v2, v3));

  objc_msgSend(v6, "expire");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:](GKTurnBasedSessionListCacheObject, "expireListsForSessionID:context:", v4, v5);

}

uint64_t sub_100091254(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100091280(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  id v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  _QWORD v21[5];
  id v22;
  id v23;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100091418;
    v21[3] = &unk_1002BB4A0;
    v3 = *(void **)(a1 + 40);
    v21[4] = *(_QWORD *)(a1 + 48);
    v22 = v2;
    v23 = *(id *)(a1 + 40);
    objc_msgSend(v3, "perform:", v21);
    v4 = *(void **)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000915AC;
    v18[3] = &unk_1002BB590;
    v7 = *(id *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v19 = v7;
    v20 = v8;
    objc_msgSend(v4, "performOnQueue:block:", v6, v18);

  }
  if (*(_QWORD *)(a1 + 56))
  {
    v9 = *(void **)(a1 + 40);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "replyQueue"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000917D8;
    v14[3] = &unk_1002BC3D0;
    v17 = *(id *)(a1 + 56);
    v12 = *(id *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    v15 = v12;
    v16 = v13;
    objc_msgSend(v9, "notifyOnQueue:block:", v11, v14);

  }
}

void sub_100091418(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100091508;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v5, 1, v7);

}

void sub_100091508(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

    if (!v6)
      objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("result"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000915AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  int8x16_t v8;
  _QWORD v9[5];
  _QWORD v10[4];
  int8x16_t v11;
  id v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10009169C;
  v10[3] = &unk_1002BB568;
  v8 = *(int8x16_t *)(a1 + 32);
  v5 = (id)v8.i64[0];
  v11 = vextq_s8(v8, v8, 8uLL);
  v12 = v3;
  v6 = v3;
  objc_msgSend(v4, "performBlockAndWait:", v10);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100091750;
  v9[3] = &unk_1002BBB70;
  v7 = *(void **)(a1 + 32);
  v9[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v7, "perform:", v9);

}

void sub_10009169C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bundleIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v3, v4));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "turnBasedSessionList"));
  objc_msgSend(v5, "expire");

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100091750(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000917CC;
  v6[3] = &unk_1002BCA80;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "getTurnBasedMatchesWithHandler:", v6);

}

uint64_t sub_1000917CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000917D8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("result")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 14, 0);

}

void sub_100091AE0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[3];
  _QWORD v26[3];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100091D8C;
  v20[3] = &unk_1002BB658;
  v21 = *(id *)(a1 + 40);
  v22 = *(id *)(a1 + 32);
  objc_msgSend(v4, "performBlockAndWait:", v20);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "participants"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", (int)objc_msgSend(*(id *)(a1 + 48), "currentParticipant")));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "player"));
  v8 = objc_msgSend(v7, "isGuestPlayer");
  v9 = *(void **)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v25[0] = CFSTR("session-id");
    v25[1] = CFSTR("reason");
    v26[0] = v10;
    v26[1] = &off_1002DB640;
    v25[2] = CFSTR("guest-id");
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "guestIdentifier"));
    v26[2] = v11;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v26, v25, 3));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "updateRequestWithPushToken:", v12));

  }
  else
  {
    v23[0] = CFSTR("session-id");
    v23[1] = CFSTR("reason");
    v24[0] = v10;
    v24[1] = &off_1002DB640;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v24, v23, 2));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "updateRequestWithPushToken:", v11));
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "clientProxy"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100091EA0;
  v17[3] = &unk_1002BCB98;
  v18 = *(id *)(a1 + 32);
  v19 = v3;
  v16 = v3;
  objc_msgSend(v14, "issueRequest:bagKey:clientProxy:handler:", v13, CFSTR("gk-tb-decline"), v15, v17);

}

void sub_100091D8C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v11 = (id)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:](GKTurnBasedSessionCacheObject, "sessionWithID:inManagedObjectContext:", v2, v3));

  objc_msgSend(v11, "expire");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:](GKTurnBasedSessionListCacheObject, "expireListsForSessionID:context:", v4, v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIdentifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v7, v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "turnBasedSessionList"));
  objc_msgSend(v10, "expire");

}

uint64_t sub_100091EA0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100091ECC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  _QWORD v14[5];
  _QWORD v15[5];
  id v16;
  id v17;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100092028;
    v15[3] = &unk_1002BB4A0;
    v3 = *(void **)(a1 + 40);
    v15[4] = *(_QWORD *)(a1 + 48);
    v16 = v2;
    v17 = *(id *)(a1 + 40);
    objc_msgSend(v3, "perform:", v15);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000921BC;
    v14[3] = &unk_1002BBB70;
    v4 = *(void **)(a1 + 40);
    v14[4] = *(_QWORD *)(a1 + 48);
    objc_msgSend(v4, "perform:", v14);

  }
  if (*(_QWORD *)(a1 + 56))
  {
    v5 = *(void **)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100092244;
    v10[3] = &unk_1002BC3D0;
    v13 = *(id *)(a1 + 56);
    v8 = *(id *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = v8;
    v12 = v9;
    objc_msgSend(v5, "notifyOnQueue:block:", v7, v10);

  }
}

void sub_100092028(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100092118;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v5, 1, v7);

}

void sub_100092118(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

    if (!v6)
      objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("result"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000921BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100092238;
  v6[3] = &unk_1002BCA80;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "getTurnBasedMatchesWithHandler:", v6);

}

uint64_t sub_100092238(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100092244(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("result")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 14, 0);

}

void sub_100092530(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  const __CFString *v18;
  uint64_t v19;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000926EC;
  v15[3] = &unk_1002BB658;
  v16 = *(id *)(a1 + 40);
  v17 = *(id *)(a1 + 32);
  objc_msgSend(v4, "performBlock:", v15);

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v18 = CFSTR("session-id");
  v19 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "updateRequestWithPushToken:", v7));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100092840;
  v12[3] = &unk_1002BCB98;
  v13 = *(id *)(a1 + 32);
  v14 = v3;
  v11 = v3;
  objc_msgSend(v9, "issueRequest:bagKey:clientProxy:handler:", v8, CFSTR("gk-tb-remove-session"), v10, v12);

}

void sub_1000926EC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:](GKTurnBasedSessionListCacheObject, "expireListsForSessionID:context:", v2, v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleIdentifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v5, v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "turnBasedSessionList"));
  objc_msgSend(v8, "expire");

  v11 = (id)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("sessionID = %@"), *(_QWORD *)(a1 + 32)));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  +[GKCacheObject deleteObjectsMatchingPredicate:context:](GKTurnBasedSessionCacheObject, "deleteObjectsMatchingPredicate:context:", v11, v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  +[GKCacheObject deleteObjectsMatchingPredicate:context:](GKTurnBasedSessionEntryCacheObject, "deleteObjectsMatchingPredicate:context:", v11, v10);

}

uint64_t sub_100092840(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10009286C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];

  if (*(_QWORD *)(a1 + 32))
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10009296C;
    v12[3] = &unk_1002BBB70;
    v2 = *(void **)(a1 + 40);
    v12[4] = *(_QWORD *)(a1 + 48);
    objc_msgSend(v2, "perform:", v12);
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v3 = *(void **)(a1 + 40);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "replyQueue"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000929F4;
    v8[3] = &unk_1002BC3D0;
    v11 = *(id *)(a1 + 56);
    v6 = *(id *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = v6;
    v10 = v7;
    objc_msgSend(v3, "notifyOnQueue:block:", v5, v8);

  }
}

void sub_10009296C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000929E8;
  v6[3] = &unk_1002BCA80;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "getTurnBasedMatchesWithHandler:", v6);

}

uint64_t sub_1000929E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000929F4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v4, "refreshContentsForDataType:userInfo:", 14, 0);

}

void sub_100092D08(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  const __CFString *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  _QWORD v33[4];
  id v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[4];
  id v41;
  id v42;
  _QWORD v43[8];
  _QWORD v44[8];
  _BYTE v45[128];

  v31 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_10009312C;
  v40[3] = &unk_1002BB658;
  v41 = *(id *)(a1 + 40);
  v42 = *(id *)(a1 + 32);
  objc_msgSend(v4, "performBlockAndWait:", v40);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "participants"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v5, "count")));

  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "participants"));
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v36, v45, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v12, "isAutomatchParticipant") & 1) == 0)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "serverRepresentation"));
          objc_msgSend(v6, "addObject:", v13);

        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v36, v45, 16);
    }
    while (v9);
  }

  v14 = *(void **)(a1 + 48);
  v44[0] = *(_QWORD *)(a1 + 40);
  v43[0] = CFSTR("session-id");
  v43[1] = CFSTR("current-turn-number");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v14, "turnNumber")));
  v44[1] = v15;
  v43[2] = CFSTR("turns");
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "turnsForParticipantIndexes:turnTimeout:", *(_QWORD *)(a1 + 64), *(double *)(a1 + 80)));
  v44[2] = v16;
  v43[3] = CFSTR("turn-at");
  v32 = v3;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_gkServerTimestamp"));
  v44[3] = v17;
  v43[4] = CFSTR("turn-message");
  v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "message"));
  v19 = (void *)v18;
  v20 = &stru_1002CE2A8;
  if (v18)
    v20 = (const __CFString *)v18;
  v44[4] = v20;
  v43[5] = CFSTR("localized-turn-message");
  v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "localizableMessage"));
  v22 = (void *)v21;
  v23 = &__NSDictionary0__struct;
  if (v21)
    v23 = (void *)v21;
  v44[5] = v23;
  v43[6] = CFSTR("game-state");
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "matchData"));
  v25 = v24;
  if (!v24)
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
  v43[7] = CFSTR("players");
  v44[6] = v25;
  v44[7] = v6;
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v44, v43, 8));
  if (!v24)

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "updateRequestWithPushToken:", v26));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_10009319C;
  v33[3] = &unk_1002BCB98;
  v34 = *(id *)(a1 + 32);
  v35 = v31;
  v30 = v31;
  objc_msgSend(v27, "issueRequest:bagKey:clientProxy:handler:", v28, CFSTR("gk-tb-turn"), v29, v33);

}

void sub_10009312C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v3 = (id)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:](GKTurnBasedSessionCacheObject, "sessionWithID:inManagedObjectContext:", v1, v2));

  objc_msgSend(v3, "expire");
  objc_msgSend(v3, "expireGameData");

}

uint64_t sub_10009319C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000931C8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  _QWORD v14[5];
  _QWORD v15[5];
  id v16;
  id v17;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100093324;
    v15[3] = &unk_1002BB4A0;
    v3 = *(void **)(a1 + 40);
    v15[4] = *(_QWORD *)(a1 + 48);
    v16 = v2;
    v17 = *(id *)(a1 + 40);
    objc_msgSend(v3, "perform:", v15);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000934B8;
    v14[3] = &unk_1002BBB70;
    v4 = *(void **)(a1 + 40);
    v14[4] = *(_QWORD *)(a1 + 48);
    objc_msgSend(v4, "perform:", v14);

  }
  if (*(_QWORD *)(a1 + 56))
  {
    v5 = *(void **)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100093540;
    v10[3] = &unk_1002BC3D0;
    v13 = *(id *)(a1 + 56);
    v8 = *(id *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = v8;
    v12 = v9;
    objc_msgSend(v5, "notifyOnQueue:block:", v7, v10);

  }
}

void sub_100093324(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100093414;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v5, 1, v7);

}

void sub_100093414(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

    if (!v6)
      objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("result"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000934B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100093534;
  v6[3] = &unk_1002BCA80;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "getTurnBasedMatchesWithHandler:", v6);

}

uint64_t sub_100093534(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100093540(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("result")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 14, 0);

}

void sub_100093864(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void (**v7)(_QWORD);
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10009394C;
  v8[3] = &unk_1002BD310;
  v4 = *(void **)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 56);
  v5 = *(id *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v12 = v5;
  v13 = v6;
  v14 = *(id *)(a1 + 32);
  v7 = a2;
  objc_msgSend(v4, "performOnManagedObjectContext:", v8);
  v7[2](v7);

}

void sub_10009394C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _QWORD v28[4];
  _QWORD v29[4];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:](GKTurnBasedSessionCacheObject, "sessionWithID:inManagedObjectContext:", *(_QWORD *)(a1 + 32), v5));
  objc_msgSend(v7, "expire");
  v8 = *(void **)(a1 + 40);
  v29[0] = *(_QWORD *)(a1 + 32);
  v28[0] = CFSTR("session-id");
  v28[1] = CFSTR("game-state-version");
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "matchDataVersion"));
  v10 = (void *)v9;
  v11 = &stru_1002CE2A8;
  if (v9)
    v11 = (const __CFString *)v9;
  v29[1] = v11;
  v28[2] = CFSTR("game-state");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "matchData"));
  v13 = v12;
  if (!v12)
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
  v28[3] = CFSTR("resolve-exchanges");
  v14 = *(void **)(a1 + 48);
  if (!v14)
    v14 = &__NSArray0__struct;
  v29[2] = v13;
  v29[3] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 4));
  if (!v12)

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "updateRequestWithPushToken:", v15));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "clientProxy"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100093BA8;
  v22[3] = &unk_1002BF0B8;
  v23 = *(id *)(a1 + 72);
  v24 = v5;
  v25 = v7;
  v26 = *(id *)(a1 + 40);
  v27 = v6;
  v19 = v6;
  v20 = v7;
  v21 = v5;
  objc_msgSend(v16, "issueRequest:bagKey:clientProxy:handler:", v17, CFSTR("gk-tb-update-game-state"), v18, v22);

}

uint64_t sub_100093BA8(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  _QWORD v9[4];
  id v10;
  id v11;
  double v12;

  objc_msgSend(*(id *)(a1 + 32), "setError:");
  if (!a4)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100093C54;
    v9[3] = &unk_1002BBA40;
    v7 = *(void **)(a1 + 40);
    v10 = *(id *)(a1 + 48);
    v11 = *(id *)(a1 + 56);
    v12 = a2;
    objc_msgSend(v7, "performBlockAndWait:", v9);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_100093C54(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "matchData"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", *(double *)(a1 + 48)));
  objc_msgSend(v2, "saveGameData:expirationDate:", v4, v3);

}

void sub_100093CB8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100093DE0;
    v13[3] = &unk_1002BB4A0;
    v3 = *(void **)(a1 + 40);
    v13[4] = *(_QWORD *)(a1 + 48);
    v14 = v2;
    v15 = *(id *)(a1 + 40);
    objc_msgSend(v3, "perform:", v13);

  }
  if (*(_QWORD *)(a1 + 56))
  {
    v4 = *(void **)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100093F70;
    v9[3] = &unk_1002BC3D0;
    v12 = *(id *)(a1 + 56);
    v7 = *(id *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v10 = v7;
    v11 = v8;
    objc_msgSend(v4, "notifyOnQueue:block:", v6, v9);

  }
}

void sub_100093DE0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100093ED0;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v5, 1, v7);

}

void sub_100093ED0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v6)
    objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("result"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100093F70(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("result")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 14, 0);

}

void sub_100094254(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10009445C;
  v16[3] = &unk_1002BB658;
  v17 = *(id *)(a1 + 40);
  v18 = *(id *)(a1 + 32);
  objc_msgSend(v4, "performBlockAndWait:", v16);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](GKBulletinController, "sharedController"));
  objc_msgSend(v5, "clearTurnBasedBulletinsForMatchID:", *(_QWORD *)(a1 + 40));

  v6 = *(void **)(a1 + 48);
  v20[0] = *(_QWORD *)(a1 + 40);
  v19[0] = CFSTR("session-id");
  v19[1] = CFSTR("player-status-code");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64)));
  v20[1] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 2));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "updateRequestWithPushToken:", v8));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100094570;
  v13[3] = &unk_1002BCB98;
  v14 = *(id *)(a1 + 32);
  v15 = v3;
  v12 = v3;
  objc_msgSend(v10, "issueRequest:bagKey:clientProxy:handler:", v9, CFSTR("gk-tb-resign"), v11, v13);

}

void sub_10009445C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v11 = (id)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:](GKTurnBasedSessionCacheObject, "sessionWithID:inManagedObjectContext:", v2, v3));

  objc_msgSend(v11, "expire");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:](GKTurnBasedSessionListCacheObject, "expireListsForSessionID:context:", v4, v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIdentifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v7, v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "turnBasedSessionList"));
  objc_msgSend(v10, "expire");

}

uint64_t sub_100094570(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10009459C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  _QWORD v14[5];
  _QWORD v15[5];
  id v16;
  id v17;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000946F8;
    v15[3] = &unk_1002BB4A0;
    v3 = *(void **)(a1 + 40);
    v15[4] = *(_QWORD *)(a1 + 48);
    v16 = v2;
    v17 = *(id *)(a1 + 40);
    objc_msgSend(v3, "perform:", v15);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100094888;
    v14[3] = &unk_1002BBB70;
    v4 = *(void **)(a1 + 40);
    v14[4] = *(_QWORD *)(a1 + 48);
    objc_msgSend(v4, "perform:", v14);

  }
  if (*(_QWORD *)(a1 + 56))
  {
    v5 = *(void **)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100094910;
    v10[3] = &unk_1002BC3D0;
    v13 = *(id *)(a1 + 56);
    v8 = *(id *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = v8;
    v12 = v9;
    objc_msgSend(v5, "notifyOnQueue:block:", v7, v10);

  }
}

void sub_1000946F8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000947E8;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v5, 1, v7);

}

void sub_1000947E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v6)
    objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("result"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100094888(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100094904;
  v6[3] = &unk_1002BCA80;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "getTurnBasedMatchesWithHandler:", v6);

}

uint64_t sub_100094904(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100094910(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("result")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 14, 0);

}

void sub_100094EEC(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  _QWORD v25[4];
  id v26;
  id v27;
  _QWORD v28[7];
  _QWORD v29[7];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "context"));
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1000951F4;
  v25[3] = &unk_1002BB658;
  v26 = a1[5];
  v27 = a1[4];
  objc_msgSend(v4, "performBlockAndWait:", v25);

  v5 = a1[6];
  v29[0] = a1[5];
  v28[0] = CFSTR("session-id");
  v28[1] = CFSTR("current-turn-number");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v5, "turnNumber")));
  v29[1] = v6;
  v28[2] = CFSTR("completion-message");
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "message"));
  v8 = (void *)v7;
  v9 = &stru_1002CE2A8;
  if (v7)
    v9 = (const __CFString *)v7;
  v29[2] = v9;
  v28[3] = CFSTR("localized-completion-message");
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "localizableMessage"));
  v11 = (void *)v10;
  v12 = &__NSDictionary0__struct;
  if (v10)
    v12 = (void *)v10;
  v29[3] = v12;
  v28[4] = CFSTR("game-state");
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "matchData"));
  v14 = v13;
  if (!v13)
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
  v29[4] = v14;
  v28[5] = CFSTR("players");
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "participants"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "_gkFilterWithBlock:", &stru_1002C06D0));
  v28[6] = CFSTR("reason");
  v29[5] = v16;
  v29[6] = CFSTR("Game Over");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 7));

  if (!v13)
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "updateRequestWithPushToken:", v17));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[8], "clientProxy"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100095350;
  v22[3] = &unk_1002BCB98;
  v23 = a1[4];
  v24 = v3;
  v21 = v3;
  objc_msgSend(v18, "issueRequest:bagKey:clientProxy:handler:", v19, CFSTR("gk-tb-complete"), v20, v22);

}

void sub_1000951F4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v11 = (id)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:](GKTurnBasedSessionCacheObject, "sessionWithID:inManagedObjectContext:", v2, v3));

  objc_msgSend(v11, "expire");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:](GKTurnBasedSessionListCacheObject, "expireListsForSessionID:context:", v4, v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIdentifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v7, v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "turnBasedSessionList"));
  objc_msgSend(v10, "expire");

}

id sub_100095308(id a1, GKTurnBasedParticipantInternal *a2, unint64_t a3)
{
  GKTurnBasedParticipantInternal *v3;
  void *v4;

  v3 = a2;
  if ((-[GKTurnBasedParticipantInternal isAutomatchParticipant](v3, "isAutomatchParticipant") & 1) != 0)
    v4 = 0;
  else
    v4 = (void *)objc_claimAutoreleasedReturnValue(-[GKTurnBasedParticipantInternal serverRepresentation](v3, "serverRepresentation"));

  return v4;
}

uint64_t sub_100095350(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10009537C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  int8x16_t v26;
  _QWORD v27[4];
  id v28;
  uint64_t v29;
  id v30;
  _QWORD v31[5];
  _QWORD v32[4];
  int8x16_t v33;
  id v34;
  _QWORD v35[4];
  id v36;
  uint64_t v37;
  id v38;
  _QWORD v39[4];
  id v40;
  uint64_t v41;
  id v42;

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_14;
  v2 = *(void **)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKTurnBasedService.m", 1296, "-[GKTurnBasedService completeTurnBasedMatch:scores:achievements:handler:]_block_invoke_5"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "transactionGroupWithName:", v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
  if (v5)
  {

  }
  else if (objc_msgSend(*(id *)(a1 + 56), "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_requestForTurnBasedSubmitValues:withServerLabel:sessionID:", *(_QWORD *)(a1 + 56), CFSTR("scores"), *(_QWORD *)(a1 + 32)));
    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "replyQueue"));
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_1000956BC;
      v39[3] = &unk_1002BB4A0;
      v9 = v6;
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(void **)(a1 + 48);
      v40 = v9;
      v41 = v10;
      v42 = v11;
      objc_msgSend(v4, "performOnQueue:block:", v8, v39);

    }
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
  if (v12)
    goto LABEL_12;
  if (objc_msgSend(*(id *)(a1 + 64), "count"))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_requestForTurnBasedSubmitValues:withServerLabel:sessionID:", *(_QWORD *)(a1 + 64), CFSTR("achievement-ids"), *(_QWORD *)(a1 + 32)));
    if (v12)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "replyQueue"));
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_100095810;
      v35[3] = &unk_1002BB4A0;
      v15 = v12;
      v16 = *(_QWORD *)(a1 + 40);
      v17 = *(void **)(a1 + 48);
      v36 = v15;
      v37 = v16;
      v38 = v17;
      objc_msgSend(v4, "performOnQueue:block:", v14, v35);

    }
LABEL_12:

  }
  v18 = *(void **)(a1 + 48);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_100095964;
  v32[3] = &unk_1002BB4A0;
  v26 = *(int8x16_t *)(a1 + 32);
  v19 = (id)v26.i64[0];
  v33 = vextq_s8(v26, v26, 8uLL);
  v34 = *(id *)(a1 + 48);
  objc_msgSend(v18, "perform:", v32);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100095AF8;
  v31[3] = &unk_1002BBB70;
  v20 = *(void **)(a1 + 48);
  v31[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v20, "perform:", v31);

LABEL_14:
  if (*(_QWORD *)(a1 + 72))
  {
    v21 = *(void **)(a1 + 48);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "replyQueue"));
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100095B80;
    v27[3] = &unk_1002BC3D0;
    v30 = *(id *)(a1 + 72);
    v24 = *(id *)(a1 + 48);
    v25 = *(_QWORD *)(a1 + 40);
    v28 = v24;
    v29 = v25;
    objc_msgSend(v21, "notifyOnQueue:block:", v23, v27);

  }
}

void sub_1000956BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100095794;
  v8[3] = &unk_1002BCB98;
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-submit-session-scores"), v6, v8);

}

void sub_100095794(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

    if (!v6)
      objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100095810(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000958E8;
  v8[3] = &unk_1002BCB98;
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-submit-session-achievements"), v6, v8);

}

void sub_1000958E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

    if (!v6)
      objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100095964(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100095A54;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v5, 1, v7);

}

void sub_100095A54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

    if (!v6)
      objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("result"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100095AF8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100095B74;
  v6[3] = &unk_1002BCA80;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "getTurnBasedMatchesWithHandler:", v6);

}

uint64_t sub_100095B74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100095B80(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("result")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 14, 0);

}

void sub_100095F00(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:](GKTurnBasedSessionCacheObject, "sessionWithID:inManagedObjectContext:", v2, v3));

  objc_msgSend(v6, "expire");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:](GKTurnBasedSessionListCacheObject, "expireListsForSessionID:context:", v4, v5);

}

void sub_100095F98(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  _QWORD v19[5];
  _QWORD v20[5];

  v3 = a2;
  v19[0] = CFSTR("session-id");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "matchID"));
  v5 = *(_QWORD *)(a1 + 40);
  v20[0] = v4;
  v20[1] = v5;
  v19[1] = CFSTR("participants");
  v19[2] = CFSTR("message-timeout");
  v6 = objc_claimAutoreleasedReturnValue(+[NSNumber _gkServerTimeInterval:](NSNumber, "_gkServerTimeInterval:", *(double *)(a1 + 88)));
  v7 = (void *)v6;
  v8 = &__NSDictionary0__struct;
  v9 = *(void **)(a1 + 56);
  if (*(_QWORD *)(a1 + 48))
    v8 = *(void **)(a1 + 48);
  v20[2] = v6;
  v20[3] = v8;
  v19[3] = CFSTR("notification-message");
  v19[4] = CFSTR("data");
  v10 = v9;
  if (!v9)
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
  v20[4] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 5));
  if (!v9)

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "updateRequestWithPushToken:", v11));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "clientProxy"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10009618C;
  v16[3] = &unk_1002BCB98;
  v17 = *(id *)(a1 + 80);
  v18 = v3;
  v15 = v3;
  objc_msgSend(v12, "issueRequest:bagKey:clientProxy:handler:", v13, CFSTR("gk-tb-send-request"), v14, v16);

}

uint64_t sub_10009618C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKey:", CFSTR("request-id")));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("exchangeID"));

  objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100096204(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;
  _QWORD v17[5];
  _QWORD v18[5];
  id v19;
  id v20;
  id v21;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("exchangeID")));
  v3 = (void *)v2;
  v4 = *(void **)(a1 + 40);
  if (v4)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(void **)(a1 + 32);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000963A0;
    v18[3] = &unk_1002BC3A8;
    v18[4] = *(_QWORD *)(a1 + 48);
    v19 = v4;
    v20 = *(id *)(a1 + 32);
    v21 = v3;
    objc_msgSend(v6, "perform:", v18);

  }
  v7 = *(void **)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100096558;
  v17[3] = &unk_1002BBB70;
  v17[4] = *(_QWORD *)(a1 + 48);
  objc_msgSend(v7, "perform:", v17);
  if (*(_QWORD *)(a1 + 56))
  {
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "replyQueue"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000965E0;
    v13[3] = &unk_1002BC3D0;
    v16 = *(id *)(a1 + 56);
    v11 = *(id *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 48);
    v14 = v11;
    v15 = v12;
    objc_msgSend(v8, "notifyOnQueue:block:", v10, v13);

  }
}

void sub_1000963A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000964A4;
  v7[3] = &unk_1002BCE80;
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = v3;
  v6 = v3;
  objc_msgSend(v4, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v5, 1, v7);

}

void sub_1000964A4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

    if (!v6)
      objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("exchangeID"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("match"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100096558(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000965D4;
  v6[3] = &unk_1002BCA80;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "getTurnBasedMatchesWithHandler:", v6);

}

uint64_t sub_1000965D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000965E0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("exchangeID")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("match")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *, void *))(v2 + 16))(v2, v3, v4, v5);

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v6, "refreshContentsForDataType:userInfo:", 14, 0);

}

void sub_100096904(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100096A60;
  v13[3] = &unk_1002BB658;
  v14 = *(id *)(a1 + 40);
  v15 = *(id *)(a1 + 32);
  objc_msgSend(v4, "performBlockAndWait:", v13);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "updateRequestWithPushToken:", *(_QWORD *)(a1 + 56)));
  v7 = *(_QWORD *)(a1 + 64);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "clientProxy"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100096AF8;
  v10[3] = &unk_1002BCB98;
  v11 = *(id *)(a1 + 32);
  v12 = v3;
  v9 = v3;
  objc_msgSend(v5, "issueRequest:bagKey:clientProxy:handler:", v6, v7, v8, v10);

}

void sub_100096A60(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKTurnBasedSessionCacheObject sessionWithID:inManagedObjectContext:](GKTurnBasedSessionCacheObject, "sessionWithID:inManagedObjectContext:", v2, v3));

  objc_msgSend(v6, "expire");
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  +[GKTurnBasedSessionListCacheObject expireListsForSessionID:context:](GKTurnBasedSessionListCacheObject, "expireListsForSessionID:context:", v4, v5);

}

uint64_t sub_100096AF8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100096B24(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  _QWORD v14[5];
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100096C94;
    v15[3] = &unk_1002BC3A8;
    v3 = *(void **)(a1 + 40);
    v15[4] = *(_QWORD *)(a1 + 48);
    v16 = v2;
    v17 = *(id *)(a1 + 40);
    v18 = *(id *)(a1 + 56);
    objc_msgSend(v3, "perform:", v15);

  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100096E4C;
  v14[3] = &unk_1002BBB70;
  v4 = *(void **)(a1 + 40);
  v14[4] = *(_QWORD *)(a1 + 48);
  objc_msgSend(v4, "perform:", v14);
  if (*(_QWORD *)(a1 + 64))
  {
    v5 = *(void **)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100096ED4;
    v10[3] = &unk_1002BC3D0;
    v13 = *(id *)(a1 + 64);
    v8 = *(id *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = v8;
    v12 = v9;
    objc_msgSend(v5, "notifyOnQueue:block:", v7, v10);

  }
}

void sub_100096C94(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100096D98;
  v7[3] = &unk_1002BCE80;
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = v3;
  v6 = v3;
  objc_msgSend(v4, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v5, 1, v7);

}

void sub_100096D98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

    if (!v6)
      objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("exchangeID"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("match"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100096E4C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100096EC8;
  v6[3] = &unk_1002BCA80;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "getTurnBasedMatchesWithHandler:", v6);

}

uint64_t sub_100096EC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100096ED4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("match")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 14, 0);

}

void sub_100097720(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updateRequestWithPushToken:", *(_QWORD *)(a1 + 40)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10009780C;
  v8[3] = &unk_1002BCB98;
  v9 = *(id *)(a1 + 56);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-tb-reminder"), v6, v8);

}

uint64_t sub_10009780C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100097838(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_100097C44(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "share"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "recordID"));
  v6 = v5;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    v8 = objc_alloc((Class)CKRecordID);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordName"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), CFSTR("share"), v10));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneID"));
    v7 = objc_msgSend(v8, "initWithRecordName:zoneID:", v11, v13);

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceFromService:](GKMultiplayerMatchService, "serviceFromService:", *(_QWORD *)(a1 + 40)));
  v15 = *(_QWORD *)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100097DEC;
  v17[3] = &unk_1002C06F8;
  v18 = *(id *)(a1 + 48);
  v19 = v3;
  v16 = v3;
  objc_msgSend(v14, "setupInviteShareWithRecordID:rootRecord:handler:", v7, v15, v17);

}

uint64_t sub_100097DEC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "URL"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("url"));

  objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100097E5C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("url")));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);

  }
}

void sub_1000980F8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  _QWORD v27[4];
  id v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  const __CFString *v34;
  uint64_t v35;
  _BYTE v36[128];
  _QWORD v37[4];
  _QWORD v38[4];

  v3 = a2;
  v37[0] = CFSTR("session-id");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "matchID"));
  v38[0] = v4;
  v37[1] = CFSTR("num-reservations");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 72)));
  v38[1] = v5;
  v37[2] = CFSTR("min-players");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 80)));
  v38[2] = v6;
  v37[3] = CFSTR("max-players");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 88)));
  v38[3] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v38, v37, 4));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v8));

  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v25 = v9;
    v26 = v3;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count")));
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v11 = *(id *)(a1 + 40);
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v31;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v31 != v14)
            objc_enumerationMutation(v11);
          v16 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)v15);
          v34 = CFSTR("player-id");
          v35 = v16;
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1));
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v17));

          v19 = *(_QWORD *)(a1 + 48);
          if (v19)
            objc_msgSend(v18, "setObject:forKeyedSubscript:", v19, CFSTR("invite-message"));
          objc_msgSend(v10, "addObject:", v18);

          v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
      }
      while (v13);
    }

    v9 = v25;
    objc_msgSend(v25, "setObject:forKeyedSubscript:", v10, CFSTR("invites"));

    v3 = v26;
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "updateRequestWithPushToken:", v9));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "clientProxy"));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100098470;
  v27[3] = &unk_1002BCB98;
  v28 = *(id *)(a1 + 64);
  v29 = v3;
  v24 = v3;
  objc_msgSend(v20, "issueRequest:bagKey:clientProxy:handler:", v22, CFSTR("gk-tb-reserve-slots"), v23, v27);

}

uint64_t sub_100098470(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10009849C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_1000986B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  int8x16_t v12;
  _QWORD v13[4];
  int8x16_t v14;
  id v15;

  v5 = a4;
  v6 = v5;
  if (objc_msgSend(v5, "code") == (id)2)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userInfo"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));

  }
  if (objc_msgSend(v6, "code") == (id)26)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100098814;
    v13[3] = &unk_1002BB8F0;
    v12 = *(int8x16_t *)(a1 + 32);
    v10 = (id)v12.i64[0];
    v14 = vextq_s8(v12, v12, 8uLL);
    v15 = *(id *)(a1 + 48);
    +[GKCloudGameSession createZoneWithName:handler:](GKCloudGameSession, "createZoneWithName:handler:", CFSTR("com.apple.legacygaming.invites"), v13);

  }
  else
  {
    v11 = *(_QWORD *)(a1 + 48);
    if (v11)
      (*(void (**)(uint64_t, _QWORD, void *))(v11 + 16))(v11, *(_QWORD *)(a1 + 32), v6);
  }

}

id *sub_100098814(id *result, uint64_t a2)
{
  if (!a2)
    return (id *)objc_msgSend(result[4], "saveRecord:withHandler:", result[5], result[6]);
  return result;
}

void sub_100098A70(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100098A98(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bundleIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v9 = (id)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v3, v4));

  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v9, CFSTR("game"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "turnBasedSessionList"));
  if (objc_msgSend(v5, "isValid"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleIdentifier"));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v6, "badgeCountForBundleID:badgeType:", v8, 2);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v5, "expired");
  }

}

void sub_100098BC4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100098CA8;
  v11[3] = &unk_1002C0798;
  v12 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 32);
  v13 = v7;
  v14 = v9;
  v15 = v3;
  v16 = v8;
  v10 = v3;
  objc_msgSend(v4, "loadTurnBasedMatchesForGame:loadDetails:prefetchOnly:context:handler:", v5, 0, 1, v6, v11);

}

void sub_100098CA8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100098D7C;
  v9[3] = &unk_1002C0770;
  v10 = *(id *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 48);
  v11 = v5;
  v12 = v7;
  v13 = v3;
  v14 = v6;
  v8 = v3;
  objc_msgSend(v4, "performBlockAndWait:", v9);

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

id sub_100098D7C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  objc_msgSend(v2, "refreshObject:mergeChanges:", *(_QWORD *)(a1 + 40), 1);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "clientProxy"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleIdentifier"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v3, "badgeCountForBundleID:badgeType:", v5, 2);

  return objc_msgSend(*(id *)(a1 + 32), "setError:", *(_QWORD *)(a1 + 56));
}

void sub_100098E20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, v3, v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "clientProxy"));
  objc_msgSend(v5, "refreshContentsForDataType:userInfo:", 14, 0);

}

void sub_10009914C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100034EE4((void *)&_mh_execute_header, a2, a3, "_determineCompatibleGamesForMatches:dispatchGroup: Missing bundleID for match %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000991B0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100034EE4((void *)&_mh_execute_header, a2, a3, "_determineCompatibleGamesForMatches:dispatchGroup: Missing bundleVersion for match %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_100099214(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "getDetailsForTurnBasedMatchIDs:Failed to Load Details for TBG Match ID.Error: %@", (uint8_t *)&v2, 0xCu);
  sub_100016C20();
}

void sub_10009990C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, objc_msgSend(v2, "isAppUnlistedAndDisallowed"));

}

void sub_100099C8C(uint64_t a1)
{
  void *v2;
  void *v3;
  id *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "clientProxy"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "verifyAuthorized"));

  v4 = *(id **)(a1 + 32);
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "clientProxy"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100099D7C;
    v7[3] = &unk_1002BB450;
    v9 = *(id *)(a1 + 40);
    v8 = v3;
    dispatch_async(v6, v7);

  }
  else
  {
    objc_msgSend(v4[5], "generateIdentityVerificationSignatureWithCompletionHandler:", *(_QWORD *)(a1 + 40));
  }

}

uint64_t sub_100099D7C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_100099F4C(uint64_t a1)
{
  void *v2;
  void *v3;
  id *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "clientProxy"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "verifyAuthorized"));

  v4 = *(id **)(a1 + 32);
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "clientProxy"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "replyQueue"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10009A03C;
    v7[3] = &unk_1002BB450;
    v9 = *(id *)(a1 + 40);
    v8 = v3;
    dispatch_async(v6, v7);

  }
  else
  {
    objc_msgSend(v4[5], "fetchItemsForIdentityVerificationSignature:", *(_QWORD *)(a1 + 40));
  }

}

uint64_t sub_10009A03C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_10009A450(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  NSObject *v7;
  _QWORD block[4];
  id v9;
  id v10;
  _QWORD v11[5];
  id v12;
  char v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKAuthenticationWrapperService.m", 161, "-[GKAuthenticationWrapperService signOutPlayerWithOptOut:handler:]_block_invoke"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v2));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 7, 0));
  objc_msgSend(v3, "setError:", v4);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10009A5EC;
  v11[3] = &unk_1002C07E8;
  v11[4] = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 48);
  v5 = v3;
  v12 = v5;
  objc_msgSend(v5, "perform:", v11);
  objc_msgSend(v5, "wait");
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009A6C4;
    block[3] = &unk_1002BB450;
    v10 = *(id *)(a1 + 40);
    v9 = v5;
    dispatch_async(v7, block);

  }
}

void sub_10009A5EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v6 = *(unsigned __int8 *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10009A694;
  v8[3] = &unk_1002BB6E8;
  v9 = v4;
  v10 = v3;
  v7 = v3;
  objc_msgSend(v5, "signOutPlayerWithOptOut:handler:", v6, v8);

}

uint64_t sub_10009A694(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10009A6C4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t sub_10009A8D8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10009AAF4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  void (*v8)(uint64_t, void *);
  void ***v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void **v14;
  void *v15;
  NSObject *v16;
  _QWORD block[4];
  id v18;
  id v19;
  uint64_t v20;
  void **v21;
  void **v22;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKAuthenticationWrapperService.m", 209, "-[GKAuthenticationWrapperService authenticateWithService:username:password:altDSID:isGame:usingFastPath:displayAuthUI:handler:]_block_invoke"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v2));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 7, 0));
  objc_msgSend(v3, "setError:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appInitState"));
  v7 = objc_msgSend(v6, "isEqual:", CFSTR("GKAppInitialized"));

  if (v7)
  {
    v22 = _NSConcreteStackBlock;
    v8 = sub_10009ADA8;
    v9 = &v22;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "appInitState"));
    if (objc_msgSend(v11, "isEqual:", CFSTR("GKAppInitInProgress")))
    {

    }
    else
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
      v13 = objc_msgSend(v12, "setAppInitState:", CFSTR("GKAppInitInProgress"));

      if (!v13)
        goto LABEL_8;
    }
    v21 = _NSConcreteStackBlock;
    v8 = sub_10009AEC8;
    v9 = &v21;
  }
  v9[1] = (void **)3221225472;
  v9[2] = (void **)v8;
  v9[3] = (void **)&unk_1002C0810;
  v9[4] = (void **)*(id *)(a1 + 32);
  v9[5] = (void **)*(id *)(a1 + 40);
  v9[6] = (void **)*(id *)(a1 + 48);
  v9[7] = (void **)*(id *)(a1 + 56);
  *((_WORD *)v9 + 36) = *(_WORD *)(a1 + 88);
  v14 = v3;
  v9[8] = v14;
  objc_msgSend(v14, "perform:", v9);

LABEL_8:
  objc_msgSend(v3, "wait");
  if (*(_QWORD *)(a1 + 72))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "clientProxy"));
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "replyQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009B160;
    block[3] = &unk_1002C0860;
    v20 = *(_QWORD *)(a1 + 80);
    v19 = *(id *)(a1 + 72);
    v18 = v3;
    dispatch_async(v16, block);

  }
}

void sub_10009ADA8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned __int8 *)(a1 + 72);
  v9 = *(unsigned __int8 *)(a1 + 73);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10009AE70;
  v11[3] = &unk_1002BC308;
  v12 = *(id *)(a1 + 64);
  v13 = v3;
  v10 = v3;
  objc_msgSend(v4, "authenticatePlayerWithUsername:password:altDSID:isGame:usingFastPath:handler:", v5, v6, v7, v8, v9, v11);

}

uint64_t sub_10009AE70(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10009AEC8(uint64_t a1, void *a2)
{
  id v3;
  CFAbsoluteTime Current;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  CFAbsoluteTime v17;

  v3 = a2;
  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned __int8 *)(a1 + 72);
  v10 = *(unsigned __int8 *)(a1 + 73);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10009AFB8;
  v13[3] = &unk_1002C0838;
  v14 = v5;
  v11 = *(id *)(a1 + 64);
  v17 = Current;
  v15 = v11;
  v16 = v3;
  v12 = v3;
  objc_msgSend(v14, "authenticatePlayerWithUsername:password:altDSID:isGame:usingFastPath:handler:", v6, v7, v8, v9, v10, v13);

}

void sub_10009AFB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  __CFString *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  _BOOL8 v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  void *v17;
  uint8_t v18[16];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "appInitState"));

  if (!v6 && v8 != CFSTR("GKAppInitialized"))
  {
    if (!os_log_GKGeneral)
      v10 = (id)GKOSLoggers(v9);
    v11 = os_log_GKTrace;
    v12 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
    if (v12)
    {
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "wrapper app-init state not set, returning not-authenticated", v18, 2u);
    }
    if (!os_log_GKGeneral)
      v13 = (id)GKOSLoggers(v12);
    v14 = os_log_GKAccount;
    if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_ERROR))
      sub_10009E610(v14);
    v6 = (id)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 6, 0));
  }
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v5);
  v15 = objc_msgSend(*(id *)(a1 + 40), "setError:", v6);
  if (!os_log_GKGeneral)
    v16 = (id)GKOSLoggers(v15);
  v17 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_10009E584(v17);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10009B160(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_10009E650(v3);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v5, v6);

}

uint64_t sub_10009B7F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10009D430(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  char v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKAuthenticationWrapperService.m", 526, "-[GKAuthenticationWrapperService accountCreated:playerID:authenticationToken:alias:finished:handler:]_block_invoke"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v2));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 7, 0));
  objc_msgSend(v3, "setError:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "clientProxy"));
  objc_msgSend(v5, "setAppInitState:", CFSTR("GKAppInitInProgress"));

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10009D640;
  v13[3] = &unk_1002BDD68;
  v6 = *(void **)(a1 + 40);
  v13[4] = *(_QWORD *)(a1 + 32);
  v14 = v6;
  v15 = *(id *)(a1 + 48);
  v16 = *(id *)(a1 + 56);
  v17 = *(id *)(a1 + 64);
  v19 = *(_BYTE *)(a1 + 80);
  v7 = v3;
  v18 = v7;
  objc_msgSend(v7, "perform:", v13);
  if (*(_QWORD *)(a1 + 72))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "replyQueue"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10009D768;
    v10[3] = &unk_1002BB450;
    v12 = *(id *)(a1 + 72);
    v11 = v7;
    objc_msgSend(v11, "notifyOnQueue:block:", v9, v10);

  }
}

void sub_10009D640(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned __int8 *)(a1 + 80);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10009D710;
  v11[3] = &unk_1002BC308;
  v9 = *(_QWORD *)(a1 + 64);
  v12 = *(id *)(a1 + 72);
  v13 = v3;
  v10 = v3;
  objc_msgSend(v5, "accountCreated:playerID:authenticationToken:alias:finished:handler:", v4, v6, v7, v9, v8, v11);

}

uint64_t sub_10009D710(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10009D768(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_10009DA70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKAuthenticationWrapperService.m", 561, "-[GKAuthenticationWrapperService accountCreated:playerID:authenticationToken:alias:altDSID:finished:handler:]_block_invoke"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v2));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 7, 0));
  objc_msgSend(v3, "setError:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "clientProxy"));
  objc_msgSend(v5, "setAppInitState:", CFSTR("GKAppInitInProgress"));

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10009DC94;
  v13[3] = &unk_1002C08D8;
  v6 = *(void **)(a1 + 40);
  v13[4] = *(_QWORD *)(a1 + 32);
  v14 = v6;
  v15 = *(id *)(a1 + 48);
  v16 = *(id *)(a1 + 56);
  v17 = *(id *)(a1 + 64);
  v18 = *(id *)(a1 + 72);
  v20 = *(_BYTE *)(a1 + 88);
  v7 = v3;
  v19 = v7;
  objc_msgSend(v7, "perform:", v13);
  if (*(_QWORD *)(a1 + 80))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "replyQueue"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10009DDD0;
    v10[3] = &unk_1002BB450;
    v12 = *(id *)(a1 + 80);
    v11 = v7;
    objc_msgSend(v11, "notifyOnQueue:block:", v9, v10);

  }
}

void sub_10009DC94(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(unsigned __int8 *)(a1 + 88);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10009DD78;
  v12[3] = &unk_1002BC308;
  v13 = *(id *)(a1 + 80);
  v14 = v3;
  v11 = v3;
  objc_msgSend(v5, "accountCreated:playerID:authenticationToken:alias:altDSID:finished:handler:", v4, v6, v7, v8, v9, v10, v12);

}

uint64_t sub_10009DD78(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10009DDD0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

uint64_t sub_10009E04C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10009E224(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10009E424(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "clientProxy"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "verifyAuthorized"));

  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v4);
    v6 = os_log_GKAccount;
    if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_ERROR))
      sub_10009E6DC((uint64_t)v3, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_gkReplyHandlerInvocation"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clientProxy"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "replyQueue"));
    objc_msgSend(v7, "_gkCallbackWithError:queue:", v3, v9);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "invokeWithTarget:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
  }

}

void sub_10009E570(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_10009E584(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_1000279CC();
  sub_10009E570((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_1000279E0();
}

void sub_10009E610(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "AppInit state is not set, returning not-authenticated error", v1, 2u);
}

void sub_10009E650(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_1000279CC();
  sub_10009E570((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_1000279E0();
}

void sub_10009E6DC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "verifyAuthorized failed, we might be authenticating or authorizing: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10009EF14(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10009EFC8;
  v5[3] = &unk_1002C0928;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "_gkMapDictionaryWithKeyPath:", CFSTR("playerID")));
  v3 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v4 = v6;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10009EFC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "player"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerID"));

  if (!v5)
  {
LABEL_9:
    v7 = *(id *)(a1 + 40);
    goto LABEL_10;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));
  v7 = v6;
  if (!v6
    || (v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "displayNameWithOptions:", 0)),
        v9 = objc_msgSend(v8, "length"),
        v8,
        !v9))
  {
    v10 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v11 = (id)GKOSLoggers(v6);
      v10 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      sub_1000A0D24((uint64_t)v5, (uint64_t)v3, v10);

    goto LABEL_9;
  }
LABEL_10:
  objc_msgSend(v3, "setPlayer:", v7);

}

void sub_10009F690(id *a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  id v18;
  _QWORD v19[5];
  id v20;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  if (a1[4])
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "leaderboardForServerRepresentations:"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", CFSTR("results")));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10009F884;
    v19[3] = &unk_1002C0950;
    v19[4] = a1[5];
    v9 = v7;
    v20 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_gkMapWithBlock:", v19));
    objc_msgSend(v9, "setScores:", v10);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", CFSTR("player-score")));
    if (objc_msgSend(v11, "count"))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "scoreForServerRepresentation:leaderboard:", v11, v9));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "internalRepresentation"));
      objc_msgSend(v12, "setPlayer:", v13);

      objc_msgSend(v9, "setPlayerScore:", v12);
    }
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10009F894;
    v16[3] = &unk_1002BB4A0;
    v14 = a1[6];
    v16[4] = a1[5];
    v17 = v9;
    v18 = a1[7];
    v15 = v9;
    objc_msgSend(v14, "perform:", v16);
    objc_msgSend(a1[6], "setResult:", v15);

  }
  v5[2](v5);

}

id sub_10009F884(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "scoreForServerRepresentation:leaderboard:", a2, *(_QWORD *)(a1 + 40));
}

void sub_10009F894(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10009F924;
  v8[3] = &unk_1002BB540;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "updatePlayersForLeaderboard:service:handler:", v5, v6, v8);

}

uint64_t sub_10009F924(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10009F930(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10009FB48(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "serverRequestWithService:", a1[5]));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "bagKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "clientProxy"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10009FC6C;
  v12[3] = &unk_1002BF0B8;
  v8 = a1[6];
  v9 = a1[4];
  v10 = a1[5];
  v13 = v8;
  v14 = v9;
  v15 = v10;
  v16 = a1[7];
  v17 = v3;
  v11 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, v6, v7, v12);

}

void sub_10009FC6C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[5];
  id v14;
  id v15;
  id v16;
  id v17;
  double v18;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v7 && !a3)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10009FD64;
    v13[3] = &unk_1002BF3E8;
    v12 = *(void **)(a1 + 32);
    v13[4] = *(_QWORD *)(a1 + 40);
    v14 = v7;
    v15 = *(id *)(a1 + 48);
    v16 = *(id *)(a1 + 56);
    v18 = a4;
    v17 = *(id *)(a1 + 32);
    objc_msgSend(v12, "perform:", v13);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), v8, v9, v10, v11);

}

void sub_10009FD64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(double *)(a1 + 72);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10009FE24;
  v10[3] = &unk_1002C0978;
  v11 = *(id *)(a1 + 64);
  v12 = v3;
  v9 = v3;
  objc_msgSend(v4, "generateScoresFromServerResponse:service:context:timeToLive:handler:", v5, v6, v7, v10, v8);

}

uint64_t sub_10009FE24(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10009FE54(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

NSString *__cdecl sub_1000A011C(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return (NSString *)-[GKPlayerInternal playerID](a2, "playerID", a3);
}

void sub_1000A02F0(id *a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  id v24;
  _QWORD v25[4];
  id v26;
  _QWORD v27[5];
  id v28;

  v5 = a3;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "internalRepresentation"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "leaderboardForServerRepresentations:", a1[5]));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", CFSTR("results")));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_1000A0568;
  v27[3] = &unk_1002C09C0;
  v27[4] = a1[4];
  v9 = v7;
  v28 = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_gkMapWithBlock:", v27));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_gkMapDictionaryWithKeyPath:", CFSTR("player.playerID")));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "playerInternals"));
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1000A0578;
  v25[3] = &unk_1002C09E8;
  v13 = v11;
  v26 = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_gkFilterWithBlock:", v25));
  objc_msgSend(v9, "setScores:", v14);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
  if (v15)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v16));
    objc_msgSend(v9, "setPlayerScore:", v17);

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "playerScore"));
    objc_msgSend(v18, "setPlayer:", v6);

  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000A05C0;
  v22[3] = &unk_1002BB4A0;
  v22[4] = a1[4];
  v23 = v9;
  v19 = a1[6];
  v24 = a1[7];
  v20 = v9;
  objc_msgSend(v19, "perform:", v22);
  objc_msgSend(a1[6], "setResult:", v20);
  v5[2](v5);

}

id sub_1000A0568(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "scoreForServerRepresentation:leaderboard:", a2, *(_QWORD *)(a1 + 40));
}

id sub_1000A0578(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "playerID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));

  return v4;
}

void sub_1000A05C0(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A0650;
  v8[3] = &unk_1002BB540;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v4, "updatePlayersForLeaderboard:service:handler:", v5, v6, v8);

}

uint64_t sub_1000A0650(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000A065C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1000A088C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serverRequestWithService:", *(_QWORD *)(a1 + 40)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bagKey"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000A099C;
  v12[3] = &unk_1002BF0B8;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(a1 + 40);
  v13 = v8;
  v14 = v9;
  v15 = v10;
  v16 = *(id *)(a1 + 64);
  v17 = v3;
  v11 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, v6, v7, v12);

}

void sub_1000A099C(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  void **v10;
  uint64_t v11;
  void (*v12)(uint64_t, void *);
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  double v19;

  v7 = a2;
  v8 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v8);
  if (v7 && !v8)
  {
    v10 = _NSConcreteStackBlock;
    v11 = 3221225472;
    v12 = sub_1000A0AAC;
    v13 = &unk_1002BF3E8;
    v9 = *(void **)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 40);
    v15 = v7;
    v16 = *(id *)(a1 + 48);
    v17 = *(id *)(a1 + 56);
    v19 = a4;
    v18 = *(id *)(a1 + 32);
    objc_msgSend(v9, "perform:", &v10);

  }
  objc_msgSend(*(id *)(a1 + 32), "setError:", v8, v10, v11, v12, v13, v14);
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_1000A0AAC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(double *)(a1 + 72);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000A0B6C;
  v10[3] = &unk_1002C0978;
  v11 = *(id *)(a1 + 64);
  v12 = v3;
  v9 = v3;
  objc_msgSend(v4, "generateScoresFromServerResponse:service:context:timeToLive:handler:", v5, v6, v7, v10, v8);

}

uint64_t sub_1000A0B6C(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000A0B9C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_1000A0D24(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "No internal or displayName for playerID:%@ (score:%@).Will be changed to anonymous", (uint8_t *)&v3, 0x16u);
}

void sub_1000A0DA8(id a1)
{
  uint64_t i;
  _OWORD v2[4];
  uint64_t v3;
  void *keys[2];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  const __CFString *v8;

  v6 = *(_OWORD *)off_1002C0A60;
  v7 = *(_OWORD *)off_1002C0A70;
  v8 = CFSTR("Media");
  *(_OWORD *)keys = *(_OWORD *)off_1002C0A40;
  v5 = *(_OWORD *)off_1002C0A50;
  v2[0] = xmmword_1002328E0;
  v2[1] = unk_1002328F0;
  v2[2] = xmmword_100232900;
  v2[3] = unk_100232910;
  v3 = 1024;
  qword_100317E50 = (uint64_t)CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)v2, 9, &kCFTypeDictionaryKeyCallBacks, 0);
  for (i = 8; i != -1; --i)

}

void sub_1000A0E9C(void *a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle _gkBundleIdentifierFromConnection:](NSBundle, "_gkBundleIdentifierFromConnection:", a2));
  v5 = 138412290;
  v6 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Granting public Game Center entitlement that was not provided by: %@", (uint8_t *)&v5, 0xCu);

  sub_1000279A0();
}

void sub_1000A0F48(void *a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle _gkBundleIdentifierFromConnection:](NSBundle, "_gkBundleIdentifierFromConnection:", a2));
  v5 = 138412290;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ERROR: No Game Center entitlement provided by new connection from: %@", (uint8_t *)&v5, 0xCu);

  sub_1000279A0();
}

void sub_1000A0FF4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "ERROR: The Game Center entitlement is required to use GameKit. To avoid failing App Store Review, follow these instructions:\nhttps://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_game-center", v1, 2u);
}

id sub_1000A11F8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "appendFormat:", CFSTR(".%@"), a2);
}

id sub_1000A1280(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v7;

  v2 = *(void **)(a1 + 32);
  v7 = a2;
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "resourceIdentifierForKeys:", v4, v7));

  return v5;
}

void sub_1000A1404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t sub_1000A141C(uint64_t a1, void *a2)
{
  unint64_t result;

  result = (unint64_t)objc_msgSend(a2, "hash");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) ^= result;
  return result;
}

void sub_1000A1774(id a1)
{
  GKInviteURLManager *v1;
  void *v2;

  v1 = objc_alloc_init(GKInviteURLManager);
  v2 = (void *)qword_100317E60;
  qword_100317E60 = (uint64_t)v1;

}

void sub_1000A1964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A197C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000A198C(uint64_t a1)
{

}

void sub_1000A1994(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_1000A1A4C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 8), *(id *)(a1 + 40));
}

void sub_1000A2FFC(id a1)
{
  GKSessionCache *v1;
  void *v2;

  v1 = objc_alloc_init(GKSessionCache);
  v2 = (void *)qword_100317E70;
  qword_100317E70 = (uint64_t)v1;

}

void sub_1000A3064(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.GameCenter.GKCloudGameSession.cache", 0);
  v2 = (void *)qword_100317E80;
  qword_100317E80 = (uint64_t)v1;

}

void sub_1000A3230(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A32C4;
  v6[3] = &unk_1002BB6E8;
  v4 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "updateSessionCacheWithHandler:", v6);

}

uint64_t sub_1000A32C4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000A32F4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  if (*(_QWORD *)(a1 + 56))
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionWithIdentifier:", *(_QWORD *)(a1 + 40)));
    if (v6)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }
    else
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));

      if (!v2)
      {
        v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkUserErrorForGameSessionErrorCode:userInfo:](NSError, "_gkUserErrorForGameSessionErrorCode:userInfo:", 16, 0));
        objc_msgSend(*(id *)(a1 + 48), "setError:", v3);

      }
      v4 = *(_QWORD *)(a1 + 56);
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
}

void sub_1000A3570(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A3604;
  v6[3] = &unk_1002BB6E8;
  v4 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "updateSessionCacheWithHandler:", v6);

}

uint64_t sub_1000A3604(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000A3634(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionsInContainer:", *(_QWORD *)(a1 + 40)));
    v3 = *(_QWORD *)(a1 + 56);
    v5 = v2;
    if (objc_msgSend(v2, "count"))
    {
      (*(void (**)(uint64_t, id, _QWORD))(v3 + 16))(v3, v5, 0);
    }
    else
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
      (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v4);

    }
  }
}

void sub_1000A3920(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t v12;

  v3 = *(void **)(a1 + 40);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionCache"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userRecordID"));

  if (v6)
  {
    if ((objc_msgSend(v5, "isValid") & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 40), "updateFriendRecordIfNeeded");
    }
    else
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1000A3A3C;
      v9[3] = &unk_1002C0B60;
      v8 = *(void **)(a1 + 32);
      v12 = *(_QWORD *)(a1 + 40);
      v10 = v5;
      v11 = *(id *)(a1 + 32);
      objc_msgSend(v8, "perform:", v9);

    }
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkUserErrorForGameSessionErrorCode:userInfo:](NSError, "_gkUserErrorForGameSessionErrorCode:userInfo:", 2, 0));
    objc_msgSend(*(id *)(a1 + 32), "setError:", v7);

  }
  v4[2](v4);

}

void sub_1000A3A3C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A3AE8;
  v6[3] = &unk_1002BB8F0;
  v7 = *(id *)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v5 = v3;
  objc_msgSend(v4, "updateSessionCacheDatabasesWithHandler:", v6);

}

uint64_t sub_1000A3AE8(uint64_t a1, void *a2)
{
  _BOOL8 v3;
  void *v4;
  id v5;

  v3 = a2 == 0;
  v4 = *(void **)(a1 + 32);
  v5 = a2;
  objc_msgSend(v4, "setIsValid:", v3);
  objc_msgSend(*(id *)(a1 + 40), "setError:", v5);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1000A3B44(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 48), "subscribeToAllDBwithHandler:", 0);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
}

void sub_1000A3CE4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A3D7C;
  v6[3] = &unk_1002BB6E8;
  v4 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "updateCacheForDatabaseScope:handler:", 2, v6);

}

uint64_t sub_1000A3D7C(uint64_t a1, uint64_t a2)
{
  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000A3DB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A3E48;
  v6[3] = &unk_1002BB6E8;
  v4 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "updateCacheForDatabaseScope:handler:", 3, v6);

}

uint64_t sub_1000A3E48(uint64_t a1, uint64_t a2)
{
  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000A3E7C(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 48), "updateFriendRecordIfNeeded");
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
}

void sub_1000A3FA0(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", CFSTR("updateCacheForZoneID")));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000A40B8;
  v9[3] = &unk_1002C0B60;
  v3 = *(id *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  v10 = v3;
  v12 = v4;
  v5 = v2;
  v11 = v5;
  objc_msgSend(v5, "perform:", v9);
  objc_msgSend(v5, "wait");
  if (*(_QWORD *)(a1 + 40))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A4200;
    block[3] = &unk_1002BB450;
    v8 = *(id *)(a1 + 40);
    v7 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

void sub_1000A40B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession databaseForZoneID:](GKCloudGameSession, "databaseForZoneID:", *(_QWORD *)(a1 + 32)));
  v5 = *(void **)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A41D0;
  v8[3] = &unk_1002BB6E8;
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v5, "updateCacheForDatabase:zoneIDs:handler:", v4, v6, v8);

}

uint64_t sub_1000A41D0(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000A4200(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1000A42E4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sessionCache"));
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = sub_1000A197C;
  v26 = sub_1000A198C;
  v27 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", CFSTR("updateCacheForDatabaseScope")));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000A44E4;
  v11[3] = &unk_1002C0C50;
  v4 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = v4;
  v14 = &v22;
  v5 = v2;
  v12 = v5;
  v6 = v3;
  v13 = v6;
  v15 = &v18;
  objc_msgSend(v6, "perform:", v11);
  objc_msgSend(v6, "wait");
  if (*((_BYTE *)v19 + 24))
  {
    v7 = v23[5];
    if (*(_QWORD *)(a1 + 48) == 2)
      objc_msgSend(v5, "setPrivateDBToken:", v7);
    else
      objc_msgSend(v5, "setSharedDBToken:", v7);
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000A5090;
    v8[3] = &unk_1002BB450;
    v10 = *(id *)(a1 + 32);
    v9 = v6;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);

  }
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);

}

void sub_1000A44C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000A44E4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void **v22;
  uint64_t v23;
  void (*v24)(uint64_t, void *, uint64_t, void *);
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  int8x16_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  __int128 v36;
  _QWORD v37[4];
  id v38;
  _QWORD v39[4];
  id v40;
  id v41;
  uint64_t v42;

  v3 = a2;
  v4 = *(void **)(a1 + 72);
  if (*(_QWORD *)(a1 + 64) == 2)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "privateDatabase"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "privateDBToken"));
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "sharedDatabase"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sharedDBToken"));
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v11 = objc_msgSend(objc_alloc((Class)CKFetchDatabaseChangesOperation), "initWithPreviousServerChangeToken:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "cloudKitOperationConfigurationForSocialGamingSessionsContainer"));
  objc_msgSend(v11, "setConfiguration:", v12);

  objc_msgSend(v11, "setFetchAllChanges:", 1);
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_1000A479C;
  v39[3] = &unk_1002C0BB0;
  v13 = *(id *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 72);
  v40 = v13;
  v42 = v14;
  v15 = v9;
  v41 = v15;
  objc_msgSend(v11, "setRecordZoneWithIDChangedBlock:", v39);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_1000A4918;
  v37[3] = &unk_1002C0BD8;
  v16 = v10;
  v38 = v16;
  objc_msgSend(v11, "setRecordZoneWithIDWasDeletedBlock:", v37);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_1000A4980;
  v35[3] = &unk_1002C0C00;
  v36 = *(_OWORD *)(a1 + 48);
  objc_msgSend(v11, "setChangeTokenUpdatedBlock:", v35);
  v22 = _NSConcreteStackBlock;
  v23 = 3221225472;
  v24 = sub_1000A49C4;
  v25 = &unk_1002C0C28;
  v33 = *(_QWORD *)(a1 + 64);
  v32 = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
  v26 = v16;
  v27 = *(id *)(a1 + 40);
  v17 = *(id *)(a1 + 32);
  v34 = *(_QWORD *)(a1 + 72);
  v28 = v17;
  v29 = v15;
  v30 = v5;
  v31 = v3;
  v18 = v3;
  v19 = v5;
  v20 = v15;
  v21 = v16;
  objc_msgSend(v11, "setFetchDatabaseChangesCompletionBlock:", &v22);
  objc_msgSend(v19, "addOperation:", v11, v22, v23, v24, v25);

}

void sub_1000A479C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  int v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneName"));
  v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("com.apple.socialgaming.friendplayers"));

  if (v5)
  {
    v6 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000A4884;
    v9[3] = &unk_1002BBF58;
    v11 = *(_QWORD *)(a1 + 48);
    v10 = v3;
    objc_msgSend(v6, "perform:", v9);

  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneName"));
    v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("com.apple.legacygaming.invites"));

    if ((v8 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);
  }

}

void sub_1000A4884(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v6 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v6 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A490C;
  v8[3] = &unk_1002BC0D0;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v5, "updateCacheForFriendZoneID:handler:", v4, v8);

}

uint64_t sub_1000A490C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000A4918(uint64_t a1, void *a2)
{
  void *v3;
  unsigned __int8 v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "zoneName"));
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.legacygaming.invites"));

  if ((v4 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

}

void sub_1000A4980(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v4 = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

}

void sub_1000A49C4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  uint64_t v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  id v35;
  uint64_t v36;
  uint8_t buf[16];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];

  v6 = a2;
  v7 = a4;
  v8 = v7;
  if (v7)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(v7);
    v10 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000B5554(a1, v10, (uint64_t)v8);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
  {
    v11 = v8;
  }
  else
  {
    if (objc_msgSend(v8, "code") == (id)2)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "userInfo"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v14 = v13;
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v39;
        while (2)
        {
          for (i = 0; i != v16; i = (char *)i + 1)
          {
            if (*(_QWORD *)v39 != v17)
              objc_enumerationMutation(v14);
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i)));
            if (objc_msgSend(v11, "code") == (id)21)
            {

              goto LABEL_20;
            }

          }
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
          if (v16)
            continue;
          break;
        }
      }
      v11 = v8;
LABEL_20:

      if (!os_log_GKGeneral)
        v20 = (id)GKOSLoggers(v19);
      v21 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Did not find CloudKit change token expired error in partial error dictionary.", buf, 2u);
      }

    }
    else
    {
      v11 = v8;
    }
    if (objc_msgSend(v11, "code") == (id)21)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v23 = *(void **)(v22 + 40);
      *(_QWORD *)(v22 + 40) = 0;

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
    }
  }
  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_1000A4D50;
    v33[3] = &unk_1002C0B60;
    v24 = *(void **)(a1 + 40);
    v34 = *(id *)(a1 + 48);
    v25 = *(id *)(a1 + 32);
    v26 = *(_QWORD *)(a1 + 104);
    v35 = v25;
    v36 = v26;
    objc_msgSend(v24, "perform:", v33);

  }
  if (objc_msgSend(*(id *)(a1 + 56), "count"))
  {
    v27 = *(void **)(a1 + 40);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_1000A4FB8;
    v28[3] = &unk_1002BCDE0;
    v32 = *(_QWORD *)(a1 + 104);
    v29 = *(id *)(a1 + 64);
    v30 = *(id *)(a1 + 56);
    v31 = *(id *)(a1 + 40);
    objc_msgSend(v27, "perform:", v28);

  }
  objc_msgSend(*(id *)(a1 + 40), "setError:", v11);
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_1000A4D50(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void (**v19)(_QWORD);
  id obj;
  _QWORD v21[4];
  void (**v22)(_QWORD);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v19 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v3, "updateWithChangedTokens:removedTokenZoneIDs:", 0, v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = *(id *)(a1 + 40);
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v11 = *(void **)(a1 + 32);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneName"));
        v13 = *(void **)(a1 + 48);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ownerName"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "playerIdentifierForUserRecordName:", v14));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "sessionsInContainer:ownerName:", v12, v15));

        if (objc_msgSend(v16, "count"))
        {
          objc_msgSend(*(id *)(a1 + 48), "reportChangesForSessions:shareChangedSessions:removedSessions:zoneID:handler:", 0, 0, v16, v10, 0);
          objc_msgSend(v5, "addObjectsFromArray:", v16);
        }

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v7);
  }

  if (objc_msgSend(v5, "count"))
  {
    v17 = *(void **)(a1 + 32);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000A4FAC;
    v21[3] = &unk_1002BB540;
    v18 = v19;
    v22 = v19;
    objc_msgSend(v17, "updateWithChangedSessions:removedSessions:handler:", 0, v5, v21);

  }
  else
  {
    v18 = v19;
    v19[2](v19);
  }

}

uint64_t sub_1000A4FAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000A4FB8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A5060;
  v8[3] = &unk_1002BB6E8;
  v6 = *(void **)(a1 + 56);
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v6, "updateCacheForDatabase:zoneIDs:handler:", v4, v5, v8);

}

uint64_t sub_1000A5060(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000A5090(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1000A5738(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  GKCloudGameSession *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  GKCloudGameSession *v23;
  void *v24;
  GKCloudGameSession *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  void *v29;
  id v30;

  v3 = a2;
  if (v3)
  {
    v30 = v3;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordID"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "zoneID"));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "recordID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "zoneID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneName"));
    v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("com.apple.legacygaming.invites"));

    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 72), "generateAndStoreInviteBulletinForRecord:database:", v30, *(_QWORD *)(a1 + 32));
LABEL_11:

      v3 = v30;
      goto LABEL_12;
    }
    v11 = objc_opt_class(CKShare, v10);
    if ((objc_opt_isKindOfClass(v30, v11) & 1) != 0)
    {
      v12 = (GKCloudGameSession *)v30;
      v13 = *(void **)(a1 + 40);
      v14 = (void *)objc_claimAutoreleasedReturnValue(-[GKCloudGameSession recordID](v12, "recordID"));
      objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, v14);

      v15 = (void *)objc_claimAutoreleasedReturnValue(-[GKCloudGameSession recordID](v12, "recordID"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "recordName"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "substringFromIndex:", objc_msgSend(CFSTR("share"), "length")));

      v18 = objc_alloc((Class)CKRecordID);
      v19 = (void *)objc_claimAutoreleasedReturnValue(-[GKCloudGameSession recordID](v12, "recordID"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "zoneID"));
      v21 = objc_msgSend(v18, "initWithRecordName:zoneID:", v17, v20);

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "sessionWithRecordID:", v21));
      if (v22)
      {
        v23 = [GKCloudGameSession alloc];
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "record"));
        v25 = -[GKCloudGameSession initWithRecord:](v23, "initWithRecord:", v24);

        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", v5));
        objc_msgSend(v26, "addObject:", v25);

      }
    }
    else
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "recordType"));
      v28 = objc_msgSend(v27, "isEqualToString:", CFSTR("Session"));

      if (!v28)
        goto LABEL_11;
      v12 = -[GKCloudGameSession initWithRecord:]([GKCloudGameSession alloc], "initWithRecord:", v30);
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", v5));
      objc_msgSend(v29, "addObject:", v12);

    }
    goto LABEL_11;
  }
LABEL_12:

}

id *sub_1000A59BC(id *result, uint64_t a2, uint64_t a3)
{
  if (a3)
    return (id *)objc_msgSend(result[4], "setObject:forKeyedSubscript:", a3, a2);
  return result;
}

void sub_1000A59D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v9;
  void *v10;
  id v11;

  v11 = a2;
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a3, v11);
LABEL_5:
    v10 = v11;
    goto LABEL_6;
  }
  v9 = objc_msgSend(a6, "code");
  v10 = v11;
  if (v9 == (id)21)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v11);
    goto LABEL_5;
  }
LABEL_6:

}

void sub_1000A5A48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  if (v3)
  {
    v7 = v3;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionWithRecordID:", v3));
    if (v4)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneID"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v5));
      objc_msgSend(v6, "addObject:", v4);

    }
    v3 = v7;
  }

}

void sub_1000A5AD8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", CFSTR("updateCacheForDatabaseZoneIDs")));
  v17 = v3;
  objc_msgSend(v4, "setError:", v3);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v5 = *(id *)(a1 + 32);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v34 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneName"));
        v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("com.apple.legacygaming.invites"));

        if ((v12 & 1) == 0)
        {
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472;
          v24[2] = sub_1000A5D90;
          v24[3] = &unk_1002BEA88;
          v25 = *(id *)(a1 + 40);
          v26 = v10;
          v27 = *(id *)(a1 + 48);
          v13 = *(id *)(a1 + 56);
          v14 = *(_QWORD *)(a1 + 112);
          v28 = v13;
          v32 = v14;
          v29 = *(id *)(a1 + 64);
          v30 = *(id *)(a1 + 72);
          v31 = *(id *)(a1 + 80);
          objc_msgSend(v4, "perform:", v24);

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    }
    while (v7);
  }

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1000A60EC;
  v18[3] = &unk_1002BCFC0;
  v19 = *(id *)(a1 + 80);
  v20 = *(id *)(a1 + 88);
  v21 = *(id *)(a1 + 96);
  v15 = *(id *)(a1 + 104);
  v22 = v4;
  v23 = v15;
  v16 = v4;
  objc_msgSend(v16, "notifyOnMainQueueWithBlock:", v18);

}

void sub_1000A5D90(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v8 = (void *)objc_opt_class(*(_QWORD *)(a1 + 88), v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allChangedSessionsFromRecordChangedSessions:shareChangedSessions:", v9, v10));

  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1000A5F30;
  v21[3] = &unk_1002C0D40;
  v14 = *(void **)(a1 + 80);
  v29 = *(id *)(a1 + 88);
  v22 = v4;
  v23 = v5;
  v15 = *(_QWORD *)(a1 + 40);
  v24 = v6;
  v25 = v15;
  v26 = v14;
  v27 = v11;
  v28 = v3;
  v16 = v3;
  v17 = v11;
  v18 = v6;
  v19 = v5;
  v20 = v4;
  objc_msgSend(v29, "updatePlayersForSessions:sharesByRecordID:inDatabase:handler:", v17, v12, v13, v21);

}

void sub_1000A5F30(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;

  v2 = *(void **)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000A600C;
  v9[3] = &unk_1002BE8D0;
  v10 = *(id *)(a1 + 64);
  v11 = *(id *)(a1 + 72);
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v12 = v7;
  v13 = v8;
  v14 = *(id *)(a1 + 80);
  objc_msgSend(v2, "reportChangesForSessions:shareChangedSessions:removedSessions:zoneID:handler:", v3, v4, v5, v6, v9);

}

void sub_1000A600C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[5];
  id v5;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000A6094;
  v4[3] = &unk_1002BB758;
  v3 = *(_QWORD *)(a1 + 48);
  v4[4] = *(_QWORD *)(a1 + 56);
  v5 = *(id *)(a1 + 64);
  objc_msgSend(v1, "updateWithChangedSessions:removedSessions:handler:", v2, v3, v4);

}

uint64_t sub_1000A6094(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "zoneName"));
  +[GKCloudGameSession updateBadgeCountsForContainerName:useCacheDirectly:](GKCloudGameSession, "updateBadgeCountsForContainerName:useCacheDirectly:", v2, 1);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000A60EC(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "updateWithChangedTokens:removedTokenZoneIDs:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "error"));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
}

void sub_1000A6510(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *j;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *k;
  id v26;
  id v27;
  uint64_t v28;
  __objc2_class *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  unsigned __int8 v42;
  id v43;
  id v44;
  uint64_t v45;
  void *m;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  void *n;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  unsigned __int8 v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  void *ii;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  id v74;
  unsigned int v75;
  void *v76;
  void *v77;
  uint64_t v78;
  id obj;
  id v80;
  void *v81;
  void *v83;
  void *v84;
  void *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[128];
  _BYTE v115[128];
  _BYTE v116[128];
  _BYTE v117[128];
  _BYTE v118[128];
  _BYTE v119[128];
  _BYTE v120[128];

  v4 = a2;
  v74 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 1));
  v110 = 0u;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v110, v120, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v111;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v111 != v9)
          objc_enumerationMutation(v6);
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:pid:createIfNecessary:](GKClientProxy, "clientForBundleID:pid:createIfNecessary:", *(_QWORD *)(*((_QWORD *)&v110 + 1) + 8 * (_QWORD)i), 0, 0));
        if (v11)
          objc_msgSend(v5, "addObject:", v11);

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v110, v120, 16);
    }
    while (v8);
  }
  v73 = v6;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "sessionCache"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "userPlayer"));
  v84 = v12;
  v75 = objc_msgSend(v12, "isValid");
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v14 = *(id *)(a1 + 32);
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v106, v119, 16);
  v83 = v5;
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v107;
    do
    {
      for (j = 0; j != v16; j = (char *)j + 1)
      {
        if (*(_QWORD *)v107 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v106 + 1) + 8 * (_QWORD)j);
        if (objc_msgSend(v5, "count", v73))
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "createGKGameSession"));
          v102 = 0u;
          v103 = 0u;
          v104 = 0u;
          v105 = 0u;
          v21 = v5;
          v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v102, v118, 16);
          if (v22)
          {
            v23 = v22;
            v24 = *(_QWORD *)v103;
            do
            {
              for (k = 0; k != v23; k = (char *)k + 1)
              {
                if (*(_QWORD *)v103 != v24)
                  objc_enumerationMutation(v21);
                objc_msgSend(*(id *)(*((_QWORD *)&v102 + 1) + 8 * (_QWORD)k), "session:removedPlayer:", v20, v13);
              }
              v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v102, v118, 16);
            }
            while (v23);
          }

          v5 = v83;
        }
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v106, v119, 16);
    }
    while (v16);
  }

  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  obj = *(id *)(a1 + 40);
  v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v98, v117, 16);
  if (v26)
  {
    v27 = v26;
    v28 = *(_QWORD *)v99;
    v29 = &OBJC_METACLASS___GKTopGamesListCacheObject;
    v78 = *(_QWORD *)v99;
    do
    {
      v30 = 0;
      v80 = v27;
      do
      {
        if (*(_QWORD *)v99 != v28)
          objc_enumerationMutation(obj);
        v31 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * (_QWORD)v30);
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "record", v73));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "recordID"));

        if (objc_msgSend(v5, "count"))
        {
          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "createGKGameSession"));
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "sessionWithRecordID:", v33));
          v85 = v35;
          if (v35)
          {
            v36 = v35;
            v81 = v30;
            v37 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "data"));
            v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "data"));
            if (v37 == (id)v38)
            {

              goto LABEL_54;
            }
            v39 = (void *)v38;
            v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "data"));
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "data"));
            v42 = objc_msgSend(v40, "isEqualToData:", v41);

            v36 = v85;
            if ((v42 & 1) == 0)
            {
              v92 = 0u;
              v93 = 0u;
              v90 = 0u;
              v91 = 0u;
              v37 = v83;
              v43 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v90, v115, 16);
              if (v43)
              {
                v44 = v43;
                v76 = v33;
                v45 = *(_QWORD *)v91;
                do
                {
                  for (m = 0; m != v44; m = (char *)m + 1)
                  {
                    if (*(_QWORD *)v91 != v45)
                      objc_enumerationMutation(v37);
                    v47 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * (_QWORD)m);
                    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "lastModifiedPlayer"));
                    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "data"));
                    objc_msgSend(v47, "session:player:didSaveData:", v34, v48, v49);

                  }
                  v44 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v90, v115, 16);
                }
                while (v44);
                v33 = v76;
                v36 = v85;
              }
LABEL_54:

            }
            v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "playerStates"));
            v57 = objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "playerStates"));
            if (v56 == (void *)v57)
            {

              v28 = v78;
              v29 = &OBJC_METACLASS___GKTopGamesListCacheObject;
              v27 = v80;
              v30 = v81;
            }
            else
            {
              v58 = (void *)v57;
              v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "playerStates"));
              v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "playerStates"));
              v61 = objc_msgSend(v59, "isEqual:", v60);

              v28 = v78;
              v29 = &OBJC_METACLASS___GKTopGamesListCacheObject;
              v27 = v80;
              v30 = v81;
              if ((v61 & 1) == 0)
                objc_msgSend(*(id *)(a1 + 64), "reportPlayerStateChangesToClients:forUpdatedSession:oldSession:", v83, v31, v85);
            }
            v5 = v83;
            if (objc_msgSend(v83, "count"))
            {
              v51 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "sessionWithRecordID:", v33));
              objc_msgSend(*(id *)(a1 + 64), "determinePlayerChangesIn:newSession:notifyClients:", v51, v31, v83);
              goto LABEL_61;
            }
          }
          else if (v75)
          {
            v77 = v33;
            v50 = v30;
            v96 = 0u;
            v97 = 0u;
            v94 = 0u;
            v95 = 0u;
            v51 = v5;
            v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v94, v116, 16);
            if (v52)
            {
              v53 = v52;
              v54 = *(_QWORD *)v95;
              do
              {
                for (n = 0; n != v53; n = (char *)n + 1)
                {
                  if (*(_QWORD *)v95 != v54)
                    objc_enumerationMutation(v51);
                  objc_msgSend(*(id *)(*((_QWORD *)&v94 + 1) + 8 * (_QWORD)n), "session:addedPlayer:", v34, v13);
                }
                v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v94, v116, 16);
              }
              while (v53);
              v28 = v78;
              v29 = &OBJC_METACLASS___GKTopGamesListCacheObject;
            }
            v27 = v80;
            v30 = v50;
            v33 = v77;
LABEL_61:

          }
        }
        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&v29[58], "sharedManager"));
        objc_msgSend(v62, "cloudGameSessionUpdated:", v31);

        v30 = (char *)v30 + 1;
      }
      while (v30 != v27);
      v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v98, v117, 16);
    }
    while (v27);
  }

  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v63 = *(id *)(a1 + 48);
  v64 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v86, v114, 16);
  if (v64)
  {
    v65 = v64;
    v66 = *(_QWORD *)v87;
    do
    {
      for (ii = 0; ii != v65; ii = (char *)ii + 1)
      {
        if (*(_QWORD *)v87 != v66)
          objc_enumerationMutation(v63);
        v68 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * (_QWORD)ii);
        v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "record", v73));
        v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "recordID"));

        if (objc_msgSend(v5, "count"))
        {
          v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v84, "sessionWithRecordID:", v70));
          objc_msgSend(*(id *)(a1 + 64), "determinePlayerChangesIn:newSession:notifyClients:", v71, v68, v5);

        }
      }
      v65 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v86, v114, 16);
    }
    while (v65);
  }

  v72 = *(_QWORD *)(a1 + 56);
  if (v72)
    (*(void (**)(uint64_t, id))(v72 + 16))(v72, v74);

}

void sub_1000A7354(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  id v7;

  v5 = a3;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "alias"));
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v6);

  v5[2](v5);
}

void sub_1000A7760(uint64_t a1, void *a2, void *a3)
{
  void *i;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  id obj;
  uint64_t v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  _BYTE v32[128];

  v23 = a2;
  v22 = a3;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = *(id *)(a1 + 32);
  v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v26)
  {
    v25 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v26; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v25)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "record"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "share"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "recordID"));

        if (v9
          && ((v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v9))) != 0
           || (v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", v9))) != 0))
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "participants"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "valueForKeyPath:", CFSTR("userIdentity")));
          objc_msgSend(v6, "updatePlayersWithIdentities:", v12);

          v13 = *(void **)(a1 + 64);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "record"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "creatorUserRecordID"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "recordName"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "playerIdentifierForUserRecordName:", v16));

          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playersByIdentifier"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v17));
          objc_msgSend(v6, "setOwner:", v19);

          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "URL"));
          objc_msgSend(v6, "setUrl:", v20);

        }
        else
        {
          if (!*(_QWORD *)(a1 + 48))
            goto LABEL_13;
          objc_msgSend(v6, "setOwner:");
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "owner"));
          v31 = v10;
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v31, 1));
          objc_msgSend(v6, "setPlayers:", v17);
        }

LABEL_13:
      }
      v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v26);
  }

  v21 = *(_QWORD *)(a1 + 56);
  if (v21)
    (*(void (**)(uint64_t, id))(v21 + 16))(v21, v22);

}

int64_t sub_1000A80C0(id a1, GKCloudPlayer *a2, GKCloudPlayer *a3)
{
  GKCloudPlayer *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[GKCloudPlayer identifier](a2, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[GKCloudPlayer identifier](v4, "identifier"));

  v7 = objc_msgSend(v5, "compare:", v6);
  return (int64_t)v7;
}

void sub_1000A812C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)CNContactStore);
  v2 = (void *)qword_100317E90;
  qword_100317E90 = (uint64_t)v1;

}

void sub_1000A8450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

id *sub_1000A847C(id *result, uint64_t a2)
{
  if (a2)
    return (id *)_objc_msgSend(result[4], "updateFriendsWithRecord:", a2);
  return result;
}

void sub_1000A8490(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  if (v5)
  {
    v6 = v5;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
    v5 = v6;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

void sub_1000A84EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;

  v8 = a3;
  v13 = v8;
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v10 = v8;
    v11 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
LABEL_5:

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    goto LABEL_6;
  }
  if (objc_msgSend(a6, "code") == (id)21)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v11 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = 0;
    goto LABEL_5;
  }
LABEL_6:

}

void sub_1000A8570(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    objc_msgSend(*(id *)(a1 + 32), "setToken:forZoneID:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(_QWORD *)(a1 + 40));
    v3 = v5;
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
    v3 = v5;
  }

}

void sub_1000A8D4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  void *v14;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    v8 = objc_msgSend(v6, "code");
    if (v8 == (id)26)
    {
      v9 = *(void **)(a1 + 48);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1000A8E74;
      v11[3] = &unk_1002C0F00;
      v14 = v9;
      v12 = *(id *)(a1 + 32);
      v13 = *(id *)(a1 + 40);
      objc_msgSend(v9, "createZoneWithName:handler:", CFSTR("com.apple.socialgaming.friendplayers"), v11);

    }
    else
    {
      if (!os_log_GKGeneral)
        v10 = (id)GKOSLoggers(v8);
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_1000B56BC();
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setFriendRecordNeedsUpdate:", 0);
  }

}

void sub_1000A8E74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  uint64_t v10;

  if (!a2)
  {
    v9 = v2;
    v10 = v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "privateDatabase"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000A8F0C;
    v7[3] = &unk_1002C0ED8;
    v6 = *(_QWORD *)(a1 + 32);
    v8 = *(id *)(a1 + 40);
    objc_msgSend(v5, "saveRecord:completionHandler:", v6, v7);

  }
}

id sub_1000A8F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "setFriendRecordNeedsUpdate:", a3 == 0);
}

void sub_1000A904C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000A90E0;
  v6[3] = &unk_1002BB6E8;
  v4 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "updateSessionCacheWithHandler:", v6);

}

uint64_t sub_1000A90E0(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000A9110(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  if (*(_QWORD *)(a1 + 48))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "friendPlayers"));
    v21 = a1;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "friendEmailsByID"));
    v3 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v2, "count"));
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v4 = v2;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v24;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v24 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v8);
          v10 = objc_alloc_init((Class)GKCloudPlayer);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
          objc_msgSend(v10, "setIdentifier:", v11);

          v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
          if (v12
            && (v13 = (void *)v12,
                v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name")),
                v15 = objc_msgSend(v14, "length"),
                v14,
                v13,
                v15))
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
            objc_msgSend(v10, "setName:", v16);
          }
          else
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v16));
            objc_msgSend(v10, "setName:", v17);

          }
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));

          if (v18)
            objc_msgSend(v3, "addObject:", v10);

          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v6);
    }

    v19 = *(_QWORD *)(v21 + 48);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v21 + 40), "error"));
    (*(void (**)(uint64_t, id, void *))(v19 + 16))(v19, v3, v20);

  }
}

void sub_1000A93BC(id a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = objc_alloc_init((Class)NSMutableCharacterSet);
  v2 = (void *)qword_100317EA0;
  qword_100317EA0 = (uint64_t)v1;

  v3 = (void *)qword_100317EA0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet URLPathAllowedCharacterSet](NSCharacterSet, "URLPathAllowedCharacterSet"));
  objc_msgSend(v3, "formUnionWithCharacterSet:", v4);

  _objc_msgSend((id)qword_100317EA0, "removeCharactersInString:", CFSTR(" * "));
}

void sub_1000A9F88(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "privateDatabase"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "record"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000AA078;
  v9[3] = &unk_1002C0F98;
  v6 = a1[4];
  v7 = a1[7];
  v10 = v6;
  v14 = v7;
  v11 = a1[5];
  v12 = a1[6];
  v13 = v3;
  v8 = v3;
  objc_msgSend(v4, "saveRecord:completionHandler:", v5, v9);

}

void sub_1000AA078(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (objc_msgSend(v6, "code") == (id)26)
    {
      v8 = *(void **)(a1 + 64);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1000AA178;
      v12[3] = &unk_1002C0F00;
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(id *)(a1 + 48);
      v11 = *(_QWORD *)(a1 + 64);
      v13 = v10;
      v15 = v11;
      v14 = *(id *)(a1 + 32);
      objc_msgSend(v8, "createZoneWithName:handler:", v9, v12);

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 48), "setError:", v7);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setRecord:", v5);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000AA178(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  }
  else
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000AA220;
    v5[3] = &unk_1002C0B60;
    v4 = *(void **)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v6 = v4;
    v7 = *(id *)(a1 + 32);
    objc_msgSend(v2, "perform:", v5);

  }
}

void sub_1000AA220(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "privateDatabase"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "record"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000AA2F4;
  v7[3] = &unk_1002C0F70;
  v8 = a1[4];
  v9 = a1[5];
  v10 = v3;
  v6 = v3;
  objc_msgSend(v4, "saveRecord:completionHandler:", v5, v7);

}

void sub_1000AA2F4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = v5;
  if (!v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "setRecord:", a2);
    v5 = 0;
  }
  objc_msgSend(*(id *)(a1 + 40), "setError:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000AA358(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = v2;
  if (v2 && (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "record")), v4, v4))
  {
    v5 = *(void **)(a1 + 40);
    v9 = v3;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
    objc_msgSend(v5, "updateWithChangedSessions:removedSessions:handler:", v6, 0, 0);

  }
  else
  {

    v3 = 0;
  }
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, void *, void *))(v7 + 16))(v7, v3, v8);

  }
}

void sub_1000AA584(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000AA628;
  v9[3] = &unk_1002C0FE8;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 48);
  v6 = *(id *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v11 = v3;
  v12 = v7;
  v10 = v6;
  v8 = v3;
  objc_msgSend(v5, "sessionForIdentifier:handler:", v4, v9);

}

void sub_1000AA628(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  _QWORD *v15;
  _QWORD v16[6];
  _QWORD v17[7];
  id v18;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "record"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "recordID"));

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "sessionCache"));
    v18 = v5;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
    objc_msgSend(v8, "updateWithChangedSessions:removedSessions:handler:", 0, v9, 0);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "containerName"));
    +[GKCloudGameSession updateBadgeCountsForContainerName:useCacheDirectly:](GKCloudGameSession, "updateBadgeCountsForContainerName:useCacheDirectly:", v10, 1);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ownerName"));
    v13 = objc_msgSend(v12, "isEqualToString:", CKCurrentUserDefaultName);

    v14 = *(void **)(a1 + 32);
    if (v13)
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1000AA82C;
      v17[3] = &unk_1002C0B60;
      v17[6] = *(_QWORD *)(a1 + 48);
      v17[4] = v7;
      v15 = v17;
    }
    else
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1000AA938;
      v16[3] = &unk_1002BB590;
      v16[4] = v5;
      v15 = v16;
    }
    v15[5] = *(id *)(a1 + 32);
    objc_msgSend(v14, "perform:", v15);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000AA82C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "privateDatabase"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000AA8D8;
  v7[3] = &unk_1002C0FC0;
  v5 = *(_QWORD *)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "deleteRecordWithID:completionHandler:", v5, v7);

}

void sub_1000AA8D8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;

  v5 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v4)
    objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000AA938(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000AA9CC;
  v6[3] = &unk_1002BB6E8;
  v4 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "deleteShareWithHandler:", v6);

}

void sub_1000AA9CC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v3)
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000AAA2C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_1000AACF0(id *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void **v7;
  uint64_t v8;
  void (*v9)(uint64_t, void *, void *);
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = objc_alloc_init((Class)CKFetchWhitelistedBundleIDsOperation);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[8], "cloudKitOperationConfigurationForContainer:", a1[4]));
  objc_msgSend(v4, "setConfiguration:", v5);

  v7 = _NSConcreteStackBlock;
  v8 = 3221225472;
  v9 = sub_1000AADF0;
  v10 = &unk_1002C1010;
  v11 = a1[5];
  v12 = a1[6];
  v13 = a1[7];
  v14 = v3;
  v6 = v3;
  objc_msgSend(v4, "setFetchWhitelistedBundleIDsCompletionBlock:", &v7);
  objc_msgSend(a1[4], "addOperation:", v4, v7, v8, v9, v10);

}

void sub_1000AADF0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "count"))
  {
    objc_msgSend(*(id *)(a1 + 40), "updateBundleIDs:forContainerName:", v5, *(_QWORD *)(a1 + 32));
  }
  else
  {
    v7 = *(id *)(a1 + 32);
    if (objc_msgSend(*(id *)(a1 + 32), "rangeOfString:options:", CFSTR("iCloud."), 9) != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "substringFromIndex:", objc_msgSend(CFSTR("iCloud."), "length")));

      v7 = (id)v8;
    }
    v10 = v7;
    v9 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));

    v5 = (id)v9;
  }
  objc_msgSend(*(id *)(a1 + 48), "setResult:", v5);
  objc_msgSend(*(id *)(a1 + 48), "setError:", v6);

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1000AAF30(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);

  }
}

void sub_1000AB1C4(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  double v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  void (**v20)(_QWORD);

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession sessionCache](GKCloudGameSession, "sessionCache"));
  objc_msgSend(v4, "lastSaveTimeStamp");
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v7, "timeIntervalSince1970");
  v9 = v8;

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "storeBag"));
  v12 = (double)(uint64_t)objc_msgSend(v11, "gkSessionRateLimiting");

  if (v9 - v6 >= v12)
  {
    objc_msgSend(v4, "setLastSaveTimeStamp:", v9);
    objc_msgSend(*(id *)(a1 + 40), "setData:", *(_QWORD *)(a1 + 48));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1000AB340;
    v17[3] = &unk_1002BB8F0;
    v14 = *(void **)(a1 + 40);
    v15 = *(id *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    v18 = v15;
    v19 = v16;
    v20 = v3;
    objc_msgSend(v14, "saveWithHandler:", v17);

  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkUserErrorForGameSessionErrorCode:userInfo:](NSError, "_gkUserErrorForGameSessionErrorCode:userInfo:", 11, 0));
    objc_msgSend(*(id *)(a1 + 32), "setError:", v13);

    v3[2](v3);
  }

}

uint64_t sub_1000AB340(int8x16_t *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  int8x16_t v7;
  _QWORD v8[4];
  int8x16_t v9;

  v3 = (void *)a1[2].i64[0];
  v4 = a2;
  objc_msgSend(v3, "setError:", v4);
  v5 = objc_msgSend(v4, "code");

  if (v5 == (id)14)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000AB400;
    v8[3] = &unk_1002BB590;
    v7 = a1[2];
    v9 = vextq_s8(v7, v7, 8uLL);
    objc_msgSend((id)v7.i64[0], "perform:", v8);

  }
  return (*(uint64_t (**)(void))(a1[3].i64[0] + 16))();
}

void sub_1000AB400(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession databaseForSession:](GKCloudGameSession, "databaseForSession:", *(_QWORD *)(a1 + 32)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "record"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000AB4E4;
  v9[3] = &unk_1002C0F70;
  v7 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v7;
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "fetchRecordWithID:completionHandler:", v6, v9);

}

uint64_t sub_1000AB4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;

  if (a2 && !a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setRecord:", a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "data"));
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v4, CFSTR("data"));

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1000AB544(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 48))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    if (!v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession sessionCache](GKCloudGameSession, "sessionCache"));
      v7 = *(_QWORD *)(a1 + 40);
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
      objc_msgSend(v3, "updateWithChangedSessions:removedSessions:handler:", v4, 0, 0);

    }
    v5 = *(_QWORD *)(a1 + 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("data")));
    (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v6, v2);

  }
}

void sub_1000AB7B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = a4;
  v5 = v11;
  if (objc_msgSend(v11, "code") == (id)2)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "userInfo"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "record"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "recordID"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v9));

  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v5);

}

uint64_t sub_1000AB9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a4);
  return result;
}

void sub_1000ABB38(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession privateDatabase](GKCloudGameSession, "privateDatabase"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000ABBE4;
  v6[3] = &unk_1002BCA30;
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "fetchAllRecordZonesWithCompletionHandler:", v6);

}

void sub_1000ABBE4(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;

  v6 = a2;
  if (a3)
    objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKeyPath:", CFSTR("zoneID.zoneName")));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, CFSTR("private"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000ABC64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession sharedDatabase](GKCloudGameSession, "sharedDatabase"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000ABD10;
  v6[3] = &unk_1002BCA30;
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "fetchAllRecordZonesWithCompletionHandler:", v6);

}

void sub_1000ABD10(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;

  v6 = a2;
  if (a3)
    objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKeyPath:", CFSTR("zoneID.zoneName")));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, CFSTR("shared"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000ABD90(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  if (*(_QWORD *)(a1 + 40))
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("private")));
    objc_msgSend(v7, "addObjectsFromArray:", v2);

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("shared")));
    objc_msgSend(v7, "addObjectsFromArray:", v3);

    objc_msgSend(v7, "removeObject:", CKRecordZoneDefaultName);
    objc_msgSend(v7, "removeObject:", CFSTR("com.apple.socialgaming.friendplayers"));
    objc_msgSend(v7, "removeObject:", CFSTR("com.apple.legacygaming.invites"));
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allObjects"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v5, v6);

  }
}

void sub_1000AC030(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)CKDatabaseSubscription), "initWithSubscriptionID:", CFSTR("privateDBSubscription"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "privateDatabase"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000AC0FC;
  v7[3] = &unk_1002C1088;
  v8 = *(id *)(a1 + 32);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "saveSubscription:completionHandler:", v4, v7);

}

uint64_t sub_1000AC0FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000AC12C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)CKDatabaseSubscription), "initWithSubscriptionID:", CFSTR("sharedDBSubscription"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sharedDatabase"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000AC1F8;
  v7[3] = &unk_1002C1088;
  v8 = *(id *)(a1 + 32);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "saveSubscription:completionHandler:", v4, v7);

}

uint64_t sub_1000AC1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    objc_msgSend(*(id *)(a1 + 32), "setError:");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000AC228(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  if (v2)
  {

  }
  else if ((objc_msgSend(*(id *)(a1 + 40), "userHasSubscription") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "setUserHasSubscription:", 1);
  }
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

  }
}

void sub_1000AC394(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[CKContainer containerWithIdentifier:](CKContainer, "containerWithIdentifier:", CFSTR("com.apple.socialgaming.sessions")));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "cloudKitOperationConfigurationForContainer:", v4));
  v3 = (void *)qword_100317EB0;
  qword_100317EB0 = v2;

}

void sub_1000AC534(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  id v25;
  id v26;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "record"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "share"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordID"));
  v7 = v6;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    v9 = objc_alloc((Class)CKRecordID);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "record"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "recordID"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "recordName"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), CFSTR("share"), v19));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "record"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "recordID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "zoneID"));
    v8 = objc_msgSend(v9, "initWithRecordName:zoneID:", v10, v13);

  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000AC70C;
  v22[3] = &unk_1002C10D0;
  v14 = *(void **)(a1 + 32);
  v15 = *(id *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 32);
  v23 = v15;
  v24 = v16;
  v25 = v8;
  v26 = v3;
  v17 = v3;
  v18 = v8;
  objc_msgSend(v14, "fetchShareRecordWithRecordID:handler:", v18, v22);

}

void sub_1000AC70C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v5
    && (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "record")),
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "share")),
        v7,
        v6,
        v7))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URL"));
    objc_msgSend(*(id *)(a1 + 32), "setResult:", v8);

  }
  else if (objc_msgSend(*(id *)(a1 + 40), "isOwnedByUser"))
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000AC824;
    v10[3] = &unk_1002BB4A0;
    v9 = *(void **)(a1 + 32);
    v10[4] = *(_QWORD *)(a1 + 40);
    v11 = *(id *)(a1 + 48);
    v12 = *(id *)(a1 + 32);
    objc_msgSend(v9, "perform:", v10);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000AC824(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000AC8C0;
  v7[3] = &unk_1002C06F8;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "setupShareWithRecordID:handler:", v5, v7);

}

uint64_t sub_1000AC8C0(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  objc_msgSend(v5, "setError:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URL"));

  objc_msgSend(*(id *)(a1 + 32), "setResult:", v7);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000AC92C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "url"));
  if (!v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "result"));

    if (!v3)
      goto LABEL_5;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "result"));
    objc_msgSend(*(id *)(a1 + 32), "setUrl:", v2);
  }

LABEL_5:
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "result"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
    (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v6, v5);

  }
}

uint64_t sub_1000ACBA4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000ACD64(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v6 = a2;
  v7 = a4;
  if (*(_QWORD *)(a1 + 40))
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v9)
    {
      v16 = v6;
      v10 = *(_QWORD *)v18;
      while (2)
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v18 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "recordID"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordID"));
          v15 = objc_msgSend(v13, "isEqual:", v14);

          if (v15)
          {
            v9 = v12;
            goto LABEL_12;
          }
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v9)
          continue;
        break;
      }
LABEL_12:
      v6 = v16;
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1000AD01C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  id v6;
  id v7;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = a3;
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", v5));
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v7, v6);

  }
}

void sub_1000AD2D8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;

  v3 = a2;
  v4 = objc_alloc((Class)CKFetchShareMetadataOperation);
  v15 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
  v6 = objc_msgSend(v4, "initWithShareURLs:", v5);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cloudKitOperationConfigurationForSocialGamingSessionsContainer"));
  objc_msgSend(v6, "setConfiguration:", v7);

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000AD470;
  v13[3] = &unk_1002C1170;
  v14 = *(id *)(a1 + 40);
  objc_msgSend(v6, "setPerShareMetadataBlock:", v13);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000AD4C8;
  v10[3] = &unk_1002BB6E8;
  v11 = *(id *)(a1 + 40);
  v12 = v3;
  v8 = v3;
  objc_msgSend(v6, "setFetchShareMetadataCompletionBlock:", v10);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[CKContainer containerWithIdentifier:](CKContainer, "containerWithIdentifier:", CFSTR("com.apple.socialgaming.sessions")));
  objc_msgSend(v9, "addOperation:", v6);

}

void sub_1000AD470(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v6;
  id v7;

  v6 = *(void **)(a1 + 32);
  v7 = a4;
  objc_msgSend(v6, "setResult:", a3);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);

}

uint64_t sub_1000AD4C8(uint64_t a1, uint64_t a2)
{
  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000AD4FC(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);

  }
}

void sub_1000AD6E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000AD77C;
  v6[3] = &unk_1002BE538;
  v4 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "primaryPlayerWithHandler:", v6);

}

uint64_t sub_1000AD77C(uint64_t a1, uint64_t a2)
{
  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, CFSTR("player"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000AD7B8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000AD854;
  v7[3] = &unk_1002BE560;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 48);
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "sessionForShareMetadata:handler:", v4, v7);

}

uint64_t sub_1000AD854(uint64_t a1, uint64_t a2)
{
  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a2, CFSTR("session"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000AD890(id *a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void (**v5)(void);
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", CFSTR("session")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", CFSTR("player")));
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = (void (**)(void))a1[6];
    if (v5)
      v5[2]();
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "emailsByCKID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKConnectionManager sharedManager](GKConnectionManager, "sharedManager"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "primaryEmailAddress"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, v9);

    objc_msgSend(v2, "setEmailsByCKID:", v6);
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "localPlayerAlias"));
    v11 = (void *)v10;
    if (v10)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "nicknamesByIdentifier"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, v13);

      objc_msgSend(v2, "setNicknamesByIdentifier:", v12);
    }
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000ADA68;
    v14[3] = &unk_1002BE678;
    v18 = a1[7];
    v15 = v2;
    v16 = a1[5];
    v17 = a1[6];
    objc_msgSend(v15, "saveWithHandler:", v14);

  }
}

void sub_1000ADA68(id *a1, void *a2)
{
  void (**v4)(void);
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  if (objc_msgSend(a2, "code") == (id)14)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000ADBC0;
    v7[3] = &unk_1002BE650;
    v11 = a1[7];
    v8 = a1[4];
    v9 = a1[5];
    v10 = a1[6];
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

  }
  else
  {
    v4 = (void (**)(void))a1[6];
    if (v4)
    {
      if (!a2)
      {
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "sessionCache"));
        v12 = a1[4];
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
        objc_msgSend(v5, "updateWithChangedSessions:removedSessions:handler:", v6, 0, 0);

        v4 = (void (**)(void))a1[6];
      }
      v4[2]();
    }
  }
}

void sub_1000ADBC0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;
  uint64_t v9;

  v2 = *(void **)(a1 + 56);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "record"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "zoneID"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000ADC98;
  v6[3] = &unk_1002C1198;
  v9 = *(_QWORD *)(a1 + 56);
  v7 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  objc_msgSend(v2, "updateCacheForZoneID:handler:", v5, v6);

}

id sub_1000ADC98(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 48), "saveInformationForPrimaryUserForSessionWithShareMetadata:handler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1000ADDD8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 40), "handleCloudKitShareMetadata:completionHandler:", v5, *(_QWORD *)(a1 + 32));
  }
  else if (*(_QWORD *)(a1 + 32))
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000B571C();
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_1000AE1C0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(unsigned __int8 *)(a1 + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000AE26C;
  v8[3] = &unk_1002BB6E8;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 48);
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v6, "handleLegacyShareMetadata:needsAccept:completionHandler:", v5, v4, v8);

}

uint64_t sub_1000AE26C(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000AE29C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(unsigned __int8 *)(a1 + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000AE348;
  v8[3] = &unk_1002BB6E8;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 48);
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v6, "handleSessionShareMetadata:needsAccept:completionHandler:", v5, v4, v8);

}

uint64_t sub_1000AE348(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000AE378(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "removeObject:", *(_QWORD *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
}

void sub_1000AE540(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000AE5F4;
  v8[3] = &unk_1002C1210;
  v4 = *(id *)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v9 = v4;
  v12 = v5;
  v10 = v6;
  v11 = v3;
  v7 = v3;
  +[GKCloudGameSession showAcceptAlertWithHandler:](GKCloudGameSession, "showAcceptAlertWithHandler:", v8);

}

uint64_t sub_1000AE5F4(uint64_t a1, int a2)
{
  void *v3;
  _QWORD v5[4];
  id v6;
  id v7;
  uint64_t v8;

  if (a2)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000AE690;
    v5[3] = &unk_1002C0B60;
    v8 = *(_QWORD *)(a1 + 56);
    v3 = *(void **)(a1 + 32);
    v6 = *(id *)(a1 + 40);
    v7 = *(id *)(a1 + 32);
    objc_msgSend(v3, "perform:", v5);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1000AE690(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  v3 = a2;
  v4 = *(void **)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  v7 = objc_msgSend(v6, "maxPlayersP2P");
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000AE778;
  v11[3] = &unk_1002BE678;
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v12 = v8;
  v15 = v9;
  v13 = *(id *)(a1 + 32);
  v14 = v3;
  v10 = v3;
  objc_msgSend(v4, "acceptShareMetadata:retryCount:completionHandler:", v5, v7, v11);

}

uint64_t sub_1000AE778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  if (!a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("launch"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000AE828;
    v9[3] = &unk_1002BBF58;
    v11 = *(_QWORD *)(a1 + 56);
    v7 = *(void **)(a1 + 32);
    v10 = *(id *)(a1 + 40);
    objc_msgSend(v7, "perform:", v9);

  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v4, v5, v6);
}

void sub_1000AE828(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v6 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v6 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000AE8B0;
  v8[3] = &unk_1002BB540;
  v9 = v3;
  v7 = v3;
  objc_msgSend(v5, "saveInformationForPrimaryUserForSessionWithShareMetadata:handler:", v4, v8);

}

uint64_t sub_1000AE8B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000AE8BC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("launch")));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rootRecordID"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "zoneID"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "zoneName"));

    v6 = *(void **)(a1 + 56);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000AE9A8;
    v9[3] = &unk_1002C1230;
    v9[4] = v6;
    objc_msgSend(v6, "bundleIDsForContainerName:handler:", v5, v9);

  }
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
}

void sub_1000AE9A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v13;
LABEL_4:
      v9 = 0;
      while (1)
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v9);
        if ((GKApplicationWithIdentifierIsInstalled(v10) & 1) != 0)
          break;
        if (v7 == (id)++v9)
        {
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
          if (v7)
            goto LABEL_4;
          goto LABEL_10;
        }
      }
      v11 = v10;

      if (v11)
        goto LABEL_13;
    }
    else
    {
LABEL_10:

    }
    v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject", (_QWORD)v12));
    if (v11)
    {
LABEL_13:
      objc_msgSend(*(id *)(a1 + 32), "launchOrOpenAppStoreForBundleID:", v11, (_QWORD)v12);

    }
  }

}

void sub_1000AEC2C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint8_t buf[16];

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Accepting CKShareMetadata for Messages multiplayer invite.", buf, 2u);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootRecordID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKInviteURLManager sharedManager](GKInviteURLManager, "sharedManager"));
  objc_msgSend(v8, "setMostRecentInviteShareRootRecordID:", v7);

  v9 = *(void **)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  v12 = objc_msgSend(v11, "maxPlayersP2P");
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000AED8C;
  v14[3] = &unk_1002BB6E8;
  v15 = *(id *)(a1 + 40);
  v16 = v4;
  v13 = v4;
  objc_msgSend(v9, "acceptShareMetadata:retryCount:completionHandler:", v10, v12, v14);

}

void sub_1000AED8C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_1000B577C();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000AEE20(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint8_t buf[16];
  void *v24;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Fetching share record for multiplayer invite to generate initiate bulletin.", buf, 2u);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootRecordID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "zoneID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession databaseForZoneID:](GKCloudGameSession, "databaseForZoneID:", v8));

  v10 = *(void **)(a1 + 48);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootRecordID"));
  v24 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v24, 1));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000AEFFC;
  v17[3] = &unk_1002C0DB8;
  v18 = *(id *)(a1 + 40);
  v13 = *(id *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 48);
  v19 = v13;
  v20 = v9;
  v21 = v4;
  v22 = v14;
  v15 = v4;
  v16 = v9;
  objc_msgSend(v10, "fetchShareRecordsWithRecordIDs:inDatabase:handler:", v12, v16, v17);

}

void sub_1000AEFFC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_1000B57DC();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v7);
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rootRecordID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKInviteURLManager sharedManager](GKInviteURLManager, "sharedManager"));
    objc_msgSend(v10, "setMostRecentInviteShareRootRecordID:", v9);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rootRecordID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v11));

    objc_msgSend(*(id *)(a1 + 64), "generateAndStoreInviteBulletinForRecord:database:", v12, *(_QWORD *)(a1 + 48));
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000AF11C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_1000AF3D0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _BOOL8 v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  dispatch_time_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD block[4];
  id v22;
  id v23;
  uint64_t v24;
  int v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  int v33;

  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v15 = *(void **)(a1 + 48);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootRecordID"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "zoneID"));
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1000AF688;
    v26[3] = &unk_1002BC0D0;
    v27 = *(id *)(a1 + 40);
    objc_msgSend(v15, "updateCacheForZoneID:handler:", v17, v26);

    v14 = v27;
LABEL_13:

    goto LABEL_16;
  }
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    sub_1000B583C();
  v6 = +[GKCloudGameSession shouldRetryForError:andRetryCount:](GKCloudGameSession, "shouldRetryForError:andRetryCount:", v4, *(unsigned int *)(a1 + 56));
  if (v6)
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v6);
    v8 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(a1 + 32);
      v20 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 138412802;
      v29 = v19;
      v30 = 2112;
      v31 = v4;
      v32 = 1024;
      v33 = v20;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Error accepting CloudKit share metadata %@ due to: %@. Will retry at most %d times.", buf, 0x1Cu);
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userInfo"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "valueForKey:", CKErrorRetryAfterKey));
    objc_msgSend(v10, "doubleValue");
    v12 = v11;

    v13 = dispatch_time(0, 1000000000 * (uint64_t)v12);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000AF718;
    block[3] = &unk_1002C1258;
    v24 = *(_QWORD *)(a1 + 48);
    v22 = *(id *)(a1 + 32);
    v25 = *(_DWORD *)(a1 + 56);
    v23 = *(id *)(a1 + 40);
    dispatch_after(v13, (dispatch_queue_t)&_dispatch_main_q, block);

    v14 = v22;
    goto LABEL_13;
  }
  v18 = *(_QWORD *)(a1 + 40);
  if (v18)
    (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v4);
LABEL_16:

}

void sub_1000AF688(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000B58A0();
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v4);

}

id sub_1000AF718(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 48), "acceptShareMetadata:retryCount:completionHandler:", *(_QWORD *)(a1 + 32), (*(_DWORD *)(a1 + 56) - 1), *(_QWORD *)(a1 + 40));
}

void sub_1000AF8CC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000AF9B8;
  v7[3] = &unk_1002BCA30;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getGameMetadataForBundleIDs:handler:", v5, v7);

}

uint64_t sub_1000AF9B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastObject"));
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v6);

  objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000AFA20(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  objc_msgSend(v1, "storeItemURLForGamePlatform:withContext:withHandler:", 1, GKContextInvite, &stru_1002C12C0);

}

void sub_1000AFA68(id a1, NSURL *a2, NSError *a3)
{
  NSURL *v3;
  id v4;

  if (a2)
  {
    v3 = a2;
    v4 = (id)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](GKApplicationWorkspace, "defaultWorkspace"));
    objc_msgSend(v4, "openURL:", v3);

  }
}

void sub_1000AFC04(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v12;
  id v13;
  id v14;
  uint64_t v15;

  v3 = a2;
  v4 = objc_alloc((Class)CKModifyRecordsOperation);
  v15 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
  v6 = objc_msgSend(v4, "initWithRecordsToSave:recordIDsToDelete:", 0, v5);

  v9 = _NSConcreteStackBlock;
  v10 = 3221225472;
  v11 = sub_1000AFD38;
  v12 = &unk_1002C1038;
  v13 = *(id *)(a1 + 40);
  v14 = v3;
  v7 = v3;
  objc_msgSend(v6, "setModifyRecordsCompletionBlock:", &v9);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession databaseForSession:](GKCloudGameSession, "databaseForSession:", *(_QWORD *)(a1 + 48), v9, v10, v11, v12));
  objc_msgSend(v8, "addOperation:", v6);

}

uint64_t sub_1000AFD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a4);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000AFD68(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_1000AFF94(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "record"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "recordID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession sessionIdentifierForRecordID:](GKCloudGameSession, "sessionIdentifierForRecordID:", v5));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B0078;
  v8[3] = &unk_1002BB6E8;
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v7 = v3;
  +[GKCloudGameSession removeSessionWithIdentifier:handler:](GKCloudGameSession, "removeSessionWithIdentifier:handler:", v6, v8);

}

uint64_t sub_1000B0078(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000B00A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "record"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "share"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "recordID"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000B01B0;
  v11[3] = &unk_1002C12E8;
  v12 = *(id *)(a1 + 40);
  v13 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 32);
  v14 = v8;
  v15 = v9;
  v16 = v3;
  v10 = v3;
  objc_msgSend(v4, "fetchShareRecordWithRecordID:handler:", v7, v11);

}

void sub_1000B01B0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  void *v24;
  char v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  _QWORD v32[5];
  id v33;
  id v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  if (v5)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v6 = *(id *)(a1 + 40);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
    if (v7)
    {
      v8 = v7;
      v25 = 0;
      v9 = *(_QWORD *)v41;
      v28 = a1;
      v29 = v5;
      v26 = *(_QWORD *)v41;
      v27 = v6;
      do
      {
        v10 = 0;
        v30 = v8;
        do
        {
          if (*(_QWORD *)v41 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)v10);
          if ((objc_msgSend(v11, "isEqualToString:", *(_QWORD *)(a1 + 48)) & 1) == 0)
          {
            v31 = v10;
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "participants"));
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v12));

            v38 = 0u;
            v39 = 0u;
            v36 = 0u;
            v37 = 0u;
            v14 = v13;
            v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
            if (v15)
            {
              v16 = v15;
              v17 = *(_QWORD *)v37;
              while (2)
              {
                for (i = 0; i != v16; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v37 != v17)
                    objc_enumerationMutation(v14);
                  v19 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
                  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "userIdentity"));
                  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "userRecordID"));
                  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "recordName"));
                  v23 = objc_msgSend(v22, "isEqualToString:", v11);

                  if (v23)
                  {
                    v5 = v29;
                    objc_msgSend(v29, "removeParticipant:", v19);
                    v25 = 1;
                    goto LABEL_18;
                  }
                }
                v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
                if (v16)
                  continue;
                break;
              }
              v5 = v29;
LABEL_18:
              v6 = v27;
              a1 = v28;
              v9 = v26;
              v8 = v30;
            }

            v10 = v31;
          }
          v10 = (char *)v10 + 1;
        }
        while (v10 != v8);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
      }
      while (v8);

      if ((v25 & 1) != 0)
      {
        v24 = *(void **)(a1 + 32);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_1000B04B0;
        v32[3] = &unk_1002BC3A8;
        v32[4] = *(_QWORD *)(a1 + 56);
        v33 = v5;
        v34 = *(id *)(a1 + 40);
        v35 = *(id *)(a1 + 32);
        objc_msgSend(v24, "perform:", v32);

      }
    }
    else
    {

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_1000B04B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000B0568;
  v7[3] = &unk_1002C10D0;
  v7[4] = v4;
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = v3;
  v6 = v3;
  objc_msgSend(v4, "saveShare:isNewShare:handler:", v5, 0, v7);

}

void sub_1000B0568(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));

    if (!v6)
      objc_msgSend(*(id *)(a1 + 48), "setError:", v5);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playersByIdentifier"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v7));

    objc_msgSend(v8, "removeObjectsForKeys:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "setPlayersByIdentifier:", v8);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000B0634(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_1000B1050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000B1080(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  void (**v19)(_QWORD);
  id v20;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 80)));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v5, 0);
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 80)));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", v5, &__kCFBooleanFalse, 0));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, *(_QWORD *)(a1 + 40));
  }

  v7 = *(_QWORD *)(a1 + 32);
  v8 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v20 = 0;
  v9 = objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v7, 200, 0, &v20));
  objc_storeStrong(v8, v20);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
  {
    objc_msgSend(*(id *)(a1 + 56), "setError:");
    v3[2](v3);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "setPlayerStates:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession sessionCache](GKCloudGameSession, "sessionCache"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "userPlayer"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));

    if (v14 && objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", v14))
      objc_msgSend(*(id *)(a1 + 48), "tempEmailFixForPlayerID:", *(_QWORD *)(a1 + 40));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000B12A8;
    v16[3] = &unk_1002BB8F0;
    v15 = *(void **)(a1 + 56);
    v17 = *(id *)(a1 + 48);
    v18 = v15;
    v19 = v3;
    objc_msgSend(v17, "saveWithHandler:", v16);

  }
}

void sub_1000B12A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a2;
  if (!v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession sessionCache](GKCloudGameSession, "sessionCache"));
    v6 = *(_QWORD *)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
    objc_msgSend(v4, "updateWithChangedSessions:removedSessions:handler:", v5, 0, 0);

  }
  objc_msgSend(*(id *)(a1 + 40), "setError:", v3);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000B137C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_1000B23A8(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  void (**v26)(_QWORD);
  id v27;
  uint8_t buf[4];
  void *v29;
  _QWORD v30[5];

  v3 = a2;
  v30[0] = objc_opt_class(NSDictionary, v4);
  v30[1] = objc_opt_class(NSNumber, v5);
  v30[2] = objc_opt_class(NSString, v6);
  v30[3] = objc_opt_class(NSData, v7);
  v30[4] = objc_opt_class(NSArray, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v30, 5));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v9));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("connectionData")));
  v27 = 0;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v10, v11, &v27));
  v13 = v27;

  if (v13)
  {
    if (!os_log_GKGeneral)
      v15 = (id)GKOSLoggers(v14);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_1000B5A2C();
    v3[2](v3);
  }
  else
  {
    if (!os_log_GKGeneral)
      v16 = (id)GKOSLoggers(v14);
    v17 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Unarchived recordDictionary from invite record: %@", buf, 0xCu);
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("invite-type")));
    v19 = objc_msgSend(v18, "integerValue");

    if (v19 == (id)1)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession packFakeTurnBasedBulletinWithZoneData:](GKCloudGameSession, "packFakeTurnBasedBulletinWithZoneData:", v12));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
      objc_msgSend(v21, "processIncomingiMessageInvite:", v20);

      v3[2](v3);
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 32);
      v22 = *(_QWORD *)(a1 + 40);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1000B26A4;
      v24[3] = &unk_1002C1338;
      v25 = v12;
      v26 = v3;
      +[GKCloudGameSession searchAndSaveIdentityForRecord:database:completionHandler:](GKCloudGameSession, "searchAndSaveIdentityForRecord:database:completionHandler:", v23, v22, v24);

    }
  }

}

void sub_1000B26A4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  __CFString *v10;
  __CFString *v11;
  id v12;
  __CFString *v13;
  int v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      v14 = 138412290;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Updated Messages invite record save completed: %@", (uint8_t *)&v14, 0xCu);
    }
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession packFakeRealTimeBulletinWithZoneData:](GKCloudGameSession, "packFakeRealTimeBulletinWithZoneData:", *(_QWORD *)(a1 + 32)));
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
    -[__CFString processIncomingiMessageInvite:](v11, "processIncomingiMessageInvite:", v10);
    goto LABEL_7;
  }
  if (!v6)
  {
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[GCFLocalizedStrings MESSAGE_BASED_INVITEE_ERROR_ALERT_TITLE](_TtC20GameCenterFoundation19GCFLocalizedStrings, "MESSAGE_BASED_INVITEE_ERROR_ALERT_TITLE"));
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[GCFLocalizedStrings MESSAGE_BASED_INVITEE_NOT_FOUND_ALERT_BODY](_TtC20GameCenterFoundation19GCFLocalizedStrings, "MESSAGE_BASED_INVITEE_NOT_FOUND_ALERT_BODY"));
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[GCFLocalizedStrings MESSAGE_BASED_INVITEE_ERROR_ALERT_BUTTON](_TtC20GameCenterFoundation19GCFLocalizedStrings, "MESSAGE_BASED_INVITEE_ERROR_ALERT_BUTTON"));
    CFUserNotificationDisplayNotice(0.0, 0, 0, 0, 0, v10, v11, v13);

LABEL_7:
    goto LABEL_13;
  }
  if (!os_log_GKGeneral)
    v12 = (id)GKOSLoggers(v6);
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
    sub_1000B5A90();
LABEL_13:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000B2888(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[GKInviteURLManager sharedManager](GKInviteURLManager, "sharedManager"));
  objc_msgSend(v1, "setMostRecentInviteShareRootRecordID:", 0);

}

void sub_1000B2900(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.GameKit.messageServicesQueue", 0);
  v2 = (void *)qword_100317EC0;
  qword_100317EC0 = (uint64_t)v1;

}

void sub_1000B29C0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMDaemonController sharedInstance](IMDaemonController, "sharedInstance"));
  objc_msgSend(v2, "blockUntilConnected");

  v12 = (id)objc_claimAutoreleasedReturnValue(+[IMService iMessageService](IMService, "iMessageService"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[IMAccountController sharedInstance](IMAccountController, "sharedInstance"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "accountsForService:", v12));
  v5 = (void *)qword_100317ED0;
  qword_100317ED0 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[IMAccountController sharedInstance](IMAccountController, "sharedInstance"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[IMService smsService](IMService, "smsService"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "accountsForService:", v7));

  if (qword_100317ED0)
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100317ED0, "arrayByAddingObjectsFromArray:", v8));
  else
    v9 = v8;
  v10 = (void *)qword_100317ED0;
  qword_100317ED0 = (uint64_t)v9;

  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v11, qword_100317ED0);

}

void sub_1000B2D44(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  int v16;

  v3 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000B2E30;
  v9[3] = &unk_1002C1418;
  v10 = *(id *)(a1 + 40);
  v11 = *(id *)(a1 + 48);
  v4 = *(id *)(a1 + 56);
  v6 = *(void **)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v12 = v4;
  v15 = v5;
  v16 = *(_DWORD *)(a1 + 80);
  v13 = v6;
  v14 = v3;
  v7 = *(void **)(a1 + 32);
  v8 = v3;
  objc_msgSend(v7, "setModifyRecordsCompletionBlock:", v9);
  objc_msgSend(*(id *)(a1 + 56), "addOperation:", *(_QWORD *)(a1 + 32));

}

void sub_1000B2E30(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  double v36;
  double v37;
  dispatch_time_t v38;
  uint64_t v39;
  int v40;
  _QWORD v41[4];
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  int v46;
  _QWORD v47[4];
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  int v52;
  uint8_t buf[4];
  uint64_t v54;
  __int16 v55;
  id v56;
  __int16 v57;
  int v58;

  v6 = a4;
  v7 = *(void **)(a1 + 32);
  v8 = a2;
  objc_msgSend(v7, "setError:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));

  objc_msgSend(*(id *)(a1 + 32), "setResult:", v9);
  if (v6)
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v10);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000B5B24();
    if (objc_msgSend(v6, "code") == (id)2)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CKPartialErrorsByItemIDKey));

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordID"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v14));

      if (objc_msgSend(v15, "code") == (id)14)
      {
        if (!os_log_GKGeneral)
          v16 = (id)GKOSLoggers(14);
        v17 = os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
          sub_1000B5AF0(v17, v18, v19, v20, v21, v22, v23, v24);
        v25 = *(void **)(a1 + 32);
        v47[0] = _NSConcreteStackBlock;
        v47[1] = 3221225472;
        v47[2] = sub_1000B31FC;
        v47[3] = &unk_1002C13C8;
        v48 = *(id *)(a1 + 48);
        v26 = *(id *)(a1 + 40);
        v27 = *(_QWORD *)(a1 + 72);
        v49 = v26;
        v51 = v27;
        v52 = *(_DWORD *)(a1 + 80);
        v50 = *(id *)(a1 + 32);
        objc_msgSend(v25, "perform:", v47);

      }
      v6 = v15;
    }
  }
  v28 = +[GKCloudGameSession shouldRetryForError:andRetryCount:](GKCloudGameSession, "shouldRetryForError:andRetryCount:", v6, *(unsigned int *)(a1 + 80));
  if (v28)
  {
    if (!os_log_GKGeneral)
      v32 = (id)GKOSLoggers(v28);
    v33 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      v39 = *(_QWORD *)(a1 + 40);
      v40 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)buf = 138412802;
      v54 = v39;
      v55 = 2112;
      v56 = v6;
      v57 = 1024;
      v58 = v40;
      _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Error save invite record: %@ due to: %@. Will retry at most %d times.", buf, 0x1Cu);
    }
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "valueForKey:", CKErrorRetryAfterKey));
    objc_msgSend(v35, "doubleValue");
    v37 = v36;

    v38 = dispatch_time(0, 1000000000 * (uint64_t)v37);
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_1000B33D0;
    v41[3] = &unk_1002C13F0;
    v45 = *(_QWORD *)(a1 + 72);
    v42 = *(id *)(a1 + 40);
    v43 = *(id *)(a1 + 48);
    v46 = *(_DWORD *)(a1 + 80);
    v44 = *(id *)(a1 + 56);
    dispatch_after(v38, (dispatch_queue_t)&_dispatch_main_q, v41);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), v29, v30, v31);

}

void sub_1000B31FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  int v12;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordID"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000B32CC;
  v7[3] = &unk_1002C13A0;
  v11 = *(_QWORD *)(a1 + 56);
  v8 = *(id *)(a1 + 32);
  v12 = *(_DWORD *)(a1 + 64);
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v6 = v3;
  objc_msgSend(v4, "fetchRecordWithID:completionHandler:", v5, v7);

}

void sub_1000B32CC(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v4 = *(void **)(a1 + 56);
  v5 = *(unsigned int *)(a1 + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000B3378;
  v7[3] = &unk_1002C1338;
  v6 = *(_QWORD *)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v9 = *(id *)(a1 + 48);
  objc_msgSend(v4, "saveInviteRecord:database:retryCount:completionHandler:", a2, v6, v5, v7);

}

uint64_t sub_1000B3378(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  objc_msgSend(v5, "setError:", a3);
  objc_msgSend(*(id *)(a1 + 32), "setResult:", v6);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_1000B33D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 56), "saveInviteRecord:database:retryCount:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (*(_DWORD *)(a1 + 64) - 1), *(_QWORD *)(a1 + 48));
}

void sub_1000B33E8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_1000B3A24(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  _BOOL8 v16;
  id v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *i;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  NSObject *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  NSObject *v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  void *j;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  NSObject *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  void *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  id v87;
  uint8_t buf[4];
  void *v89;
  __int16 v90;
  void *v91;
  __int16 v92;
  void *v93;
  _BYTE v94[128];
  _BYTE v95[128];
  _BYTE v96[128];
  _QWORD v97[4];

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v89 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GK-InviteMessage: got IM accounts: %@", buf, 0xCu);
  }
  v72 = v4;
  v97[0] = objc_opt_class(NSDictionary, v7);
  v97[1] = objc_opt_class(NSNumber, v8);
  v97[2] = objc_opt_class(NSString, v9);
  v97[3] = objc_opt_class(NSData, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v97, 4));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v11));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("invitedPlayers")));
  v87 = 0;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v12, v13, &v87));
  v15 = v87;
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v14));

  if (v15)
  {
    if (!os_log_GKGeneral)
      v17 = (id)GKOSLoggers(v16);
    v16 = os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR);
    if (v16)
      sub_1000B5C1C();
  }
  if (!os_log_GKGeneral)
    v18 = (id)GKOSLoggers(v16);
  v71 = v15;
  v19 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v89 = v74;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "GK-InviteMessage:playerContacts: %@", buf, 0xCu);
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "allKeys"));
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v83, v96, 16);
  if (v22)
  {
    v23 = v22;
    v24 = *(_QWORD *)v84;
    do
    {
      for (i = 0; i != v23; i = (char *)i + 1)
      {
        if (*(_QWORD *)v84 != v24)
          objc_enumerationMutation(v21);
        v26 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * (_QWORD)i);
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "formattedContact:", v26));
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));

        if (v27 == v28)
        {
          if (!os_log_GKGeneral)
            v31 = (id)GKOSLoggers(v29);
          v32 = os_log_GKMatch;
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v89 = v27;
            v90 = 2112;
            v91 = v26;
            _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "formattedPlayerContact (%@) is neither phone num nor email address. it's from playerContact: %@", buf, 0x16u);
          }
        }
        else if (IMStringIsPhoneNumber(v27))
        {
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "lastSevenDigits:", v27));
          objc_msgSend(v20, "setObject:forKey:", v26, v30);

        }
        else
        {
          objc_msgSend(v20, "setObject:forKey:", v26, v27);
        }

      }
      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v83, v96, 16);
    }
    while (v23);
  }

  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v33 = v72;
  v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v79, v95, 16);
  v70 = v34;
  if (!v34)
    goto LABEL_58;
  v35 = *(_QWORD *)v80;
  v69 = *(_QWORD *)v80;
  v73 = v33;
  do
  {
    v36 = 0;
    do
    {
      if (*(_QWORD *)v80 != v35)
        objc_enumerationMutation(v33);
      v37 = v36;
      v38 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * v36);
      if (!os_log_GKGeneral)
        v39 = (id)GKOSLoggers(v34);
      v40 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v89 = v38;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "GK-InviteMessage:checking (local) account: %@", buf, 0xCu);
      }
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "aliases"));
      v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v75, v94, 16);
      if (!v42)
        goto LABEL_56;
      v43 = v42;
      v44 = *(_QWORD *)v76;
      while (2)
      {
        for (j = 0; j != v43; j = (char *)j + 1)
        {
          if (*(_QWORD *)v76 != v44)
            objc_enumerationMutation(v41);
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "formattedContact:", *(_QWORD *)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)j)));
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKey:", v46));
          if (v47)
          {

          }
          else
          {
            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "lastSevenDigits:", v46));
            v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKey:", v48));

            if (!v49)
              goto LABEL_54;
          }
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKey:", v46));
          if (!v50)
          {
            v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "lastSevenDigits:", v46));
            v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKey:", v51));

          }
          v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "objectForKey:", v50));

          if (v52)
          {
            objc_msgSend(v74, "setObject:forKey:", *(_QWORD *)(a1 + 40), v50);
            v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v74, 1, 0));
            v61 = objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v60, CFSTR("invitedPlayers"));
            if (!os_log_GKGeneral)
              v62 = (id)GKOSLoggers(v61);
            v63 = os_log_GKMatch;
            if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
            {
              v64 = *(void **)(a1 + 40);
              *(_DWORD *)buf = 138412546;
              v89 = v64;
              v90 = 2112;
              v91 = v74;
              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "GK-InviteMessage: Found a match (formatted)->saving into invite CKRecord: %@ <- %@", buf, 0x16u);
            }
            v65 = *(void **)(a1 + 64);
            v66 = *(_QWORD *)(a1 + 32);
            v67 = *(_QWORD *)(a1 + 48);
            v68 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
            objc_msgSend(v65, "saveInviteRecord:database:retryCount:completionHandler:", v66, v67, objc_msgSend(v68, "maxPlayersP2P"), *(_QWORD *)(a1 + 56));

            v33 = v73;
            v59 = v71;
            goto LABEL_69;
          }
          if (!os_log_GKGeneral)
            v54 = (id)GKOSLoggers(v53);
          v55 = os_log_GKMatch;
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412802;
            v89 = v50;
            v90 = 2112;
            v91 = v74;
            v92 = 2112;
            v93 = v20;
            _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "cannot find key: %@ in the playerContacts: %@. Currently the formattedPlayerContacts: %@", buf, 0x20u);
          }

LABEL_54:
        }
        v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v75, v94, 16);
        if (v43)
          continue;
        break;
      }
LABEL_56:

      v36 = v37 + 1;
      v33 = v73;
      v35 = v69;
    }
    while ((id)(v37 + 1) != v70);
    v34 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v79, v95, 16);
    v70 = v34;
  }
  while (v34);
LABEL_58:

  if (!os_log_GKGeneral)
    v57 = (id)GKOSLoggers(v56);
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
    sub_1000B5BB8();
  v58 = *(_QWORD *)(a1 + 56);
  v59 = v71;
  if (v58)
    (*(void (**)(uint64_t, _QWORD, id))(v58 + 16))(v58, 0, v71);
LABEL_69:

}

void sub_1000B4434(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  _BOOL8 v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v9)
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v9);
    v12 = os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
    if (v12)
      sub_1000B5CE8();
    if (!os_log_GKGeneral)
      v13 = (id)GKOSLoggers(v12);
    v14 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000B5C80(a1, v14, v15, v16, v17, v18, v19, v20);
  }

}

id sub_1000B4610(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[5];

  v2 = *(_QWORD *)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000B4670;
  v4[3] = &unk_1002C1230;
  v4[4] = a2;
  return +[GKCloudGameSession bundleIDsForContainerName:handler:](GKCloudGameSession, "bundleIDsForContainerName:handler:", v2, v4);
}

void sub_1000B4670(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v8);
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKBadgeController sharedController](GKBadgeController, "sharedController"));
          objc_msgSend(v10, "setBadgeCount:forBundleID:badgeType:", *(_QWORD *)(a1 + 32), v9, 3);

          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v6);
    }
  }

}

void sub_1000B48C0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  char v13;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B497C;
  v8[3] = &unk_1002C14B8;
  v4 = *(id *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 56);
  v6 = *(void **)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v9 = v4;
  v12 = v5;
  v10 = v6;
  v11 = v3;
  v7 = v3;
  +[GKCloudGameSession primaryPlayerWithHandler:](GKCloudGameSession, "primaryPlayerWithHandler:", v8);

}

void sub_1000B497C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("playerID"));

    if (*(_BYTE *)(a1 + 64))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "sessionCache"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "sessionsInContainer:", *(_QWORD *)(a1 + 40)));
      objc_msgSend(*(id *)(a1 + 32), "setResult:", v9);

    }
    else
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1000B4AB4;
      v14[3] = &unk_1002BB590;
      v13 = *(void **)(a1 + 32);
      v15 = *(id *)(a1 + 40);
      v16 = *(id *)(a1 + 32);
      objc_msgSend(v13, "perform:", v14);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setError:", v6);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v10, v11, v12);

}

void sub_1000B4AB4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000B4B54;
  v6[3] = &unk_1002BCA30;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  +[GKCloudGameSession sessionsForContainerName:handler:](GKCloudGameSession, "sessionsForContainerName:handler:", v4, v6);

}

void sub_1000B4B54(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  if (!a2)
    objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000B4BB0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id obj;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  if (v2)
  {
    v16 = v1;
    v17 = v2;
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "objectForKeyedSubscript:", CFSTR("playerID")));
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    obj = v2;
    v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v6)
            objc_enumerationMutation(obj);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i), "playerStates"));
          v20 = 0;
          v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession mutablePlistFromPlayerStatesData:error:](GKCloudGameSession, "mutablePlistFromPlayerStatesData:error:", v8, &v20));
          v10 = v9;
          if (!v20)
          {
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v18));
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", 1));
            v13 = objc_msgSend(v12, "integerValue");

            if (v13)
              ++v5;
          }

        }
        v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v16;
    v2 = v17;
  }
  else
  {
    v5 = 0;
  }
  v14 = *(_QWORD *)(v1 + 40);
  if (v14)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "error"));
    (*(void (**)(uint64_t, uint64_t, void *))(v14 + 16))(v14, v5, v15);

  }
}

void sub_1000B4FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000B5028(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void (**v19)(_QWORD);
  _QWORD v20[5];
  id v21;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v19 = a2;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v8));

        if (v9)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v8));
          objc_msgSend(v11, "setObject:atIndexedSubscript:", v10, 1);
        }
        else
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)));
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", &off_1002DB6E8, v10, 0));
          objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v11, v8);
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v5);
  }

  v12 = *(_QWORD *)(a1 + 40);
  v13 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  obj = 0;
  v14 = objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v12, 200, 0, &obj));
  objc_storeStrong(v13, obj);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
  {
    objc_msgSend(*(id *)(a1 + 56), "setError:");
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "setPlayerStates:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000B52E0;
    v20[3] = &unk_1002BB590;
    v17 = *(void **)(a1 + 56);
    v20[4] = *(_QWORD *)(a1 + 48);
    v21 = v17;
    objc_msgSend(v21, "perform:", v20);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "containerName"));
    +[GKCloudGameSession updateBadgeCountsForContainerName:](GKCloudGameSession, "updateBadgeCountsForContainerName:", v18);

  }
  v19[2](v19);

}

void sub_1000B52E0(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  _QWORD v5[4];
  id v6;
  id v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B536C;
  v5[3] = &unk_1002C14E0;
  v3 = *(void **)(a1 + 40);
  v6 = *(id *)(a1 + 32);
  v7 = v3;
  v4 = a2;
  objc_msgSend(v6, "saveWithHandler:", v5);
  v4[2](v4);

}

void sub_1000B536C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a2;
  if (!v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession sessionCache](GKCloudGameSession, "sessionCache"));
    v6 = *(_QWORD *)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
    objc_msgSend(v4, "updateWithChangedSessions:removedSessions:handler:", v5, 0, 0);

  }
  objc_msgSend(*(id *)(a1 + 40), "setError:", v3);

}

void sub_1000B5434(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_1000B5554(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint8_t v8[14];
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 96);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v4));
  sub_1000B5540();
  v9 = a3;
  sub_100027A70((void *)&_mh_execute_header, v5, v7, "Error fetching changes when updating cloud game session cache for database scope %@ \nerror %@", v8);

  sub_1000279A0();
}

void sub_1000B55FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "error while decoding emails archive in cloudGameSession:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000B565C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "error while decoding names archive in cloudGameSession:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000B56BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error saving friends record: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000B571C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error accepting share URL %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000B577C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error accepting share for multiplayer invite: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000B57DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error fetching share record for multiplayer invite %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000B583C()
{
  uint64_t v0;
  os_log_t v1;

  sub_1000B5528();
  sub_100016C0C((void *)&_mh_execute_header, v0, v1, "Error accepting CloudKit share metadata %@ due to: %@.");
  sub_100016C20();
}

void sub_1000B58A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error updating cache after accepting CloudKit share metadata %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000B5900()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Could not generate invite bulletin from CKRecord %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000B5960(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "recordID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKInviteURLManager sharedManager](GKInviteURLManager, "sharedManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mostRecentInviteShareRootRecordID"));
  v8 = 138412546;
  v9 = v4;
  v10 = 2112;
  v11 = v6;
  sub_100027A70((void *)&_mh_execute_header, v3, v7, "Could not generate invite bulletin from CKRecord, recordID (%@) does not equal most recent invite share root recordID %@", (uint8_t *)&v8);

  sub_1000279A0();
}

void sub_1000B5A2C()
{
  uint64_t v0;
  os_log_t v1;

  sub_1000B5528();
  sub_100016C0C((void *)&_mh_execute_header, v0, v1, "Error unarchiving connectionData from multiplayer invite record %@ \n%@");
  sub_100016C20();
}

void sub_1000B5A90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error searching for identity and/or saving invite CKRecord %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000B5AF0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "Error saving CKRecord (for Messages Invite) because server record changed. Will fetch updated record from CloudKit and retry save.", a5, a6, a7, a8, 0);
}

void sub_1000B5B24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error saving CKRecord (for Messages Invite) because of: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000B5B84(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "no player is signed in to Game Center", a5, a6, a7, a8, 0);
}

void sub_1000B5BB8()
{
  uint64_t v0;
  os_log_t v1;

  sub_1000B5540();
  sub_100016C0C((void *)&_mh_execute_header, v0, v1, "GK-InviteMessage: None of your Messages accounts were found in the invitation. invited accounts - %@, local accounts - %@");
  sub_100016C20();
}

void sub_1000B5C1C()
{
  uint64_t v0;
  os_log_t v1;

  sub_1000B5528();
  sub_100016C0C((void *)&_mh_execute_header, v0, v1, "Error decoding invitedPlayer archive in cloudGameSession from record %@ \n%@");
  sub_100016C20();
}

void sub_1000B5C80(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "Inivte record: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000B5CE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error deleting invite record: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

uint64_t sub_1000B5ED0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setUserRecordID:", 0);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 25) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = 0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 72);
  *(_QWORD *)(v4 + 72) = 0;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_1000B5FD8(uint64_t a1)
{
  id result;
  double v3;
  BOOL v4;

  result = *(id *)(*(_QWORD *)(a1 + 32) + 80);
  if (result)
  {
    result = objc_msgSend(result, "timeIntervalSinceNow");
    v4 = v3 > 0.0;
  }
  else
  {
    v4 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v4;
  return result;
}

void sub_1000B6078(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", 3600.0));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 80);
  *(_QWORD *)(v3 + 80) = v2;

}

uint64_t sub_1000B64B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000B64C4(uint64_t a1)
{

}

void sub_1000B64CC(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_1000B65C8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  _QWORD block[5];
  _QWORD v12[4];
  id v13;
  uint64_t v14;

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000B6724;
  v12[3] = &unk_1002BB590;
  v2 = (id)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", CFSTR("updateUserWithHandler")));
  v3 = *(_QWORD *)(a1 + 32);
  v13 = v2;
  v14 = v3;
  objc_msgSend(v2, "perform:", v12);
  objc_msgSend(v2, "wait");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("read")));
  v5 = objc_msgSend(v4, "BOOLValue");

  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(NSObject **)(v6 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B6A94;
    block[3] = &unk_1002BBBD8;
    block[4] = v6;
    dispatch_barrier_async(v7, block);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000B6AC4;
    v8[3] = &unk_1002BB450;
    v10 = *(id *)(a1 + 40);
    v9 = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);

  }
}

void sub_1000B6724(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG))
    sub_1000BA240();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000B680C;
  v9[3] = &unk_1002C15A8;
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v10 = v6;
  v11 = v7;
  v12 = v4;
  v8 = v4;
  +[GKCloudGameSession fetchUserRecordIDWithHandler:](GKCloudGameSession, "fetchUserRecordIDWithHandler:", v9);

}

void sub_1000B680C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  unsigned int v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  id v12;
  BOOL v13;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setError:", a3);
  v6 = *(id *)(*(_QWORD *)(a1 + 40) + 32);
  if (v6 == v5)
  {
    v7 = 0;
  }
  else
  {
    v6 = objc_msgSend(v6, "isEqual:", v5);
    v7 = v6 ^ 1;
  }
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG))
  {
    sub_1000BA26C();
    if (!v7)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v7)
  {
LABEL_8:
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v5 != 0));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("read"));

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000B6970;
    v11[3] = &unk_1002C07E8;
    v10 = *(void **)(a1 + 32);
    v11[4] = *(_QWORD *)(a1 + 40);
    v13 = v5 != 0;
    v12 = v5;
    objc_msgSend(v10, "perform:", v11);

  }
LABEL_9:
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000B6970(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;
  char v12;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B6A14;
  v8[3] = &unk_1002BCB20;
  v12 = *(_BYTE *)(a1 + 48);
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "clearWithHandler:", v8);

}

uint64_t sub_1000B6A14(uint64_t a1)
{
  id v2;
  NSObject *v3;

  if (*(_BYTE *)(a1 + 56))
  {
    if (!os_log_GKGeneral)
      v2 = (id)GKOSLoggers(a1);
    v3 = os_log_GKAccount;
    if (os_log_type_enabled(os_log_GKAccount, OS_LOG_TYPE_DEBUG))
      sub_1000BA2F0(a1, v3);
    objc_msgSend(*(id *)(a1 + 40), "setUserRecordID:", *(_QWORD *)(a1 + 32));
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

id sub_1000B6A94(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateDatabasePath");
  objc_msgSend(*(id *)(a1 + 32), "readUserInfoFromDatabase");
  return _objc_msgSend(*(id *)(a1 + 32), "readBundleIDsFromDisk");
}

void sub_1000B6AC4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1000B6BF0(_QWORD *a1)
{
  void *v2;
  void *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 56), "objectForKeyedSubscript:", a1[5]));
  if (v2)
  {
    v8 = v2;
    objc_msgSend(v2, "doubleValue");
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"));
    objc_msgSend(v3, "timeIntervalSinceNow");
    if (v4 > 0.0)
    {
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 48), "objectForKeyedSubscript:", a1[5]));
      v6 = *(_QWORD *)(a1[6] + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
    v2 = v8;
  }

}

id sub_1000B6D28(uint64_t a1)
{
  double v2;
  void *v3;

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v2 + 3600.0));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "setObject:forKeyedSubscript:", v3, *(_QWORD *)(a1 + 48));

  }
  else
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "removeObjectForKey:", *(_QWORD *)(a1 + 48));
  }
  return _objc_msgSend(*(id *)(a1 + 40), "writeBundleIDsToDisk");
}

id sub_1000B7124(uint64_t a1, uint64_t a2)
{
  id result;
  uint64_t v5;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = objc_msgSend(*(id *)(a1 + 32), "intFromRowStatement:column:", a2, 0) != 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 25) = objc_msgSend(*(id *)(a1 + 32), "intFromRowStatement:column:", a2, 1) != 0;
  result = objc_msgSend(*(id *)(a1 + 32), "doubleFromRowStatement:column:", a2, 2);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = v5;
  return result;
}

uint64_t sub_1000B73D8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 24);
  return result;
}

unsigned __int8 *sub_1000B7448(unsigned __int8 *result)
{
  uint64_t v1;
  int v2;

  v1 = *((_QWORD *)result + 4);
  v2 = result[40];
  if (*(unsigned __int8 *)(v1 + 24) != v2)
  {
    *(_BYTE *)(v1 + 24) = v2;
    return (unsigned __int8 *)_objc_msgSend(*((id *)result + 4), "saveUserInfo");
  }
  return result;
}

uint64_t sub_1000B74FC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 25);
  return result;
}

unsigned __int8 *sub_1000B756C(unsigned __int8 *result)
{
  uint64_t v1;
  int v2;

  v1 = *((_QWORD *)result + 4);
  v2 = result[40];
  if (*(unsigned __int8 *)(v1 + 25) != v2)
  {
    *(_BYTE *)(v1 + 25) = v2;
    return (unsigned __int8 *)_objc_msgSend(*((id *)result + 4), "saveUserInfo");
  }
  return result;
}

double sub_1000B7620(uint64_t a1)
{
  double result;

  result = *(double *)(*(_QWORD *)(a1 + 32) + 40);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

id sub_1000B7690(id result)
{
  uint64_t v1;
  double v2;

  v1 = *((_QWORD *)result + 4);
  v2 = *((double *)result + 5);
  if (*(double *)(v1 + 40) != v2)
  {
    *(double *)(v1 + 40) = v2;
    return _objc_msgSend(*((id *)result + 4), "saveUserInfo");
  }
  return result;
}

void sub_1000B79D8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[6];
  _QWORD v8[2];

  if (objc_msgSend(*(id *)(a1 + 32), "openDatabase"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SELECT %@ FROM %@ WHERE %@=? AND %@=?"), CFSTR("ARCHIVE"), CFSTR("TOKENS"), CFSTR("CONTAINER"), CFSTR("OWNER")));
    v3 = *(void **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 48);
    v8[0] = *(_QWORD *)(a1 + 40);
    v8[1] = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v8, 2));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000B7B04;
    v7[3] = &unk_1002C1648;
    v6 = *(_QWORD *)(a1 + 56);
    v7[4] = *(_QWORD *)(a1 + 32);
    v7[5] = v6;
    objc_msgSend(v3, "stepStatement:parameters:rowHandler:", v2, v5, v7);

    objc_msgSend(*(id *)(a1 + 32), "closeDatabase");
  }
}

void sub_1000B7B04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataFromRowStatement:column:", a2, 0));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tokenFromData:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

id sub_1000B7C30(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "openDatabase");
  if ((_DWORD)result)
  {
    objc_msgSend(*(id *)(a1 + 32), "_setToken:forContainerName:ownerName:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    return objc_msgSend(*(id *)(a1 + 32), "closeDatabase");
  }
  return result;
}

id sub_1000B7D1C(id *a1)
{
  id result;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *j;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];

  result = objc_msgSend(a1[4], "openDatabase");
  if ((_DWORD)result)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v3 = a1[5];
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v27 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", v8));
          v10 = a1[4];
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "zoneName"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ownerName"));
          objc_msgSend(v10, "_setToken:forContainerName:ownerName:", v9, v11, v12);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      }
      while (v5);
    }

    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v13 = a1[6];
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v23;
      do
      {
        for (j = 0; j != v15; j = (char *)j + 1)
        {
          if (*(_QWORD *)v23 != v16)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)j);
          v19 = a1[4];
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "zoneName", (_QWORD)v22));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "ownerName"));
          objc_msgSend(v19, "_setToken:forContainerName:ownerName:", 0, v20, v21);

        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      }
      while (v15);
    }

    return objc_msgSend(a1[4], "closeDatabase");
  }
  return result;
}

void sub_1000B8208(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  __int128 v4;

  if (objc_msgSend(*(id *)(a1 + 32), "openDatabase"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SELECT %@, %@ FROM %@"), CFSTR("IDENTIFIER"), CFSTR("NAME"), CFSTR("FRIENDS")));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000B82C8;
    v3[3] = &unk_1002C1648;
    v4 = *(_OWORD *)(a1 + 32);
    objc_msgSend((id)v4, "stepStatement:parameters:rowHandler:", v2, 0, v3);
    objc_msgSend(*(id *)(a1 + 32), "closeDatabase");

  }
}

void sub_1000B82C8(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringFromRowStatement:column:", a2, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringFromRowStatement:column:", a2, 1));
  v5 = objc_alloc_init((Class)GKCloudPlayer);
  objc_msgSend(v5, "setIdentifier:", v6);
  objc_msgSend(v5, "setName:", v4);
  if (v5)
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v5);

}

void sub_1000B8434(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  __int128 v4;

  if (objc_msgSend(*(id *)(a1 + 32), "openDatabase"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SELECT %@, %@ FROM %@"), CFSTR("IDENTIFIER"), CFSTR("EMAIL"), CFSTR("FRIENDS")));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000B84F4;
    v3[3] = &unk_1002C1648;
    v4 = *(_OWORD *)(a1 + 32);
    objc_msgSend((id)v4, "stepStatement:parameters:rowHandler:", v2, 0, v3);
    objc_msgSend(*(id *)(a1 + 32), "closeDatabase");

  }
}

void sub_1000B84F4(uint64_t a1, uint64_t a2)
{
  void *v4;
  BOOL v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringFromRowStatement:column:", a2, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stringFromRowStatement:column:", a2, 1));
  if (v6)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "setObject:forKeyedSubscript:", v4, v6);

}

id sub_1000B8624(uint64_t a1)
{
  id result;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  BOOL v13;
  id v14;
  void *v15;
  void *v16;
  NSObject *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const __CFString *v22;
  void *v23;
  unsigned __int8 v24;
  uint64_t v25;
  id v26;
  void *v27;
  id *v28;
  id obj;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[24];
  _QWORD v35[3];
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];

  v28 = (id *)(a1 + 32);
  result = objc_msgSend(*(id *)(a1 + 32), "openDatabase");
  if ((_DWORD)result)
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    obj = *(id *)(a1 + 40);
    v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
    if (!v3)
      goto LABEL_26;
    v4 = v3;
    v5 = *(_QWORD *)v31;
    while (1)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v31 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
        v8 = *(void **)(a1 + 48);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));

        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
        if (v11)
          v13 = v10 == 0;
        else
          v13 = 1;
        if (!v13)
        {
          v17 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("INSERT OR REPLACE INTO %@ (%@, %@, %@) VALUES (?, ?, ?)"), CFSTR("FRIENDS"), CFSTR("IDENTIFIER"), CFSTR("NAME"), CFSTR("EMAIL")));
          v18 = *v28;
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
          v35[0] = v19;
          v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
          v21 = (void *)v20;
          v22 = &stru_1002CE2A8;
          if (v20)
            v22 = (const __CFString *)v20;
          v35[1] = v22;
          v35[2] = v10;
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v35, 3));
          v24 = objc_msgSend(v18, "stepStatement:parameters:rowHandler:", v17, v23, 0);

          if ((v24 & 1) == 0)
          {
            if (!os_log_GKGeneral)
              v26 = (id)GKOSLoggers(v25);
            v27 = (void *)os_log_GKError;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
              sub_1000BA4B8((uint64_t)v34, (uint64_t)v28, v27);
          }
          goto LABEL_23;
        }
        if (!os_log_GKGeneral)
          v14 = (id)GKOSLoggers(v12);
        v15 = (void *)os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        {
          v17 = v15;
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
          *(_DWORD *)buf = 138412546;
          v37 = v16;
          v38 = 2112;
          v39 = v10;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Ignoring friend player: %@, email: %@", buf, 0x16u);

LABEL_23:
        }

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
      if (!v4)
      {
LABEL_26:

        return objc_msgSend(*v28, "closeDatabase");
      }
    }
  }
  return result;
}

void sub_1000B8D4C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  NSObject *v38;
  id v39;
  NSObject *v40;
  uint64_t v41;
  id *v42;
  _QWORD block[4];
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[24];
  _QWORD v54[3];
  _BYTE v55[128];
  _BYTE v56[24];
  void *v57;
  uint8_t buf[4];
  void *v59;
  _BYTE v60[128];

  v1 = a1;
  v42 = (id *)(a1 + 32);
  if (objc_msgSend(*(id *)(a1 + 32), "openDatabase"))
  {
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v41 = v1;
    v2 = *(id *)(v1 + 40);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v49, v60, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v50;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v50 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)i);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));

          if (v8)
          {
            v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("DELETE FROM %@ WHERE %@=?"), CFSTR("SESSIONS"), CFSTR("IDENTIFIER")));
            v11 = *v42;
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
            v57 = v12;
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v57, 1));
            LOBYTE(v11) = objc_msgSend(v11, "stepStatement:parameters:rowHandler:", v10, v13, 0);

            if ((v11 & 1) == 0)
            {
              if (!os_log_GKGeneral)
                v15 = (id)GKOSLoggers(v14);
              v16 = (void *)os_log_GKError;
              if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
                sub_1000BA560((uint64_t)v56, (uint64_t)v42, v16);
            }

          }
          else
          {
            if (!os_log_GKGeneral)
              v17 = (id)GKOSLoggers(v9);
            v18 = os_log_GKError;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v59 = v7;
              _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Ignoring deletion of session with nil identifier: %@", buf, 0xCu);
            }
          }
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v49, v60, 16);
      }
      while (v4);
    }

    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v19 = *(id *)(v41 + 48);
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v46;
      do
      {
        for (j = 0; j != v21; j = (char *)j + 1)
        {
          if (*(_QWORD *)v46 != v22)
            objc_enumerationMutation(v19);
          v24 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)j);
          v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "identifier"));
          if (v25
            && (v26 = (void *)v25,
                v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "containerName")),
                v27,
                v26,
                v27))
          {
            v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v24, 1, 0));
            if (v28)
            {
              v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("INSERT OR REPLACE INTO %@ (%@, %@, %@) VALUES (?, ?, ?)"), CFSTR("SESSIONS"), CFSTR("IDENTIFIER"), CFSTR("CONTAINER"), CFSTR("ARCHIVE")));
              v30 = *v42;
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "identifier"));
              v54[0] = v31;
              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "containerName"));
              v54[1] = v32;
              v54[2] = v28;
              v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v54, 3));
              LOBYTE(v30) = objc_msgSend(v30, "stepStatement:parameters:rowHandler:", v29, v33, 0);

              if ((v30 & 1) == 0)
              {
                if (!os_log_GKGeneral)
                  v35 = (id)GKOSLoggers(v34);
                v36 = (void *)os_log_GKError;
                if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
                  sub_1000BA50C((uint64_t)v53, (uint64_t)v42, v36);
              }

            }
            else
            {
              if (!os_log_GKGeneral)
                v39 = (id)GKOSLoggers(0);
              v40 = os_log_GKError;
              if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v59 = v24;
                _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Error archiving session %@", buf, 0xCu);
              }
            }

          }
          else
          {
            if (!os_log_GKGeneral)
              v37 = (id)GKOSLoggers(v25);
            v38 = os_log_GKError;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v59 = v24;
              _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Ignoring upsert of session with nil identifier and/or containerName: %@", buf, 0xCu);
            }
          }
        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
      }
      while (v21);
    }

    objc_msgSend(*v42, "closeDatabase");
    v1 = v41;
  }
  if (*(_QWORD *)(v1 + 56))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B9340;
    block[3] = &unk_1002BB540;
    v44 = *(id *)(v1 + 56);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

uint64_t sub_1000B9340(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000B955C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  uint64_t v8;

  if (objc_msgSend(*(id *)(a1 + 32), "openDatabase"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SELECT %@ FROM %@ WHERE %@=?"), CFSTR("ARCHIVE"), CFSTR("SESSIONS"), CFSTR("CONTAINER")));
    v3 = *(void **)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000B96A0;
    v5[3] = &unk_1002C1698;
    v5[4] = *(_QWORD *)(a1 + 32);
    v6 = *(id *)(a1 + 48);
    v7 = *(id *)(a1 + 56);
    objc_msgSend(v3, "stepStatement:parameters:rowHandler:", v2, v4, v5);

    objc_msgSend(*(id *)(a1 + 32), "closeDatabase");
  }
}

void sub_1000B96A0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataFromRowStatement:column:", a2, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionFromData:"));
  v4 = v3;
  if (v3)
  {
    if (!*(_QWORD *)(a1 + 40)
      || (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "owner")),
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier")),
          v7 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 40)),
          v6,
          v5,
          v7))
    {
      objc_msgSend(*(id *)(a1 + 48), "addObject:", v4);
    }
  }

}

void sub_1000B9880(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[6];
  uint64_t v7;

  if (objc_msgSend(*(id *)(a1 + 32), "openDatabase"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("SELECT %@ FROM %@ WHERE %@=?"), CFSTR("ARCHIVE"), CFSTR("SESSIONS"), CFSTR("IDENTIFIER")));
    v3 = *(void **)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000B99A0;
    v6[3] = &unk_1002C1648;
    v5 = *(_QWORD *)(a1 + 48);
    v6[4] = *(_QWORD *)(a1 + 32);
    v6[5] = v5;
    objc_msgSend(v3, "stepStatement:parameters:rowHandler:", v2, v4, v6);

    objc_msgSend(*(id *)(a1 + 32), "closeDatabase");
  }
}

void sub_1000B99A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataFromRowStatement:column:", a2, 0));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sessionFromData:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1000B9C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B9C98(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;

  v6 = a1 + 32;
  if ((objc_msgSend(*(id *)(a1 + 32), "bindStatement:withParameter:atPosition:", *(_QWORD *)(a1 + 48), a2, (a3 + 1)) & 1) == 0)
  {
    v7 = sqlite3_errcode(*(sqlite3 **)(*(_QWORD *)v6 + 64));
    if ((_DWORD)v7)
    {
      if (!os_log_GKGeneral)
        v8 = (id)GKOSLoggers(v7);
      v9 = (void *)os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_1000BA700(v6, v9);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
}

void sub_1000BA148(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1000BA15C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, a3, a4, a5, 0xCu);
}

id sub_1000BA164(uint64_t a1, uint64_t a2, void *a3)
{
  return a3;
}

const char *sub_1000BA178()
{
  sqlite3 *v0;

  return sqlite3_errmsg(v0);
}

id sub_1000BA190(uint64_t a1, void *a2)
{
  return a2;
}

const char *sub_1000BA19C()
{
  sqlite3 *v0;

  return sqlite3_errmsg(v0);
}

void sub_1000BA1A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Clearing session cache", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000BA1D4(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *a1;
  v4 = 138412290;
  v5 = v3;
  sub_100071E74((void *)&_mh_execute_header, a2, a3, "Failed to open/create database for GKSession at path:%@", (uint8_t *)&v4);
  sub_100016C20();
}

void sub_1000BA240()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Fetching user record ID", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000BA26C()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_1000279B0();
  v3 = 2112;
  v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Fetched user record ID: %@, previous record ID: %@", v2, 0x16u);
  sub_100016C20();
}

void sub_1000BA2F0(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 138412290;
  v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Setting user record ID to: %@", (uint8_t *)&v3, 0xCu);
  sub_100016C20();
}

void sub_1000BA364(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_1000BA190(a1, a2);
  sub_1000BA178();
  sub_1000279B0();
  sub_1000BA148((void *)&_mh_execute_header, v3, v4, "DB Save User Info Error: %s", v5, v6, v7, v8, v9);

  sub_1000279E0();
}

void sub_1000BA3D0()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_1000279B0();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Returning nil change token for containerName: %@, ownerName: %@", v2, 0x16u);
  sub_100016C20();
}

void sub_1000BA44C(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_1000BA190(a1, a2);
  sub_1000BA178();
  sub_1000279B0();
  sub_1000BA148((void *)&_mh_execute_header, v3, v4, "DB Set Token Error: %s", v5, v6, v7, v8, v9);

  sub_1000279E0();
}

void sub_1000BA4B8(uint64_t a1, uint64_t a2, void *a3)
{
  const char **v3;
  uint8_t *v4;
  NSObject *v5;
  const char *v6;

  sub_1000BA164(a1, a2, a3);
  v6 = sub_1000BA19C();
  *(_DWORD *)v4 = 136315138;
  *v3 = v6;
  sub_1000BA15C((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Database - Set Friends Error: %s", v4);

  sub_1000BA184();
}

void sub_1000BA50C(uint64_t a1, uint64_t a2, void *a3)
{
  const char **v3;
  uint8_t *v4;
  NSObject *v5;
  const char *v6;

  sub_1000BA164(a1, a2, a3);
  v6 = sub_1000BA19C();
  *(_DWORD *)v4 = 136315138;
  *v3 = v6;
  sub_1000BA15C((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "DB Insert Session Error: %s", v4);

  sub_1000BA184();
}

void sub_1000BA560(uint64_t a1, uint64_t a2, void *a3)
{
  const char **v3;
  uint8_t *v4;
  NSObject *v5;
  const char *v6;

  sub_1000BA164(a1, a2, a3);
  v6 = sub_1000BA19C();
  *(_DWORD *)v4 = 136315138;
  *v3 = v6;
  sub_1000BA15C((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "DB Remove Session Error: %s", v4);

  sub_1000BA184();
}

void sub_1000BA5B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Returning no session for nil containerName", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000BA5E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Returning no session for nil identifier", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000BA60C(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *a1;
  v4 = 136315138;
  v5 = v3;
  sub_100071E74((void *)&_mh_execute_header, a2, a3, "DB Execute Error: %s", (uint8_t *)&v4);
  sub_100016C20();
}

void sub_1000BA678(sqlite3 **a1, void *a2)
{
  sqlite3 *v2;
  NSObject *v3;
  uint64_t v4;
  uint8_t v5[24];

  v2 = *a1;
  v3 = a2;
  sqlite3_errmsg(v2);
  sub_1000279B0();
  sub_100071E74((void *)&_mh_execute_header, v3, v4, "DB Parameter Error: %s", v5);

  sub_1000279E0();
}

void sub_1000BA700(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v3 = a2;
  sub_1000BA178();
  sub_1000279B0();
  sub_1000BA148((void *)&_mh_execute_header, v4, v5, "DB Parameter Error: %s", v6, v7, v8, v9, v10);

  sub_1000279E0();
}

void sub_1000BA778(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  v3 = a1;
  objc_opt_class(a2, v4);
  sub_1000279B0();
  v6 = v5;
  sub_1000BA148((void *)&_mh_execute_header, v7, v8, "Unsupported parameter value type: %@", v9, v10, v11, v12, v13);

  sub_1000279E0();
}

void sub_1000BA800(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_1000BA190(a1, a2);
  sub_1000BA178();
  sub_1000279B0();
  sub_1000BA148((void *)&_mh_execute_header, v3, v4, "DB Step Error: %s", v5, v6, v7, v8, v9);

  sub_1000279E0();
}

void sub_1000BB1E0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "No server data to decode, raising a communication failure error with reason:no data received from server", a5, a6, a7, a8, 0);
}

id _localPlayerID()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "networkManagerUserOverride"));

  if (objc_msgSend(v1, "length"))
  {
    v2 = v1;
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pushCredentialForEnvironment:", objc_msgSend(v3, "environment")));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerInternal"));

    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
  }

  return v2;
}

void _updateRequestBody(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", a2, 100, 0, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allHTTPHeaderFields"));
  if (v4)
    objc_msgSend(v5, "setValue:forHTTPHeaderField:", 0, CFSTR("Content-Encoding"));
  objc_msgSend(v5, "setHTTPBody:", v3);

}

void sub_1000BC068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000BC08C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setFairPlaySessionReady:", v6 == 0);
  v8 = objc_msgSend(WeakRetained, "fairPlaySessionReady");
  if ((v8 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(v8);
    v10 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000C7218((uint64_t)v6, v10);
  }
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v5);

}

void sub_1000BC750(id a1)
{
  GKNetworkRequestManager *v1;
  void *v2;

  v1 = -[GKNetworkRequestManager initWithInMemoryEntityCache:]([GKNetworkRequestManager alloc], "initWithInMemoryEntityCache:", 0);
  v2 = (void *)qword_100317ED8;
  qword_100317ED8 = (uint64_t)v1;

  _objc_msgSend((id)qword_100317ED8, "setupSessionsAsync");
}

void sub_1000BCA84(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BCB14;
  block[3] = &unk_1002BBBD8;
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, block);

}

void sub_1000BCB14(uint64_t a1)
{
  id v1;
  id v2;
  __int128 v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  NSObject *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t buf[4];
  void *v18;
  _BYTE v19[128];

  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
  if (v2)
  {
    v4 = v2;
    v5 = *(_QWORD *)v14;
    *(_QWORD *)&v3 = 138412290;
    v12 = v3;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v6);
        if (!os_log_GKGeneral)
          v8 = (id)GKOSLoggers(v2);
        v9 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v10 = v9;
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager dictionaryFromTaskDescription:](GKNetworkRequestManager, "dictionaryFromTaskDescription:", v7));
          *(_DWORD *)buf = v12;
          v18 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GKNetworkRequestManager taskDescription: %@", buf, 0xCu);

        }
        v2 = objc_msgSend(v7, "cancel", v12, (_QWORD)v13);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
      v4 = v2;
    }
    while (v2);
  }

}

void sub_1000BCE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BCEAC(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v1 = a1;
  if (objc_msgSend(*(id *)(a1 + 32), "managerReady"))
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    obj = *(id *)(v1 + 40);
    v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v24;
      v20 = v1;
      v21 = *(_QWORD *)v24;
      while (2)
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v4)
            objc_enumerationMutation(obj);
          v6 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "existingTasks"));
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v6));

          if (v8)
          {
            v9 = _localPlayerID();
            v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v10));
            v12 = v11;
            if (v11)
            {
              v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "currentTasks"));
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allKeys"));
              if (objc_msgSend(v14, "count"))
              {

LABEL_17:
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8) + 24) = 1;

                goto LABEL_18;
              }
              v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "pendingRequests"));
              v16 = v10;
              v17 = v3;
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "allKeys"));
              v19 = objc_msgSend(v18, "count");

              v3 = v17;
              v10 = v16;

              v1 = v20;
              v4 = v21;

              if (v19)
                goto LABEL_17;
            }

          }
        }
        v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
        if (v3)
          continue;
        break;
      }
    }
LABEL_18:

  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8) + 24) = 0;
  }
}

void sub_1000BDAF8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryForBagAndPlayer:createIfNotPresent:description:", *(_QWORD *)(a1 + 40), 0, 0));
  v3 = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 40), "isDuplicateRequest:");
  if ((v3 & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "currentTasks"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "requestIdentifier"));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", 0, v5);

  }
  else if (v2 && (v3 = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 40), "removeFromStore:"), (v3 & 1) != 0))
  {
    v6 = objc_msgSend(*(id *)(a1 + 40), "removeFromStore:", v2);
  }
  else
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v3);
    v8 = os_log_GKDaemon;
    v6 = (id)os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
    if ((_DWORD)v6)
    {
      v9 = *(void **)(a1 + 40);
      v15 = 138412290;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GKNetworkRequestManager error when trying to remove from store: %@", (uint8_t *)&v15, 0xCu);
    }
  }
  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v6);
  v11 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v12 = *(void **)(a1 + 32);
    v13 = v11;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "existingTasks"));
    v15 = 138412290;
    v16 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "GKNetworkRequestManager handleTaskFinished state after update: %@", (uint8_t *)&v15, 0xCu);

  }
}

void sub_1000BDD4C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  GKNetworkRequestManagerSessionDelegate *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  uint8_t buf[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKNetworkRequestManager setupSessionsAsync", buf, 2u);
  }
  objc_msgSend(*(id *)(a1 + 32), "getFairPlaySession:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:](NSURLSessionConfiguration, "backgroundSessionConfigurationWithIdentifier:", CFSTR("com.apple.gamed.networking.background")));
  objc_msgSend(*(id *)(a1 + 32), "setBackgroundConfig:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundConfig"));
  objc_msgSend(v5, "setDiscretionary:", 0);

  v6 = -[GKNetworkRequestManagerSessionDelegate initWithNetworkManager:]([GKNetworkRequestManagerSessionDelegate alloc], "initWithNetworkManager:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "setBackgroundTasksSessionDelegate:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundConfig"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundTasksSessionDelegate"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSession sessionWithConfiguration:delegate:delegateQueue:](NSURLSession, "sessionWithConfiguration:delegate:delegateQueue:", v7, v8, v9));
  objc_msgSend(*(id *)(a1 + 32), "setBackgroundSession:", v10);

  objc_msgSend(*(id *)(a1 + 32), "setCurrentState:", 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundSession"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000BDF28;
  v12[3] = &unk_1002C1730;
  v12[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v11, "getAllTasksWithCompletionHandler:", v12);

}

void sub_1000BDF28(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v4, "count")));
    *(_DWORD *)buf = 138412290;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKNetworkRequestManager setupSessionsAsync tasks: %@", buf, 0xCu);

  }
  if (v4)
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateQueue"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000BE090;
    v12[3] = &unk_1002BB658;
    v10 = v4;
    v11 = *(_QWORD *)(a1 + 32);
    v13 = v10;
    v14 = v11;
    dispatch_async(v9, v12);

  }
}

void sub_1000BE090(uint64_t a1)
{
  uint64_t v1;
  id v2;
  int v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  NSObject *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id obj;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[2];
  _QWORD v52[2];
  uint8_t v53[128];
  uint8_t buf[4];
  void *v55;
  _BYTE v56[128];

  v1 = a1;
  v40 = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "count");
  if (v40 < 61 || (objc_msgSend(*(id *)(v1 + 40), "reportedExessiveRequests") & 1) != 0)
  {
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v2 = objc_alloc_init((Class)NSMutableDictionary);
    v3 = 1;
  }
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  obj = *(id *)(v1 + 32);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
  v41 = v1;
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v48;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v48 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)v7);
        if (!os_log_GKGeneral)
          v9 = (id)GKOSLoggers(v4);
        v10 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v11 = v10;
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager dictionaryFromTaskDescription:](GKNetworkRequestManager, "dictionaryFromTaskDescription:", v8));
          *(_DWORD *)buf = 138412290;
          v55 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GKNetworkRequestManager setupSessionsAsync task: %@", buf, 0xCu);

        }
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager networkRequestFromNsurlTask:](GKNetworkRequestManager, "networkRequestFromNsurlTask:", v8));
        v14 = v13;
        if (v13)
        {
          objc_msgSend(v13, "setCurrentlyRunning:", 1);
          v15 = *(void **)(v1 + 40);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "taskInfo"));
          objc_msgSend(v15, "addNetworkRequest:description:clientProxy:", v14, v16, 0);

          if (v3)
          {
            v18 = objc_msgSend((id)objc_opt_class(v14, v17), "bagKey");
            v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v19));
            if (v20)
            {
              v21 = v20;
              v22 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithInt:", objc_msgSend(v20, "intValue") + 1);

              objc_msgSend(v2, "setObject:forKeyedSubscript:", v22, v19);
              v1 = v41;
            }
            else
            {
              objc_msgSend(v2, "setObject:forKeyedSubscript:", &off_1002DB730, v19);
            }

          }
        }
        else
        {
          if (!os_log_GKGeneral)
            v23 = (id)GKOSLoggers(0);
          v24 = os_log_GKDaemon;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "GKNetworkRequestManager got an invalid request, skipping", buf, 2u);
          }
          objc_msgSend(v8, "cancel");
        }

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
      v5 = v4;
    }
    while (v4);
  }

  if (v3)
  {
    v25 = objc_alloc_init((Class)NSString);
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allKeys"));
    v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
    if (v27)
    {
      v28 = v27;
      v29 = *(_QWORD *)v44;
      do
      {
        v30 = 0;
        v31 = v25;
        do
        {
          if (*(_QWORD *)v44 != v29)
            objc_enumerationMutation(v26);
          v32 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v30);
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v32));
          v25 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ %@:%@"), v31, v32, v33));

          v30 = (char *)v30 + 1;
          v31 = v25;
        }
        while (v28 != v30);
        v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
      }
      while (v28);
    }

    v51[0] = CFSTR("concurrentCount");
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v40));
    v51[1] = CFSTR("concurrentBreakDown");
    v52[0] = v34;
    v52[1] = v25;
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v52, v51, 2));

    if (!os_log_GKGeneral)
      v37 = (id)GKOSLoggers(v36);
    v38 = os_log_GKDaemon;
    v1 = v41;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v55 = v35;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "GKNetworkRequestManager sending event %@", buf, 0xCu);
    }
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
    objc_msgSend(v39, "reportEvent:type:payload:", GKReporterDomainNetworkRequests, GKNetworkRequestCount, v35);

    objc_msgSend(*(id *)(v41 + 40), "setReportedExessiveRequests:", 1);
  }
  objc_msgSend(*(id *)(v1 + 40), "setCurrentState:", 2);

}

void sub_1000BE640(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_1002DC668));
  v2 = (void *)qword_100317EE8;
  qword_100317EE8 = v1;

}

void sub_1000BE6D8(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_1002DC680));
  v2 = (void *)qword_100317EF8;
  qword_100317EF8 = v1;

}

void sub_1000BE98C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  uint64_t v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  __CFString *v28;
  id v29;
  _QWORD v30[4];
  id v31;
  id v32;
  __CFString *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  unsigned __int8 v40;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = +[GKNetworkRequestManager useJSONForBagKey:](GKNetworkRequestManager, "useJSONForBagKey:", *(_QWORD *)(a1 + 40));
    v3 = *(_QWORD *)(a1 + 32);
    if (v2)
      v4 = objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v3, 0, 0));
    else
      v4 = objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v3, 100, 0, 0));
    v5 = (void *)v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "pushToken"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "storeBag"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "APNSRequired"));
  v10 = objc_msgSend(v9, "containsObject:", *(_QWORD *)(a1 + 40));

  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "authenticationToken"));
  v12 = (void *)v11;
  v13 = &stru_1002CE2A8;
  if (v11)
    v13 = (__CFString *)v11;
  v14 = v13;

  if (!-[__CFString length](v14, "length"))
  {
    if (!os_log_GKGeneral)
      v15 = (id)GKOSLoggers(0);
    v16 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000C728C(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  v24 = *(_QWORD *)(a1 + 40);
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "stateQueue"));
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_1000BEC14;
  v30[3] = &unk_1002C1798;
  v31 = v8;
  v32 = *(id *)(a1 + 48);
  v33 = v14;
  v34 = v7;
  v35 = *(id *)(a1 + 64);
  v36 = v5;
  v40 = v10;
  v37 = *(id *)(a1 + 72);
  v38 = *(id *)(a1 + 40);
  v39 = *(id *)(a1 + 80);
  v26 = v5;
  v27 = v7;
  v28 = v14;
  v29 = v8;
  objc_msgSend(v29, "getURLForKey:queue:handler:", v24, v25, v30);

}

void sub_1000BEC14(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v3 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerInternal"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerID"));
  BYTE1(v10) = *(_BYTE *)(a1 + 104);
  LOBYTE(v10) = 0;
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "requestWithURL:playerID:authToken:pushToken:client:postData:includeUDID:includeAPNS:sapSession:", v5, v7, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v10, *(_QWORD *)(a1 + 80)));

  if (+[GKNetworkRequestManager useJSONForBagKey:](GKNetworkRequestManager, "useJSONForBagKey:", *(_QWORD *)(a1 + 88)))
  {
    objc_msgSend(v11, "setValue:forHTTPHeaderField:", CFSTR("application/json"), CFSTR("content-type"));
    objc_msgSend(v11, "setValue:forHTTPHeaderField:", CFSTR("application/json"), CFSTR("Accept"));
  }
  objc_msgSend(v11, "setCachePolicy:", 4);
  objc_msgSend(v11, "setValue:forHTTPHeaderField:", CFSTR("ra,fp"), CFSTR("x-gk-client-capabilities"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "originalBundleIdentifier"));

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "originalBundleIdentifier"));
    objc_msgSend(v11, "setValue:forHTTPHeaderField:", v9, CFSTR("x-gk-host-bundle-id"));

  }
  if (+[GKNetworkRequestManager entityIsReleaseStateAwareForBagKey:](GKNetworkRequestManager, "entityIsReleaseStateAwareForBagKey:", *(_QWORD *)(a1 + 88))&& objc_msgSend(*(id *)(a1 + 64), "isDevSigned"))
  {
    objc_msgSend(v11, "setValue:forHTTPHeaderField:", CFSTR("prerelease"), CFSTR("x-gk-release-state"));
  }
  +[GKStoreBag addAppOriginHeadersToRequest:clientProxy:](GKStoreBag, "addAppOriginHeadersToRequest:clientProxy:", v11, *(_QWORD *)(a1 + 64));
  (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();

}

void sub_1000BEEF8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "handlerQueue"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000BEFA8;
    v5[3] = &unk_1002BB450;
    v7 = *(id *)(a1 + 40);
    v6 = v3;
    dispatch_async(v4, v5);

  }
}

uint64_t sub_1000BEFA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1000BEFB8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  unsigned int v26;
  __int16 v27;
  void *v28;

  objc_msgSend(*(id *)(a1 + 32), "getFairPlaySession:", 0);
  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 40), v2), "bagKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "postBody"));
  if (!objc_msgSend(*(id *)(a1 + 32), "beforeFirstUnlock"))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "storeBag"));
    v13 = *(_QWORD *)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1000BF210;
    v17[3] = &unk_1002C17E8;
    v24 = *(id *)(a1 + 64);
    v18 = v12;
    v14 = v4;
    v15 = *(_QWORD *)(a1 + 32);
    v19 = v14;
    v20 = v15;
    v21 = v5;
    v22 = *(id *)(a1 + 48);
    v23 = *(id *)(a1 + 40);
    v16 = v12;
    objc_msgSend(v16, "verifyEligibilityForBagKey:replyQueue:client:completion:", v14, 0, v13, v17);

LABEL_9:
    goto LABEL_10;
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v6 = objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 31, 0));
    v7 = (void *)v6;
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v10 = *(void **)(a1 + 32);
      v11 = v9;
      *(_DWORD *)buf = 67109378;
      v26 = objc_msgSend(v10, "beforeFirstUnlock");
      v27 = 2112;
      v28 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GKNetworkRequestManager cannot send due to not being initialized beforeFirstUnlock: %d , error: %@", buf, 0x12u);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    goto LABEL_9;
  }
LABEL_10:

}

void sub_1000BF210(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  unsigned __int8 v24;
  uint8_t buf[4];
  void *v26;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v7 = v6;
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedDescription"));
      *(_DWORD *)buf = 138412290;
      v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKNetworkRequestManager ignoring request to write to network as the request isn't eligible: %@", buf, 0xCu);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "signatureRequired"));
      v11 = objc_msgSend(v10, "containsObject:", *(_QWORD *)(a1 + 40));

    }
    else
    {
      v11 = 0;
    }
    v13 = *(_QWORD *)(a1 + 40);
    v12 = *(void **)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000BF3FC;
    v18[3] = &unk_1002C17C0;
    v24 = v11;
    v19 = *(id *)(a1 + 72);
    v16 = *(id *)(a1 + 56);
    v17 = *(_QWORD *)(a1 + 48);
    v20 = v16;
    v21 = v17;
    v22 = *(id *)(a1 + 64);
    v23 = *(id *)(a1 + 80);
    objc_msgSend(v12, "assembleRequest:bagKey:clientProxy:sapSession:handler:", v14, v13, v15, 0, v18);

  }
}

void sub_1000BF3FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void *v19;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)(a1 + 72))
    objc_msgSend(v3, "setValue:forHTTPHeaderField:", CFSTR("1"), CFSTR("x-gk-sap-signature"));
  objc_msgSend(*(id *)(a1 + 32), "setNsurlRequest:", v4);
  v5 = objc_msgSend(*(id *)(a1 + 32), "setCurrentlyRunning:", 0);
  if (!os_log_GKGeneral)
    v6 = (id)GKOSLoggers(v5);
  v7 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = v7;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "loggableHeaders"));
    v14 = 138412802;
    v15 = v4;
    v16 = 2112;
    v17 = v8;
    v18 = 2112;
    v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GKNetworkRequestManager sending background %@ postBody:%@ {\nheaders: %@}", (uint8_t *)&v14, 0x20u);

  }
  v11 = *(void **)(a1 + 48);
  v12 = *(void **)(a1 + 32);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "taskInfo"));
  objc_msgSend(v11, "addNetworkRequest:description:clientProxy:", v12, v13, *(_QWORD *)(a1 + 56));

  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_1000BF950(id *a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "allHeaderFields"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("Retry-After")));

  if (v9)
  {
    v4 = a1[5];
    v5 = objc_msgSend((id)objc_opt_class(a1[6], v3), "bagKey");
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    objc_msgSend(v9, "doubleValue");
    objc_msgSend(v4, "setWaitPeriod:waitPeriod:", v6);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "bundleID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:pid:createIfNecessary:](GKClientProxy, "clientForBundleID:pid:createIfNecessary:", v7, 0, 1));

  objc_msgSend(a1[5], "writeToNetwork:clientProxy:handler:", a1[6], v8, 0);
}

id sub_1000BFD6C(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (id)(*(uint64_t (**)(double))(*(_QWORD *)(a1 + 80) + 16))(0.0);
  else
    return _objc_msgSend(*(id *)(a1 + 32), "_issueRequestForPlayer:bagKey:clientProxy:locale:playerCredential:handler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
}

void sub_1000BFEE0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "canSafelyIssueRequest:", *(_QWORD *)(a1 + 40)));
  if (v4)
  {
    (*(void (**)(double))(*(_QWORD *)(a1 + 80) + 16))(0.0);
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "storeBag"));
    v7 = v6;
    v18 = v5;
    if (v6
      && (v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "signatureRequired")),
          v9 = objc_msgSend(v8, "containsObject:", *(_QWORD *)(a1 + 40)),
          v8,
          v9))
    {
      v10 = v3;
    }
    else
    {
      v10 = 0;
    }
    v11 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000C0090;
    v19[3] = &unk_1002C18A0;
    v25 = *(id *)(a1 + 80);
    v16 = *(id *)(a1 + 72);
    v17 = *(_QWORD *)(a1 + 32);
    v20 = v16;
    v21 = v17;
    v22 = *(id *)(a1 + 56);
    v23 = *(id *)(a1 + 40);
    v24 = *(id *)(a1 + 48);
    objc_msgSend(v11, "assembleRequestForPlayer:bagKey:clientProxy:sapSession:playerCredential:handler:", v13, v12, v14, v10, v15, v19);

  }
}

void sub_1000C0090(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[5];
  id v27;
  id v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  NSErrorUserInfoKey v39;
  const __CFString *v40;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      if (!os_log_GKGeneral)
        v5 = (id)GKOSLoggers(v3);
      v6 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v7 = *(void **)(a1 + 32);
        v8 = v6;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localeIdentifier"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "URL"));
        *(_DWORD *)buf = 138412546;
        v30 = v9;
        v31 = 2112;
        v32 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Overriding locale to %@ for request to %@", buf, 0x16u);

      }
      objc_msgSend(v4, "setLocale:isOverridingUsersPreferredLanguage:", *(_QWORD *)(a1 + 32), 1);
    }
    v11 = objc_alloc((Class)NSURLSessionConfiguration);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "inProcessConfig"));
    v13 = objc_msgSend(v11, "_initWithConfiguration:", v12);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "originalBundleIdentifier"));
    objc_msgSend(v13, "set_sourceApplicationBundleIdentifier:", v14);

    +[GKStoreBag addAuthHeadersToRequest:](GKStoreBag, "addAuthHeadersToRequest:", v4);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "inProcessSession"));
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1000C040C;
    v26[3] = &unk_1002C1878;
    v26[4] = *(_QWORD *)(a1 + 40);
    v27 = *(id *)(a1 + 56);
    v28 = *(id *)(a1 + 72);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "dataTaskWithRequest:completionHandler:", v4, v26));

    if (!os_log_GKGeneral)
      v18 = (id)GKOSLoggers(v17);
    v19 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v20 = v19;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "URL"));
      v22 = *(_QWORD *)(a1 + 64);
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "loggableHeaders"));
      *(_DWORD *)buf = 138413314;
      v30 = v16;
      v31 = 2112;
      v32 = v21;
      v33 = 2112;
      v34 = v22;
      v35 = 2112;
      v36 = v4;
      v37 = 2112;
      v38 = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "GKNetworkRequestManager sending in process task: %@ \nREQUEST:%@ postBody:%@ request: %@ {\nheaders: %@}", buf, 0x34u);

    }
    objc_msgSend(v16, "_adoptEffectiveConfiguration:", v13);
    objc_msgSend(v16, "resume");

  }
  else
  {
    v24 = *(_QWORD *)(a1 + 72);
    v39 = NSLocalizedFailureReasonErrorKey;
    v40 = CFSTR("Could not create network task");
    v13 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, v13));
    (*(void (**)(uint64_t, _QWORD, void *, double))(v24 + 16))(v24, 0, v25, 0.0);

  }
}

void sub_1000C040C(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  void *v29;
  void *v30;
  unsigned int v31;
  void *v32;
  void *v33;
  void *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;
  NSErrorUserInfoKey v45;
  const __CFString *v46;
  NSErrorUserInfoKey v47;
  const __CFString *v48;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v8;
  objc_msgSend(v10, "_maxAge");
  v12 = v11;
  if (objc_msgSend(v10, "statusCode") == (id)520)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allHeaderFields"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", CFSTR("Retry-After")));

    if (v14)
    {
      v15 = (void *)a1[4];
      v16 = a1[5];
      objc_msgSend(v14, "doubleValue");
      objc_msgSend(v15, "setWaitPeriod:waitPeriod:", v16);
    }
    v47 = NSLocalizedFailureReasonErrorKey;
    v48 = CFSTR("Server returned 520 with a wait period");
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, v17));

    goto LABEL_5;
  }
  if (v9)
  {
    v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "serializableError"));
    v18 = v19;
    goto LABEL_8;
  }
  if (!v7)
  {
    v45 = NSLocalizedFailureReasonErrorKey;
    v46 = CFSTR("Empty server response");
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, v14));
LABEL_5:

LABEL_8:
    v20 = 0;
    goto LABEL_9;
  }
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allHeaderFields"));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKeyedSubscript:", CFSTR("Content-Type")));
  v31 = objc_msgSend(v30, "isEqualToString:", CFSTR("application/json"));

  if (v31)
  {
    v34 = 0;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary _gkDictionaryWithServerDataJson:error:](NSDictionary, "_gkDictionaryWithServerDataJson:error:", v7, &v34));
    v32 = v34;
  }
  else
  {
    v33 = 0;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary _gkDictionaryWithServerData:error:](NSDictionary, "_gkDictionaryWithServerData:error:", v7, &v33));
    v32 = v33;
  }
  v19 = v32;
  v18 = v19;
LABEL_9:
  if (!os_log_GKGeneral)
    v21 = (id)GKOSLoggers(v19);
  v22 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v23 = v22;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "URL"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v10, "statusCode")));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allHeaderFields"));
    *(_DWORD *)buf = 138413314;
    v36 = v24;
    v37 = 2112;
    v38 = v25;
    v39 = 2112;
    v40 = v9;
    v41 = 2112;
    v42 = v26;
    v43 = 2112;
    v44 = v20;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "GKNetworkRequestManager in process task completed:%@ code:%@ error: %@ headers: %@ plist: %@", buf, 0x34u);

  }
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "underlyingErrors"));
  v28 = objc_msgSend(v27, "_gkContainsObjectPassingTest:", &stru_1002C1850);

  if (v28)
  {

    v18 = 0;
  }
  (*(void (**)(double))(a1[6] + 16))(v12);

}

BOOL sub_1000C07C0(id a1, NSError *a2)
{
  NSError *v2;
  BOOL v3;

  v2 = a2;
  v3 = (id)-[NSError code](v2, "code") == (id)5044 || (id)-[NSError code](v2, "code") == (id)5043;

  return v3;
}

void sub_1000C0CE8(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateQueue"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000C0D70;
  v5[3] = &unk_1002BB658;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  dispatch_async(v2, v5);

}

void sub_1000C0D70(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t buf[4];
  void *v41;
  _BYTE v42[128];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKNetworkRequestManager issuing pending requests", buf, 2u);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("lastPathComponent CONTAINS %@"), *(_QWORD *)(a1 + 32)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pendingLocation"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v5));

  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v6, &__NSArray0__struct, 0, 0));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "filteredArrayUsingPredicate:", v4));

    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v11 = v10;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
    if (v12)
    {
      v13 = v12;
      v34 = v6;
      v35 = v4;
      v14 = 0;
      v15 = *(_QWORD *)v37;
      do
      {
        v16 = 0;
        v17 = v14;
        do
        {
          if (*(_QWORD *)v37 != v15)
            objc_enumerationMutation(v11);
          v18 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)v16);
          if (!os_log_GKGeneral)
            v19 = (id)GKOSLoggers(v12);
          v20 = os_log_GKDaemon;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v41 = v18;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Issueing: %@", buf, 0xCu);
          }
          v21 = *(void **)(a1 + 40);
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "lastPathComponent"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "taskFromIdentifier:", v22));

          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "bundleID"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:pid:createIfNecessary:](GKClientProxy, "clientForBundleID:pid:createIfNecessary:", v24, 0, 1));

          objc_msgSend(v23, "setIssueRequests:", 1);
          objc_msgSend(*(id *)(a1 + 40), "writeToNetwork:clientProxy:handler:", v23, v14, 0);

          v16 = (char *)v16 + 1;
          v17 = v14;
        }
        while (v13 != v16);
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
        v13 = v12;
      }
      while (v12);

      v6 = v34;
      v4 = v35;
    }

  }
  else
  {
    if (!os_log_GKGeneral)
      v25 = (id)GKOSLoggers(v7);
    v26 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000C72C0(v26, v27, v28, v29, v30, v31, v32, v33);
  }

}

id networkRequestIdentifier(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bundleID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "playerID"));
  v5 = (void *)objc_opt_class(v1, v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bagKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@+%@+%@"), v2, v3, v6));

  return v7;
}

void updateCoalescingState(int a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "requestIdentifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "alreadyCoalescingNetworkRequests"));

  if (a1)
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v8, v6);
  else
    objc_msgSend(v7, "removeObjectForKey:", v6);

}

BOOL alreadyCoalescing(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "alreadyCoalescingNetworkRequests"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v3));

  return v5 != 0;
}

void handleStandardRequest(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  id v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  unsigned __int8 v29;
  id v30;
  id v31;
  NSObject *v32;
  id v33;
  id v34;
  void *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  id v39;
  NSObject *v40;
  void *v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  id v48;
  void *v49;
  NSObject *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  NSObject *v66;
  id v67;
  id v68;
  void *v69;
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  id v73;
  __int16 v74;
  void *v75;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "requestIdentifier"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentTasks"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v11));

  v15 = objc_msgSend(v12, "managerReady");
  v16 = objc_msgSend(v7, "currentlyRunning");
  if (!(_DWORD)v16)
  {
    v69 = v10;
    if ((objc_opt_respondsToSelector(v7, "mergeRequestData:") & 1) != 0)
    {
      v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "contentsOfPendingStore:", v11));
      v22 = (void *)v21;
      if (v21)
      {
        if (!os_log_GKGeneral)
          v23 = (id)GKOSLoggers(v21);
        v24 = os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v71 = v11;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "GKNetworkRequestManager adding in pending data: %@", buf, 0xCu);
        }
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "taskFromIdentifier:", v11));
        objc_msgSend(v7, "mergeRequestData:", v25);

      }
    }
    v26 = objc_msgSend((id)objc_opt_class(v7, v20), "bagKey");
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "canSafelyIssueRequest:", v27));

    if (v19)
      v29 = 0;
    else
      v29 = v15;
    if ((v29 & 1) == 0)
    {
      if (!os_log_GKGeneral)
        v34 = (id)GKOSLoggers(v28);
      v35 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v36 = v35;
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "nsurlTask"));
        *(_DWORD *)buf = 138412802;
        v71 = v11;
        v72 = 2112;
        v73 = v37;
        v74 = 2112;
        v75 = v19;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "GKNetworkRequestManager cannot issue request, writing to pending: %@ : %@ %@", buf, 0x20u);

      }
      v33 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "taskInfo"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "requestIdentifier"));
      objc_msgSend(v12, "writeToPendingStore:fileName:", v33, v38);

      goto LABEL_54;
    }
    v68 = v9;
    if (v14)
    {
      v30 = objc_msgSend(v7, "isDuplicateRequest:", v14);
      if ((v30 & 1) != 0)
      {
        if (!os_log_GKGeneral)
          v31 = (id)GKOSLoggers(v30);
        v32 = os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v71 = v11;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "GKNetworkRequestManager duplicate request skipping: %@", buf, 0xCu);
        }
        v33 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "requestIdentifier"));
        objc_msgSend(v12, "cleanUpPendingStore:", v33);
LABEL_54:

        v10 = v69;
        goto LABEL_55;
      }
      if (!os_log_GKGeneral)
        v39 = (id)GKOSLoggers(v30);
      v40 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v71 = v11;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "GKNetworkRequestManager non duplicate value for same request, reissuing: %@", buf, 0xCu);
      }
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "nsurlTask"));
      objc_msgSend(v41, "cancel");

      v42 = objc_opt_respondsToSelector(v7, "mergeRequestData:");
      if ((v42 & 1) != 0)
      {
        if (!os_log_GKGeneral)
          v43 = (id)GKOSLoggers(v42);
        v44 = os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v71 = v11;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "GKNetworkRequestManager non duplicate requires merge of data: %@", buf, 0xCu);
        }
        objc_msgSend(v7, "mergeRequestData:", v14);
      }
    }
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentTasks"));
    objc_msgSend(v45, "setObject:forKeyedSubscript:", v7, v11);

    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "requestIdentifier"));
    objc_msgSend(v12, "cleanUpPendingStore:", v46);

    if (!os_log_GKGeneral)
      v48 = (id)GKOSLoggers(v47);
    v49 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v50 = v49;
      v52 = (void *)objc_opt_class(v7, v51);
      v67 = v52;
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "nsurlRequest"));
      v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "allHTTPHeaderFields"));
      *(_DWORD *)buf = 138412802;
      v71 = v52;
      v72 = 2112;
      v73 = v7;
      v74 = 2112;
      v75 = v54;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "%@ issuing request: %@ headers: %@", buf, 0x20u);

    }
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "nsurlRequest"));
    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "taskInfo"));
    v57 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager taskWithRequest:description:session:](GKNetworkRequestManager, "taskWithRequest:description:session:", v55, v56, v68));
    objc_msgSend(v7, "setNsurlTask:", v57);

    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "nsurlTask"));
    if (v58)
    {
      v60 = objc_alloc((Class)NSURLSessionConfiguration);
      v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "backgroundConfig"));
      v33 = objc_msgSend(v60, "_initWithConfiguration:", v61);

      v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "originalBundleIdentifier"));
      objc_msgSend(v33, "set_sourceApplicationBundleIdentifier:", v62);

      v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "nsurlTask"));
      objc_msgSend(v63, "_adoptEffectiveConfiguration:", v33);

      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "nsurlTask"));
      objc_msgSend(v64, "resume");
    }
    else
    {
      if (!os_log_GKGeneral)
        v65 = (id)GKOSLoggers(v59);
      v66 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v71 = v11;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "GKNetworkRequestManager cannot issue request as it is nil, writing to pending: %@", buf, 0xCu);
      }
      v33 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "taskInfo"));
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "requestIdentifier"));
      objc_msgSend(v12, "writeToPendingStore:fileName:", v33, v64);
    }

    v9 = v68;
    goto LABEL_54;
  }
  if (v14)
  {
    if (!os_log_GKGeneral)
      v17 = (id)GKOSLoggers(v16);
    v18 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v71 = v11;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GKNetworkRequestManager possible duplicate tasks when syncing nsurlsession: %@", buf, 0xCu);
    }
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentTasks"));
  objc_msgSend(v19, "setObject:forKeyedSubscript:", v7, v11);
LABEL_55:

}

void handleCoalescingRequest(void *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  _BOOL4 v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  NSObject *v46;
  uint64_t v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  unsigned int v54;
  uint64_t v55;
  id v56;
  void *v57;
  NSObject *v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  int v65;
  id v66;
  id v67;
  id v68;
  void *v69;
  NSObject *v70;
  uint64_t v71;
  void *v72;
  id v73;
  id v74;
  void *v75;
  NSObject *v76;
  uint64_t v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  id v83;
  void *v84;
  NSObject *v85;
  uint64_t v86;
  void *v87;
  id v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  void *v94;
  id v95;
  void *v96;
  id v97;
  id v98;
  void *v99;
  _BOOL8 v100;
  NSObject *v101;
  uint64_t v102;
  void *v103;
  id v104;
  id v105;
  void *v106;
  NSObject *v107;
  uint64_t v108;
  void *v109;
  id v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  id v121;
  void *v122;
  NSObject *v123;
  uint64_t v124;
  void *v125;
  id v126;
  void *v127;
  id v128;
  void *v129;
  id v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  id v135;
  id v136;
  void *v137;
  id v138;
  NSObject *v139;
  uint64_t v140;
  void *v141;
  id v142;
  id v143;
  id v144;
  id v145;
  void *v146;
  NSObject *v147;
  uint64_t v148;
  void *v149;
  id v150;
  const char *v151;
  NSObject *v152;
  uint32_t v153;
  id v154;
  void *v155;
  NSObject *v156;
  void *v157;
  id v158;
  void *v159;
  NSObject *v160;
  uint64_t v161;
  void *v162;
  id v163;
  id v164;
  id v165;
  void *v166;
  id v167;
  id v168;
  NSObject *v169;
  uint64_t v170;
  void *v171;
  id v172;
  const char *v173;
  id v174;
  id v175;
  void *v176;
  uint64_t v177;
  char v178;
  id v179;
  NSObject *v180;
  uint64_t v181;
  void *v182;
  id v183;
  id v184;
  void *v185;
  id v186;
  id v187;
  NSObject *v188;
  uint64_t v189;
  void *v190;
  id v191;
  void *v192;
  void *v193;
  id v194;
  void *v195;
  id v196;
  void *v197;
  uint64_t v198;
  void *v199;
  void *v200;
  id v201;
  id v202;
  void *v203;
  void *v204;
  id v205;
  void *v206;
  id v207;
  id v208;
  NSObject *v209;
  uint64_t v210;
  void *v211;
  id v212;
  id v213;
  uint64_t v214;
  int64_t v215;
  id v216;
  id v217;
  dispatch_time_t v218;
  NSObject *v219;
  dispatch_time_t v220;
  id v221;
  void *v222;
  NSObject *v223;
  uint64_t v224;
  void *v225;
  id v226;
  id v227;
  void *v228;
  NSObject *v229;
  uint64_t v230;
  void *v231;
  id v232;
  id v233;
  void *v234;
  uint64_t v235;
  void *v236;
  id v237;
  void *v238;
  unsigned int v239;
  id v240;
  int v241;
  void *v242;
  unint64_t v243;
  void *v244;
  void *v245;
  void *v246;
  void *v248;
  _QWORD block[4];
  id v250;
  id v251;
  id v252;
  id v253;
  id v254;
  id v255;
  id v256;
  id v257;
  id v258;
  id v259;
  uint8_t buf[4];
  id v261;
  __int16 v262;
  unint64_t v263;
  __int16 v264;
  unint64_t v265;
  __int16 v266;
  _BYTE v267[14];
  __int16 v268;
  _BOOL4 v269;
  __int16 v270;
  id v271;
  __int16 v272;
  void *v273;

  v8 = a1;
  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bundleID"));

  if (v12)
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bundleID"));
  else
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bundleIdentifier"));
  v14 = (void *)v13;
  if (v13)
  {
    v240 = v11;
    v248 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
    v239 = objc_msgSend(v248, "managerReady");
    v15 = objc_alloc_init((Class)NSMutableDictionary);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "pendingRequests"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v14));

    v244 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "requestIdentifier"));
    v18 = v10;
    v19 = alreadyCoalescing(v9, v244);
    v20 = v17;
    v243 = (unint64_t)objc_msgSend(v17, "numberOfRequests");
    v245 = v18;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "currentTasks"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", v14));

    if (!os_log_GKGeneral)
      v24 = (id)GKOSLoggers(v23);
    v25 = (void *)os_log_GKDaemon;
    v27 = v9;
    v246 = v22;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v28 = v25;
      v30 = (void *)objc_opt_class(v8, v29);
      v31 = v30;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v8, "currentlyRunning")));
      *(_DWORD *)buf = 138414082;
      v261 = v30;
      v22 = v246;
      v262 = 2112;
      v263 = (unint64_t)v14;
      v264 = 2048;
      v265 = a4;
      v266 = 2048;
      *(_QWORD *)v267 = v243;
      *(_WORD *)&v267[8] = 1024;
      *(_DWORD *)&v267[10] = v239;
      v268 = 1024;
      v269 = v19;
      v270 = 2112;
      v271 = v8;
      v272 = 2112;
      v273 = v32;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%@ bundleID: %@ previousPending:%ld pending:%ld managerReady: %d clientProxyFlag:%d request:%@ currentlyRunning:%@", buf, 0x4Au);

      v9 = v27;
    }
    if (!v20)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v248, "contentsOfPendingStore:", v244));
      if (v34)
      {
        v35 = objc_alloc_init((Class)objc_opt_class(v8, v33));
        objc_msgSend(v35, "updateWithTaskInfo:", v34);
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v245, "pendingRequests"));
        v20 = v35;
        objc_msgSend(v36, "setObject:forKeyedSubscript:", v35, v14);

        if (!os_log_GKGeneral)
          v38 = (id)GKOSLoggers(v37);
        v39 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v40 = v39;
          v42 = (void *)objc_opt_class(v8, v41);
          *(_DWORD *)buf = 138412802;
          v261 = v42;
          v262 = 2112;
          v263 = (unint64_t)v14;
          v264 = 2112;
          v265 = (unint64_t)v20;
          v43 = v42;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "%@ bundleID: %@ using file system cache: %@", buf, 0x20u);

        }
      }
      else
      {
        v20 = 0;
      }

      v9 = v27;
    }
    v49 = objc_msgSend((id)objc_opt_class(v8, v26), "bagKey");
    v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
    v242 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v248, "canSafelyIssueRequest:", v50));

    v51 = objc_msgSend(v8, "currentlyRunning");
    if ((_DWORD)v51)
    {
      if (!v22)
      {
        v10 = v245;
        if (!os_log_GKGeneral)
          v74 = (id)GKOSLoggers(v51);
        v75 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v76 = v75;
          v78 = (void *)objc_opt_class(v8, v77);
          v79 = v78;
          v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nsurlTask"));
          v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "taskDescription"));
          *(_DWORD *)buf = 138413314;
          v261 = v78;
          v262 = 2048;
          v263 = a4;
          v264 = 2048;
          v265 = v243;
          v266 = 1024;
          *(_DWORD *)v267 = v239;
          *(_WORD *)&v267[4] = 2112;
          *(_QWORD *)&v267[6] = v81;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "%@ already running with no other current, update state: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

          v9 = v27;
          v10 = v245;
        }
        v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "currentTasks"));
        objc_msgSend(v82, "setObject:forKeyedSubscript:", v8, v14);

        goto LABEL_42;
      }
      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "requestData"));
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "requestData"));
      v54 = objc_msgSend(v52, "isEqualToDictionary:", v53);

      v10 = v245;
      if (v54)
      {
        if (!os_log_GKGeneral)
          v56 = (id)GKOSLoggers(v55);
        v57 = (void *)os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v58 = v57;
          v60 = (void *)objc_opt_class(v8, v59);
          v61 = v60;
          v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nsurlTask"));
          v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "taskDescription"));
          *(_DWORD *)buf = 138413314;
          v261 = v60;
          v262 = 2048;
          v263 = a4;
          v264 = 2048;
          v265 = v243;
          v266 = 1024;
          *(_DWORD *)v267 = v239;
          *(_WORD *)&v267[4] = 2112;
          *(_QWORD *)&v267[6] = v63;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "%@ already running this task, doing nothing: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

          v9 = v27;
          v10 = v245;
        }
LABEL_42:
        v11 = v240;
        v67 = v20;
LABEL_132:

        goto LABEL_133;
      }
      if (!os_log_GKGeneral)
        v83 = (id)GKOSLoggers(v55);
      v84 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v85 = v84;
        v87 = (void *)objc_opt_class(v8, v86);
        v88 = v87;
        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nsurlTask"));
        v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "taskDescription"));
        *(_DWORD *)buf = 138413314;
        v261 = v87;
        v262 = 2048;
        v263 = a4;
        v264 = 2048;
        v265 = v243;
        v266 = 1024;
        *(_DWORD *)v267 = v239;
        *(_WORD *)&v267[4] = 2112;
        *(_QWORD *)&v267[6] = v90;
        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "%@ currently running two tasks, cancel and issue again: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

        v9 = v27;
      }
      v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nsurlTask"));
      objc_msgSend(v91, "cancel");

      v11 = v240;
      v237 = v20;
      goto LABEL_48;
    }
    v64 = objc_msgSend(v8, "coalescingAgent");
    if ((_DWORD)v64 && v243 != a4)
    {
      v65 = 0;
      LODWORD(v66) = 1;
      v11 = v240;
      v67 = v20;
      goto LABEL_100;
    }
    v11 = v240;
    if (v242)
    {
      v67 = v20;
      if (!os_log_GKGeneral)
        v68 = (id)GKOSLoggers(v64);
      v69 = (void *)os_log_GKDaemon;
      v65 = 1;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v70 = v69;
        v72 = (void *)objc_opt_class(v8, v71);
        *(_DWORD *)buf = 138412290;
        v261 = v72;
        v73 = v72;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_INFO, "%@ do not retry wait period exists, adding to pending", buf, 0xCu);

        v67 = v20;
      }
      LODWORD(v66) = 0;
LABEL_100:
      v174 = objc_msgSend(v8, "coalescingAgent", v237);
      if ((_DWORD)v174)
      {
        if (!os_log_GKGeneral)
          v175 = (id)GKOSLoggers(v174);
        v176 = (void *)os_log_GKDaemon;
        v177 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
        v10 = v245;
        if ((_DWORD)v177)
        {
          v178 = (char)v66;
          v66 = v15;
          v179 = v67;
          v180 = v176;
          v182 = (void *)objc_opt_class(v8, v181);
          *(_DWORD *)buf = 138412546;
          v261 = v182;
          v262 = 2112;
          v263 = (unint64_t)v8;
          v183 = v182;
          _os_log_impl((void *)&_mh_execute_header, v180, OS_LOG_TYPE_INFO, "%@ we have already added in the coalescingAgent's data, do nothing: %@", buf, 0x16u);

          v67 = v179;
          v15 = v66;
          LOBYTE(v66) = v178;
        }
        if ((v66 & 1) == 0)
          goto LABEL_132;
      }
      else
      {
        if (!v65)
        {
          if (!os_log_GKGeneral)
            v196 = (id)GKOSLoggers(v174);
          v197 = (void *)os_log_GKDaemon;
          v10 = v245;
          if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
            goto LABEL_132;
          v143 = v15;
          v144 = v67;
          v147 = v197;
          v199 = (void *)objc_opt_class(v8, v198);
          *(_DWORD *)buf = 138413314;
          v261 = v199;
          v262 = 2048;
          v263 = a4;
          v264 = 2048;
          v265 = v243;
          v266 = 1024;
          *(_DWORD *)v267 = v239;
          *(_WORD *)&v267[4] = 2112;
          *(_QWORD *)&v267[6] = v8;
          v150 = v199;
          v151 = "%@ Issuance failure: previousPending:%ld pending:%ld managerReady: %d request:%@";
          v152 = v147;
          v153 = 48;
          goto LABEL_118;
        }
        if (!os_log_GKGeneral)
          v184 = (id)GKOSLoggers(v174);
        v241 = (int)v66;
        v185 = (void *)os_log_GKDaemon;
        v10 = v245;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v186 = v15;
          v187 = v67;
          v188 = v185;
          v190 = (void *)objc_opt_class(v8, v189);
          *(_DWORD *)buf = 138412546;
          v261 = v190;
          v262 = 2112;
          v263 = (unint64_t)v8;
          v191 = v190;
          _os_log_impl((void *)&_mh_execute_header, v188, OS_LOG_TYPE_INFO, "%@ adding request to pending:%@", buf, 0x16u);

          v67 = v187;
          v15 = v186;
        }
        if (v67)
        {
          v256 = v15;
          v192 = v67;
          v193 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "requestData"));
          objc_msgSend(v8, "addInRequestData:additional:", &v256, v193);
          v194 = v256;

          v255 = v194;
          v195 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v192, "requestData"));
          objc_msgSend(v8, "addInRequestData:additional:", &v255, v195);
          v15 = v255;

          v67 = v192;
          objc_msgSend(v192, "setRequestData:", v15);
        }
        else
        {
          v200 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v245, "pendingRequests"));
          objc_msgSend(v200, "setObject:forKeyedSubscript:", v8, v14);

          v67 = v8;
        }
        v177 = (uint64_t)objc_msgSend(v67, "numberOfRequests");
        if (v177 < 1)
        {
          if (!v241)
            goto LABEL_132;
        }
        else
        {
          v201 = v15;
          v202 = v67;
          v203 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "taskInfo"));
          v204 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "requestIdentifier"));
          objc_msgSend(v248, "writeToPendingStore:fileName:", v203, v204);

          v67 = v202;
          v15 = v201;
          if ((v241 & 1) == 0)
            goto LABEL_132;
        }
      }
      if (!os_log_GKGeneral)
        v205 = (id)GKOSLoggers(v177);
      v206 = (void *)os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v207 = v15;
        v208 = v67;
        v209 = v206;
        v211 = (void *)objc_opt_class(v8, v210);
        *(_DWORD *)buf = 138413314;
        v261 = v211;
        v262 = 2048;
        v263 = a4;
        v264 = 2048;
        v265 = v243;
        v266 = 1024;
        *(_DWORD *)v267 = v239;
        *(_WORD *)&v267[4] = 2112;
        *(_QWORD *)&v267[6] = v8;
        v212 = v211;
        _os_log_impl((void *)&_mh_execute_header, v209, OS_LOG_TYPE_INFO, "%@ Dispatching block: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

        v67 = v208;
        v15 = v207;
      }
      objc_msgSend(v8, "setCoalescingAgent:", 1);
      updateCoalescingState(1, v9, v8);
      v213 = objc_msgSend(v67, "numberOfRequests");
      v215 = 1000000000 * (_QWORD)objc_msgSend((id)objc_opt_class(v8, v214), "coalescingDelay");
      if (v215)
      {
        v216 = v15;
        v217 = v67;
        v218 = dispatch_time(0, v215);
        v219 = objc_claimAutoreleasedReturnValue(objc_msgSend(v248, "stateQueue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000C363C;
        block[3] = &unk_1002C1918;
        v250 = v8;
        v251 = v10;
        v252 = v11;
        v253 = v9;
        v254 = v213;
        v220 = v218;
        v67 = v217;
        v15 = v216;
        dispatch_after(v220, v219, block);

      }
      else
      {
        objc_msgSend(v8, "handleNetworkRequest:session:clientProxy:previousKnownPendingAmount:", v10, v11, v9, v213);
      }
      goto LABEL_132;
    }
    v67 = v20;
    if ((v239 & 1) != 0)
    {
      v135 = objc_msgSend(v8, "issueRequests");
      if ((_DWORD)v135)
      {
        if (v19)
        {
          if (!os_log_GKGeneral)
            v136 = (id)GKOSLoggers(v135);
          v137 = (void *)os_log_GKDaemon;
          v65 = 1;
          if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
            goto LABEL_73;
          v138 = v15;
          v139 = v137;
          v141 = (void *)objc_opt_class(v8, v140);
          *(_DWORD *)buf = 138413058;
          v261 = v141;
          v262 = 2048;
          v263 = a4;
          v264 = 2048;
          v265 = v243;
          v266 = 1024;
          *(_DWORD *)v267 = 1;
          v142 = v141;
          _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_INFO, "%@ issue pending request while coalescing add to pending, update state: previousPending:%ld pending:%ld managerReady: %d", buf, 0x26u);

          v67 = v20;
LABEL_72:
          v15 = v138;
LABEL_73:
          LODWORD(v66) = 0;
          goto LABEL_100;
        }
        if (!os_log_GKGeneral)
          v221 = (id)GKOSLoggers(v135);
        v222 = (void *)os_log_GKDaemon;
        v237 = v20;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v223 = v222;
          v225 = (void *)objc_opt_class(v8, v224);
          *(_DWORD *)buf = 138413058;
          v261 = v225;
          v262 = 2048;
          v263 = a4;
          v264 = 2048;
          v265 = v243;
          v266 = 1024;
          *(_DWORD *)v267 = 1;
          v226 = v225;
          _os_log_impl((void *)&_mh_execute_header, v223, OS_LOG_TYPE_INFO, "%@ issue pending request while not coalescing issue request, update state: previousPending:%ld pending:%ld managerReady: %d", buf, 0x26u);

        }
        goto LABEL_48;
      }
      if (a4 | v243)
      {
        if (v243)
        {
          v237 = v20;
          if (v243 != a4)
          {
            v138 = v15;
            if (a4)
            {
              v67 = v20;
              if (!v19)
              {
                if (!os_log_GKGeneral)
                  v227 = (id)GKOSLoggers(v135);
                v228 = (void *)os_log_GKDaemon;
                if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
                {
                  v229 = v228;
                  v231 = (void *)objc_opt_class(v8, v230);
                  *(_DWORD *)buf = 138413314;
                  v261 = v231;
                  v262 = 2048;
                  v263 = a4;
                  v264 = 2048;
                  v265 = v243;
                  v266 = 1024;
                  *(_DWORD *)v267 = 1;
                  *(_WORD *)&v267[4] = 2112;
                  *(_QWORD *)&v267[6] = v8;
                  v232 = v231;
                  _os_log_impl((void *)&_mh_execute_header, v229, OS_LOG_TYPE_INFO, "%@ dispatch logic failure: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

                  v67 = v20;
                }
              }
              v65 = 0;
            }
            else
            {
              v67 = v20;
              if (v19 && !objc_msgSend(v8, "coalescingAgent"))
              {
                v65 = 1;
                goto LABEL_72;
              }
              v65 = 1;
            }
            LODWORD(v66) = 1;
            goto LABEL_100;
          }
LABEL_48:
          v259 = v15;
          v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v246, "requestData", v237));
          objc_msgSend(v8, "addInRequestData:additional:", &v259, v92);
          v93 = v259;

          v258 = v93;
          v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v238, "requestData"));
          objc_msgSend(v8, "addInRequestData:additional:", &v258, v94);
          v95 = v258;

          v257 = v95;
          v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "requestData"));
          objc_msgSend(v8, "addInRequestData:additional:", &v257, v96);
          v15 = v257;

          v97 = objc_msgSend(v8, "numberOfRequests");
          v10 = v245;
          if (v97)
          {
            if (!os_log_GKGeneral)
              v98 = (id)GKOSLoggers(v97);
            v99 = (void *)os_log_GKDaemon;
            v100 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
            if (v100)
            {
              v101 = v99;
              v103 = (void *)objc_opt_class(v8, v102);
              *(_DWORD *)buf = 138412546;
              v261 = v103;
              v262 = 2112;
              v263 = (unint64_t)v15;
              v104 = v103;
              _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_INFO, "%@ attempting to issue request:%@", buf, 0x16u);

            }
            if (v246)
            {
              if (!os_log_GKGeneral)
                v105 = (id)GKOSLoggers(v100);
              v106 = (void *)os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                v107 = v106;
                v109 = (void *)objc_opt_class(v8, v108);
                *(_DWORD *)buf = 138412546;
                v261 = v109;
                v262 = 2112;
                v263 = (unint64_t)v8;
                v110 = v109;
                _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_INFO, "%@ canceling previous request as we are going to replace it with new data: %@", buf, 0x16u);

              }
              v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v246, "nsurlTask"));
              objc_msgSend(v111, "cancel");

            }
            v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v245, "pendingRequests"));
            objc_msgSend(v112, "removeObjectForKey:", v14);

            objc_msgSend(v8, "setRequestData:", v15);
            v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nsurlRequest"));
            v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "postBody"));
            _updateRequestBody(v113, (uint64_t)v114);

            v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v245, "currentTasks"));
            objc_msgSend(v115, "setObject:forKeyedSubscript:", v8, v14);

            v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nsurlRequest"));
            v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "taskInfo"));
            v118 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager taskWithRequest:description:session:](GKNetworkRequestManager, "taskWithRequest:description:session:", v116, v117, v11));
            objc_msgSend(v8, "setNsurlTask:", v118);

            v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nsurlTask"));
            if (v119)
            {
              if (!os_log_GKGeneral)
                v121 = (id)GKOSLoggers(v120);
              v122 = (void *)os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                v123 = v122;
                v125 = (void *)objc_opt_class(v8, v124);
                v126 = v125;
                v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nsurlTask"));
                *(_DWORD *)buf = 138412546;
                v261 = v125;
                v262 = 2112;
                v263 = (unint64_t)v127;
                _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_INFO, "%@ resuming task:%@", buf, 0x16u);

              }
              v128 = objc_alloc((Class)NSURLSessionConfiguration);
              v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v248, "backgroundConfig"));
              v130 = objc_msgSend(v128, "_initWithConfiguration:", v129);

              v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "originalBundleIdentifier"));
              objc_msgSend(v130, "set_sourceApplicationBundleIdentifier:", v131);

              v132 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nsurlTask"));
              objc_msgSend(v132, "_adoptEffectiveConfiguration:", v130);

              v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "nsurlTask"));
              objc_msgSend(v133, "resume");

              v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "requestIdentifier"));
              objc_msgSend(v248, "cleanUpPendingStore:", v134);
              v67 = v20;
            }
            else
            {
              if (!os_log_GKGeneral)
                v154 = (id)GKOSLoggers(v120);
              v155 = (void *)os_log_GKDaemon;
              v67 = v20;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                v156 = v155;
                v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "requestData"));
                *(_DWORD *)buf = 138412290;
                v261 = v157;
                _os_log_impl((void *)&_mh_execute_header, v156, OS_LOG_TYPE_INFO, "GKNetworkRequestManager cannot issue request as it is nil, writing to pending: %@", buf, 0xCu);

                v67 = v20;
              }
              v130 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "taskInfo"));
              v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "requestIdentifier"));
              objc_msgSend(v248, "writeToPendingStore:fileName:", v130, v134);
            }

            updateCoalescingState(0, v9, v8);
            v10 = v245;
            goto LABEL_132;
          }
          v143 = v15;
          v144 = v238;
          if (!os_log_GKGeneral)
            v145 = (id)GKOSLoggers(0);
          v146 = (void *)os_log_GKDaemon;
          if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
            goto LABEL_119;
          v147 = v146;
          v149 = (void *)objc_opt_class(v8, v148);
          *(_DWORD *)buf = 138412546;
          v261 = v149;
          v262 = 2112;
          v263 = (unint64_t)v8;
          v150 = v149;
          v151 = "%@ new request is empty, skipping: %@";
          v152 = v147;
          v153 = 22;
LABEL_118:
          _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_INFO, v151, buf, v153);

LABEL_119:
          v67 = v144;
          v15 = v143;
          goto LABEL_132;
        }
        if (!os_log_GKGeneral)
          v233 = (id)GKOSLoggers(v135);
        v234 = (void *)os_log_GKDaemon;
        v10 = v245;
        if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          goto LABEL_132;
        v167 = v15;
        v168 = v67;
        v169 = v234;
        v236 = (void *)objc_opt_class(v8, v235);
        *(_DWORD *)buf = 138413314;
        v261 = v236;
        v262 = 2048;
        v263 = a4;
        v264 = 2048;
        v265 = 0;
        v266 = 1024;
        *(_DWORD *)v267 = 1;
        *(_WORD *)&v267[4] = 2112;
        *(_QWORD *)&v267[6] = v8;
        v172 = v236;
        v173 = "%@ Selection logic failure: previousPending:%ld pending:%ld managerReady: %d request:%@";
LABEL_151:
        _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_INFO, v173, buf, 0x30u);

        v67 = v168;
        v15 = v167;
        goto LABEL_132;
      }
      if (v19)
      {
        if (!os_log_GKGeneral)
          v158 = (id)GKOSLoggers(v135);
        v159 = (void *)os_log_GKDaemon;
        v10 = v245;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          v160 = v159;
          v162 = (void *)objc_opt_class(v8, v161);
          *(_DWORD *)buf = 138413314;
          v261 = v162;
          v262 = 2048;
          v263 = 0;
          v264 = 2048;
          v265 = 0;
          v266 = 1024;
          *(_DWORD *)v267 = 1;
          *(_WORD *)&v267[4] = 2112;
          *(_QWORD *)&v267[6] = v8;
          v163 = v162;
          _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_INFO, "%@ first request condition: previousPending:%ld pending:%ld managerReady: %d request:%@", buf, 0x30u);

          v67 = v20;
        }
        v164 = objc_msgSend(v8, "coalescingAgent");
        if (!(_DWORD)v164)
        {
          LODWORD(v66) = 1;
          v65 = 1;
          goto LABEL_100;
        }
        if (!os_log_GKGeneral)
          v165 = (id)GKOSLoggers(v164);
        v166 = (void *)os_log_GKDaemon;
        if (!os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          goto LABEL_132;
        v167 = v15;
        v168 = v67;
        v169 = v166;
        v171 = (void *)objc_opt_class(v8, v170);
        *(_DWORD *)buf = 138413314;
        v261 = v171;
        v262 = 2048;
        v263 = 0;
        v264 = 2048;
        v265 = 0;
        v266 = 1024;
        *(_DWORD *)v267 = 1;
        *(_WORD *)&v267[4] = 2112;
        *(_QWORD *)&v267[6] = v8;
        v172 = v171;
        v173 = "%@ stopping coalescing monitoring: previousPending:%ld pending:%ld managerReady: %d request:%@";
        goto LABEL_151;
      }
    }
    else if (v19 && !objc_msgSend(v8, "coalescingAgent"))
    {
      LODWORD(v66) = 0;
LABEL_99:
      v65 = 1;
      goto LABEL_100;
    }
    LODWORD(v66) = 1;
    goto LABEL_99;
  }
  if (!os_log_GKGeneral)
    v44 = (id)GKOSLoggers(0);
  v45 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v46 = v45;
    *(_DWORD *)buf = 138412546;
    v261 = (id)objc_opt_class(v8, v47);
    v262 = 2112;
    v263 = (unint64_t)v8;
    v48 = v261;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "%@ cannot issue a request without bundleId: %@", buf, 0x16u);

  }
LABEL_133:

}

id sub_1000C363C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleNetworkRequest:session:clientProxy:previousKnownPendingAmount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_1000C7218(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "GKNetworkRequestManager fairplay session creation failed due to error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C728C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "No valid player credentials found. The subsequent network request will not contain an authentication token.", a5, a6, a7, a8, 0);
}

void sub_1000C72C0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "Network Request Manager: failed to load url from pendingLocation", a5, a6, a7, a8, 0);
}

uint64_t sub_1000C7640(_QWORD *a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v5 = a1[4];
    v4 = (void *)a1[5];
    v6 = v3;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "loggableHeaders"));
    v9 = 138412546;
    v10 = v5;
    v11 = 2112;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GKNetworkRequestManager updated headers for: %@ {\nheaders: %@}", (uint8_t *)&v9, 0x16u);

  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_1000C7744(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  uint8_t v11[16];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "storeBag"));
  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "HTTPBody"));
  objc_msgSend(v5, "signRequest:sapSession:postData:", v6, v3, v7);

  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v8);
  v10 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GKNetworkRequestManager finished getting session.", v11, 2u);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000C860C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "GKNetworkRequestManager is missing.", v1, 2u);
}

void sub_1000C9008(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100034EE4((void *)&_mh_execute_header, a2, a3, "bundleIdentifierFromAuditToken: CFBundleCopyInfoDictionaryForURL(): %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000C906C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100034EE4((void *)&_mh_execute_header, a2, a3, "bundleIdentifierFromAuditToken: _CFBundleCopyBundleURLForExecutableURL(): %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000C90D0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100034EE4((void *)&_mh_execute_header, a2, a3, "bundleIdentifierFromAuditToken: CPCopyBundleIdentifierAndTeamFromAuditToken(): %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000C92B8(id a1)
{
  GKIDSConnectionManager *v1;
  void *v2;

  v1 = objc_alloc_init(GKIDSConnectionManager);
  v2 = (void *)qword_100317F10;
  qword_100317F10 = (uint64_t)v1;

}

void sub_1000C950C(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSIDQueryController sharedInstance](IDSIDQueryController, "sharedInstance"));
  v3 = objc_alloc_init((Class)IDSIDInfoOptions);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "idsDelegateQueue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000C95FC;
  v8[3] = &unk_1002BCC38;
  v9 = *(id *)(a1 + 56);
  objc_msgSend(v2, "idInfoForDestinations:service:infoTypes:options:listenerID:queue:completionBlock:", v4, v5, v6, v3, CFSTR("com.apple.gamed"), v7, v8);

}

uint64_t sub_1000C95FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1000C96A0(uint64_t a1)
{
  return objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 8), *(id *)(a1 + 40));
}

void sub_1000C9A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000C9AE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000C9C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000C9D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000C9FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

id sub_1000CA024(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  sqlite3_stmt *v6;

  v3 = a2;
  v6 = 0;
  v4 = objc_msgSend(*(id *)(a1 + 32), "getStatement:forSQL:", &v6, v3);
  if (!(_DWORD)v4)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000CA098(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CA16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1000CA190(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *j;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id obj;
  uint64_t v19;
  id v20;
  void *i;
  id v22;
  id v23;
  _QWORD v24[5];
  id v25;
  uint64_t v26;
  _QWORD v27[6];
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];

  v23 = a3;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = *(id *)(a1 + 32);
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v5)
  {
    v19 = *(_QWORD *)v34;
    do
    {
      v20 = v5;
      for (i = 0; i != v20; i = (char *)i + 1)
      {
        if (*(_QWORD *)v34 != v19)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "representedItem"));
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v22 = v7;
        v8 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
        if (v8)
        {
          v9 = *(_QWORD *)v30;
          do
          {
            for (j = 0; j != v8; j = (char *)j + 1)
            {
              if (*(_QWORD *)v30 != v9)
                objc_enumerationMutation(v22);
              v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1)
                                                                                 + 8 * (_QWORD)j), "resourceID"));
              v12 = *(void **)(a1 + 40);
              v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "requestsInsertSQL"));
              v27[0] = _NSConcreteStackBlock;
              v27[1] = 3221225472;
              v27[2] = sub_1000CA4E8;
              v27[3] = &unk_1002C19B8;
              v27[4] = *(_QWORD *)(a1 + 40);
              v27[5] = v6;
              v14 = v11;
              v28 = v14;
              objc_msgSend(v12, "writeToDatabase:statementStore:withInsertSQL:updateSQL:bindOperation:", a2, v23, v13, 0, v27);

              v15 = *(void **)(a1 + 40);
              v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "removeGamesInsertSQL"));
              v24[0] = _NSConcreteStackBlock;
              v24[1] = 3221225472;
              v24[2] = sub_1000CA554;
              v24[3] = &unk_1002C19E0;
              v24[4] = *(_QWORD *)(a1 + 40);
              v17 = v14;
              v25 = v17;
              v26 = a2;
              objc_msgSend(v15, "writeToDatabase:statementStore:withInsertSQL:updateSQL:bindOperation:", a2, v23, v16, 0, v24);

            }
            v8 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
          }
          while (v8);
        }

      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    }
    while (v5);
  }

}

void sub_1000CA450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1000CA4E8(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resourceID"));
  objc_msgSend(v3, "bindParametersForRequestsStatement:playerID:digest:", a2);

}

void sub_1000CA540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1000CA554(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  sqlite3_int64 insert_rowid;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 48));
  return _objc_msgSend(v3, "bindParametersForRemoveGamesStatement:forRemovedBundleID:requestsRowID:", a2, v4, insert_rowid);
}

uint64_t sub_1000CA594(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000CA678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CA720(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000CA7A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000CA7B8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BYTE *v4;
  unsigned __int8 *v5;
  void *v7;
  uint64_t i;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = *(_BYTE **)(a1 + 8 * v2);
    if (*v4)
    {
      v5 = v4 + 1;
      do
        ++v3;
      while (*v5++);
    }
    ++v2;
  }
  while (v2 != 4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", v3 + 8));
  for (i = 0; i != 24; i += 8)
    objc_msgSend(v7, "appendFormat:", CFSTR("%s, "), *(_QWORD *)(a1 + i));
  objc_msgSend(v7, "appendFormat:", CFSTR("%s "), *(_QWORD *)(a1 + 24));
  return v7;
}

void sub_1000CA878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CA8F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000CA904(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;

  if (*(_BYTE *)*a1)
  {
    v2 = 1;
    while (*(unsigned __int8 *)(*a1 + v2++))
      ;
    v4 = (int)v2 + 1;
  }
  else
  {
    v4 = 2;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", v4));
  objc_msgSend(v5, "appendFormat:", CFSTR("%s "), *a1);
  return v5;
}

void sub_1000CA980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CA9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000CAAE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1000CAB0C(sqlite3_stmt **a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)sqlite3_column_text(*a1, 3);
  if (v1)
    v1 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1));
  return v1;
}

void sub_1000CACE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_1000CAD54(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000CAE2C;
  v9[3] = &unk_1002C1A80;
  v6 = v4;
  v7 = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v7;
  v12 = *(id *)(a1 + 48);
  v13 = v3;
  v8 = v3;
  objc_msgSend(v5, "performAsync:", v9);

}

void sub_1000CAE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1000CAE2C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *i;
  void *v6;
  void *v7;
  id v8;
  void *j;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  unsigned int v16;
  int v17;
  void *v18;
  void *v19;
  NSNumber *v20;
  void *v21;
  void *v22;
  void *v23;
  id obj;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  sqlite3_stmt *v40;
  sqlite3_stmt *v41;
  _BYTE v42[128];
  _BYTE v43[128];

  v30 = a3;
  v40 = 0;
  v41 = 0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  obj = *(id *)(a1 + 32);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v43, 16);
  if (v4)
  {
    v26 = *(_QWORD *)v37;
    do
    {
      v27 = v4;
      for (i = 0; i != v27; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v26)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "resourceID"));
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "representedItem"));
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
        if (v8)
        {
          v28 = *(_QWORD *)v33;
          v29 = v7;
          while (2)
          {
            for (j = 0; j != v8; j = (char *)j + 1)
            {
              if (*(_QWORD *)v33 != v28)
                objc_enumerationMutation(v29);
              v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1)
                                                                                 + 8 * (_QWORD)j), "resourceID"));
              v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
              v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
              v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getAllRemoveGamesRequestIDsStatement"));
              v14 = objc_msgSend(v30, "getStatement:forSQL:", &v40, v13);

              objc_msgSend(*(id *)(a1 + 40), "bindParametersForStatement:playerID:bundleID:", v40, v31, v10);
              if (!v14)
              {
                v14 = sqlite3_step(v40);
                while (v14 == 100)
                {
                  v20 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", sqlite3_column_double(v40, 0));
                  objc_msgSend(v12, "addObject:", v20);
                  v14 = sqlite3_step(v40);

                }
              }
              if (v14 != 101)
                goto LABEL_27;
              v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getRemoveGamesDescriptorsStatement"));
              v16 = objc_msgSend(v30, "getStatement:forSQL:", &v41, v15);

              if (v16)
                goto LABEL_27;
              objc_msgSend(*(id *)(a1 + 40), "bindParametersForStatement:playerID:bundleID:", v41, v31, v10);
              v17 = sqlite3_step(v41);
              while (v17 == 100)
              {
                v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "removeGamesForExecutedStatement:", v41));
                objc_msgSend(v11, "addObject:", v18);
                v17 = sqlite3_step(v41);

              }
              if (v17 != 101)
              {
LABEL_27:
                v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkErrorForDatabase:](NSError, "_gkErrorForDatabase:", a2));
                objc_msgSend(*(id *)(a1 + 48), "setError:", v23);

                v7 = v29;
                goto LABEL_28;
              }
              if (objc_msgSend(v11, "count"))
                v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "firstObject"));
              else
                v19 = &__NSDictionary0__struct;
              v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceWithID:representedItem:](GKMutableResource, "resourceWithID:representedItem:", v31, v19));
              objc_msgSend(v21, "setObject:forKeyedSubscript:", v12, CFSTR("GKRequestIDs"));
              v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "result"));
              objc_msgSend(v22, "addObject:", v21);

            }
            v7 = v29;
            v8 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
            if (v8)
              continue;
            break;
          }
        }
LABEL_28:

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v43, 16);
    }
    while (v4);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1000CB288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_1000CB3A8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_1000CB408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000CB4C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CB544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CB5C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000CB5D8(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  _BYTE *v4;
  unsigned __int8 *v5;
  void *v7;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = (_BYTE *)a1[v2];
    if (*v4)
    {
      v5 = v4 + 1;
      do
        ++v3;
      while (*v5++);
    }
    ++v2;
  }
  while (v2 != 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", v3 + 4));
  objc_msgSend(v7, "appendFormat:", CFSTR("%s, "), *a1);
  objc_msgSend(v7, "appendFormat:", CFSTR("%s "), a1[1]);
  return v7;
}

void sub_1000CB678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CB788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1000CB9D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000CBA48(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000CBB20;
  v9[3] = &unk_1002C1A80;
  v6 = v4;
  v7 = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v7;
  v12 = *(id *)(a1 + 48);
  v13 = v3;
  v8 = v3;
  objc_msgSend(v5, "performAsync:", v9);

}

void sub_1000CBAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1000CBB20(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  NSNumber *v12;
  void *v13;
  void *v14;
  sqlite3_stmt *v15;

  v5 = a3;
  v15 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "anyObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "resourceID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deletePhotoDescriptorStatement"));
  v10 = objc_msgSend(v5, "getStatement:forSQL:", &v15, v9);

  if (v10
    || (objc_msgSend(*(id *)(a1 + 40), "bindParametersForStatement:playerID:", v15, v7),
        v10 = sqlite3_step(v15),
        v10 != 100))
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      if (!v11)
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deletePhotoDescriptorForExecutedStatement:", v15));
      v12 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", sqlite3_column_double(v15, 0));
      objc_msgSend(v8, "addObject:", v12);
      v10 = sqlite3_step(v15);

    }
    while (v10 == 100);
  }
  if (v10 == 101)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceWithID:representedItem:](GKMutableResource, "resourceWithID:representedItem:", v7, v11));
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v8, CFSTR("GKRequestIDs"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "result"));
    objc_msgSend(v14, "addObject:", v13);

  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkErrorForDatabase:](NSError, "_gkErrorForDatabase:", a2));
    objc_msgSend(*(id *)(a1 + 48), "setError:", v13);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1000CBD0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1000CBD8C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_1000CBDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000CBE6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CBEF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CBFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000CC31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

id sub_1000CC380(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  sqlite3_stmt *v6;

  v3 = a2;
  v6 = 0;
  v4 = objc_msgSend(*(id *)(a1 + 32), "getStatement:forSQL:", &v6, v3);
  if (!(_DWORD)v4)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000CC3F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CC55C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000CC594(uint64_t a1, sqlite3 *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int i;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  sqlite3_int64 v17;
  id v18;
  NSString *v19;
  void *v20;
  void *v21;
  id v22;
  NSString *v23;
  void *v24;
  void *v25;
  id v26;
  NSString *v27;
  void *v28;
  id v29;
  id obj;
  uint64_t v31;
  _QWORD v32[6];
  _QWORD v33[5];
  id v34;
  sqlite3_stmt *v35;
  sqlite3_stmt *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  const __CFString *v41;
  void *v42;
  const __CFString *v43;
  void *v44;
  _BYTE v45[128];

  v5 = a3;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  obj = *(id *)(a1 + 32);
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
  if (v6)
  {
    v31 = *(_QWORD *)v38;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v38 != v31)
          objc_enumerationMutation(obj);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)v7), "resourceID"));
        v36 = 0;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getOldPhotosSQL"));
        if (objc_msgSend(v5, "getStatement:forSQL:", &v36, v9))
        {
          v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
          v43 = CFSTR("SQL");
          v44 = v9;
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v44, &v43, 1));
          v26 = (id)objc_claimAutoreleasedReturnValue(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", NSInternalInconsistencyException, v24, v25));

          objc_exception_throw(v26);
        }
        v35 = 0;
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deleteOldPhotosSQL"));
        i = objc_msgSend(v5, "getStatement:forSQL:", &v35, v10);
        if (!i)
        {
          objc_msgSend(*(id *)(a1 + 40), "bindParametersForGetOldPhotosStatement:playerID:", v36, v8);
          for (i = sqlite3_step(v36); i == 100; i = sqlite3_step(v36))
          {
            v17 = sqlite3_column_int64(v36, 0);
            objc_msgSend(*(id *)(a1 + 40), "bindParametersForDeleteOldPhotosStatement:requestsRowID:", v35, v17);
            if (sqlite3_step(v35) != 101)
            {
              v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
              v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
              v41 = CFSTR("SQL");
              v42 = v10;
              v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1));
              v22 = (id)objc_claimAutoreleasedReturnValue(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", NSInternalInconsistencyException, v20, v21));

              objc_exception_throw(v22);
            }
          }
        }
        if (i != 101)
        {
          v27 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          v29 = (id)objc_claimAutoreleasedReturnValue(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", NSInternalInconsistencyException, v28, 0));

          objc_exception_throw(v29);
        }

        v12 = *(void **)(a1 + 40);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "requestsInsertSQL"));
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472;
        v33[2] = sub_1000CCAB8;
        v33[3] = &unk_1002C1B08;
        v33[4] = *(_QWORD *)(a1 + 40);
        v14 = v8;
        v34 = v14;
        objc_msgSend(v12, "writeToDatabase:statementStore:withInsertSQL:updateSQL:bindOperation:", a2, v5, v13, 0, v33);

        v15 = *(void **)(a1 + 40);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "photosInsertSQL"));
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_1000CCAC8;
        v32[3] = &unk_1002C1B30;
        v32[4] = *(_QWORD *)(a1 + 40);
        v32[5] = a2;
        objc_msgSend(v15, "writeToDatabase:statementStore:withInsertSQL:updateSQL:bindOperation:", a2, v5, v16, 0, v32);

        v7 = (char *)v7 + 1;
      }
      while (v7 != v6);
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
      v6 = v18;
    }
    while (v18);
  }

}

void sub_1000CC9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

id sub_1000CCAB8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "bindParametersForRequestsStatement:playerID:", a2, *(_QWORD *)(a1 + 40));
}

id sub_1000CCAC8(uint64_t a1, uint64_t a2)
{
  void *v3;
  sqlite3_int64 insert_rowid;

  v3 = *(void **)(a1 + 32);
  insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 40));
  return _objc_msgSend(v3, "bindParametersForPhotoStatement:requestsRowID:", a2, insert_rowid);
}

uint64_t sub_1000CCAF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000CCB64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CCBE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CCC6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CCDD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

NSData *sub_1000CCE10(sqlite3_stmt **a1)
{
  const void *v2;

  v2 = sqlite3_column_blob(*a1, 2);
  return +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v2, sqlite3_column_bytes(*a1, 2));
}

void sub_1000CD088(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000CD0FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000CD1D4;
  v9[3] = &unk_1002C1A80;
  v6 = v4;
  v7 = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v7;
  v12 = *(id *)(a1 + 48);
  v13 = v3;
  v8 = v3;
  objc_msgSend(v5, "performAsync:", v9);

}

void sub_1000CD1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1000CD1D4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  NSNumber *v12;
  void *v13;
  void *v14;
  sqlite3_stmt *v15;

  v5 = a3;
  v15 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "anyObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "resourceID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "setPhotoDescriptorStatement"));
  v10 = objc_msgSend(v5, "getStatement:forSQL:", &v15, v9);

  if (v10
    || (objc_msgSend(*(id *)(a1 + 40), "bindParametersForStatement:playerID:", v15, v7),
        v10 = sqlite3_step(v15),
        v10 != 100))
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      if (!v11)
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "setPhotoDescriptorForExecutedStatement:", v15));
      v12 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", sqlite3_column_double(v15, 0));
      objc_msgSend(v8, "addObject:", v12);
      v10 = sqlite3_step(v15);

    }
    while (v10 == 100);
  }
  if (v10 == 101)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceWithID:representedItem:](GKMutableResource, "resourceWithID:representedItem:", v7, v11));
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v8, CFSTR("GKRequestIDs"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "result"));
    objc_msgSend(v14, "addObject:", v13);

  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkErrorForDatabase:](NSError, "_gkErrorForDatabase:", a2));
    objc_msgSend(*(id *)(a1 + 48), "setError:", v13);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1000CD3C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1000CD440(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_1000CD4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000CD8C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CD948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CDA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000CDB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000CDE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

id sub_1000CDE78(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  sqlite3_stmt *v6;

  v3 = a2;
  v6 = 0;
  v4 = objc_msgSend(*(id *)(a1 + 32), "getStatement:forSQL:", &v6, v3);
  if (!(_DWORD)v4)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000CDEEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CE054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000CE08C(uint64_t a1, sqlite3 *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int i;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  sqlite3_int64 v17;
  id v18;
  NSString *v19;
  void *v20;
  void *v21;
  id v22;
  NSString *v23;
  void *v24;
  void *v25;
  id v26;
  NSString *v27;
  void *v28;
  id v29;
  id obj;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  id v37;
  id v38;
  id v39;
  _QWORD v40[5];
  id v41;
  sqlite3_stmt *v42;
  sqlite3_stmt *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  const __CFString *v48;
  void *v49;
  const __CFString *v50;
  void *v51;
  _BYTE v52[128];

  v37 = a3;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = *(id *)(a1 + 32);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
  if (v4)
  {
    v32 = *(_QWORD *)v45;
    v31 = GKAvatarTypeKey;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v45 != v32)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)v5);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "resourceID"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "representedItem"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("photo-data")));
        v33 = v8;
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v31));
        v43 = 0;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getOldPhotosSQL"));
        if (objc_msgSend(v37, "getStatement:forSQL:", &v43, v9))
        {
          v23 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
          v50 = CFSTR("SQL");
          v51 = v9;
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1));
          v26 = (id)objc_claimAutoreleasedReturnValue(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", NSInternalInconsistencyException, v24, v25));

          objc_exception_throw(v26);
        }
        v42 = 0;
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deleteOldPhotosSQL"));
        i = objc_msgSend(v37, "getStatement:forSQL:", &v42, v10);
        if (!i)
        {
          objc_msgSend(*(id *)(a1 + 40), "bindParametersForGetOldPhotosStatement:playerID:", v43, v7);
          for (i = sqlite3_step(v43); i == 100; i = sqlite3_step(v43))
          {
            v17 = sqlite3_column_int64(v43, 0);
            objc_msgSend(*(id *)(a1 + 40), "bindParametersForDeleteOldPhotosStatement:requestsRowID:", v42, v17);
            if (sqlite3_step(v42) != 101)
            {
              v19 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
              v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
              v48 = CFSTR("SQL");
              v49 = v10;
              v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1));
              v22 = (id)objc_claimAutoreleasedReturnValue(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", NSInternalInconsistencyException, v20, v21));

              objc_exception_throw(v22);
            }
          }
        }
        if (i != 101)
        {
          v27 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          v29 = (id)objc_claimAutoreleasedReturnValue(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", NSInternalInconsistencyException, v28, 0));

          objc_exception_throw(v29);
        }

        v12 = *(void **)(a1 + 40);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "requestsInsertSQL"));
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472;
        v40[2] = sub_1000CE690;
        v40[3] = &unk_1002C1B08;
        v40[4] = *(_QWORD *)(a1 + 40);
        v14 = v7;
        v41 = v14;
        objc_msgSend(v12, "writeToDatabase:statementStore:withInsertSQL:updateSQL:bindOperation:", a2, v37, v13, 0, v40);

        v15 = *(void **)(a1 + 40);
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "photosInsertSQL"));
        v38 = v34;
        v39 = v35;
        objc_msgSend(v15, "writeToDatabase:statementStore:withInsertSQL:updateSQL:bindOperation:");

        v5 = (char *)v5 + 1;
      }
      while (v5 != v4);
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
      v4 = v18;
    }
    while (v18);
  }

}

void sub_1000CE574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

id sub_1000CE690(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "bindParametersForRequestsStatement:playerID:", a2, *(_QWORD *)(a1 + 40));
}

id sub_1000CE6A0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  sqlite3_int64 insert_rowid;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 56));
  return _objc_msgSend(v3, "bindParametersForPhotoStatement:photo:avatarType:requestsRowID:", a2, v4, v5, insert_rowid);
}

uint64_t sub_1000CE6E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000CEAA0(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  const __CFString *v19;
  void *v20;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "firstObject"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "_gkResourceWithID:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "representedItem"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", GKAvatarTypeKey));
  objc_msgSend(a1[6], "setAvatarType:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("image-data")));
  v19 = CFSTR("file-size");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "length")));
  v20 = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "transport"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "bagKey"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000CEC90;
  v15[3] = &unk_1002C1BE0;
  v16 = a1[7];
  v17 = v8;
  v18 = v3;
  v13 = v3;
  v14 = v8;
  objc_msgSend(v11, "postRequest:forBagKey:response:", v10, v12, v15);

}

void sub_1000CEC90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "representedItem"));
  v7 = v6;
  if (v5)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000CFD10((uint64_t)v5, v9, v10, v11, v12, v13, v14, v15);
    objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  }
  else if (v6)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("upload-url")));
    objc_msgSend(*(id *)(a1 + 32), "setResult:", v16);

    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("image-data"));
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000CED7C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (!v3)
      return;
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v6);
  }
  else
  {
    v4 = *(void **)(a1 + 40);
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("image-data")));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    objc_msgSend(v4, "uploadImageData:toURL:handler:", v6, v5, *(_QWORD *)(a1 + 48));

  }
}

void sub_1000CEFFC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", *(_QWORD *)(a1 + 32)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", v4));
  objc_msgSend(v5, "setValue:forHTTPHeaderField:", CFSTR("image/png"), CFSTR("content-type"));
  objc_msgSend(v5, "setHTTPMethod:", CFSTR("POST"));
  objc_msgSend(v5, "setHTTPBody:", *(_QWORD *)(a1 + 40));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000CF134;
  v9[3] = &unk_1002C1C08;
  v10 = v5;
  v11 = *(id *)(a1 + 48);
  v12 = v4;
  v13 = v3;
  v6 = v3;
  v7 = v4;
  v8 = v5;
  +[NSURLSession _gkSendAsynchronousRequest:completionHandler:](NSURLSession, "_gkSendAsynchronousRequest:completionHandler:", v8, v9);

}

void sub_1000CF134(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  id v20;
  _BOOL8 v21;
  id v22;
  void *v23;
  _BOOL8 v24;
  void *v25;
  NSObject *v26;
  void *v27;
  id v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  NSObject *v49;
  void *v50;
  void *context;
  id v52;
  uint8_t buf[4];
  id v54;
  __int16 v55;
  id v56;
  __int16 v57;
  id v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  id v64;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v7;
  v11 = (id)os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO);
  if ((_DWORD)v11 && *(_QWORD *)(a1 + 32))
  {
    context = objc_autoreleasePoolPush();
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "HTTPBody"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForHTTPHeaderField:", CFSTR("content-encoding")));
    v14 = objc_msgSend(v13, "isEqualToString:", CFSTR("gzip"));

    if (v14)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "_gkUnzippedData"));
      v17 = v16;
      if (v16)
      {
        v18 = v16;

        v12 = v18;
      }

    }
    v19 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v20 = (id)GKOSLoggers(v15);
      v19 = os_log_GKGeneral;
    }
    v21 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v21)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Upload avatar image data: Received HTTP Response", buf, 2u);
    }
    if (!os_log_GKGeneral)
      v22 = (id)GKOSLoggers(v21);
    v23 = (void *)os_log_GKHTTP;
    v24 = os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO);
    if (v24)
    {
      v25 = *(void **)(a1 + 32);
      v26 = v23;
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "loggableHeaders"));
      *(_DWORD *)buf = 138412802;
      v54 = v25;
      v55 = 2112;
      v56 = v27;
      v57 = 2112;
      v58 = v12;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%@\nREQUEST {\nheader: %@\nbody: %@}", buf, 0x20u);

    }
    if (!os_log_GKGeneral)
      v28 = (id)GKOSLoggers(v24);
    v29 = (void *)os_log_GKHTTP;
    if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
    {
      v30 = v29;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v10, "statusCode")));
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", objc_msgSend(v10, "statusCode")));
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allHeaderFields"));
      *(_DWORD *)buf = 138413570;
      v54 = v10;
      v55 = 2112;
      v56 = v9;
      v57 = 2112;
      v58 = v31;
      v59 = 2112;
      v60 = v32;
      v61 = 2112;
      v62 = v33;
      v63 = 2112;
      v64 = v8;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%@\nRESPONSE (error:%@) {\nstatus: (%@) %@\nheader: %@\nbody: %@ }", buf, 0x3Eu);

    }
    objc_autoreleasePoolPop(context);
  }
  if (v8 && !v9 && (v11 = objc_msgSend(v10, "statusCode"), v11 == (id)200))
  {
    v52 = 0;
    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v8, 0, &v52));
    v35 = v52;
    if (v35 || !v34)
    {
      v39 = objc_msgSend(*(id *)(a1 + 40), "setError:", v35);
      if (!os_log_GKGeneral)
        v40 = (id)GKOSLoggers(v39);
      v41 = os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_1000CFD74((uint64_t)v35, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", CFSTR("singleFile")));
      objc_msgSend(*(id *)(a1 + 40), "setResult:", v36);

    }
  }
  else
  {
    if (!os_log_GKGeneral)
      v37 = (id)GKOSLoggers(v11);
    v38 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      v48 = *(void **)(a1 + 48);
      v49 = v38;
      v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v10, "statusCode")));
      *(_DWORD *)buf = 138412802;
      v54 = v48;
      v55 = 2112;
      v56 = v50;
      v57 = 2112;
      v58 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Error uploading profile image data to url:  %@, status code:  %@, error:  %@", buf, 0x20u);

    }
    objc_msgSend(*(id *)(a1 + 40), "setError:", v9);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000CF60C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));

  if (v2)
  {
    v3 = *(void **)(a1 + 40);
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
    objc_msgSend(v3, "uploadProfileImageMetadata:fromUploadURL:handler:");
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 56);
    if (!v4)
      return;
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t))(v4 + 16))(v4);
  }

}

void sub_1000CF840(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObjectsAndKeys:](NSMutableDictionary, "dictionaryWithObjectsAndKeys:", *(_QWORD *)(a1 + 32), CFSTR("upload-url"), *(_QWORD *)(a1 + 40), CFSTR("asset-metadata"), 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "avatarType"));

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "avatarType"));
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, GKAvatarTypeKey);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "transport"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000CF974;
  v11[3] = &unk_1002BB8F0;
  v8 = *(id *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 48);
  v12 = v8;
  v13 = v9;
  v14 = v3;
  v10 = v3;
  objc_msgSend(v7, "postRequest:forBagKey:result:", v4, CFSTR("gk-set-profile-image-metadata"), v11);

}

void sub_1000CF974(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[5];

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000CFDD8((uint64_t)v4, v6, v7, v8, v9, v10, v11, v12);
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "transport"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "clientProxy"));

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDelayedSetPhotoNetworkWriter.m", 179, "-[GKDelayedSetPhotoNetworkWriter uploadProfileImageMetadata:fromUploadURL:handler:]_block_invoke"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "transport"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "credential"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "playerInternal"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "playerID"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "transactionGroupWithName:forPlayerID:", v15, v19));

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000CFB2C;
    v21[3] = &unk_1002BCCF0;
    v21[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v20, "performOnManagedObjectContext:", v21);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000CFB2C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  v9 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v9;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "transport"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "credential"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "playerInternal"));
    v15 = 138412290;
    v16 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GKDelayedSetPhotoNetworkWriter: Successfully uploaded player avatar image and metadata to server for %@", (uint8_t *)&v15, 0xCu);

  }
}

void sub_1000CFC58(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1000CFD10(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "Error getting upload URL for profile image %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000CFD74(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "Error creating dictionary from profile image upload response's data %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000CFDD8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "Error uploading profile image metadata %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000CFE7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CFF00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CFF84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D0040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1000D0058(sqlite3_stmt **a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)sqlite3_column_text(*a1, 1);
  if (v1)
    v1 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1));
  return v1;
}

void sub_1000D02B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000D0324(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000D03FC;
  v9[3] = &unk_1002C1A80;
  v6 = v4;
  v7 = *(_QWORD *)(a1 + 32);
  v10 = v6;
  v11 = v7;
  v12 = *(id *)(a1 + 48);
  v13 = v3;
  v8 = v3;
  objc_msgSend(v5, "performAsync:", v9);

}

void sub_1000D03D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1000D03FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  NSNumber *v12;
  void *v13;
  void *v14;
  sqlite3_stmt *v15;

  v5 = a3;
  v15 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "anyObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "resourceID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "setStatusDescriptorStatement"));
  v10 = objc_msgSend(v5, "getStatement:forSQL:", &v15, v9);

  if (v10
    || (objc_msgSend(*(id *)(a1 + 40), "bindParametersForStatement:playerID:", v15, v7),
        v10 = sqlite3_step(v15),
        v10 != 100))
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      if (!v11)
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "setStatusDescriptorForExecutedStatement:", v15));
      v12 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", sqlite3_column_double(v15, 0));
      objc_msgSend(v8, "addObject:", v12);
      v10 = sqlite3_step(v15);

    }
    while (v10 == 100);
  }
  if (v10 == 101)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceWithID:representedItem:](GKMutableResource, "resourceWithID:representedItem:", v7, v11));
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v8, CFSTR("GKRequestIDs"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "result"));
    objc_msgSend(v14, "addObject:", v13);

  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError _gkErrorForDatabase:](NSError, "_gkErrorForDatabase:", a2));
    objc_msgSend(*(id *)(a1 + 48), "setError:", v13);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1000D05E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1000D0668(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_1000D06C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000D0748(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D07CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000D0898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000D0954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D0C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

id sub_1000D0CC0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  sqlite3_stmt *v6;

  v3 = a2;
  v6 = 0;
  v4 = objc_msgSend(*(id *)(a1 + 32), "getStatement:forSQL:", &v6, v3);
  if (!(_DWORD)v4)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v4 = (id)sqlite3_step(v6);
  }

  return v4;
}

void sub_1000D0D34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D0E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000D0ED4(uint64_t a1, sqlite3 *a2, void *a3)
{
  id v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int j;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  sqlite3_int64 v19;
  NSString *v20;
  void *v21;
  void *v22;
  id v23;
  NSString *v24;
  void *v25;
  void *v26;
  id v27;
  NSString *v28;
  void *v29;
  id v30;
  id obj;
  uint64_t v32;
  id v33;
  id v34;
  _QWORD v35[5];
  id v36;
  sqlite3 *v37;
  _QWORD v38[5];
  id v39;
  sqlite3_stmt *v40;
  sqlite3_stmt *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  const __CFString *v46;
  void *v47;
  const __CFString *v48;
  void *v49;
  _BYTE v50[128];

  v34 = a3;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  obj = *(id *)(a1 + 32);
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
  if (v5)
  {
    v32 = *(_QWORD *)v43;
    do
    {
      v33 = v5;
      for (i = 0; i != v33; i = (char *)i + 1)
      {
        if (*(_QWORD *)v43 != v32)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "resourceID"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "representedItem"));
        v41 = 0;
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getOldStatusesSQL"));
        if (objc_msgSend(v34, "getStatement:forSQL:", &v41, v10))
        {
          v24 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          v48 = CFSTR("SQL");
          v49 = v10;
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1));
          v27 = (id)objc_claimAutoreleasedReturnValue(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", NSInternalInconsistencyException, v25, v26));

          objc_exception_throw(v27);
        }
        v40 = 0;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deleteOldStatusesSQL"));
        j = objc_msgSend(v34, "getStatement:forSQL:", &v40, v11);
        if (!j)
        {
          objc_msgSend(*(id *)(a1 + 40), "bindParametersForGetOldStatusesStatement:playerID:", v41, v8);
          for (j = sqlite3_step(v41); j == 100; j = sqlite3_step(v41))
          {
            v19 = sqlite3_column_int64(v41, 0);
            objc_msgSend(*(id *)(a1 + 40), "bindParametersForDeleteOldStatusesStatement:requestsRowID:", v40, v19);
            if (sqlite3_step(v40) != 101)
            {
              v20 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
              v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
              v46 = CFSTR("SQL");
              v47 = v11;
              v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1));
              v23 = (id)objc_claimAutoreleasedReturnValue(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", NSInternalInconsistencyException, v21, v22));

              objc_exception_throw(v23);
            }
          }
        }
        if (j != 101)
        {
          v28 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sqlite3_errmsg(a2));
          v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
          v30 = (id)objc_claimAutoreleasedReturnValue(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", NSInternalInconsistencyException, v29, 0));

          objc_exception_throw(v30);
        }

        v13 = *(void **)(a1 + 40);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "requestsInsertSQL"));
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472;
        v38[2] = sub_1000D1448;
        v38[3] = &unk_1002C1B08;
        v38[4] = *(_QWORD *)(a1 + 40);
        v15 = v8;
        v39 = v15;
        objc_msgSend(v13, "writeToDatabase:statementStore:withInsertSQL:updateSQL:bindOperation:", a2, v34, v14, 0, v38);

        v16 = *(void **)(a1 + 40);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "statusInsertSQL"));
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472;
        v35[2] = sub_1000D1458;
        v35[3] = &unk_1002C19E0;
        v35[4] = *(_QWORD *)(a1 + 40);
        v18 = v9;
        v36 = v18;
        v37 = a2;
        objc_msgSend(v16, "writeToDatabase:statementStore:withInsertSQL:updateSQL:bindOperation:", a2, v34, v17, 0, v35);

      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
    }
    while (v5);
  }

}

void sub_1000D135C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

id sub_1000D1448(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "bindParametersForRequestsStatement:playerID:", a2, *(_QWORD *)(a1 + 40));
}

id sub_1000D1458(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  sqlite3_int64 insert_rowid;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 48));
  return _objc_msgSend(v3, "bindParametersForStatusStatement:status:requestsRowID:", a2, v4, insert_rowid);
}

uint64_t sub_1000D1498(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000D1CD8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "No contact list currently exist. Likely due to a clear cache event. Stopping.", a5, a6, a7, a8, 0);
}

void sub_1000D1D0C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "Nothing to do, no new synced contacts to update IDS cache with.", a5, a6, a7, a8, 0);
}

uint64_t sub_1000D2058(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000D2210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000D236C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000D244C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000D2470(_QWORD *a1, void *a2)
{
  id v3;
  dispatch_time_t v4;
  dispatch_queue_global_t global_queue;
  NSObject *v6;
  void *v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  v4 = dispatch_time(0, (uint64_t)(*(double *)(a1[4] + 16) * 1000000000.0));
  global_queue = dispatch_get_global_queue(0, 0);
  v6 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D2548;
  block[3] = &unk_1002C1C48;
  v7 = (void *)a1[5];
  v12 = a1[6];
  v10 = v7;
  v11 = v3;
  v8 = v3;
  dispatch_after(v4, v6, block);

}

uint64_t sub_1000D2548(_QWORD *a1)
{
  if (a1[6] == qword_100317F18)
    (*(void (**)(void))(a1[4] + 16))();
  return (*(uint64_t (**)(void))(a1[5] + 16))();
}

void sub_1000D265C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000D2768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1000D2798(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  NSNumber *v13;
  int v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  sqlite3_stmt *pStmt;
  uint8_t buf[4];
  NSNumber *v24;
  _BYTE v25[128];

  v4 = a3;
  pStmt = 0;
  v5 = objc_msgSend(v4, "getStatement:forSQL:", &pStmt, *(_QWORD *)(a1 + 32));
  if ((_DWORD)v5)
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(v5);
    v7 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
      sub_1000D403C(a1, v7, v8);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v9 = *(id *)(a1 + 40);
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v25, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v11)
            objc_enumerationMutation(v9);
          v13 = *(NSNumber **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          GKBindParam(pStmt, ":request_id", v13);
          v14 = sqlite3_step(pStmt);
          v15 = sqlite3_reset(pStmt);
          if (v14 != 101)
          {
            if (!os_log_GKGeneral)
              v16 = (id)GKOSLoggers(v15);
            v17 = os_log_GKCache;
            if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              v24 = v13;
              _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Unable to delete delayed request with id: %@", buf, 0xCu);
            }
          }
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v25, 16);
      }
      while (v10);
    }

  }
}

void sub_1000D29B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000D2B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000D2C00(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000D2CCC;
  v10[3] = &unk_1002C1D08;
  v6 = *(id *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 32);
  v11 = v6;
  v12 = v8;
  v13 = v3;
  v14 = v7;
  v9 = v3;
  objc_msgSend(v5, "readResources:handler:", v4, v10);

}

void sub_1000D2CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1000D2CCC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  objc_class *v15;
  NSString *v16;
  void *v17;
  void *v18;
  double v19;
  void *v20;
  double v21;
  BOOL v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  NSObject *v27;
  uint64_t v28;
  objc_class *v29;
  NSString *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  _QWORD v35[5];
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[16];
  _BYTE v47[128];

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);
  if (!v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v8 = v5;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v43;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v43 != v10)
            objc_enumerationMutation(v8);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v11), "objectForKeyedSubscript:", CFSTR("GKRequestIDs")));
          objc_msgSend(v7, "unionSet:", v12);

          v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
      }
      while (v9);
    }

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v7, "count");
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v15 = (objc_class *)objc_opt_class(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), v14);
      v16 = NSStringFromClass(v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("GKRetryAfter-%@"), v17));
      objc_msgSend(v13, "doubleForKey:", v18);
      if (v19 == 0.0
        || (v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:")), objc_msgSend(v20, "timeIntervalSinceNow"), v22 = v21 > 0.0, v20, !v22))
      {
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472;
        v35[2] = sub_1000D30DC;
        v35[3] = &unk_1002C1CE0;
        v32 = *(void **)(a1 + 32);
        v35[4] = *(_QWORD *)(a1 + 40);
        v36 = v8;
        v33 = v7;
        v34 = *(_QWORD *)(a1 + 56);
        v37 = v33;
        v41 = v34;
        v38 = v13;
        v39 = v18;
        v40 = *(id *)(a1 + 32);
        objc_msgSend(v32, "perform:", v35);

      }
      else
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, &off_1002DC450));
        objc_msgSend(*(id *)(a1 + 32), "setError:", v23);

        v25 = (void *)os_log_GKGeneral;
        if (!os_log_GKGeneral)
        {
          v26 = (id)GKOSLoggers(v24);
          v25 = (void *)os_log_GKGeneral;
        }
        v27 = v25;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          v29 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 40), v28);
          v30 = NSStringFromClass(v29);
          v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
          sub_1000D40AC(v31, (uint64_t)v46, v27);
        }

      }
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000D3014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1000D30DC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(v4 + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000D31FC;
  v10[3] = &unk_1002C1CB8;
  v10[4] = v4;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 80);
  v11 = v7;
  v16 = v8;
  v12 = *(id *)(a1 + 56);
  v13 = *(id *)(a1 + 64);
  v14 = *(id *)(a1 + 72);
  v15 = v3;
  v9 = v3;
  objc_msgSend(v6, "writeResources:handler:", v5, v10);

}

void sub_1000D31C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1000D31FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  id *v10;
  uint64_t v11;
  void *v12;
  id v13;

  v3 = a2;
  v13 = v3;
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("retryTime")));
    objc_msgSend(v5, "doubleValue");
    v7 = v6;

    if (v7 > 0.0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", v7));
      v9 = *(void **)(a1 + 48);
      objc_msgSend(v8, "timeIntervalSinceReferenceDate");
      objc_msgSend(v9, "setDouble:forKey:", *(_QWORD *)(a1 + 56));

    }
  }
  else
  {
    v10 = *(id **)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[6], "databaseConnection"));
    objc_msgSend(v10, "deleteSubmittedRequestsWithIDs:onConnection:", v11, v12);

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
  }
  objc_msgSend(*(id *)(a1 + 64), "setError:", v13);
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

void sub_1000D32F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D3334(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t))(v1 + 16))(v1);

}

void sub_1000D3388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D3454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000D3468(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  dispatch_queue_global_t global_queue;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  char v12;
  _QWORD v13[5];
  id v14;
  id v15;
  id v16;
  char v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDelayedRequestWriter.mm", 191, "-[GKDelayedRequestWriter writeResources:handler:]_block_invoke"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v2));

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000D363C;
  v13[3] = &unk_1002C1E70;
  v4 = *(void **)(a1 + 40);
  v13[4] = *(_QWORD *)(a1 + 32);
  v14 = v4;
  v5 = v3;
  v15 = v5;
  v17 = *(_BYTE *)(a1 + 56);
  v16 = *(id *)(a1 + 48);
  objc_msgSend(v5, "perform:", v13);
  global_queue = dispatch_get_global_queue(0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000D3CD4;
  v9[3] = &unk_1002C1E98;
  v8 = v5;
  v10 = v8;
  v12 = *(_BYTE *)(a1 + 56);
  v11 = *(id *)(a1 + 48);
  objc_msgSend(v8, "notifyOnQueue:block:", v7, v9);

}

void sub_1000D35EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27)
{
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1000D363C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = *(void **)(v4 + 40);
  v10 = _NSConcreteStackBlock;
  v11 = 3221225472;
  v12 = sub_1000D3760;
  v13 = &unk_1002C1E48;
  v14 = v4;
  v15 = v5;
  v16 = *(id *)(a1 + 48);
  v7 = v3;
  v17 = v7;
  objc_msgSend(v6, "writeResources:handler:", v15, &v10);
  if (!*(_BYTE *)(a1 + 64))
  {
    v8 = *(_QWORD *)(a1 + 56);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error", v10, v11, v12, v13, v14, v15, v16));
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);

  }
}

void sub_1000D3724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

uint64_t sub_1000D3760(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  _QWORD block[5];
  id v8;
  id v9;

  if (!a2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 40);
    v5 = *(NSObject **)(v3 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000D37FC;
    block[3] = &unk_1002C1E20;
    block[4] = v3;
    v8 = v4;
    v9 = *(id *)(a1 + 48);
    dispatch_async(v5, block);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1000D37FC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourcesPending"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "setByAddingObjectsFromSet:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 32), "setResourcesPending:", v3);

  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000D38E0;
  v8[3] = &unk_1002C1D80;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 32);
  v9 = v6;
  v10 = v7;
  objc_msgSend(v4, "batchAndPerformInGroup:block:", v6, v8);

}

void sub_1000D38B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1000D38E0(int8x16_t *a1)
{
  int8x16_t v1;
  _QWORD v2[4];
  int8x16_t v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000D396C;
  v2[3] = &unk_1002C1DF8;
  v1 = a1[2];
  v3 = vextq_s8(v1, v1, 8uLL);
  objc_msgSend((id)v1.i64[0], "perform:", v2);

}

void sub_1000D3958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1000D396C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  id v7;
  _QWORD block[5];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = *(NSObject **)(v4 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D3A00;
  block[3] = &unk_1002C1DD0;
  block[4] = v4;
  v9 = v5;
  v10 = v3;
  v7 = v3;
  dispatch_async(v6, block);

}

void sub_1000D3A00(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourcesPending"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
  objc_msgSend(*(id *)(a1 + 32), "setResourcesPending:", v3);

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000D3B00;
  v5[3] = &unk_1002C1DA8;
  v4 = *(void **)(a1 + 40);
  v6 = *(id *)(a1 + 32);
  v7 = v4;
  v8 = *(id *)(a1 + 48);
  objc_msgSend(v6, "readAndSubmitDelayedRequestsOfResources:handler:", v2, v5);

}

void sub_1000D3ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1000D3B00(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  id (*v15)(uint64_t);
  void *v16;
  id v17;
  uint64_t v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  objc_msgSend(v4, "setAchievementsRateLimitedCurrentState:", 0);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  objc_msgSend(v5, "setAchievementsRateLimitingCurrentNumberOfRequests:", 0);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  objc_msgSend(v6, "setScoresRateLimitedCurrentState:", 0);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  objc_msgSend(v7, "setScoresRateLimitingCurrentNumberOfRequests:", 0);

  if ((objc_opt_respondsToSelector(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), "refreshDataType") & 1) != 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
    v9 = *(void **)(a1 + 40);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "replyQueue"));
    v13 = _NSConcreteStackBlock;
    v14 = 3221225472;
    v15 = sub_1000D3CA4;
    v16 = &unk_1002C1D80;
    v11 = v8;
    v12 = *(_QWORD *)(a1 + 32);
    v17 = v11;
    v18 = v12;
    objc_msgSend(v9, "notifyOnQueue:block:", v10, &v13);

  }
  objc_msgSend(*(id *)(a1 + 40), "setError:", v3, v13, v14, v15, v16);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000D3C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1000D3CA4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "refreshContentsForDataType:userInfo:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "refreshDataType"), 0);
}

void sub_1000D3CD4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v2)
  {
    if (!os_log_GKGeneral)
      v4 = (id)GKOSLoggers(v3);
    v5 = os_log_GKDaemon;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
      v9 = 138412290;
      v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&v9, 0xCu);

    }
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
}

void sub_1000D3DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D3EC8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000D3F54;
  v3[3] = &unk_1002C1A30;
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v2, "writeResources:handler:", v1, v3);

}

void sub_1000D3F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1000D3F54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000D403C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = 138412290;
  v5 = v3;
  sub_100027A34((void *)&_mh_execute_header, a2, a3, "Unable to delete delayed requests with ids: %@", (uint8_t *)&v4);
}

void sub_1000D40AC(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100027A34((void *)&_mh_execute_header, a3, (uint64_t)a3, "%@ - Not submitting delayed requests because retry time interval has not expired. Will try again", (uint8_t *)a2);

}

void sub_1000D42C0(_QWORD *a1)
{
  id v2;
  id v3;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithContentsOfFile:](NSMutableDictionary, "dictionaryWithContentsOfFile:", a1[4]));
  if (!v2)
    v2 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = v2;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", &off_1002DB760, a1[5]);
  objc_msgSend(v3, "writeToFile:atomically:", a1[4], 1);
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_1000D4400(uint64_t a1)
{
  id v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "friendSuggestionsDenyListLocation"));
  v1 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v1, "writeToFile:atomically:", v2, 1);

}

void sub_1000D4538(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[GKContactDenier deniedContactIdentifiers]";
  v4 = 2112;
  v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s error: %@", (uint8_t *)&v2, 0x16u);
}

void sub_1000D4758(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  id v14;
  NSObject *v15;
  uint8_t v16[16];
  _QWORD v17[5];
  id v18;
  id v19;
  uint8_t *v20;
  uint8_t buf[8];
  uint8_t *v22;
  uint64_t v23;
  int v24;

  v2 = objc_msgSend(*(id *)(a1 + 32), "inFlightProvision");
  if ((v2 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v3 = (id)GKOSLoggers(v2);
    v4 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Provisioning pseudonym", buf, 2u);
    }
    objc_msgSend(*(id *)(a1 + 32), "setInFlightProvision:", 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/Pseudonym/GKFireworksPseudonymManager.m", 56, "-[GKFireworksPseudonymManager provisionPseudonymIfNeeded:]_block_invoke"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v5));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "service"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pseudonymPropertiesWithFeatureID:scopeID:expiryDurationInSeconds:", CFSTR("GamecenterMultiplayerFastsync"), 0, 86400.0));

    *(_QWORD *)buf = 0;
    v22 = buf;
    v23 = 0x2020000000;
    v24 = 0;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1000D4A54;
    v17[3] = &unk_1002C1F38;
    v17[4] = *(_QWORD *)(a1 + 32);
    v9 = v8;
    v18 = v9;
    v20 = buf;
    v19 = *(id *)(a1 + 40);
    objc_msgSend(v6, "perform:", v17);
    v10 = objc_msgSend(v6, "waitWithTimeout:", 60.0);
    if (v10)
    {
      v10 = (id)GKAtomicCompareAndSwap32(0, 1, v22 + 24);
      if ((_DWORD)v10)
      {
        if (!os_log_GKGeneral)
          v11 = (id)GKOSLoggers(v10);
        v12 = os_log_GKMatch;
        if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Timeout while handling pseudonym provision.", v16, 2u);
        }
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:description:](NSError, "userErrorForCode:description:", 28, CFSTR("Connection timeout.")));
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

      }
    }
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v10);
    v15 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Provisioning pseudonym task done.", v16, 2u);
    }

    _Block_object_dispose(buf, 8);
  }
}

void sub_1000D4A34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000D4A54(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "service"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000D4B0C;
  v9[3] = &unk_1002C1F10;
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(void **)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v9[4] = *(_QWORD *)(a1 + 32);
  v12 = v6;
  v10 = v7;
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "provisionPseudonymWithProperties:completion:", v5, v9);

}

void sub_1000D4B0C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;

  v5 = a2;
  v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_1000D4BE8;
  v12[3] = &unk_1002C1EE8;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v14 = v6;
  v15 = v8;
  v18 = v7;
  v12[1] = 3221225472;
  v13 = v5;
  v16 = v9;
  v17 = *(id *)(a1 + 48);
  v10 = v6;
  v11 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v12);

}

uint64_t sub_1000D4BE8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v7 = 138412546;
    v8 = v4;
    v9 = 2112;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Provisioned pseudonym %@ %@", (uint8_t *)&v7, 0x16u);
  }
  objc_msgSend(*(id *)(a1 + 48), "setInFlightProvision:", 0);
  if (GKAtomicCompareAndSwap32(0, 1, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_1000D4DB4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  void *v25;
  id v26;
  id v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  id obj;
  uint64_t v33;
  id v34;
  uint64_t v35;
  _QWORD v36[5];
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  uint8_t v47[128];
  uint8_t buf[4];
  void *v49;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v4 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v49 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Revoking pseudonym: %@.", buf, 0xCu);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/Pseudonym/GKFireworksPseudonymManager.m", 90, "-[GKFireworksPseudonymManager revokePseudonym:withCompletionHandler:]_block_invoke"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v5));

  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "service"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pseudonymURIMap"));

  obj = v8;
  v34 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
  if (v34)
  {
    v33 = *(_QWORD *)v43;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v43 != v33)
          objc_enumerationMutation(obj);
        v35 = v9;
        v10 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * v9);
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "service"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "pseudonymURIMap"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v10));

        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v39;
          do
          {
            for (i = 0; i != v15; i = (char *)i + 1)
            {
              if (*(_QWORD *)v39 != v16)
                objc_enumerationMutation(v13);
              v18 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i);
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "URI"));
              v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "prefixedURI"));
              v21 = objc_msgSend(v20, "isEqualToString:", *(_QWORD *)(a1 + 32));

              if (v21)
              {
                if (!os_log_GKGeneral)
                  v23 = (id)GKOSLoggers(v22);
                v24 = os_log_GKMatch;
                if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  v49 = v18;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Revoking {pseudonym: %@}", buf, 0xCu);
                }
                objc_msgSend(v6, "enter");
                v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "service"));
                v36[0] = _NSConcreteStackBlock;
                v36[1] = 3221225472;
                v36[2] = sub_1000D526C;
                v36[3] = &unk_1002C1F60;
                v36[4] = v18;
                v37 = v6;
                objc_msgSend(v25, "revokePseudonym:completion:", v18, v36);

              }
            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
          }
          while (v15);
        }

        v9 = v35 + 1;
      }
      while ((id)(v35 + 1) != v34);
      v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
    }
    while (v34);
  }

  v26 = objc_msgSend(v6, "waitWithTimeout:", 60.0);
  if (v26)
  {
    if (!os_log_GKGeneral)
      v27 = (id)GKOSLoggers(v26);
    v28 = os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      v29 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v49 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Timeout while revoking pseudonym: %@.", buf, 0xCu);
    }
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Timeout while revoking pseudonym: %@."), *(_QWORD *)(a1 + 32)));
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:description:](NSError, "userErrorForCode:description:", 35, v30));

  }
  else
  {
    v31 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000D526C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;

  v4 = a3;
  v5 = v4;
  if (!os_log_GKGeneral)
    v6 = (id)GKOSLoggers(v4);
  v7 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = 138412546;
    v10 = v8;
    v11 = 2112;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Revoked {pseudonym: %@, error: %@}", (uint8_t *)&v9, 0x16u);
  }
  objc_msgSend(*(id *)(a1 + 40), "leave");

}

uint64_t finalize_stmt_applier(int a1, sqlite3_stmt *pStmt)
{
  return sqlite3_finalize(pStmt);
}

void sub_1000D5BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 144), 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000D5BF8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  sqlite3 *v5;
  uint64_t v6;
  int v7;
  id v9;
  NSObject *v10;
  int v11;
  void *v12;
  uint64_t v13;
  unsigned __int8 v14;
  id v15;
  void *v16;
  uint64_t v17;
  sqlite3 *v18;
  NSString *v19;
  id v20;
  NSObject *v21;
  int v22;
  void *v23;
  id v24;
  int v25;
  id v26;
  int v27;
  uint8_t buf[8];

  v4 = a3;
  v5 = *(sqlite3 **)(*(_QWORD *)(a1 + 32) + 24);
  v27 = 1;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = sqlite3_file_control(v5, 0, 10, &v27);
  v6 = sqlite3_exec(*(sqlite3 **)(*(_QWORD *)(a1 + 32) + 24), "PRAGMA journal_mode=WAL; PRAGMA foreign_keys=ON;",
         0,
         0,
         (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v6;
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v7 == 13 || v7 == 10)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(v6);
    v10 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GKDatabaseConnection can't exec on database due to rc2=%d - closing and retrying", buf, 8u);
    }
    sqlite3_close(*(sqlite3 **)(*(_QWORD *)(a1 + 32) + 24));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v26 = 0;
    v14 = objc_msgSend(v12, "removeItemAtPath:error:", v13, &v26);
    v15 = v26;
    if ((v14 & 1) != 0)
    {
      v16 = v15;
      v17 = sqlite3_open_v2((const char *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "cStringUsingEncoding:", 4), (sqlite3 **)(*(_QWORD *)(a1 + 32) + 24), 6, 0);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v17;
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
      {
        *(_QWORD *)buf = 0;
        v18 = *(sqlite3 **)(*(_QWORD *)(a1 + 32) + 24);
        v25 = 1;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = sqlite3_file_control(v18, 0, 10, &v25);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = sqlite3_exec(*(sqlite3 **)(*(_QWORD *)(a1 + 32) + 24), "PRAGMA journal_mode=WAL; PRAGMA foreign_keys=ON;",
                                                                        0,
                                                                        0,
                                                                        (char **)buf);

        goto LABEL_13;
      }
      if (!os_log_GKGeneral)
        v20 = (id)GKOSLoggers(v17);
      v21 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        v22 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "GKDatabaseConnection couldn't recreate the database due to returnFlagFileOpen=%d - closing and throwing exception", buf, 8u);
      }
      sqlite3_close(*(sqlite3 **)(*(_QWORD *)(a1 + 32) + 24));
      v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("failed to open database (%d)"), *(unsigned int *)(a1 + 72));
    }
    else
    {
      v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("failed to set pragmas for database connection and to remove existing database.(%d)"), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v24 = (id)objc_claimAutoreleasedReturnValue(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", CFSTR("GKDatabaseInaccessibleException"), v23, 0));

    objc_exception_throw(v24);
  }
LABEL_13:

}

void sub_1000D5FBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  uint8_t v9[16];

  v1 = a1 + 32;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 32) + 8), (CFDictionaryApplierFunction)finalize_stmt_applier, 0);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(*(_QWORD *)v1 + 8));
  v2 = sqlite3_close(*(sqlite3 **)(*(_QWORD *)v1 + 24));
  if ((_DWORD)v2)
  {
    v3 = v2;
    if (!os_log_GKGeneral)
      v4 = (id)GKOSLoggers(v2);
    v5 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000D69C4(v1, v5, v3);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v1 + 24) = 0;
  }
  v6 = GKAtomicCompareAndSwap32Barrier(1, 0, &unk_100317F20);
  if ((v6 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v6);
    v8 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "databaseCloseReentrancyCount out of sync", v9, 2u);
    }
  }
}

uint64_t sub_1000D61EC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
}

uint64_t sub_1000D6308(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
}

void sub_1000D6458(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  dispatch_queue_global_t global_queue;
  NSObject *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  sqlite3_exec(*(sqlite3 **)(*(_QWORD *)(a1 + 32) + 24), "BEGIN", 0, 0, 0);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  if (sqlite3_exec(*(sqlite3 **)(*(_QWORD *)(a1 + 32) + 24), "COMMIT", 0, 0, 0))
  {
    v2 = objc_claimAutoreleasedReturnValue(+[NSError _gkErrorForDatabase:](NSError, "_gkErrorForDatabase:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)));
    v3 = (void *)v2;
    if (!os_log_GKGeneral)
      v4 = (id)GKOSLoggers(v2);
    v5 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
      sub_1000D6B00((uint64_t)v3, v5);
  }
  else
  {
    v3 = 0;
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v7 = objc_claimAutoreleasedReturnValue(global_queue);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000D674C;
  v9[3] = &unk_1002BB450;
  v11 = *(id *)(a1 + 48);
  v8 = v3;
  v10 = v8;
  dispatch_async(v7, v9);

}

void sub_1000D660C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1000D674C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1000D67C0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_1000D67D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "not opening the database at this time, as the device is currently locked", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000D6800(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
  sub_10003E364();
  sub_1000D67C0((void *)&_mh_execute_header, v6, v7, "unable to reset prepared statement for SQL: %@ due to result = %@", v8, v9, v10, v11, 2u);

  sub_1000279A0();
}

void sub_1000D68A4(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
  sub_10003E364();
  sub_1000D67C0((void *)&_mh_execute_header, v6, v7, "unable to create prepared statement for SQL: %@ due to result=%@", v8, v9, v10, v11, 2u);

  sub_1000279A0();
}

void sub_1000D6948(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v3 = 136315138;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "unable to sqlite3_exec  due to error %s", (uint8_t *)&v3, 0xCu);
}

void sub_1000D69C4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  int v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
  v7 = 138412546;
  v8 = v4;
  sub_10003E364();
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "unable to close database connection to %@due to result = %@", (uint8_t *)&v7, 0x16u);

  sub_1000279A0();
}

void sub_1000D6A7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "sqlite database was closed by another process, reopening (performSync)", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000D6AA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "sqlite database was closed by another process, reopening(performAsync)", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000D6AD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "sqlite database was closed by another process, reopening(performAsyncTransaction)", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000D6B00(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Unable to write record to cache. Rolling back transaction: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000D6D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D6D34(uint64_t a1, sqlite3 *a2)
{
  uint64_t result;

  result = sqlite3_exec(a2, (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"), 0, 0, 0);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1000D7CD0(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ttrURLString"));
  v5 = 138412290;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Can't handle action of filing a radar due to invalid url: %@", (uint8_t *)&v5, 0xCu);

}

void sub_1000D7F74(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  id v18;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(a1 + 48);
  v5 = (void *)v2[1];
  v6 = v2[2];
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "credential"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "playerInternal"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_gkPlistXMLDataForClient:player:", v6, v8));
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v10 + 24);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000D8070;
  v15[3] = &unk_1002C2008;
  v16 = v11;
  v14 = *(id *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = v14;
  objc_msgSend(v5, "readDataForBagKey:postData:client:credential:completion:", v3, v9, v12, v13, v15);

}

void sub_1000D8070(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint8_t buf[16];

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (v8)
  {
    if (!os_log_GKGeneral)
      v10 = (id)GKOSLoggers(v8);
    v11 = os_log_GKError;
    v8 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v8)
      sub_1000D853C(a1, (uint64_t)v9, v11);
  }
  if (*(_QWORD *)(a1 + 48))
  {
    if (!os_log_GKGeneral)
      v12 = (id)GKOSLoggers(v8);
    v13 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "postRequest:Response handler exist for read data for bag key call", buf, 2u);
    }
    if (v7)
    {
      v19 = 0;
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary _gkDictionaryWithServerData:error:](NSDictionary, "_gkDictionaryWithServerData:error:", v7, &v19));
      v15 = v19;
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[GKResource resourceWithID:representedItem:TTL:](GKResource, "resourceWithID:representedItem:TTL:", *(_QWORD *)(a1 + 32), v14, a4));
    }
    else
    {
      v16 = 0;
      v14 = 0;
      v15 = 0;
    }
    v17 = *(_QWORD *)(a1 + 48);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "errorForBagError:serverError:", v9, v15));
    (*(void (**)(uint64_t, void *, void *))(v17 + 16))(v17, v16, v18);

  }
}

void sub_1000D8344(uint64_t a1)
{
  id v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint8_t buf[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "postRequest: forBagKey: result:", buf, 2u);
  }
  v4 = *(_QWORD **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v7 = (void *)v4[1];
  v8 = v4[2];
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "credential"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "playerInternal"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_gkPlistXMLDataForClient:player:", v8, v10));
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000D848C;
  v15[3] = &unk_1002BB7A0;
  v16 = *(id *)(a1 + 56);
  objc_msgSend(v7, "readDataForBagKey:postData:client:credential:completion:", v5, v11, v13, v14, v15);

}

uint64_t sub_1000D848C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  return result;
}

void sub_1000D853C(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "postRequest:Failed to read data for bag key (%@) due to error: %@", (uint8_t *)&v4, 0x16u);
}

void sub_1000D8898(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_100317F28;
  qword_100317F28 = (uint64_t)v1;

  objc_msgSend((id)qword_100317F28, "setDateStyle:", 1);
  _objc_msgSend((id)qword_100317F28, "setTimeStyle:", 2);
}

id sub_1000D8B60(id a1, NSString *a2, unint64_t a3)
{
  return +[GKResource resourceWithID:](GKResource, "resourceWithID:", a2);
}

void sub_1000D8D60(uint64_t a1)
{
  GKResource *v1;
  void *v2;

  v1 = -[GKResource initWithResourceID:representedItem:TTL:]([GKResource alloc], "initWithResourceID:representedItem:TTL:", *(_QWORD *)(a1 + 32), 0, 0.0);
  v2 = (void *)qword_100317F38;
  qword_100317F38 = (uint64_t)v1;

}

void sub_1000D8E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D8E6C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

BOOL sub_1000D8EBC(id a1, GKResource *a2, BOOL *a3)
{
  return -[GKResource isExpired](a2, "isExpired", a3);
}

BOOL sub_1000D8ED0(id a1, GKResource *a2, BOOL *a3)
{
  return -[GKResource isInvalid](a2, "isInvalid", a3);
}

BOOL sub_1000D8EE4(id a1, GKResource *a2, BOOL *a3)
{
  GKResource *v3;
  unsigned int v4;

  v3 = a2;
  if (-[GKResource isExpired](v3, "isExpired"))
    LOBYTE(v4) = 0;
  else
    v4 = !-[GKResource isInvalid](v3, "isInvalid");

  return v4;
}

BOOL sub_1000D8F34(id a1, GKResource *a2, BOOL *a3)
{
  GKResource *v3;
  unsigned __int8 v4;

  v3 = a2;
  if (-[GKResource isExpired](v3, "isExpired"))
    v4 = 1;
  else
    v4 = -[GKResource isInvalid](v3, "isInvalid");

  return v4;
}

BOOL sub_1000D8F9C(id a1, GKResource *a2)
{
  GKResource *v2;
  unsigned __int8 v3;

  v2 = a2;
  if (-[GKResource isInvalid](v2, "isInvalid"))
    v3 = 1;
  else
    v3 = -[GKResource isExpired](v2, "isExpired");

  return v3;
}

BOOL sub_1000D8FEC(id a1, GKResource *a2)
{
  return -[GKResource isExpired](a2, "isExpired");
}

BOOL sub_1000D9000(id a1, GKResource *a2)
{
  return -[GKResource isInvalid](a2, "isInvalid");
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSString *a3)
{
  int v5;
  NSString *v6;
  NSString *v7;

  v7 = a3;
  v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    v6 = objc_retainAutorelease(v7);
    sqlite3_bind_text(a1, v5, -[NSString UTF8String](v6, "UTF8String"), (int)-[NSString lengthOfBytesUsingEncoding:](v6, "lengthOfBytesUsingEncoding:", 4), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }

}

void sub_1000D93E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t GKBindParam(sqlite3_stmt *a1, const char *a2, sqlite3_int64 a3)
{
  uint64_t result;

  result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
    return sqlite3_bind_int64(a1, result, a3);
  return result;
}

{
  uint64_t result;

  result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
    return sqlite3_bind_int64(a1, result, a3);
  return result;
}

uint64_t GKBindParam(sqlite3_stmt *a1, const char *a2, int a3)
{
  uint64_t result;

  result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
    return sqlite3_bind_int(a1, result, a3);
  return result;
}

{
  uint64_t result;

  result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
    return sqlite3_bind_int(a1, result, a3);
  return result;
}

{
  uint64_t result;

  result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
    return sqlite3_bind_int(a1, result, a3);
  return result;
}

{
  uint64_t result;

  result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
    return sqlite3_bind_int(a1, result, a3);
  return result;
}

uint64_t GKBindParam(sqlite3_stmt *a1, const char *a2, double a3)
{
  uint64_t result;

  result = sqlite3_bind_parameter_index(a1, a2);
  if ((int)result >= 1)
    return sqlite3_bind_double(a1, result, a3);
  return result;
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSDate *a3)
{
  int v5;
  void *v6;
  NSDate *v7;

  v7 = a3;
  v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSDate _gkServerTimestamp](v7, "_gkServerTimestamp"));
    sqlite3_bind_int64(a1, v5, (sqlite3_int64)objc_msgSend(v6, "longLongValue"));

  }
}

void sub_1000D9618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSNumber *a3)
{
  int v5;
  double v6;
  NSNumber *v7;

  v7 = a3;
  v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    -[NSNumber doubleValue](v7, "doubleValue");
    sqlite3_bind_double(a1, v5, v6);
  }

}

void sub_1000D9698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void GKBindParam(sqlite3_stmt *a1, const char *a2, NSData *a3)
{
  int v5;
  NSData *v6;
  NSData *v7;

  v7 = a3;
  v5 = sqlite3_bind_parameter_index(a1, a2);
  if (v5 >= 1)
  {
    v6 = objc_retainAutorelease(v7);
    sqlite3_bind_blob(a1, v5, -[NSData bytes](v6, "bytes"), (int)-[NSData length](v6, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }

}

void sub_1000D9778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D9AFC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKAMPController controller](GKAMPController, "controller"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000D9BC0;
  v7[3] = &unk_1002C2228;
  v10 = *(id *)(a1 + 48);
  v5 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  objc_msgSend(v4, "getBagWithCompletion:", v7);

}

void sub_1000D9BC0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringForKey:", CFSTR("arcade-iap-family-id")));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000D9CE4;
    v9[3] = &unk_1002C2200;
    v6 = *(void **)(a1 + 40);
    v9[4] = *(_QWORD *)(a1 + 32);
    v10 = v6;
    v11 = *(id *)(a1 + 48);
    v12 = *(id *)(a1 + 56);
    objc_msgSend(v5, "valueWithCompletion:", v9);

  }
  else
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(0);
    v8 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000D9DB0(v8);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

uint64_t sub_1000D9CE4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v4 = objc_msgSend(*(id *)(a1 + 32), "hasConsumedArcadeSubscription:arcadeFamilyId:", *(_QWORD *)(a1 + 40), a2);
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "expiryDate"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    v8 = objc_msgSend(v6, "compare:", v7);

    v9 = 1;
    if (((a2 != 0) & v4) != 0)
      v9 = 2;
    if (v8 == (id)1)
      v10 = 3;
    else
      v10 = v9;
  }
  else if (((a2 != 0) & v4) != 0)
  {
    v10 = 2;
  }
  else
  {
    v10 = 1;
  }
  objc_msgSend(*(id *)(a1 + 32), "setArcadeSubscriptionState:", v10);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1000D9DB0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot setup arcade subscription state without a bag.", v1, 2u);
}

void sub_1000D9E30(id a1)
{
  GKBadgeController *v1;
  void *v2;

  v1 = objc_alloc_init(GKBadgeController);
  v2 = (void *)qword_100317F48;
  qword_100317F48 = (uint64_t)v1;

}

void sub_1000DA040(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;

  if (qword_100317F58 == *(_QWORD *)(a1 + 40))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 4));
    for (i = 0; i != 4; ++i)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_plistKeyForBadgeType:", i));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i + 8), v4);

    }
    v29 = 0;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v2, 200, 0, &v29));
    v6 = v29;
    v7 = v6;
    if (v5)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_badgeCountURL"));
      v28 = v7;
      v9 = objc_msgSend(v5, "writeToURL:options:error:", v8, 1, &v28);
      v10 = v28;

      if ((v9 & 1) == 0)
      {
        if (!os_log_GKGeneral)
          v12 = (id)GKOSLoggers(v11);
        v13 = os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
          sub_1000DB9D8((uint64_t)v10, v13, v14, v15, v16, v17, v18, v19);
      }
    }
    else
    {
      if (!os_log_GKGeneral)
        v20 = (id)GKOSLoggers(v6);
      v21 = os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_1000DB974((uint64_t)v7, v21, v22, v23, v24, v25, v26, v27);
      v10 = v7;
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 0;

  }
}

void sub_1000DA20C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t k;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;

  v2 = *(_QWORD **)(a1 + 32);
  if (!v2[1])
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_badgeCountURL"));
    v36 = 0;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:options:error:](NSData, "dataWithContentsOfURL:options:error:", v3, 1, &v36));
    v5 = v36;

    if (v4)
    {
      v34 = 0;
      v35 = 200;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v4, 1, &v35, &v34));
      v7 = v34;

      if (v6)
      {
        for (i = 1; i != 5; ++i)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_plistKeyForBadgeType:", i - 1));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v10));
          v12 = v11;
          if (v11)
          {
            v13 = *(_QWORD *)(a1 + 32);
            v14 = v11;
            v15 = *(void **)(v13 + 8 * i);
            *(_QWORD *)(v13 + 8 * i) = v14;
          }
          else
          {
            v16 = objc_alloc_init((Class)NSMutableDictionary);
            v17 = *(_QWORD *)(a1 + 32);
            v15 = *(void **)(v17 + 8 * i);
            *(_QWORD *)(v17 + 8 * i) = v16;
          }

        }
      }
      else
      {
        if (!os_log_GKGeneral)
          v22 = (id)GKOSLoggers(v8);
        v23 = os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
          sub_1000DBA3C((uint64_t)v7, v23, v24, v25, v26, v27, v28, v29);
        for (j = 8; j != 40; j += 8)
        {
          v31 = objc_alloc_init((Class)NSMutableDictionary);
          v32 = *(_QWORD *)(a1 + 32);
          v33 = *(void **)(v32 + j);
          *(_QWORD *)(v32 + j) = v31;

        }
      }

    }
    else
    {
      for (k = 8; k != 40; k += 8)
      {
        v19 = objc_alloc_init((Class)NSMutableDictionary);
        v20 = *(_QWORD *)(a1 + 32);
        v21 = *(void **)(v20 + k);
        *(_QWORD *)(v20 + k) = v19;

      }
      v7 = v5;
    }

  }
}

void sub_1000DA618(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  uint8_t v9[16];

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "badgeBundleID:badgeCount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v5);
    v8 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GKBadgeController - RegisterBadgePermission denied", v9, 2u);
    }
  }

}

void sub_1000DA6C8(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = GKGameCenterIdentifier;
  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", GKGameCenterIdentifier))
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
    objc_msgSend(v3, "setBadgeCount:forType:", objc_msgSend(*(id *)(a1 + 40), "_badgeCountForBundleID:badgeType:", v2, 0), 0);
    objc_msgSend(v3, "setBadgeCount:forType:", objc_msgSend(*(id *)(a1 + 40), "_badgeCountForBundleID:badgeType:", v2, 1), 1);
    objc_msgSend(v3, "setBadgeCount:forType:", objc_msgSend(*(id *)(a1 + 40), "_badgeCountForBundleID:badgeType:", v2, 2), 2);

  }
}

id sub_1000DAE4C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_badgeCountForBundleID:badgeType:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_1000DB24C(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_dictionaryForBadgeType:", *(_QWORD *)(a1 + 48)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 56)));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v2, *(_QWORD *)(a1 + 40));

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 1;
  objc_msgSend(*(id *)(a1 + 32), "badgeApplicationWithBundleID:badgeCount:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "_totalBadgeCountForBundleID:", *(_QWORD *)(a1 + 40)));

}

void sub_1000DB338(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  for (i = 8; i != 40; i += 8)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + i), "allKeys"));
    objc_msgSend(v2, "addObjectsFromArray:", v4);

  }
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = v2;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(a1 + 32), "badgeApplicationWithBundleID:badgeCount:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v9), objc_msgSend(*(id *)(a1 + 32), "_totalBadgeCountForBundleID:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v9), (_QWORD)v12));
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v11 = GKGameCenterIdentifier;
  objc_msgSend(v10, "setBadgeCount:forType:", objc_msgSend(*(id *)(a1 + 32), "_badgeCountForBundleID:badgeType:", GKGameCenterIdentifier, 0), 0);
  objc_msgSend(v10, "setBadgeCount:forType:", objc_msgSend(*(id *)(a1 + 32), "_badgeCountForBundleID:badgeType:", v11, 1), 1);
  objc_msgSend(v10, "setBadgeCount:forType:", objc_msgSend(*(id *)(a1 + 32), "_badgeCountForBundleID:badgeType:", v11, 2), 2);

}

void sub_1000DB57C(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  for (i = 8; i != 40; i += 8)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + i), "allKeys"));
    objc_msgSend(v2, "addObjectsFromArray:", v4);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + i), "removeAllObjects");
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 1;
  }
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = v2;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(a1 + 32), "badgeApplicationWithBundleID:badgeCount:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v9), 0, (_QWORD)v11);
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v7);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  objc_msgSend(v10, "setBadgeCount:forType:", 0, 0);
  objc_msgSend(v10, "setBadgeCount:forType:", 0, 1);
  objc_msgSend(v10, "setBadgeCount:forType:", 0, 2);

}

void sub_1000DB880(uint64_t a1)
{
  id v2;
  _QWORD v3[4];
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "_totalBadgeCountForBundleID:", *(_QWORD *)(a1 + 40)))
  {
    v2 = objc_msgSend(objc_alloc((Class)UNUserNotificationCenter), "initWithBundleIdentifier:", *(_QWORD *)(a1 + 40));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000DB920;
    v3[3] = &unk_1002C2310;
    v4 = *(id *)(a1 + 48);
    objc_msgSend(v2, "requestAuthorizationWithOptions:completionHandler:", 1, v3);

  }
}

uint64_t sub_1000DB920(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000DB974(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "Failed to serialize badge counts %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000DB9D8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "Failed to write badge counts %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000DBA3C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "Failed to deserialize badge counts %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_1000DC1B4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  if (!v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Assertion failed")));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKCacheObject.m"));
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastPathComponent")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (self->_lookup != ((void *)0))\n[%s (%s:%d)]"), v5, "-[GKUniqueObjectIDLookup _populateWithContext:]_block_invoke", objc_msgSend(v7, "UTF8String"), 106));

    +[NSException raise:format:](NSException, "raise:format:", CFSTR("GameKit Exception"), CFSTR("%@"), v8);
    v4 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000DC338;
  v12[3] = &unk_1002C2338;
  v13 = *(id *)(a1 + 40);
  v9 = *(id *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 32);
  v14 = v9;
  v15 = v10;
  v16 = *(id *)(a1 + 56);
  v17 = v3;
  v11 = v3;
  objc_msgSend(v4, "writeToDictionary:", v12);

}

void sub_1000DC338(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  __int128 v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  NSObject *v18;
  const char *Name;
  __int128 v20;
  objc_class *cls;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];

  v3 = a2;
  objc_msgSend(v3, "removeAllObjects");
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = *(id *)(a1 + 32);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v35, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v24;
    *(_QWORD *)&v5 = 136315906;
    v20 = v5;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("objectID"), v20));
        v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
        v12 = (void *)v11;
        if (v10)
          v13 = v11 == 0;
        else
          v13 = 1;
        if (!v13)
        {
          v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v11));
          v15 = (void *)v14;
          if (v14)
          {
            if (!os_log_GKGeneral)
              v16 = (id)GKOSLoggers(v14);
            v17 = (void *)os_log_GKCache;
            if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
            {
              cls = *(objc_class **)(*(_QWORD *)(a1 + 48) + 8);
              v18 = v17;
              Name = class_getName(cls);
              *(_DWORD *)buf = v20;
              v28 = Name;
              v29 = 2112;
              v30 = v10;
              v31 = 2112;
              v32 = v15;
              v33 = 2112;
              v34 = v12;
              _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "UNIQUENESS FAILURE for %s:%@ and %@ found for %@", buf, 0x2Au);

            }
            objc_msgSend(*(id *)(a1 + 56), "addObject:", v15);
          }
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, v12);

        }
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v35, 16);
    }
    while (v6);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_1000DCBE4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v3 = a2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v9, (_QWORD)v11));
        if (v10)
          objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v10, v9);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

}

void sub_1000DCD14(id *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectRegisteredForID:", v5));
  if (v6)
  {
    objc_msgSend(a1[5], "setObject:forKeyedSubscript:", v6, v7);
    objc_msgSend(a1[6], "removeObject:", v5);
  }

}

void sub_1000DCD94(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKeyPath:", *(_QWORD *)(a1 + 32)));
  if (v3)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v4, v3);

}

void sub_1000DCDEC(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
  if (v3)
    goto LABEL_5;
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    v5 = (*(uint64_t (**)(uint64_t, id))(v4 + 16))(v4, v7);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      v3 = (void *)v6;
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);
LABEL_5:
      objc_msgSend(*(id *)(a1 + 48), "addObject:", v3);

    }
  }

}

void sub_1000DCE70(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "addEntriesFromDictionary:", *(_QWORD *)(a1 + 32));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

intptr_t sub_1000DCE9C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 32));
}

uint64_t sub_1000DD15C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1000DD168(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "addEntriesFromDictionary:", *(_QWORD *)(a1 + 32));
}

id sub_1000DE3DC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2);
}

void sub_1000DE53C(id a1)
{
  void *v1;

  v1 = (void *)qword_100317F60;
  qword_100317F60 = (uint64_t)&off_1002DC478;

}

void sub_1000DE830(id *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", v9));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "valueForKeyPath:", v5));
  v8 = v7;
  if (v7 != v6 && (objc_msgSend(v7, "isEqualToString:", v6) & 1) == 0)
  {
    objc_msgSend(a1[6], "addObject:", v9);
    objc_msgSend(a1[5], "setValue:forKeyPath:", v6, v5);
    objc_msgSend(a1[5], "deleteCachedImage:", v8);
  }

}

void sub_1000DEB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DEB7C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000DEB8C(uint64_t a1)
{

}

void sub_1000DEB94(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKeyPath:", a3));
  if (v5)
  {
    v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (!v6)
    {
      v7 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 4);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

      v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    }
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v10);
  }

}

void sub_1000DF028(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)(a1 + 32);
  v6 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKeyPath:", v6));
  objc_msgSend(v4, "deleteCachedImage:", v5);

  objc_msgSend(*(id *)(a1 + 32), "setValue:forKeyPath:", 0, v6);
}

void sub_1000DF2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DF308(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  void *v6;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "valueForKeyPath:"));

  if (v6)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

id sub_1000E03F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "setValue:forKeyPath:", 0, a3);
}

id sub_1000E0D10(id a1, GKPlayerInternal *a2, unint64_t a3)
{
  return -[GKPlayerInternal playerID](a2, "playerID", a3);
}

id sub_1000E0F20(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;

  v3 = *(objc_class **)(a1 + 40);
  v4 = a2;
  v5 = objc_msgSend([v3 alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v5, "setPlayerID:", v4);

  return v5;
}

void sub_1000E1B44(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  unsigned __int8 v8;
  id v9;

  v9 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "path"));
  v8 = objc_msgSend(v6, "fileExistsAtPath:", v7);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPhotoPending:", 0);
    *a4 = 1;
  }

}

uint64_t sub_1000E1BE8(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  if ((objc_msgSend(v2, "isEqualToString:", CFSTR("everyone")) & 1) != 0)
  {
    v3 = 0;
  }
  else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("friends")) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    objc_msgSend(v2, "isEqualToString:", CFSTR("me"));
    v3 = 2;
  }

  return v3;
}

uint64_t sub_1000E1C58(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  if ((objc_msgSend(v2, "isEqualToString:", GKGlobalFriendListAccessAllowed) & 1) != 0)
  {
    v3 = 0;
  }
  else if ((objc_msgSend(v2, "isEqualToString:", GKGlobalFriendListAccessDenied) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    objc_msgSend(v2, "isEqualToString:", GKGlobalFriendListAccessUndetermined);
    v3 = 2;
  }

  return v3;
}

void sub_1000E26EC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t isKindOfClass;
  void *v9;
  void *v10;
  id v11;

  v3 = a2;
  v5 = objc_opt_class(NSString, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "removeObject:", v3);
  }
  else
  {
    v7 = objc_opt_class(GKPlayerInternal, v6);
    isKindOfClass = objc_opt_isKindOfClass(v3, v7);
    if ((isKindOfClass & 1) != 0)
    {
      v9 = *(void **)(a1 + 32);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playerID"));
      objc_msgSend(v9, "removeObject:", v10);

    }
    else
    {
      if (!os_log_GKGeneral)
        v11 = (id)GKOSLoggers(isKindOfClass);
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_1000F6A14();
    }
  }

}

void sub_1000E296C(uint64_t a1, void *a2)
{
  id *v3;
  unsigned int v4;
  id v5;

  v5 = a2;
  if (objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v3 = (id *)(a1 + 40);
  }
  else if (objc_msgSend(*(id *)(a1 + 48), "containsObject:", v5))
  {
    v3 = (id *)(a1 + 56);
  }
  else if (objc_msgSend(*(id *)(a1 + 64), "containsObject:", v5))
  {
    v3 = (id *)(a1 + 72);
  }
  else
  {
    v4 = objc_msgSend(*(id *)(a1 + 80), "containsObject:", v5);
    v3 = (id *)(a1 + 96);
    if (v4)
      v3 = (id *)(a1 + 88);
  }
  objc_msgSend(*v3, "addObject:", v5);

}

id sub_1000E2B7C(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v3))
    v4 = v3;
  else
    v4 = 0;

  return v4;
}

void sub_1000E31F0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("bundle-id")));
  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v4, v3);

}

id sub_1000E324C(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;

  v3 = *(objc_class **)(a1 + 48);
  v4 = a2;
  v5 = objc_msgSend([v3 alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v4));

  objc_msgSend(v5, "updateWithGameDescriptor:", v6);
  return v5;
}

id sub_1000E32BC(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("bundle-id")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("short-bundle-version")));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("bundle-version")));
  v9 = (void *)v8;
  if (v7)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "shortBundleVersion"));
    if ((objc_msgSend(v2, "isEqualToString:", v7) & 1) == 0)
    {

LABEL_11:
      objc_msgSend(v6, "updateWithGameDescriptor:", v4);
      objc_msgSend(v6, "expire");
      objc_msgSend(v6, "invalidate");
      goto LABEL_12;
    }
    if (!v9)
    {

      goto LABEL_12;
    }
  }
  else if (!v8)
  {
    goto LABEL_12;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleVersion"));
  v11 = objc_msgSend(v10, "isEqualToString:", v9);

  if (v7)
  if ((v11 & 1) == 0)
    goto LABEL_11;
LABEL_12:
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "managedObjectContext"));
  v13 = *(void **)(a1 + 40);

  if (v12 != v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("The managed object context (moc) that requested a cached game object did not match the moc owned by the game. This is an illegal state and execution cannot continue.")));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKCacheObject.m"));
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "lastPathComponent")));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (game.managedObjectContext == moc)\n[%s (%s:%d)]"), v14, "+[GKGameCacheObject _gamesForFullGameDescriptors:context:]_block_invoke_3", objc_msgSend(v16, "UTF8String"), 1390));

    +[NSException raise:format:](NSException, "raise:format:", CFSTR("GameKit Exception"), CFSTR("%@"), v17);
  }

  return v6;
}

id sub_1000E4968(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("achievement-id")));
  v7 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)v7)
    *a4 = 1;
  return v7;
}

id sub_1000E4B10(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "managedObjectContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v3, v4));

  return v5;
}

GKListEntryCacheObject *__cdecl sub_1000E4B78(id a1, id a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v3;
  GKAchievementThatAFriendHasCacheObject *v4;

  v3 = a3;
  v4 = -[GKCacheObject initWithManagedObjectContext:]([GKAchievementThatAFriendHasCacheObject alloc], "initWithManagedObjectContext:", v3);

  return (GKListEntryCacheObject *)v4;
}

GKListEntryCacheObject *__cdecl sub_1000E4DF4(id a1, id a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v3;
  GKAchievementDescriptionCacheObject *v4;

  v3 = a3;
  v4 = -[GKCacheObject initWithManagedObjectContext:]([GKAchievementDescriptionCacheObject alloc], "initWithManagedObjectContext:", v3);

  return (GKListEntryCacheObject *)v4;
}

GKListEntryCacheObject *__cdecl sub_1000E56D0(id a1, id a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v3;
  GKAchievementCacheObject *v4;

  v3 = a3;
  v4 = -[GKCacheObject initWithManagedObjectContext:]([GKAchievementCacheObject alloc], "initWithManagedObjectContext:", v3);

  return (GKListEntryCacheObject *)v4;
}

void sub_1000E59A0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "groupIdentifier"));

  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v4);

}

id sub_1000E5A24(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  float v16;
  void *v17;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  if (v4)
  {

  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "groupIdentifier"));

    if (!v5)
      goto LABEL_9;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "internalRepresentation"));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));

    if (v10)
      goto LABEL_8;
  }
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "groupIdentifier"));
  if (v11)
  {
    v12 = (void *)v11;
    v13 = *(void **)(a1 + 32);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "groupIdentifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v14));

    if (v10)
    {
LABEL_8:
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "lastReportedDate"));
      objc_msgSend(v5, "setLastReportedDate:", v15);

      objc_msgSend(v10, "percentComplete");
      objc_msgSend(v5, "setPercentComplete:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerInternal internalRepresentation](GKPlayerInternal, "internalRepresentation"));
      objc_msgSend(v17, "setPlayerID:", *(_QWORD *)(a1 + 40));
      objc_msgSend(v5, "setPlayer:", v17);

    }
  }
LABEL_9:

  return v5;
}

GKGameRecordCacheObject *sub_1000E5FD8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  GKGameRecordCacheObject *v5;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleID"));
  if (!v4)
    goto LABEL_5;
  v5 = (GKGameRecordCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v4));
  if (!v5)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v5 = -[GKCacheObject initWithManagedObjectContext:]([GKGameRecordCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
      -[GKGameRecordCacheObject setGame:](v5, "setGame:", v3);
      -[GKGameRecordCacheObject setPlayer:](v5, "setPlayer:", *(_QWORD *)(a1 + 48));
      goto LABEL_6;
    }
LABEL_5:
    v5 = 0;
  }
LABEL_6:

  return v5;
}

GKListEntryCacheObject *__cdecl sub_1000E6D48(id a1, id a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v3;
  GKLeaderboardSetCacheObject *v4;

  v3 = a3;
  v4 = -[GKCacheObject initWithManagedObjectContext:]([GKLeaderboardSetCacheObject alloc], "initWithManagedObjectContext:", v3);

  return (GKListEntryCacheObject *)v4;
}

GKLeaderboardTitleMapCacheObject *sub_1000E7154(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  GKLeaderboardTitleMapCacheObject *v5;
  GKLeaderboardTitleMapCacheObject *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("category-name")));
  if (v4)
  {
    v5 = (GKLeaderboardTitleMapCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v4));
    if (!v5)
    {
      v6 = [GKLeaderboardTitleMapCacheObject alloc];
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
      v5 = -[GKCacheObject initWithManagedObjectContext:](v6, "initWithManagedObjectContext:", v7);

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("category-name")));
      -[GKLeaderboardTitleMapCacheObject setIdentifier:](v5, "setIdentifier:", v8);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("category-title")));
      -[GKLeaderboardTitleMapCacheObject setLocalizedTitle:](v5, "setLocalizedTitle:", v9);

      objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v5, v4);
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

GKListEntryCacheObject *__cdecl sub_1000E7534(id a1, id a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v3;
  GKLeaderboardTitleMapCacheObject *v4;

  v3 = a3;
  v4 = -[GKCacheObject initWithManagedObjectContext:]([GKLeaderboardTitleMapCacheObject alloc], "initWithManagedObjectContext:", v3);

  return (GKListEntryCacheObject *)v4;
}

GKListEntryCacheObject *__cdecl sub_1000E79F8(id a1, id a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v3;
  GKLeaderboardListEntryCacheObject *v4;

  v3 = a3;
  v4 = -[GKCacheObject initWithManagedObjectContext:]([GKLeaderboardListEntryCacheObject alloc], "initWithManagedObjectContext:", v3);

  return (GKListEntryCacheObject *)v4;
}

uint64_t sub_1000E8778(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    *a4 = 1;
  return result;
}

GKFriendListEntryCacheObject *sub_1000E8F40(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t isKindOfClass;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  GKFriendListEntryCacheObject *v19;

  v5 = a2;
  v6 = a3;
  v8 = objc_opt_class(NSString, v7);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
  {
    v10 = v5;
    v11 = objc_msgSend(v10, "isEqual:", &stru_1002CE2A8);
    if ((_DWORD)v11)
    {
      if (!os_log_GKGeneral)
        v12 = (id)GKOSLoggers(v11);
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_1000F6BE8();
    }
  }
  else
  {
    v13 = objc_opt_class(NSDictionary, v9);
    isKindOfClass = objc_opt_isKindOfClass(v5, v13);
    if ((isKindOfClass & 1) != 0)
    {
      v15 = v5;
      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("player-id")));
      v10 = (id)v16;
      if (v16)
      {
        objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v15, v16);
      }
      else
      {
        if (!os_log_GKGeneral)
          v18 = (id)GKOSLoggers(0);
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
          sub_1000F6C20();
      }

    }
    else
    {
      if (!os_log_GKGeneral)
        v17 = (id)GKOSLoggers(isKindOfClass);
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_1000F6C80();
      v10 = 0;
    }
  }
  v19 = -[GKCacheObject initWithManagedObjectContext:]([GKFriendListEntryCacheObject alloc], "initWithManagedObjectContext:", v6);

  -[GKFriendListEntryCacheObject setPlayerID:](v19, "setPlayerID:", v10);
  return v19;
}

void sub_1000E92F4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  NSObject *v36;
  id v37;
  id v38;
  NSObject *v39;
  NSObject *v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  uint8_t buf[4];
  void *v46;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playerID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v5));

  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v7);
  v9 = os_log_GKDaemon;
  v10 = os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO);
  if (v10)
  {
    *(_DWORD *)buf = 138412290;
    v46 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "populating friend profile cache info with info from server:%@", buf, 0xCu);
  }
  if (v6)
  {
    v12 = objc_opt_class(NSDictionary, v11);
    if ((objc_opt_isKindOfClass(v6, v12) & 1) == 0)
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = GKStackTraceWithFrameLimit(10);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("got %@ from %@ %@"), v6, v13, v15));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKCacheObject.m"));
      v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "lastPathComponent")));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ ([playerInfo isKindOfClass:[NSDictionary class]])\n[%s (%s:%d)]"), v16, "-[GKFriendListCacheObject populateFriendNamesFromServerRepresentationDictionary:]_block_invoke", objc_msgSend(v18, "UTF8String"), 2490));

      +[NSException raise:format:](NSException, "raise:format:", CFSTR("GameKit Exception"), CFSTR("%@"), v19);
    }
    v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("alias")));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("bi-directional")));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("played-with")));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("played-nearby")));
    v24 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("accepted-game-invitation")));
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("initiated-game-invitation")));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("automatched-together")));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("last-played-game")));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("last-played-timestamp")));
    objc_msgSend(v3, "setContactsAssociationID:", 0);
    if (v21)
      objc_msgSend(v3, "setFriendBiDirectional:", v21);
    if (v22)
      objc_msgSend(v3, "setFriendPlayedWith:", v22);
    if (v23)
      objc_msgSend(v3, "setFriendPlayedNearby:", v23);
    if (v24)
      objc_msgSend(v3, "setAcceptedGameInviteFromThisFriend:", v24);
    if (v44)
      objc_msgSend(v3, "setInitiatedGameInviteToThisFriend:");
    if (v25)
      objc_msgSend(v3, "setAutomatchedTogether:", v25);
    if (v20)
      objc_msgSend(v3, "setAlias:", v20);
    v42 = (void *)v24;
    v43 = (void *)v20;
    if (v26)
      objc_msgSend(v3, "setLastPlayedGame:", v26);
    if (v27)
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate _gkDateFromServerTimestamp:](NSDate, "_gkDateFromServerTimestamp:", v27));
      objc_msgSend(v3, "setLastPlayedDate:", v28);

    }
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("challenged-together")));
    objc_msgSend(v3, "setChallengedTogether:", objc_msgSend(v29, "BOOLValue"));

    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("last-challenged-timestamp")));
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate _gkDateFromServerTimestamp:](NSDate, "_gkDateFromServerTimestamp:", v30));
    objc_msgSend(v3, "setLastChallengedDate:", v31);

    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("last-challenged-game")));
    objc_msgSend(v3, "setLastChallengedGame:", v32);

    if (v21)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", (unint64_t)objc_msgSend(v21, "integerValue") | (2* (_QWORD)objc_msgSend(v22, "integerValue")) | (4 * (_QWORD)objc_msgSend(v23, "integerValue"))));
      objc_msgSend(v3, "setFriendLevel:", v34);

      v35 = objc_msgSend(v3, "setAvailablePieces:", objc_msgSend(v3, "availablePieces") | 0x20);
    }
    else
    {
      if (!os_log_GKGeneral)
        v38 = (id)GKOSLoggers(v33);
      v39 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "a friend list came back with no info on friend relationship. Tracking by assigning a friend level of 512", buf, 2u);
      }
      v35 = objc_msgSend(v3, "setFriendLevel:", &off_1002DB850);
    }
    v40 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v41 = (id)GKOSLoggers(v35);
      v40 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      sub_1000F6D6C(v40, v3);

  }
  else
  {
    v36 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v37 = (id)GKOSLoggers(v10);
      v36 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      sub_1000F6CE0(v36, v3);
  }

}

GKListEntryCacheObject *__cdecl sub_1000EA340(id a1, id a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v3;
  GKCompatibilityEntryCacheObject *v4;

  v3 = a3;
  v4 = -[GKCacheObject initWithManagedObjectContext:]([GKCompatibilityEntryCacheObject alloc], "initWithManagedObjectContext:", v3);

  return (GKListEntryCacheObject *)v4;
}

GKFriendRecommendationListEntryCacheObject *sub_1000EAFEC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  GKFriendRecommendationListEntryCacheObject *v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", GKPlayerIDKey));
  v9 = (void *)v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v7, v8);
    v10 = (GKFriendRecommendationListEntryCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v9));
    if (!v10)
    {
      v10 = -[GKCacheObject initWithManagedObjectContext:]([GKFriendRecommendationListEntryCacheObject alloc], "initWithManagedObjectContext:", v6);
      -[GKFriendRecommendationListEntryCacheObject setPlayerID:](v10, "setPlayerID:", v9);
    }
  }
  else
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1000F6C20();
    v10 = 0;
  }

  return v10;
}

GKFriendRequestListEntryCacheObject *sub_1000EBC40(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  GKFriendRequestListEntryCacheObject *v7;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("player-id")));
  if (v6)
  {
    v7 = (GKFriendRequestListEntryCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));
    if (!v7)
    {
      v7 = -[GKCacheObject initWithManagedObjectContext:]([GKFriendRequestListEntryCacheObject alloc], "initWithManagedObjectContext:", v5);
      -[GKFriendRequestListEntryCacheObject setWasViewed:](v7, "setWasViewed:", 0);
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

GKGameListEntryCacheObject *sub_1000ECA94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  GKGameListEntryCacheObject *v8;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("game")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("bundle-id")));
  if (v7)
  {
    v8 = (GKGameListEntryCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v7));
    if (!v8)
      v8 = -[GKCacheObject initWithManagedObjectContext:]([GKGameListEntryCacheObject alloc], "initWithManagedObjectContext:", v5);
    -[GKGameListEntryCacheObject setBundleID:](v8, "setBundleID:", v7);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

int64_t sub_1000ECEA4(id a1, id a2, id a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  unsigned int v13;
  int64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;

  v4 = a2;
  v5 = a3;
  v6 = v4;
  v7 = v5;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "game"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "softwareType"));
  v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("iOS"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "game"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "softwareType"));
  v13 = objc_msgSend(v12, "isEqualToString:", CFSTR("iOS"));

  if (v10 == v13)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastPlayedDate"));
    if (v15)
      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastPlayedDate"));
    else
      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "purchaseDate"));
    v17 = (void *)v16;

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "lastPlayedDate"));
    if (v18)
      v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "lastPlayedDate"));
    else
      v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "purchaseDate"));
    v20 = (void *)v19;

    v14 = (int64_t)objc_msgSend(v17, "compare:", v20);
  }
  else if (v10)
  {
    v14 = -1;
  }
  else
  {
    v14 = 1;
  }

  return v14;
}

GKListEntryCacheObject *__cdecl sub_1000EDD08(id a1, id a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v3;
  GKRecentPlayerListEntryCacheObject *v4;

  v3 = a3;
  v4 = -[GKCacheObject initWithManagedObjectContext:]([GKRecentPlayerListEntryCacheObject alloc], "initWithManagedObjectContext:", v3);

  return (GKListEntryCacheObject *)v4;
}

id sub_1000EDF70(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKRecentMatchInternal internalRepresentation](GKRecentMatchInternal, "internalRepresentation"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "internalRepresentation"));
  objc_msgSend(v7, "setPlayer:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "date"));
  objc_msgSend(v7, "setDate:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "game"));
  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameRecordCacheObject recordForGame:playerProfile:](GKGameRecordCacheObject, "recordForGame:playerProfile:", v10, v6));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "internalRepresentation"));
    objc_msgSend(v7, "setGame:", v12);

  }
  return v7;
}

GKListEntryCacheObject *__cdecl sub_1000EE544(id a1, id a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v3;
  GKRecentGameListEntryCacheObject *v4;

  v3 = a3;
  v4 = -[GKCacheObject initWithManagedObjectContext:]([GKRecentGameListEntryCacheObject alloc], "initWithManagedObjectContext:", v3);

  return (GKListEntryCacheObject *)v4;
}

id sub_1000EE818(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKRecentMatchInternal internalRepresentation](GKRecentMatchInternal, "internalRepresentation"));
  objc_msgSend(v7, "setPlayer:", *(_QWORD *)(a1 + 40));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "internalRepresentation"));
  objc_msgSend(v7, "setGame:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "date"));
  objc_msgSend(v7, "setDate:", v9);

  return v7;
}

GKListEntryCacheObject *__cdecl sub_1000EEC5C(id a1, NSDictionary *a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v4;
  void *v5;
  void *v6;
  GKTopGamesListEntryCacheObject *v7;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("game")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("bundle-id")));
  v7 = -[GKCacheObject initWithManagedObjectContext:]([GKTopGamesListEntryCacheObject alloc], "initWithManagedObjectContext:", v4);

  -[GKTopGamesListEntryCacheObject setBundleID:](v7, "setBundleID:", v6);
  return (GKListEntryCacheObject *)v7;
}

id sub_1000EEF30(id a1, GKOnDeviceMultiplayerGameListEntryCacheObject *a2, unint64_t a3)
{
  return -[GKOnDeviceMultiplayerGameListEntryCacheObject bundleID](a2, "bundleID", a3);
}

void sub_1000EEFE8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (objc_msgSend(v5, "supportsMultiplayer"))
  {
    v3 = *(void **)(a1 + 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleID"));
    objc_msgSend(v3, "addObject:", v4);

  }
}

GKListEntryCacheObject *__cdecl sub_1000EF1E8(id a1, NSDictionary *a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v4;
  void *v5;
  GKOnDeviceMultiplayerGameListEntryCacheObject *v6;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", CFSTR("bundle-id")));
  v6 = -[GKCacheObject initWithManagedObjectContext:]([GKOnDeviceMultiplayerGameListEntryCacheObject alloc], "initWithManagedObjectContext:", v4);

  -[GKOnDeviceMultiplayerGameListEntryCacheObject setBundleID:](v6, "setBundleID:", v5);
  return (GKListEntryCacheObject *)v6;
}

GKAchievementPointsEntryCacheObject *sub_1000EFC88(id *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  GKAchievementPointsEntryCacheObject *v9;
  void *v10;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKey:", CFSTR("game")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("bundle-id")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKey:", v7));
  if (v8)
  {
    v9 = (GKAchievementPointsEntryCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKeyedSubscript:", v7));
    if (!v9)
    {
      v9 = -[GKCacheObject initWithManagedObjectContext:]([GKAchievementPointsEntryCacheObject alloc], "initWithManagedObjectContext:", v5);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "objectForKey:", v7));
      -[GKAchievementPointsEntryCacheObject setGameRecord:](v9, "setGameRecord:", v10);

    }
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_1000F0A34(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "playerID"));
  v7 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)v7)
    *a4 = 1;
  return v7;
}

void sub_1000F1424(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  id v6;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
  objc_msgSend(v4, "setObject:forKey:", v5, v6);

}

void sub_1000F1490(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  GKTurnBasedParticipantCacheObject *v7;
  id v8;

  v5 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
  if (v6)
  {
    v7 = (GKTurnBasedParticipantCacheObject *)v6;
    objc_msgSend(*(id *)(a1 + 32), "removeObjectForKey:", v8);
  }
  else
  {
    v7 = -[GKCacheObject initWithManagedObjectContext:]([GKTurnBasedParticipantCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
  }
  -[GKTurnBasedParticipantCacheObject updateWithServerRepresentation:](v7, "updateWithServerRepresentation:", v5);

  objc_msgSend(*(id *)(a1 + 48), "insertObject:atIndex:", v7, a3);
}

void sub_1000F154C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  GKTurnBasedExchangeCacheObject *v7;
  id v8;

  v5 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("request-id")));
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
  if (v6)
  {
    v7 = (GKTurnBasedExchangeCacheObject *)v6;
    objc_msgSend(*(id *)(a1 + 32), "removeObjectForKey:", v8);
  }
  else
  {
    v7 = -[GKCacheObject initWithManagedObjectContext:]([GKTurnBasedExchangeCacheObject alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 40));
  }
  -[GKTurnBasedExchangeCacheObject updateWithServerRepresentation:participants:](v7, "updateWithServerRepresentation:participants:", v5, *(_QWORD *)(a1 + 48));

  objc_msgSend(*(id *)(a1 + 56), "insertObject:atIndex:", v7, a3);
}

id sub_1000F18F0(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;

  v3 = *(objc_class **)(a1 + 40);
  v4 = a2;
  v5 = objc_msgSend([v3 alloc], "initWithManagedObjectContext:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v5, "setSessionID:", v4);

  return v5;
}

GKTurnBasedSessionEntryCacheObject *sub_1000F2F90(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  GKTurnBasedSessionEntryCacheObject *v8;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("session-id")));
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v5, v7);
    v8 = (GKTurnBasedSessionEntryCacheObject *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v7));
    if (!v8)
    {
      v8 = -[GKCacheObject initWithManagedObjectContext:]([GKTurnBasedSessionEntryCacheObject alloc], "initWithManagedObjectContext:", v6);
      -[GKTurnBasedSessionEntryCacheObject setSessionID:](v8, "setSessionID:", v7);
    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_1000F31E0(id a1, GKTurnBasedSessionEntryCacheObject *a2, unint64_t a3, BOOL *a4)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(-[GKTurnBasedSessionEntryCacheObject list](a2, "list", a3, a4));
  objc_msgSend(v4, "expire");

}

GKListEntryCacheObject *__cdecl sub_1000F36F8(id a1, id a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v3;
  GKPlayerEntryCacheObject *v4;

  v3 = a3;
  v4 = -[GKCacheObject initWithManagedObjectContext:]([GKPlayerEntryCacheObject alloc], "initWithManagedObjectContext:", v3);

  return (GKListEntryCacheObject *)v4;
}

id sub_1000F3958(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKRecentMatchInternal internalRepresentation](GKRecentMatchInternal, "internalRepresentation"));
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playerID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "internalRepresentation"));
  objc_msgSend(v4, "setPlayer:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "date"));
  objc_msgSend(v4, "setDate:", v9);

  return v4;
}

id sub_1000F3FA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;

  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("challenge-id")));
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v8));
    if (!v9)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKChallengeCacheObject challengeWithServerRepresentation:context:](GKChallengeCacheObject, "challengeWithServerRepresentation:context:", v7, v6));
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v9, v8);
    }
    objc_msgSend(v9, "setReceivingPlayerID:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_1000F4434(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  __objc2_class **v6;
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("challenge-type")));
  v5 = objc_msgSend(v4, "integerValue");

  if (v5 == (id)1)
  {
    v6 = &off_1002BA5C8;
  }
  else
  {
    if (v5 != (id)2)
    {
      v7 = 0;
      goto LABEL_7;
    }
    v6 = &off_1002BA2D0;
  }
  v7 = objc_msgSend(objc_alloc(*v6), "initWithManagedObjectContext:", *(_QWORD *)(a1 + 32));
LABEL_7:
  objc_msgSend(v7, "updateWithServerRepresentation:", v3);

  return v7;
}

GKListEntryCacheObject *__cdecl sub_1000F62C8(id a1, id a2, NSManagedObjectContext *a3)
{
  NSManagedObjectContext *v3;
  GKCompatiblePlayerEntryCacheObject *v4;

  v3 = a3;
  v4 = -[GKCacheObject initWithManagedObjectContext:]([GKCompatiblePlayerEntryCacheObject alloc], "initWithManagedObjectContext:", v3);

  return (GKListEntryCacheObject *)v4;
}

void sub_1000F6318()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Fetch error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F6378()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Fetching unique objects for IDs %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F63D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: uniqueObjectsForKeys:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6404()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Inserting newObjects into lookup %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F6464()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: entityInManagedObjectContext called with nil moc", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6490()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: entityInManagedObjectContext", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F64BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: initWithManagedObjectContext:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F64E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: fetchRequestForContext", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6514()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Deleting objects %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F6574()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: uniqueObjectIDLookupWithContext:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F65A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: updateImagesWithImageURLs:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F65CC()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_1000279B0();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Error deleting cached image (%@): %@", v2, 0x16u);
  sub_100016C20();
}

void sub_1000F6648()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Deleted image: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F66A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Attempting to delete image at path: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F6708()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: deleteCachedImage:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6734()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "UNABLE TO PURGE OBJECT: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F6794()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "EXPIRED %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F67F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: updateWithServerRepresentation:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6820()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: expireObjectsMatchingPredicate", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F684C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKPlayerProfileCacheObject: deleteCachedAvatars", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6878()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Attempting to delete image at URL: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F68D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKPlayerProfileCacheObject: deleteCachedImage:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6904()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: playerProfilesWithPlayerIDs:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6930()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKPlayerProfileCacheObject: updateImagesWithImageURLs:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F695C(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_100027A18(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "friendLevel"));
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v3, v5, "Updated the friend level based on the server response. New friendLevel:%@", v6);

  sub_1000279E0();
}

void sub_1000F69E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "No playerID in response", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6A14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "unsupported object class passed to removeFamiliarPlayerIDs:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F6A74(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint8_t v4[24];

  v1 = sub_100027A18(a1);
  v2 = GKStackTraceWithFrameLimit(12);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000279B0();
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "gameForBunDleID:context: was called with no bundleID. Stack trace:%@", v4, 0xCu);

  sub_1000279E0();
}

void sub_1000F6B04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: gamesForBundleIDs:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6B30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: gamesForGameDescriptors:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6B5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: updateWithGameDescriptor:", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F6B88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "GKFriendCache:cached friend list:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F6BE8()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100027A0C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "received an empty playerID while updating a player friend's cache", v1, 2u);
  sub_100027A04();
}

void sub_1000F6C20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "player ID missing from info dictionary:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F6C80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "unexpected result class in server friend list:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F6CE0(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_100027A18(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "playerID"));
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v3, v5, "%@ missing from dictionary", v6);

  sub_1000279E0();
}

void sub_1000F6D6C(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  void *v9;

  v3 = sub_100027A18(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "alias"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "contactsAssociationID"));
  v6 = 138412546;
  v7 = v4;
  v8 = 2112;
  v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GKFriendCache:populated player pieces with server info: player alias:%@ and contactsAssociationID:%@", (uint8_t *)&v6, 0x16u);

}

void sub_1000F6E34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Deleted game data: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000F6E94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "GKCacheObject: sessionsWithSessionIDs", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1000F70FC(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000F7160;
  v2[3] = &unk_1002C2B48;
  v3 = v1;
  GKIncrementContextTransactionCount(v3, 0, v2);

}

void sub_1000F7160(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;

  if (!a2)
  {
    if (!os_log_GKGeneral)
      v3 = (id)GKOSLoggers(a1);
    v4 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
      sub_1000F7460(a1, v4);
  }
}

void sub_1000F71CC(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v2 = a2;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7);
        v9 = objc_opt_class(GKPlayerInternal, v4);
        if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
          objc_msgSend(v8, "sanitize");
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

void sub_1000F73A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000F73BC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "stripGKPlayerInternalPIIs");
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1000F7400(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "GKCacheTransactionGroup: transactionGroupWithName:context:client", a5, a6, a7, a8, 0);
  sub_100027A04();
}

void sub_1000F7430(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "GKCacheTransactionGroup: initWithName:", a5, a6, a7, a8, 0);
  sub_100027A04();
}

void sub_1000F7460(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 138412290;
  v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Context reached a count of 0: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000F74D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "GKCacheTransactionGroup: performOnManagedObjectContext", a5, a6, a7, a8, 0);
  sub_100027A04();
}

void sub_1000F7AF0(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileService, "serviceWithTransport:forClient:localPlayer:", 0, a1[4], 0));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000F7BA0;
  v7[3] = &unk_1002BCA30;
  v5 = a1[5];
  v7[4] = a1[6];
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "getProfilesForPlayerIDs:handler:", v5, v7);

}

void sub_1000F7BA0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (objc_msgSend(v5, "count") == (id)2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndex:", 0));
    objc_msgSend(*(id *)(a1 + 32), "setReceivingPlayer:", v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndex:", 1));
    objc_msgSend(*(id *)(a1 + 32), "setIssuingPlayer:", v4);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000F7C30(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[5];
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKChallengeInvite.m", 124, "-[GKChallengeInvite loadDetailsWithHandler:]_block_invoke_3"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v2));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "challenge"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleID"));

  if (v5)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000F7DE8;
    v13[3] = &unk_1002BB590;
    v7 = *(void **)(a1 + 40);
    v13[4] = *(_QWORD *)(a1 + 32);
    v14 = v7;
    objc_msgSend(v3, "perform:", v13);

  }
  else
  {
    v8 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v9 = (id)GKOSLoggers(v6);
      v8 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      sub_1000F86D0(v8);
    objc_msgSend(*(id *)(a1 + 32), "setGoalText:", &stru_1002CE2A8);
  }
  if (*(_QWORD *)(a1 + 56))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "replyQueue"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000F7EB8;
    v11[3] = &unk_1002BB540;
    v12 = *(id *)(a1 + 56);
    objc_msgSend(v3, "notifyOnQueue:block:", v10, v11);

  }
}

void sub_1000F7DE8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "gameDescriptor"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000F7E88;
  v7[3] = &unk_1002C2C10;
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v6 = v3;
  objc_msgSend(v4, "loadGoalTextForGameDescriptor:handler:", v5, v7);

}

uint64_t sub_1000F7E88(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setGoalText:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1000F7EB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000F817C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F819C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000F81AC(uint64_t a1)
{

}

void sub_1000F81B4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v21;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier", (_QWORD)v20));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "achievement"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
        v12 = objc_msgSend(v9, "isEqualToString:", v11);

        if (!v12)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "groupIdentifier"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "achievement"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "groupIdentifier"));
          v16 = objc_msgSend(v13, "isEqualToString:", v15);

          if (!v16)
            continue;
        }
        v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "unachievedDescription"));
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v19 = *(void **)(v18 + 40);
        *(_QWORD *)(v18 + 40) = v17;

        goto LABEL_12;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_12:

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000F8374(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v25;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "score"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "leaderboardIdentifier"));
        v12 = objc_msgSend(v9, "isEqualToString:", v11);

        if (!v12)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "groupIdentifier"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "score"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "groupLeaderboardIdentifier"));
          v16 = objc_msgSend(v13, "isEqualToString:", v15);

          if (!v16)
            continue;
        }
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[GCFLocalizedStrings SCORE_CHALLENGE_RECEIVED_ALERT_GOAL_FORMAT](_TtC20GameCenterFoundation19GCFLocalizedStrings, "SCORE_CHALLENGE_RECEIVED_ALERT_GOAL_FORMAT"));
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "score"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "formattedValue"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedTitle"));
        v21 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v17, v19, v20, (_QWORD)v24));
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v23 = *(void **)(v22 + 40);
        *(_QWORD *)(v22 + 40) = v21;

        goto LABEL_12;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_12:

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000F8594(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return result;
}

void sub_1000F86D0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "no bundleID found for challenge, causing us to display empty goal text", v1, 2u);
}

void sub_1000F8964(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.GameKit.friendSuggester.serialQueue", 0);
  v2 = (void *)qword_100317F70;
  qword_100317F70 = (uint64_t)v1;

}

void sub_1000F8B30(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id location;

  v5 = a2;
  v6 = a3;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedContactAssocicationIDsWithContext:", v5));
  v8 = (void *)v7;
  if (v7)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(v7);
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_1000FA22C();
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKContactsIntegrationController sharedController](GKContactsIntegrationController, "sharedController"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v8));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contactAssociationIDMapForContactAssociationIDs:withContext:", v11, v5));

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allKeys"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v13));

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDContactInfo _gkObjectsMatchingHandles:withContext:](GKCDContactInfo, "_gkObjectsMatchingHandles:withContext:", v14, v5));
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "_gkMapWithBlock:", &stru_1002C2CC0));
    v17 = (void *)v16;
    if (!os_log_GKGeneral)
      v18 = (id)GKOSLoggers(v16);
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_1000FA1CC();

  }
  else
  {
    v17 = 0;
  }
  objc_initWeak(&location, *(id *)(a1 + 32));
  v19 = *(void **)(a1 + 32);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000F8EA4;
  v22[3] = &unk_1002C2CE8;
  objc_copyWeak(&v28, &location);
  v23 = *(id *)(a1 + 40);
  v20 = v17;
  v24 = v20;
  v21 = v8;
  v25 = v21;
  v26 = *(id *)(a1 + 48);
  v27 = *(id *)(a1 + 56);
  objc_msgSend(v19, "modifyCachedSuggestions:modifiers:handler:", v20, v22, *(_QWORD *)(a1 + 64));
  v6[2](v6);

  objc_destroyWeak(&v28);
  objc_destroyWeak(&location);

}

void sub_1000F8DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000F8DF0(id a1, GKCDContactInfo *a2, unint64_t a3)
{
  GKCDContactInfo *v3;
  GKFriendSuggestion *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  GKFriendSuggestion *v9;

  v3 = a2;
  v4 = [GKFriendSuggestion alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDContactInfo contactID](v3, "contactID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDContactInfo handle](v3, "handle"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_stripFZIDPrefix"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[GKCDContactInfo handle](v3, "handle"));

  v9 = -[GKFriendSuggestion initWithContactID:handle:prefixedHandle:contactAssociationID:](v4, "initWithContactID:handle:prefixedHandle:contactAssociationID:", v5, v7, v8, 0);
  return v9;
}

id sub_1000F8EA4(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;

  v3 = (id *)(a1 + 72);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "modifiersWithSettings:contactsIntegrationController:hasCachedSuggestions:cachedSortedAssociationIDs:rerankRequester:transactionGroupProvider:", v4, *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 40), "count") != 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64)));

  return v6;
}

void sub_1000F92EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  const __CFString *v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "settingsProvider"));
  v6 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v5), "serialQueue");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v13 = CFSTR("gk-friend-rerank-overall-limit");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000F9418;
  v10[3] = &unk_1002C2D38;
  v11 = *(id *)(a1 + 40);
  v12 = v3;
  v9 = v3;
  objc_msgSend(v4, "fetchSettingsWithQueue:valuesForKeys:handler:", v7, v8, v10);

}

uint64_t sub_1000F9418(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000F9448(uint64_t a1)
{
  void *v2;
  GKTrimSuggestionsModifier *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "peopleSuggesterGameInviteSuggestionsWithLimit:", objc_msgSend(v5, "suggestionsLimit")));
  v3 = -[GKTrimSuggestionsModifier initWithSettings:]([GKTrimSuggestionsModifier alloc], "initWithSettings:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[GKTrimSuggestionsModifier trimSuggestions:](v3, "trimSuggestions:", v2));

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

id sub_1000F9688(id a1, _PSSuggestion *a2, unint64_t a3)
{
  _PSSuggestion *v3;
  GKFriendSuggestion *v4;

  v3 = a2;
  v4 = -[GKFriendSuggestion initWithSuggestion:]([GKFriendSuggestion alloc], "initWithSuggestion:", v3);

  return v4;
}

void sub_1000F9870(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "settingsProvider"));
  v6 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v5), "serialQueue");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000F9934;
  v9[3] = &unk_1002C2D38;
  v10 = *(id *)(a1 + 40);
  v11 = v3;
  v8 = v3;
  objc_msgSend(v4, "fetchSettingsWithQueue:handler:", v7, v9);

}

uint64_t sub_1000F9934(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setResult:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000F9964(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  id v26;
  _BYTE v27[128];

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)v2;
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v2);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_1000FA2EC();
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v5 = *(id *)(a1 + 40);
  }
  else
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "peopleSuggesterConvertedFriendSuggestionsWithLimit:", objc_msgSend(v3, "suggestionsLimit")));
    if (!objc_msgSend(v5, "count"))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      goto LABEL_20;
    }
  }
  v17 = a1;
  v18 = v3;
  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v20;
    do
    {
      v11 = 0;
      v12 = v5;
      do
      {
        if (*(_QWORD *)v20 != v10)
          objc_enumerationMutation(v7);
        v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v11);
        v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "modifySuggestions:", v12));

        if (!os_log_GKGeneral)
          v15 = (id)GKOSLoggers(v14);
        v16 = os_log_GKContacts;
        if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          v24 = v13;
          v25 = 2112;
          v26 = v5;
          _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%@ finished modifying suggestions with results: %@", buf, 0x16u);
        }
        v11 = (char *)v11 + 1;
        v12 = v5;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    }
    while (v9);
  }
  (*(void (**)(void))(*(_QWORD *)(v17 + 56) + 16))();

  v3 = v18;
LABEL_20:

}

BOOL sub_1000F9E04(id a1)
{
  return _os_feature_enabled_impl("GameCenter", "friend_reranking");
}

id sub_1000F9E18(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  __int128 v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v28, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "peopleSuggesterConvertedFriendSuggestionsWithLimit:", a2));
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
  if (v7)
  {
    v9 = v7;
    v10 = *(_QWORD *)v20;
    *(_QWORD *)&v8 = 138412546;
    v18 = v8;
    do
    {
      v11 = 0;
      v12 = v5;
      do
      {
        if (*(_QWORD *)v20 != v10)
          objc_enumerationMutation(v6);
        v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v11);
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "modifySuggestions:", v12, v18, (_QWORD)v19));

        if (!os_log_GKGeneral)
          v15 = (id)GKOSLoggers(v14);
        v16 = os_log_GKContacts;
        if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v18;
          v24 = v13;
          v25 = 2112;
          v26 = v5;
          _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%@ as part of appending, finished modifying suggestions with results: %@", buf, 0x16u);
        }
        v11 = (char *)v11 + 1;
        v12 = v5;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    }
    while (v9);
  }

  return v5;
}

void sub_1000FA1CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Converted contact association IDs into suggestions: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000FA22C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Will use cached contact association IDs: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000FA28C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Found and converted the following suggestions from people suggester: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1000FA2EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Got back friend suggestions settings: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

id sub_1000FA890(uint64_t a1)
{
  id v2;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
    sub_100106178();
  return objc_msgSend(*(id *)(a1 + 32), "leave");
}

id sub_1000FA8F8(uint64_t a1)
{
  id v2;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
    sub_1001061A4();
  return objc_msgSend(*(id *)(a1 + 32), "leave");
}

void sub_1000FAB10(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", CFSTR("com.apple.Magellan")));
  v2 = (void *)qword_100317F80;
  qword_100317F80 = v1;

}

void sub_1000FB4B0(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.GameKit.GKClient.sync", 0);
  v2 = (void *)qword_100317F90;
  qword_100317F90 = (uint64_t)v1;

}

void sub_1000FB748(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  int v16;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serverRequest"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000FB83C;
  v11[3] = &unk_1002C2E88;
  v16 = *(_DWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(void **)(a1 + 48);
  v12 = v7;
  v13 = v8;
  v14 = v9;
  v15 = v3;
  v10 = v3;
  objc_msgSend(v4, "issueRequest:bagKey:clientProxy:handler:", v5, CFSTR("gk-check-match-status"), v6, v11);

}

void sub_1000FB83C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int v7;
  void *v8;
  void *v9;
  dispatch_time_t v10;
  void *v11;
  _QWORD v12[6];

  v5 = a2;
  v6 = a3;
  v7 = *(_DWORD *)(a1 + 64);
  if (v7 == objc_msgSend(*(id *)(a1 + 32), "sequence"))
  {
    if (v6)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", GKServerStatusCode));

      if (objc_msgSend(v6, "gkIsNotConnectedToInternetError"))
      {
        objc_msgSend(*(id *)(a1 + 32), "transitionToState:", 7);
      }
      else if (objc_msgSend(v9, "integerValue") == (id)5067)
      {
        objc_msgSend(*(id *)(a1 + 40), "processMatchResponse:", v5);
      }
      else if (objc_msgSend(*(id *)(a1 + 32), "transitionToState:", 2))
      {
        v10 = dispatch_time(0, 3000000000);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_1000FB990;
        v12[3] = &unk_1002BBF58;
        v11 = *(void **)(a1 + 48);
        v12[4] = *(_QWORD *)(a1 + 40);
        v12[5] = v10;
        objc_msgSend(v11, "perform:", v12);
      }

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "processMatchResponse:", v5);
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1000FB990(uint64_t a1, void *a2)
{
  id v3;
  dispatch_time_t v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000FBA14;
  v6[3] = &unk_1002BB758;
  v4 = *(_QWORD *)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, v6);

}

uint64_t sub_1000FBA14(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "checkMatchStatus");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000FC014(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD block[5];
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "checkMatchStatusQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000FC0B4;
  block[3] = &unk_1002C0B88;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v9 = v3;
  v10 = v6;
  block[4] = v5;
  v7 = v3;
  dispatch_async(v4, block);

}

void sub_1000FC0B4(uint64_t a1)
{
  NSObject *v2;
  dispatch_source_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD handler[5];

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "checkMatchStatusQueue"));
  v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v2);
  objc_msgSend(*(id *)(a1 + 32), "setCheckMatchStatusTimer:", v3);

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "checkMatchStatusTimer"));
  dispatch_source_set_timer(v4, *(_QWORD *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "checkMatchStatusTimer"));
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000FC1CC;
  handler[3] = &unk_1002BBBD8;
  handler[4] = *(_QWORD *)(a1 + 32);
  dispatch_source_set_event_handler(v5, handler);

  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "checkMatchStatusTimer"));
  dispatch_source_set_cancel_handler(v6, *(dispatch_block_t *)(a1 + 40));

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "checkMatchStatusTimer"));
  dispatch_resume(v7);

}

id sub_1000FC1CC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "checkMatchStatus");
  return objc_msgSend(*(id *)(a1 + 32), "setCheckMatchStatusTimer:", 0);
}

void sub_1000FC1F8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v7 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bundleIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v3, v4));

  objc_msgSend(v7, "expireRecentMatchesWithGame:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "friendList"));
  objc_msgSend(v6, "invalidate");

}

id sub_1000FC4B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCheckMatchStatusTimer:", 0);
}

void sub_1000FC868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FC888(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000FC898(uint64_t a1)
{

}

void sub_1000FC8A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id v8;
  id obj;

  v5 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  v6 = a3;
  v7 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  obj = 0;
  v8 = +[NSDictionary _gkDictionaryWithServerData:error:](NSDictionary, "_gkDictionaryWithServerData:error:", v5, &obj);
  objc_storeStrong(v7, obj);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t sub_1000FC93C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return result;
}

void sub_1000FCE54(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = objc_msgSend(v3, "dataType");
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));

  objc_msgSend(v2, "refreshContentsForDataType:userInfo:", v4, v5);
}

GKGameInternal *__cdecl sub_1000FD374(GKClientProxy *self, SEL a2)
{
  return self->_currentGame;
}

void sub_1000FD64C(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.GameKit.GKClient.sync", 0);
  v2 = (void *)qword_100317FA0;
  qword_100317FA0 = (uint64_t)v1;

}

void sub_1000FD678(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 0);
  v2 = (void *)qword_100317FB0;
  qword_100317FB0 = (uint64_t)v1;

}

void sub_1000FD72C(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v4[0] = GKGameCenterDashboardIdentifier;
  v4[1] = GKMatchmakerExtensionIdentifier;
  v4[2] = GKTurnBasedMatchmakerExtensionIdentifier;
  v4[3] = GKChallengeIssueExtensionIdentifier;
  v4[4] = GKFriendRequestExtensionIdentifier;
  v4[5] = GKAuthenticateExtensionIdentifier;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 6));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1));
  v3 = (void *)qword_100317FC0;
  qword_100317FC0 = v2;

}

void sub_1000FD8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FD8E0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6;

  v6 = a2;
  if (objc_msgSend(v6, "applicationState") == 8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *a3 = 1;
  }

}

void sub_1000FD9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FDA14(uint64_t a1, void *a2, _BYTE *a3)
{
  unsigned int v6;
  id v7;

  v7 = a2;
  v6 = objc_msgSend(v7, "applicationState");
  if ((objc_msgSend(v7, "isGameCenter") & 1) == 0 && v6 == 8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *a3 = 1;
  }

}

void sub_1000FDBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FDBEC(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  id v16;
  void *v17;
  NSObject *v18;
  unsigned int v19;
  unsigned int v20;
  id v21;
  uint8_t buf[4];
  unsigned int v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  id v29;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
  v7 = objc_msgSend(v6, "isEqualToString:", GKGameCenterDashboardIdentifier);

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", objc_msgSend(v5, "pid")));
    v21 = 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessHandle handleForIdentifier:error:](RBSProcessHandle, "handleForIdentifier:error:", v8, &v21));
    v10 = v21;

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "currentState"));
    if (RBSTaskStateIsRunning(objc_msgSend(v11, "taskState")))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "currentState"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "endowmentNamespaces"));
      v14 = objc_msgSend(v13, "containsObject:", FBSSceneVisibilityEndowmentNamespace);

    }
    else
    {
      v14 = 0;
    }

    if (!os_log_GKGeneral)
      v16 = (id)GKOSLoggers(v15);
    v17 = (void *)os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      v18 = v17;
      v19 = objc_msgSend(v5, "pid");
      v20 = objc_msgSend(v5, "applicationState");
      *(_DWORD *)buf = 67109890;
      v23 = v19;
      v24 = 1024;
      v25 = v20;
      v26 = 1024;
      v27 = v14;
      v28 = 2112;
      v29 = v10;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "isGameCenterDashboardForegroundRunning: (pid=%d applicationState=%d) => isVisible=%d error=%@", buf, 0x1Eu);

    }
    if (v14)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v14;
      *a3 = 1;
    }

  }
}

void sub_1000FDF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FDFA8(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;

  v6 = a2;
  v7 = v6;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  v9 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "inviteSession"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "sessionToken"));
    v16 = 138412290;
    v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Client candidate session token %@", (uint8_t *)&v16, 0xCu);

  }
  v13 = *(void **)(a1 + 32);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "inviteSession"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "sessionToken"));
  LODWORD(v13) = objc_msgSend(v13, "isEqualToData:", v15);

  if ((_DWORD)v13)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }

}

void sub_1000FE1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FE200(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "currentMatchResponse"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "rid"));
  v8 = objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }

}

void sub_1000FE378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FE390(uint64_t a1)
{
  id v2;
  _QWORD v3[5];

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_clientLookup"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000FE404;
  v3[3] = &unk_1002C3028;
  v3[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v3);

}

id sub_1000FE404(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD v4[5];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000FE460;
  v4[3] = &unk_1002C3000;
  v4[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v4);
}

id sub_1000FE460(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:");
}

uint64_t sub_1000FE500(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000FE5D8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_clientLookup"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 40), "pid")));
  objc_msgSend(v4, "removeObjectForKey:", v3);

}

void sub_1000FEBC4(id a1, GKClientProxy *a2, BOOL *a3)
{
  -[GKClientProxy refreshContentsForDataType:userInfo:](a2, "refreshContentsForDataType:userInfo:", 3, 0);
}

uint64_t sub_1000FEC54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000FEE1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000FEE34(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void (**v10)(void);

  v10 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "primaryCredentialForEnvironment:", objc_msgSend(*(id *)(a1 + 32), "environment")));

  if (v4)
  {
    v5 = objc_alloc_init((Class)GKAuthenticateResponse);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerInternal"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "playerID"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setPlayerID:", v9);

    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), CFSTR("response"));
  }
  v10[2]();

}

void sub_1000FEF24(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("response")));
  (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_1000FF12C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000FF144(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void (**v12)(void);

  v12 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "primaryCredentialForEnvironment:", objc_msgSend(*(id *)(a1 + 32), "environment")));

  if (v4)
  {
    v5 = objc_alloc_init((Class)GKAuthenticateCredential);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "accountName"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setAccountName:", v8);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "authenticationToken"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setAuthenticationToken:", v9);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerInternal"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "playerID"));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setPlayerID:", v11);

    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), CFSTR("response"));
  }
  v12[2]();

}

void sub_1000FF284(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("response")));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t sub_1000FF438(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

id sub_1000FF704(_QWORD *a1, void *a2)
{
  id v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v19[5];

  v3 = a2;
  v4 = objc_msgSend(v3, "isEqual:", a1[4]);
  v5 = (unint64_t)objc_msgSend(v3, "scope") & 8;
  v6 = a1[6];
  if ((v6 & 1) != 0 || (v4 & (v6 >> 2) & 1) != 0 || (v7 = 0, (v6 & 8) != 0) && (_DWORD)v5)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playerInternal"));
    v9 = objc_alloc((Class)GKLocalPlayerInternal);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000FF8B8;
    v19[3] = &unk_1002C3110;
    v19[4] = a1[5];
    v7 = objc_msgSend(v9, "initWithSanitizeBeforeEncodingBlock:", v19);
    v10 = 5;
    if (!v4)
      v10 = 1;
    v11 = v10 | v5;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "alias"));
    objc_msgSend(v7, "setAlias:", v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "playerID"));
    objc_msgSend(v7, "setPlayerID:", v13);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "accountName"));
    objc_msgSend(v7, "setAccountName:", v14);

    objc_msgSend(v7, "setLoginStatus:", v11);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstName"));
    objc_msgSend(v7, "setFirstName:", v15);

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastName"));
    objc_msgSend(v7, "setLastName:", v16);

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "compositeName"));
    objc_msgSend(v7, "setCompositeName:", v17);

  }
  return v7;
}

uint64_t sub_1000FF8B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "clientHasAnyPrivateEntitlement") ^ 1;
}

void sub_1000FF8D4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;

  v3 = a2;
  v4 = objc_alloc((Class)GKPlayerInternalOnboarding);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playerID"));
  v6 = objc_msgSend(v4, "initWithPlayerID:", v5);
  objc_msgSend(v3, "setOnboarding:", v6);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000FF9A0;
  v9[3] = &unk_1002BB590;
  v7 = *(void **)(a1 + 32);
  v9[4] = *(_QWORD *)(a1 + 40);
  v10 = v3;
  v8 = v3;
  objc_msgSend(v7, "perform:", v9);

}

void sub_1000FF9A0(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  void (**v12)(_QWORD);

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "transactionGroupIfCacheExistsForPlayerID:", v5));

  if (v6)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000FFA78;
    v9[3] = &unk_1002BE490;
    v7 = *(id *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 32);
    v10 = v7;
    v11 = v8;
    v12 = v3;
    objc_msgSend(v6, "performOnManagedObjectContext:", v9);

  }
  else
  {
    v3[2](v3);
  }

}

void sub_1000FFA78(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v5));
  if (objc_msgSend(v7, "isValid"))
    objc_msgSend(a1[4], "updateWithCacheObject:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "bundleIdentifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "playerID"));
  if (v9 && (objc_msgSend(v8, "isEqualToString:", GKGameCenterIdentifier) & 1) == 0)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "originalBundleIdentifier"));
    if ((objc_msgSend(v11, "isEqualToString:", GKGameCenterToolIdentifier) & 1) != 0
      || GKGetApplicationStateForBundleID(v8) == 8)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForBundleID:context:](GKGameCacheObject, "gameForBundleID:context:", v8, v5));

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1000FFD50;
  v23[3] = &unk_1002C3160;
  v12 = v8;
  v24 = v12;
  v25 = a1[4];
  v13 = v6;
  v26 = v13;
  v27 = a1[6];
  v14 = objc_retainBlock(v23);
  v15 = v14;
  if (v10)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceForBundleID:localPlayer:](GKProfileServicePrivate, "serviceForBundleID:localPlayer:", v12, a1[4]));
    v29 = v9;
    v17 = v5;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v29, 1));
    v28 = v12;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v28, 1));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000FFE34;
    v20[3] = &unk_1002BCA30;
    v21 = a1[4];
    v22 = v15;
    objc_msgSend(v16, "loadScopedPlayerIDs:gameBundleIDs:handler:", v18, v19, v20);

    v5 = v17;
  }
  else
  {
    ((void (*)(_QWORD *))v14[2])(v14);
  }

}

uint64_t sub_1000FFD50(_QWORD *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  if (!os_log_GKGeneral)
    v3 = (id)GKOSLoggers(a1, a2);
  v4 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v5 = a1[4];
    v6 = a1[5];
    v8 = 138412546;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "For bundleID: %@ we are returning playerInternal: %@ in auth reponse", (uint8_t *)&v8, 0x16u);
  }
  (*(void (**)(void))(a1[6] + 16))();
  return (*(uint64_t (**)(void))(a1[7] + 16))();
}

uint64_t sub_1000FFE34(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  v4 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_msgSend(v4, "setScopedIDs:", v3);
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "scopedIDs"));
    objc_msgSend(*(id *)(a1 + 32), "setScopedIDs:", v5);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000FFEA4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("players")));
  (*(void (**)(uint64_t, id, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_10010005C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void (**v5)(void);

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "suggestedUsername"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v4, CFSTR("accountName"));

  v5[2]();
}

void sub_1001000E0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("accountName")));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_1001001A8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "playerID"));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

uint64_t sub_1001002C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_100100528(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v5[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Received CloudKit share metadata from Messages for multiplayer invite.", v5, 2u);
  }
  return +[GKCloudGameSession handleCloudKitShareMetadata:completionHandler:](GKCloudGameSession, "handleCloudKitShareMetadata:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1001005C8(id a1, GKClientProxy *a2, BOOL *a3)
{
  -[GKClientProxy sendAuthenticationDidChangeNotificationWithAuthenticatingBundleID:completionHandler:](a2, "sendAuthenticationDidChangeNotificationWithAuthenticatingBundleID:completionHandler:", 0, &stru_1002C31C8);
}

void sub_1001006D8(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100100764;
  v3[3] = &unk_1002BCE80;
  v2 = *(void **)(a1 + 40);
  v4 = *(id *)(a1 + 32);
  v5 = v2;
  v6 = *(id *)(a1 + 48);
  objc_msgSend(v4, "getAuthenticatedLocalPlayersWithStatus:handler:", 1, v3);

}

void sub_100100764(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001063B8();
  }
  objc_msgSend(*(id *)(a1 + 32), "authenticatedPlayersDidChange:authenticatingBundleID:reply:", v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1001009C4(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.gamed.GKSavedAppInitState", 0);
  v2 = (void *)qword_100317FD0;
  qword_100317FD0 = (uint64_t)v1;

}

void sub_100100AA8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  void *v18;
  uint32_t v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  void *v24;
  __int16 v25;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD v28[3];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = v2;
  if (*(__CFString **)(a1 + 32) == CFSTR("GKAppInitUnknown"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("GKSavedAppInitState")));
    v12 = *(void **)(a1 + 40);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("bundleID")));
    LODWORD(v12) = objc_msgSend(v12, "isEqualToString:", v13);

    if ((_DWORD)v12)
    {
      v15 = objc_msgSend(v3, "removeObjectForKey:", CFSTR("GKSavedAppInitState"));
      if (!os_log_GKGeneral)
        v16 = (id)GKOSLoggers(v15);
      v17 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v18 = *(void **)(a1 + 40);
        v23 = 138412290;
        v24 = v18;
        v10 = "saveAppInitState: cleared for client %@";
        v11 = v17;
        goto LABEL_11;
      }
    }
    else
    {
      if (!os_log_GKGeneral)
        v20 = (id)GKOSLoggers(v14);
      v21 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v22 = *(_QWORD *)(a1 + 40);
        v23 = 138412546;
        v24 = v6;
        v25 = 2112;
        v26 = v22;
        v10 = "saveAppInitState: ignoring old state -- %@ does not match client %@";
        v11 = v21;
        v19 = 22;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v28[0] = *(_QWORD *)(a1 + 40);
    v27[0] = CFSTR("bundleID");
    v27[1] = CFSTR("pid");
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
    v27[2] = CFSTR("state");
    v5 = *(_QWORD *)(a1 + 32);
    v28[1] = v4;
    v28[2] = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v28, v27, 3));

    v7 = objc_msgSend(v3, "setValue:forKey:", v6, CFSTR("GKSavedAppInitState"));
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v7);
    v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v23 = 138412290;
      v24 = v6;
      v10 = "saveAppInitState: saved: %@";
      v11 = v9;
LABEL_11:
      v19 = 12;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v23, v19);
    }
  }

}

id sub_100100D60(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  __int128 v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  void *v18;
  id result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  void *v26;
  _BYTE v27[128];

  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "responses"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
  if (v3)
  {
    v6 = v3;
    v7 = *(_QWORD *)v22;
    *(_QWORD *)&v5 = 138412290;
    v20 = v5;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(v2);
        v9 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        v10 = objc_opt_class(GKRealTimeMultiplayerActionBulletin, v4);
        if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
        {
          v11 = v9;
          v12 = v11;
          if (!os_log_GKGeneral)
            v13 = (id)GKOSLoggers(v11);
          v14 = os_log_GKDaemon;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v20;
            v26 = v12;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Sending notification with bulletin %@", buf, 0xCu);
          }
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bundleIdentifier", v20));
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:](GKClientProxy, "clientForBundleID:", v15));

          v17 = objc_msgSend(v12, "isAccept");
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "clientNotification"));
          if (v17)
            objc_msgSend(v16, "acceptInviteWithNotification:", v18);
          else
            objc_msgSend(v16, "declineInviteWithNotification:", v18);

        }
      }
      v6 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    }
    while (v6);
  }

  objc_msgSend(*(id *)(a1 + 32), "removeAllResponses");
  result = objc_msgSend(*(id *)(a1 + 32), "shouldBeCleared");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 40), "deleteInviteSession");
  return result;
}

void sub_100101024(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100106488(a1);
  }

}

uint64_t sub_100101170(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1001015B8(id a1, id a2, GKExtensionClientProxy *a3, BOOL *a4)
{
  -[GKClientProxy acceptMultiplayerGameInvite](a3, "acceptMultiplayerGameInvite");
}

id sub_100101698(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "acceptInviteWithNotification:", *(_QWORD *)(a1 + 32));
}

id sub_100101780(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "declineInviteWithNotification:", *(_QWORD *)(a1 + 32));
}

void sub_100101848(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  id v4;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (!os_log_GKGeneral)
      v4 = (id)GKOSLoggers(v2);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100106554();
  }

}

id sub_100101990(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "cancelInviteWithNotification:", *(_QWORD *)(a1 + 32));
}

id sub_100101A78(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "cancelGameInvite:", *(_QWORD *)(a1 + 32));
}

id sub_100101CD8(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "relayPushNotification:", *(_QWORD *)(a1 + 32));
}

id sub_100102408(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "refreshContentsForDataType:userInfo:", *(unsigned int *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_100102500(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "setPreferencesValues:", *(_QWORD *)(a1 + 32));
}

void sub_1001027D8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v4);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001065B4();
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100102864(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_100102870(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "setCurrentGame:serverEnvironment:reply:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), &stru_1002C3378);
}

uint64_t sub_10010288C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100102B60(id *a1)
{
  dispatch_group_t v2;
  id *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  _BOOL8 v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  _QWORD v24[4];
  NSObject *v25;
  uint8_t buf[8];
  _QWORD v27[4];
  NSObject *v28;

  v2 = dispatch_group_create();
  v3 = a1 + 4;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "connection"));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100102E10;
  v27[3] = &unk_1002C3260;
  v5 = v2;
  v28 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteObjectProxyWithErrorHandler:", v27));

  v8 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v9 = (id)GKOSLoggers(v7);
    v8 = os_log_GKGeneral;
  }
  v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "authenticatedPlayersDidChange: sent to Client", buf, 2u);
  }
  v11 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v12 = (id)GKOSLoggers(v10);
    v11 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    sub_100106614(a1 + 4, v11);
    if (!v6)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (v6)
  {
LABEL_9:
    dispatch_group_enter(v5);
    v13 = a1[5];
    v14 = a1[6];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100102E94;
    v24[3] = &unk_1002BBBD8;
    v25 = v5;
    objc_msgSend(v6, "authenticatedPlayersDidChange:authenticatingBundleID:reply:", v13, v14, v24);

  }
LABEL_10:
  if (objc_msgSend(*v3, "applicationState") != 2
    && objc_msgSend(*v3, "applicationState") != 4)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v3, "viewService"));
    v16 = v15;
    if (v15)
      objc_msgSend(v15, "authenticatedPlayersDidChange:authenticatingBundleID:reply:", a1[5], a1[6], &stru_1002C33C0);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "extensionProxies"));
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100102EA0;
    v21[3] = &unk_1002C3408;
    v22 = a1[5];
    v23 = a1[6];
    objc_msgSend(v17, "_gkEnumerateKeysAndObjectsUsingBlock:", v21);

  }
  if (a1[7])
  {
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "replyQueue"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100102EBC;
    v19[3] = &unk_1002BB540;
    v20 = a1[7];
    dispatch_group_notify(v5, v18, v19);

  }
}

void sub_100102E10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001066F0();
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100102E94(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_100102EA0(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "authenticatedPlayersDidChange:authenticatingBundleID:reply:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), &stru_1002C33E0);
}

uint64_t sub_100102EBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100103170(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectAtIndexedSubscript:", 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10010322C;
  v7[3] = &unk_1002BC3A8;
  v5 = *(void **)(a1 + 32);
  v7[4] = *(_QWORD *)(a1 + 40);
  v8 = v4;
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 32);
  v6 = v4;
  objc_msgSend(v5, "perform:", v7);

}

void sub_10010322C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transportWithCredential:", *(_QWORD *)(a1 + 40)));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001032FC;
  v7[3] = &unk_1002C3430;
  v7[4] = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v6 = v3;
  objc_msgSend(v4, "postRequest:forBagKey:response:", v5, CFSTR("gk-app-terminate"), v7);

}

uint64_t sub_1001032FC(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "setInitialized:", 0);
  objc_msgSend(*(id *)(a1 + 40), "setResult:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appSessions"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "playerInternal"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "playerID"));
  objc_msgSend(v8, "removeObjectForKey:", v10);

  objc_msgSend(*(id *)(a1 + 40), "setError:", v6);
  if (!os_log_GKGeneral)
    v12 = (id)GKOSLoggers(v11);
  v13 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v14 = *(_QWORD *)(a1 + 32);
    v16 = 138412290;
    v17 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Terminated (exiting) client %@", (uint8_t *)&v16, 0xCu);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_100103460(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100103650(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  id v10;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001036D4;
  v7[3] = &unk_1002C3458;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v8 = v4;
  v9 = v5;
  v10 = v6;
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v7);

}

void sub_1001036D4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectAtIndexedSubscript:", 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100103790;
  v7[3] = &unk_1002BC3A8;
  v5 = *(void **)(a1 + 32);
  v7[4] = *(_QWORD *)(a1 + 40);
  v8 = v4;
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 32);
  v6 = v4;
  objc_msgSend(v5, "perform:", v7);

}

void sub_100103790(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transportWithCredential:", *(_QWORD *)(a1 + 40)));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100103860;
  v8[3] = &unk_1002C3430;
  v5 = *(void **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = *(id *)(a1 + 56);
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "postRequest:forBagKey:response:", v6, CFSTR("gk-app-terminate"), v8);

}

uint64_t sub_100103860(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "setInitialized:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appSessions"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerInternal"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "playerID"));
  objc_msgSend(v8, "removeObjectForKey:", v10);

  objc_msgSend(*(id *)(a1 + 48), "setResult:", v7);
  objc_msgSend(*(id *)(a1 + 48), "setError:", v6);

  if (!os_log_GKGeneral)
    v12 = (id)GKOSLoggers(v11);
  v13 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v14 = *(_QWORD *)(a1 + 32);
    v16 = 138412290;
    v17 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Terminated (backgrounding) client %@", (uint8_t *)&v16, 0xCu);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1001039C4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100103E0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transportWithCredential:", *(_QWORD *)(a1 + 40)));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100103ED4;
  v10[3] = &unk_1002C3430;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v11 = v6;
  v12 = v7;
  v13 = v8;
  v14 = v3;
  v9 = v3;
  objc_msgSend(v4, "postRequest:forBagKey:response:", v5, CFSTR("gk-app-init"), v10);

}

void sub_100103ED4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;

  v5 = a2;
  v6 = *(void **)(a1 + 32);
  v7 = a3;
  objc_msgSend(v6, "setResult:", v5);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v7);

  if (v7)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setInitialized:", 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "representedItem"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("app-session")));

    objc_msgSend(*(id *)(a1 + 40), "addAppSession:forCredential:", v9, *(_QWORD *)(a1 + 48));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKUtilityServicePrivate, "serviceWithTransport:forClient:localPlayer:", 0, v10, 0));

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100104024;
    v12[3] = &unk_1002BC0D0;
    v13 = *(id *)(a1 + 56);
    objc_msgSend(v11, "checkAndUpdateArcadeSubscriberStatusWithHandler:", v12);

  }
}

uint64_t sub_100104024(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100104030(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "refreshPendingDataTypes");
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "result"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "error"));
    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

  }
}

void sub_1001042BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transportWithCredential:", *(_QWORD *)(a1 + 40)));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100104384;
  v10[3] = &unk_1002C3430;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v11 = v6;
  v12 = v7;
  v13 = v8;
  v14 = v3;
  v9 = v3;
  objc_msgSend(v4, "postRequest:forBagKey:response:", v5, CFSTR("gk-bg-init"), v10);

}

void sub_100104384(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setResult:", v9);
  objc_msgSend(*(id *)(a1 + 32), "setError:", v6);

  if (!v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "representedItem"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("app-session")));

    objc_msgSend(*(id *)(a1 + 40), "addAppSession:forCredential:", v8, *(_QWORD *)(a1 + 48));
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100104430(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);

}

void sub_100104D68(uint64_t a1)
{
  char v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  objc_msgSend(*(id *)(a1 + 32), "_setupDelayedRequestsWriters");
  v2 = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 64), "writerWithDatabaseConnection:gameDescriptor:");
  v3 = *(void **)(a1 + 64);
  v4 = *(_QWORD **)(a1 + 32);
  v5 = v4[35];
  if ((v2 & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "gameDescriptor"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "writerWithDatabaseConnection:gameDescriptor:", v5, v6));

  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "writerWithDatabaseConnection:", v5));
  }
  v8 = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 72), "readerWithDatabaseConnection:bundleID:");
  v9 = *(void **)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(v10 + 280);
  if ((v8 & 1) != 0)
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "readerWithDatabaseConnection:bundleID:", v11, *(_QWORD *)(v10 + 96)));
  else
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "readerWithDatabaseConnection:", v11));
  v13 = (void *)v12;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transportWithCredential:", *(_QWORD *)(a1 + 40)));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "writerWithTransport:forBagKey:", v14, *(_QWORD *)(a1 + 48)));
  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "databaseConnection"));
  if (v16
    && (v17 = (void *)v16,
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "databaseConnection")),
        v18,
        v17,
        v18))
  {
    v19 = objc_claimAutoreleasedReturnValue(+[GKDelayedRequestWriter writerWithCacheWriter:cacheReader:networkWriter:batchSubmissionInterval:](GKDelayedRequestWriter, "writerWithCacheWriter:cacheReader:networkWriter:batchSubmissionInterval:", v7, v13, v15, (double)*(uint64_t *)(a1 + 88)));
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;

  }
  else
  {
    if (!os_log_GKGeneral)
      v22 = (id)GKOSLoggers(v16);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10010681C();
  }

}

void sub_100105260(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  uint8_t v16[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  _BYTE v22[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy storeAndForwardDirectoryPathForEnvironment:](GKClientProxy, "storeAndForwardDirectoryPathForEnvironment:", *(_QWORD *)(a1 + 32)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager"));
  objc_msgSend(v4, "issuePending");

  v21 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contentsOfDirectoryAtPath:error:", v3, &v21));
  v6 = v21;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v18;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:pid:createIfNecessary:](GKClientProxy, "clientForBundleID:pid:createIfNecessary:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v11), 0, 1));
        objc_msgSend(v12, "performDelayedRequestsForEnvironment:", *(_QWORD *)(a1 + 32));

        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v9);
  }

  v13 = GKAtomicCompareAndSwap32Barrier(1, 0, &unk_100317FE0);
  if ((v13 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v13);
    v15 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "store and forward reentry count out of sync", v16, 2u);
    }
  }

}

id sub_100105508(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "performDelayedRequestsForCredential:", a2);
}

void sub_1001055B0(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  dispatch_time_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  id v20;
  NSObject *v21;
  dispatch_semaphore_t v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  id v26;
  void *v27;
  _QWORD block[5];
  id v29;
  dispatch_semaphore_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD v33[4];
  NSObject *v34;
  _QWORD *v35;
  _QWORD v36[4];
  NSObject *v37;
  _QWORD *v38;
  _QWORD v39[4];
  NSObject *v40;
  _QWORD *v41;
  _QWORD v42[4];
  NSObject *v43;
  _QWORD *v44;
  uint8_t buf[8];
  _QWORD v46[4];
  _QWORD v47[5];
  id v48;
  NSObject *v49;
  _QWORD *v50;
  _QWORD v51[5];
  id v52;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerInternal"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "playerID"));
  v4 = dispatch_group_create();
  v51[0] = 0;
  v51[1] = v51;
  v51[2] = 0x3032000000;
  v51[3] = sub_1000FC888;
  v51[4] = sub_1000FC898;
  v52 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appSessionForPlayer:", v2));
  if (!v5)
  {
    dispatch_group_enter(v4);
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(a1 + 40);
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_100105B50;
    v47[3] = &unk_1002C34F8;
    v50 = v51;
    v47[4] = v6;
    v48 = v2;
    v8 = v4;
    v49 = v8;
    objc_msgSend(v6, "bgInitializeWithCredential:completionHandler:", v7, v47);
    v9 = dispatch_time(0, 30000000000);
    dispatch_group_wait(v8, v9);

  }
  v46[0] = 0;
  v46[1] = v46;
  v46[2] = 0x2020000000;
  v46[3] = 0;
  dispatch_group_enter(v4);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "setPlayerStatusWriterWithCredential:", *(_QWORD *)(a1 + 32)));
  if (v10)
  {
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100105B94;
    v42[3] = &unk_1002C3520;
    v44 = v46;
    v43 = v4;
    objc_msgSend(v10, "submitDelayedRequestsForPlayer:handler:", v3, v42);

  }
  else
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(0);
    v12 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "setStatusWriter is nil. Do not call submitDelayedRequest.", buf, 2u);
    }
    dispatch_group_leave(v4);
  }
  dispatch_group_enter(v4);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "setPlayerPhotoWriterWithCredential:", *(_QWORD *)(a1 + 32)));
  v27 = v10;
  if (v13)
  {
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_100105C88;
    v39[3] = &unk_1002C3520;
    v41 = v46;
    v40 = v4;
    objc_msgSend(v13, "submitDelayedRequestsForPlayer:handler:", v3, v39);

  }
  else
  {
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(0);
    v15 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "setPlayerPhotoWriter is nil. Do not call submitDelayedRequest.", buf, 2u);
    }
    dispatch_group_leave(v4);
  }
  dispatch_group_enter(v4);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deletePlayerPhotoWriterWithCredential:", *(_QWORD *)(a1 + 32)));
  if (v16)
  {
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_100105D7C;
    v36[3] = &unk_1002C3520;
    v38 = v46;
    v37 = v4;
    objc_msgSend(v16, "submitDelayedRequestsForPlayer:handler:", v3, v36);

  }
  else
  {
    if (!os_log_GKGeneral)
      v17 = (id)GKOSLoggers(0);
    v18 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "deletePlayerPhotoWriter is nil. Do not call submitDelayedRequest.", buf, 2u);
    }
    dispatch_group_leave(v4);
  }
  dispatch_group_enter(v4);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "removeGameWriterWithCredential:", *(_QWORD *)(a1 + 32)));
  if (v19)
  {
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_100105E70;
    v33[3] = &unk_1002C3520;
    v35 = v46;
    v34 = v4;
    objc_msgSend(v19, "submitDelayedRequestsForPlayer:handler:", v3, v33);

  }
  else
  {
    if (!os_log_GKGeneral)
      v20 = (id)GKOSLoggers(0);
    v21 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "removeGameWriter is nil. Do not call submitDelayedRequest.", buf, 2u);
    }
    dispatch_group_leave(v4);
  }
  v22 = dispatch_semaphore_create(0);
  v23 = *(_QWORD *)(a1 + 40);
  v24 = *(NSObject **)(v23 + 272);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100105F64;
  block[3] = &unk_1002C3548;
  v31 = v46;
  v32 = v51;
  block[4] = v23;
  v29 = v2;
  v30 = v22;
  v25 = v22;
  v26 = v2;
  dispatch_group_notify(v4, v24, block);
  dispatch_semaphore_wait(v25, 0xFFFFFFFFFFFFFFFFLL);

  _Block_object_dispose(v46, 8);
  _Block_object_dispose(v51, 8);

}

void sub_100105B18(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100105B50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appSessionForPlayer:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100105B94(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  int v10;
  void *v11;

  v5 = a2;
  v7 = v5;
  if (v5)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v5, v6);
    v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Error submitting delayed requests for set player status %@", (uint8_t *)&v10, 0xCu);
    }
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100105C88(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  int v10;
  void *v11;

  v5 = a2;
  v7 = v5;
  if (v5)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v5, v6);
    v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Error submitting delayed requests for set player photo %@", (uint8_t *)&v10, 0xCu);
    }
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100105D7C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  int v10;
  void *v11;

  v5 = a2;
  v7 = v5;
  if (v5)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v5, v6);
    v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Error submitting delayed requests for delete player photo %@", (uint8_t *)&v10, 0xCu);
    }
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100105E70(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  int v10;
  void *v11;

  v5 = a2;
  v7 = v5;
  if (v5)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v5, v6);
    v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Error submitting delayed requests for remove game %@", (uint8_t *)&v10, 0xCu);
    }
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

intptr_t sub_100105F64(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delayedRequestsDBConnection"));
  objc_msgSend(v2, "close");

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    objc_msgSend(*(id *)(a1 + 32), "_removeDelayedRequestStore");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
    objc_msgSend(*(id *)(a1 + 32), "removeAppSessionForPlayer:", *(_QWORD *)(a1 + 40));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100105FDC(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_100027A18(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "currentGame"));
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v3, v5, "Skipping nearbyDiscovery setup since current game not supporting multiplayer: %@", v6);

  sub_1000279E0();
}

void sub_100106068()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Push token is nil or no valid playerID. We cannot have peer discovery setup.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100106094(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = sub_100027A18(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "currentGame"));
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v3, v5, "Skipping peerDiscovery setup since current game not supporting multiplayer: %@", v6);

  sub_1000279E0();
}

void sub_100106120()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "clearDiscoveryInfo - peerDiscovery", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10010614C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "clearDiscoveryInfo - nearbyDiscovery", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100106178()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "clearDiscoveryInfo - peerDiscovery listener stopped.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1001061A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "clearDiscoveryInfo - peerDiscovery browsing stopped.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1001061D0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "The source app %@ has been allow-listed such that this app will appear as though it were downloaded from the App Store", v2);
  sub_100016C20();
}

void sub_100106234()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "This app was not downloaded from the App Store.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100106260()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Could not processMatchResponse from result because it's nil", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10010628C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Could not processMatchResponse from result because it's finished", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1001062B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Invalidate caches after matched", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1001062E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "in clientForBundleID:bundle:pid:createIfNecessary: with no bundleID. Cannot get GKClientProxy without a bundleID", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100106310(void *a1, double a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  __int16 v7;
  double v8;

  v3 = sub_100027A18(a1);
  v5 = 136315394;
  v6 = "clientInit";
  v7 = 2048;
  v8 = CFAbsoluteTimeGetCurrent() - a2;
  sub_100027994((void *)&_mh_execute_header, v3, v4, "%s elapsed seconds:%g", (uint8_t *)&v5);

}

void sub_1001063B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "sendAuthenticationDidChangeNotification:Failed to get authenticated Local players with status. error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100106418(uint64_t a1)
{
  NSObject *v1;
  int v2;
  uint64_t v3;

  v2 = 138412546;
  v3 = a1;
  sub_100105FCC();
  sub_100027994((void *)&_mh_execute_header, v1, (uint64_t)v1, "INVALID TRANSITION from %@ to %@", (uint8_t *)&v2);
  sub_100016C20();
}

void sub_100106488(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  __int128 v3;

  LODWORD(v3) = 138412546;
  *(_QWORD *)((char *)&v3 + 4) = *(_QWORD *)(a1 + 32);
  sub_100105FCC();
  sub_100016C0C((void *)&_mh_execute_header, v1, v2, "%@ encountered an error:%@", (_QWORD)v3, DWORD2(v3));
  sub_100016C20();
}

void sub_1001064F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "updateInviteWithNotification cannot find proxy for: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100106554()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "updateInviteWithNotification encountered an error:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1001065B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "setCurrentGame:serverEnvrionment:reply: encountered an error:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100106614(_QWORD *a1, void *a2)
{
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;

  v3 = (void *)*a1;
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleIdentifier"));
  v7 = (void *)objc_opt_class(*a1, v6);
  v9 = 138412802;
  v10 = v5;
  v11 = 2112;
  v12 = v7;
  v13 = 2048;
  v8 = sub_100027A18(v7);
  _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "authenticatedPlayersDidChange: sent to client:%@ <%@ %p>)", (uint8_t *)&v9, 0x20u);

}

void sub_1001066F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "authenticatedPlayersDidChange: proxy send failed due to error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100106750(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  __int128 v3;

  LODWORD(v3) = 138412546;
  *(_QWORD *)((char *)&v3 + 4) = a1;
  sub_100105FCC();
  sub_100016C0C((void *)&_mh_execute_header, v1, v2, "Failed to remove delayed requests store \"%@\". ERROR: %@", (_QWORD)v3, DWORD2(v3));
  sub_100016C20();
}

void sub_1001067B8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "Removing delayed request store \"%@\".", v2);
  sub_100016C20();
}

void sub_10010681C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "cacheReader or cacheWriter has nil databaseConnection.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1001068A8(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)GKThreadsafeDictionary), "initWithName:", CFSTR("com.apple.gamed.per-player-context"));
  v2 = (void *)qword_100317FE8;
  qword_100317FE8 = (uint64_t)v1;

}

id sub_1001068DC(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "gameCenterClient");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v6 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v5);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleIdentifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "language"));
  v10 = objc_msgSend(v6, "newManagedObjectContextForPlayerID:bundleID:language:environment:", v7, v8, v9, objc_msgSend(v4, "environment"));

  return v10;
}

id sub_100106E08(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
    sub_10010841C(a1, v3, v4, v5, v6, v7, v8, v9);
  objc_msgSend(*(id *)(a1 + 48), "closeDatabaseFromManagedObjectContextForPlayerID:", *(_QWORD *)(a1 + 32));
  return objc_msgSend((id)qword_100317FE8, "removeObjectForKey:", *(_QWORD *)(a1 + 40));
}

void sub_100106E88(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[4];
  id v4;
  id v5;
  id v6;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100106F20;
  block[3] = &unk_1002BC380;
  v2 = *(NSObject **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  dispatch_async(v2, block);

}

void sub_100106F20(uint64_t a1)
{
  void *v2;
  void *v3;
  GKSecureFileLocator *v4;

  v4 = -[GKSecureFileLocator initWithFileManager:]([GKSecureFileLocator alloc], "initWithFileManager:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "bundleIdentifier"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "language"));
  -[GKSecureFileLocator removeCacheDirectoryWithBundleID:language:contextID:](v4, "removeCacheDirectoryWithBundleID:language:contextID:", v2, v3, *(_QWORD *)(a1 + 48));

}

void sub_100106FA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  void *v9;
  id v10;
  id v11;

  v2 = GKImageCacheRoot(0);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
    sub_1001084E4();
  v6 = *(void **)(a1 + 32);
  v11 = 0;
  v7 = objc_msgSend(v6, "removeItemAtPath:error:", v4, &v11);
  v8 = v11;
  v9 = v8;
  if ((v7 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v10 = (id)GKOSLoggers(v8);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100108484();
  }

}

void sub_100107198(uint64_t a1)
{
  NSObject *v2;
  id v3;
  __int128 v4;
  _QWORD block[4];
  id v6;
  __int128 v7;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cacheFileQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010723C;
  block[3] = &unk_1002C0B88;
  v6 = *(id *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 40);
  v3 = (id)v4;
  v7 = v4;
  dispatch_async(v2, block);

}

void sub_10010723C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  GKSecureFileLocator *v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  unsigned __int8 v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
    sub_100108608(v3, v4, v5, v6, v7, v8, v9, v10);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allValues"));
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v28;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v28 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(a1 + 48), "closeDatabaseFromManagedObjectContextForMOC:", *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v15));
        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    }
    while (v13);
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v17 = -[GKSecureFileLocator initWithFileManager:]([GKSecureFileLocator alloc], "initWithFileManager:", v16);
  -[GKSecureFileLocator removeCaches](v17, "removeCaches");
  v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cacheDirectoryForBundleID:", 0));
  v19 = (void *)v18;
  if (!os_log_GKGeneral)
    v20 = (id)GKOSLoggers(v18);
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
    sub_1001085A8();
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v19, 1));
  v26 = 0;
  v22 = objc_msgSend(v16, "removeItemAtURL:error:", v21, &v26);
  v23 = v26;

  if ((v22 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v25 = (id)GKOSLoggers(v24);
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR))
      sub_100108544();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1001074BC(id a1)
{
  id v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!os_log_GKGeneral)
    v1 = (id)GKOSLoggers(a1);
  v2 = os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
    sub_100108638(v2, v3, v4, v5, v6, v7, v8, v9);
}

void sub_100107558(id a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  int v8;
  void *v9;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLForResource:withExtension:", CFSTR("GKCentralCache"), CFSTR("momd")));

  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v3);
  v5 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v8 = 138412290;
    v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Loading CoreData model from URL: %@", (uint8_t *)&v8, 0xCu);
  }
  v6 = objc_msgSend(objc_alloc((Class)NSManagedObjectModel), "initWithContentsOfURL:", v2);
  v7 = (void *)qword_100318000;
  qword_100318000 = (uint64_t)v6;

}

void sub_1001076AC(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.gamed.GKClientProxy.cache.file.queue", 0);
  v2 = (void *)qword_100318010;
  qword_100318010 = (uint64_t)v1;

}

void sub_100107A9C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  dispatch_queue_t current_queue;
  NSObject *v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  void *v48;
  id v49;
  id v50;
  id v51;

  CFAbsoluteTimeGetCurrent();
  if (!os_log_GKGeneral)
    v3 = (id)GKOSLoggers(v2);
  v4 = os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
    sub_1001088C4(a1, v4, v5, v6, v7, v8, v9, v10);
  v11 = *(void **)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 48);
  v51 = 0;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "addPersistentStoreWithType:configuration:URL:options:error:", NSSQLiteStoreType, 0, v12, v13, &v51));
  v15 = v51;

  if (!v14)
  {
    if (!os_log_GKGeneral)
      v17 = (id)GKOSLoggers(v16);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100108858((_QWORD *)(a1 + 32));

    if (!os_log_GKGeneral)
      v19 = (id)GKOSLoggers(v18);
    v20 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
      sub_100108828(v20, v21, v22, v23, v24, v25, v26, v27);
    v28 = *(void **)(a1 + 56);
    v29 = *(_QWORD *)(a1 + 32);
    v50 = 0;
    v30 = objc_msgSend(v28, "removeItemAtURL:error:", v29, &v50);
    v31 = v50;
    v15 = v31;
    if (v30)
    {

      v33 = *(_QWORD *)(a1 + 32);
      v32 = *(void **)(a1 + 40);
      v34 = *(_QWORD *)(a1 + 48);
      v49 = 0;
      v35 = objc_msgSend(v32, "addPersistentStoreWithType:configuration:URL:options:error:", NSSQLiteStoreType, 0, v33, v34, &v49);
      v16 = v49;
      v15 = v16;
    }
    else
    {
      if (!os_log_GKGeneral)
        v36 = (id)GKOSLoggers(v31);
      v16 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v16)
        sub_1001087BC((_QWORD *)(a1 + 32));
    }
  }
  if (!os_log_GKGeneral)
    v37 = (id)GKOSLoggers(v16);
  v38 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_100108730(v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "persistentStores"));
  v40 = objc_msgSend(v39, "count");

  if (!v40)
  {
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("FATAL: Failed to add persistent store at %@ : %@"), *(_QWORD *)(a1 + 32), v15));
    +[GKProcessExiter cleanExitWith:](GKProcessExiter, "cleanExitWith:", v41);

  }
  current_queue = dispatch_get_current_queue();
  v43 = objc_claimAutoreleasedReturnValue(current_queue);
  dispatch_queue_set_specific(v43, CFSTR("com.apple.gamed.cachequeue"), CFSTR("com.apple.gamed.cachequeue"), 0);

  if (!os_log_GKGeneral)
    v45 = (id)GKOSLoggers(v44);
  v46 = (void *)os_log_GKCache;
  if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
    sub_100108668((void **)(a1 + 40), v46);
  objc_msgSend(*(id *)(a1 + 64), "setPersistentStoreCoordinator:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 64), "setMergePolicy:", NSMergeByPropertyObjectTrumpMergePolicy);
  objc_msgSend(*(id *)(a1 + 64), "setRetainsRegisteredObjects:", 0);
  v47 = *(_QWORD *)(a1 + 72);
  if (v47)
  {
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v47, *(_QWORD *)(a1 + 64)));
    if (v48)
      +[GKPlayerProfileCacheObject buildFamiliarilyLookupForProfile:](GKPlayerProfileCacheObject, "buildFamiliarilyLookupForProfile:", v48);

  }
}

void sub_100107F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100107F58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100107F68(uint64_t a1)
{

}

void sub_100107F70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  _QWORD v10[4];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "createPersistentStoreCoordinator"));
  v9[0] = NSPersistentStoreFileProtectionKey;
  v9[1] = NSSQLitePragmasOption;
  v10[0] = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v10[1] = &off_1002DC4A0;
  v9[2] = NSMigratePersistentStoresAutomaticallyOption;
  v9[3] = NSInferMappingModelAutomaticallyOption;
  v10[2] = &__kCFBooleanTrue;
  v10[3] = &__kCFBooleanTrue;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 4));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "gameCenterCacheDatabaseURLForPlayerID:language:name:fileManager:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), CFSTR("database.sqlite3"), v4));
  objc_msgSend(*(id *)(a1 + 64), "migrateInsecureDatabaseToSecureDatabaseURL:usingPersistantStoreCoordinator:fileManager:options:playerID:bundleID:language:name:", v5, v2, v4, v3, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), CFSTR("database.sqlite3"));
  v6 = objc_msgSend(*(id *)(a1 + 64), "_newManagedObjectContextWithCacheURL:environment:psc:storeOptions:", v5, *(_QWORD *)(a1 + 72), v2, v3);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_100108318(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;

  v1 = objc_msgSend(*(id *)(a1 + 32), "persistentStoreCoordinator", CFAbsoluteTimeGetCurrent());
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "persistentStores"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstObject"));
  v9 = 0;
  v5 = objc_msgSend(v2, "removePersistentStore:error:", v4, &v9);
  v6 = v9;

  if ((v5 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v7);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001089B8();
  }

}

void sub_1001083F8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_10010841C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100034EE4((void *)&_mh_execute_header, a2, a3, "Closing database for the cache of playerID: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_100108484()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error removing images cache directory: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1001084E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Deleting image cache directory %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100108544()
{
  uint64_t v0;
  os_log_t v1;

  sub_1000279B0();
  sub_100105FCC();
  sub_100016C0C((void *)&_mh_execute_header, v0, v1, "Unable to remove cache directory %@ : %@");
  sub_100016C20();
}

void sub_1001085A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100034EE4((void *)&_mh_execute_header, v0, v1, "Deleting cache dir %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100108608(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "Resetting all caches", a5, a6, a7, a8, 0);
  sub_100027A04();
}

void sub_100108638(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "Done removing all caches", a5, a6, a7, a8, 0);
  sub_100027A04();
}

void sub_100108668(void **a1, void *a2)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t v7[24];

  v2 = *a1;
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "persistentStores"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firstObject"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URL"));
  sub_1000279B0();
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Creating managed object context with persistent store %@", v7, 0xCu);

}

void sub_100108730(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_1000279CC();
  sub_1001083F8((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_10010840C();
}

void sub_1001087BC(_QWORD *a1)
{
  uint64_t v1;
  os_log_t v2;
  __int128 v3;

  LODWORD(v3) = 138412546;
  *(_QWORD *)((char *)&v3 + 4) = *a1;
  sub_100105FCC();
  sub_100016C0C((void *)&_mh_execute_header, v1, v2, "Error removing cache file at %@ : %@", (_QWORD)v3, DWORD2(v3));
  sub_100016C20();
}

void sub_100108828(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "DELETING PREVIOUS CACHE", a5, a6, a7, a8, 0);
  sub_100027A04();
}

void sub_100108858(_QWORD *a1)
{
  uint64_t v1;
  os_log_t v2;
  __int128 v3;

  LODWORD(v3) = 138412546;
  *(_QWORD *)((char *)&v3 + 4) = *a1;
  sub_100105FCC();
  sub_100016C0C((void *)&_mh_execute_header, v1, v2, "Error adding persistent store at %@ : %@", (_QWORD)v3, DWORD2(v3));
  sub_100016C20();
}

void sub_1001088C4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100034EE4((void *)&_mh_execute_header, a2, a3, "Setting up cache URL: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_10010892C(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  CFAbsoluteTimeGetCurrent();
  sub_1000279CC();
  sub_1001083F8((void *)&_mh_execute_header, v2, v3, "%s elapsed seconds:%g", v4, v5, v6, v7, 2u);

  sub_10010840C();
}

void sub_1001089B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Unable to remove persistent store while removing cache for player due to error:%@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

id IDSCopyRawCKIDForDestination(void *a1)
{
  id v1;
  char *v2;
  uint64_t v3;
  void *v4;

  v1 = a1;
  v2 = (char *)objc_msgSend(v1, "rangeOfString:", CFSTR("urn:ck:"));
  if (v2 == (char *)0x7FFFFFFFFFFFFFFFLL)
    v4 = 0;
  else
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "substringFromIndex:", &v2[v3]));

  return v4;
}

void sub_100108A74(id a1)
{
  GKConnectionManager *v1;
  void *v2;

  v1 = objc_alloc_init(GKConnectionManager);
  v2 = (void *)qword_100318020;
  qword_100318020 = (uint64_t)v1;

}

void sub_100108C4C(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  void *v7;
  unsigned int v8;
  __CFString *v9;
  __CFString *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "accounts", 0));
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "loginID"));
        v8 = objc_msgSend(v7, "containsString:", CFSTR("@"));

        if (v8)
        {
          v9 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "loginID"));
          v10 = off_100314300;
          off_100314300 = v9;

          goto LABEL_11;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

}

uint64_t sub_100108E3C(_QWORD *a1)
{
  void *v2;
  id v3;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 24), "objectForKeyedSubscript:", a1[5]));
  v3 = objc_msgSend(v2, "isBusyChangingConnectionState");

  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v3);
  return result;
}

void sub_1001093C8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v4));
  objc_msgSend(v3, "updateCloudGameSession:", *(_QWORD *)(a1 + 40));

}

void sub_10010968C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  _QWORD v18[6];
  id v19;
  id v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", CFSTR("disconnectClient")));
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v3 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_100109874;
        v18[3] = &unk_1002BF3C0;
        v9 = *(void **)(a1 + 40);
        v18[4] = *(_QWORD *)(a1 + 32);
        v18[5] = v8;
        v10 = v9;
        v11 = *(_QWORD *)(a1 + 56);
        v19 = v10;
        v21 = v11;
        v20 = v2;
        objc_msgSend(v20, "perform:", v18);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v5);
  }

  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100109994;
  v15[3] = &unk_1002BB450;
  v13 = *(id *)(a1 + 48);
  v16 = v2;
  v17 = v13;
  v14 = v2;
  objc_msgSend(v14, "notifyOnQueue:block:", v12, v15);

}

void sub_100109874(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100109934;
  v8[3] = &unk_1002BB6E8;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v9 = *(id *)(a1 + 56);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "handleDisconnectForClient:reason:handler:", v5, v6, v8);

}

void sub_100109934(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v3)
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100109994(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_100109C08(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKGameSessionService, "serviceWithTransport:forClient:localPlayer:", 0, *(_QWORD *)(a1 + 32), 0));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100109CE4;
  v7[3] = &unk_1002C36B8;
  v11 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 32);
  v10 = v3;
  v6 = v3;
  objc_msgSend(v4, "setConnectionState:forSessionWithIdentifier:handler:", 0, v5, v7);

}

void sub_100109CE4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[16];
  _BYTE v24[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  v9 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GKConnectionManager:: did save connection state for background or app termination.", buf, 2u);
  }
  if (v5 && !v7 && *(_QWORD *)(a1 + 56) == 2)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("playerID")));
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "players"));
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v20;
      while (2)
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v20 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "identifier"));
          v18 = objc_msgSend(v17, "isEqualToString:", v10);

          if (v18)
          {
            objc_msgSend(*(id *)(a1 + 40), "session:player:didChangeConnectionState:", v5, v16, 0);
            goto LABEL_18;
          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
        if (v13)
          continue;
        break;
      }
    }
LABEL_18:

    v7 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100109EDC(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("sessionID")));
  objc_msgSend(v1, "setObject:forKeyedSubscript:", 0, v2);

}

void sub_10010A004(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v3, "sendData:reliably:handler:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 56));
  }
  else
  {
    if (!*(_QWORD *)(a1 + 56))
      return;
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSError _gkUserErrorForGameSessionErrorCode:userInfo:](NSError, "_gkUserErrorForGameSessionErrorCode:userInfo:", 8, 0));
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_10010A388(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  __int16 v9;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10010A440;
  v5[3] = &unk_1002C36E0;
  v9 = *(_WORD *)(a1 + 48);
  v6 = *(id *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v4 = v3;
  +[GKCloudGameSession primaryPlayerWithHandler:](GKCloudGameSession, "primaryPlayerWithHandler:", v5);

}

void sub_10010A440(uint64_t a1, void *a2, void *a3)
{
  id v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  if (v14)
  {
    v6 = *(unsigned __int16 *)(a1 + 56);
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "displayName"));
    v8 = (void *)v7;
    if (v6 == 120)
    {
      if (!v7)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "emailsByCKID"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", v10));
        objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, CFSTR("playerName"));

LABEL_9:
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
        objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v13, CFSTR("playerID"));

        goto LABEL_10;
      }
    }
    else if (!v7)
    {
      v12 = objc_claimAutoreleasedReturnValue(+[GCFLocalizedStrings SESSION_PLAYER](_TtC20GameCenterFoundation19GCFLocalizedStrings, "SESSION_PLAYER"));
      goto LABEL_8;
    }
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "displayName"));
LABEL_8:
    v9 = (void *)v12;
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v12, CFSTR("playerName"));
    goto LABEL_9;
  }
LABEL_10:
  objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10010A590(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10010A624;
  v6[3] = &unk_1002C3730;
  v4 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "getShareURLWithHandler:", v6);

}

void sub_10010A624(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (!v6)
    objc_msgSend(*(id *)(a1 + 32), "setError:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "absoluteString"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v7, CFSTR("shareURL"));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10010A6C4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *i;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  _QWORD v42[5];
  _QWORD v43[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  if (v2)
  {

    goto LABEL_3;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("playerID")));
  if (!v4)
  {
LABEL_3:
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      v34 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
      (*(void (**)(uint64_t))(v3 + 16))(v3);

    }
    return;
  }
  v5 = v4;
  if (*(_WORD *)(a1 + 104) == 120)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("shareURL")));

    if (!v6)
      goto LABEL_3;
  }
  else
  {

  }
  v42[0] = GKPushCommandKey;
  v35 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", *(__int16 *)(a1 + 104)));
  v43[0] = v35;
  v42[1] = GKSessionPushSessionIdentifier;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  v43[1] = v7;
  v42[2] = GKSessionPushCloudContainer;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "record"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "recordID"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "zoneID"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "zoneName"));
  v43[2] = v11;
  v42[3] = GKSessionPushOriginatingDeviceType;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 48), "deviceTypeForNotification")));
  v43[3] = v12;
  v42[4] = GKSessionPushSenderID;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("playerID")));
  v43[4] = v13;
  v14 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v43, v42, 5));

  v36 = (id)v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v14));
  if (*(_QWORD *)(a1 + 56))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 3));
    objc_msgSend(v16, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 56), CFSTR("loc-key"));
    objc_msgSend(v16, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 56), CFSTR("loc-default"));
    v17 = *(_QWORD *)(a1 + 64);
    if (v17)
      objc_msgSend(v16, "setObject:forKeyedSubscript:", v17, CFSTR("loc-args"));
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v16, GKSessionPushLocalizableMessage);

  }
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v18, GKSessionPushData);
  v19 = *(_QWORD *)(a1 + 80);
  if (v19)
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v19, GKSessionPushUserMessage);
  v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("shareURL")));
  if (v20)
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v20, GKSessionPushShareURL);
  if (*(_WORD *)(a1 + 104) == 120)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("playerName")));
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v21, GKSessionPushSenderName);

  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 88), "count")));
  if (*(_WORD *)(a1 + 104) == 120)
    v23 = objc_claimAutoreleasedReturnValue(+[GKCloudGameSession friendEmailsByID](GKCloudGameSession, "friendEmailsByID", v20));
  else
    v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "emailsByCKID", v20));
  v24 = (void *)v23;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v25 = *(id *)(a1 + 88);
  v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
  if (v26)
  {
    v27 = v26;
    v28 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v27; i = (char *)i + 1)
      {
        if (*(_QWORD *)v38 != v28)
          objc_enumerationMutation(v25);
        v30 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v30));

        if (v31)
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", v30));
          objc_msgSend(v22, "addObject:", v32);

        }
      }
      v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    }
    while (v27);
  }

  objc_msgSend(*(id *)(a1 + 48), "sendNotificationMessage:toIDSIDs:handler:", v15, v22, *(_QWORD *)(a1 + 96));
}

void sub_10010AF34(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), (_QWORD)v8));
        objc_msgSend(v7, "clientEnteredBackgroundState:", *(_QWORD *)(a1 + 40));

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

}

void sub_10010B884(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[2] = sub_10010B938;
  v6[3] = &unk_1002C3780;
  v4 = *(void **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[1] = 3221225472;
  v7 = v4;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v5 = v3;
  +[GKCloudGameSession primaryPlayerWithHandler:](GKCloudGameSession, "primaryPlayerWithHandler:", v6);

}

void sub_10010B938(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      v13 = 138412290;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GKIDSConnection: error getting primary player from game session %@", (uint8_t *)&v13, 0xCu);
    }
  }
  if (v5)
  {
    v10 = *(void **)(a1 + 40);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v11));
    objc_msgSend(*(id *)(a1 + 32), "setPrimaryPlayerCKID:", v12);

  }
  objc_msgSend(*(id *)(a1 + 48), "setError:", v7);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10010BA7C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  uint8_t v17[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "connectedPlayerIDs"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v2, "count")));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v19;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v19 != v7)
          objc_enumerationMutation(v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v8)));
        objc_msgSend(v3, "addObject:", v9);

        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v6);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "primaryPlayerCKID"));
  objc_msgSend(v3, "removeObject:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
  if (v11)
  {

  }
  else
  {
    v12 = objc_msgSend(v3, "count");
    if (v12)
    {
      objc_msgSend(*(id *)(a1 + 32), "setConnectionCompleteHandler:", *(_QWORD *)(a1 + 56));
      objc_msgSend(*(id *)(a1 + 32), "connectToPlayersWithIdentifiers:", v3);
      goto LABEL_18;
    }
  }
  if (!os_log_GKGeneral)
    v13 = (id)GKOSLoggers(v12);
  v14 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "GKIDSConnection: First player with connection state connected, no one to connect to.", v17, 2u);
  }
  v15 = *(_QWORD *)(a1 + 56);
  if (v15)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);

  }
LABEL_18:

}

void sub_10010C10C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id *v4;
  id WeakRetained;
  uint8_t v6[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKIDSConnection connection timeout timer fired.  Failure while attempting to connect to other players.", v6, 2u);
  }
  v4 = *(id **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4 + 1);
  objc_msgSend(v4, "handleDisconnectForClient:reason:handler:", WeakRetained, 1, &stru_1002C37A0);

}

id sub_10010D8A8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "sendHeartbeatToConnections");
}

int64_t sub_10010D9B8(id a1, NSString *a2, NSString *a3)
{
  return -[NSString compare:](a2, "compare:", a3);
}

id sub_10010E7D4(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id *v4;
  id WeakRetained;
  uint8_t v7[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKIDSConnection client in background, disconnecting IDSSessions", v7, 2u);
  }
  v4 = *(id **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4 + 1);
  objc_msgSend(v4, "handleDisconnectForClient:reason:handler:", WeakRetained, 2, &stru_1002C3800);

  return objc_msgSend(*(id *)(a1 + 32), "cancelBackgroundTimer");
}

void sub_10010EB78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error sending localized message over IDSService %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10010EBD8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "invitationAcceptedForIDSSession: Error processing NSData for IDSSession invite response.", v1, 2u);
}

void sub_10010EC18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "setupStreamForIDSSession: Error obtaining NWStreamConnection for IDSSession %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10010EC78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "setupDatagramForIDSSession: Error obtaining NWDatagramConnection for IDSSession %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10010ECD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "sendData:reliability:handler: No handler and Error creating data packet for sending match data %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10010ED38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "sendData:reliability:handler: Error creating data packet for sending match data %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

id sub_10010F030(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "readData");
}

void sub_10010F038(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 16), "error"));
  objc_msgSend(v4, "connectionWrapper:didFailWithError:", v2, v3);

}

void sub_10010F314(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[4];
  NSObject *v7;

  v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
  v4 = *(_QWORD *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10010F3C4;
  v6[3] = &unk_1002C3260;
  v7 = v2;
  v5 = v2;
  objc_msgSend(v3, "writeData:completionHandler:", v4, v6);

  dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_10010F3C4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10010FCC8((uint64_t)v4, v6, v7, v8, v9, v10, v11, v12);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_10010F4F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10010F518(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegateQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10010F5F0;
    block[3] = &unk_1002BC380;
    v11 = v6;
    v12 = v8;
    v13 = v5;
    dispatch_async(v9, block);

  }
}

void sub_10010F5F0(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;

  v2 = a1 + 32;
  if (*(_QWORD *)(a1 + 32))
  {
    if (!os_log_GKGeneral)
      v3 = (id)GKOSLoggers(a1);
    v4 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10010FD2C(v2, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
    objc_msgSend(v11, "connectionWrapper:didReceiveData:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "connection"));
  v13 = objc_msgSend(v12, "connectionState");

  if (v13 == (id)3)
    objc_msgSend(*(id *)(a1 + 40), "readData");
}

void sub_10010F810(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  NSObject *v7;
  uint64_t v8;

  v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connection"));
  v8 = *(_QWORD *)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10010F910;
  v6[3] = &unk_1002C3260;
  v7 = v2;
  v5 = v2;
  objc_msgSend(v3, "writeDatagrams:completionHandler:", v4, v6);

  dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_10010F910(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10010FD94((uint64_t)v4, v6, v7, v8, v9, v10, v11, v12);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_10010FA3C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10010FA60(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegateQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10010FB38;
    block[3] = &unk_1002BC380;
    v11 = v6;
    v12 = v5;
    v13 = v8;
    dispatch_async(v9, block);

  }
}

void sub_10010FB38(uint64_t a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v2 = a1 + 32;
  if (*(_QWORD *)(a1 + 32))
  {
    if (!os_log_GKGeneral)
      v3 = (id)GKOSLoggers(a1);
    v4 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10010FDF8(v2, v4, v5, v6, v7, v8, v9, v10);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v11 = *(id *)(a1 + 40);
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v21;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v21 != v14)
            objc_enumerationMutation(v11);
          v16 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v15);
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "delegate", (_QWORD)v20));
          objc_msgSend(v17, "connectionWrapper:didReceiveData:", *(_QWORD *)(a1 + 48), v16);

          v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v13);
    }

  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "connection", (_QWORD)v20));
  v19 = objc_msgSend(v18, "connectionState");

  if (v19 == (id)3)
    objc_msgSend(*(id *)(a1 + 48), "readData");
}

void sub_10010FCC8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "_sendData: Error writing data to NWConnectionStream %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_10010FD2C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "readData  Error reading data on NWStreamConnection %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_10010FD94(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "_sendData: Error writing data to NWDatagramConnection %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_10010FDF8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "readData  Error reading data on NWDatagramConnection %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

uint64_t sub_100110228(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1001107E4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "setTestGame: rejected non-allowed bundleID: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100110A68(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t v18;
  uint8_t buf[4];
  void *v20;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "got localized name for game:%@", buf, 0xCu);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pushCredentialForEnvironment:", objc_msgSend(*(id *)(a1 + 32), "currentEnvironment")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "playerInternal"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceForBundleID:localPlayer:](GKMultiplayerMatchService, "serviceForBundleID:localPlayer:", *(_QWORD *)(a1 + 40), v9));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100110C10;
  v15[3] = &unk_1002C3878;
  v16 = v4;
  v11 = *(void **)(a1 + 48);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 32);
  v17 = v12;
  v18 = v13;
  v14 = v4;
  objc_msgSend(v10, "updateCacheWithNearbyProfileDictionary:handler:", v11, v15);

}

void sub_100110C10(uint64_t a1, void *a2)
{
  id v3;
  GKBulletinNearbyInvite *v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  _BOOL8 v9;
  id v10;
  NSObject *v11;
  _BOOL8 v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  NSObject *v17;
  int v18;
  GKBulletinNearbyInvite *v19;

  v3 = a2;
  v4 = -[GKBulletinNearbyInvite initWithPlayer:localizedGameName:inviteDictionary:]([GKBulletinNearbyInvite alloc], "initWithPlayer:localizedGameName:inviteDictionary:", v3, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](GKBulletinController, "sharedController"));
  objc_msgSend(v5, "presentBulletin:", v4);

  if (!os_log_GKGeneral)
    v7 = (id)GKOSLoggers(v6);
  v8 = os_log_GKTrace;
  v9 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
  if (v9)
  {
    LOWORD(v18) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GKDataRequestManager+Nearby: presentNearbyInvite - Presented Nearby Invite", (uint8_t *)&v18, 2u);
  }
  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v9);
  v11 = os_log_GKMatch;
  v12 = os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO);
  if (v12)
  {
    v18 = 138412290;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "presented nearby invite:%@", (uint8_t *)&v18, 0xCu);
  }
  if (!os_log_GKGeneral)
    v13 = (id)GKOSLoggers(v12);
  v14 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    LOWORD(v18) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "end presentNearbyInvite:", (uint8_t *)&v18, 2u);
  }
  v15 = objc_msgSend(*(id *)(a1 + 48), "endTransaction:", CFSTR("presentNearbyInvite"));
  if (!os_log_GKGeneral)
    v16 = (id)GKOSLoggers(v15);
  v17 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    LOWORD(v18) = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "GKDataRequestManager+Nearby: presentNearbyInvite - Ended Nearby Invite", (uint8_t *)&v18, 2u);
  }

}

void sub_100111474(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "GKDataRequestManager+Nearby: handleNearbyInviteResponse: - No Client Proxy Found for incoming dictionary:%@", (uint8_t *)&v2, 0xCu);
}

void sub_1001114E8(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 134218242;
  v4 = a2;
  v5 = 2112;
  v6 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "GKDataRequestManager+Nearby - Nearby invite NC response type not handled: %ld for incoming dictionary:%@", (uint8_t *)&v3, 0x16u);
}

id GKDaemonRun()
{
  dispatch_queue_t v0;
  void *v1;
  GKDataRequestManager *v2;
  void *v3;

  v0 = dispatch_queue_create("com.apple.gamed.clientQueue", 0);
  v1 = (void *)qword_100318030;
  qword_100318030 = (uint64_t)v0;

  v2 = objc_alloc_init(GKDataRequestManager);
  v3 = (void *)qword_100318038;
  qword_100318038 = (uint64_t)v2;

  objc_msgSend((id)qword_100318038, "finishStartup");
  objc_msgSend((id)qword_100318038, "updateActivePushEnvironment");
  return +[GKClientProxy checkGameCenterEnabledForegroundClients](GKClientProxy, "checkGameCenterEnabledForegroundClients");
}

void sub_1001116C4(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.GameKit.GKDataRequestManager.push", 0);
  v2 = (void *)qword_100318040;
  qword_100318040 = (uint64_t)v1;

}

void sub_100111730(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.GameKit.GKDataRequestManager.sync", 0);
  v2 = (void *)qword_100318050;
  qword_100318050 = (uint64_t)v1;

  dispatch_queue_set_specific((dispatch_queue_t)qword_100318050, &off_100314488, "com.apple.GameKit.GKDataRequestManager.sync", 0);
}

void sub_1001119C8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v2 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.gamed"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setDelegate:");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setOptions:", 256);
  objc_msgSend(*(id *)(a1 + 32), "setNatType:", +[GKViceroyNATTypeHelper initialNATType](GKViceroyNATTypeHelper, "initialNATType"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKReachability _gkReachabilityForInternetConnection](GKReachability, "_gkReachabilityForInternetConnection"));
  objc_msgSend(*(id *)(a1 + 32), "setReachability:", v5);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "_gkStartNotifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v6, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "reachabilityDidChange:", CFSTR("GKNetworkReachabilityChangedNotification"), 0);

  objc_msgSend(*(id *)(a1 + 32), "iCloudAccountAvailabilityChanged:", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v7, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "iCloudAccountAvailabilityChanged:", CKAccountChangedNotification, 0);

  v8 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(*(id *)(a1 + 32), "setTransactionBag:", v8);

  v9 = objc_alloc_init((Class)NSCountedSet);
  objc_msgSend(*(id *)(a1 + 32), "setTransactionCounts:", v9);

}

void sub_100111C50(uint64_t a1)
{
  double Current;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  unsigned int v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  double v43;
  void *v44;
  GKApplicationStateMonitor *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  GKWidgetEventListener *v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  NSObject *v55;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v57;
  id v58;
  NSObject *v59;
  double v60;
  void *v61;
  void *v62;
  uint64_t v63;
  double v64;
  id v65;
  NSObject *v66;
  _TtC14GameDaemonCore18GKGameModeListener *v67;
  uint64_t v68;
  id v69;
  NSObject *v70;
  double v71;
  uint64_t v72;
  id v73;
  NSObject *v74;
  double v75;
  id v76;
  void *v77;
  void *v78;
  _QWORD v79[5];
  _QWORD v80[4];
  id v81;
  id location;
  _QWORD v83[5];
  uint8_t v84[32];
  uint8_t buf[32];

  Current = CFAbsoluteTimeGetCurrent();
  CFAbsoluteTimeGetCurrent();
  v3 = objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v78 = (void *)v3;
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v3);
  v5 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_10011831C(v5);
  CFAbsoluteTimeGetCurrent();
  v6 = objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  v77 = (void *)v6;
  if (!os_log_GKGeneral)
    v7 = (id)GKOSLoggers(v6);
  v8 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_100118288(v8);
  +[GKImageRestrictions setForCurrentProcess](GKImageRestrictions, "setForCurrentProcess");
  v9 = +[GKContactsIntegrationController sharedController](GKContactsIntegrationController, "sharedController");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  objc_msgSend(v10, "setUseTestProtocols:", _os_feature_enabled_impl("gseui", "de7bbd8e"));

  +[GKPlayerCredentialController migrateOldAccountInformation](GKPlayerCredentialController, "migrateOldAccountInformation");
  CFAbsoluteTimeGetCurrent();
  v11 = objc_msgSend(*(id *)(a1 + 32), "preferredEnvironment");
  v12 = objc_msgSend(v77, "isStoreDemoModeEnabled");
  if ((v12 & 1) == 0)
  {
    v13 = GKCurrentEnvironmentKey;
    v12 = objc_msgSend(v78, "integerForKey:", GKCurrentEnvironmentKey);
    if (v11 != v12)
      v12 = objc_msgSend(v78, "setInteger:forKey:", v11, v13);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = v11;
  if (!os_log_GKGeneral)
    v14 = (id)GKOSLoggers(v12);
  v15 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_1001181F4(v15);
  v16 = objc_claimAutoreleasedReturnValue(+[NSBundle _gkPreferredSystemLanguage](NSBundle, "_gkPreferredSystemLanguage"));
  v17 = (void *)v16;
  if (v16)
    GKSetPreferredLanguage(v16);
  CFAbsoluteTimeGetCurrent();
  v76 = objc_msgSend(objc_alloc((Class)NSURLCache), "initWithMemoryCapacity:diskCapacity:diskPath:", 0, 0, &stru_1002CE2A8);
  v18 = +[NSURLCache setSharedURLCache:](NSURLCache, "setSharedURLCache:", v76);
  if (!os_log_GKGeneral)
    v19 = (id)GKOSLoggers(v18);
  v20 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_100118160(v20);
  CFAbsoluteTimeGetCurrent();
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v22 = GKPushTokenKey;
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKey:", GKPushTokenKey));
  v24 = a1 + 32;
  objc_msgSend(*(id *)(a1 + 32), "setPushToken:", v23);

  v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "objectForKey:", v22));
  v26 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  *(_QWORD *)(*(_QWORD *)v24 + 24) = v25;

  v27 = objc_alloc((Class)APSConnection);
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager pushQueue](GKDataRequestManager, "pushQueue"));
  v29 = objc_msgSend(v27, "initWithEnvironmentName:namedDelegatePort:queue:", APSEnvironmentProduction, CFSTR("com.apple.gamed.aps"), v28);
  v30 = *(void **)(*(_QWORD *)(a1 + 32) + 72);
  *(_QWORD *)(*(_QWORD *)v24 + 72) = v29;

  v31 = *(void **)(a1 + 32);
  v83[0] = _NSConcreteStackBlock;
  v83[1] = 3221225472;
  v83[2] = sub_100112518;
  v83[3] = &unk_1002BBBD8;
  v83[4] = v31;
  objc_msgSend(v31, "performAsync:", v83);
  if ((objc_msgSend(v77, "isStoreDemoModeEnabled") & 1) != 0)
    v32 = 0;
  else
    v32 = objc_msgSend(v78, "integerForKey:", GKPushEnvironmentKey);
  v33 = objc_msgSend(*(id *)(a1 + 32), "setActivePushEnvironment:", v32);
  if (!os_log_GKGeneral)
    v34 = (id)GKOSLoggers(v33);
  v35 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_1001180CC(v35);
  CFAbsoluteTimeGetCurrent();
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v36, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "credentialsDidChange:", GKPrimaryCredentialDidChangeNotification, 0);

  v37 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  v38 = objc_msgSend(v37, "isGameCenterRestricted");

  if (v38)
    objc_msgSend(*(id *)(a1 + 32), "gameCenterDidBecomeRestricted");
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  objc_msgSend(v39, "setPreferencesDelegate:", *(_QWORD *)(a1 + 32));

  v40 = objc_msgSend(*(id *)(a1 + 32), "setUpCloudKitNotificationTopics");
  if (!os_log_GKGeneral)
    v41 = (id)GKOSLoggers(v40);
  v42 = (void *)os_log_GKPerf;
  if (os_log_type_enabled(os_log_GKPerf, OS_LOG_TYPE_DEBUG))
    sub_100118038(v42);
  v43 = CFAbsoluteTimeGetCurrent();
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v45 = objc_alloc_init(GKApplicationStateMonitor);
  v46 = *(_QWORD *)(a1 + 32);
  v47 = *(void **)(v46 + 104);
  *(_QWORD *)(v46 + 104) = v45;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v80[0] = _NSConcreteStackBlock;
  v80[1] = 3221225472;
  v80[2] = sub_1001125F4;
  v80[3] = &unk_1002C3908;
  objc_copyWeak(&v81, &location);
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "applicationStateMonitor"));
  objc_msgSend(v48, "setHandler:", v80);

  v49 = *(void **)(a1 + 32);
  v79[0] = _NSConcreteStackBlock;
  v79[1] = 3221225472;
  v79[2] = sub_10011263C;
  v79[3] = &unk_1002BBBD8;
  v79[4] = v49;
  objc_msgSend(v49, "performAsync:", v79);
  v50 = objc_alloc_init(GKWidgetEventListener);
  v51 = *(_QWORD *)(a1 + 32);
  v52 = *(void **)(v51 + 136);
  *(_QWORD *)(v51 + 136) = v50;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "activateListener");
  objc_msgSend(v44, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "storeBagChanged:", CFSTR("GKStoreBagUpdatedNotification"), 0);
  objc_msgSend(*(id *)(a1 + 32), "performAsync:", &stru_1002C3928);
  v53 = objc_msgSend(*(id *)(a1 + 32), "setReceivesMemoryWarnings:", 1);
  if (!os_log_GKGeneral)
    v54 = (id)GKOSLoggers(v53);
  v55 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "Installing language change notification", buf, 2u);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, CFSTR("GKLanguageObserver"), (CFNotificationCallback)sub_1001126E4, CFSTR("com.apple.language.changed"), 0, CFNotificationSuspensionBehaviorCoalesce);
  CFNotificationCenterAddObserver(DarwinNotifyCenter, CFSTR("GKApplicationObserver"), (CFNotificationCallback)sub_100112784, GKApplicationsChangeNotificationName, 0, CFNotificationSuspensionBehaviorCoalesce);
  if (!os_log_GKGeneral)
    v58 = (id)GKOSLoggers(v57);
  v59 = os_log_GKPerf;
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
  {
    v60 = CFAbsoluteTimeGetCurrent();
    sub_100117FF8(v60, v43);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "resume");
  objc_msgSend(*(id *)(a1 + 32), "performAsync:", &stru_1002C3948);
  v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ampController"));
  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storeBag"));
  objc_msgSend(v61, "setupAsyncWithStoreBag:withCompletion:", v62, &stru_1002C3968);

  objc_msgSend(*(id *)(a1 + 32), "synchronizeBagWithPreferences");
  v64 = CFAbsoluteTimeGetCurrent();
  if (!os_log_GKGeneral)
    v65 = (id)GKOSLoggers(v63);
  v66 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v84 = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "Setting up Game Mode listener", v84, 2u);
  }
  v67 = -[GKGameModeListener initWithHandler:]([_TtC14GameDaemonCore18GKGameModeListener alloc], "initWithHandler:", &stru_1002C39A8);
  objc_msgSend(*(id *)(a1 + 32), "setGameModeListener:", v67);

  if (!os_log_GKGeneral)
    v69 = (id)GKOSLoggers(v68);
  v70 = os_log_GKPerf;
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
  {
    v71 = CFAbsoluteTimeGetCurrent();
    sub_100117FB8(v71, v64);
  }

  if (!os_log_GKGeneral)
    v73 = (id)GKOSLoggers(v72);
  v74 = os_log_GKPerf;
  if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
  {
    v75 = CFAbsoluteTimeGetCurrent();
    sub_100117F78(v75, Current);
  }

  objc_destroyWeak(&v81);
  objc_destroyWeak(&location);

}

void sub_1001124DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100112518(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setDelegate:");
  if (!os_log_GKGeneral)
    v3 = (id)GKOSLoggers(v2);
  v4 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(v5 + 72);
    v6 = *(_QWORD *)(v5 + 80);
    v8 = 138412546;
    v9 = v7;
    v10 = 2112;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "PROD CONNECTION: %@ DEV: %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1001125F4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "appStateChanged:", v3);

}

id sub_10011263C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint8_t v5[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Installing startObservingApplicationWorkspaceChanges observer", v5, 2u);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "setDelegate:");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "startObservingApplicationWorkspaceChanges");
}

void sub_1001126D8(id a1)
{
  +[GKBulletinController startBulletinController](GKBulletinController, "startBulletinController");
}

uint64_t sub_1001126E4(uint64_t a1, uint64_t a2)
{
  id v2;
  NSObject *v3;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint8_t v6[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1, a2);
  v3 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Terminating due to language change notification", v6, 2u);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, CFSTR("GKLanguageObserver"), CFSTR("com.apple.language.changed"), 0);
  return xpc_transaction_exit_clean();
}

void sub_100112784(uint64_t a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[16];

  if (!os_log_GKGeneral)
    v1 = (id)GKOSLoggers(a1);
  v2 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Applications changed.", buf, 2u);
  }
  v3 = objc_autoreleasePoolPush();
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pushCredentialForEnvironment:", objc_msgSend(v4, "environment")));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m", 257, "void GKObserveApplicationsChanged(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "playerInternal"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "playerID"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "transactionGroupWithName:forPlayerID:", v7, v9));

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100117E8C;
  v12[3] = &unk_1002BCCF0;
  v13 = v4;
  v11 = v4;
  objc_msgSend(v10, "performOnManagedObjectContext:", v12);

  objc_autoreleasePoolPop(v3);
}

void sub_100112944(id a1)
{
  id v1;

  v1 = +[GKConnectionManager sharedManager](GKConnectionManager, "sharedManager");
}

void sub_100112968(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  if (!os_log_GKGeneral)
    v1 = (id)GKOSLoggers(a1);
  v2 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Finished setting up metrics controller during initial launch phase.", v3, 2u);
  }
}

void sub_1001129E8(id a1, BOOL a2)
{
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  uint8_t v6[16];

  if (!a2)
  {
    if (!os_log_GKGeneral)
      v2 = (id)GKOSLoggers(a1);
    v3 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Game Mode Listener: Game Mode became deactivated, attempting widget refresh", v6, 2u);
    }
    v4 = objc_msgSend(objc_alloc((Class)CHSTimelineController), "initForAvocadoIdentifier:inBundleIdentifier:", CFSTR("ContinuePlayingWidget"), CFSTR("com.apple.gamecenter.widgets.extension"));
    v5 = objc_msgSend(v4, "reloadTimelineWithReason:", CFSTR("Game Mode deactivated"));

  }
}

void sub_100112B8C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "object"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storeBag"));

  if (v2 == v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v4);
    v6 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Updating connectivity and push environment", v7, 2u);
    }
    objc_msgSend(*(id *)(a1 + 40), "updateCachedNATSettingsIfNeededWithCompletionHandler:", &stru_1002C39C8);
    objc_msgSend(*(id *)(a1 + 40), "updateActivePushEnvironment");
    objc_msgSend(*(id *)(a1 + 40), "synchronizeBagWithPreferences");
  }
}

id sub_10011323C(uint64_t a1)
{
  dispatch_queue_t current_queue;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  const char *label;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;

  current_queue = dispatch_get_current_queue();
  v3 = objc_claimAutoreleasedReturnValue(current_queue);
  v4 = v3;
  v5 = *(NSObject **)(a1 + 32);
  if (v3 != v5)
  {
    label = dispatch_queue_get_label(v3);
    v7 = dispatch_queue_get_label(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s invoked on the wrong queue (got:%s expected:%s) at %@"), "-[GKDataRequestManager _updateNotificationTopicsForcefully:]_block_invoke", label, v7, v8));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"));
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "lastPathComponent")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (_actualCurrentQueue == syncQueue)\n[%s (%s:%d)]"), v9, "-[GKDataRequestManager _updateNotificationTopicsForcefully:]_block_invoke", objc_msgSend(v11, "UTF8String"), 594));

    +[NSException raise:format:](NSException, "raise:format:", CFSTR("GameKit Exception"), CFSTR("%@"), v12);
  }

  return objc_msgSend(*(id *)(a1 + 40), "setPushUpdatesBusy:", 0);
}

id sub_1001134F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateNotificationTopicsForcefully:", *(unsigned __int8 *)(a1 + 40));
}

void sub_1001136A0(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_clearPushConnections");
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "removeObjectForKey:", GKPushTokenKey);
  objc_msgSend(v2, "removeObjectForKey:", GKPushEnvironmentKey);
  objc_msgSend(*(id *)(a1 + 32), "_setActivePushEnvironment:", 0);

}

void sub_10011390C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_ERROR))
      sub_10011841C(a1, v6, (uint64_t)v4);
  }
  objc_msgSend(*(id *)(a1 + 32), "updateCachedNATSettingsIfNeededWithCompletionHandler:", &stru_1002C39E8);
  objc_msgSend(*(id *)(a1 + 32), "updateActivePushEnvironment");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](GKBulletinController, "sharedController"));
  objc_msgSend(v7, "removeAllBulletins");

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100113A20;
  v8[3] = &unk_1002BB540;
  v9 = *(id *)(a1 + 40);
  +[GKClientProxy removeAllCachesWithHandler:](GKClientProxy, "removeAllCachesWithHandler:", v8);

}

uint64_t sub_100113A20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100113A38(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  if (!os_log_GKGeneral)
    v1 = (id)GKOSLoggers(a1);
  v2 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "The environment has been reset", v3, 2u);
  }
}

id sub_100113AB8(uint64_t a1)
{
  id v2;
  void *v3;
  NSObject *v4;
  id WeakRetained;
  uint64_t v6;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v4 = v3;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v6 = *(_QWORD *)(a1 + 32);
    v8 = 138412546;
    v9 = WeakRetained;
    v10 = 2112;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Connection (%@) to client (%@) INTERRUPTED.", (uint8_t *)&v8, 0x16u);

  }
  return objc_msgSend(*(id *)(a1 + 32), "setConnection:", 0);
}

void sub_100113BB8(uint64_t a1)
{
  id v2;
  void *v3;
  NSObject *v4;
  id WeakRetained;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint8_t buf[4];
  id v12;
  __int16 v13;
  uint64_t v14;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v4 = v3;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    v12 = WeakRetained;
    v13 = 2112;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Connection (%@) to client (%@) INVALID.", buf, 0x16u);

  }
  objc_msgSend(*(id *)(a1 + 32), "setConnection:", 0);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100113D08;
  v8[3] = &unk_1002BB658;
  v7 = *(void **)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v10 = v7;
  objc_msgSend(v9, "performAsync:", v8);

}

id sub_100113D08(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "terminateClient:", *(_QWORD *)(a1 + 40));
}

id sub_100114050(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateCachedNATSettingsIfNeededWithCompletionHandler:", *(_QWORD *)(a1 + 40));
}

void sub_10011405C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  dispatch_queue_t current_queue;
  NSObject *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  const char *label;
  uint64_t v13;
  id v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  current_queue = dispatch_get_current_queue();
  v8 = objc_claimAutoreleasedReturnValue(current_queue);
  v10 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v9), "syncQueue");
  v11 = objc_claimAutoreleasedReturnValue(v10);

  if (v8 != v11)
  {
    v30 = v6;
    label = dispatch_queue_get_label(v8);
    v14 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v13), "syncQueue");
    v15 = objc_claimAutoreleasedReturnValue(v14);
    v16 = dispatch_queue_get_label(v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s invoked on the wrong queue (got:%s expected:%s) at %@"), "-[GKDataRequestManager updateCachedNATSettingsIfNeededWithCompletionHandler:]_block_invoke", label, v16, v17));
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"));
    v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "lastPathComponent")));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (_actualCurrentQueue == [[self class] syncQueue])\n[%s (%s:%d)]"), v18, "-[GKDataRequestManager updateCachedNATSettingsIfNeededWithCompletionHandler:]_block_invoke", objc_msgSend(v20, "UTF8String"), 887));

    +[NSException raise:format:](NSException, "raise:format:", CFSTR("GameKit Exception"), CFSTR("%@"), v21);
    v6 = v30;
  }

  if (v6)
  {
    if (!os_log_GKGeneral)
      v23 = (id)GKOSLoggers(v22);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_1001185EC();
  }
  if (objc_msgSend(v5, "count"))
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storeBag"));
    v25 = *(void **)(a1 + 40);

    if (v24 == v25)
    {
      objc_msgSend(*(id *)(a1 + 32), "setCommonNATSettings:", v5);
    }
    else
    {
      if (!os_log_GKGeneral)
        v27 = (id)GKOSLoggers(v26);
      v28 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "[NAT] Bag has changed, not updating NAT settings", buf, 2u);
      }
    }
  }
  else
  {
    if (!os_log_GKGeneral)
      v29 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10011858C();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100114420(uint64_t a1)
{
  void *v1;
  id v3;
  _BOOL8 v4;
  id v5;
  _BOOL4 v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  dispatch_queue_global_t global_queue;
  NSObject *v13;
  id v14;
  void *v15;
  void *v16;
  double v17;
  void *v18;
  _QWORD v19[5];
  id v20;
  id v21;
  _QWORD block[5];
  id v23;
  uint8_t buf[4];
  void *v25;

  v3 = objc_msgSend(*(id *)(a1 + 32), "natType");
  if (v3)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastNATTypeCheckDate"));
    v4 = v1 != 0;
  }
  else
  {
    v4 = 0;
  }
  v5 = +[GKViceroyNATTypeHelper isUnknown:](GKViceroyNATTypeHelper, "isUnknown:", v4);
  if ((v5 & 1) != 0)
  {
    v6 = 0;
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastNATTypeCheckDate"));
  objc_msgSend(v15, "timeIntervalSinceDate:", v16);
  v6 = v17 <= 60.0;

  if (v3)
LABEL_6:

LABEL_7:
  if (v6)
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v5);
    v8 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v9 = *(void **)(a1 + 32);
      v10 = v8;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v9, "natType")));
      *(_DWORD *)buf = 138412290;
      v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[NAT] Returning cached NAT type: %@.", buf, 0xCu);

    }
    global_queue = dispatch_get_global_queue(0, 0);
    v13 = objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001146E8;
    block[3] = &unk_1002BB450;
    v14 = *(id *)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v23 = v14;
    dispatch_async(v13, block);

  }
  else
  {
    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    v18 = *(void **)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100114714;
    v19[3] = &unk_1002C3AD0;
    v19[4] = v18;
    objc_copyWeak(&v21, (id *)buf);
    v20 = *(id *)(a1 + 40);
    objc_msgSend(v18, "awaitNATSettingsAndUpdateIfNeededWithCompletionHandler:", v19);

    objc_destroyWeak(&v21);
    objc_destroyWeak((id *)buf);
  }
}

void sub_1001146C4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_1001146E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "natType"));
}

void sub_100114714(uint64_t a1)
{
  dispatch_queue_t current_queue;
  NSObject *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  const char *label;
  uint64_t v8;
  id v9;
  NSObject *v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id WeakRetained;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  NSObject *v25;
  dispatch_queue_global_t global_queue;
  NSObject *v27;
  id v28;
  id v29;
  NSObject *v30;
  dispatch_queue_global_t v31;
  NSObject *v32;
  _QWORD block[5];
  id v34;
  _QWORD v35[4];
  id v36;
  id v37;
  id v38;
  _QWORD v39[4];
  id v40;
  uint8_t buf[16];

  current_queue = dispatch_get_current_queue();
  v3 = objc_claimAutoreleasedReturnValue(current_queue);
  v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v4), "syncQueue");
  v6 = objc_claimAutoreleasedReturnValue(v5);

  if (v3 != v6)
  {
    label = dispatch_queue_get_label(v3);
    v9 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v8), "syncQueue");
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = dispatch_queue_get_label(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s invoked on the wrong queue (got:%s expected:%s) at %@"), "-[GKDataRequestManager getValidNATTypeWithForceRelay:withHandler:]_block_invoke_2", label, v11, v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"));
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "lastPathComponent")));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (_actualCurrentQueue == [[self class] syncQueue])\n[%s (%s:%d)]"), v13, "-[GKDataRequestManager getValidNATTypeWithForceRelay:withHandler:]_block_invoke_2", objc_msgSend(v15, "UTF8String"), 930));

    +[NSException raise:format:](NSException, "raise:format:", CFSTR("GameKit Exception"), CFSTR("%@"), v16);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "commonNATSettings"));

  if (v18)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m", 942, "-[GKDataRequestManager getValidNATTypeWithForceRelay:withHandler:]_block_invoke_2"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v20));

    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_100114B30;
    v35[3] = &unk_1002C3AA8;
    v22 = (id)objc_claimAutoreleasedReturnValue(+[GKViceroyNATObserverFactory makeObserver](GKViceroyNATObserverFactory, "makeObserver"));
    v36 = v22;
    v37 = WeakRetained;
    objc_copyWeak(&v38, (id *)(a1 + 48));
    objc_msgSend(v21, "perform:", v35);
    v23 = objc_msgSend(v21, "waitWithTimeout:", 3.0);
    if (v23)
    {
      if (!os_log_GKGeneral)
        v24 = (id)GKOSLoggers(v23);
      v25 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
        sub_10011864C(v25);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    v27 = objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100114D68;
    block[3] = &unk_1002BB450;
    v28 = *(id *)(a1 + 40);
    block[4] = WeakRetained;
    v34 = v28;
    dispatch_async(v27, block);

    objc_destroyWeak(&v38);
  }
  else
  {
    if (!os_log_GKGeneral)
      v29 = (id)GKOSLoggers(v19);
    v30 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "[NAT] Returning unknown NAT type since common NAT settings are not available yet.", buf, 2u);
    }
    v31 = dispatch_get_global_queue(0, 0);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_100114AFC;
    v39[3] = &unk_1002BB540;
    v40 = *(id *)(a1 + 40);
    dispatch_async(v32, v39);

    v21 = v40;
  }

}

void sub_100114AE4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100114AFC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), +[GKViceroyNATTypeHelper initialNATType](GKViceroyNATTypeHelper, "initialNATType"));
}

void sub_100114B30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "commonNATSettings"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100114C04;
  v7[3] = &unk_1002C3A80;
  objc_copyWeak(&v9, (id *)(a1 + 48));
  v6 = v3;
  v8 = v6;
  objc_msgSend(v4, "getNATTypeWithNATSettings:completionHandler:", v5, v7);

  objc_destroyWeak(&v9);
}

void sub_100114BF0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100114C04(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setNatType:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(WeakRetained, "setLastNATTypeCheckDate:", v5);

  if (!os_log_GKGeneral)
    v7 = (id)GKOSLoggers(v6);
  v8 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v9 = v8;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lastNATTypeCheckDate"));
    v12 = 138412546;
    v13 = v10;
    v14 = 2112;
    v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[NAT] Returning NAT type: %@. Updating last check date to: %@.", (uint8_t *)&v12, 0x16u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t sub_100114D68(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "natType"));
}

void sub_100114E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100114E64(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 40);
  return result;
}

id sub_100115210(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setActivePushEnvironment:", *(_QWORD *)(a1 + 40));
}

void sub_1001152C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001152E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1001152F0(uint64_t a1)
{

}

void sub_1001152F8(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 24));
}

id sub_100115610(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setPushToken:", *(_QWORD *)(a1 + 40));
}

void sub_10011586C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  dispatch_queue_t current_queue;
  NSObject *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  const char *label;
  uint64_t v13;
  id v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;

  v5 = a2;
  v6 = a3;
  current_queue = dispatch_get_current_queue();
  v8 = objc_claimAutoreleasedReturnValue(current_queue);
  v10 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v9), "syncQueue");
  v11 = objc_claimAutoreleasedReturnValue(v10);

  if (v8 != v11)
  {
    v25 = v6;
    label = dispatch_queue_get_label(v8);
    v14 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v13), "syncQueue");
    v15 = objc_claimAutoreleasedReturnValue(v14);
    v16 = dispatch_queue_get_label(v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s invoked on the wrong queue (got:%s expected:%s) at %@"), "-[GKDataRequestManager updateActivePushEnvironment]_block_invoke", label, v16, v17));
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKDataRequestManager.m"));
    v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "lastPathComponent")));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (_actualCurrentQueue == [[self class] syncQueue])\n[%s (%s:%d)]"), v18, "-[GKDataRequestManager updateActivePushEnvironment]_block_invoke", objc_msgSend(v20, "UTF8String"), 1075));

    +[NSException raise:format:](NSException, "raise:format:", CFSTR("GameKit Exception"), CFSTR("%@"), v21);
    v6 = v25;
  }

  if (!objc_msgSend(v5, "count"))
  {
    if (!os_log_GKGeneral)
      v22 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10011868C();
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storeBag"));
  v24 = *(void **)(a1 + 40);

  if (v23 == v24)
    objc_msgSend(*(id *)(a1 + 32), "_updatePushEnvironmentWithStoreBag:", v5);

}

void sub_100115B90(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;
  __int128 v9;
  double v10;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("gk-push-token-ttl")));
  v4 = (double)(uint64_t)objc_msgSend(v3, "integerValue");

  v5 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100115C54;
  v6[3] = &unk_1002C3B68;
  v6[4] = v5;
  v9 = *(_OWORD *)(a1 + 56);
  v8 = *(id *)(a1 + 48);
  v10 = v4;
  v7 = *(id *)(a1 + 40);
  objc_msgSend(v5, "performAsync:", v6);

}

void sub_100115C54(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  int v20;
  double v21;
  void *v22;
  double v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  id v31;
  NSObject *v32;
  id v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  _QWORD v45[4];
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint8_t buf[16];
  const __CFString *v54;
  id v55;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pushCredentialForEnvironment:", *(_QWORD *)(a1 + 56)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "playerInternal"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "playerID"));

  v7 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v7 + 16) == *(_QWORD *)(a1 + 56) && *(_QWORD *)(v7 + 40) == *(_QWORD *)(a1 + 64))
  {
    v8 = *(id *)(v7 + 24);
    if (objc_msgSend(v8, "length"))
    {
      if (v3)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("GKLastPushTokenPlayerID")));
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("GKLastPreferredSystemLanguage")));
        v11 = objc_msgSend(v9, "integerForKey:", CFSTR("GKLastPushTokenEnvironment"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("GKLastPushTokenKey")));
        v40 = v9;
        v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("GKLastPushTokenDateKey")));
        v14 = objc_claimAutoreleasedReturnValue(+[NSBundle _gkPreferredSystemLanguage](NSBundle, "_gkPreferredSystemLanguage"));
        v15 = *(id *)(a1 + 56);
        v42 = v10;
        v16 = objc_msgSend(v10, "isEqualToString:", v5);
        v17 = objc_msgSend(v12, "isEqualToData:", v8);
        v41 = v12;
        v44 = (void *)v13;
        if (v12)
          v18 = v13 == 0;
        else
          v18 = 1;
        if (!v18 && v11 == v15)
          v20 = v16 & v17 ^ 1;
        else
          v20 = 1;
        v21 = *(double *)(a1 + 72);
        if (v21 > 0.0)
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          objc_msgSend(v22, "timeIntervalSinceDate:", v13);
          if (v21 < v23)
            v20 = 1;

        }
        v24 = (void *)v14;
        v25 = objc_msgSend(v43, "isEqualToString:", v14);
        if (!(_DWORD)v25 || v20)
        {
          v54 = CFSTR("apns-token");
          v55 = v8;
          v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v55, &v54, 1));
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storeBag"));
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "_gkPlistXMLDataForClient:player:", 0, 0));
          v45[0] = _NSConcreteStackBlock;
          v45[1] = 3221225472;
          v45[2] = sub_100116124;
          v45[3] = &unk_1002C3B40;
          v26 = v40;
          v46 = v40;
          v38 = v5;
          v39 = *(_QWORD *)(a1 + 56);
          v47 = v38;
          v52 = v39;
          v48 = v8;
          v49 = v24;
          v50 = *(id *)(a1 + 40);
          v51 = *(id *)(a1 + 48);
          objc_msgSend(v36, "writeDataForBagKey:postData:client:credential:completion:", CFSTR("gk-set-apns-token"), v37, 0, v3, v45);

          v27 = v41;
          v30 = v42;
        }
        else
        {
          v26 = v40;
          v27 = v41;
          if (!os_log_GKGeneral)
            v28 = (id)GKOSLoggers(v25);
          v29 = os_log_GKDaemon;
          v30 = v42;
          if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Not sending push token, last one sent is still good", buf, 2u);
          }
          (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        }

        goto LABEL_37;
      }
    }
    else
    {
      if (!os_log_GKGeneral)
        v33 = (id)GKOSLoggers(0);
      v34 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Not sending push token, NO PUSH TOKEN.", buf, 2u);
      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_37:

    goto LABEL_38;
  }
  if (!os_log_GKGeneral)
    v31 = (id)GKOSLoggers(v6);
  v32 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Not sending push token, environment changed", buf, 2u);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_38:

}

void sub_100116124(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v12 = 0;
  v3 = +[NSDictionary _gkDictionaryWithServerData:error:](NSDictionary, "_gkDictionaryWithServerData:error:", a2, &v12);
  v4 = v12;
  v5 = v4;
  if (v4)
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(v4);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001186EC();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", *(_QWORD *)(a1 + 40), CFSTR("GKLastPushTokenPlayerID"));
    objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", *(_QWORD *)(a1 + 80), CFSTR("GKLastPushTokenEnvironment"));
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", *(_QWORD *)(a1 + 48), CFSTR("GKLastPushTokenKey"));
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v7, "setObject:forKey:", v8, CFSTR("GKLastPushTokenDateKey"));

    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", *(_QWORD *)(a1 + 56), CFSTR("GKLastPreferredSystemLanguage"));
    objc_msgSend(*(id *)(a1 + 32), "synchronize");
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10011629C;
  v10[3] = &unk_1002BB540;
  v9 = *(NSObject **)(a1 + 64);
  v11 = *(id *)(a1 + 72);
  dispatch_async(v9, v10);

}

uint64_t sub_10011629C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100116388(id a1, NSDictionary *a2, NSError *a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSDictionary *v12;

  v12 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", GKMaxRecentPlayersCount));
  v6 = objc_opt_class(NSNumber, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0)
  {
    v7 = objc_msgSend(v4, "unsignedIntegerValue");
    if (v7)
      objc_msgSend(v3, "setMaxRecentPlayersCount:", v7);
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", GKMaxRecentPlayersTime));
  v10 = objc_opt_class(NSNumber, v9);
  if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0)
  {
    v11 = objc_msgSend(v8, "unsignedIntegerValue");
    if (v11)
      objc_msgSend(v3, "setMaxRecentPlayersTime:", (double)(unint64_t)v11);
  }

}

void sub_10011671C(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastObject"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name"));
  if (!v3)
  {
    v4 = GKCopyLocalizedApplicationNameForDisplayIdentifier(*(_QWORD *)(a1 + 32));
    v3 = (void *)objc_claimAutoreleasedReturnValue(v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1001168F4(id a1, NSArray *a2)
{
  NSArray *v2;
  NSArray *v3;
  id v4;
  NSObject *v5;
  void *v6;
  NSArray *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t v18[128];
  uint8_t buf[4];
  NSArray *v20;

  v2 = a2;
  v3 = v2;
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v2);
  v5 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Got bulletins from invite data : %@", buf, 0xCu);
  }
  if (!-[NSArray count](v3, "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](GKApplicationWorkspace, "defaultWorkspace"));
    objc_msgSend(v6, "openGameCenterSettings");

  }
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v7 = v3;
  v8 = -[NSArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "acceptAction", (_QWORD)v14));
        if (!v13)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "defaultAction"));
          if (!v13)
            continue;
        }
        objc_msgSend(v12, "handleAction:", CFSTR("GKAccepted"));

      }
      v9 = -[NSArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }

}

void sub_100116C70(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  void *v9;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pushConnectionForEnvironment:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40)));
  v3 = (void *)v2;
  if (*(_QWORD *)(a1 + 40) == v2)
  {
    v9 = (void *)v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pushCredentialForEnvironment:", objc_msgSend(*(id *)(a1 + 32), "currentEnvironment")));
    if (!v5)
    {

      goto LABEL_7;
    }
    v6 = (void *)v5;
    v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "isEqualToData:", *(_QWORD *)(a1 + 48));

    v3 = v9;
    if ((v7 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "_setPushToken:", *(_QWORD *)(a1 + 48));
      v8 = objc_msgSend(*(id *)(a1 + 48), "length");
      v3 = v9;
      if (v8)
      {
        objc_msgSend(*(id *)(a1 + 32), "sendPushTokenWithReplyQueue:", 0);
LABEL_7:
        v3 = v9;
      }
    }
  }

}

void sub_1001170C8(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  id v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (!os_log_GKGeneral)
      v4 = (id)GKOSLoggers(v2);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10011874C();
  }
  else
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(0);
    v6 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Cloud Game Session Cache Updated!", v7, 2u);
    }
  }

}

id sub_10011723C(uint64_t a1)
{
  return +[GKBulletin bulletinsForPushNotification:withHandler:](GKBulletin, "bulletinsForPushNotification:withHandler:", *(_QWORD *)(a1 + 32), &stru_1002C3D10);
}

void sub_100117258(id a1, NSArray *a2)
{
  NSArray *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](GKBulletinController, "sharedController"));
        objc_msgSend(v7, "executeBulletinWithBulletinController:", v8);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

void sub_100117448(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionCounts"));
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionCounts"));
  v4 = objc_msgSend(v3, "countForObject:", *(_QWORD *)(a1 + 40));

  if (!v4)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionBag"));
    objc_msgSend(v5, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

  }
}

uint64_t sub_1001175F4(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionCounts"));
  v3 = objc_msgSend(v2, "countForObject:", *(_QWORD *)(a1 + 40));

  if (!v3)
  {
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("com.apple.gamed.%@"), *(_QWORD *)(a1 + 40))));
    v5 = (void *)os_transaction_create(objc_msgSend(v4, "UTF8String"));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionBag"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, *(_QWORD *)(a1 + 40));

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transactionCounts"));
  objc_msgSend(v7, "addObject:", *(_QWORD *)(a1 + 40));

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100117814(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.gamecenter.statsQueue", 0);
  v2 = (void *)qword_100318060;
  qword_100318060 = (uint64_t)v1;

}

void sub_100117880(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.gamecenter.ratingsQueue", 0);
  v2 = (void *)qword_100318070;
  qword_100318070 = (uint64_t)v1;

}

void sub_100117E8C(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  id v7;

  v5 = a3;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "gameList"));
  objc_msgSend(v6, "expire");

  objc_msgSend(*(id *)(a1 + 32), "refreshContentsForDataType:userInfo:", 5, 0);
  v5[2](v5);

}

uint64_t sub_100117F18@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(_QWORD *)(result + 4) = a2;
  *(_WORD *)(result + 12) = 2048;
  *(double *)(result + 14) = a3;
  return result;
}

double sub_100117F2C(double a1, double a2)
{
  return a1 - a2;
}

void sub_100117F38(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Received notification that iCloud account availability changed", v1, 2u);
}

void sub_100117F78(double a1, double a2)
{
  double v2;
  _DWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t *v6;

  v2 = sub_100117F2C(a1, a2);
  *v3 = 136315394;
  sub_100117F18((uint64_t)v3, (uint64_t)"finishStartup", v2);
  sub_100027994((void *)&_mh_execute_header, v4, v5, "%s elapsed seconds:%g", v6);
}

void sub_100117FB8(double a1, double a2)
{
  double v2;
  _DWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t *v6;

  v2 = sub_100117F2C(a1, a2);
  *v3 = 136315394;
  sub_100117F18((uint64_t)v3, (uint64_t)"setupGameModeListener", v2);
  sub_100027994((void *)&_mh_execute_header, v4, v5, "%s elapsed seconds:%g", v6);
}

void sub_100117FF8(double a1, double a2)
{
  double v2;
  _DWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t *v6;

  v2 = sub_100117F2C(a1, a2);
  *v3 = 136315394;
  sub_100117F18((uint64_t)v3, (uint64_t)"finishStartupMoreNotifications", v2);
  sub_100027994((void *)&_mh_execute_header, v4, v5, "%s elapsed seconds:%g", v6);
}

void sub_100118038(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  int v3[6];

  v1 = sub_100027A18(a1);
  CFAbsoluteTimeGetCurrent();
  v3[0] = 136315394;
  sub_1000279CC();
  sub_100027994((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_10010840C();
}

void sub_1001180CC(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  int v3[6];

  v1 = sub_100027A18(a1);
  CFAbsoluteTimeGetCurrent();
  v3[0] = 136315394;
  sub_1000279CC();
  sub_100027994((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_10010840C();
}

void sub_100118160(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  int v3[6];

  v1 = sub_100027A18(a1);
  CFAbsoluteTimeGetCurrent();
  v3[0] = 136315394;
  sub_1000279CC();
  sub_100027994((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_10010840C();
}

void sub_1001181F4(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  int v3[6];

  v1 = sub_100027A18(a1);
  CFAbsoluteTimeGetCurrent();
  v3[0] = 136315394;
  sub_1000279CC();
  sub_100027994((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_10010840C();
}

void sub_100118288(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  int v3[6];

  v1 = sub_100027A18(a1);
  CFAbsoluteTimeGetCurrent();
  v3[0] = 136315394;
  sub_1000279CC();
  sub_100027994((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_10010840C();
}

void sub_10011831C(void *a1)
{
  NSObject *v1;
  uint64_t v2;
  int v3[6];

  v1 = sub_100027A18(a1);
  CFAbsoluteTimeGetCurrent();
  v3[0] = 136315394;
  sub_1000279CC();
  sub_100027994((void *)&_mh_execute_header, v1, v2, "%s elapsed seconds:%g", (uint8_t *)v3);

  sub_10010840C();
}

void sub_1001183B0()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_1000B5540();
  v3 = v0;
  sub_100027994((void *)&_mh_execute_header, v1, (uint64_t)v1, "connection: %@ publicToken: %@", v2);
  sub_100016C20();
}

void sub_10011841C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  NSObject *v5;
  void *v6;
  uint8_t v7[14];
  uint64_t v8;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v4, "currentEnvironment")));
  sub_1000B5540();
  v8 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to remove all credentials for environment: %@, error: %@", v7, 0x16u);

}

void sub_1001184E0(double a1, double a2)
{
  double v2;
  _DWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t *v6;

  v2 = sub_100117F2C(a1, a2);
  *v3 = 136315394;
  sub_100117F18((uint64_t)v3, (uint64_t)"acceptConnection", v2);
  sub_100027994((void *)&_mh_execute_header, v4, v5, "%s elapsed seconds:%g", v6);
}

void sub_100118520()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_1000279B0();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "shouldAcceptNewConnection: creating GKClientProxy for bundleID=%@", v1, 0xCu);
  sub_100016C20();
}

void sub_10011858C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "[NAT] NO CommNAT settings in bag, error = %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1001185EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "[NAT] Error loading common NAT settings due to error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10011864C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[NAT] Timed out waiting for a valid NAT type from observer.", v1, 2u);
}

void sub_10011868C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "no apns environment in bag, error = %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1001186EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "error sending push token: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10011874C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Cloud Game Session Cache Failed to update. Error: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100118BD4(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  id v4;
  NSObject *v5;

  v2 = a2;
  v3 = v2;
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v2);
  v5 = os_log_GKContacts;
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_100118CC8((uint64_t)v3, v5);

}

void sub_100118C60(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "Migrating credentials", a5, a6, a7, a8, 0);
}

void sub_100118C94(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "The currently cached version of the list is old, will perform full sync.", a5, a6, a7, a8, 0);
}

void sub_100118CC8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Migrated contacts integration info credentials. error: %@", (uint8_t *)&v2, 0xCu);
}

CFDataRef sub_100119038(const UInt8 *a1, unsigned int a2)
{
  const __CFAllocator *v4;
  CFDataRef v5;
  CFAllocatorContext v7;

  *(_OWORD *)&v7.reallocate = unk_1002C3E18;
  v7.preferredSize = 0;
  memset(&v7, 0, 48);
  v4 = CFAllocatorCreate(0, &v7);
  v5 = CFDataCreateWithBytesNoCopy(0, a1, a2, v4);
  CFRelease(v4);
  return v5;
}

void sub_100119510(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Fairplay could not get the the FairPlayHWInfo", v1, 2u);
}

void sub_100119704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100119728(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessStateDescriptor descriptor](RBSProcessStateDescriptor, "descriptor"));
  objc_msgSend(v4, "setValues:", 1);
  v8 = FBSSceneVisibilityEndowmentNamespace;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
  objc_msgSend(v4, "setEndowmentNamespaces:", v5);

  objc_msgSend(v3, "setStateDescriptor:", v4);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000079AC;
  v6[3] = &unk_1002C3E38;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  objc_msgSend(v3, "setUpdateHandler:", v6);
  objc_destroyWeak(&v7);

}

void sub_100119848(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100119C70(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[3];

  v4[0] = GKGameCenterIdentifier;
  v4[1] = GKGameCenterMessageExtensionIdentifier;
  v4[2] = GKGameCenterDashboardIdentifier;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 3));
  v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v1));
  v3 = (void *)qword_100318080;
  qword_100318080 = v2;

}

void GKLaunchApplicationWithIdentifier(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[2];
  _QWORD v9[2];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v4, "reportAppLaunchDuration");

  v8[0] = FBSOpenApplicationOptionKeyActivateSuspended;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  v8[1] = FBSOpenApplicationOptionKeyPromptUnlockDevice;
  v9[0] = v5;
  v9[1] = &__kCFBooleanTrue;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[FBSSystemService sharedService](FBSSystemService, "sharedService"));
  objc_msgSend(v7, "openApplication:options:withResult:", v3, v6, 0);

}

id GKApplicationWithIdentifierIsInstalled(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  _QWORD v7[4];
  id v8;

  if (!a1)
    return 0;
  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100119F20;
  v7[3] = &unk_1002BE920;
  v8 = v2;
  v4 = v2;
  objc_msgSend(v3, "enumerateBundlesOfType:block:", 1, v7);

  v5 = objc_msgSend(v4, "containsObject:", v1);
  return v5;
}

id sub_100119F20(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_100119F2C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v3 = 136315650;
  v4 = "GKApplicationState GKGetApplicationStateForBundleID(NSString *__strong)";
  v5 = 2112;
  v6 = a1;
  v7 = 2112;
  v8 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s bundleID=%@ error=%@", (uint8_t *)&v3, 0x20u);
}

id sub_10011C748(uint64_t a1, void *a2, unsigned __int8 a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  void *v14;
  void *v15;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKTurnBasedParticipantInternal internalRepresentationForCacheObject:](GKTurnBasedParticipantInternal, "internalRepresentationForCacheObject:", v5));
  objc_msgSend(v6, "setSlot:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playerID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "guestID"));
  if (objc_msgSend(v7, "length"))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v7));
    v10 = objc_msgSend(v8, "length");
    if (v10)
    {
      if (!os_log_GKGeneral)
        v11 = (id)GKOSLoggers(v10);
      v12 = os_log_GKCache;
      if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
        sub_10011D1D0((uint64_t)v8, v12);
      v13 = objc_msgSend(objc_alloc((Class)GKAnonymousGuestPlayerInternal), "initWithHostPlayerInternal:guestIdentifier:", v9, v8);
      objc_msgSend(v6, "setPlayer:", v13);

    }
    else
    {
      objc_msgSend(v6, "setPlayer:", v9);
    }

  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "invitedBy"));

  if (objc_msgSend(v14, "length"))
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v14));
    objc_msgSend(v6, "setInvitedBy:", v15);

  }
  return v6;
}

id sub_10011C8D0(id a1, GKTurnBasedExchangeCacheObject *a2, unint64_t a3)
{
  return +[GKTurnBasedExchangeInternal internalRepresentationForCacheObject:](GKTurnBasedExchangeInternal, "internalRepresentationForCacheObject:", a2);
}

id sub_10011CE2C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v13[4];
  id v14;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10011CF98;
  v13[3] = &unk_1002C3F10;
  v5 = v3;
  v14 = v5;
  v6 = objc_msgSend(v4, "indexOfObjectPassingTest:", v13);
  if (v6 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("invalid recipientIndex %ld encountered %@ searching in participants:%@"), 0x7FFFFFFFFFFFFFFFLL, v5, *(_QWORD *)(a1 + 32)));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/GKInternalRepresentation+Cache.m"));
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastPathComponent")));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ (index != NSNotFound)\n[%s (%s:%d)]"), v7, "-[GKTurnBasedExchangeInternal(Cache) updateWithCacheObject:]_block_invoke", objc_msgSend(v9, "UTF8String"), 416));

    +[NSException raise:format:](NSException, "raise:format:", CFSTR("GameKit Exception"), CFSTR("%@"), v10);
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v6));

  return v11;
}

BOOL sub_10011CF98(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _BOOL8 result;

  result = *(_QWORD *)(a1 + 32) == a2;
  *a4 = result;
  return result;
}

id sub_10011CFAC(id a1, GKTurnBasedExchangeReplyCacheObject *a2, unint64_t a3)
{
  return +[GKTurnBasedExchangeReplyInternal internalRepresentationForCacheObject:](GKTurnBasedExchangeReplyInternal, "internalRepresentationForCacheObject:", a2);
}

void sub_10011D194(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Your device is able to use fastsync transport for this game, but the fast_sync_transport feature flag has not been turned on.", buf, 2u);
}

void sub_10011D1D0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "participant is a guest with identifier = %@", (uint8_t *)&v2, 0xCu);
}

void sub_10011D488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011D4A0(id a1)
{
  qword_100318090 = (uint64_t)dispatch_queue_create("com.apple.GameKit.GKStoreBag.lookup", 0);
  qword_100318098 = (uint64_t)objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", 0);
}

void sub_10011D4E4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_10011D4F4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

id sub_10011D500(_QWORD *a1)
{
  void *v2;

  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40) = objc_msgSend((id)qword_100318098, "objectForKey:", a1[4]);
  v2 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
  if (!v2)
  {
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40) = -[GKStoreBag initWithURL:dataRequestManager:]([GKStoreBag alloc], "initWithURL:dataRequestManager:", a1[4], a1[5]);
    objc_msgSend((id)qword_100318098, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), a1[4]);
    v2 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
  }
  return v2;
}

uint64_t sub_10011D9EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10011D9F8(uint64_t a1)
{
  unsigned __int8 v2;

  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "internalBag"), "isEqualToDictionary:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setInternalBag:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setExpiration:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "setError:", *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "_updatePlayerIDHashParameters");
  if ((v2 & 1) == 0)
    -[NSNotificationCenter postNotificationName:object:userInfo:](+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CFSTR("GKStoreBagUpdatedNotification"), *(_QWORD *)(a1 + 32), 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

id sub_10011DC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  _QWORD v6[7];
  __int128 v7;
  __int128 v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10011DC8C;
  v6[3] = &unk_1002C4018;
  v6[4] = a2;
  v6[5] = a4;
  v6[6] = a3;
  v4 = *(_OWORD *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 32);
  v8 = v4;
  return objc_msgSend((id)v7, "performAsync:", v6);
}

uint64_t sub_10011DC8C(NSDate *a1)
{
  NSDate *v1;
  Class v2;
  Class isa;
  BOOL v4;
  double v5;
  double v6;
  objc_class *v7;
  NSDate *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSUserDefaults *v13;
  id v14;
  NSObject *v15;
  Class v16;
  NSObject *v17;
  Class v19;
  id v20;
  Class v21;
  uint8_t buf[4];
  Class v23;
  __int16 v24;
  id v25;
  __int16 v26;
  Class v27;

  v1 = a1;
  isa = a1[4].super.isa;
  v2 = a1[5].super.isa;
  v21 = v2;
  if (a1[6].super.isa)
    v4 = v2 == 0;
  else
    v4 = 0;
  if (v4
    && (a1 = (NSDate *)-[objc_class statusCode](isa, "statusCode"), a1 == (NSDate *)200)
    && (-[objc_class _maxAge](isa, "_maxAge"),
        v6 = v5,
        v7 = (objc_class *)-[objc_class _storeBagForData:error:](v1[7].super.isa, "_storeBagForData:error:", v1[6].super.isa, &v21), a1 = +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", v6), v7)&& !v21)
  {
    v8 = a1;
    v9 = objc_msgSend(-[objc_class url](v1[7].super.isa, "url"), "cacheKeyRepresentation");
    v10 = objc_msgSend((id)GKInsecureCacheRoot(v9), "stringByAppendingPathComponent:", CFSTR("StoreBag"));
    v11 = objc_msgSend(v10, "stringByAppendingPathComponent:", v9);
    v12 = objc_alloc_init((Class)NSFileManager);
    objc_msgSend(v12, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v10, 1, 0, 0);
    -[objc_class writeToFile:atomically:](v1[6].super.isa, "writeToFile:atomically:", v11, 1);
    objc_msgSend(v12, "_gkSetExpirationInterval:ofFileAtPath:", v11, v6);

    v13 = +[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults");
    v14 = -[NSUserDefaults setValue:forKey:](v13, "setValue:forKey:", v1[8].super.isa, GKLastProtocolVersionUsedKey);
    if (!os_log_GKGeneral)
      GKOSLoggers(v14);
    v15 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Loaded new store bag %@", buf, 0xCu);
    }
    -[objc_class _setupAPNSRequired:](v1[7].super.isa, "_setupAPNSRequired:", v7);
    -[objc_class _setupSignatureRequired:](v1[7].super.isa, "_setupSignatureRequired:", v7);
    -[objc_class _setupResponseSignatureRequired:](v1[7].super.isa, "_setupResponseSignatureRequired:", v7);
    -[objc_class _metricsThrottleThreshold:](v1[7].super.isa, "_metricsThrottleThreshold:", v7);
    -[NSNotificationCenter postNotificationName:object:userInfo:](+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"), "postNotificationName:object:userInfo:", CFSTR("GKStoreBagUpdatedNotification"), v1[7].super.isa, 0);
    -[objc_class setInternalBag:](v1[7].super.isa, "setInternalBag:", v7);
    -[objc_class setExpiration:](v1[7].super.isa, "setExpiration:", v8);
    v16 = 0;
  }
  else
  {
    if (!os_log_GKGeneral)
      GKOSLoggers(a1);
    v17 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      v19 = v1[9].super.isa;
      v20 = -[objc_class statusCode](isa, "statusCode");
      *(_DWORD *)buf = 138412802;
      v23 = v19;
      v24 = 2048;
      v25 = v20;
      v26 = 2112;
      v27 = v21;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Game Center store bag couldn't be loaded with url:%@, status code returned:%ld with error:%@", buf, 0x20u);
    }
    -[objc_class setExpiration:](v1[7].super.isa, "setExpiration:", +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", 60.0));
    v16 = v21;
    if (!v21)
      v16 = (Class)+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 3, 0);
  }
  -[objc_class setError:](v1[7].super.isa, "setError:", v16);
  return (*((uint64_t (**)(void))v1[10].super.isa + 2))();
}

uint64_t sub_10011E23C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));
  return result;
}

id sub_10011E25C(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD v4[5];

  v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10011E2B0;
  v4[3] = &unk_1002C3FC8;
  v4[4] = a2;
  return objc_msgSend(v2, "_fetchFromServerWithHandler:", v4);
}

uint64_t sub_10011E2B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10011E2BC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  __int128 v4;
  uint64_t v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10011E318;
  v3[3] = &unk_1002C40B8;
  v4 = *(_OWORD *)(a1 + 32);
  v5 = a2;
  return objc_msgSend((id)v4, "_fetchFromCacheWithHandler:", v3);
}

uint64_t sub_10011E318(uint64_t a1)
{
  void *v2;
  _QWORD v4[5];

  if ((objc_msgSend(*(id *)(a1 + 32), "_isValidAndNotExpired") & 1) == 0)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10011E390;
    v4[3] = &unk_1002C4090;
    v2 = *(void **)(a1 + 40);
    v4[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v2, "perform:", v4);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

id sub_10011E390(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD v4[5];

  v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10011E3E4;
  v4[3] = &unk_1002C3FC8;
  v4[4] = a2;
  return objc_msgSend(v2, "_fetchFromServerWithHandler:", v4);
}

uint64_t sub_10011E3E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10011E3F0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = 0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));
  return _objc_msgSend(*(id *)(a1 + 32), "updateURLPatternCache");
}

void sub_10011E4F4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[6];
  _QWORD v8[5];

  v2 = dispatch_group_create();
  if ((objc_msgSend(*(id *)(a1 + 32), "_isValidAndNotExpired") & 1) == 0)
  {
    dispatch_group_enter(v2);
    v3 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10011E5C0;
    v8[3] = &unk_1002C4130;
    v8[4] = v2;
    objc_msgSend(v3, "_fetchBagWithHandler:", v8);
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(NSObject **)(v5 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10011E5C8;
    block[3] = &unk_1002C4068;
    block[4] = v5;
    block[5] = v4;
    dispatch_group_notify(v2, v6, block);
  }
  dispatch_release(v2);
}

void sub_10011E5C0(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10011E5C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));
}

id sub_10011E8B4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v4[4];
  __int128 v5;
  void *v6;
  uint64_t v7;

  v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10011E918;
  v4[3] = &unk_1002C4180;
  v2 = *(_QWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 40);
  v6 = v1;
  v7 = v2;
  return objc_msgSend(v1, "getValuesWithCompletion:", v4);
}

void sub_10011E918(uint64_t a1, void *a2)
{
  NSURL *v3;
  NSObject *v4;
  _QWORD block[5];
  __int128 v6;

  if (*(_QWORD *)(a1 + 56))
  {
    v3 = (NSURL *)objc_msgSend(a2, "objectForKey:", *(_QWORD *)(a1 + 32));
    if (v3)
      v3 = +[NSURL URLWithString:](NSURL, "URLWithString:", v3);
    v4 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10011E9AC;
    block[3] = &unk_1002C4158;
    block[4] = v3;
    v6 = *(_OWORD *)(a1 + 48);
    dispatch_async(v4, block);
  }
}

uint64_t sub_10011E9AC(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], *(_QWORD *)(a1[5] + 40));
}

void sub_10011EA9C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD block[5];
  __int128 v6;

  if (*(_QWORD *)(a1 + 56))
  {
    v3 = objc_msgSend(a2, "_gkSubDictionaryWithKeys:", *(_QWORD *)(a1 + 32));
    v4 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10011EB1C;
    block[3] = &unk_1002C4158;
    block[4] = v3;
    v6 = *(_OWORD *)(a1 + 48);
    dispatch_async(v4, block);
  }
}

uint64_t sub_10011EB1C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], *(_QWORD *)(a1[5] + 40));
}

void sub_10011EBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10011EBF4(_QWORD *a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1[4] + 80), "objectForKey:", a1[5]);
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40) = result;
  return result;
}

void sub_10011ECE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10011ED00(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_shouldUseHTTPPipelining");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10011EE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10011EE30(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_gkSessionRateLimiting");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10011EF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10011EF34(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_achievementsThrottleThreshold");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10011F020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10011F038(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_scoresThrottleThreshold");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10011FBE8(id a1)
{
  qword_1003180A8 = (uint64_t)objc_msgSend(objc_alloc((Class)AKAppleIDSession), "initWithIdentifier:", CFSTR("gamed"));
}

void sub_10011FC58(id a1)
{
  id v1;

  v1 = objc_alloc_init((Class)AADeviceInfo);
  qword_1003180B8 = (uint64_t)objc_msgSend(objc_msgSend(v1, "clientInfoHeader"), "copy");

}

id sub_10011FDD0(uint64_t a1, void *a2, uint64_t a3)
{
  id result;

  if (!*(_BYTE *)(a1 + 40))
    return objc_msgSend(*(id *)(a1 + 32), "setValue:forHTTPHeaderField:", a3, a2);
  result = objc_msgSend(a2, "isEqualToString:", CFSTR("X-Apple-I-TimeZone"));
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 32), "setValue:forHTTPHeaderField:", a3, a2);
  return result;
}

id sub_10011FEF4(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v2 = objc_msgSend(*(id *)(a1 + 32), "dataRequestManager");
  objc_msgSend(v2, "beginTransaction:", CFSTR("sendAsynchronousRequest"));
  v3 = +[GKStoreBag appleIdSession](GKStoreBag, "appleIdSession");
  +[GKStoreBag addAuthHeadersToRequest:](GKStoreBag, "addAuthHeadersToRequest:", *(_QWORD *)(a1 + 40));
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10011FFA0;
  v9[3] = &unk_1002C4260;
  v7 = *(_QWORD *)(a1 + 48);
  v9[4] = v2;
  v9[5] = v7;
  return objc_msgSend(v4, "_sendOneAsyncTryWithRequest:responseMustBeSigned:session:retryCount:completionHandler:", v5, v6, v3, 4, v9);
}

id sub_10011FFA0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "endTransaction:", CFSTR("sendAsynchronousRequest"));
}

void sub_1001201A8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  NSNumber *v20;
  NSError *v21;
  NSError *v22;
  uint64_t v23;
  id v24;
  id v25;
  NSObject *v26;
  _BOOL8 v27;
  NSObject *v28;
  _BOOL8 v29;
  void *v30;
  id v31;
  const __CFString *v32;
  NSObject *v33;
  NSString *v34;
  id v35;
  const __CFString *v36;
  id v37;
  id v38;
  void *v39;
  NSObject *v40;
  _BOOL8 v41;
  NSObject *v42;
  id v43;
  NSObject *v44;
  _BOOL8 v45;
  NSObject *v46;
  _BOOL8 v47;
  NSObject *v48;
  uint64_t v49;
  char isKindOfClass;
  __n128 v51;
  uint64_t v52;
  void *v53;
  unsigned int v54;
  void *context;
  void *v56;
  void *v58;
  char v59;
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  id v63;
  __int16 v64;
  _BYTE v65[14];
  __int16 v66;
  id v67;
  __int16 v68;
  const __CFString *v69;
  _QWORD v70[2];
  _QWORD v71[2];
  NSErrorUserInfoKey v72;
  const __CFString *v73;

  v59 = 0;
  v7 = objc_msgSend(*(id *)(a1 + 32), "handleResponse:forRequest:shouldRetry:", a2, *(_QWORD *)(a1 + 40), &v59);
  if (v59)
  {
    v8 = *(_DWORD *)(a1 + 64);
    if (v8 > 0)
    {
      objc_msgSend(*(id *)(a1 + 48), "_sendOneAsyncTryWithRequest:responseMustBeSigned:session:retryCount:completionHandler:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 68), *(_QWORD *)(a1 + 32), (v8 - 1), *(_QWORD *)(a1 + 56));
      return;
    }
    v72 = NSLocalizedFailureReasonErrorKey;
    v73 = CFSTR("Exhausted retry count for _sendOneAsyncTryWithRequest.");
    v7 = +[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v73, &v72, 1));
    a4 = v7;
  }
  if (a4)
  {
    if (!os_log_GKGeneral)
      GKOSLoggers(v7);
    v9 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001223A8((uint64_t)a4, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = objc_autoreleasePoolPush();
  if ((uint64_t)objc_msgSend(a2, "statusCode") >= 400)
  {
    v17 = (uint64_t)objc_msgSend(a2, "statusCode");
    if (!a4 && v17 <= 599)
    {
      v18 = 0.0;
      if (objc_msgSend(a2, "statusCode") == (id)503)
      {
        objc_msgSend(objc_msgSend(objc_msgSend(a2, "allHeaderFields"), "objectForKey:", CFSTR("Retry-After")), "doubleValue");
        v18 = v19;
      }
      v70[0] = CFSTR("statusCode");
      v20 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(a2, "statusCode"));
      v70[1] = CFSTR("retryTime");
      v71[0] = v20;
      v71[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v18);
      v21 = (NSError *)+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v71, v70, 2));
      goto LABEL_18;
    }
  }
  if (a4)
  {
    v21 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", objc_msgSend(a4, "domain"), objc_msgSend(a4, "code"), 0);
LABEL_18:
    v22 = v21;
    goto LABEL_20;
  }
  v22 = 0;
LABEL_20:
  if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO) && *(_QWORD *)(a1 + 40))
  {
    context = objc_autoreleasePoolPush();
    v24 = objc_msgSend(*(id *)(a1 + 40), "HTTPBody");
    v25 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "valueForHTTPHeaderField:", CFSTR("content-encoding")), "isEqualToString:", CFSTR("gzip"));
    v56 = v16;
    if ((_DWORD)v25)
    {
      v25 = objc_msgSend(v24, "_gkUnzippedData");
      if (v25)
        v24 = v25;
    }
    v26 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      GKOSLoggers(v25);
      v26 = os_log_GKGeneral;
    }
    v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if (v27)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "_sendAsynchronousRequest:Received HTTP Response", buf, 2u);
      v26 = os_log_GKGeneral;
    }
    if (!v26)
      GKOSLoggers(v27);
    v28 = os_log_GKHTTP;
    v29 = os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO);
    if (v29)
    {
      v30 = *(void **)(a1 + 40);
      v31 = objc_msgSend(v30, "loggableHeaders");
      v32 = sub_1001208C0(v24);
      *(_DWORD *)buf = 138412802;
      v61 = v30;
      v62 = 2112;
      v63 = v31;
      v64 = 2112;
      *(_QWORD *)v65 = v32;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%@\nREQUEST {\nheader: %@\nbody: %@}", buf, 0x20u);
    }
    if (!os_log_GKGeneral)
      GKOSLoggers(v29);
    v33 = os_log_GKHTTP;
    if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
    {
      v54 = objc_msgSend(a2, "statusCode");
      v34 = +[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", objc_msgSend(a2, "statusCode"));
      v35 = objc_msgSend(a2, "allHeaderFields");
      v36 = sub_1001208C0(a3);
      *(_DWORD *)buf = 138413570;
      v61 = a2;
      v62 = 2112;
      v63 = a4;
      v64 = 1024;
      *(_DWORD *)v65 = v54;
      *(_WORD *)&v65[4] = 2112;
      *(_QWORD *)&v65[6] = v34;
      v66 = 2112;
      v67 = v35;
      v68 = 2112;
      v69 = v36;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%@\nRESPONSE (error:%@) {\nstatus: (%d) %@\nheader: %@\nbody: %@ }", buf, 0x3Au);
    }
    objc_autoreleasePoolPop(context);
    v16 = v56;
  }
  if (*(_BYTE *)(a1 + 68))
  {
    v37 = objc_msgSend(a2, "getSAPSignature");
    v58 = 0;
    if (v37)
    {
      v38 = objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedString:options:", v37, 0);
      v39 = v38;
      if (!os_log_GKGeneral)
        GKOSLoggers(v38);
      v40 = os_log_GKTrace;
      v41 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
      if (v41)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "_sendAsynchronousRequest:HTTP Response was signed and logged", buf, 2u);
      }
      if (!os_log_GKGeneral)
        GKOSLoggers(v41);
      v42 = os_log_GKHTTP;
      if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v61 = v39;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "\nRESPONSE was signed:%@}", buf, 0xCu);
      }
      v43 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "_gkSAPSession"), "processSignedData:withSignature:error:", a3, v39, &v58);
      if (v58)
      {
        if (!os_log_GKGeneral)
          GKOSLoggers(v43);
        v44 = os_log_GKHTTP;
        v45 = os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO);
        if (v45)
        {
          *(_DWORD *)buf = 138412290;
          v61 = v58;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "\nSIGNATURE ERROR:%@}", buf, 0xCu);
        }
        if (!os_log_GKGeneral)
          GKOSLoggers(v45);
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
          sub_100122344();
        v22 = (NSError *)+[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, 0);
        a3 = 0;
      }

    }
    else
    {
      if (!os_log_GKGeneral)
        GKOSLoggers(0);
      v46 = os_log_GKHTTP;
      v47 = os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO);
      if (v47)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "\nSIGNATURE ERROR: A SIGNED RESPONSE WAS EXPECTED BUT NONE WAS AVAILABLE}", buf, 2u);
      }
      if (!os_log_GKGeneral)
        GKOSLoggers(v47);
      v48 = os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_100122304(v48);
    }
  }
  v49 = objc_opt_class(NSHTTPURLResponse, v23);
  isKindOfClass = objc_opt_isKindOfClass(a2, v49);
  v51.n128_u64[0] = 0;
  if ((isKindOfClass & 1) != 0)
    objc_msgSend(a2, "_maxAge", 0.0);
  v52 = *(_QWORD *)(a1 + 56);
  if (v52)
  {
    if (a4)
      v53 = 0;
    else
      v53 = a3;
    (*(void (**)(uint64_t, void *, NSError *, __n128))(v52 + 16))(v52, v53, v22, v51);
  }
  objc_autoreleasePoolPop(v16);
}

const __CFString *sub_1001208C0(void *a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  size_t v10;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  void *v18;

  if (!a1)
    return CFSTR("(null: empty body)");
  v2 = (unsigned __int8 *)objc_msgSend(a1, "bytes");
  v3 = (uint64_t)objc_msgSend(a1, "length");
  v4 = v3;
  if (v3 >= 5)
  {
    v5 = *v2;
    if (v5 == 255)
    {
      if (v2[1] == 216)
        return CFSTR("(probably JPEG data)");
    }
    else if ((unint64_t)v3 >= 9 && v5 == 137 && v2[1] == 80 && v2[2] == 78 && v2[3] == 71)
    {
      return CFSTR("(probably PNG data)");
    }
  }
  v13 = 0;
  v14 = 100;
  v7 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", a1, 0, &v14, &v13);
  if (v7)
  {
    v6 = v7;
    if (!objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("password")))
      return (const __CFString *)v6;
    v8 = objc_msgSend(v6, "mutableCopy");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", CFSTR("PASSWORD REDACTED"), CFSTR("password"));
    v9 = v8;
    return (const __CFString *)v9;
  }
  if (v4 >= 128)
    v10 = 128;
  else
    v10 = v4;
  if (memmem(v2, v10, "<html", 5uLL) || memmem(v2, v10, "<xml", 4uLL))
  {
    v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithBytes:length:encoding:", v2, v4, 4);
    return (const __CFString *)v9;
  }
  if (!os_log_GKGeneral)
    GKOSLoggers(0);
  v12 = os_log_GKHTTP;
  if (os_log_type_enabled(os_log_GKHTTP, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218242;
    v16 = v4;
    v17 = 2112;
    v18 = a1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "(couldn't decode data of length:%ld as plist/html or xml) %@", buf, 0x16u);
  }
  return 0;
}

void sub_100120B30(id a1)
{
  qword_1003180C8 = (uint64_t)objc_msgSend(objc_alloc((Class)GKThreadsafeDictionary), "initWithName:", CFSTR("com.apple.GameKit.invalidationDates"));
}

id sub_100120BE0(uint64_t a1, void *a2)
{
  void *v4;
  id result;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = *(void **)(a1 + 32);
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(a2, "setObject:forKey:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8));
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_100120D64(id a1)
{
  qword_1003180D8 = (uint64_t)dispatch_queue_create("com.apple.GameKit.networkSynchronization", (dispatch_queue_attr_t)&_dispatch_queue_attr_concurrent);
}

void sub_100120E44(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100120E60(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v6[6];

  v3 = objc_msgSend(objc_loadWeak((id *)(a1 + 64)), "verifyEligibilityForBagKey:checkingAllowedRequestKeys:client:", *(_QWORD *)(a1 + 32), objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("gk-allowed-pregdpr-requests")), *(_QWORD *)(a1 + 40));
  v4 = *(NSObject **)(a1 + 48);
  if (v4)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100120F20;
    v6[3] = &unk_1002C4068;
    v5 = *(_QWORD *)(a1 + 56);
    v6[4] = v3;
    v6[5] = v5;
    dispatch_async(v4, v6);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
}

uint64_t sub_100120F20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100121248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100121278(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int8x16_t v4;
  __int128 v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *global_queue;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[10];
  int8x16_t v13;
  uint64_t v14;
  char v15;
  _QWORD v16[5];
  int8x16_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint8_t buf[16];

  if (!os_log_GKGeneral)
    GKOSLoggers(a1);
  v2 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "_loadDataForBagKey:Starting GKDataRequestManager transaction", buf, 2u);
  }
  v3 = objc_msgSend(*(id *)(a1 + 32), "dataRequestManager");
  objc_msgSend(v3, "beginTransaction:", CFSTR("loadDataForBagKey"));
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
  v16[0] = _NSConcreteStackBlock;
  v4 = *(int8x16_t *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  v17 = vextq_s8(v4, v4, 8uLL);
  v16[1] = 3221225472;
  v16[2] = sub_10012140C;
  v16[3] = &unk_1002C4400;
  v18 = v5;
  v19 = *(_OWORD *)(a1 + 64);
  v20 = *(_OWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 112);
  v16[4] = v3;
  v21 = v6;
  objc_msgSend((id)v4.i64[0], "performAsync:", v16);
  v7 = *(NSObject **)(a1 + 40);
  global_queue = dispatch_get_global_queue(0, 0);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_1001219E4;
  v12[3] = &unk_1002C4428;
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v12[4] = *(_QWORD *)(a1 + 32);
  v12[5] = v9;
  v11 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  v12[6] = *(_QWORD *)(a1 + 80);
  v12[7] = v3;
  v15 = *(_BYTE *)(a1 + 120);
  v12[1] = 3221225472;
  v13 = vextq_s8(*(int8x16_t *)(a1 + 104), *(int8x16_t *)(a1 + 104), 8uLL);
  v12[8] = v10;
  v12[9] = v11;
  dispatch_group_notify(v7, global_queue, v12);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void sub_10012140C(uint64_t a1)
{
  id v2;
  void *v3;
  NSArray *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[2];

  v2 = objc_msgSend(*(id *)(a1 + 32), "pushToken");
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
  v3 = *(void **)(a1 + 48);
  v18[0] = *(_QWORD *)(a1 + 56);
  v18[1] = CFSTR("gk-allowed-pregdpr-requests");
  v4 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 2);
  v10[0] = _NSConcreteStackBlock;
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10[2] = sub_10012150C;
  v10[3] = &unk_1002C43D8;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = v7;
  v10[1] = 3221225472;
  v11 = v5;
  v14 = v8;
  v15 = v2;
  v9 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 80);
  v17 = v9;
  objc_msgSend(v3, "getValuesForKeys:queue:completion:", v4, v6, v10);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10012150C(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v6;
  id v7;
  NSURL *v8;
  NSURL *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD v14[4];
  __int128 v15;
  NSURL *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  uint64_t v22;

  v6 = (_QWORD *)(a1 + 40);
  v7 = objc_msgSend(*(id *)(a1 + 32), "verifyEligibilityForBagKey:checkingAllowedRequestKeys:client:", *(_QWORD *)(a1 + 40), objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("gk-allowed-pregdpr-requests")), *(_QWORD *)(a1 + 48));
  if (v7)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40) = v7;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
    return;
  }
  v8 = (NSURL *)objc_msgSend(a2, "objectForKey:", *v6);
  if (!v8)
  {
    if (!a3)
    {
LABEL_14:
      v13 = +[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, 0);
LABEL_17:
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40) = v13;
      goto LABEL_18;
    }
    v9 = 0;
LABEL_9:
    if (!os_log_GKGeneral)
      GKOSLoggers(v8);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      sub_10012240C();
      if (v9)
        goto LABEL_13;
    }
    else if (v9)
    {
      goto LABEL_13;
    }
    v13 = a3;
    goto LABEL_17;
  }
  v8 = +[NSURL URLWithString:](NSURL, "URLWithString:", v8);
  v9 = v8;
  if (a3)
    goto LABEL_9;
  if (!v8)
    goto LABEL_14;
LABEL_13:
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
  v10 = +[GKNetworkRequestManager commonNetworkRequestManager](GKNetworkRequestManager, "commonNetworkRequestManager");
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001216E0;
  v14[3] = &unk_1002C43B0;
  v15 = *(_OWORD *)(a1 + 32);
  v16 = v9;
  v17 = *(_OWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = v11;
  v20 = v12;
  v21 = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
  v22 = *(_QWORD *)(a1 + 104);
  objc_msgSend(v10, "getFairPlaySession:", v14);
LABEL_18:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1001216E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 v21;
  _QWORD v22[6];
  __int128 v23;
  __int128 v24;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 56);
  if (v5)
  {
    if (!objc_msgSend(v5, "containsObject:", *(_QWORD *)(a1 + 40)))
      a2 = 0;
    v4 = *(_QWORD *)(a1 + 32);
  }
  v21 = objc_msgSend(*(id *)(v4 + 48), "containsObject:", *(_QWORD *)(a1 + 40));
  v20 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "containsObject:", *(_QWORD *)(a1 + 40));
  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 56), "playerInternal"), "playerID");
  v9 = objc_msgSend(*(id *)(a1 + 56), "authenticationToken");
  v11 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  BYTE1(v19) = +[GKStoreBag shouldIncludeClientInfoAuthHeaderForBagKey:](GKStoreBag, "shouldIncludeClientInfoAuthHeaderForBagKey:", *(_QWORD *)(a1 + 40));
  LOBYTE(v19) = 1;
  BYTE1(v18) = v21;
  LOBYTE(v18) = 0;
  v13 = objc_msgSend(v6, "requestWithURL:playerID:authToken:pushToken:client:postData:includeUDID:includeAPNS:sapSession:includeAppOriginHeaders:includeClientInfoAuthHeader:", v7, v8, v9, v11, v10, v12, v18, a2, v19);
  if (v13)
  {
    v14 = v13;
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 88));
    objc_msgSend(*(id *)(a1 + 72), "beginNetworkActivity");
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1001218BC;
    v22[3] = &unk_1002C4388;
    v15 = *(void **)(a1 + 32);
    v16 = *(_OWORD *)(a1 + 104);
    v17 = *(_QWORD *)(a1 + 72);
    v22[4] = *(_QWORD *)(a1 + 40);
    v22[5] = v17;
    v23 = *(_OWORD *)(a1 + 88);
    v24 = v16;
    objc_msgSend(v15, "_sendAsynchronousRequest:responseMustBeSigned:completion:", v14, v20, v22);
  }
  else
  {
    if (!os_log_GKGeneral)
      GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10012246C();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40) = +[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, 0);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

void sub_1001218BC(uint64_t a1, void *a2, void *a3, double a4)
{
  double v8;

  if (a3)
  {
    if (!os_log_GKGeneral)
      GKOSLoggers(a1);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001224D0();
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40) = a3;
  if (qword_1003180F0 != -1)
    dispatch_once(&qword_1003180F0, &stru_1002C4360);
  v8 = *(double *)&qword_1003180E8;
  if (*(double *)&qword_1003180E8 > 30.0 || *(double *)&qword_1003180E8 <= 0.0)
    v8 = a4;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v8;
  objc_msgSend(*(id *)(a1 + 40), "endNetworkActivity");
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1001219BC(id a1)
{
  uint64_t v1;

  objc_msgSend(+[GKPreferences shared](GKPreferences, "shared"), "cacheTTLOverride");
  qword_1003180E8 = v1;
}

void sub_1001219E4(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  id v14;

  v2 = objc_autoreleasePoolPush();
  v3 = objc_msgSend(*(id *)(a1 + 32), "isLoadValidForBagKey:date:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if ((v3 & 1) == 0)
  {
    if (!os_log_GKGeneral)
      GKOSLoggers(v3);
    v4 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 40);
      v5 = *(_QWORD *)(a1 + 48);
      v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "_bagKeyValidationDict"), "objectForKey:", v6);
      v9 = 138412802;
      v10 = v6;
      v11 = 2112;
      v12 = v5;
      v13 = 2112;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "STALE LOAD(%@) started: %@ invalidated: %@", (uint8_t *)&v9, 0x20u);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0xBFF0000000000000;
  }
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
    (*(void (**)(uint64_t, _QWORD, _QWORD, double))(v8 + 16))(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24));

  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 56), "endTransaction:", CFSTR("loadDataForBagKey"));
  if (*(_BYTE *)(a1 + 104))

}

id sub_100121C60(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];

  v2 = (void *)a1[4];
  v1 = a1[5];
  v3 = a1[6];
  v4 = a1[7];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100121CC0;
  v7[3] = &unk_1002C4478;
  v5 = a1[8];
  v7[4] = a1[9];
  return objc_msgSend(v2, "_loadDataForBagKey:postData:client:credential:completion:", v1, v3, v4, v5, v7);
}

uint64_t sub_100121CC0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100121DA4(uint64_t a1)
{
  NSObject *v2;
  __int128 v3;
  _QWORD v4[4];
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_networkSynchonizationQueue");
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100121E14;
  v4[3] = &unk_1002C44A0;
  v3 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = v3;
  v7 = *(_OWORD *)(a1 + 64);
  dispatch_barrier_async(v2, v4);
}

id sub_100121E14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_loadDataForBagKey:postData:client:credential:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

void sub_100121FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 200), 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100122004(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  __int128 v11;
  id v12;
  uint64_t v13;
  _QWORD v14[5];
  __int128 v15;
  __int128 v16;

  v2 = objc_msgSend(*(id *)(a1 + 32), "dataRequestManager");
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "playerInternal"), "playerID");
  v6 = objc_msgSend(*(id *)(a1 + 48), "authenticationToken");
  v7 = objc_msgSend(v2, "pushToken");
  LOWORD(v13) = *(_WORD *)(a1 + 104);
  v8 = objc_msgSend(v3, "requestWithURL:playerID:authToken:pushToken:client:postData:includeUDID:includeAPNS:sapSession:", v4, v5, v6, v7, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v13, 0);
  if (v8)
  {
    v9 = v8;
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 72));
    objc_msgSend(*(id *)(a1 + 56), "beginNetworkActivity");
    v10 = *(void **)(a1 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10012217C;
    v14[3] = &unk_1002C44C8;
    v11 = *(_OWORD *)(a1 + 88);
    v14[4] = *(_QWORD *)(a1 + 56);
    v15 = *(_OWORD *)(a1 + 72);
    v16 = v11;
    objc_msgSend(v10, "_sendAsynchronousRequest:responseMustBeSigned:completion:", v9, 0, v14);
  }
  else
  {
    v12 = +[NSError userErrorForCode:userInfo:](NSError, "userErrorForCode:userInfo:", 3, 0);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40) = v12;
    if (!os_log_GKGeneral)
      GKOSLoggers(v12);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100122534();
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void sub_10012217C(uint64_t a1, void *a2, void *a3, double a4)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) = a2;
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40) = a3;
  objc_msgSend(*(id *)(a1 + 32), "endNetworkActivity");
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1001221E0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t, _QWORD, _QWORD, double))(v2 + 16))(v2, *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40), *(double *)(*(_QWORD *)(a1[6] + 8) + 24));

}

void sub_100122304(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "_sendAsynchronousRequest:Signature Error: A signed response was expected but non was available", v1, 2u);
}

void sub_100122344()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100089740(__stack_chk_guard);
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "_sendAsynchronousRequest:Signature error:%@", v2, v3, v4, v5, 2u);
  sub_100016C20();
}

void sub_1001223A8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "Failed _gkSendAsynchronous Request due to error: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_10012240C()
{
  uint64_t v0;
  os_log_t v1;

  sub_100089740(__stack_chk_guard);
  sub_1000B5528();
  sub_100016C0C((void *)&_mh_execute_header, v0, v1, "_loadDataForBagKey:Failed to get URL from bag for bagKey:%@.Error is: %@");
  sub_100016C20();
}

void sub_10012246C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100089740(__stack_chk_guard);
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "_loadDataForBagKey:No request for NSURLRequest, likely due to invalid URL. This will result to an alert showing '...error communicating with the server'. bagKey was:%@", v2, v3, v4, v5, 2u);
  sub_100016C20();
}

void sub_1001224D0()
{
  uint64_t v0;
  os_log_t v1;

  sub_1000B5528();
  sub_100016C0C((void *)&_mh_execute_header, v0, v1, "_loadDataForBagKey:Failed to send Asynchronous Request for bagKey:%@. Error: %@");
  sub_100016C20();
}

void sub_100122534()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100089740(__stack_chk_guard);
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error - This will result showing an alert '...error communicating with the server'. Invalid request when reading data for url: %@", v2, v3, v4, v5, 2u);
  sub_100016C20();
}

void sub_100122A64(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  v2 = objc_msgSend(v1, "executeCommandsWithContext:", v3);

}

void sub_100122F3C(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "context"));
  objc_msgSend(v1, "finishWithContext:", v2);

}

void sub_1001230F8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "Nothing to do, no commands to execute.", a5, a6, a7, a8, 0);
}

void sub_10012312C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000279BC((void *)&_mh_execute_header, a1, a3, "Executing contacts change commands", a5, a6, a7, a8, 0);
}

void sub_100123160(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "error"));
  v5 = 138412290;
  v6 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Will not proceed to execute commands due to error: %@", (uint8_t *)&v5, 0xCu);

}

uint64_t sub_1001233D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1001236D8(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001236E0(uint64_t a1, uint64_t a2)
{
  void *v3;
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100123758;
  v4[3] = &unk_1002BBBD8;
  v3 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  objc_msgSend(v3, "authenticatedPlayersDidChange:authenticatingBundleID:reply:", a2, 0, v4);

}

void sub_100123758(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100123760(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100123AE0(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKInternalErrorDomain, 400, 0));
  (*(void (**)(_QWORD, void *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v2, 0, 0, 0);

}

void sub_100123BA8(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to find host with pid %d", (uint8_t *)v2, 8u);
}

void sub_100123C1C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "getPrivateServicesForPID: Missing a host client", v1, 2u);
}

void sub_100124068(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "SUCCESFULLY SAVED(%@)", (uint8_t *)&v2, 0xCu);
}

void sub_1001240DC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "we will rollback to last known good state because we FAILED TO SAVE(%@), ERROR: %@", (uint8_t *)&v3, 0x16u);
}

void sub_100124160(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "Failed to remove existing entries", a5, a6, a7, a8, 0);
}

void sub_100124194(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "Error fetching count", a5, a6, a7, a8, 0);
}

void sub_100124208(id a1)
{
  GKAMPController *v1;
  void *v2;

  v1 = -[GKAMPController initWithHasAcknowledgedLatestGDPRBlock:bagChanged:]([GKAMPController alloc], "initWithHasAcknowledgedLatestGDPRBlock:bagChanged:", &stru_1002C4590, &stru_1002C45B0);
  v2 = (void *)qword_1003180F8;
  qword_1003180F8 = (uint64_t)v1;

  +[AMSMetrics setDisableBackgroundMetrics:](AMSMetrics, "setDisableBackgroundMetrics:", 0);
}

BOOL sub_100124254(id a1)
{
  GKPlayerInternalProvider *v1;
  void *v2;
  unsigned __int8 v3;

  v1 = objc_alloc_init(GKPlayerInternalProvider);
  v2 = (void *)objc_claimAutoreleasedReturnValue(-[GKPlayerInternalProvider localPlayer](v1, "localPlayer"));
  v3 = objc_msgSend(v2, "hasAcknowledgedLatestGDPR");

  return v3;
}

void sub_1001242A4(id a1)
{
  +[GKClientProxy enumerateClientsUsingBlock:](GKClientProxy, "enumerateClientsUsingBlock:", &stru_1002C45D0);
}

void sub_1001242B8(id a1, GKClientProxy *a2, BOOL *a3)
{
  -[GKClientProxy metricsValuesChanged](a2, "metricsValuesChanged", a3);
}

void sub_100124420(uint64_t a1)
{
  uint64_t (**v2)(void);
  int v3;
  dispatch_queue_global_t global_queue;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v2 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hasAcknowledgedLatestGDPRBlock"));
  v3 = v2[2]();

  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "createBagIfNecessary");
  global_queue = dispatch_get_global_queue(0, 0);
  v5 = objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001244E0;
  v7[3] = &unk_1002BB450;
  v6 = *(id *)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v6;
  dispatch_async(v5, v7);

}

void sub_1001244E0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bag"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t sub_100124800(uint64_t a1)
{
  GKMultiplayerActivityEventFilter *v2;
  uint64_t (**v3)(void);
  char v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  _TtC14GameDaemonCore17GKMetricsPipeline *v9;
  void *v10;
  _TtC14GameDaemonCore17GKMetricsPipeline *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint8_t v17[16];

  v2 = (GKMultiplayerActivityEventFilter *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mafEventFilter"));
  if (!v2)
  {
    if (!*(_QWORD *)(a1 + 40))
      goto LABEL_5;
    v2 = objc_alloc_init(GKMultiplayerActivityEventFilter);
    objc_msgSend(*(id *)(a1 + 32), "setMafEventFilter:", v2);
  }

LABEL_5:
  v3 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hasAcknowledgedLatestGDPRBlock"));
  v4 = v3[2]();

  v5 = *(void **)(a1 + 32);
  if ((v4 & 1) == 0)
  {
    objc_msgSend(v5, "tearDown");
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  if (objc_msgSend(v5, "isSetup"))
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v6 = objc_msgSend(*(id *)(a1 + 32), "createBagIfNecessary");
  v7 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v8 = (id)GKOSLoggers(v6);
    v7 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Setting up metrics", v17, 2u);
  }
  v9 = [_TtC14GameDaemonCore17GKMetricsPipeline alloc];
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bag"));
  v11 = -[GKMetricsPipeline initWithBag:](v9, "initWithBag:", v10);
  objc_msgSend(*(id *)(a1 + 32), "setMetricsPipeline:", v11);

  v12 = objc_alloc((Class)AMSMetrics);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bag"));
  v14 = objc_msgSend(v12, "initWithContainerID:bag:", CFSTR("com.apple.game-center-client"), v13);
  objc_msgSend(*(id *)(a1 + 32), "setMetrics:", v14);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metrics"));
  objc_msgSend(v15, "setFlushTimerEnabled:", 1);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100124F5C(id a1)
{
  NSObject *v1;
  id v2;
  uint8_t v3[16];

  v1 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v2 = (id)GKOSLoggers(a1);
    v1 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Metrics event finished processing", v3, 2u);
  }
}

void sub_1001250C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v3 = a2;
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "metricsPipeline"));
    objc_msgSend(v4, "processMultiplayerActivityEventWithMetricsFields:hostAppBundleId:completionHandler:", v3, *(_QWORD *)(a1 + 40), &stru_1002C4610);

  }
  else
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(0);
    v6 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Not emitting MAF event", v7, 2u);
    }
  }

}

void sub_100125188(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  if (!os_log_GKGeneral)
    v1 = (id)GKOSLoggers(a1);
  v2 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "MAF event finished processing", v3, 2u);
  }
}

void sub_10012546C(id a1)
{
  GKContactsIntegrationController *v1;
  void *v2;

  v1 = objc_alloc_init(GKContactsIntegrationController);
  v2 = (void *)qword_100318108;
  qword_100318108 = (uint64_t)v1;

}

void sub_1001259B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001259D0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v3, "isEligibleAllowingIneligibility:usingSettings:withContext:", v2, v4, v5);

}

void sub_100125B74(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serialQueue"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100125C10;
  v6[3] = &unk_1002BB758;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, v6);

}

id sub_100125C10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startContactsSyncAllowingChangeHistory:completion:", 1, *(_QWORD *)(a1 + 40));
}

id sub_100125C20(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "startIDSSyncWithCompletion:", a2);
}

void sub_100126210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  id *v39;
  id *v40;
  uint64_t v41;

  objc_destroyWeak(v39);
  objc_destroyWeak(v40);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v41 - 224), 8);
  _Block_object_dispose((const void *)(v41 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100126278(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10012628C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10012629C(uint64_t a1)
{

}

void sub_1001262A4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v2, "isEligibleAllowingIneligibility:usingSettings:withContext:", 8, v3, v4);

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
    v11 = (id)objc_claimAutoreleasedReturnValue(+[GKCDContactInfoList _gkPrimaryListWithContext:](GKCDContactInfoList, "_gkPrimaryListWithContext:", v5));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "migrator"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
    objc_msgSend(v6, "performMigrationsWithContext:list:", v7, v11);

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "changeHistoryToken"));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
}

void sub_1001263B8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  NSObject *v5;
  void *v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contactsBatchQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001264A0;
  block[3] = &unk_1002C46A8;
  objc_copyWeak(&v14, (id *)(a1 + 56));
  v6 = *(void **)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v7 = v6;
  v13 = *(_QWORD *)(a1 + 48);
  v10 = v7;
  v11 = v3;
  v8 = v3;
  dispatch_async(v5, block);

  objc_destroyWeak(&v14);
}

void sub_1001264A0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contactStore"));
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "playerProvider"));
  objc_msgSend(v2, "_gkSyncContactsWithChangeHistoryToken:playerProvider:batchSize:changeHistoryLimit:cachedListVersion:", v3, v4, objc_msgSend(*(id *)(a1 + 32), "localBatchFetchSize"), objc_msgSend(*(id *)(a1 + 32), "localSyncLimit"), *(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100126558(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setContactsUpdateGroup:", 0);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1001268F8(uint64_t a1)
{
  void *v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25[2];
  char v26;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  if ((objc_msgSend(*(id *)(a1 + 40), "isEligibleAllowingIneligibility:usingSettings:withContext:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48), v2) & 1) != 0)
  {
    v3 = (char *)objc_msgSend(*(id *)(a1 + 40), "calculateRemainingIDSHandleQueryCountUsingSettings:withContext:", *(_QWORD *)(a1 + 48), v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "expiredIDSEntriesWithFetchLimit:matchingHandles:usingSettings:withContext:", &v3[(_QWORD)objc_msgSend(*(id *)(a1 + 48), "idsV2BatchFetchSize")], 0, *(_QWORD *)(a1 + 48), v2));
    if (objc_msgSend(v4, "count"))
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_gkMapDictionaryWithKeyPath:", CFSTR("handle")));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "allKeys"));
      v6 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("handle IN %@"), v5));

      v20 = (void *)v6;
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDContactInfo _gkObjectsMatchingPredicate:withContext:](GKCDContactInfo, "_gkObjectsMatchingPredicate:withContext:", v6, v2));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_gkDistinctValuesForKeyPath:", CFSTR("handle")));

      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", objc_msgSend(v4, "count")));
      v10 = 0;
      if (!objc_msgSend(v4, "count"))
        goto LABEL_19;
      v11 = 0;
      do
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", v11));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "handle"));

        if (objc_msgSend(v8, "containsObject:", v13))
        {
          if (objc_msgSend(v9, "count") >= v3)
            v10 = 1;
          else
            objc_msgSend(v9, "addObject:", v13);
        }
        else if (objc_msgSend(v13, "length"))
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", v13));
          objc_msgSend(v2, "deleteObject:", v14);

        }
        ++v11;
        v15 = objc_msgSend(v4, "count");
      }
      while (v11 < (unint64_t)v15);
      if (((v3 == 0) & v10) != 0)
      {
        if (!os_log_GKGeneral)
          v16 = (id)GKOSLoggers(v15);
        if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
          sub_10012E7E4();
        objc_msgSend(*(id *)(a1 + 40), "updateIntervalHasFinishedExceedingIDSLimit:allowingIneligibility:usingSettings:", 1, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48));
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      }
      else
      {
LABEL_19:
        objc_initWeak(&location, *(id *)(a1 + 40));
        v17 = *(_QWORD *)(a1 + 64);
        v18 = *(void **)(a1 + 40);
        v19 = *(_QWORD *)(a1 + 48);
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472;
        v22[2] = sub_100126C88;
        v22[3] = &unk_1002C46F8;
        objc_copyWeak(v25, &location);
        v26 = v10 & 1;
        v25[1] = *(id *)(a1 + 64);
        v23 = *(id *)(a1 + 48);
        v24 = *(id *)(a1 + 56);
        objc_msgSend(v18, "fetchIDSDataAndUpdateCacheForHandles:allowingIneligibility:usingSettings:withDelay:completion:", v9, v17, v19, 1, v22);

        objc_destroyWeak(v25);
        objc_destroyWeak(&location);
      }

    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    }

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_100126C6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100126C88(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!a2 && *(_BYTE *)(a1 + 64))
    objc_msgSend(WeakRetained, "updateIntervalHasFinishedExceedingIDSLimit:allowingIneligibility:usingSettings:", 1, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100126E64(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void (**v12)(void);

  v6 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *(void **)(a1 + 40);
  v12 = a3;
  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v7, "isEligibleAllowingIneligibility:usingSettings:withContext:", v5, v6, v8)));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("isEligible"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDIDSInfoList _gkPrimaryListWithContext:](GKCDIDSInfoList, "_gkPrimaryListWithContext:", v8));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "updateIntervalStartTimeStamp"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v11, CFSTR("updateIntervalStartTime"));

  v12[2]();
}

void sub_100126F54(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  id v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("isEligible")));
  v3 = objc_msgSend(v2, "BOOLValue");

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("updateIntervalStartTime")));
  v5 = (void *)v4;
  if ((v3 & 1) != 0)
  {
    if (v4)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v6, "timeIntervalSinceDate:", v5);
      v8 = v7;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "settings"));
      objc_msgSend(v9, "idsUpdateInterval");
      v11 = v10 - v8;

      v12 = 0.0;
      if (v11 >= 0.0)
        v12 = v11;
      objc_msgSend(*(id *)(a1 + 40), "setupIDSCacheUpdateTimerWithStartTime:", v12);

    }
    else
    {
      if (!os_log_GKGeneral)
        v14 = (id)GKOSLoggers(0);
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_10012E83C();
    }
  }
  else
  {
    if (!os_log_GKGeneral)
      v13 = (id)GKOSLoggers(v4);
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_10012E868();
    objc_msgSend(*(id *)(a1 + 40), "stopCacheUpdates");
  }

}

void sub_1001275D8(uint64_t a1)
{
  unsigned __int8 v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t *v28;
  uint64_t *v29;
  id v30;
  char v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;
  id location;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isAlreadyWaitingOnLimitTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playerProvider"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localPlayerCacheGroup"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "settings"));
  objc_initWeak(&location, *(id *)(a1 + 32));
  v37 = 0;
  v38 = &v37;
  v39 = 0x3032000000;
  v40 = sub_10012628C;
  v41 = sub_10012629C;
  v42 = 0;
  v33 = 0;
  v34 = &v33;
  v35 = 0x2020000000;
  v36 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "context"));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1001279F0;
  v23[3] = &unk_1002C4720;
  objc_copyWeak(&v30, &location);
  v31 = *(_BYTE *)(a1 + 56);
  v28 = &v37;
  v24 = *(id *)(a1 + 40);
  v32 = v2;
  v7 = v5;
  v25 = v7;
  v8 = v4;
  v26 = v8;
  v27 = *(id *)(a1 + 48);
  v29 = &v33;
  objc_msgSend(v6, "performBlockAndWait:", v23);

  if (!*((_BYTE *)v34 + 24))
  {
    if (*(_BYTE *)(a1 + 56) || (objc_msgSend(*(id *)(a1 + 32), "canSyncWithIDS") & 1) != 0)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKContactsIntegrationController.m", 553, "-[GKContactsIntegrationController syncIDSDataForHandles:forcefully:completion:]_block_invoke"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v9));

      objc_msgSend(v10, "enter");
      v11 = *(void **)(a1 + 32);
      v12 = v38[5];
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "settings"));
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_100127BA4;
      v21[3] = &unk_1002C3260;
      v14 = v10;
      v22 = v14;
      objc_msgSend(v11, "fetchIDSDataAndUpdateCacheForHandles:allowingIneligibility:usingSettings:withDelay:completion:", v12, 0, v13, 1, v21);

      v15 = objc_msgSend(v14, "waitWithTimeout:", 60.0);
      if (v15)
      {
        if (!os_log_GKGeneral)
          v16 = (id)GKOSLoggers(v15);
        if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
          sub_10012EA98();
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "error"));

        if (!v17)
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKContactsIntegrationErrorDomain, 9, 0));
          objc_msgSend(v14, "setError:", v18);

        }
      }
      v19 = *(_QWORD *)(a1 + 48);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "error"));
      (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v20);

    }
    else
    {
      v14 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKContactsIntegrationErrorDomain, 7, 0));
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }

  }
  objc_destroyWeak(&v30);
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);

  objc_destroyWeak(&location);
}

void sub_1001279A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  id *v30;
  uint64_t v31;

  objc_destroyWeak(v30);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v31 - 152), 8);
  objc_destroyWeak((id *)(v31 - 104));
  _Unwind_Resume(a1);
}

void sub_1001279F0(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 88))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(id *)(a1 + 32));
  }
  else
  {
    v8 = *(unsigned __int8 *)(a1 + 89);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
    v14 = 0;
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "handlesExcludingNoneExpiredFromHandles:isAlreadyWaitingOnLimitTimer:settings:moc:error:", v3, v8, v9, v10, &v14));
    v7 = v14;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

    if (v7)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
      goto LABEL_8;
    }
  }
  if (!objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "count"))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
    goto LABEL_10;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "settings"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v6 = objc_msgSend(WeakRetained, "isEligibleAllowingIneligibility:usingSettings:withContext:", 0, v4, v5);

  if ((v6 & 1) == 0)
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKContactsIntegrationErrorDomain, 1, 0));
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
LABEL_8:

  }
LABEL_10:

}

id sub_100127BA4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setError:", a2);
  return objc_msgSend(*(id *)(a1 + 32), "leave");
}

id sub_100127D94(uint64_t a1)
{
  uint64_t v2;

  LOBYTE(v2) = *(_BYTE *)(a1 + 104);
  return objc_msgSend(*(id *)(a1 + 32), "fetchIDSDataAndUpdateCacheForHandles:rangeToFetch:maxBatchSize:numberOfHandlesLeft:allowingIneligibility:settings:withDelay:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 48), v2, *(_QWORD *)(a1 + 56));
}

void sub_100128224(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_100128248(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  _BOOL8 v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = WeakRetained;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v9 = (id)GKOSLoggers(WeakRetained);
    v10 = os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
    if (v10)
      sub_10012ECE4();
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v10);
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_10012EC80();
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v12 = objc_msgSend(v5, "count");
    if (v12)
    {
      if (!os_log_GKGeneral)
        v13 = (id)GKOSLoggers(v12);
      v14 = (void *)os_log_GKContacts;
      if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
        sub_10012EBE4(v14);
      LOBYTE(v17) = *(_BYTE *)(a1 + 104);
      objc_msgSend(v8, "handleIDSFetchResult:handlesToQuery:rangeToFetch:maxBatchSize:numberOfHandlesLeft:allowingIneligibility:settings:withDelay:completion:", v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 40), v17, *(_QWORD *)(a1 + 48));
    }
    else
    {
      if (!os_log_GKGeneral)
        v15 = (id)GKOSLoggers(0);
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_10012EBB8();
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKContactsIntegrationErrorDomain, 3, 0));
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

    }
  }

}

void sub_100128620(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  GKContactsCacheUpdateBatchStartCommand *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  id v35;

  v5 = a2;
  v6 = a3;
  v7 = objc_alloc_init(GKContactsCacheUpdateBatchStartCommand);
  v8 = objc_claimAutoreleasedReturnValue(-[GKContactsCacheUpdateBatchStartCommand executeWithContext:](v7, "executeWithContext:", v5));
  v9 = (void *)v8;
  if (v8)
  {
    if (!os_log_GKGeneral)
      v10 = (id)GKOSLoggers(v8);
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_10012EDCC();
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("fetchingFinished"));
    objc_msgSend(*(id *)(a1 + 32), "setError:", v9);
    v6[2](v6);
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDIDSInfoList _gkPrimaryListWithContext:](GKCDIDSInfoList, "_gkPrimaryListWithContext:", v5));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "updateIntervalStartTimeStamp"));

    if (!v12)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v11, "setUpdateIntervalStartTimeStamp:", v13);

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "updateIntervalHandlesCount"));
    v15 = (char *)objc_msgSend(v14, "unsignedIntegerValue");

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", &v15[(_QWORD)objc_msgSend(*(id *)(a1 + 40), "count")]));
    objc_msgSend(v11, "setUpdateIntervalHandlesCount:", v16);

    v17 = objc_msgSend(*(id *)(a1 + 48), "isEligibleAllowingIneligibility:usingSettings:withContext:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56), v5);
    if ((v17 & 1) != 0)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allKeys"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v18));

      v20 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDIDSInfo _gkObjectsMatchingHandles:withContext:](GKCDIDSInfo, "_gkObjectsMatchingHandles:withContext:", v19, v5));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "_gkMapDictionaryWithKeyPath:", CFSTR("handle")));

      if (os_log_is_debug_enabled(os_log_GKContacts))
        v22 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
      else
        v22 = 0;
      v24 = objc_msgSend(v21, "count");
      v25 = objc_msgSend(*(id *)(a1 + 40), "count");
      if (v24 != v25)
      {
        if (!os_log_GKGeneral)
          v26 = (id)GKOSLoggers(v25);
        if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
          sub_10012ED74();
      }
      v27 = *(void **)(a1 + 40);
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_100128A30;
      v32[3] = &unk_1002C4798;
      v28 = v21;
      v33 = v28;
      v34 = v5;
      v29 = v22;
      v35 = v29;
      objc_msgSend(v27, "enumerateKeysAndObjectsUsingBlock:", v32);
      v30 = objc_msgSend(v29, "count");
      if (v30)
      {
        if (!os_log_GKGeneral)
          v31 = (id)GKOSLoggers(v30);
        if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
          sub_10012ED10();
      }
      v6[2](v6);

    }
    else
    {
      if (!os_log_GKGeneral)
        v23 = (id)GKOSLoggers(v17);
      if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
        sub_10012EDA0();
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("fetchingFinished"));
      v6[2](v6);
    }

  }
}

void sub_100128A30(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  GKCDIDSInfo *v7;
  GKCDIDSInfo *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;

  v5 = a2;
  v6 = a3;
  v7 = (GKCDIDSInfo *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));
  if (v7)
    goto LABEL_6;
  v8 = [GKCDIDSInfo alloc];
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDIDSInfo entity](GKCDIDSInfo, "entity"));
  v7 = -[GKCDIDSInfo initWithEntity:insertIntoManagedObjectContext:](v8, "initWithEntity:insertIntoManagedObjectContext:", v9, *(_QWORD *)(a1 + 40));

  if (!os_log_GKGeneral)
    v11 = (id)GKOSLoggers(v10);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
  {
    sub_10012EDF8();
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v7)
  {
LABEL_6:
    -[GKCDIDSInfo _gkUpdateEntryWithHandle:idsInfoResult:](v7, "_gkUpdateEntryWithHandle:idsInfoResult:", v5, v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "gameCenterData"));
    objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v12, v5);

  }
LABEL_7:

}

void sub_100128B4C(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint32_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  GKContactsIntegrationTimer *v13;
  void *v14;
  dispatch_time_t v15;
  void *v16;
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  id v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("fetchingFinished")));
  v3 = objc_msgSend(v2, "BOOLValue");

  if ((v3 & 1) != 0
    || (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error")), v4, v4))
  {
    v5 = *(_QWORD *)(a1 + 64);
    v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v17);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "idsBatchFetchDelayInterval");
    v7 = v6;
    objc_msgSend(*(id *)(a1 + 40), "idsBatchFetchJitterInterval");
    v9 = arc4random_uniform(v8);
    objc_initWeak(&location, *(id *)(a1 + 48));
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100128E70;
    v23[3] = &unk_1002C47C0;
    objc_copyWeak(&v27, &location);
    v28 = *(_OWORD *)(a1 + 72);
    v29 = *(_QWORD *)(a1 + 88);
    v24 = *(id *)(a1 + 56);
    v30 = *(_OWORD *)(a1 + 96);
    v25 = *(id *)(a1 + 40);
    v31 = *(_BYTE *)(a1 + 112);
    v26 = *(id *)(a1 + 64);
    v10 = objc_retainBlock(v23);
    v11 = v10;
    if (*(_BYTE *)(a1 + 112))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "idsFetchDelayTimer"));
      objc_msgSend(v12, "cancel");

      v13 = objc_alloc_init(GKContactsIntegrationTimer);
      objc_msgSend(*(id *)(a1 + 48), "setIdsFetchDelayTimer:", v13);

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "idsFetchDelayTimer"));
      v15 = dispatch_walltime(0, (uint64_t)((v7 + (double)v9) * 1000000000.0));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "idsBatchQueue"));
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100128ED0;
      v20[3] = &unk_1002C2BE8;
      objc_copyWeak(&v22, &location);
      v21 = v11;
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100128F58;
      v18[3] = &unk_1002BB540;
      v19 = *(id *)(a1 + 64);
      objc_msgSend(v14, "startWithStartTime:updateInterval:queue:updateBlock:cancelBlock:", v15, v16, v20, v18, 1.84467441e19);

      objc_destroyWeak(&v22);
    }
    else
    {
      ((void (*)(_QWORD *))v10[2])(v10);
    }

    objc_destroyWeak(&v27);
    objc_destroyWeak(&location);
  }
}

void sub_100128E44(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_100128E70(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  LOBYTE(v2) = *(_BYTE *)(a1 + 104);
  objc_msgSend(WeakRetained, "fetchIDSDataAndUpdateCacheForHandles:rangeToFetch:maxBatchSize:numberOfHandlesLeft:allowingIneligibility:settings:withDelay:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 40), v2, *(_QWORD *)(a1 + 48));

}

void sub_100128ED0(uint64_t a1)
{
  id v2;
  id WeakRetained;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_10012EE24();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_msgSend(WeakRetained, "setIdsFetchDelayTimer:", 0);

}

void sub_100128F58(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKContactsIntegrationErrorDomain, 4, 0));
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v3);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_10012EE50();

}

void sub_100129288(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  char v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "settings"));
  if ((objc_msgSend(*(id *)(a1 + 32), "isEligibleAllowingIneligibility:usingSettings:", *(_QWORD *)(a1 + 56), v2) & 1) != 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKContactsIntegrationController.m", 847, "-[GKContactsIntegrationController getRelationshipsForContacts:updateExistingContactEntries:completionHandler:]_block_invoke"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v3));

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100129404;
    v8[3] = &unk_1002C4838;
    v5 = *(void **)(a1 + 40);
    v8[4] = *(_QWORD *)(a1 + 32);
    v9 = v5;
    v6 = *(id *)(a1 + 48);
    v13 = *(_BYTE *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 56);
    v11 = v6;
    v12 = v7;
    v10 = v2;
    objc_msgSend(v4, "perform:", v8);
    objc_msgSend(v4, "wait");

  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKContactsIntegrationErrorDomain, 1, 0));
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_100129404(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  void (**v20)(_QWORD);
  id v21;
  id location;
  uint64_t v23;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactStore"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_gkMeContact"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));

  if (objc_msgSend(*(id *)(a1 + 40), "count") == (id)1
    && (v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "firstObject")),
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier")),
        v9 = objc_msgSend(v8, "isEqualToString:", v6),
        v8,
        v7,
        v9))
  {
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "relationshipForMeContact"));
    v11 = (void *)v10;
    if (v10)
    {
      v23 = v10;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v23, 1));
    }
    else
    {
      v12 = 0;
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    v3[2](v3);

  }
  else
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    v13 = *(void **)(a1 + 32);
    v14 = *(_BYTE *)(a1 + 72) != 0;
    v15 = *(_QWORD *)(a1 + 64);
    v17 = *(_QWORD *)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 48);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100129644;
    v18[3] = &unk_1002C4810;
    objc_copyWeak(&v21, &location);
    v19 = *(id *)(a1 + 56);
    v20 = v3;
    objc_msgSend(v13, "relationshipsForContacts:updateExistingContactEntries:allowingIneligibility:usingSettings:meContactID:completionHandler:", v17, v14, v15, v16, v6, v18);

    objc_destroyWeak(&v21);
    objc_destroyWeak(&location);
  }

}

void sub_100129620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100129644(uint64_t a1, void *a2, void *a3, void *a4)
{
  id *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id WeakRetained;

  v7 = (id *)(a1 + 48);
  v8 = a4;
  v9 = a3;
  v10 = a2;
  WeakRetained = objc_loadWeakRetained(v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "metricsHandler"));
  objc_msgSend(v11, "recordContactRelationshipsFromResults:", v10);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1001298B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001298D4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v2));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "contactsAssociationID"));
  v4 = objc_msgSend(v3, "length");
  if (v4)
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "internalRepresentation"));
  else
    v5 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v5);
  if (v4)

}

void sub_100129C74(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  id v38;
  id v39;
  id v40;
  id v41;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactStore"));
  v3 = *(unsigned __int8 *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_gkSyncAndCollectHandlesForContacts:updateExistingEntries:meContactID:context:", v4, v3, v5, v6));

  v8 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
  v11 = objc_msgSend(v8, "calculateRemainingIDSHandleQueryCountUsingSettings:withContext:", v9, v10);

  if (v11 && !*(_BYTE *)(a1 + 89))
  {
    v20 = *(void **)(a1 + 32);
    v21 = objc_msgSend(*(id *)(a1 + 64), "idsV2FetchSize");
    v22 = *(_QWORD *)(a1 + 64);
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "expiredIDSEntriesWithFetchLimit:matchingHandles:usingSettings:withContext:", v21, v7, v22, v23));

    if (!os_log_GKGeneral)
      v25 = (id)GKOSLoggers(v24);
    v26 = (void *)os_log_GKContacts;
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_10012F008(v26, v16);
    v27 = objc_msgSend(v16, "count");
    if (v27 >= v11)
      v28 = v11;
    else
      v28 = v27;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "subarrayWithRange:", 0, v28));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "_gkDistinctValuesForKeyPath:", CFSTR("handle")));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDContactInfoList _gkPrimaryListWithContext:](GKCDContactInfoList, "_gkPrimaryListWithContext:", v30));

    if (!os_log_GKGeneral)
      v33 = (id)GKOSLoggers(v32);
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_10012EFA4();
    objc_initWeak(&location, *(id *)(a1 + 32));
    v34 = *(void **)(a1 + 32);
    v35 = *(_QWORD *)(a1 + 80);
    v36 = *(_QWORD *)(a1 + 64);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_10012A024;
    v37[3] = &unk_1002C4888;
    objc_copyWeak(&v41, &location);
    v37[4] = *(_QWORD *)(a1 + 32);
    v38 = v7;
    v39 = *(id *)(a1 + 56);
    v40 = *(id *)(a1 + 72);
    objc_msgSend(v34, "fetchIDSDataAndUpdateCacheForHandles:allowingIneligibility:usingSettings:withDelay:completion:", v29, v35, v36, 0, v37);

    objc_destroyWeak(&v41);
    objc_destroyWeak(&location);

  }
  else
  {
    if (!os_log_GKGeneral)
      v13 = (id)GKOSLoggers(v12);
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_10012EF78();
    v14 = *(void **)(a1 + 32);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "contactAssociationIDMapForHandles:withContext:", v7, v15));

    v17 = *(void **)(a1 + 32);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "relationshipsForHandles:contactAssociationIDMap:withContext:", v7, v16, v18));

    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }

}

void sub_10012A008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012A024(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "playerProvider"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localPlayerCacheGroup"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "context"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10012A120;
  v8[3] = &unk_1002BE880;
  v6 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v6;
  v10 = *(id *)(a1 + 48);
  v11 = WeakRetained;
  v12 = v4;
  v13 = *(id *)(a1 + 56);
  v7 = v4;
  objc_msgSend(v5, "performBlock:", v8);

}

void sub_10012A120(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "context"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contactAssociationIDMapForHandles:withContext:", v3, v4));

  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(void **)(a1 + 56);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "context"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "relationshipsForHandles:contactAssociationIDMap:withContext:", v6, v5, v8));

  if (!os_log_GKGeneral)
    v11 = (id)GKOSLoggers(v10);
  v12 = (void *)os_log_GKContacts;
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_10012F0B4(v12);
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

}

id sub_10012A2E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startContactsSyncAllowingChangeHistory:completion:", 0, 0);
}

void sub_10012A35C(uint64_t a1)
{
  void *v2;
  GKContactsIntegrationTimer *v3;
  void *v4;
  void *v5;
  double v6;
  dispatch_time_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactsChangedCoalescingTimer"));
  objc_msgSend(v2, "cancel");

  v3 = objc_alloc_init(GKContactsIntegrationTimer);
  objc_msgSend(*(id *)(a1 + 32), "setContactsChangedCoalescingTimer:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactsChangedCoalescingTimer"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "settings"));
  objc_msgSend(v5, "notificationCoalescingWaitTime");
  v7 = dispatch_walltime(0, (uint64_t)(v6 * 1000000000.0));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serialQueue"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10012A4C4;
  v9[3] = &unk_1002C48D8;
  objc_copyWeak(&v10, &location);
  objc_msgSend(v4, "startWithStartTime:updateInterval:queue:updateBlock:cancelBlock:", v7, v8, v9, 0, 1.84467441e19);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_10012A4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012A4C4(uint64_t a1)
{
  id v2;
  id WeakRetained;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_10012F17C();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "startContactsSyncAllowingChangeHistory:completion:", 1, 0);
  objc_msgSend(WeakRetained, "setContactsChangedCoalescingTimer:", 0);

}

void sub_10012A5E4(uint64_t a1)
{
  void *v2;
  GKContactsIntegrationTimer *v3;
  void *v4;
  void *v5;
  double v6;
  dispatch_time_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "reachabilityChangedCoalescingTimer"));
  objc_msgSend(v2, "cancel");

  v3 = objc_alloc_init(GKContactsIntegrationTimer);
  objc_msgSend(*(id *)(a1 + 32), "setReachabilityChangedCoalescingTimer:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "reachabilityChangedCoalescingTimer"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "settings"));
  objc_msgSend(v5, "notificationCoalescingWaitTime");
  v7 = dispatch_walltime(0, (uint64_t)(v6 * 1000000000.0));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serialQueue"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10012A760;
  v9[3] = &unk_1002C3A30;
  objc_copyWeak(&v11, &location);
  v10 = *(id *)(a1 + 40);
  objc_msgSend(v4, "startWithStartTime:updateInterval:queue:updateBlock:cancelBlock:", v7, v8, v9, 0, 1.84467441e19);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);
}

void sub_10012A73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012A760(uint64_t a1)
{
  id v2;
  id WeakRetained;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_10012F1A8();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "object"));
  v6 = objc_opt_class(GKReachability, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0 && objc_msgSend(v4, "_gkCurrentReachabilityStatus"))
    objc_msgSend(WeakRetained, "handleReachabilityChanged");
  objc_msgSend(WeakRetained, "setContactsChangedCoalescingTimer:", 0);

}

void sub_10012A90C(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v7 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v1));

  if ((objc_msgSend(v7, "expired") & 1) == 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "contactsAssociationID"));
    v5 = objc_msgSend(v7, "contactsIntegrationConsent");
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "serviceLastUpdatedTimestamp"));
    objc_msgSend(v3, "setContactAssociationID:contactIntegrationConsent:serviceLastUpdateTimestamp:forEnvironment:forcefully:completionHandler:", v4, v5, v6, objc_msgSend(v2, "environment"), 0, &stru_1002C48F8);

  }
}

void sub_10012AA0C(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  id v4;

  v2 = a2;
  v3 = v2;
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v2);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_10012F200();

}

void sub_10012AB74(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  _BOOL8 v9;
  id v10;
  id v11;
  GKContactsIntegrationControllerSettings *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
    if (v9)
      sub_10012F320();
    if (!os_log_GKGeneral)
      v10 = (id)GKOSLoggers(v9);
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_10012F2BC();
  }
  else if (!objc_msgSend(v5, "count"))
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10012F290();
  }
  v12 = -[GKContactsIntegrationControllerSettings initWithBagValues:]([GKContactsIntegrationControllerSettings alloc], "initWithBagValues:", v5);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "settings"));
  objc_msgSend(v13, "idsUpdateInterval");
  v15 = v14;
  -[GKContactsIntegrationControllerSettings idsUpdateInterval](v12, "idsUpdateInterval");
  v17 = v16;

  objc_msgSend(*(id *)(a1 + 32), "setSettings:", v12);
  if ((objc_msgSend(*(id *)(a1 + 32), "isEligibleAllowingIneligibility:usingSettings:", 0, v12) & 1) != 0)
  {
    if (v15 == v17
      || (v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsCacheUpdateTimer")),
          v18,
          !v18))
    {
      objc_msgSend(*(id *)(a1 + 32), "startContactsSyncAllowingChangeHistory:completion:", 0, 0);
    }
    else
    {
      v19 = *(void **)(a1 + 32);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "settings"));
      objc_msgSend(v20, "idsUpdateInterval");
      objc_msgSend(v19, "setupIDSCacheUpdateTimerWithStartTime:");

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "stopCacheUpdates");
  }

}

void sub_10012B060(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id *v9;
  id *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id location;

  if ((objc_msgSend(*(id *)(a1 + 32), "canSyncWithIDS") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKContactsIntegrationController.m", 1143, "-[GKContactsIntegrationController startIDSSyncWithCompletion:]_block_invoke"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v2));
    objc_msgSend(*(id *)(a1 + 32), "setIdsUpdateGroup:", v3);

    objc_initWeak(&location, *(id *)(a1 + 32));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactsUpdateGroup"));

    v5 = *(void **)(a1 + 32);
    if (v4)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "idsUpdateGroup"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactsUpdateGroup"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serialQueue"));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10012B298;
      v14[3] = &unk_1002C2BE8;
      v9 = &v16;
      objc_copyWeak(&v16, &location);
      v15 = *(id *)(a1 + 40);
      objc_msgSend(v6, "join:queue:block:", v7, v8, v14);
      v10 = &v15;

    }
    else
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "idsUpdateGroup"));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10012B3D4;
      v11[3] = &unk_1002C4948;
      v9 = &v13;
      objc_copyWeak(&v13, &location);
      v12 = *(id *)(a1 + 40);
      objc_msgSend(v6, "perform:", v11);
      v10 = &v12;
    }

    objc_destroyWeak(v9);
    objc_destroyWeak(&location);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

void sub_10012B270(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10012B298(uint64_t a1)
{
  id WeakRetained;
  _QWORD v3[5];
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10012B31C;
  v3[3] = &unk_1002BB758;
  v3[4] = WeakRetained;
  v4 = *(id *)(a1 + 32);
  objc_msgSend(WeakRetained, "refetchIDSHandlesInPriorityOrderWithCompletion:", v3);

}

void sub_10012B31C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD v4[5];
  id v5;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serialQueue"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10012B3A4;
  v4[3] = &unk_1002BB758;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  dispatch_async(v2, v4);

}

uint64_t sub_10012B3A4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setIdsUpdateGroup:", 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10012B3D4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[5];
  id v7;
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10012B47C;
  v6[3] = &unk_1002C1FB8;
  v6[4] = WeakRetained;
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(WeakRetained, "refetchIDSHandlesInPriorityOrderWithCompletion:", v6);

}

void sub_10012B47C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD block[5];
  id v5;
  id v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serialQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10012B518;
  block[3] = &unk_1002C1FB8;
  v3 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  v6 = *(id *)(a1 + 48);
  dispatch_async(v2, block);

}

uint64_t sub_10012B518(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setIdsUpdateGroup:", 0);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

id sub_10012B608(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "stopCacheUpdates");
}

void sub_10012B8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012B8E8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  id location;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(WeakRetained);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_10012F468();
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKContactsIntegrationController.m", 1202, "-[GKContactsIntegrationController setupIDSCacheUpdateTimerWithStartTime:]_block_invoke"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v5));
  objc_msgSend(*(id *)(a1 + 32), "setIdsUpdateGroup:", v6);

  objc_initWeak(&location, *(id *)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsUpdateGroup"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10012BB14;
  v12[3] = &unk_1002C4970;
  objc_copyWeak(&v13, &location);
  objc_msgSend(v7, "perform:", v12);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsUpdateGroup"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serialQueue"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10012BB5C;
  v10[3] = &unk_1002C48D8;
  objc_copyWeak(&v11, &location);
  objc_msgSend(v8, "notifyOnQueue:block:", v9, v10);

  objc_msgSend(v3, "setIdsCacheUpdateTimer:", 0);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);

}

void sub_10012BAD8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_10012BB14(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "refetchIDSHandlesInPriorityOrderWithCompletion:", v3);

}

void sub_10012BB5C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setIdsUpdateGroup:", 0);

}

void sub_10012BB8C(id a1)
{
  id v1;

  if (!os_log_GKGeneral)
    v1 = (id)GKOSLoggers(a1);
  if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
    sub_10012F494();
}

id sub_10012BDB8(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsFetchDelayTimer"));
  objc_msgSend(v2, "cancel");

  return objc_msgSend(*(id *)(a1 + 32), "setIdsFetchDelayTimer:", 0);
}

void sub_10012BF18(uint64_t a1, void *a2)
{
  void *v2;
  void (**v3)(void);

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "stopCacheUpdates");
  v3[2]();

}

void sub_10012BF5C(id a1, NSManagedObjectContext *a2, id a3)
{
  NSManagedObjectContext *v4;
  void (**v5)(void);

  v5 = (void (**)(void))a3;
  v4 = a2;
  -[NSManagedObjectContext _gkClearAllEntriesOfEntity:](v4, "_gkClearAllEntriesOfEntity:", CFSTR("ContactInfo"));
  -[NSManagedObjectContext _gkClearAllEntriesOfEntity:](v4, "_gkClearAllEntriesOfEntity:", CFSTR("ContactInfoList"));
  -[NSManagedObjectContext _gkClearAllEntriesOfEntity:](v4, "_gkClearAllEntriesOfEntity:", CFSTR("IDSInfo"));
  -[NSManagedObjectContext _gkClearAllEntriesOfEntity:](v4, "_gkClearAllEntriesOfEntity:", CFSTR("IDSInfoList"));

  v5[2]();
}

uint64_t sub_10012BFE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10012C8A8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  void (**v7)(void);

  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = a3;
  objc_msgSend(v5, "populateContactInfoForProfiles:withContext:", v6, a2);
  dispatch_async(*(dispatch_queue_t *)(a1 + 48), *(dispatch_block_t *)(a1 + 56));
  v7[2]();

}

id sub_10012D454(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startContactsSyncAllowingChangeHistory:completion:", 0, 0);
}

void sub_10012E314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012E340(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_10012F9F8((uint64_t)a1, v6, (uint64_t)v4);
    objc_msgSend(a1[5], "setError:", v4);
    objc_msgSend(a1[5], "leave");
  }
  else
  {
    WeakRetained = objc_loadWeakRetained(a1 + 6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "playerProvider"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localPlayerCacheGroup"));

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10012E478;
    v10[3] = &unk_1002BB850;
    v11 = a1[4];
    v12 = a1[5];
    objc_msgSend(v9, "performOnManagedObjectContext:", v10);

  }
}

void sub_10012E478(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void (**v22)(_QWORD);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v22 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKCDIDSInfo _gkObjectsMatchingHandles:withContext:](GKCDIDSInfo, "_gkObjectsMatchingHandles:withContext:", *(_QWORD *)(a1 + 32), a2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v8 = v5;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v24;
    while (2)
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "handle"));

        if (!v14)
        {
          if (!os_log_GKGeneral)
            v20 = (id)GKOSLoggers(v15);
          if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
            sub_10012FA90();
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", GKContactsIntegrationErrorDomain, 8, 0));
          objc_msgSend(*(id *)(a1 + 40), "setError:", v21);

          goto LABEL_18;
        }
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "supportsMessageTransportV2"));
        v17 = objc_msgSend(v16, "integerValue");

        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "handle"));
        if (v17 == (id)1)
          v19 = v6;
        else
          v19 = v7;
        objc_msgSend(v19, "addObject:", v18);

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      if (v10)
        continue;
      break;
    }
  }
LABEL_18:

  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v6, CFSTR("availablePlayerHandles"));
  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v7, CFSTR("unavailablePlayerHandles"));
  objc_msgSend(*(id *)(a1 + 40), "leave");
  v22[2](v22);

}

id sub_10012E6E0()
{
  void *v0;

  return objc_msgSend(v0, "count");
}

uint64_t sub_10012E6EC()
{
  uint64_t v0;

  return v0;
}

void sub_10012E6F8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void sub_10012E708()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Will not perform contacts sync due to eligibility state", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012E734()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Syncing contacts", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012E760()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Will not perform contacts sync since a change history token exists", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012E78C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Contacts sync already in progress, skipping.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012E7B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "IDS refetch beginning", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012E7E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "We have already synced the max count of handles for IDS during this interval. Skipping.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012E810()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "No additional IDS handles to query. Stopping any existing timers.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012E83C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Attempting to setup a timer but we don't have a current interval start time.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012E868()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "No longer eligible for cache updates, will not setup timer.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012E894()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Will not fetch handles for contact since cache updates are busy or IDS limit breached.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012E8C0(void *a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v3, v5, "IDS limit reached, limiting fetch size to: %@", v6);

  sub_1000279A0();
}

void sub_10012E960(void *a1)
{
  NSObject *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = a1;
  sub_10012E6E0();
  v3 = objc_msgSend((id)sub_10012E6EC(), "numberWithUnsignedInteger:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v1, v5, "None expired handles excluded, fetch count: %@", v6);

  sub_1000279A0();
}

void sub_10012E9FC(void *a1)
{
  NSObject *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = a1;
  sub_10012E6E0();
  v3 = objc_msgSend((id)sub_10012E6EC(), "numberWithUnsignedInteger:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v1, v5, "Existing matching entries count: %@", v6);

  sub_1000279A0();
}

void sub_10012EA98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Timeout waiting for handle sync to complete.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EAC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Will not fetch handles with IDS since batch size is currently 0", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EAF0(void *a1)
{
  NSObject *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = a1;
  sub_10012E6E0();
  v3 = objc_msgSend((id)sub_10012E6EC(), "numberWithUnsignedInteger:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v1, v5, "Beginning fetches with IDS with a handle count of: %@", v6);

  sub_1000279A0();
}

void sub_10012EB8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "IDS fetching stopping since we have reached the of end of all batches", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EBB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "No results found for IDS request.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EBE4(void *a1)
{
  NSObject *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = a1;
  sub_10012E6E0();
  v3 = objc_msgSend((id)sub_10012E6EC(), "numberWithUnsignedInteger:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v1, v5, "Will handle updating batch results with count: %@", v6);

  sub_1000279A0();
}

void sub_10012EC80()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "IDS fetch error: %@", v2);
  sub_100016C20();
}

void sub_10012ECE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Error retrieving batch of IDS results", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012ED10()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "Updated with results: %@", v2);
  sub_100016C20();
}

void sub_10012ED74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Not all fetched IDS entries match what is cached.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EDA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Eligibility changed while performing a batch update interval. Will not continue.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EDCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "No contact list currently exist. Likely due to a clear cache event. Stopping.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EDF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Created a new GKCDIDSInfo entry as part of the fetching process.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EE24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "IDS delay timer firing.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EE50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "IDS delay timer stopped.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EE7C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10012E6F8((void *)&_mh_execute_header, a2, a3, "Getting relationships for contact with updateExistingContactEntries: %d", a5, a6, a7, a8, 0);
  sub_100027A04();
}

void sub_10012EEE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Loading relationships for the me contact", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EF10(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10012E6F8((void *)&_mh_execute_header, a2, a3, "Proceeding to relationships for contact with updateExistingContactEntries: %d", a5, a6, a7, a8, 0);
  sub_100027A04();
}

void sub_10012EF78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Will not fetch handles for contact since cache updates are busy or IDS limit breached", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012EFA4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "Currently cached contact list created if one didn't exist. %@", v2);
  sub_100016C20();
}

void sub_10012F008(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a2, "count")));
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v3, v5, "Expired handle count for contact: %@", v6);

  sub_1000279A0();
}

void sub_10012F0B4(void *a1)
{
  NSObject *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = a1;
  sub_10012E6E0();
  v3 = objc_msgSend((id)sub_10012E6EC(), "numberWithUnsignedInteger:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v1, v5, "Found relationship with count: %@", v6);

  sub_1000279A0();
}

void sub_10012F150()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Received player authenticated changed notification.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F17C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Firing contacts changed coalescing timer.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F1A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Firing reachability changed coalescing timer.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F1D4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Handling reachability notification", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F200()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "Attempted to update contacts integration info credentials as part of reachability. error: %@", v2);
  sub_100016C20();
}

void sub_10012F264()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "No store bag found after receiving update notification.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F290()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "No values found while retrieving bag key values for contacts integration", v2, v3, v4, v5, v6);
  sub_100027A04();
}

