void sub_10012F2BC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "Bag fetch error: %@", v2);
  sub_100016C20();
}

void sub_10012F320()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Error retrieving bag key values for contacts integration", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F34C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Cache update timer already setup, will not trigger another update now.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F378()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Cache updates already in progress, skipping.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F3A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Will begin cache updates.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F3D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Will stop cache updates.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F3FC(NSObject *a1, double a2, uint64_t a3, uint64_t a4)
{
  int v4;
  double v5;

  v4 = 134217984;
  v5 = a2;
  sub_100027A34((void *)&_mh_execute_header, a1, a4, "Setting up a one time IDS timer with startTime: %f", (uint8_t *)&v4);
  sub_100016C20();
}

void sub_10012F468()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "IDS timer is firing", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F494()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "IDS timer stopped", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F4C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "No contact association IDs were provided.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F4EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "No friends found matching the provided contact associationIDs", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F518()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "No profiles found matching the provided friend IDs", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F544()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Attempting to populate contact info without any profiles.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F570()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Attempting to populate contact info for the local player. Skipping.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F59C(void *a1)
{
  NSObject *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = a1;
  sub_10012E6E0();
  v3 = objc_msgSend((id)sub_10012E6EC(), "numberWithUnsignedInteger:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v1, v5, "Will attempt to populate contact info for %@ profiles", v6);

  sub_1000279A0();
}

void sub_10012F638()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Will not populate profiles since the feature is not supported.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F664()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "No contacts found matching the provided contact IDs.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F690()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "Will not filter handles since the feature is not supported.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F6BC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "Received callback that connection manager is ready: %@", v2);
  sub_100016C20();
}

void sub_10012F720()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "No old friend entries to check against, will not update new friends list.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F74C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_1000279BC((void *)&_mh_execute_header, v0, v1, "No contact association IDs to clear, skipping.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F778()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "Batch delete error: %@", v2);
  sub_100016C20();
}

void sub_10012F7DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Failed to remove existing contacts entries.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F808()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000279B0();
  sub_100027A34((void *)&_mh_execute_header, v0, v1, "Will clear the following contact association IDs: %@", v2);
  sub_100016C20();
}

void sub_10012F86C(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;

  v5 = a1;
  objc_msgSend(a2, "count");
  v6 = objc_msgSend((id)sub_10012E6EC(), "numberWithUnsignedInteger:");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a3, "count")));
  v10 = 138412546;
  v11 = v7;
  v12 = 2112;
  v13 = v8;
  sub_100027A70((void *)&_mh_execute_header, v5, v9, "Failed to convert unprefixedHandles(count: %@) to ids handles(converted: %@).", (uint8_t *)&v10);

}

void sub_10012F960(void *a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412546;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(_QWORD *)(buf + 14) = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Done waiting for message v2 query. Available handles: %@, Unavailable handles: %@", buf, 0x16u);

}

void sub_10012F9CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Timeout waiting for handle fetch to complete.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10012F9F8(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t v7[12];
  __int16 v8;
  uint64_t v9;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  objc_msgSend(v4, "count");
  sub_1000279B0();
  v8 = 2112;
  v9 = a3;
  sub_100027A70((void *)&_mh_execute_header, v5, v6, "Failed to sync %lu handles due to %@", v7);

  sub_1000279A0();
}

void sub_10012FA90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Corrupted contact found in cache.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100130350(void *a1, void *a2)
{
  NSObject *v3;
  int v4;
  id v5;

  v3 = a1;
  v4 = 134217984;
  v5 = objc_msgSend(a2, "status");
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Unrecognized IDS status value: %ld", (uint8_t *)&v4, 0xCu);

}

void sub_1001303E8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "Received unrecognized IDS status", a5, a6, a7, a8, 0);
}

void sub_10013041C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "Received an unrecognized consent value from IDS.", a5, a6, a7, a8, 0);
}

void sub_1001308D4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v5 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10013095C;
  v7[3] = &unk_1002BB540;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v5, "beginTransaction:completion:", v4, v7);

}

uint64_t sub_10013095C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1001310F0(uint64_t a1)
{
  void *v2;
  id v3;
  GKContactsChangedClearCommand *v4;

  v4 = objc_alloc_init(GKContactsChangedClearCommand);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
  v3 = -[GKContactsChangedClearCommand executeWithContext:](v4, "executeWithContext:", v2);

}

void sub_100131458(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  GKContactsChangedAddOrUpdateCommand *v8;
  GKContactsChangedAddOrUpdateCommand *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v16;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v16 != v5)
        objc_enumerationMutation(v2);
      v7 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v6);
      v8 = [GKContactsChangedAddOrUpdateCommand alloc];
      v9 = -[GKContactsChangedAddOrUpdateCommand initWithContact:meContactID:](v8, "initWithContact:meContactID:", v7, *(_QWORD *)(a1 + 40), (_QWORD)v15);
      v10 = *(void **)(a1 + 48);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
      objc_msgSend(v10, "addCommand:withContext:", v9, v11);

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "error"));
      if (v12)
        break;
      if (v4 == (id)++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:

    v13 = *(void **)(a1 + 48);
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "context"));
    v14 = objc_msgSend(v13, "executeCommandsWithContext:", v2);
  }

}

void sub_100131934(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_100131948()
{
  uint64_t v0;
  os_log_t v1;

  sub_100016C38();
  sub_100131934((void *)&_mh_execute_header, v0, v1, "Will perform full sync due to fetch count result: %@, error: %@");
  sub_100016C20();
}

void sub_1001319A8()
{
  uint64_t v0;
  os_log_t v1;

  sub_100016C38();
  sub_100131934((void *)&_mh_execute_header, v0, v1, "Will not perform sync due to change history result: %@, error: %@");
  sub_100016C20();
}

void sub_100131A08(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100034EE4((void *)&_mh_execute_header, a2, a3, "Me contact error: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_100131A6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Error retrieving me contact for contact integration", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100131A98(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100034EE4((void *)&_mh_execute_header, a2, a3, "Contacts enumeration error: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_100131AFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Error retrieving contacts for contact integration", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100131B28()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100027A0C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "No contactIDs to sync during this batch, skipping.", v1, 2u);
  sub_100027A04();
}

void sub_100131B60()
{
  uint64_t v0;
  os_log_t v1;

  sub_100016C38();
  sub_100131934((void *)&_mh_execute_header, v0, v1, "Enumerator fetch failed with result: %@, error: %@");
  sub_100016C20();
}

void sub_100131BC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Error retrieving enumerator for contact fetch request", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100131BEC(uint8_t *a1, void *a2, void *a3, _QWORD *a4)
{
  NSObject *v7;
  void *v8;

  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "identifier"));
  *(_DWORD *)a1 = 138412290;
  *a4 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Manually grabbing the handles in memory since can be cached for the contact identifier: %@", a1, 0xCu);

}

void sub_10013209C(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[13];

  v3[0] = CFSTR("gk-contactid-ids-update-interval-sec");
  v3[1] = CFSTR("gk-contactid-ids-v2-batch-fetch-size");
  v3[2] = CFSTR("gk-contactid-local-batch-fetch-size");
  v3[3] = CFSTR("gk-contactid-ids-v2-fetch-size");
  v3[4] = CFSTR("gk-contactid-ids-expiration-opted-in-sec");
  v3[5] = CFSTR("gk-contactid-ids-expiration-opted-out-sec");
  v3[6] = CFSTR("gk-contactid-ids-expiration-not-set-sec");
  v3[7] = CFSTR("gk-contactid-ids-expiration-unknown-sec");
  v3[8] = CFSTR("gk-contactid-allow-updates");
  v3[9] = CFSTR("gk-contactid-ids-v2-batch-fetch-delay-sec");
  v3[10] = CFSTR("gk-contactid-ids-v2-batch-fetch-jitter-sec");
  v3[11] = CFSTR("gk-contactid-local-sync-limit");
  v3[12] = CFSTR("gk-contactid-allow-updates-without-friends");
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 13));
  v2 = (void *)qword_100318118;
  qword_100318118 = v1;

}

void sub_100132D18(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contactsController"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100132DC8;
  v7[3] = &unk_1002BCD68;
  v5 = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "getRelationshipsForContacts:updateExistingContactEntries:completionHandler:", v5, 0, v7);

}

void sub_100132DC8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  id v7;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "setObject:forKeyedSubscript:", a2, CFSTR("relationships"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, CFSTR("contactAssociationIDMap"));

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

id sub_100132E50(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "handle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lowercaseString"));

  if (objc_msgSend(v5, "length") && objc_msgSend(*(id *)(a1 + 32), "containsObject:", v5))
    v6 = v3;
  else
    v6 = 0;

  return v6;
}

void sub_1001331C8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Received error attempting to get relationships for suggestions: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1001332E8(id a1)
{
  _TtC14GameDaemonCore10GKLRUCache *v1;
  void *v2;

  v1 = -[GKLRUCache initWithCapacity:]([_TtC14GameDaemonCore10GKLRUCache alloc], "initWithCapacity:", 3);
  v2 = (void *)qword_100318128;
  qword_100318128 = (uint64_t)v1;

}

void sub_1001337F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_100133810()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100133804();
  sub_1001337F4((void *)&_mh_execute_header, v0, v1, "Error %d when calling csops_audittoken to determine the application's ops status.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100133870()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100133804();
  sub_1001337F4((void *)&_mh_execute_header, v0, v1, "Error %d when calling csops_audittoken to determine the application's signing status.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_1001338D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100133804();
  sub_10012E6F8((void *)&_mh_execute_header, v0, v1, "Cache miss for signing status for pid-> %d", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_100133930()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100133804();
  sub_10012E6F8((void *)&_mh_execute_header, v0, v1, "Cache hit for signing status for pid-> %d", v2, v3, v4, v5, v6);
  sub_100027A04();
}

uint64_t sub_100133AE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100133AEC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100133CA8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Resetting cached IDS list", v1, 2u);
}

void sub_100133F88(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Contacts integration ineligible for reasons: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100134510(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error writing new local player avatar image (%@) to image cache: %@", (uint8_t *)&v3, 0x16u);
}

void sub_100134594(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "error while creating cache directory:%@", (uint8_t *)&v2, 0xCu);
}

void sub_100134648(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.GameKit.GKBulletin.sync", v4);
  v3 = (void *)qword_100318138;
  qword_100318138 = (uint64_t)v2;

}

void sub_100134834(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[37];
  _QWORD v4[37];

  v3[0] = &off_1002DBA00;
  v4[0] = objc_opt_class(GKRealTimeMultiplayerInitiateBulletin);
  v3[1] = &off_1002DBA18;
  v4[1] = objc_opt_class(GKRealTimeMultiplayerAcceptBulletin);
  v3[2] = &off_1002DBA30;
  v4[2] = objc_opt_class(GKRealTimeMultiplayerDeclineBulletin);
  v3[3] = &off_1002DBA48;
  v4[3] = objc_opt_class(GKRealTimeMultiplayerCancelBulletin);
  v3[4] = &off_1002DBA60;
  v4[4] = objc_opt_class(GKRelayBulletin);
  v3[5] = &off_1002DBA78;
  v4[5] = objc_opt_class(GKRelayBulletin);
  v3[6] = &off_1002DBA90;
  v4[6] = objc_opt_class(GKRelayBulletin);
  v3[7] = &off_1002DBAA8;
  v4[7] = objc_opt_class(GKRealTimeMultiplayerSendBulletin);
  v3[8] = &off_1002DBAC0;
  v4[8] = objc_opt_class(GKRealTimeMultiplayerInitiateBulletin);
  v3[9] = &off_1002DBAD8;
  v4[9] = objc_opt_class(GKMatchmakerBulletin);
  v3[10] = &off_1002DBAF0;
  v4[10] = objc_opt_class(GKProfileUpdateBulletin);
  v3[11] = &off_1002DBB08;
  v4[11] = objc_opt_class(GKGenericBulletin);
  v3[12] = &off_1002DBB20;
  v4[12] = objc_opt_class(GKSystemBulletin);
  v3[13] = &off_1002DBB38;
  v4[13] = objc_opt_class(GKSystemBulletin);
  v3[14] = &off_1002DBB50;
  v4[14] = objc_opt_class(GKFriendBulletin);
  v3[15] = &off_1002DBB68;
  v4[15] = objc_opt_class(GKTurnBasedMultiplayerInviteBulletin);
  v3[16] = &off_1002DBB80;
  v4[16] = objc_opt_class(GKTurnBasedMultiplayerTurnBulletin);
  v3[17] = &off_1002DBB98;
  v4[17] = objc_opt_class(GKTurnBasedMultiplayerCompletedBulletin);
  v3[18] = &off_1002DBBB0;
  v4[18] = objc_opt_class(GKTurnBasedMultiplayerTurnCountBulletin);
  v3[19] = &off_1002DBBC8;
  v4[19] = objc_opt_class(GKTurnBasedMultiplayerClearBulletin);
  v3[20] = &off_1002DBBE0;
  v4[20] = objc_opt_class(GKTurnBasedMultiplayerMatchChangedBulletin);
  v3[21] = &off_1002DBBF8;
  v4[21] = objc_opt_class(GKTurnBasedMultiplayerRequestedExchangeBulletin);
  v3[22] = &off_1002DBC10;
  v4[22] = objc_opt_class(GKTurnBasedMultiplayerCompletedExchangeBulletin);
  v3[23] = &off_1002DBC28;
  v4[23] = objc_opt_class(GKTurnBasedMultiplayerCanceledExchangeBulletin);
  v3[24] = &off_1002DBC40;
  v4[24] = objc_opt_class(GKTurnBasedMultiplayerTurnReminderBulletin);
  v3[25] = &off_1002DBC58;
  v4[25] = objc_opt_class(GKChallengeReceivedBulletin);
  v3[26] = &off_1002DBC70;
  v4[26] = objc_opt_class(GKChallengeCompletedBulletin);
  v3[27] = &off_1002DBC88;
  v4[27] = objc_opt_class(GKSessionInviteBulletin);
  v3[28] = &off_1002DBCA0;
  v4[28] = objc_opt_class(GKSessionMessageBulletin);
  v3[29] = &off_1002DBCB8;
  v4[29] = objc_opt_class(GKSystemBulletin);
  v3[30] = &off_1002DBCD0;
  v4[30] = objc_opt_class(GKSystemBulletin);
  v3[31] = &off_1002DBCE8;
  v4[31] = objc_opt_class(GKSystemBulletin);
  v3[32] = &off_1002DBD00;
  v4[32] = objc_opt_class(GKActivityFeedBulletin);
  v3[33] = &off_1002DBD18;
  v4[33] = objc_opt_class(GKContactsIntegrationBulletin);
  v3[34] = &off_1002DBD30;
  v4[34] = objc_opt_class(GKLeaderboardChallengeBulletin);
  v3[35] = &off_1002DBD48;
  v4[35] = objc_opt_class(GKTTRInitiationBulletin);
  v3[36] = &off_1002DBD60;
  v4[36] = objc_opt_class(GKTTRUploadRequestBulletin);
  v1 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 37));
  v2 = (void *)qword_100318148;
  qword_100318148 = v1;

}

void sub_100135A98(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  const __CFString *v6;
  void *v7;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v6 = CFSTR("targetId");
    v7 = a2;
    v4 = a2;
    v5 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
    objc_msgSend(v2, "reportMetricsForActionID:withAdditionalFields:", v3, v5);

  }
  else
  {
    v5 = 0;
    objc_msgSend(v2, "reportMetricsForActionID:withAdditionalFields:", v3, 0);
  }

}

void sub_100135F98(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void (*v13)(void);

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v7)
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v9);
    v12 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100136B48(v12, v7);
    v13 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  else
  {
    v13 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  v13();

}

void sub_1001369C8(void *a1, uint64_t a2, const char *a3)
{
  NSObject *v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSString *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;

  v5 = a1;
  v7 = (void *)objc_opt_class(a2, v6);
  v8 = v7;
  v9 = NSStringFromSelector(a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = 138412546;
  v12 = v7;
  v13 = 2112;
  v14 = v10;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@ doesn't implement %@; Will not load or process information in the bulletin",
    (uint8_t *)&v11,
    0x16u);

}

void sub_100136A9C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_100071E74((void *)&_mh_execute_header, a2, a3, "Error: No Action: %@", (uint8_t *)&v3);
}

void sub_100136B08(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Could not launch trampoline, action.appLaunchTrampolineURL is unexpectedly nil.", v1, 2u);
}

void sub_100136B48(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  v6 = 138412290;
  v7 = v4;
  sub_100071E74((void *)&_mh_execute_header, v3, v5, "invokeASCAppLaunchTrampoline failed with error: %@", (uint8_t *)&v6);

}

void sub_1001376B8(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  void *v9;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "adamID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "bundleID"));
  v6 = 138412546;
  v7 = v4;
  v8 = 2112;
  v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Could not create appLaunchTrampolineURL with adamID: %@, bundleID: %@", (uint8_t *)&v6, 0x16u);

}

void sub_100137C7C(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  id v6;
  void *v7;
  id v8;

  v5 = a3;
  v6 = a2;
  v8 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", v6));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "playerID"));
  +[GKCachingUtils ensureGameInGamesPlayed:playerID:bundleID:gameDescriptor:updateWidget:](GKCachingUtils, "ensureGameInGamesPlayed:playerID:bundleID:gameDescriptor:updateWidget:", v6, v7, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 1);

  v5[2](v5);
}

void sub_100137D28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", GKCacheInvialidationKey));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    v11 = GKCacheInvialidationStoreBagKey;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v12), "objectForKey:", v11));
        +[GKSystemBulletin expireCachesForBagKey:payload:context:group:](GKSystemBulletin, "expireCachesForBagKey:payload:context:group:", v13, *(_QWORD *)(a1 + 32), v5, *(_QWORD *)(a1 + 40));

        v12 = (char *)v12 + 1;
      }
      while (v9 != v12);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }
  v6[2](v6);

}

void sub_100137E90(_QWORD *a1, void *a2, void *a3)
{
  uint64_t v5;
  void (**v6)(_QWORD);
  id v7;
  uint64_t v8;
  void *v9;
  id v10;

  v5 = a1[4];
  v6 = a3;
  v7 = a2;
  v10 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v5, v7));
  +[GKSystemBulletin expireFriendCodeDetails:payload:context:](GKSystemBulletin, "expireFriendCodeDetails:payload:context:", a1[5], a1[6], v7);

  v8 = a1[6];
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "alias"));
  +[GKSystemBulletin presentGameCenterInviteUpdate:playerAlias:](GKSystemBulletin, "presentGameCenterInviteUpdate:playerAlias:", v8, v9);

  v6[2](v6);
}

void sub_100138C88(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v5 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100138D24;
  v7[3] = &unk_1002BB6E8;
  v8 = v4;
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "clearEntityCacheForBagKey:completionHandler:", v8, v7);

}

void sub_100138D24(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = os_log_GKCache;
    if (os_log_type_enabled(os_log_GKCache, OS_LOG_TYPE_DEBUG))
      sub_10013A5BC(a1, (uint64_t)v4, v6);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100139438(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKBulletinService, "serviceWithTransport:forClient:localPlayer:", 0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  objc_msgSend(v1, "sendRefreshContentsForDataTypeToAllClientProxy:", 2);

}

void sub_1001396B0(uint64_t a1)
{
  _QWORD v1[4];
  id v2;

  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_100139724;
  v1[3] = &unk_1002BB918;
  v2 = *(id *)(a1 + 32);
  +[GKClientProxy enumerateClientsUsingBlock:](GKClientProxy, "enumerateClientsUsingBlock:", v1);

}

void sub_100139724(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "relayPushNotification:", v3);
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentMatchResponse"));

  v5 = v9;
  if (v9)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "relayPushes"));
    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "relayPushes"));
      v8 = objc_msgSend(v7, "mutableCopy");

    }
    else
    {
      v8 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 0);
    }

    objc_msgSend(v8, "addObject:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v9, "setRelayPushes:", v8);

    v5 = v9;
  }

}

void sub_1001399A8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (**v6)(_QWORD);
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject playerProfileWithPlayerID:inManagedObjectContext:](GKPlayerProfileCacheObject, "playerProfileWithPlayerID:inManagedObjectContext:", v5, v7));
  objc_msgSend(v8, "expire");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileService, "serviceWithTransport:forClient:localPlayer:", 0, v9, 0));
  v12 = *(_QWORD *)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
  objc_msgSend(v10, "getProfilesForPlayerIDs:handler:", v11, &stru_1002C4C10);

  +[GKSystemBulletin expireGetPerGameFriendPlayerIDsCache:payload:context:](GKSystemBulletin, "expireGetPerGameFriendPlayerIDsCache:payload:context:", 0, *(_QWORD *)(a1 + 40), v7);
  v6[2](v6);

}

void sub_100139AF8(id a1, NSArray *a2, NSError *a3)
{
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(-[NSArray _gkMapDictionaryWithKeyPath:](a2, "_gkMapDictionaryWithKeyPath:", CFSTR("playerID")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy foregroundClient](GKClientProxy, "foregroundClient"));
  objc_msgSend(v3, "refreshContentsForDataType:userInfo:", 6, v4);

}

void sub_100139F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100139F7C(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "currentMatchResponse"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "rid"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "matchID"));
  v8 = objc_msgSend(v6, "isEqualToString:", v7);

  if (v8)
  {
    objc_msgSend(v9, "checkMatchStatus");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }

}

void sub_10013A4D4(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid system push (%d)", (uint8_t *)v2, 8u);
}

void sub_10013A548(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Expiring caches for store bag key %@", (uint8_t *)&v2, 0xCu);
}

void sub_10013A5BC(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Failed to clear entity cache for bagKey: %@, error: %@", (uint8_t *)&v4, 0x16u);
}

void sub_10013A644(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Profile Update Push Notification has no player.", v1, 2u);
}

void sub_10013AD68(id a1, GKClientProxy *a2, BOOL *a3)
{
  void *v3;
  void *v4;
  GKClientProxy *v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[GKClientProxy originalBundleIdentifier](v5, "originalBundleIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_gkSHA256Hash"));

  if (objc_msgSend(v4, "isEqual:", CFSTR("BKN3YPrkowJshOfzYN9kxtu/zEFYrAWOeXV3rzu9h1k=")))
    -[GKClientProxy refreshContentsForDataType:userInfo:](v5, "refreshContentsForDataType:userInfo:", 20, 0);

}

void sub_10013C8D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  id v13;
  id v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dictionaryForRequest"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKMultiplayerMatchService, "serviceWithTransport:forClient:localPlayer:", 0, *(_QWORD *)(a1 + 40), 0));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10013C9CC;
  v10[3] = &unk_1002C1010;
  v7 = *(_QWORD *)(a1 + 32);
  v11 = v5;
  v12 = v7;
  v13 = *(id *)(a1 + 48);
  v14 = v3;
  v8 = v3;
  v9 = v5;
  objc_msgSend(v6, "getCompatibilityMatrix:handler:", v9, v10);

}

void sub_10013C9CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  NSObject *v30;
  id v31;
  unsigned __int8 v32;
  id v33;
  id v34;
  NSObject *v35;
  void *v36;
  int8x16_t v37;
  _QWORD v38[4];
  int8x16_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t v44[128];
  uint8_t buf[4];
  id v46;
  __int16 v47;
  id v48;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10013DA00((uint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
    objc_msgSend(*(id *)(a1 + 48), "setError:", v7);
  }
  else
  {
    v16 = objc_msgSend(v5, "count");
    if (v16)
    {
      if (!os_log_GKGeneral)
        v17 = (id)GKOSLoggers(v16);
      v18 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        v19 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        v46 = v19;
        v47 = 2112;
        v48 = v5;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GKGameplayBulletin - checking compatibility for app %@, compatibility matrix = %@", buf, 0x16u);
      }
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v20 = v5;
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
      if (v21)
      {
        v22 = v21;
        v23 = *(_QWORD *)v41;
LABEL_14:
        v24 = 0;
        while (1)
        {
          if (*(_QWORD *)v41 != v23)
            objc_enumerationMutation(v20);
          v25 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v24);
          v26 = +[GKGameDescriptor currentPlatform](GKGameDescriptor, "currentPlatform");
          v27 = objc_msgSend(v25, "platform");
          if (v26 == v27)
            break;
          if (v22 == (id)++v24)
          {
            v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
            if (v22)
              goto LABEL_14;
            goto LABEL_20;
          }
        }
        if (!os_log_GKGeneral)
          v28 = (id)GKOSLoggers(v27);
        v29 = (void *)os_log_GKTrace;
        if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
        {
          v30 = v29;
          v31 = +[GKGameDescriptor currentPlatform](GKGameDescriptor, "currentPlatform");
          *(_DWORD *)buf = 134218242;
          v46 = v31;
          v47 = 2112;
          v48 = v25;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "GKGameplayBulletin - found compatible game of this current platform (%ld). compatibleGame: %@", buf, 0x16u);

        }
        v32 = objc_msgSend(*(id *)(a1 + 40), "setInstalledGameLocationFor:descriptor:", v25, *(_QWORD *)(a1 + 32));

        if ((v32 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
LABEL_20:

      }
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_10013CD64;
      v38[3] = &unk_1002C4C58;
      v37 = *(int8x16_t *)(a1 + 32);
      v33 = (id)v37.i64[0];
      v39 = vextq_s8(v37, v37, 8uLL);
      objc_msgSend(v20, "enumerateObjectsUsingBlock:", v38);

    }
    else
    {
      if (!os_log_GKGeneral)
        v34 = (id)GKOSLoggers(0);
      v35 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        v36 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v46 = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "GKGameplayBulletin - skip checking compatibility for app %@, since compatibility matrix is empty.", buf, 0xCu);
      }
    }
  }
LABEL_31:
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

id sub_10013CD64(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "setInstalledGameLocationFor:descriptor:", a2, *(_QWORD *)(a1 + 40));
  *a4 = (_BYTE)result;
  return result;
}

void sub_10013CD94(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_10013D0BC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10013D154;
  v6[3] = &unk_1002BB8F0;
  v4 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = v4;
  v9 = v3;
  v5 = v3;
  objc_msgSend(v7, "determineGameLocationViaCompatibilityMatrixWithCompletionHandler:", v6);

}

void sub_10013D154(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  id v18;
  id v19;
  id v20;
  NSObject *v21;
  _BOOL8 v22;
  id v23;
  __int16 v24;
  uint8_t buf[16];
  __int16 v26;
  __int16 v27;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10013DA64((uint64_t)v4, v6, v7, v8, v9, v10, v11, v12);
    objc_msgSend(*(id *)(a1 + 40), "setError:", v4);
    goto LABEL_26;
  }
  v13 = objc_msgSend(*(id *)(a1 + 32), "gameLocation");
  if ((_DWORD)v13 == 1)
  {
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v13);
    v15 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      v27 = 0;
      v16 = "determineGameLocationOnDeviceOrInStoreWithCompletionHandler - Compatible App Installed";
      v17 = (uint8_t *)&v27;
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v16, v17, 2u);
    }
  }
  else
  {
    v18 = objc_msgSend(*(id *)(a1 + 32), "gameLocation");
    if ((_DWORD)v18 == 2)
    {
      if (!os_log_GKGeneral)
        v19 = (id)GKOSLoggers(v18);
      v15 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        v26 = 0;
        v16 = "determineGameLocationOnDeviceOrInStoreWithCompletionHandler - Compatible App In Store";
        v17 = (uint8_t *)&v26;
        goto LABEL_25;
      }
    }
    else
    {
      if (!os_log_GKGeneral)
        v20 = (id)GKOSLoggers(v18);
      v21 = os_log_GKTrace;
      v22 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
      if (v22)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "determineGameLocationOnDeviceOrInStoreWithCompletionHandler - No compatible App Installed", buf, 2u);
      }
      if (!os_log_GKGeneral)
        v23 = (id)GKOSLoggers(v22);
      v15 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v24 = 0;
        v16 = "No compatible app installed";
        v17 = (uint8_t *)&v24;
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));

}

void sub_10013D368(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10013D594(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  void *v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKProfileService, "serviceWithTransport:forClient:localPlayer:", 0, v4, 0));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "originatorPlayerID"));
  v13 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10013D6DC;
  v10[3] = &unk_1002BCE80;
  v8 = *(void **)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v8;
  v12 = v3;
  v9 = v3;
  objc_msgSend(v5, "getProfilesForPlayerIDs:handler:", v7, v10);

}

void sub_10013D6DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10013DAC8((uint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
    objc_msgSend(*(id *)(a1 + 40), "setError:", v7);
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastObject"));
    objc_msgSend(*(id *)(a1 + 32), "setOriginatorPlayer:", v16);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10013D7A4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_10013DA00(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "GKGameplayBulletin - Cannot get compatibility matrix due to: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_10013DA64(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "Error determining compatible game with matrix: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_10013DAC8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016C28((void *)&_mh_execute_header, a2, a3, "loadOriginatorPlayerWithCompletionHandler: failed to load player profiles: %@", a5, a6, a7, a8, 2u);
  sub_100016C20();
}

void sub_10013E33C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10013E824(a1, (uint64_t)v7, v9);
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastObject"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "name"));
    if (!v11)
    {
      v12 = GKCopyLocalizedApplicationNameForDisplayIdentifier(*(_QWORD *)(a1 + 32));
      v11 = (void *)objc_claimAutoreleasedReturnValue(v12);
    }
    objc_msgSend(*(id *)(a1 + 40), "setGameName:", v11);

  }
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v7);

}

void sub_10013E7B0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "loadLocalizedGameNameForBundleID was called with no handler - returning -bundleID was:%@", (uint8_t *)&v2, 0xCu);
}

void sub_10013E824(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "loadLocalizedGameNameForBundleID (%@) - Error getting localized game name: %@", (uint8_t *)&v4, 0x16u);
}

void sub_10013E9E4(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.GameKit.GKAcceptedInviteManager.sync", 0);
  v2 = (void *)qword_100318158;
  qword_100318158 = (uint64_t)v1;

}

id sub_10013ECCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", *(_QWORD *)(a1 + 40));
}

id sub_10013EDDC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "insertObject:atIndex:", *(_QWORD *)(a1 + 40), 0);
}

void sub_10013EF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013EF60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10013EF70(uint64_t a1)
{

}

void sub_10013EF78(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10013F014;
  v7[3] = &unk_1002C27D0;
  v2 = *(void **)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "indexOfObjectPassingTest:", v7);
  if (v3 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v3));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
}

uint64_t sub_10013F014(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *a4 = result;
  return result;
}

void sub_10013F19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10013F1B4(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10013F260;
  v8[3] = &unk_1002C27D0;
  v2 = *(void **)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "indexOfObjectPassingTest:", v8);
  if (v3 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = v3;
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v3));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    objc_msgSend(*(id *)(a1 + 32), "removeObjectAtIndex:", v4);
  }

}

uint64_t sub_10013F260(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *a4 = result;
  return result;
}

id sub_10013F434(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "sessionToken"));
  v5 = objc_msgSend(v3, "isEqualToData:", v4);

  return v5;
}

id sub_10013F7EC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "sessionToken"));
  v4 = objc_msgSend(v3, "isEqualToData:", *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_10013F92C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEqualToData:", *(_QWORD *)(a1 + 32));
}

id sub_10013FA30(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "matchID"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_10013FCC8(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "isCompatibleWithGameDescriptor:", *(_QWORD *)(a1 + 32));
}

id sub_10013FE98(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "isCompatibleWithGameDescriptor:", *(_QWORD *)(a1 + 32));
}

void sub_10013FF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10013FF68(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  objc_super v7;

  v7.receiver = *(id *)(a1 + 32);
  v7.super_class = (Class)GKAcceptedInviteManager;
  v2 = objc_msgSendSuper2(&v7, "description");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingFormat:", CFSTR("AcceptedInvites: \n\tMultiplayerInvites: %@ \n\tTurnBased: %@"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1001402F8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 134217984;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Encountered an unsupported IDS URI type: %ld", (uint8_t *)&v2, 0xCu);
}

void sub_10014046C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  uint8_t buf[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKTurnBasedMultiplayerBulletin loadBulletinsForPushNotification:", buf, 2u);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  v5 = GKReporterDomainPushCount;
  objc_msgSend(v4, "reportEvent:type:", GKReporterDomainPushCount, GKReporterPushCountTurnBased);

  v6 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKTurnBasedMultiplayerBulletin.m", 53, "+[GKTurnBasedMultiplayerBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v8));

  v10 = objc_msgSend(objc_alloc(*(Class *)(a1 + 48)), "initWithPushNotification:", *(_QWORD *)(a1 + 32));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "aggregateDictionaryKey"));
  objc_msgSend(v11, "reportEvent:type:", v5, v12);

  v13 = objc_msgSend(v10, "isPushForLocalPlayers");
  if ((_DWORD)v13)
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100140750;
    v27[3] = &unk_1002BB4A0;
    v28 = v10;
    v29 = v9;
    v30 = v6;
    objc_msgSend(v29, "perform:", v27);

  }
  else
  {
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v13);
    v15 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100145EC0(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "replyQueue"));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100140C1C;
    v24[3] = &unk_1002BB450;
    v26 = *(id *)(a1 + 40);
    v25 = v6;
    objc_msgSend(v9, "notifyOnQueue:block:", v23, v24);

  }
}

void sub_100140750(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100140810;
  v6[3] = &unk_1002BE8A8;
  v7 = v4;
  v8 = *(id *)(a1 + 40);
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v5 = v3;
  objc_msgSend(v7, "determineGameLocationOnDeviceOrInStoreWithCompletionHandler:", v6);

}

void sub_100140810(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  id v17;
  NSObject *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint8_t buf[16];

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100145EF0();
  }
  else
  {
    v9 = objc_msgSend(*(id *)(a1 + 32), "gameLocation");
    if ((_DWORD)v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "update");
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleIdentifier"));

      v12 = GKGetApplicationStateForBundleID(v11);
      if (v12 <= 3
        && (v12 = (uint64_t)objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "displayNotification"), (v12 & 1) != 0))
      {
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_100140A58;
        v19[3] = &unk_1002BB590;
        v13 = *(void **)(a1 + 40);
        v20 = *(id *)(a1 + 32);
        v21 = *(id *)(a1 + 48);
        objc_msgSend(v13, "perform:", v19);

        v14 = v20;
      }
      else
      {
        if (!os_log_GKGeneral)
          v15 = (id)GKOSLoggers(v12);
        v16 = os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Notify the App, do not display bulletin", buf, 2u);
        }
        objc_msgSend(*(id *)(a1 + 32), "saveTurnBasedEvent");
        objc_msgSend(*(id *)(a1 + 32), "invalidateTurnCache");
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:](GKClientProxy, "clientForBundleID:", v11));
        objc_msgSend(v14, "fetchTurnBasedData");
      }

    }
    else
    {
      if (!os_log_GKGeneral)
        v17 = (id)GKOSLoggers(v9);
      v18 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "GKTurnBasedMultiplayerBulletin Declining invite due to no compatible game found", buf, 2u);
      }
      objc_msgSend(*(id *)(a1 + 32), "declineTurnBasedInviteWithReason:", 2);
    }
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v6, v7, v8);

}

void sub_100140A58(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100140B04;
  v6[3] = &unk_1002BB8F0;
  v7 = v4;
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v5 = v3;
  objc_msgSend(v7, "loadDataWithHandler:", v6);

}

void sub_100140B04(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint8_t v9[16];

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100145F50();
  }
  else
  {
    v6 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "displayNotification");
    if ((_DWORD)v6)
    {
      if (!os_log_GKGeneral)
        v7 = (id)GKOSLoggers(v6);
      v8 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Assemble Bulletin", v9, 2u);
      }
      objc_msgSend(*(id *)(a1 + 32), "assembleBulletin");
      objc_msgSend(*(id *)(a1 + 32), "saveTurnBasedEvent");
      objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 32));
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t sub_100140C1C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1001414EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "gameDescriptor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001415B4;
  v8[3] = &unk_1002BB6E8;
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadLocalizedGameNameForBundleID:handler:", v6, v8);

}

void sub_1001415B4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100145FB0();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100141648(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001416E0;
  v6[3] = &unk_1002BB8F0;
  v4 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = v4;
  v9 = v3;
  v5 = v3;
  objc_msgSend(v7, "loadOriginatorPlayerWithCompletionHandler:", v6);

}

void sub_1001416E0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = (void *)os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100146010(a1, v6, (uint64_t)v4);
    objc_msgSend(*(id *)(a1 + 40), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100141778(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;
  void *v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleIdentifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceForBundleID:localPlayer:](GKTurnBasedService, "serviceForBundleID:localPlayer:", v5, 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "matchID"));
  v14 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v14, 1));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001418D4;
  v11[3] = &unk_1002BCE80;
  v9 = *(void **)(a1 + 40);
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v9;
  v13 = v3;
  v10 = v3;
  objc_msgSend(v6, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v8, 1, v11);

}

void sub_1001418D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v17 = 138412290;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "loadBulletinMessageWithHandler - Error getting expiration date for match: %@", (uint8_t *)&v17, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 40), "setError:", v7);
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastObject"));
    v11 = objc_msgSend(v10, "currentParticipant");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "participants"));
    v13 = objc_msgSend(v12, "count");

    if ((unint64_t)v13 > v11)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "participants"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", (int)objc_msgSend(v10, "currentParticipant")));

      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "timeoutDate"));
      objc_msgSend(*(id *)(a1 + 32), "setExpirationDate:", v16);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100141A78(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_100141E70(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "gameDescriptor"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "adamID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game.bundleID = %@ OR game.adamID = %@"), v6, v8));
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKTurnBasedSessionListCacheObject, "expireObjectsMatchingPredicate:context:", v9, v13);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "matchID"));
  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "matchID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("sessionID = %@"), v11));
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKTurnBasedSessionCacheObject, "expireObjectsMatchingPredicate:context:", v12, v13);

  }
  v5[2](v5);

}

void sub_100142DBC(id *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  unsigned int v7;
  unsigned int v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  const __CFString *v26;
  void *v27;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend((id)objc_opt_class(a1[4]), "shouldLoadCacheList");
  v8 = objc_msgSend((id)objc_opt_class(a1[4]), "shouldLoadCacheDetails");
  v9 = objc_msgSend((id)objc_opt_class(a1[4]), "shouldLoadCacheData");
  if (!objc_msgSend((id)objc_opt_class(a1[4]), "shouldExpirePlayerList"))
  {
    if (!v7)
      goto LABEL_3;
LABEL_7:
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "gameDescriptor"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "bundleIdentifier"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game.bundleID = %@"), v21));
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKTurnBasedSessionListCacheObject, "expireObjectsMatchingPredicate:context:", v22, v5);

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "bundleIdentifier"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game.bundleID = %@"), v23));
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKTurnBasedSessionListCacheObject, "expireObjectsMatchingPredicate:context:", v24, v5);

    objc_msgSend(a1[6], "getTurnBasedMatchesAndCompatibleBundleID:handler:", 0, 0);
    objc_msgSend(a1[7], "getTurnBasedMatchesAndCompatibleBundleID:handler:", 1, 0);
    if (!v8)
      goto LABEL_5;
    goto LABEL_4;
  }
  v26 = CFSTR("bundle-id");
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "gameDescriptor"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "bundleIdentifier"));
  v27 = v16;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[GKGameCacheObject gameForGameDescriptor:context:](GKGameCacheObject, "gameForGameDescriptor:context:", v17, v5));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("game = %@ AND type = %d"), v18, 1));
  +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKCompatiblePlayerListCacheObject, "expireObjectsMatchingPredicate:context:", v19, v5);

  if (v7)
    goto LABEL_7;
LABEL_3:
  if (v8)
  {
LABEL_4:
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "matchID"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("sessionID = %@"), v10));
    +[GKExpiringCacheObject expireObjectsMatchingPredicate:context:](GKTurnBasedSessionCacheObject, "expireObjectsMatchingPredicate:context:", v11, v5);

    v12 = a1[6];
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "matchID"));
    v25 = v13;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
    objc_msgSend(v12, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v14, v9, 0);

  }
LABEL_5:
  v6[2](v6);

}

void sub_1001435A8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  GKTurnBasedMultiplayerInviteBulletin *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;
  _QWORD v18[4];
  GKTurnBasedMultiplayerInviteBulletin *v19;
  id v20;
  id v21;
  char v22;
  uint8_t buf[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKTurnBasedMultiplayerInviteBulletin loadBulletinsForPushNotification: withHandler:", buf, 2u);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v4, "reportEvent:type:", GKReporterDomainPushCount, GKReporterPushCountTurnBasedInitiate);

  v5 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKTurnBasedMultiplayerBulletin.m", 493, "+[GKTurnBasedMultiplayerInviteBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v7));

  v9 = -[GKTurnBasedMultiplayerBulletin initWithPushNotification:]([GKTurnBasedMultiplayerInviteBulletin alloc], "initWithPushNotification:", *(_QWORD *)(a1 + 32));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", GKInviteIsFromMessageKey));
  v11 = objc_msgSend(v10, "BOOLValue");

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  v13 = v12;
  if (v11)
  {
    objc_msgSend(v12, "reportEvent:type:", GKReporterDomainInviteInitiateType, GKMessageInviteInitiate);

  }
  else
  {
    objc_msgSend(v12, "reportEvent:type:", GKReporterDomainInviteInitiateType, GKPushInviteInitiate);

    if (!-[GKGameplayBulletin isPushForLocalPlayers](v9, "isPushForLocalPlayers"))
      goto LABEL_9;
  }
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100143894;
  v18[3] = &unk_1002BBAD8;
  v19 = v9;
  v20 = v8;
  v22 = v11;
  v21 = v5;
  objc_msgSend(v20, "perform:", v18);

LABEL_9:
  if (*(_QWORD *)(a1 + 40))
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "replyQueue"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100143CD0;
    v15[3] = &unk_1002BB450;
    v17 = *(id *)(a1 + 40);
    v16 = v5;
    objc_msgSend(v8, "notifyOnQueue:block:", v14, v15);

  }
}

void sub_100143894(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;
  char v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014395C;
  v6[3] = &unk_1002BE740;
  v7 = v4;
  v8 = *(id *)(a1 + 40);
  v11 = *(_BYTE *)(a1 + 56);
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v5 = v3;
  objc_msgSend(v7, "determineGameLocationOnDeviceOrInStoreWithCompletionHandler:", v6);

}

void sub_10014395C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint8_t v11[8];
  _QWORD v12[4];
  id v13;
  id v14;
  char v15;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001460C8();
  }
  else
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "gameLocation");
    if ((_DWORD)v6)
    {
      objc_msgSend(*(id *)(a1 + 32), "updateBadgeCount");
      objc_msgSend(*(id *)(a1 + 32), "expireAndLoadCaches");
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100143B14;
      v12[3] = &unk_1002C07E8;
      v7 = *(void **)(a1 + 40);
      v13 = *(id *)(a1 + 32);
      v15 = *(_BYTE *)(a1 + 64);
      v14 = *(id *)(a1 + 48);
      objc_msgSend(v7, "perform:", v12);

    }
    else
    {
      if (!os_log_GKGeneral)
        v8 = (id)GKOSLoggers(v6);
      v9 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GKTurnBasedMultiplayerInviteBulletin Declining invite due to no compatible game found", v11, 2u);
      }
      objc_msgSend(*(id *)(a1 + 32), "declineTurnBasedInviteWithReason:", 2);
    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
    objc_msgSend(v10, "reportEvent:type:", GKReporterDomainPushCount, GKReporterPushCountTurnBasedTurn);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100143B14(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  char v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100143BC8;
  v6[3] = &unk_1002C4D68;
  v7 = v4;
  v10 = *(_BYTE *)(a1 + 48);
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v5 = v3;
  objc_msgSend(v7, "loadDataWithHandler:", v6);

}

void sub_100143BC8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v3 = a2;
  v4 = objc_msgSend(v3, "code");
  if (v4 == (id)10)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(10);
    v6 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100146128(v6, v7, v8, v9, v10, v11, v12, v13);
    objc_msgSend(*(id *)(a1 + 32), "declineTurnBasedInviteWithReason:", 1);
  }
  else if (!v3 || *(_BYTE *)(a1 + 56))
  {
    objc_msgSend(*(id *)(a1 + 32), "setGameInviteMessage");
    objc_msgSend(*(id *)(a1 + 32), "assembleBulletin");
    objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v4);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100146158();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t sub_100143CD0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1001445A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "gameDescriptor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10014466C;
  v8[3] = &unk_1002BB6E8;
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadLocalizedGameNameForBundleID:handler:", v6, v8);

}

void sub_10014466C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001461B8();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100144700(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10014479C;
  v8[3] = &unk_1002BB8F0;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadOriginatorPlayerWithCompletionHandler:", v8);

}

void sub_10014479C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
    if (objc_msgSend(v6, "multiplayerAllowedPlayerType") == (id)1)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "originatorPlayer"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "friendBiDirectional"));
      v9 = objc_msgSend(v8, "isEqualToNumber:", &off_1002DBD78);

      if ((v9 & 1) != 0)
        goto LABEL_15;
      if (!os_log_GKGeneral)
        v11 = (id)GKOSLoggers(v10);
      v12 = os_log_GKError;
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_100146218(v12, v13, v14, v15, v16, v17, v18, v19);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 10, 0));
      objc_msgSend(*(id *)(a1 + 32), "setError:", v6);
    }

    goto LABEL_15;
  }
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    sub_100146248();
  objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
LABEL_15:
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100144908(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_1001455A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "gameDescriptor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100145670;
  v8[3] = &unk_1002BB6E8;
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadLocalizedGameNameForBundleID:handler:", v6, v8);

}

void sub_100145670(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001461B8();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100145704(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100145798;
  v6[3] = &unk_1002BB6E8;
  v4 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "loadBulletinMessageWithHandler:", v6);

}

void sub_100145798(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001462A8();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10014582C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_1001459D8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;
  void *v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "bundleIdentifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceForBundleID:localPlayer:](GKTurnBasedService, "serviceForBundleID:localPlayer:", v5, 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "matchID"));
  v14 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v14, 1));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100145B34;
  v11[3] = &unk_1002BCE80;
  v9 = *(void **)(a1 + 40);
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v9;
  v13 = v3;
  v10 = v3;
  objc_msgSend(v6, "getDetailsForTurnBasedMatchIDs:includeGameData:handler:", v8, 1, v11);

}

void sub_100145B34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *j;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];

  v5 = a3;
  if (v5)
  {
    v6 = objc_msgSend(*(id *)(a1 + 40), "setError:", v5);
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100146308();
  }
  else
  {
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "lastObject"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "exchanges"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableOrderedSet orderedSet](NSMutableOrderedSet, "orderedSet"));
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v9 = v8;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v36;
      while (2)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v36 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "exchangeID"));
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "exchangeID"));
          v17 = objc_msgSend(v15, "isEqual:", v16);

          if (v17)
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "replies"));
            v31 = 0u;
            v32 = 0u;
            v33 = 0u;
            v34 = 0u;
            v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
            if (v19)
            {
              v20 = v19;
              v21 = *(_QWORD *)v32;
              do
              {
                for (j = 0; j != v20; j = (char *)j + 1)
                {
                  if (*(_QWORD *)v32 != v21)
                    objc_enumerationMutation(v18);
                  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1)
                                                                                     + 8 * (_QWORD)j), "localizableMessage"));
                  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
                  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "bundleIdentifier"));
                  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle _gkLocalizedMessageFromPushDictionary:forBundleID:](NSBundle, "_gkLocalizedMessageFromPushDictionary:forBundleID:", v23, v25));

                  if (v26 && objc_msgSend(v26, "length"))
                    objc_msgSend(v30, "addObject:", v26);

                }
                v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
              }
              while (v20);
            }

            v5 = 0;
            goto LABEL_26;
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
        if (v11)
          continue;
        break;
      }
    }
LABEL_26:

    if (objc_msgSend(v30, "count"))
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "array"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "componentsJoinedByString:", CFSTR("\n")));
      objc_msgSend(*(id *)(a1 + 32), "setMessage:", v28);

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "setMessage:", 0);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100145E7C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_100145EC0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "Received a push that is not for the local player", a5, a6, a7, a8, 0);
  sub_100027A04();
}

void sub_100145EF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error determining game location: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100145F50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error loading data for turn based bulletin: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100145FB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error getting localized game name: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100146010(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  NSObject *v5;
  void *v6;
  uint8_t v7[12];
  __int16 v8;
  uint64_t v9;

  v4 = *(void **)(a1 + 32);
  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "originatorPlayerID"));
  sub_1000279B0();
  v8 = 2112;
  v9 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "loadDataWithHandler - Error loading info about originator player (%@): %@", v7, 0x16u);

}

void sub_1001460C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "GKTurnBasedMultiplayerInviteBulletin - Error determining game location: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100146128(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "Cannot create GKTurnBasedMultiplayerInviteBulletin - multiplayer allowed player restriction", a5, a6, a7, a8, 0);
  sub_100027A04();
}

void sub_100146158()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadLocalizedGameNameForBundleID - Error loading data for the bulletin: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1001461B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadLocalizedGameNameForBundleID - Error getting localized game name: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100146218(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100027A40((void *)&_mh_execute_header, a1, a3, "Multiplayer restricted to friends only and originatorPlayer is not a bi directional friend", a5, a6, a7, a8, 0);
  sub_100027A04();
}

void sub_100146248()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadOriginatorPlayerWithCompletionHandler - Error getting originator player: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1001462A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadLocalizedGameNameForBundleID - Error getting bulletin message: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100146308()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadBulletinMessageWithHandler - Error getting details for match: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100147E64(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  GKRealTimeMultiplayerInitiateBulletin *v11;
  void *v12;
  id v13;
  void *v14;
  _BOOL8 v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _BOOL8 v21;
  void *v22;
  id v23;
  NSObject *v24;
  _BOOL8 v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *log;
  _QWORD v32[4];
  id v33;
  id v34;
  _QWORD v35[4];
  GKRealTimeMultiplayerInitiateBulletin *v36;
  id v37;
  id v38;
  char v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification:", buf, 2u);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v4, "reportMessageInviteProcessingDuration");

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v5, "recordAppLaunchAndTotalTimestamp");

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v6, "reportEvent:type:", GKReporterDomainPushCount, GKReporterPushCountInviteInitiate);

  v7 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKRealTimeMultiplayerBulletin.m", 313, "+[GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v9));

  v11 = -[GKRealTimeMultiplayerInitiateBulletin initWithPushNotification:]([GKRealTimeMultiplayerInitiateBulletin alloc], "initWithPushNotification:", *(_QWORD *)(a1 + 32));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", GKInviteIsFromMessageKey));
  v13 = objc_msgSend(v12, "BOOLValue");

  -[GKRealTimeMultiplayerBulletin setIsMessageBasedInvite:](v11, "setIsMessageBasedInvite:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", GKPushCommandKey));
  v15 = objc_msgSend(v14, "unsignedIntValue") == 9;

  -[GKRealTimeMultiplayerBulletin setIsSharePlayInvite:](v11, "setIsSharePlayInvite:", v15);
  v16 = GKInviteIsFromNearbyKey;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", GKInviteIsFromNearbyKey));

  if (v17)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v16));
    -[GKRealTimeMultiplayerBulletin setIsNearbyInvite:](v11, "setIsNearbyInvite:", objc_msgSend(v18, "BOOLValue"));

  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  v20 = v19;
  if ((_DWORD)v13)
  {
    objc_msgSend(v19, "reportEvent:type:", GKReporterDomainInviteInitiateType, GKMessageInviteInitiate);

LABEL_11:
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_100148374;
    v35[3] = &unk_1002BBAD8;
    v36 = v11;
    v37 = v10;
    v39 = (char)v13;
    v38 = v7;
    objc_msgSend(v37, "perform:", v35);

    goto LABEL_12;
  }
  objc_msgSend(v19, "reportEvent:type:", GKReporterDomainInviteInitiateType, GKPushInviteInitiate);

  if (-[GKRealTimeMultiplayerInitiateBulletin isReconnect](v11, "isReconnect"))
    goto LABEL_11;
  v21 = -[GKGameplayBulletin isPushForLocalPlayers](v11, "isPushForLocalPlayers");
  if (v21)
    goto LABEL_11;
  if (!os_log_GKGeneral)
    v23 = (id)GKOSLoggers(v21);
  v24 = os_log_GKMatch;
  v25 = os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO);
  if (v25)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification: push is not for local players", buf, 2u);
  }
  if (!os_log_GKGeneral)
    v26 = (id)GKOSLoggers(v25);
  v27 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    log = v27;
    v30 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameplayBulletin receiverPlayerID](v11, "receiverPlayerID"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "pushCredentialForEnvironment:", objc_msgSend(v8, "environment")));
    *(_DWORD *)buf = 138412546;
    v41 = v30;
    v42 = 2112;
    v43 = v29;
    _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "Ignoring initiate push not intended for this player. InviteID: %@ LocalPlayer: %@", buf, 0x16u);

  }
LABEL_12:
  if (*(_QWORD *)(a1 + 40))
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "replyQueue"));
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100148B48;
    v32[3] = &unk_1002BB450;
    v34 = *(id *)(a1 + 40);
    v33 = v7;
    objc_msgSend(v10, "notifyOnQueue:block:", v22, v32);

  }
}

void sub_100148374(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;
  char v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014843C;
  v6[3] = &unk_1002BE740;
  v7 = v4;
  v8 = *(id *)(a1 + 40);
  v11 = *(_BYTE *)(a1 + 56);
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v5 = v3;
  objc_msgSend(v7, "determineGameLocationOnDeviceOrInStoreWithCompletionHandler:", v6);

}

void sub_10014843C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint8_t v10[8];
  _QWORD v11[4];
  id v12;
  id v13;
  char v14;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_ERROR))
      sub_10014E6B4();
  }
  else
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "gameLocation");
    if ((_DWORD)v6)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1001485B0;
      v11[3] = &unk_1002C07E8;
      v7 = *(void **)(a1 + 40);
      v12 = *(id *)(a1 + 32);
      v14 = *(_BYTE *)(a1 + 64);
      v13 = *(id *)(a1 + 48);
      objc_msgSend(v7, "perform:", v11);

    }
    else
    {
      if (!os_log_GKGeneral)
        v8 = (id)GKOSLoggers(v6);
      v9 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerInitiateBulletin Declining invite due to no compatible game found", v10, 2u);
      }
      objc_msgSend(*(id *)(a1 + 32), "declineInviteWithReason:", 2);
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1001485B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  char v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100148664;
  v6[3] = &unk_1002C4D68;
  v7 = v4;
  v10 = *(_BYTE *)(a1 + 48);
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v5 = v3;
  objc_msgSend(v7, "loadDataWithHandler:", v6);

}

void sub_100148664(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  if (objc_msgSend(v3, "code") == (id)10)
  {
    if (!os_log_GKGeneral)
      v4 = (id)GKOSLoggers(10);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10014E714();
    objc_msgSend(*(id *)(a1 + 32), "declineInviteWithReason:", 1);
  }
  else if (!v3 || *(_BYTE *)(a1 + 56))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKDataRequestManager sharedManager](GKDataRequestManager, "sharedManager"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001487EC;
    v8[3] = &unk_1002C0150;
    v9 = *(id *)(a1 + 32);
    v10 = *(id *)(a1 + 40);
    v11 = *(id *)(a1 + 48);
    objc_msgSend(v7, "getValidNATTypeWithForceRelay:withHandler:", 0, v8);

  }
  else
  {
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(v5);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10014E740();
  }

}

uint64_t sub_1001487EC(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  void *v29;
  int v31;
  void *v32;
  __int16 v33;
  id v34;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peerNatType"));
  v5 = objc_msgSend(v4, "integerValue");

  if (!os_log_GKGeneral)
    v7 = (id)GKOSLoggers(v6);
  v8 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v31 = 134218240;
    v32 = a2;
    v33 = 2048;
    v34 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "NAT types before generating bulletins: localNATType = %tu, peerNatType = %tu", (uint8_t *)&v31, 0x16u);
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "serverHosted") & 1) == 0)
  {
    v9 = +[GKViceroyNATTypeHelper isClosed:](GKViceroyNATTypeHelper, "isClosed:", a2);
    if ((v9 & 1) != 0
      || (v9 = +[GKViceroyNATTypeHelper isClosed:](GKViceroyNATTypeHelper, "isClosed:", v5), (_DWORD)v9))
    {
      if (!os_log_GKGeneral)
        v10 = (id)GKOSLoggers(v9);
      v11 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        v31 = 134218240;
        v32 = a2;
        v33 = 2048;
        v34 = v5;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "NAT types might not connect: own is %tu and inviter has %tu", (uint8_t *)&v31, 0x16u);
      }
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "setGameInviteMessage");
  v12 = objc_msgSend(*(id *)(a1 + 32), "assembleBulletin");
  if (!os_log_GKGeneral)
    v13 = (id)GKOSLoggers(v12);
  v14 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v15 = *(void **)(a1 + 32);
    v16 = v14;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "sessionToken"));
    v31 = 138412290;
    v32 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerInitiateBulletin - assembled bulletin with sessionToken %@", (uint8_t *)&v31, 0xCu);

  }
  +[GKMatchReporter onInviteReceivedWithBulletin:](GKMatchReporter, "onInviteReceivedWithBulletin:", *(_QWORD *)(a1 + 32));
  v18 = objc_msgSend(*(id *)(a1 + 32), "isSharePlayInvite");
  if ((_DWORD)v18)
  {
    if (!os_log_GKGeneral)
      v19 = (id)GKOSLoggers(v18);
    v20 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      v21 = *(void **)(a1 + 32);
      v22 = v20;
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "gameDescriptor"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "bundleIdentifier"));
      v31 = 138412290;
      v32 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Launching app (%@) automatically and accept the game invite from SharePlay", (uint8_t *)&v31, 0xCu);

    }
    if (objc_msgSend(*(id *)(a1 + 32), "gameLocation") == 1)
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "bundleIdentifier"));
      v27 = GKGetApplicationStateForBundleID(v26);

      if (v27 != 8)
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "bundleIdentifier"));
        GKLaunchApplicationWithIdentifier(v29, 0);

      }
    }
    objc_msgSend(*(id *)(a1 + 32), "handleAcceptAction");
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 32));
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t sub_100148B48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100149B0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "gameDescriptor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100149BD4;
  v8[3] = &unk_1002BB6E8;
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadLocalizedGameNameForBundleID:handler:", v6, v8);

}

void sub_100149BD4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10014E7A0();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100149C68(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100149D04;
  v8[3] = &unk_1002BB8F0;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  v11 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadOriginatorPlayerWithCompletionHandler:", v8);

}

void sub_100149D04(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  uint64_t v10;
  id v11;

  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKPreferences shared](GKPreferences, "shared"));
    if (objc_msgSend(v6, "multiplayerAllowedPlayerType") == (id)1)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "originatorPlayer"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "friendBiDirectional"));
      v9 = objc_msgSend(v8, "isEqualToNumber:", &off_1002DBD90);

      if ((v9 & 1) != 0)
        goto LABEL_15;
      if (!os_log_GKGeneral)
        v11 = (id)GKOSLoggers(v10);
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_10014E800();
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError userErrorForCode:underlyingError:](NSError, "userErrorForCode:underlyingError:", 10, 0));
      objc_msgSend(*(id *)(a1 + 32), "setError:", v6);
    }

    goto LABEL_15;
  }
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    sub_10014E82C();
  objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
LABEL_15:
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100149E70(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_100149FE8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id buf[2];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerActionBulletin loadBulletinsForPushNotification withHandler:", (uint8_t *)buf, 2u);
  }
  v4 = objc_msgSend(objc_alloc(*(Class *)(a1 + 48)), "initWithPushNotification:", *(_QWORD *)(a1 + 32));
  v5 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKRealTimeMultiplayerBulletin.m", 630, "+[GKRealTimeMultiplayerActionBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v6));

  objc_initWeak(buf, v4);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10014A214;
  v14[3] = &unk_1002C4DE0;
  v8 = v4;
  v15 = v8;
  objc_copyWeak(&v17, buf);
  v9 = v5;
  v16 = v9;
  objc_msgSend(v7, "perform:", v14);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10014A5B0;
  v11[3] = &unk_1002BB450;
  v13 = *(id *)(a1 + 40);
  v10 = v9;
  v12 = v10;
  objc_msgSend(v7, "notifyOnMainQueueWithBlock:", v11);

  objc_destroyWeak(&v17);
  objc_destroyWeak(buf);

}

void sub_10014A1F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_10014A214(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014A2F4;
  v6[3] = &unk_1002C4DB8;
  v7 = v4;
  objc_copyWeak(&v10, (id *)(a1 + 48));
  v8 = *(id *)(a1 + 40);
  v5 = v3;
  v9 = v5;
  objc_msgSend(v7, "loadDataWithHandler:", v6);

  objc_destroyWeak(&v10);
}

void sub_10014A2E0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10014A2F4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10014E88C();
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10014A41C;
    v7[3] = &unk_1002C4D90;
    objc_copyWeak(&v10, (id *)(a1 + 56));
    v8 = *(id *)(a1 + 40);
    v9 = *(id *)(a1 + 48);
    objc_msgSend(v6, "setInvitedPlayerRespondedWithCompletionHandler:", v7);

    objc_destroyWeak(&v10);
  }

}

void sub_10014A408(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10014A41C(uint64_t a1, int a2)
{
  id WeakRetained;
  uint64_t v4;
  id v5;
  void *v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  int v17;
  void *v18;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      if (!os_log_GKGeneral)
        v5 = (id)GKOSLoggers(v4);
      v6 = (void *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        v7 = v6;
        v8 = objc_loadWeakRetained((id *)(a1 + 48));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "debugLine"));
        v17 = 138412290;
        v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Will post bulletin: %@", (uint8_t *)&v17, 0xCu);

      }
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
      v11 = GKReporterDomainPushCount;
      v12 = objc_loadWeakRetained((id *)(a1 + 48));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "aggregateDictionaryKey"));
      objc_msgSend(v10, "reportEvent:type:", v11, v13);

      v14 = *(void **)(a1 + 32);
      v15 = objc_loadWeakRetained((id *)(a1 + 48));
      objc_msgSend(v14, "addObject:", v15);

    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_10014A5B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_10014A8B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "gameDescriptor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10014A980;
  v8[3] = &unk_1002BB6E8;
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadLocalizedGameNameForBundleID:handler:", v6, v8);

}

void sub_10014A980(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10014E918();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10014AA14(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014AAA8;
  v6[3] = &unk_1002BB6E8;
  v4 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "loadOriginatorPlayerWithCompletionHandler:", v6);

}

void sub_10014AAA8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10014E978();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10014AB3C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_10014AD78(id *a1, void *a2)
{
  void (**v3)(_QWORD);
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  _BOOL8 v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  __int128 v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  __int128 v24;
  uint8_t buf[4];
  void *v26;

  v3 = a2;
  v4 = v3;
  if (a1[4])
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "originatorPlayer"));
    v6 = v5;
    if (v5)
    {
      v7 = a1[6];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10014AF8C;
      v20[3] = &unk_1002BF3C0;
      v21 = v5;
      v8 = a1[4];
      v9 = a1[5];
      v22 = v8;
      v23 = v9;
      v19 = *((_OWORD *)a1 + 3);
      v10 = (id)v19;
      v24 = v19;
      objc_msgSend(v7, "perform:", v20);

    }
    v4[2](v4);

  }
  else
  {
    v11 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v12 = (id)GKOSLoggers(v3);
      v11 = os_log_GKGeneral;
    }
    v13 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "setInvitedPlayerRespondedWithCompletionHandler: Received Accept for unkown Session Token", buf, 2u);
    }
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v13);
    v15 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      v16 = a1[5];
      v17 = v15;
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "sessionToken"));
      *(_DWORD *)buf = 138412290;
      v26 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Received accept for unknown sessionToken %@", buf, 0xCu);

    }
    objc_msgSend(a1[6], "setResult:", &__kCFBooleanFalse);
    v4[2](v4);
  }

}

void sub_10014AF8C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint8_t buf[4];
  void *v24;

  v3 = a2;
  v4 = v3;
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v3);
  v6 = (void *)os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    v7 = *(void **)(a1 + 32);
    v8 = v6;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "debugDescription"));
    *(_DWORD *)buf = 138412290;
    v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "setInvitedPlayerRespondedWithCompletionHandler: starting invite session for player: %@", buf, 0xCu);

  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "inviteSession"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10014B130;
  v16[3] = &unk_1002C4E78;
  v16[4] = *(_QWORD *)(a1 + 48);
  v17 = v10;
  v18 = *(id *)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  v13 = *(void **)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v19 = v11;
  v22 = v12;
  v20 = v13;
  v21 = v4;
  v14 = v4;
  v15 = v10;
  objc_msgSend(v15, "performAsync:", v16);

}

void sub_10014B130(uint64_t a1)
{
  id *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  BOOL v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  BOOL v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  _QWORD v35[4];
  id v36;
  id v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  id v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;

  v2 = (id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "originatorPlayerID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "peerPushToken"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "referencesForInvitee:", *(_QWORD *)(a1 + 48)));
  v40 = 0;
  v41 = &v40;
  v42 = 0x3032000000;
  v43 = sub_10014B630;
  v44 = sub_10014B640;
  v45 = 0;
  v6 = objc_msgSend(v5, "containsObject:", v4);
  if ((_DWORD)v6)
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v6);
    v8 = os_log_GKMatch;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "debugDescription"));
      *(_DWORD *)buf = 138412546;
      v47 = v9;
      v48 = 2112;
      v49 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Have a push token for peer(%@): %@", buf, 0x16u);

    }
    objc_msgSend(*(id *)(a1 + 40), "removeInvitee:reference:", *(_QWORD *)(a1 + 48), v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "referencesForInvitee:", *(_QWORD *)(a1 + 48)));

    v11 = objc_msgSend(v10, "count");
    if (objc_msgSend(*(id *)(a1 + 32), "isAccept"))
    {
      if (v11)
      {
LABEL_8:
        v12 = *(void **)(a1 + 56);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sessionToken"));
        objc_msgSend(v12, "cancelInvitationForSession:playerID:pushTokens:handler:", v13, v3, v10, &stru_1002C4E00);

        objc_msgSend(*(id *)(a1 + 40), "removeInvitee:reference:", *(_QWORD *)(a1 + 48), 0);
LABEL_17:
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "bundleIdentifier"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
        objc_msgSend(v27, "setBundleIdentifier:", v26);

        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "bundleIdentifier"));
        LODWORD(v27) = GKGetApplicationStateForBundleID(v28);

        if ((_DWORD)v27 != 8)
        {
          objc_msgSend(*(id *)(a1 + 40), "addResponse:", *(_QWORD *)(a1 + 32));
          objc_msgSend(*(id *)(a1 + 32), "assembleBulletin");
          v33 = 1;
LABEL_25:
          v5 = v10;
          goto LABEL_26;
        }
        v29 = objc_msgSend(*(id *)(a1 + 32), "isAccept");
        v30 = *(void **)(a1 + 56);
        v31 = *(void **)(a1 + 32);
        if (v29)
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "clientNotificationWithiCloudID:", v41[5]));
          objc_msgSend(v30, "acceptInviteWithNotification:", v32);
        }
        else
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "clientNotification"));
          objc_msgSend(v30, "declineInviteWithNotification:", v32);
        }

LABEL_24:
        v33 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "declineReason"));
      v25 = objc_msgSend(v24, "integerValue") != (id)1;

      if (!v25 && v11 != 0)
        goto LABEL_8;
    }
    if (objc_msgSend(v10, "count"))
      goto LABEL_24;
    goto LABEL_17;
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "shareInvitees"));
  v15 = objc_msgSend(v14, "count") == 0;

  if (!v15)
  {
    if (!os_log_GKGeneral)
      v17 = (id)GKOSLoggers(v16);
    v18 = os_log_GKMatch;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "shareInvitees"));
      *(_DWORD *)buf = 138412290;
      v47 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Have share invitees %@", buf, 0xCu);

    }
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKRealTimeMultiplayerBulletin.m", 763, "-[GKRealTimeMultiplayerActionBulletin setInvitedPlayerRespondedWithCompletionHandler:]_block_invoke"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v20));

    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_10014B6B8;
    v35[3] = &unk_1002C4E50;
    v22 = *(id *)(a1 + 40);
    v23 = *(_QWORD *)(a1 + 80);
    v36 = v22;
    v39 = v23;
    v37 = *(id *)(a1 + 48);
    v38 = &v40;
    objc_msgSend(v21, "perform:", v35);
    objc_msgSend(v21, "wait");

    v10 = v5;
    goto LABEL_17;
  }
  v33 = 0;
LABEL_26:
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v33));
  objc_msgSend(*(id *)(a1 + 64), "setResult:", v34);

  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  _Block_object_dispose(&v40, 8);

}

void sub_10014B5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10014B630(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10014B640(uint64_t a1)
{

}

void sub_10014B648(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  id v4;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (!os_log_GKGeneral)
      v4 = (id)GKOSLoggers(v2);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10014E9D8();
  }

}

void sub_10014B6B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareRecordID"));
  v18 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession privateDatabase](GKCloudGameSession, "privateDatabase"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10014B800;
  v12[3] = &unk_1002C4E28;
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 56);
  v13 = v7;
  v17 = v8;
  v9 = *(id *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v15 = v3;
  v16 = v10;
  v14 = v9;
  v11 = v3;
  +[GKCloudGameSession fetchShareRecordsWithRecordIDs:inDatabase:handler:](GKCloudGameSession, "fetchShareRecordsWithRecordIDs:inDatabase:handler:", v5, v6, v12);

}

void sub_10014B800(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  id v43;
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  void *v47;
  _BYTE v48[128];
  _QWORD v49[4];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareRecordID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v4));

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("invitedPlayers")));

    if (v6)
    {
      v38 = v3;
      v49[0] = objc_opt_class(NSDictionary);
      v49[1] = objc_opt_class(NSNumber);
      v49[2] = objc_opt_class(NSString);
      v49[3] = objc_opt_class(NSData);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v49, 4));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v7));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("invitedPlayers")));
      v43 = 0;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v8, v9, &v43));
      v11 = v43;

      if (v11)
      {
        if (!os_log_GKGeneral)
          v13 = (id)GKOSLoggers(v12);
        v14 = (void *)os_log_GKError;
        if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
          sub_10014EA38((uint64_t)v11, a1, v14);
      }
      v37 = v11;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v15 = v10;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v40;
        while (2)
        {
          for (i = 0; i != v17; i = (char *)i + 1)
          {
            if (*(_QWORD *)v40 != v18)
              objc_enumerationMutation(v15);
            v20 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)i);
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v20));
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "playerID"));
            v23 = objc_msgSend(v21, "isEqualToString:", v22);

            if (v23)
            {
              if (!os_log_GKGeneral)
                v25 = (id)GKOSLoggers(v24);
              v26 = (void *)os_log_GKMatch;
              if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
              {
                v27 = *(void **)(a1 + 32);
                v28 = v26;
                v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "shareInvitees"));
                *(_DWORD *)buf = 138412546;
                v45 = v20;
                v46 = 2112;
                v47 = v29;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Remove %@ from shareInvitees %@", buf, 0x16u);

              }
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareInvitees"));
              objc_msgSend(v30, "removeObject:", v20);

              objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v20);
              goto LABEL_22;
            }
          }
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
          if (v17)
            continue;
          break;
        }
      }
LABEL_22:

      if (!os_log_GKGeneral)
        v32 = (id)GKOSLoggers(v31);
      v33 = (void *)os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        v34 = *(void **)(a1 + 32);
        v35 = v33;
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "shareInvitees"));
        *(_DWORD *)buf = 138412290;
        v45 = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Remaining share invitees after response %@", buf, 0xCu);

      }
      v3 = v38;
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10014BC30(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "result"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, objc_msgSend(v2, "BOOLValue"));

}

void sub_10014CEE8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  _BOOL8 v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  GKRealTimeMultiplayerCancelBulletin *v9;
  _BOOL8 v10;
  void *v11;
  GKRealTimeMultiplayerCancelBulletin *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  id v21;
  id v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  NSObject *v28;
  GKRealTimeMultiplayerCancelBulletin *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  NSObject *v37;
  GKRealTimeMultiplayerCancelBulletin *v38;
  void *v39;
  int v40;
  GKRealTimeMultiplayerCancelBulletin *v41;
  __int16 v42;
  void *v43;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  v4 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
  if (v4)
  {
    LOWORD(v40) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerCancelBulletin loadBulletinsForPushNotification withHandler:", (uint8_t *)&v40, 2u);
  }
  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v4);
  v6 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
  {
    LOWORD(v40) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "invitation cancel push", (uint8_t *)&v40, 2u);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  objc_msgSend(v7, "reportEvent:type:", GKReporterDomainPushCount, GKReporterPushCountInviteCancel);

  v8 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 1);
  v9 = -[GKRealTimeMultiplayerBulletin initWithPushNotification:]([GKRealTimeMultiplayerCancelBulletin alloc], "initWithPushNotification:", *(_QWORD *)(a1 + 32));
  v10 = -[GKGameplayBulletin isPushForLocalPlayers](v9, "isPushForLocalPlayers");
  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](GKBulletinController, "sharedController"));
    v12 = (GKRealTimeMultiplayerCancelBulletin *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerCancelBulletin removeAndReturnAssociatedInvite](v9, "removeAndReturnAssociatedInvite"));
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "acceptedInviteManager"));
    v14 = (void *)v13;
    if (v12)
      goto LABEL_16;
    v15 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin sessionToken](v9, "sessionToken"));
    v12 = (GKRealTimeMultiplayerCancelBulletin *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "removeAndReturnInviteWithSessionToken:", v15));

    if (!os_log_GKGeneral)
      v17 = (id)GKOSLoggers(v16);
    v18 = os_log_GKMatch;
    v13 = os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO);
    if ((_DWORD)v13)
    {
      v40 = 138412290;
      v41 = v12;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Did Removed Invite from inviteManager?: %@", (uint8_t *)&v40, 0xCu);
    }
    if (v12)
    {
LABEL_16:
      if (!os_log_GKGeneral)
        v19 = (id)GKOSLoggers(v13);
      v20 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        LOWORD(v40) = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerCancelBulletin: loadBulletinsForPushNotification - attempting to display bulletin", (uint8_t *)&v40, 2u);
      }
      -[GKRealTimeMultiplayerCancelBulletin copyDataFromAssociatedBulletin:](v9, "copyDataFromAssociatedBulletin:", v12);
      v21 = -[GKRealTimeMultiplayerCancelBulletin assembleBulletin](v9, "assembleBulletin");
      if (!os_log_GKGeneral)
        v22 = (id)GKOSLoggers(v21);
      v23 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        v40 = 138412290;
        v41 = v9;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Cancel Bulletin: %@", (uint8_t *)&v40, 0xCu);
      }
      objc_msgSend(v8, "addObject:", v9);
      objc_msgSend(v11, "withdrawBulletin:", v12);
    }
    v24 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin sessionToken](v9, "sessionToken"));
    objc_msgSend(v14, "queueCancelledMultiplayerInviteSessionToken:", v24);

    if (!os_log_GKGeneral)
      v26 = (id)GKOSLoggers(v25);
    v27 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      v28 = v27;
      v29 = (GKRealTimeMultiplayerCancelBulletin *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin sessionToken](v9, "sessionToken"));
      v40 = 138412290;
      v41 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "queued canceled invite session token: %@", (uint8_t *)&v40, 0xCu);

    }
    v30 = *(_QWORD *)(a1 + 40);
    if (v30)
    {
      (*(void (**)(uint64_t, id))(v30 + 16))(v30, v8);
      v31 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin clientNotification](v9, "clientNotification"));
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "objectForKeyedSubscript:", CFSTR("x-gk-bundle-id")));

      v33 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:](GKClientProxy, "clientForBundleID:", v32));
      v34 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin clientNotification](v9, "clientNotification"));
      objc_msgSend(v33, "cancelInviteWithNotification:", v34);

    }
  }
  else
  {
    if (!os_log_GKGeneral)
      v35 = (id)GKOSLoggers(v10);
    v36 = (void *)os_log_GKMatch;
    if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
    {
      v37 = v36;
      v38 = (GKRealTimeMultiplayerCancelBulletin *)objc_claimAutoreleasedReturnValue(-[GKGameplayBulletin originatorPlayerID](v9, "originatorPlayerID"));
      v39 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameplayBulletin receiverPlayerID](v9, "receiverPlayerID"));
      v40 = 138412546;
      v41 = v38;
      v42 = 2112;
      v43 = v39;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Ignoring cancel push not intended for this local player. inviter: %@, intendedReceiverPlayer: %@", (uint8_t *)&v40, 0x16u);

    }
  }

}

void sub_10014DCDC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  int v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  GKRealTimeMultiplayerSendBulletin *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  NSObject *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  unsigned int v51;
  uint64_t v52;
  id v53;
  NSObject *v54;
  GKRealTimeMultiplayerSendBulletin *v55;
  uint64_t v56;
  _QWORD v57[4];
  id v58;
  id v59;
  _QWORD v60[4];
  GKRealTimeMultiplayerSendBulletin *v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint8_t buf[16];
  _QWORD v68[2];
  _QWORD v69[2];
  _BYTE v70[128];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerSendBulletin loadBulletinsForPushNotification: withHandler:", buf, 2u);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("y")));
  v5 = objc_msgSend(v4, "intValue");

  v6 = objc_alloc((Class)NSData);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("s")));
  v8 = objc_msgSend(v6, "initWithBase64EncodedString:options:", v7, 0);

  if (v5 > 2)
  {
    if (v5 == 3)
    {
      if (!os_log_GKGeneral)
        v53 = (id)GKOSLoggers(v9);
      v54 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerSendBulletin GKUpdateInvitationReason", buf, 2u);
      }
      v55 = -[GKRealTimeMultiplayerSendBulletin initWithPushNotification:]([GKRealTimeMultiplayerSendBulletin alloc], "initWithPushNotification:", *(_QWORD *)(a1 + 32));
      v60[0] = _NSConcreteStackBlock;
      v60[1] = 3221225472;
      v60[2] = sub_10014E454;
      v60[3] = &unk_1002C4EA0;
      v61 = v55;
      v62 = *(id *)(a1 + 32);
      v33 = v55;
      +[GKClientProxy enumerateClientsUsingBlock:](GKClientProxy, "enumerateClientsUsingBlock:", v60);

    }
    else
    {
      if (v5 != 100)
        goto LABEL_46;
      if (!os_log_GKGeneral)
        v31 = (id)GKOSLoggers(v9);
      v32 = os_log_GKTrace;
      if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerSendBulletin GKTTRMultiplayerLogRequestReason", buf, 2u);
      }
      v33 = -[GKRealTimeMultiplayerSendBulletin initWithPushNotification:]([GKRealTimeMultiplayerSendBulletin alloc], "initWithPushNotification:", *(_QWORD *)(a1 + 32));
      v34 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerBulletin clientDictionary](v33, "clientDictionary"));
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", GKTTRBulletinKeyRadarID));
      v36 = objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", GKTTRBulletinKeyRequesterPlayerAlias));
      v37 = (void *)v36;
      if (v35 && v36)
      {
        v38 = (void *)objc_claimAutoreleasedReturnValue(-[GKRealTimeMultiplayerSendBulletin bundleIdentifier](v33, "bundleIdentifier"));
        v39 = (void *)objc_claimAutoreleasedReturnValue(-[GKGameplayBulletin receiverPlayer](v33, "receiverPlayer"));
        v40 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceForBundleID:localPlayer:](GKMultiplayerMatchService, "serviceForBundleID:localPlayer:", v38, v39));
        v57[0] = _NSConcreteStackBlock;
        v57[1] = 3221225472;
        v57[2] = sub_10014E5AC;
        v57[3] = &unk_1002BB658;
        v58 = v35;
        v59 = v37;
        objc_msgSend(v40, "uploadLogsForRadar:from:handler:", v58, v59, v57);

      }
    }

    goto LABEL_48;
  }
  if (v5 == 1)
  {
    if (!os_log_GKGeneral)
      v41 = (id)GKOSLoggers(v9);
    v42 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerSendBulletin GKClearInvitationReason", buf, 2u);
    }
    v12 = (id)objc_claimAutoreleasedReturnValue(+[GKBulletinController sharedController](GKBulletinController, "sharedController"));
    v43 = objc_msgSend(v12, "getBulletinsOfType:", objc_opt_class(GKRealTimeMultiplayerInitiateBulletin));
    v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v63, v70, 16);
    if (v45)
    {
      v46 = v45;
      v47 = *(_QWORD *)v64;
      do
      {
        v48 = 0;
        do
        {
          if (*(_QWORD *)v64 != v47)
            objc_enumerationMutation(v44);
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v63 + 1) + 8 * (_QWORD)v48)));
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "sessionToken"));
          v51 = objc_msgSend(v50, "isEqualToData:", v8);

          if (v51)
            objc_msgSend(v12, "withdrawBulletin:", v49);

          v48 = (char *)v48 + 1;
        }
        while (v46 != v48);
        v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v63, v70, 16);
      }
      while (v46);
    }
    v52 = *(_QWORD *)(a1 + 40);
    if (v52)
      (*(void (**)(uint64_t, _QWORD))(v52 + 16))(v52, 0);

    goto LABEL_39;
  }
  if (v5 == 2)
  {
    if (!os_log_GKGeneral)
      v10 = (id)GKOSLoggers(v9);
    v11 = os_log_GKTrace;
    if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GKRealTimeMultiplayerSendBulletin GKReconnectInvitationReason", buf, 2u);
    }
    v12 = objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
    objc_msgSend(v12, "setObject:forKeyedSubscript:", &off_1002DBD90, GKPushCommandKey);
    v13 = GKInviteGameIDKey;
    v68[0] = GKInviteGameIDKey;
    v14 = GKClientDataKey;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", GKClientDataKey));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v13));
    v69[0] = v16;
    v17 = GKInviteGameVersionKey;
    v68[1] = GKInviteGameVersionKey;
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v14));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", v17));
    v69[1] = v19;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v69, v68, 2));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v20, GKPushDataKey);

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v14));
    v22 = GKInvitePeerNATIPKey;
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", GKInvitePeerNATIPKey));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v23, v22);

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v14));
    v25 = GKInvitePeerNATTypeKey;
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", GKInvitePeerNATTypeKey));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v26, v25);

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v14));
    v28 = GKInvitePeerBlobKey;
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKeyedSubscript:", GKInvitePeerBlobKey));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v29, v28);

    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v30, GKInviteIsReinvite);

    +[GKRealTimeMultiplayerInitiateBulletin loadBulletinsForPushNotification:withHandler:](GKRealTimeMultiplayerInitiateBulletin, "loadBulletinsForPushNotification:withHandler:", v12, *(_QWORD *)(a1 + 40));
LABEL_39:

    goto LABEL_48;
  }
LABEL_46:
  v56 = *(_QWORD *)(a1 + 40);
  if (v56)
    (*(void (**)(uint64_t, _QWORD))(v56 + 16))(v56, 0);
LABEL_48:

}

void sub_10014E454(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  id v16;
  __int16 v17;
  uint64_t v18;

  v5 = a2;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "connection"));
  if (v6)
  {
    v7 = (void *)v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleIdentifier"));
    v10 = objc_msgSend(v8, "isEqualToString:", v9);

    if (v10)
    {
      if (!os_log_GKGeneral)
        v12 = (id)GKOSLoggers(v11);
      v13 = os_log_GKMatch;
      if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_INFO))
      {
        v14 = *(_QWORD *)(a1 + 32);
        v15 = 138412546;
        v16 = v5;
        v17 = 2112;
        v18 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Found a matching client proxy(%@) for the update bulletin: %@", (uint8_t *)&v15, 0x16u);
      }
      objc_msgSend(v5, "updateInviteWithNotification:", *(_QWORD *)(a1 + 40));
      *a3 = 1;
    }
  }

}

void sub_10014E5AC(uint64_t a1)
{
  id v2;
  NSObject *v3;

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKMatch;
  if (os_log_type_enabled(os_log_GKMatch, OS_LOG_TYPE_DEBUG))
    sub_10014EAF4(a1, v3);
}

void sub_10014E688()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Invitation declined automatically because of incompatible invite version.", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10014E6B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "GKRealTimeMultiplayerInitiateBulletin - Error determining game location: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10014E714()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Cannot create GKRealTimeMultiplayerInitiateBulletin - multiplayer allowed player restriction", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10014E740()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "GKRealTimeMultiplayerInitiateBulletin - Error loading data: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10014E7A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadLocalizedGameNameForBundleID - Error getting localized game name for bulletin: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10014E800()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "Multiplayer restricted to friends only and originatorPlayer is not a bi directional friend", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10014E82C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadOriginatorPlayerWithCompletionHandler - Error getting originator player of bulletin: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10014E88C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "Error loading data for GKRealTimeMultiplayerActionBulletin: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10014E8EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100027A0C();
  sub_100027A40((void *)&_mh_execute_header, v0, v1, "No Game Client found for sessionToken", v2, v3, v4, v5, v6);
  sub_100027A04();
}

void sub_10014E918()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadDataWithHandler - Error getting localized game name: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10014E978()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadDataWithHandler - Error getting originator player: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10014E9D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "setInvitedPlayerRespondedWithCompletionHandler - failed to cancel invitation for session: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_10014EA38(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v4;
  NSObject *v5;
  NSString *v6;
  void *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  void *v11;

  v4 = *(const char **)(a2 + 64);
  v5 = a3;
  v6 = NSStringFromSelector(v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = 138412546;
  v9 = a1;
  v10 = 2112;
  v11 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "error:%@ while decoding invitedPlayers archive in %@", (uint8_t *)&v8, 0x16u);

}

void sub_10014EAF4(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = 138412546;
  v5 = v2;
  v6 = 2112;
  v7 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Done uploadLogsForRadar: %@, from: %@", (uint8_t *)&v4, 0x16u);
  sub_100016C20();
}

void sub_10014EE48(id a1, NSManagedObjectContext *a2, id a3)
{
  void (**v4)(_QWORD);
  void *v5;
  id v6;

  v4 = (void (**)(_QWORD))a3;
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKPlayerProfileCacheObject localPlayerInManagedObjectContext:](GKPlayerProfileCacheObject, "localPlayerInManagedObjectContext:", a2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "challengeList"));
  objc_msgSend(v5, "invalidate");

  v4[2](v4);
}

void sub_10014F244(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10014F2D8;
  v6[3] = &unk_1002BB6E8;
  v4 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "determineGameLocationViaCompatibilityMatrixWithCompletionHandler:", v6);

}

void sub_10014F2D8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100152A44();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10014F36C(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_100150998(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(_QWORD);
  void (**v7)(_QWORD);
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  v9 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GKChallengeCompletedBulletin clearing challenge cache", buf, 2u);
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("challengeID IN %@"), *(_QWORD *)(a1 + 32)));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[GKCacheObject objectsMatchingPredicate:context:](GKChallengeCacheObject, "objectsMatchingPredicate:context:", v10, v5));

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100150AEC;
  v12[3] = &unk_1002C4F18;
  v13 = *(id *)(a1 + 40);
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v12);
  v7[2](v7);

}

void sub_100150AEC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleID"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:](GKClientProxy, "clientForBundleID:", v5));

    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKChallengeBulletin.m", 342, "+[GKChallengeCompletedBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKPlayerCredentialController sharedController](GKPlayerCredentialController, "sharedController"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pushCredentialForEnvironment:", objc_msgSend(*(id *)(a1 + 32), "environment")));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "playerInternal"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "playerID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "transactionGroupWithName:forPlayerID:", v7, v11));

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100150C84;
    v13[3] = &unk_1002BCCF0;
    v14 = v3;
    objc_msgSend(v12, "performOnManagedObjectContext:", v13);
    objc_msgSend(v6, "refreshContentsForDataType:userInfo:", 1, 0);

  }
}

void sub_100150C84(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "challengeID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("challengeID = %@"), v4));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[GKCacheObject objectsMatchingPredicate:context:](GKChallengeCacheObject, "objectsMatchingPredicate:context:", v5, v3));

  objc_msgSend(v6, "makeObjectsPerformSelector:", "invalidate");
}

void sub_100150D2C(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  void *v12;
  BOOL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id obj;
  _QWORD v20[4];
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];

  objc_msgSend(a1[4], "refreshContentsForDataType:userInfo:", 1, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:localPlayer:](GKChallengeService, "serviceWithTransport:forClient:localPlayer:", 0, v2, 0));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKChallengeBulletin.m", 358, "+[GKChallengeCompletedBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke_3"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v4));

  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = a1[5];
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v31 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "objectForKey:", v10));
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));

        if (v10)
          v13 = v10 == v12;
        else
          v13 = 1;
        if (v13)
          v14 = 0;
        else
          v14 = v10;
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        v23[2] = sub_100151054;
        v23[3] = &unk_1002BEC90;
        v24 = v3;
        v25 = v11;
        v26 = v14;
        v27 = a1[6];
        v15 = v5;
        v28 = v15;
        v29 = a1[7];
        v16 = v14;
        v17 = v11;
        objc_msgSend(v15, "perform:", v23);

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v7);
  }

  if (a1[8])
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "replyQueue"));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100151568;
    v20[3] = &unk_1002BB450;
    v22 = a1[8];
    v21 = a1[7];
    objc_msgSend(v5, "notifyOnQueue:block:", v18, v20);

  }
}

void sub_100151054(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100151138;
  v8[3] = &unk_1002C4F40;
  v6 = *(_QWORD *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = *(id *)(a1 + 64);
  v11 = *(id *)(a1 + 72);
  v12 = *(id *)(a1 + 32);
  v13 = v3;
  v7 = v3;
  objc_msgSend(v4, "getChallengeDetailsForChallengeIDs:receiverID:handler:", v5, v6, v8);

}

void sub_100151138(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  GKChallengeCompletedBulletin *v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  GKChallengeCompletedBulletin *v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  void *v28;
  _BYTE v29[128];

  v5 = a2;
  v6 = a3;
  v19 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100152B78();
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v10)
            objc_enumerationMutation(v5);
          v12 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          v13 = -[GKBulletin initWithPushNotification:]([GKChallengeCompletedBulletin alloc], "initWithPushNotification:", *(_QWORD *)(a1 + 32));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "challengeID"));

          if (!v14)
          {
            if (!os_log_GKGeneral)
              v16 = (id)GKOSLoggers(v15);
            v17 = os_log_GKError;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v28 = v12;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "We received a challenge with a nil ID back from getChallengeDetailsForChallengeIDs, and we're going to crash because of it. %@", buf, 0xCu);
            }
          }
          -[GKChallengeBulletin setChallenge:](v13, "setChallenge:", v12);
          if (-[GKGameplayBulletin isPushFromLocalPlayers](v13, "isPushFromLocalPlayers"))
          {
            v18 = *(void **)(a1 + 40);
            v20[0] = _NSConcreteStackBlock;
            v20[1] = 3221225472;
            v20[2] = sub_1001513F4;
            v20[3] = &unk_1002BB590;
            v21 = v13;
            v22 = *(id *)(a1 + 48);
            objc_msgSend(v18, "perform:", v20);

          }
          else if (-[GKGameplayBulletin isPushForLocalPlayers](v13, "isPushForLocalPlayers"))
          {
            -[GKChallengeBulletin notifyApp](v13, "notifyApp");
          }

        }
        v9 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
      }
      while (v9);
    }
  }
  objc_msgSend(*(id *)(a1 + 56), "getChallengesForGameDescriptor:handler:", 0, 0);
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_1001513F4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001514A0;
  v6[3] = &unk_1002BB8F0;
  v7 = v4;
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v5 = v3;
  objc_msgSend(v7, "determineGameLocationOnDeviceOrInStoreWithCompletionHandler:", v6);

}

void sub_1001514A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  unsigned int v6;
  void *v7;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100152BD8();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "refreshData");
    if (objc_msgSend(*(id *)(a1 + 32), "gameLocation"))
    {
      v6 = objc_msgSend(*(id *)(a1 + 32), "isAppRunning");
      v7 = *(void **)(a1 + 32);
      if (v6)
      {
        objc_msgSend(v7, "notifyApp");
      }
      else
      {
        objc_msgSend(v7, "assembleBulletin");
        objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 32));
      }
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t sub_100151568(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100151D78(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allObjects"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100151E4C;
  v7[3] = &unk_1002C1010;
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v10 = *(id *)(a1 + 64);
  v11 = v3;
  v6 = v3;
  objc_msgSend(v4, "getChallengeDetailsForChallengeIDs:handler:", v5, v7);

}

void sub_100151E4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  GKChallengeReceivedBulletin *v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  void *v18;
  unsigned __int8 v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  _QWORD v25[4];
  GKChallengeReceivedBulletin *v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  void *v33;
  _BYTE v34[128];

  v5 = a2;
  v6 = a3;
  v24 = v6;
  if (v6)
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100152C38();
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v29 != v10)
            objc_enumerationMutation(v5);
          v12 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
          v13 = -[GKBulletin initWithPushNotification:]([GKChallengeReceivedBulletin alloc], "initWithPushNotification:", *(_QWORD *)(a1 + 32));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "challengeID"));

          if (!v14)
          {
            if (!os_log_GKGeneral)
              v16 = (id)GKOSLoggers(v15);
            v17 = os_log_GKError;
            if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v33 = v12;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "We received a challenge with a nil ID back from getChallengeDetailsForChallengeIDs, and we're going to crash because of it. %@", buf, 0xCu);
            }
          }
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "game"));
          v19 = objc_msgSend(v18, "supportsChallenges");

          if ((v19 & 1) != 0)
          {
            -[GKChallengeBulletin setChallenge:](v13, "setChallenge:", v12);
            if (-[GKGameplayBulletin isPushForLocalPlayers](v13, "isPushForLocalPlayers"))
            {
              v21 = *(void **)(a1 + 40);
              v25[0] = _NSConcreteStackBlock;
              v25[1] = 3221225472;
              v25[2] = sub_10015216C;
              v25[3] = &unk_1002BB590;
              v26 = v13;
              v27 = *(id *)(a1 + 48);
              objc_msgSend(v21, "perform:", v25);

            }
          }
          else
          {
            if (!os_log_GKGeneral)
              v22 = (id)GKOSLoggers(v20);
            v23 = os_log_GKTrace;
            if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v33 = v12;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "We received a challenge from a game that developers did not opt in. So we are going to ignore it. Challenge: %@", buf, 0xCu);
            }
          }

        }
        v9 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
      }
      while (v9);
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10015216C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100152218;
  v6[3] = &unk_1002BB8F0;
  v7 = v4;
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v5 = v3;
  objc_msgSend(v7, "determineGameLocationOnDeviceOrInStoreWithCompletionHandler:", v6);

}

void sub_100152218(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  unsigned int v6;
  void *v7;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100152C98();
  }
  else if (objc_msgSend(*(id *)(a1 + 32), "gameLocation"))
  {
    objc_msgSend(*(id *)(a1 + 32), "refreshData");
    v6 = objc_msgSend(*(id *)(a1 + 32), "isAppRunning");
    v7 = *(void **)(a1 + 32);
    if (v6)
    {
      objc_msgSend(v7, "notifyApp");
    }
    else
    {
      objc_msgSend(v7, "assembleBulletin");
      objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 32));
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t sub_1001522E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100152A44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "GKChallengeBulletin - determineGameLocationOnDeviceOrInStoreWithCompletionHandler - Error loading store item: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100152AA4(void *a1, uint64_t a2, const char *a3)
{
  NSObject *v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSString *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;

  v5 = a1;
  v7 = (void *)objc_opt_class(a2, v6);
  v8 = v7;
  v9 = NSStringFromSelector(a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = 138412546;
  v12 = v7;
  v13 = 2112;
  v14 = v10;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@ doesn't implement %@; Subclasses should set launch event",
    (uint8_t *)&v11,
    0x16u);

}

void sub_100152B78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadBulletinsForPushNotification - failed to load challenge details: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100152BD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadBulletinsForPushNotification - Error getting game location: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100152C38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadBulletinsForPushNotification: failed to load challenge details: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100152C98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadBulletinsForPushNotification - Error determining game location: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100152E9C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContainer"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100152F54;
  v7[3] = &unk_1002BCE80;
  v5 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v5;
  v9 = v3;
  v6 = v3;
  +[GKCloudGameSession bundleIDsForContainerName:handler:](GKCloudGameSession, "bundleIDsForContainerName:handler:", v4, v7);

}

void sub_100152F54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD v42[5];
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  id v51;
  __int16 v52;
  void *v53;
  _BYTE v54[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  v9 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v10 = *(void **)(a1 + 32);
    v11 = v9;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "session"));
    *(_DWORD *)buf = 138412546;
    v49 = v12;
    v50 = 2112;
    v51 = v5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GKSessionBulletin - finding compatible BundleID for session %@, bundleIDs = %@", buf, 0x16u);

  }
  if (objc_msgSend(v5, "count"))
  {
    v41 = v7;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[GKApplicationWorkspace defaultWorkspace](GKApplicationWorkspace, "defaultWorkspace"));
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v14 = v5;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v45;
      while (2)
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v45 != v17)
            objc_enumerationMutation(v14);
          v19 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "applicationProxyForBundleID:", v19));
          if (objc_msgSend(v20, "isInstalled"))
          {
            v21 = objc_msgSend(v20, "isRestricted");
            if ((v21 & 1) == 0)
            {
              if (!os_log_GKGeneral)
                v23 = (id)GKOSLoggers(v21);
              v24 = (void *)os_log_GKDaemon;
              if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
              {
                v25 = v24;
                v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "bundleShortVersion"));
                v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "bundleVersion"));
                *(_DWORD *)buf = 138412802;
                v49 = v19;
                v50 = 2112;
                v51 = v26;
                v52 = 2112;
                v53 = v27;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "GKSessionBulletin - found compatible app: bundleID = %@, short version = %@, version = %@", buf, 0x20u);

              }
              objc_msgSend(*(id *)(a1 + 32), "setGameLocation:", 1);
              v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
              objc_msgSend(v28, "setBundleIdentifier:", v19);

              v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "bundleVersion"));
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
              objc_msgSend(v30, "setBundleVersion:", v29);

              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "bundleShortVersion"));
              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
              objc_msgSend(v32, "setShortBundleVersion:", v31);

              goto LABEL_27;
            }
          }

        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
        if (v16)
          continue;
        break;
      }
    }
LABEL_27:

    v7 = v41;
    if (objc_msgSend(*(id *)(a1 + 32), "gameLocation") != 1)
    {
      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "firstObject"));
      if (v33)
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "applicationProxyForBundleID:", v33));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
        objc_msgSend(v35, "setBundleIdentifier:", v33);

        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "bundleVersion"));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
        objc_msgSend(v37, "setBundleVersion:", v36);

        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "bundleShortVersion"));
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
        objc_msgSend(v39, "setShortBundleVersion:", v38);

        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3221225472;
        v42[2] = sub_1001533FC;
        v42[3] = &unk_1002BB590;
        v40 = *(void **)(a1 + 40);
        v42[4] = *(_QWORD *)(a1 + 32);
        v43 = v40;
        objc_msgSend(v43, "perform:", v42);

      }
    }

  }
  else if (v7)
  {
    if (!os_log_GKGeneral)
      v22 = (id)GKOSLoggers(0);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100156528();
    objc_msgSend(*(id *)(a1 + 40), "setError:", v7);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1001533FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100153490;
  v6[3] = &unk_1002BB6E8;
  v4 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "determineGameLocationViaCompatibilityMatrixWithCompletionHandler:", v6);

}

void sub_100153490(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100156588();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100153524(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_100153714(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "gameDescriptor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001537DC;
  v8[3] = &unk_1002BB6E8;
  v9 = *(id *)(a1 + 40);
  v10 = v3;
  v7 = v3;
  objc_msgSend(v4, "loadLocalizedGameNameForBundleID:handler:", v6, v8);

}

void sub_1001537DC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10014E918();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100153870(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_1001545AC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint8_t buf[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKSessionBulletin loadBulletinsForPushNotification:", buf, 2u);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  v5 = GKReporterDomainPushCount;
  objc_msgSend(v4, "reportEvent:type:", GKReporterDomainPushCount, GKReporterPushCountSessions);

  v6 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKSessionBulletin.m", 286, "+[GKSessionInviteBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v7));

  v9 = objc_msgSend(objc_alloc(*(Class *)(a1 + 48)), "initWithPushNotification:", *(_QWORD *)(a1 + 32));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "aggregateDictionaryKey"));
  objc_msgSend(v10, "reportEvent:type:", v5, v11);

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1001547FC;
  v19[3] = &unk_1002BB590;
  v20 = v9;
  v12 = v6;
  v21 = v12;
  v13 = v9;
  objc_msgSend(v8, "perform:", v19);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100154A20;
  v16[3] = &unk_1002BB450;
  v14 = *(id *)(a1 + 40);
  v17 = v12;
  v18 = v14;
  v15 = v12;
  objc_msgSend(v8, "notifyOnMainQueueWithBlock:", v16);

}

void sub_1001547FC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001548A8;
  v6[3] = &unk_1002BB8F0;
  v7 = v4;
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v5 = v3;
  objc_msgSend(v7, "determineGameLocationOnDeviceOrInStoreWithCompletionHandler:", v6);

}

void sub_1001548A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  uint8_t v13[16];

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001565E8();
  }
  else if (objc_msgSend(*(id *)(a1 + 32), "gameLocation"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIdentifier"));

    objc_msgSend(*(id *)(a1 + 32), "localizeMessage");
    if (GKGetApplicationStateForBundleID(v7) <= 3)
    {
      v8 = GKCopyLocalizedApplicationNameForDisplayIdentifier(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      objc_msgSend(*(id *)(a1 + 32), "setGameName:", v9);

      v10 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "displayNotification");
      if ((_DWORD)v10)
      {
        if (!os_log_GKGeneral)
          v11 = (id)GKOSLoggers(v10);
        v12 = os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Assemble Bulletin", v13, 2u);
        }
        objc_msgSend(*(id *)(a1 + 32), "assembleBulletin");
        objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 32));
      }
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t sub_100154A20(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_100155068(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  id v4;
  NSObject *v5;
  int v6;
  NSError *v7;

  v2 = a2;
  v3 = v2;
  if (!os_log_GKGeneral)
    v4 = (id)GKOSLoggers(v2);
  v5 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GKSessionBulletin Error Accepting ShareURL: %@", (uint8_t *)&v6, 0xCu);
  }

}

void sub_1001554DC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  uint8_t buf[16];

  if (!os_log_GKGeneral)
    v2 = (id)GKOSLoggers(a1);
  v3 = os_log_GKTrace;
  if (os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GKSessionBulletin loadBulletinsForPushNotification:", buf, 2u);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  v5 = GKReporterDomainPushCount;
  objc_msgSend(v4, "reportEvent:type:", GKReporterDomainPushCount, GKReporterPushCountSessions);

  v6 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s:%d %s"), "/Library/Caches/com.apple.xbs/Sources/GameCenter/Frameworks/GameCenterFoundation/gamed/GKSessionBulletin.m", 430, "+[GKSessionMessageBulletin loadBulletinsForPushNotification:withHandler:]_block_invoke"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[GKDispatchGroup dispatchGroupWithName:](GKDispatchGroup, "dispatchGroupWithName:", v7));

  v9 = objc_msgSend(objc_alloc(*(Class *)(a1 + 48)), "initWithPushNotification:", *(_QWORD *)(a1 + 32));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKReporter reporter](GKReporter, "reporter"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "aggregateDictionaryKey"));
  objc_msgSend(v10, "reportEvent:type:", v5, v11);

  objc_msgSend(v9, "setBulletinType:", 1401);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100155748;
  v20[3] = &unk_1002BB4A0;
  v21 = v9;
  v22 = v8;
  v12 = v6;
  v23 = v12;
  v13 = v8;
  v14 = v9;
  objc_msgSend(v13, "perform:", v20);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100155B6C;
  v17[3] = &unk_1002BB450;
  v15 = *(id *)(a1 + 40);
  v18 = v12;
  v19 = v15;
  v16 = v12;
  objc_msgSend(v13, "notifyOnMainQueueWithBlock:", v17);

}

void sub_100155748(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100155804;
  v6[3] = &unk_1002BE8A8;
  v4 = a1[4];
  v7 = a1[5];
  v8 = a1[4];
  v9 = a1[6];
  v10 = v3;
  v5 = v3;
  objc_msgSend(v4, "loadSessionWithHandler:", v6);

}

void sub_100155804(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100156648();
    objc_msgSend(*(id *)(a1 + 32), "setError:", v4);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "session"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "containerName"));
  +[GKCloudGameSession updateBadgeCountsForContainerName:](GKCloudGameSession, "updateBadgeCountsForContainerName:", v7);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100155940;
  v12[3] = &unk_1002BB590;
  v8 = *(void **)(a1 + 32);
  v13 = *(id *)(a1 + 40);
  v14 = *(id *)(a1 + 48);
  objc_msgSend(v8, "perform:", v12);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v9, v10, v11);

}

void sub_100155940(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001559EC;
  v6[3] = &unk_1002BB8F0;
  v7 = v4;
  v8 = *(id *)(a1 + 40);
  v9 = v3;
  v5 = v3;
  objc_msgSend(v7, "determineGameLocationOnDeviceOrInStoreWithCompletionHandler:", v6);

}

void sub_1001559EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  uint8_t v13[16];

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001565E8();
  }
  else if (objc_msgSend(*(id *)(a1 + 32), "gameLocation"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "gameDescriptor"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIdentifier"));

    objc_msgSend(*(id *)(a1 + 32), "localizeMessage");
    objc_msgSend(*(id *)(a1 + 32), "distributeData");
    if (GKGetApplicationStateForBundleID(v7) <= 3)
    {
      v8 = GKCopyLocalizedApplicationNameForDisplayIdentifier(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      objc_msgSend(*(id *)(a1 + 32), "setGameName:", v9);

      v10 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "displayNotification");
      if ((_DWORD)v10)
      {
        if (!os_log_GKGeneral)
          v11 = (id)GKOSLoggers(v10);
        v12 = os_log_GKDaemon;
        if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Assemble Bulletin", v13, 2u);
        }
        objc_msgSend(*(id *)(a1 + 32), "assembleBulletin");
        objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 32));
      }
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t sub_100155B6C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_100155CD0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSession:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "playersByIdentifier"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "senderID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));
    objc_msgSend(*(id *)(a1 + 32), "setSender:", v10);

  }
  else
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v6);
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_1001566E8();
  }
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v7);

}

void sub_1001561A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "session"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "createGKGameSession"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sender"));
  v6 = objc_msgSend(v5, "copy");

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "session"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "containerName"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[GKCloudGameSession obfuscatedIdentifierForPlayerIdentifier:containerName:](GKCloudGameSession, "obfuscatedIdentifierForPlayerIdentifier:containerName:", v7, v9));
  objc_msgSend(v6, "setIdentifier:", v10);

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v11 = v3;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v21;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v21 != v14)
          objc_enumerationMutation(v11);
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy clientForBundleID:pid:createIfNecessary:](GKClientProxy, "clientForBundleID:pid:createIfNecessary:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v15), 0, 0));
        if (v16)
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localizedMessage"));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "data"));
          objc_msgSend(v16, "session:didReceiveMessage:withData:fromPlayer:", v19, v17, v18, v6);

        }
        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v13);
  }

}

void sub_100156528()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "GKSessionBulletin - determineGameLocationOnDeviceOrInStoreWithCompletionHandler - Error getting compatibility matrix: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100156588()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "GKSessionBulletin - determineGameLocationOnDeviceOrInStoreWithCompletionHandler - Error loading store item: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1001565E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "GKSessionBulletin - Error determining game location: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100156648()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadSessionWithHandler - Error getting session: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_1001566A8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "loadSessionWithIdentifier - returning, no handler found", v1, 2u);
}

void sub_1001566E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000279B0();
  sub_100016C28((void *)&_mh_execute_header, v0, v1, "loadSessionWithID - Error getting session: %@", v2, v3, v4, v5, v6);
  sub_100016C20();
}

void sub_100156B54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  GKFriendSuggesterSettings *v10;
  GKFriendSuggesterSettings *v11;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6 || (v6 = objc_msgSend(v5, "count")) == 0)
  {
    if (!os_log_GKGeneral)
      v8 = (id)GKOSLoggers(v6);
    v9 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100156C80((uint64_t)v7, v9);
    v10 = objc_alloc_init(GKFriendSuggesterSettings);
  }
  else
  {
    v10 = -[GKFriendSuggesterSettings initWithBagValues:]([GKFriendSuggesterSettings alloc], "initWithBagValues:", v5);
  }
  v11 = v10;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100156C80(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to fetch suggestion settings: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100157480(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  _QWORD *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;

  v3 = a2;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1001576C0;
  v21[3] = &unk_1002C4FB8;
  v22 = *(id *)(a1 + 32);
  v23 = *(id *)(a1 + 40);
  v4 = v3;
  v24 = v4;
  v5 = objc_retainBlock(v21);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getRelationshipGameImage"));
  if (v6)
  {
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stringByReplacingOccurrencesOfString:withString:", CFSTR("{w}"), CFSTR("128")));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringByReplacingOccurrencesOfString:withString:", CFSTR("{h}"), CFSTR("128")));
    v10 = objc_msgSend(objc_alloc((Class)NSURL), "initWithString:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "getRelationshipGameAdamId"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_gkSHA256Hash"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%@"), v11, v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[GKService serviceWithTransport:forClient:credential:](GKUtilityService, "serviceWithTransport:forClient:credential:", 0, *(_QWORD *)(a1 + 48), 0));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1001577B0;
    v17[3] = &unk_1002C4FE0;
    v18 = v10;
    v19 = v13;
    v20 = v5;
    v15 = v13;
    v16 = v10;
    objc_msgSend(v14, "requestImageDataForURL:subdirectory:fileName:handler:", v16, CFSTR("GKBulletins"), v15, v17);

  }
  else
  {
    ((void (*)(_QWORD *, _QWORD))v5[2])(v5, 0);
  }

}

void sub_1001576C0(id *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;

  objc_msgSend(a1[4], "setGameIcon:", a2);
  objc_msgSend(a1[4], "assembleBulletin");
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100157778;
  v4[3] = &unk_1002BB568;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v3 = objc_retainBlock(v4);
  ((void (*)(void))v3[2])();

}

uint64_t sub_100157778(uint64_t a1)
{
  if ((objc_msgSend(*(id *)(a1 + 32), "isMalformed") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1001577B0(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  v3 = a2;
  v7 = v3;
  if (v3
    && +[GKImageRestrictions isAuthorizedForGamesWithImageData:](GKImageRestrictions, "isAuthorizedForGamesWithImageData:", v3))
  {
    v4 = objc_alloc((Class)NSURL);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _gkImageCachePathForURL:subdirectory:filename:](NSData, "_gkImageCachePathForURL:subdirectory:filename:", a1[4], CFSTR("GKBulletins"), a1[5]));
    v6 = objc_msgSend(v4, "initWithString:", v5);

  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();

}

uint64_t sub_100157868(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_10015836C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", a4, CFSTR("targetId"));
  return objc_msgSend(*(id *)(a1 + 40), "reportMetricsForActionID:withAdditionalFields:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

void sub_100158524(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  const __CFString *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  void *v20;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v6)
  {
    v6 = objc_msgSend(v5, "count");
    if (v6 == (id)1)
    {
      v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", 0));
      if (-[NSObject isArcadeGame](v8, "isArcadeGame"))
        v9 = CFSTR("arcade");
      else
        v9 = 0;
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, CFSTR("targetType"));
      goto LABEL_11;
    }
  }
  if (!os_log_GKGeneral)
    v10 = (id)GKOSLoggers(v6);
  v11 = (void *)os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    v8 = v11;
    v12 = objc_msgSend(v5, "count");
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedDescription"));
    *(_DWORD *)buf = 134218242;
    v18 = v12;
    v19 = 2112;
    v20 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GKActivityFeedBulletin getGameMetadataForBundleIDs returned %lu games and error: %@", buf, 0x16u);

LABEL_11:
  }
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 32);
  v16.receiver = *(id *)(a1 + 48);
  v16.super_class = (Class)GKActivityFeedBulletin;
  objc_msgSendSuper2(&v16, "reportMetricsForActionID:withAdditionalFields:", v14, v15);

}

void sub_100158D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100158D98(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  id WeakRetained;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t (**v17)(void);
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  id v27;

  v7 = a2;
  v8 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v10 = objc_msgSend(v7, "count");
  if (v8 || !v10)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", CFSTR("contact-association-ids")));
    v12 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", a4));
    v13 = (void *)v12;
    if (!os_log_GKGeneral)
      v14 = (id)GKOSLoggers(v12);
    v15 = os_log_GKContacts;
    if (os_log_type_enabled(os_log_GKContacts, OS_LOG_TYPE_DEBUG))
      sub_100159B08(a1, v15, v16);
    v17 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "transactionGroupProvider"));
    v18 = v17[2]();
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100158F54;
    v23[3] = &unk_1002C5058;
    v24 = v11;
    v25 = v13;
    v20 = *(id *)(a1 + 40);
    v26 = 0;
    v27 = v20;
    v21 = v13;
    v22 = v11;
    objc_msgSend(v19, "performOnManagedObjectContext:", v23);

  }
}

void sub_100158F54(_QWORD *a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  id v6;
  GKCDSuggestedFriends *v7;

  v5 = a3;
  v6 = a2;
  objc_msgSend(v6, "_gkClearAllEntriesOfEntity:", CFSTR("SuggestedFriends"));
  v7 = -[GKCDSuggestedFriends initWithContext:]([GKCDSuggestedFriends alloc], "initWithContext:", v6);

  -[GKCDSuggestedFriends setContactAssociationIDs:](v7, "setContactAssociationIDs:", a1[4]);
  -[GKCDSuggestedFriends setExpirationDate:](v7, "setExpirationDate:", a1[5]);
  (*(void (**)(void))(a1[7] + 16))();
  v5[2](v5);

}

void sub_1001595C4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "networkRequester"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100159674;
  v7[3] = &unk_1002C50A8;
  v9 = v3;
  v5 = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v6 = v3;
  objc_msgSend(v4, "requestSortedContactAssociationIDs:handler:", v5, v7);

}

void sub_100159674(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;

  v5 = a2;
  v6 = objc_msgSend(v5, "count");
  if (a3 || !v6)
  {
    if (!os_log_GKGeneral)
      v7 = (id)GKOSLoggers(v6);
    v8 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_100159C14(v8);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setResult:", v5);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100159A9C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_100027A34((void *)&_mh_execute_header, a2, a3, "Will rerank the following contact assocication IDs with the service: %@", (uint8_t *)&v3);
}

void sub_100159B08(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412290;
  v5 = v3;
  sub_100027A34((void *)&_mh_execute_header, a2, a3, "Received reranked contact assocication IDs from service: %@", (uint8_t *)&v4);
}

void sub_100159B78(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "cachedSortedAssociationIDs"));
  v6 = 138412290;
  v7 = v4;
  sub_100027A34((void *)&_mh_execute_header, v3, v5, "Will not rerank contact association IDs with service since we have cached values: %@", (uint8_t *)&v6);

}

void sub_100159C14(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No sorted contact association IDs found, falling back to original suggestions.", v1, 2u);
}

void sub_10015A348(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "GKBulletinNearbyInvite: initWithPlayer: - No message in Nearby Invite. Dropping on the floor", v1, 2u);
}

void sub_10015A5F8(id a1)
{
  dispatch_queue_t v1;
  void *v2;

  v1 = dispatch_queue_create("com.apple.gamed.GKBulletinController.file.queue", 0);
  v2 = (void *)qword_100318170;
  qword_100318170 = (uint64_t)v1;

}

void sub_10015A7A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  unsigned int v10;
  id v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bulletinStorageFilePathForEnvironment:", objc_msgSend(v4, "environment")));

  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringByAppendingString:", CFSTR(".doomed")));
  v7 = (void *)v6;
  if (!os_log_GKGeneral)
    v8 = (id)GKOSLoggers(v6);
  v9 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Removing bulletin store \"%@\".", buf, 0xCu);
  }
  v20 = 0;
  v10 = objc_msgSend(v2, "moveItemAtPath:toPath:error:", v5, v7, &v20);
  v11 = v20;
  v12 = v11;
  if (v10)
  {
    v19 = v11;
    v13 = objc_msgSend(v2, "removeItemAtPath:error:", v7, &v19);
    v14 = v19;

    if ((v13 & 1) == 0)
    {
      if (!os_log_GKGeneral)
        v16 = (id)GKOSLoggers(v15);
      if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
        sub_10015B96C();
    }
  }
  else
  {
    if (!os_log_GKGeneral)
      v17 = (id)GKOSLoggers(v11);
    v18 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      v22 = v5;
      v23 = 2112;
      v24 = v7;
      v25 = 2112;
      v26 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to move delayed requests store \"%@\" to \"%@\". ERROR: %@", buf, 0x20u);
    }
    v14 = v12;
  }

}

void sub_10015AAD4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  _BOOL8 v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  _BOOL8 v18;
  NSObject *v19;
  id v20;
  id v21;
  uint8_t buf[4];
  void *v23;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bulletinStorageFilePathForEnvironment:", objc_msgSend(v3, "environment")));

  if (!os_log_GKGeneral)
    v6 = (id)GKOSLoggers(v5);
  v7 = os_log_GKTrace;
  v8 = os_log_type_enabled(os_log_GKTrace, OS_LOG_TYPE_INFO);
  if (v8)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GKBulletinController+Common: updateSavedBulletins - Writing Bulletin Store", buf, 2u);
  }
  if (!os_log_GKGeneral)
    v9 = (id)GKOSLoggers(v8);
  v10 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "writing bulletin store \"%@\".", buf, 0xCu);
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bulletins"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v11));

  v21 = 0;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v12, 1, &v21));
  v14 = v21;
  v15 = v14;
  if (v14)
  {
    if (!os_log_GKGeneral)
      v16 = (id)GKOSLoggers(v14);
    v17 = os_log_GKError;
    v18 = os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
    if (v18)
      sub_10015BA44(v17);
    v19 = os_log_GKGeneral;
    if (!os_log_GKGeneral)
    {
      v20 = (id)GKOSLoggers(v18);
      v19 = os_log_GKGeneral;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      sub_10015B9D4();
  }
  objc_msgSend(v13, "writeToFile:atomically:", v4, 1);

}

void sub_10015AE08(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSSet *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  void *i;
  void *v32;
  void *v33;
  void *v34;
  NSObject *v35;
  id v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  id v51;
  uint8_t v52[128];
  uint8_t buf[4];
  uint64_t v54;

  v1 = *(void **)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[GKClientProxy gameCenterClient](GKClientProxy, "gameCenterClient"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bulletinStorageFilePathForEnvironment:", objc_msgSend(v2, "environment")));

  if (!os_log_GKGeneral)
    v5 = (id)GKOSLoggers(v4);
  v6 = os_log_GKDaemon;
  if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v54 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Reading bulletin store \"%@\".", buf, 0xCu);
  }
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerInviteBulletin), CFSTR("GKGameInviteBulletinMultiplayerTurnBased"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerTurnBulletin), CFSTR("GKPlayerTurnTurnBasedMultiplayerBulletin"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerCompletedBulletin), CFSTR("GKCompletedGameTurnBasedMultiplayerBulletinBased"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerTurnCountBulletin), CFSTR("GKUpdateTurnCountTurnBasedMultiplayerBulletin"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerClearBulletin), CFSTR("GKClearTurnBasedMultiplayerBulletin"));
  v46 = v3;
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerMatchChangedBulletin), CFSTR("GKMatchChangedTurnBasedMultiplayerBulletin"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerRequestedExchangeBulletin), CFSTR("GKRequestedExchangeTurnBasedMultiplayerBulletin"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerCompletedExchangeBulletin), CFSTR("GKCompletedExchangeTurnBasedMultiplayerBulletin"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerCanceledExchangeBulletin), CFSTR("GKCanceledExchangeTurnBasedMultiplayerBulletin"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerTurnReminderBulletin), CFSTR("GKTurnReminderTurnBasedMultiplayerBulletin"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKChallengeReceivedBulletin), CFSTR("GKBulletinChallengeReceive"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKChallengeCompletedBulletin), CFSTR("GKBulletinChallengeComplete"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerInviteBulletin), CFSTR("GKBulletinMultiplayerTurnBasedInvite"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerTurnBulletin), CFSTR("GKBulletinMultiplayerTurnBasedTurn"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerCompletedBulletin), CFSTR("GKBulletinMultiplayerTurnBasedCompleted"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerTurnCountBulletin), CFSTR("GKBulletinMultiplayerTurnBasedTurnCount"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerClearBulletin), CFSTR("GKBulletinMultiplayerTurnBasedClear"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerMatchChangedBulletin), CFSTR("GKBulletinMultiplayerTurnBasedMatchChanged"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerRequestedExchangeBulletin), CFSTR("GKBulletinMultiplayerTurnBasedExchangeRequested"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerCompletedExchangeBulletin), CFSTR("GKBulletinMultiplayerTurnBasedExchangeCompleted"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerCanceledExchangeBulletin), CFSTR("GKBulletinMultiplayerTurnBasedExchangeCanceled"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKTurnBasedMultiplayerTurnReminderBulletin), CFSTR("GKBulletinMultiplayerTurnBasedReminder"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKRealTimeMultiplayerInitiateBulletin), CFSTR("GKBulletinMultiplayerInviteInitiate"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKRealTimeMultiplayerAcceptBulletin), CFSTR("GKBulletinMultiplayerInviteAccept"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKRealTimeMultiplayerDeclineBulletin), CFSTR("GKBulletinMultiplayerInviteDecline"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKRealTimeMultiplayerCancelBulletin), CFSTR("GKBulletinMultiplayerInviteCancel"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKDeprecatedBulletin), CFSTR("GKFriendRequestReceivedBulletin"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKDeprecatedBulletin), CFSTR("GKFriendRequestBulletin"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKDeprecatedBulletin), CFSTR("GKFriendRequestAcceptedBulletin"));
  +[NSKeyedUnarchiver setClass:forClassName:](NSKeyedUnarchiver, "setClass:forClassName:", objc_opt_class(GKDeprecatedBulletin), CFSTR("GKFriendRequestCancelBulletin"));
  v45 = objc_opt_class(GKTurnBasedMultiplayerInviteBulletin);
  v44 = objc_opt_class(GKTurnBasedMultiplayerTurnBulletin);
  v43 = objc_opt_class(GKTurnBasedMultiplayerCompletedBulletin);
  v42 = objc_opt_class(GKTurnBasedMultiplayerTurnCountBulletin);
  v41 = objc_opt_class(GKTurnBasedMultiplayerClearBulletin);
  v40 = objc_opt_class(GKTurnBasedMultiplayerMatchChangedBulletin);
  v39 = objc_opt_class(GKTurnBasedMultiplayerRequestedExchangeBulletin);
  v7 = objc_opt_class(GKTurnBasedMultiplayerCompletedExchangeBulletin);
  v8 = objc_opt_class(GKTurnBasedMultiplayerCanceledExchangeBulletin);
  v9 = objc_opt_class(GKTurnBasedMultiplayerTurnReminderBulletin);
  v10 = objc_opt_class(GKChallengeReceivedBulletin);
  v11 = objc_opt_class(GKChallengeCompletedBulletin);
  v12 = objc_opt_class(GKRealTimeMultiplayerInitiateBulletin);
  v13 = objc_opt_class(GKRealTimeMultiplayerAcceptBulletin);
  v14 = objc_opt_class(GKRealTimeMultiplayerDeclineBulletin);
  v15 = objc_opt_class(GKRealTimeMultiplayerCancelBulletin);
  v37 = v13;
  v16 = (void *)v46;
  v17 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v45, v44, v43, v42, v41, v40, v39, v7, v8, v9, v10, v11, v12, v37, v14, v15, objc_opt_class(GKDeprecatedBulletin),
          0);
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](NSData, "dataWithContentsOfFile:", v46));
  v51 = 0;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v18, v19, &v51));
  v21 = v51;
  v22 = v21;
  if (!v21)
    goto LABEL_9;
  if (!os_log_GKGeneral)
    v23 = (id)GKOSLoggers(v21);
  v24 = (void *)os_log_GKError;
  v21 = (id)os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR);
  if ((_DWORD)v21)
  {
    sub_10015BAF4((uint64_t)v22, a1, v24);
    if (v20)
      goto LABEL_10;
  }
  else
  {
LABEL_9:
    if (v20)
    {
LABEL_10:
      v25 = objc_opt_class(NSMutableDictionary);
      if ((objc_opt_isKindOfClass(v20, v25) & 1) == 0)
      {
        v26 = objc_msgSend(v20, "mutableCopy");

        v20 = v26;
      }
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "allValues"));
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
      if (v28)
      {
        v29 = v28;
        v30 = *(_QWORD *)v48;
        do
        {
          for (i = 0; i != v29; i = (char *)i + 1)
          {
            if (*(_QWORD *)v48 != v30)
              objc_enumerationMutation(v27);
            v32 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v32, "conformsToProtocol:", &OBJC_PROTOCOL___GKDeprecated))
            {
              v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "recordID"));
              objc_msgSend(v20, "removeObjectForKey:", v33);

            }
          }
          v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
        }
        while (v29);
      }

      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bulletins"));
      objc_msgSend(v34, "addEntriesFromDictionary:", v20);

      v16 = (void *)v46;
      goto LABEL_27;
    }
  }
  v35 = os_log_GKGeneral;
  if (!os_log_GKGeneral)
  {
    v36 = (id)GKOSLoggers(v21);
    v35 = os_log_GKGeneral;
  }
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    sub_10015BA84(v46, v35);
LABEL_27:

}

void sub_10015B78C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  unsigned int v5;
  id v6;

  v6 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "matchID"));
  v5 = objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v5)
    objc_msgSend(*(id *)(a1 + 40), "withdrawBulletin:", v6);

}

void sub_10015B8F8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  unsigned int v6;
  id v7;

  v7 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "challenge"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "challengeID"));
  v6 = objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v6)
    objc_msgSend(*(id *)(a1 + 40), "withdrawBulletin:", v7);

}

void sub_10015B96C()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100016C38();
  sub_100027A70((void *)&_mh_execute_header, v0, (uint64_t)v0, "Failed to remove delayed requests store \"%@\". ERROR: %@", v1);
  sub_100016C20();
}

void sub_10015B9D4()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100016C38();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Failed to write bulletin store at: \"%@\" with error:%@", v1, 0x16u);
  sub_100016C20();
}

void sub_10015BA44(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "GKBulletinController+Common updateSavedBulletins - Failed to write bulletin store", v1, 2u);
}

void sub_10015BA84(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "No result after unarchiving file at \"%@\".", (uint8_t *)&v2, 0xCu);
  sub_100016C20();
}

void sub_10015BAF4(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v4;
  NSObject *v5;
  NSString *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;

  v4 = *(const char **)(a2 + 40);
  v5 = a3;
  v6 = NSStringFromSelector(v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9 = 138412546;
  v10 = a1;
  v11 = 2112;
  v12 = v7;
  sub_100027A70((void *)&_mh_execute_header, v5, v8, "error:%@ while decoding result archive in %@", (uint8_t *)&v9);

}

id sub_10015BD14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "sharedController");
}

void sub_10015BDE4(id a1)
{
  GKBulletinController *v1;
  void *v2;

  v1 = objc_alloc_init(GKBulletinController);
  v2 = (void *)qword_100318178;
  qword_100318178 = (uint64_t)v1;

}

void sub_10015C020(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  objc_msgSend(*(id *)(a1 + 32), "setBulletins:", v2);

}

void sub_10015C068(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  NSError *v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  id v10;
  NSObject *v11;
  int v12;
  void *v13;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    if (!os_log_GKGeneral)
      v6 = (id)GKOSLoggers(v4);
    v7 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v8 = v7;
      v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v5, "description"));
      v12 = 138412290;
      v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Error requesting authorization\nPlease make sure you read instructions in DEDUserNotificationNotifier.h\n[error info] %@", (uint8_t *)&v12, 0xCu);

    }
  }
  else if (!a2)
  {
    if (!os_log_GKGeneral)
      v10 = (id)GKOSLoggers(0);
    v11 = os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "The user denied notification privileges.", (uint8_t *)&v12, 2u);
    }
  }

}

void sub_10015D10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10015D134(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10015D144(uint64_t a1)
{

}

void sub_10015D14C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bulletins"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "notification"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "request"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v4));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_10015D3C8(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bulletins"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordID"));
  objc_msgSend(v3, "removeObjectForKey:", v2);

}

void sub_10015DC30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  void *v15;

  v14 = UNNotificationAttachmentOptionsHiddenFromDefaultExpandedViewKey;
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v3, "hiddenFromDefaultExpandedView")));
  v15 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "url"));

  v13 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UNNotificationAttachment attachmentWithIdentifier:URL:options:error:](UNNotificationAttachment, "attachmentWithIdentifier:URL:options:error:", v6, v7, v5, &v13));
  v9 = v13;

  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
  }
  else
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v10);
    v12 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10015E228((uint64_t)v9, v12);
  }

}

void sub_10015E00C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bulletins"));
  v2 = *(void **)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "recordID"));
  objc_msgSend(v4, "setObject:forKey:", v2, v3);

}

void sub_10015E160(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bulletins"));
  objc_msgSend(v1, "removeAllObjects");

}

void sub_10015E228(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to create UNNotificationAttachment: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10015E404(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (!os_log_GKGeneral)
      v5 = (id)GKOSLoggers(v3);
    v6 = os_log_GKError;
    if (os_log_type_enabled(os_log_GKError, OS_LOG_TYPE_ERROR))
      sub_10015E548((uint64_t)v4, v6);
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, _QWORD))(v7 + 16))(v7, 0);

}

void sub_10015E494(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Handling clear cache push notification", v1, 2u);
}

void sub_10015E4D4(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unrecognized command sent to contacts integration bulletin: %d", (uint8_t *)v2, 8u);
}

void sub_10015E548(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Received error when attempting to clear caches: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10015E708(uint64_t a1)
{
  void *v2;
  _BOOL8 v3;
  double v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v3 = objc_msgSend(v2, "userInterfaceLayoutDirection") == (id)1;

  v4 = *(double *)(a1 + 64);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[PRMonogramColor availableColors](PRMonogramColor, "availableColors"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 72)));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CNAvatarImageRenderingScope scopeWithPointSize:scale:rightToLeft:style:color:](CNAvatarImageRenderingScope, "scopeWithPointSize:scale:rightToLeft:style:color:", v3, 0, v6, *(double *)(a1 + 48), *(double *)(a1 + 56), v4));

  v8 = objc_alloc((Class)CNAvatarImageRenderer);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[CNAvatarImageRendererSettings defaultSettings](CNAvatarImageRendererSettings, "defaultSettings"));
  v10 = objc_msgSend(v8, "initWithSettings:", v9);

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10015E860;
  v13[3] = &unk_1002C51C8;
  v11 = *(_QWORD *)(a1 + 32);
  v14 = *(id *)(a1 + 40);
  v12 = objc_msgSend(v10, "renderMonogramForString:scope:imageHandler:", v11, v7, v13);

}

uint64_t sub_10015E860(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10015E9A0(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_1002DC710));
  v2 = (void *)qword_100318188;
  qword_100318188 = v1;

}

void sub_10015F3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a67;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10015F474(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10015F484(uint64_t a1)
{

}

void sub_10015F48C(_QWORD *a1, void *a2)
{
  void *v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  void *v21;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  id v28;

  v28 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "name"));
  v4 = objc_msgSend(v3, "isEqualToString:", GKActivityFeedMarkdownURLFormulationQueryIds);

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "value"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentsSeparatedByString:", CFSTR(",")));
    v7 = *(_QWORD *)(a1[4] + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

LABEL_20:
    goto LABEL_21;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "name"));
  v10 = objc_msgSend(v9, "isEqualToString:", GKActivityFeedMarkdownURLFormulationQueryAdamId);

  if (v10)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "value"));
    v12 = a1[5];
LABEL_19:
    v27 = *(_QWORD *)(v12 + 8);
    v5 = *(void **)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v11;
    goto LABEL_20;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "name"));
  v14 = objc_msgSend(v13, "isEqualToString:", GKActivityFeedMarkdownURLFormulationQueryBundleId);

  if (v14)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "value"));
    v12 = a1[6];
    goto LABEL_19;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "name"));
  v16 = objc_msgSend(v15, "isEqualToString:", GKActivityFeedMarkdownURLFormulationQueryPlayerId);

  if (v16)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "value"));
    v12 = a1[7];
    goto LABEL_19;
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "name"));
  v18 = objc_msgSend(v17, "isEqualToString:", GKActivityFeedMarkdownURLFormulationQueryName);

  if (v18)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "value"));
    v12 = a1[8];
    goto LABEL_19;
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "name"));
  v20 = objc_msgSend(v19, "isEqualToString:", GKActivityFeedMarkdownURLFormulationQueryActivityId);

  if (v20)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "value"));
    v12 = a1[9];
    goto LABEL_19;
  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "name"));
  v22 = objc_msgSend(v21, "isEqualToString:", GKActivityFeedMarkdownURLFormulationQueryActivityType);

  if (v22)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "value"));
    v12 = a1[10];
    goto LABEL_19;
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "name"));
  v24 = objc_msgSend(v23, "isEqualToString:", GKActivityFeedMarkdownURLFormulationQueryWidgetFamily);

  if (v24)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "value"));
    v12 = a1[11];
    goto LABEL_19;
  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "name"));
  v26 = objc_msgSend(v25, "isEqualToString:", GKMarkdownURLFormulationQueryWidgetId);

  if (v26)
  {
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "value"));
    v12 = a1[12];
    goto LABEL_19;
  }
LABEL_21:

}

void sub_1001604AC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "value"));
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "name"));
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v4, v6);

  }
}

void sub_100160534(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  const __CFString *v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[9];
  _QWORD v33[2];
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  uint64_t v44;
  _QWORD v45[4];
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v7)
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v9);
    v12 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v13 = v12;
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedDescription"));
      *(_DWORD *)buf = 138412290;
      v42 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "GKWidgetEventListener: Not reporting metric because invokeASCAppLaunchTrampoline failed with error: %@", buf, 0xCu);

    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 32);
    v45[0] = CFSTR("widgetId");
    v45[1] = CFSTR("size");
    v47 = *(_OWORD *)(a1 + 40);
    v45[2] = CFSTR("name");
    v45[3] = CFSTR("targetId");
    v16 = *(_QWORD *)(a1 + 56);
    v46 = v15;
    v48 = v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, v45, 4));
    v18 = objc_msgSend(v17, "mutableCopy");

    if (v10)
    {
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v10, CFSTR("targetId"));
    }
    else
    {
      if (!os_log_GKGeneral)
        v20 = (id)GKOSLoggers(v19);
      v21 = os_log_GKDaemon;
      if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
      {
        v22 = *(void **)(a1 + 32);
        v23 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v42 = v22;
        v43 = 2112;
        v44 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "GKWidgetEventListener: Unexpected nil value returned in targetId for widgetId: %@, size: %@", buf, 0x16u);
      }
    }
    v32[0] = CFSTR("eventType");
    v32[1] = CFSTR("actionType");
    v33[0] = CFSTR("click");
    v33[1] = CFSTR("navigate");
    v32[2] = CFSTR("pageType");
    v32[3] = CFSTR("widgetContext");
    v24 = *(_QWORD *)(a1 + 40);
    v34 = *(_QWORD *)(a1 + 32);
    v35 = v18;
    v32[4] = CFSTR("widgetId");
    v32[5] = CFSTR("size");
    v36 = v34;
    v37 = v24;
    v32[6] = CFSTR("targetId");
    v32[7] = CFSTR("destinationUrl");
    v25 = *(_QWORD *)(a1 + 48);
    v38 = *(_QWORD *)(a1 + 56);
    v39 = v10;
    v32[8] = CFSTR("location");
    v29 = CFSTR("name");
    v30 = v25;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
    v31 = v26;
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v31, 1));
    v40 = v27;
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v33, v32, 9));

    objc_msgSend(*(id *)(a1 + 64), "reportMetricsEventWithTopic:shouldFlush:metricsFields:", GKReporterCSTopic, &__kCFBooleanFalse, v28);
  }

}

void sub_100160878(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[7];
  _QWORD v22[2];
  uint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  uint8_t buf[4];
  void *v28;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v7)
  {
    if (!os_log_GKGeneral)
      v11 = (id)GKOSLoggers(v9);
    v12 = (void *)os_log_GKDaemon;
    if (os_log_type_enabled(os_log_GKDaemon, OS_LOG_TYPE_INFO))
    {
      v13 = v12;
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedDescription"));
      *(_DWORD *)buf = 138412290;
      v28 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "GKWidgetEventListener: Not reporting metric because invokeASCAppLaunchTrampoline failed with error: %@", buf, 0xCu);

    }
  }
  else
  {
    v21[0] = CFSTR("eventType");
    v21[1] = CFSTR("actionType");
    v22[0] = CFSTR("click");
    v22[1] = CFSTR("navigate");
    v15 = *(_QWORD *)(a1 + 40);
    v23 = *(_QWORD *)(a1 + 32);
    v21[2] = CFSTR("pageType");
    v21[3] = CFSTR("widgetContext");
    v19[0] = CFSTR("widgetId");
    v19[1] = CFSTR("size");
    v20[0] = v23;
    v20[1] = v15;
    v19[2] = CFSTR("targetId");
    v20[2] = *(_QWORD *)(a1 + 48);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 3));
    v25 = *(_OWORD *)(a1 + 32);
    v21[4] = CFSTR("widgetId");
    v21[5] = CFSTR("size");
    v21[6] = CFSTR("targetId");
    v17 = *(_QWORD *)(a1 + 48);
    v24 = v16;
    v26 = v17;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 7));

    objc_msgSend(*(id *)(a1 + 56), "reportMetricsEventWithTopic:shouldFlush:metricsFields:", GKReporterCSTopic, &__kCFBooleanFalse, v18);
  }

}

void sub_100160FCC()
{
  uint64_t v0;

  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_playerID + 8));
  sub_10016219C();
}

uint64_t sub_100161024()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendBiDirectional);
}

uint64_t sub_100161058()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendPlayedWith);
}

id sub_100161068()
{
  id v0;

  v0 = objc_allocWithZone((Class)sub_100162184());
  return sub_1001610B0();
}

id sub_1001610B0()
{
  char v0;
  _BYTE *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *ObjectType;
  _QWORD *v7;
  objc_super v9;

  v5 = sub_100162184();
  ObjectType = (objc_class *)swift_getObjectType(v5);
  v7 = &v1[OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_playerID];
  *v7 = v4;
  v7[1] = v3;
  v1[OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendBiDirectional] = v2;
  v1[OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendPlayedWith] = v0;
  v9.receiver = v1;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_100161168(void *a1)
{
  void *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  id v8;

  result = sub_100161EC0(a1);
  if (v4)
  {
    v5 = v4;
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5, v7);
    v8 = objc_msgSend(v1, "initWithPlayerID:friendBiDirectional:friendPlayedWith:", v6, objc_msgSend(a1, "friendBiDirectional"), objc_msgSend(a1, "friendPlayedWith"));

    return (uint64_t)v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100161220()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.GKFilterableFriend", 33, "init()", 6, 0);
  __break(1u);
}

id InsecureDatabaseMigrator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

_QWORD *sub_1001612EC()
{
  void *v0;
  id v1;
  void *v2;
  int64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = objc_msgSend(v0, "entries");
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = v1;
  if ((uint64_t)objc_msgSend(v1, "count") < 1)
  {
LABEL_12:

    return _swiftEmptyArrayStorage;
  }
  v3 = sub_100161454(v2);
  v5 = v3;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0)
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
    v6 = _CocoaArrayWrapper.endIndex.getter(v3);
    if (!v6)
      goto LABEL_11;
  }
  else
  {
    v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v6)
    {
LABEL_11:
      swift_bridgeObjectRelease(v5, v4);
      goto LABEL_12;
    }
  }
  result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v6);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      else
        v9 = *(id *)(v5 + 8 * v8 + 32);
      v10 = v9;
      ++v8;
      v11 = objc_allocWithZone((Class)type metadata accessor for GKFilterableFriend());
      v12 = sub_100161168(v10);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v13 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
    }
    while (v6 != v8);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

unint64_t sub_100161454(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[32];
  uint64_t v17;
  _OWORD v18[2];
  __int128 v19;
  uint64_t v20;
  unint64_t v21;

  v2 = type metadata accessor for NSFastEnumerationIterator(0);
  v15 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (unint64_t)_swiftEmptyArrayStorage;
  v5 = a1;
  NSOrderedSet.makeIterator()();

  v6 = sub_100161F20(&qword_100314A20, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(&v19, v2, v6);
  while (v20)
  {
    sub_100161F60(&v19, v18);
    sub_100161F70((uint64_t)v18, (uint64_t)v16);
    sub_100161FAC(0, &qword_100314A28, &off_1002BA3D0);
    if ((swift_dynamicCast(&v17, v16, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
      v17 = 0;
    v8 = sub_100161FE0(v18);
    v9 = v17;
    if (v17)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v11 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v10 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v11 >= v10 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized Array._endMutation()(v12);
    }
    dispatch thunk of IteratorProtocol.next()(&v19, v2, v6);
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v4, v2);
  return v21;
}

_QWORD *sub_10016162C(uint64_t a1, unsigned int a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = (_QWORD *)a1;
  if (!a1)
    goto LABEL_10;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0)
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v9 = a1;
    sub_1001621A4();
    if (_CocoaArrayWrapper.endIndex.getter(v9))
      goto LABEL_4;
    goto LABEL_9;
  }
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  sub_1001621A4();
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(v2, v5);
LABEL_10:
    sub_1001621A4();
    return v2;
  }
LABEL_4:
  v6 = sub_1001616D8(a2);
  v8 = v7;
  v2 = sub_10016181C((unint64_t)v2, (uint64_t (*)(id))v6, v7);
  swift_release(v8);
  return v2;
}

uint64_t (*sub_1001616D8(unsigned int a1))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 3)
    return off_1002C5618[a1];
  v8 = static GKLog.daemon.getter(v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 67109120;
    v13 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Ignoring unsupported friends filter: %d", v11, 8u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return static AppMetadataFetcher.FetcherError.__derived_enum_equals(_:_:);
}

_QWORD *sub_10016181C(unint64_t a1, uint64_t (*a2)(id), _QWORD *a3)
{
  uint64_t v3;
  uint64_t (*v5)(id);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(id);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v5 = a2;
  v6 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v24 = v6 & 0xFFFFFFFFFFFFFF8;
      v25 = v6 & 0xC000000000000001;
      v23 = v6;
      while (v25)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
LABEL_7:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v12 = a3;
        v13 = v5(v9);
        if (v3)
        {
          swift_bridgeObjectRelease(v6, v14);

          swift_release(_swiftEmptyArrayStorage);
          return v12;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v15 = v7;
          v16 = v5;
          v17 = a3;
          v18 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
          v19 = v18;
          a3 = v17;
          v5 = v16;
          v7 = v15;
          v6 = v23;
          v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v10);
          specialized ContiguousArray._endMutation()(v20);
        }
        else
        {

        }
        ++v8;
        if (v11 == v7)
        {
          v12 = _swiftEmptyArrayStorage;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v24 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v6 < 0)
        v21 = v6;
      else
        v21 = v6 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v7)
        goto LABEL_22;
    }
    v9 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_7;
  }
LABEL_22:
  v12 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v6, a2);
  return v12;
}

uint64_t static AppMetadataFetcher.FetcherError.__derived_enum_equals(_:_:)()
{
  return 1;
}

uint64_t sub_100161A40(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendBiDirectional);
}

uint64_t sub_100161A50(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC14GameDaemonCore18GKFilterableFriend_friendPlayedWith);
}

uint64_t variable initialization expression of GKLRUCache.cache()
{
  uint64_t v0;

  v0 = type metadata accessor for GKLRUDequeNode();
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, v0, &protocol witness table for AnyHashable);
}

uint64_t variable initialization expression of OverlayServiceUtils.dashboardClientProxy()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v0 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  __chkstk_darwin(v0);
  sub_100162164();
  v3 = v2 - v1;
  (*(void (**)(uint64_t, _QWORD))(v4 + 104))(v2 - v1, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:));
  v5 = objc_allocWithZone((Class)type metadata accessor for DashboardClientProxy(0));
  return DashboardClientProxy.init(serviceKind:)(v3);
}

void *variable initialization expression of PeerDiscovery.acceptedInBoundConnections()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t variable initialization expression of GKMetricsPipeline.$__lazy_storage_$_metricsPipeline@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for MetricsPipeline(0);
  return sub_100161B54(a1, 1, 1, v2);
}

uint64_t sub_100161B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t ArcadeStateMetricsFieldsProvider.category.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for MetricsFieldsProviderCategory.timeSensitive(_:);
  v3 = type metadata accessor for MetricsFieldsProviderCategory(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t variable initialization expression of MatchReporter.matchQueue()
{
  return sub_100161CB8((void (*)(void))&static DispatchQoS.unspecified.getter, 0x636552686374616DLL, 0xED0000726564726FLL);
}

uint64_t sub_100161BD0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100161C10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100314978;
  if (!qword_100314978)
  {
    v1 = sub_100161C54(&qword_100314970);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100314978);
  }
  return result;
}

uint64_t sub_100161C54(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of MultiplayerActivityEventFilter.serialQueue()
{
  return sub_10016217C((void (*)(void))&static DispatchQoS.default.getter, 63, 0x8000000100297060);
}

uint64_t sub_100161CB8(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v23;

  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100162164();
  v9 = v8 - v7;
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  sub_100162164();
  v13 = v12 - v11;
  v14 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v14);
  sub_100162164();
  v17 = v16 - v15;
  sub_100161FAC(0, (unint64_t *)&qword_100314960, OS_dispatch_queue_ptr);
  a1();
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_100161F20((unint64_t *)&qword_100314968, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_100161BD0(&qword_100314970);
  v20 = sub_100161C10();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v10, v18);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v5);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(a2, a3, v17, v13, v9, 0);
}

uint64_t variable initialization expression of GKGameModeListener.gameModeNotificationToken()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of GKGameModeListener.gameModeNotificationQueue()
{
  return sub_10016217C((void (*)(void))&static DispatchQoS.default.getter, 41, 0x80000001002970A0);
}

uint64_t type metadata accessor for GKFilterableFriend()
{
  return objc_opt_self(_TtC14GameDaemonCore18GKFilterableFriend);
}

uint64_t sub_100161E98@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = nullsub_34(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100161EC0(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "playerID");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100161F20(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *sub_100161F60(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100161F70(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100161FAC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v4;

  if (!*a2)
  {
    v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }
  sub_10016219C();
}

uint64_t sub_100161FE0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

__n128 initializeWithTake for ServerResponse(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_10016211C(a1, &qword_100314A30, (uint64_t)&unk_1002C5500);
}

uint64_t initializeBufferWithCopyOfBuffer for AppMetadataTask(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for AppMetadataTask(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100162060(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100162080(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_10016211C(a1, &qword_100314A38, (uint64_t)&unk_1002C5580);
}

uint64_t sub_1001620C0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1001620E0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_10016211C(a1, (unint64_t *)&unk_100314A40, (uint64_t)&unk_1002C5600);
}

void sub_10016211C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(a1, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
  sub_10016219C();
}

uint64_t _s14GameDaemonCore13PeerDiscoveryC8listener33_674604DC109586124CDCDC3171C542DDLLAA0D8ListenerCSgvpfi_0()
{
  return 0;
}

uint64_t sub_10016217C(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  return sub_100161CB8(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a3);
}

uint64_t sub_100162184()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001621A4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

id sub_1001621AC()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BiomeManager()), "init");
  static BiomeManager.shared = (uint64_t)result;
  return result;
}

uint64_t *BiomeManager.shared.unsafeMutableAddressor()
{
  if (qword_1003148E0 != -1)
    swift_once(&qword_1003148E0, sub_1001621AC);
  return &static BiomeManager.shared;
}

id static BiomeManager.shared.getter()
{
  if (qword_1003148E0 != -1)
    swift_once(&qword_1003148E0, sub_1001621AC);
  return (id)static BiomeManager.shared;
}

id sub_10016226C()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  char *v9;
  id (**v10)(uint64_t);
  id v11;
  uint64_t v12;
  objc_super v14;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = v1;
  v4 = (id)BiomeLibrary();
  v5 = objc_msgSend(v4, "GameCenter");
  swift_unknownObjectRelease(v4);
  v6 = objc_msgSend(v5, "AchievementEarned");
  swift_unknownObjectRelease(v5);
  v7 = objc_msgSend(v6, "source");

  v8 = swift_allocObject(&unk_1002C5640, 24, 7);
  *(_QWORD *)(v8 + 16) = v7;
  v9 = (char *)objc_allocWithZone(ObjectType);
  v10 = (id (**)(uint64_t))&v9[OBJC_IVAR___GKBiomeManager_achievementHandler];
  *v10 = sub_100162684;
  v10[1] = (id (*)(uint64_t))v8;
  v14.receiver = v9;
  v14.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v14, "init");
  v12 = swift_getObjectType(v3);
  swift_deallocPartialClassInstance(v3, v12, 24, 7);
  return v11;
}

void BiomeManager.__allocating_init(achievementHandler:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v7;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR___GKBiomeManager_achievementHandler];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  objc_msgSendSuper2(&v7, "init");
  sub_100162698();
}

void BiomeManager.init(achievementHandler:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  v6 = &v2[OBJC_IVAR___GKBiomeManager_achievementHandler];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v7.receiver = v2;
  v7.super_class = ObjectType;
  objc_msgSendSuper2(&v7, "init");
  sub_100162698();
}

void BiomeManager.logEarned(achievement:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  double v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;

  v2 = v1;
  v4 = objc_msgSend(a1, "rarityPercent");
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, "doubleValue");
    v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v6 / 100.0);

  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(a1, "identifier");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = objc_allocWithZone((Class)BMGameCenterAchievementEarned);
  v13 = v7;
  v14 = sub_1001625D4(v9, v11, v7);
  (*(void (**)(void))(v2 + OBJC_IVAR___GKBiomeManager_achievementHandler))();

}

id sub_1001625D4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v6;
  uint64_t v7;
  id v8;

  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v7);
  }
  else
  {
    v6 = 0;
  }
  v8 = objc_msgSend(v3, "initWithAchievementID:achievementRarityPercent:", v6, a3);

  return v8;
}

uint64_t type metadata accessor for BiomeManager()
{
  return objc_opt_self(GKBiomeManager);
}

uint64_t sub_100162660()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100162684(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "sendEvent:", a1);
}

uint64_t sub_1001627BC(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v5;

  *(_QWORD *)(v2 + 88) = 0;
  swift_weakInit(v2 + 96, 0);
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 32) = v5;
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(a1 + 32);
  sub_100161F60(a2, (_OWORD *)(v2 + 56));
  return v2;
}

uint64_t sub_10016286C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1001638F4(v0 + 16);
  sub_100161FE0((_QWORD *)(v0 + 56));
  swift_weakDestroy(v0 + 96);
  v1 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 88) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native(v1))
        break;
      v2 = *(_QWORD *)(v1 + 88);
      swift_retain(v2);
      swift_release(v1);
      v1 = v2;
    }
    while (v2);
  }
  swift_release(v1);
  return v0;
}

uint64_t sub_1001628E4()
{
  uint64_t v0;

  v0 = sub_10016286C();
  return swift_deallocClassInstance(v0, 104, 7);
}

id GKLRUCache.__allocating_init(capacity:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return GKLRUCache.init(capacity:)(a1);
}

id GKLRUCache.init(capacity:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  objc_class *ObjectType;
  objc_super v21;
  _QWORD *v22;

  v4 = v1;
  v18 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v6 = sub_100163AB4();
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(v6);
  __chkstk_darwin(v7);
  sub_100163AD0();
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode] = 0;
  v11 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache;
  v12 = type metadata accessor for GKLRUDequeNode();
  v13 = v4;
  *(_QWORD *)&v4[v11] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, v12, &protocol witness table for AnyHashable);
  *(_QWORD *)&v13[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_capacity] = v18;
  sub_100162B54();
  static DispatchQoS.default.getter();
  v22 = _swiftEmptyArrayStorage;
  v14 = sub_100162B90();
  v15 = sub_100161BD0(&qword_100314970);
  v16 = sub_100161C10();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v15, v16, v7, v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v19);
  *(_QWORD *)&v13[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_dispatchQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001FLL, 0x80000001002974B0, v10, v3, v2, 0);

  v21.receiver = v13;
  v21.super_class = ObjectType;
  return objc_msgSendSuper2(&v21, "init");
}

uint64_t type metadata accessor for GKLRUDequeNode()
{
  return objc_opt_self(_TtC14GameDaemonCoreP33_99CD75528634227EFA44F2FA82BB26BA14GKLRUDequeNode);
}

unint64_t sub_100162B54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100314960;
  if (!qword_100314960)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100314960);
  }
  return result;
}

unint64_t sub_100162B90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100314968;
  if (!qword_100314968)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_100314968);
  }
  return result;
}

Swift::Void __swiftcall GKLRUCache.clear()()
{
  char *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char *v6;
  char isEscapingClosureAtFileLocation;
  _QWORD v8[5];
  uint64_t v9;

  v1 = *(NSObject **)&v0[OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_dispatchQueue];
  v2 = sub_100163AE8((uint64_t)&unk_1002C5668, 24);
  *(_QWORD *)(v2 + 16) = v0;
  v3 = sub_100163AE8((uint64_t)&unk_1002C5690, 32);
  *(_QWORD *)(v3 + 16) = sub_100162DFC;
  *(_QWORD *)(v3 + 24) = v2;
  v8[4] = sub_100162E14;
  v9 = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100162E34;
  v8[3] = &unk_1002C56A8;
  v4 = _Block_copy(v8);
  v5 = v9;
  v6 = v0;
  swift_retain(v3);
  swift_release(v5);
  dispatch_sync(v1, v4);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 103, 55, 28, 1);
  swift_release(v2);
  swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

uint64_t sub_100162D14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v2 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 88);
    swift_retain_n(v4, 2);
    if (v4)
    {
      do
      {
        swift_release(v4);
        v5 = *(_QWORD *)(v4 + 88);
        swift_retain_n(v5, 2);
        swift_release(v4);
        v4 = v5;
      }
      while (v5);
    }
  }
  v6 = *(_QWORD *)(a1 + v2);
  *(_QWORD *)(a1 + v2) = 0;
  swift_release(v6);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache, v8, 33, 0);
  sub_100161BD0(&qword_100314BE8);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  return swift_endAccess(v8);
}

uint64_t sub_100162DD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100162DFC()
{
  uint64_t v0;

  return sub_100162D14(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100162E04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100162E14()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100162E34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100162E54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100162E64(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t GKLRUCache.insertValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  _QWORD aBlock[5];
  uint64_t v17;
  _OWORD v18[2];
  _OWORD v19[2];
  uint64_t v20;

  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = sub_100163AB4();
  v10 = type metadata accessor for DispatchWorkItemFlags(v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100163AD0();
  static DispatchWorkItemFlags.barrier.getter();
  sub_1001631F4(a2, (uint64_t)v19);
  sub_100161F70(a1, (uint64_t)v18);
  v12 = sub_100163AE8((uint64_t)&unk_1002C56E0, 96);
  *(_QWORD *)(v12 + 16) = v2;
  v13 = v19[1];
  *(_OWORD *)(v12 + 24) = v19[0];
  *(_OWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 56) = v20;
  sub_100161F60(v18, (_OWORD *)(v12 + 64));
  aBlock[4] = sub_100163264;
  v17 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100163518;
  aBlock[3] = &unk_1002C56F8;
  v14 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v2);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v3, v4, v14);
  _Block_release(v14);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v4, v10);
  return swift_release(v17);
}

uint64_t sub_100163034(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[2];
  _BYTE v16[40];

  v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache, v16, 32, 0);
  sub_100166D1C(a2, *v6);
  if (v7)
  {
    v8 = v7;
    swift_endAccess(v16);
    sub_100163274(v8);
    swift_beginAccess(v8 + 56, v16, 33, 0);
    sub_10016394C((_QWORD *)(v8 + 56), a3);
    swift_endAccess(v16);
    v9 = v8;
  }
  else
  {
    swift_endAccess(v16);
    sub_1001631F4(a2, (uint64_t)v16);
    sub_100161F70((uint64_t)a3, (uint64_t)v15);
    v10 = type metadata accessor for GKLRUDequeNode();
    swift_allocObject(v10, 104, 7);
    v11 = sub_1001627BC((uint64_t)v16, v15);
    swift_beginAccess(v6, v16, 33, 0);
    swift_retain(v11);
    sub_1001C09FC();
    swift_endAccess(v16);
    sub_1001633C8(v11);
    if (*(_QWORD *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_capacity) < *(_QWORD *)(*v6 + 16))
    {
      v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode);
      if (v12)
      {
        swift_beginAccess(v6, v16, 33, 0);
        swift_retain(v12);
        v13 = sub_100192488(v12 + 16);
        swift_endAccess(v16);
        swift_release(v13);
        sub_100163454();
        swift_release(v12);
      }
    }
    v9 = v11;
  }
  return swift_release(v9);
}

uint64_t sub_1001631F4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100163230()
{
  uint64_t v0;

  sub_100161FE0((_QWORD *)(v0 + 24));
  sub_100161FE0((_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100163264()
{
  uint64_t v0;

  return sub_100163034(*(_QWORD *)(v0 + 16), v0 + 24, (_QWORD *)(v0 + 64));
}

uint64_t sub_100163274(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
  if (v3)
    v4 = v3 == result;
  else
    v4 = 0;
  if (v4)
    return result;
  v5 = result;
  v6 = result + 96;
  Strong = swift_weakLoadStrong(result + 96);
  v8 = Strong;
  v9 = *(_QWORD *)(v5 + 88);
  if (!Strong)
  {
    swift_retain(*(_QWORD *)(v5 + 88));
    if (!v9)
      goto LABEL_8;
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(Strong + 88);
  *(_QWORD *)(Strong + 88) = v9;
  swift_retain_n(v9, 2);
  swift_release(v10);
  if (v9)
LABEL_7:
    swift_weakAssign(v9 + 96, v8);
LABEL_8:
  swift_weakAssign(v6, 0);
  v11 = *(_QWORD *)(v1 + v2);
  v12 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v5 + 88) = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = *(_QWORD *)(v1 + v2);
  if (v13)
  {
    swift_weakAssign(v13 + 96, v5);
    v14 = *(_QWORD *)(v1 + v2);
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(v1 + v2) = v5;
  swift_release(v14);
  v15 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode;
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode);
  if (v16)
  {
    swift_retain(v5);
    swift_release(v9);
    if (v16 == v5)
    {
      v17 = *(_QWORD *)(v1 + v15);
      *(_QWORD *)(v1 + v15) = v8;
      v8 = v17;
    }
  }
  else
  {
    swift_retain(v5);
    swift_release(v8);
    v8 = v9;
  }
  return swift_release(v8);
}

uint64_t sub_1001633C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
  v5 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(v1 + v3);
  if (v6)
  {
    swift_weakAssign(v6 + 96, a1);
    v7 = *(_QWORD *)(v1 + v3);
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)(v1 + v3) = a1;
  swift_release(v7);
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode))
  {
    *(_QWORD *)(v1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode) = a1;
    swift_retain(a1);
  }
  return swift_retain(a1);
}

void sub_100163454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v1 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_leastRecentNode);
  if (v2)
  {
    Strong = swift_weakLoadStrong(v2 + 96);
    v4 = Strong;
    if (Strong)
    {
      v5 = *(_QWORD *)(Strong + 88);
      *(_QWORD *)(Strong + 88) = 0;
      swift_retain(v2);
      swift_release(v5);
    }
    else
    {
      swift_retain(v2);
    }
    swift_weakAssign(v2 + 96, 0);
    v6 = OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode;
    v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_mostRecentNode);
    swift_release(v2);
    if (v7)
      v8 = v2 == v7;
    else
      v8 = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(v0 + v6);
      *(_QWORD *)(v0 + v6) = 0;
      swift_release(v9);
    }
    v10 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    swift_release(v10);
  }
}

uint64_t sub_100163518(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t GKLRUCache.getValue(forKey:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];

  v3[3] = a1;
  v1 = sub_100161BD0(&qword_1003159B0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10016371C, v3, v1);
}

double sub_100163640@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  _BYTE v10[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14GameDaemonCore10GKLRUCache_cache, v10, 32, 0);
  v4 = *v3;
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_100186098(), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
    swift_endAccess(v10);
    v8 = swift_retain(v7);
    sub_100163274(v8);
    swift_beginAccess(v7 + 56, v10, 0, 0);
    sub_100161F70(v7 + 56, (uint64_t)a2);
    swift_release(v7);
  }
  else
  {
    swift_endAccess(v10);
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_10016371C@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100163640(*(_QWORD *)(v1 + 16), a1);
}

id NetworkRequestEligibiltyChecker.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void GKLRUCache.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.GKLRUCache", 25, "init()", 6, 0);
  __break(1u);
}

uint64_t type metadata accessor for GKLRUCache()
{
  return objc_opt_self(_TtC14GameDaemonCore10GKLRUCache);
}

uint64_t sub_1001638F4(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

_QWORD *sub_100163928(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

_QWORD *sub_10016394C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

uint64_t sub_100163AB4()
{
  return 0;
}

uint64_t sub_100163AE8(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7);
}

uint64_t sub_100163AF0(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Class isa;
  uint64_t v16;
  objc_class *v17;
  id v18;
  id v19;
  Class v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  id v23;
  void *v24;
  Class v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t result;
  void *v41;
  uint64_t v42;
  Class v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  void *v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  objc_super v70;

  v67 = a1;
  v2 = sub_100161BD0(&qword_100314C18);
  v3 = __chkstk_darwin(v2);
  v66 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v62 - v5;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v62 - v12;
  v14 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14, v16);
  v17 = (objc_class *)type metadata accessor for ScoreSubmissionBulletin();
  v70.receiver = v1;
  v70.super_class = v17;
  v18 = objc_msgSendSuper2(&v70, "initWithPushNotification:", isa);

  if (!v18)
  {
    __break(1u);
    goto LABEL_20;
  }
  v19 = v18;
  Date.init()();
  v20 = Date._bridgeToObjectiveC()().super.isa;
  v21 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v22 = sub_100164574((uint64_t)v13);
  sub_100164568(v22, "setDate:");

  v23 = sub_10016455C();
  if (!v23)
  {
LABEL_20:
    sub_100164550((uint64_t)v6, 1);
    goto LABEL_21;
  }
  v24 = v23;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v65 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v65(v6, v13, v7);
  sub_100164550((uint64_t)v6, 0);
  if (sub_10016445C((uint64_t)v6, 1, v7) == 1)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    result = sub_100164550(v8, 1);
    goto LABEL_23;
  }
  Date.advanced(by:)(30.0);
  sub_100164574((uint64_t)v6);
  v25 = Date._bridgeToObjectiveC()().super.isa;
  v26 = sub_100164574((uint64_t)v11);
  sub_100164568(v26, "setExpirationDate:");

  sub_1001C0BBC(0x75532065726F6353, 0xEF64657474696D62, v19);
  v27 = v67;
  v28 = sub_1001644B8(v67, (SEL *)&selRef_formattedValue);
  v8 = (uint64_t)v66;
  if (v29)
  {
    v30 = v29;
    v63 = v28;
  }
  else
  {
    v68 = (uint64_t)objc_msgSend(v27, "value");
    v63 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v30 = v31;
  }
  v64 = v21;
  v32 = objc_msgSend(v27, "player");
  if (!v32)
  {
    v33 = objc_msgSend((id)objc_opt_self(GKLocalPlayer), "localPlayer");
    v32 = objc_msgSend(v33, "internal");

  }
  v34 = sub_1001644B8(v32, (SEL *)&selRef_alias);
  v36 = v35;
  if (qword_1003148E8 != -1)
    swift_once(&qword_1003148E8, sub_100164084);
  v37 = (void *)qword_10031B910;
  v38 = sub_10016455C();
  if (!v38)
    goto LABEL_22;
  v39 = v38;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v65((char *)v8, v13, v7);
  sub_100164550(v8, 0);
  result = sub_10016445C(v8, 1, v7);
  if ((_DWORD)result == 1)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  if (v36)
    v41 = v36;
  else
    v41 = (void *)0xE90000000000003ELL;
  v42 = 0x6E776F6E6B6E753CLL;
  if (v36)
    v42 = v34;
  v65 = (void (*)(char *, char *, uint64_t))v42;
  v43 = Date._bridgeToObjectiveC()().super.isa;
  v64(v8, v7);
  v44 = objc_msgSend(v37, "stringFromDate:", v43);

  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  v47 = v46;

  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(v69, v48);
  v68 = 0x206465726F6353;
  v69 = 0xE700000000000000;
  v49._countAndFlagsBits = v63;
  v49._object = v30;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v30, v50);
  sub_10016457C(544108320);
  v51 = v67;
  v52 = objc_msgSend(v67, "leaderboardIdentifier");
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  v55 = v54;

  v56._countAndFlagsBits = v53;
  v56._object = v55;
  String.append(_:)(v56);
  swift_bridgeObjectRelease(v55, v57);
  sub_10016457C(544825888);
  v58._countAndFlagsBits = (uint64_t)v65;
  v58._object = v41;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v41, v59);
  sub_10016457C(544497952);
  v60._countAndFlagsBits = v45;
  v60._object = v47;
  String.append(_:)(v60);
  swift_bridgeObjectRelease(v47, v61);
  sub_1001C0BC8(v68, v69, v19);
  objc_msgSend(v19, "setHasSound:", 0);

  return (uint64_t)v19;
}

void sub_100164084()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  sub_100164468(0x73733A6D6D3A4848, 0xEC0000005353532ELL, v0);
  qword_10031B910 = (uint64_t)v0;
}

id sub_1001640E4()
{
  if (qword_1003148E8 != -1)
    swift_once(&qword_1003148E8, sub_100164084);
  return (id)qword_10031B910;
}

void sub_100164138()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001BLL, 0x80000001002976F0, "GameDaemonCore/ScoreSubmissionBulletin.swift", 44, 2, 41, 0);
  __break(1u);
}

void sub_10016419C(uint64_t a1)
{
  id v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;

  v2 = objc_msgSend((id)objc_opt_self(GKPreferences), "shared");
  if (!v2)
  {
LABEL_21:
    __break(1u);
    return;
  }
  v3 = v2;
  v4 = objc_msgSend(v2, "notifyAboutScoreSubmissions");

  if (v4)
  {
    if ((unint64_t)a1 >> 62)
    {
LABEL_15:
      if (a1 < 0)
        v17 = a1;
      else
        v17 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v17);
      if (v5)
      {
LABEL_5:
        v7 = (void *)objc_opt_self(GKBulletinController);
        v8 = 4;
        while (1)
        {
          if ((a1 & 0xC000000000000001) != 0)
            v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1);
          else
            v9 = *(id *)(a1 + 8 * v8);
          v10 = v9;
          v11 = v8 - 3;
          if (__OFADD__(v8 - 4, 1))
          {
            __break(1u);
            goto LABEL_15;
          }
          v12 = objc_allocWithZone((Class)type metadata accessor for ScoreSubmissionBulletin());
          v13 = v10;
          v14 = (void *)sub_100163AF0(v13);
          v15 = objc_msgSend(v7, "sharedController");
          if (!v15)
            break;
          v16 = v15;
          objc_msgSend(v15, "presentBulletin:", v14);

          ++v8;
          if (v11 == v5)
            goto LABEL_12;
        }
        __break(1u);
        goto LABEL_21;
      }
    }
    else
    {
      v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v5)
        goto LABEL_5;
    }
LABEL_12:
    swift_bridgeObjectRelease(a1, v6);
  }
}

void sub_10016436C()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.ScoreSubmissionBulletin", 38, "init(pushNotification:)", 23, 0);
  __break(1u);
}

void sub_1001643D0()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.ScoreSubmissionBulletin", 38, "init()", 6, 0);
  __break(1u);
}

id sub_100164408()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScoreSubmissionBulletin();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ScoreSubmissionBulletin()
{
  return objc_opt_self(GKScoreSubmissionBulletin);
}

uint64_t sub_10016445C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

void sub_100164468(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v5);
  objc_msgSend(a3, "setDateFormat:", v6);

}

uint64_t sub_1001644B8(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

unint64_t sub_100164514()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100314C20;
  if (!qword_100314C20)
  {
    v1 = objc_opt_self(GKScoreInternal);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100314C20);
  }
  return result;
}

uint64_t sub_100164550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100161B54(a1, a2, 1, v2);
}

id sub_10016455C()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2328));
}

id sub_100164568(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_100164574(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_10016457C(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE400000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100164584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (!a4)
    return 0;
  v8 = sub_100164810();
  v13 = sub_1001648AC(v8, (uint64_t)&type metadata for String, v9, v10, v11, v12, a3, a4);
  if ((v13 & 1) != 0)
    return 0;
  v18 = sub_1001648AC(v13, (uint64_t)&type metadata for String, v14, v15, v16, v17, a1, a2);
  if ((v18 & 1) != 0)
    return 0;
  v22 = sub_100164890(v18, v19, v20, v21, a3, a4);
  result = sub_100164890(v22, v23, v24, v25, a1, a2);
  v28 = result;
  v29 = *(_QWORD *)(v22 + 16);
  if (!v29)
  {
    sub_1001648C4(result, v27);
    swift_bridgeObjectRelease(v28, v46);
    return 0;
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = *(_QWORD *)(result + 16);
  do
  {
    if (v32 >= v29)
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v31 >= v33)
      goto LABEL_32;
    v34 = (uint64_t *)(v22 + 32 + 16 * v32);
    result = *v34;
    v35 = v34[1];
    v36 = (_QWORD *)(v28 + 32 + 16 * v31);
    v37 = v36[1];
    v38 = result == *v36 && v35 == v37;
    if (v38 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v35, *v36, v37, 0), (result & 1) != 0))
    {
      ++v32;
      ++v31;
    }
    else
    {
      v38 = v31 == 0;
      v31 = 0;
      if (v38)
        v30 = v32 + 1;
      else
        v30 = v32;
      v32 = v30;
    }
  }
  while ((uint64_t)v32 < (uint64_t)v29);
  result = swift_bridgeObjectRelease(v28, v35);
  if ((uint64_t)v30 >= (uint64_t)v29)
  {
    sub_1001648C4(result, v39);
    return 0;
  }
  if ((v30 & 0x8000000000000000) != 0)
    goto LABEL_33;
  v40 = *(_QWORD *)(v22 + 16);
  if (v40 >= v30 && v40 >= v29)
  {
    v42 = sub_100161BD0(&qword_100314C30);
    v43 = sub_10016484C();
    v44 = BidirectionalCollection<>.joined(separator:)(46, 0xE100000000000000, v42, v43);
    sub_1001648C4(v44, v45);
    return v44;
  }
LABEL_34:
  __break(1u);
  return result;
}

unint64_t sub_100164810()
{
  unint64_t result;

  result = qword_100314C28;
  if (!qword_100314C28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100314C28);
  }
  return result;
}

unint64_t sub_10016484C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100314C38;
  if (!qword_100314C38)
  {
    v1 = sub_100161C54(&qword_100314C30);
    result = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100314C38);
  }
  return result;
}

uint64_t sub_100164890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  return StringProtocol.components<A>(separatedBy:)(va, v5, v5, v4, v4);
}

uint64_t sub_1001648AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  return StringProtocol.contains<A>(_:)(va, a2, a2, v6, v6);
}

uint64_t sub_1001648C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_1001648CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  v2[16] = swift_task_alloc(v5);
  v2[17] = swift_task_alloc(v5);
  v6 = type metadata accessor for NWError(0);
  v2[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[19] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v8);
  v2[21] = swift_task_alloc(v8);
  v9 = type metadata accessor for NWBrowser.State(0);
  v2[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[23] = v10;
  v2[24] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001649B4, 0, 0);
}

uint64_t sub_1001649B4()
{
  NSObject *v0;
  uint64_t *v1;
  uint64_t v2;
  uint8_t *v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  os_log_type_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  BOOL v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t Strong;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;

  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 32);
  *(_QWORD *)(v2 + 200) = v6;
  if (!v6)
    goto LABEL_26;
  v3 = (uint8_t *)(v2 + 64);
  v4 = (uint8_t *)(v2 + 80);
  v5 = *(_QWORD *)(v2 + 184);
  v0 = *(NSObject **)(v2 + 192);
  (*(void (**)(NSObject *, _QWORD, _QWORD))(v5 + 16))(v0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 176));
  v7 = sub_100165E7C();
  v9 = v8(v7);
  if (v9 != enum case for NWBrowser.State.failed(_:))
  {
    v1 = (uint64_t *)(v2 + 56);
    if (v9 == enum case for NWBrowser.State.ready(_:))
    {
      v29 = sub_100165E90();
      v30 = static os_log_type_t.info.getter(v29);
      v31 = sub_100165E64();
      v0 = Logger.logObject.getter(v31);
      v32 = v30;
      v33 = os_log_type_enabled(v0, v30);
      v4 = *(uint8_t **)(v2 + 120);
      v5 = *(_QWORD *)(v2 + 96);
      v34 = *(_QWORD *)(v2 + 104);
      if (!v33)
      {

        (*(void (**)(uint8_t *, uint64_t))(v34 + 8))(v4, v5);
        goto LABEL_25;
      }
      v77 = *(_QWORD *)(v2 + 96);
      v74 = *(_QWORD *)(v2 + 120);
      v4 = (uint8_t *)sub_100165DA4(12);
      v35 = sub_100165DA4(32);
      v79 = v35;
      v71 = v34;
      *(_DWORD *)v4 = 136315138;
      v5 = (uint64_t)(v4 + 4);
      *v1 = sub_10016FE60(0x20726573776F7242, 0xEE002E7964616572, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 56, v2 + 64);
      sub_100165E04((void *)&_mh_execute_header, v0, v32, "Nearby - %s", v4);
      sub_100165DAC((uint64_t)&type metadata for Any);
      sub_100165D98(v35);
      v36 = (uint64_t)v4;
    }
    else
    {
      if (v9 != enum case for NWBrowser.State.cancelled(_:))
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 184) + 8))(*(_QWORD *)(v2 + 192), *(_QWORD *)(v2 + 176));
        goto LABEL_26;
      }
      v46 = sub_100165E90();
      v47 = static os_log_type_t.info.getter(v46);
      v48 = sub_100165E64();
      v0 = Logger.logObject.getter(v48);
      v5 = v47;
      v49 = os_log_type_enabled(v0, v47);
      v50 = *(_QWORD *)(v2 + 104);
      v3 = *(uint8_t **)(v2 + 112);
      v4 = *(uint8_t **)(v2 + 96);
      if (!v49)
      {

        (*(void (**)(uint8_t *, uint8_t *))(v50 + 8))(v3, v4);
        goto LABEL_25;
      }
      v77 = *(_QWORD *)(v2 + 96);
      v74 = *(_QWORD *)(v2 + 112);
      v3 = (uint8_t *)sub_100165DA4(12);
      v51 = sub_100165DA4(32);
      v79 = v51;
      v71 = v50;
      *(_DWORD *)v3 = 136315138;
      v4 = v3 + 4;
      *(_QWORD *)(v2 + 48) = sub_10016FE60(0xD000000000000011, 0x8000000100297780, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 48, v2 + 56);
      sub_100165E04((void *)&_mh_execute_header, v0, (os_log_type_t)v5, "Nearby - %s", v3);
      sub_100165DAC((uint64_t)&type metadata for Any);
      sub_100165D98(v51);
      v36 = (uint64_t)v3;
    }
    sub_100165D98(v36);

    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v74, v77);
LABEL_25:
    swift_release(v6);
    goto LABEL_26;
  }
  v10 = *(_QWORD *)(v2 + 192);
  v11 = *(_QWORD *)(v2 + 168);
  v12 = *(_QWORD *)(v2 + 152);
  v5 = *(_QWORD *)(v2 + 160);
  v13 = *(_QWORD *)(v2 + 144);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 184) + 96))(v10, *(_QWORD *)(v2 + 176));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v11, v10, v13);
  *(_DWORD *)v5 = -65569;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v5, enum case for NWError.dns(_:), v13);
  sub_100165E90();
  LOBYTE(v10) = static NWError.== infix(_:_:)(v11, v5);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
  *(_QWORD *)(v2 + 208) = v14;
  v15 = v14(v5, v13);
  LOBYTE(v5) = static os_log_type_t.info.getter(v15);
  v16 = *(_QWORD *)(v2 + 168);
  v17 = *(_QWORD *)(v2 + 144);
  if ((v10 & 1) != 0)
  {
    v76 = (uint64_t *)(v2 + 72);
    v79 = 0;
    v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0xE000000000000000;
    v18._countAndFlagsBits = sub_100165EC0();
    String.append(_:)(v18);
    _print_unlocked<A, B>(_:_:)(v16, v2 + 32, v17);
    v19._countAndFlagsBits = 0x726174736572202CLL;
    v19._object = (void *)0xEC000000676E6974;
    String.append(_:)(v19);
    v3 = *(uint8_t **)(v2 + 40);
    v73 = *(_QWORD *)(v2 + 32);
    static GKLog.match.getter(v20);
    v21 = swift_bridgeObjectRetain_n(v3, 2);
    v22 = Logger.logObject.getter(v21);
    v23 = v5;
    v24 = os_log_type_enabled(v22, (os_log_type_t)v5);
    v25 = *(_QWORD *)(v2 + 136);
    v5 = *(_QWORD *)(v2 + 104);
    if (v24)
    {
      v70 = *(_QWORD *)(v2 + 96);
      v68 = *(_QWORD *)(v2 + 104);
      v5 = sub_100165DA4(12);
      v67 = v25;
      v26 = sub_100165DA4(32);
      v79 = v26;
      *(_DWORD *)v5 = 136315138;
      swift_bridgeObjectRetain(v3);
      *v76 = sub_10016FE60(v73, (unint64_t)v3, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v76, v2 + 80);
      swift_bridgeObjectRelease_n(v3, 3);
      sub_100165E04((void *)&_mh_execute_header, v22, v23, "Nearby - %s", (uint8_t *)v5);
      sub_100165DFC(v26, v27, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v26);
      sub_100165D98(v5);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v70);
    }
    else
    {

      swift_bridgeObjectRelease_n(v3, 2);
      v52 = sub_100165E7C();
      v54(v52, v53);
    }
    swift_bridgeObjectRelease(v3, v28);
    v1 = *(uint64_t **)(v2 + 88);
    NWBrowser.cancel()();
    v0 = v1;
    sub_100165274();
  }
  else
  {
    v78 = (uint64_t *)(v2 + 64);
    v79 = 0;
    v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0xE000000000000000;
    v37._countAndFlagsBits = sub_100165EC0();
    String.append(_:)(v37);
    _print_unlocked<A, B>(_:_:)(v16, v2 + 16, v17);
    v38._countAndFlagsBits = 0x6970706F7473202CLL;
    v38._object = (void *)0xEA0000000000676ELL;
    String.append(_:)(v38);
    v3 = *(uint8_t **)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    static GKLog.match.getter(v39);
    v40 = swift_bridgeObjectRetain_n(v6, 2);
    v41 = Logger.logObject.getter(v40);
    v5 = v5;
    v42 = os_log_type_enabled(v41, (os_log_type_t)v5);
    v1 = *(uint64_t **)(v2 + 96);
    v4 = *(uint8_t **)(v2 + 104);
    if (v42)
    {
      v75 = *(_QWORD *)(v2 + 104);
      v72 = *(_QWORD *)(v2 + 128);
      v43 = (uint8_t *)sub_100165DA4(12);
      v69 = v1;
      v1 = (uint64_t *)(v2 + 72);
      v44 = sub_100165DA4(32);
      v79 = v44;
      *(_DWORD *)v43 = 136315138;
      v4 = v43 + 4;
      swift_bridgeObjectRetain(v6);
      *v78 = sub_10016FE60((uint64_t)v3, v6, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, v2 + 72);
      swift_bridgeObjectRelease_n(v6, 3);
      sub_100165E04((void *)&_mh_execute_header, v41, (os_log_type_t)v5, "Nearby - %s", v43);
      sub_100165DAC((uint64_t)&type metadata for Any);
      sub_100165D98(v44);
      sub_100165D98((uint64_t)v43);

      (*(void (**)(uint64_t, uint64_t *))(v75 + 8))(v72, v69);
    }
    else
    {

      swift_bridgeObjectRelease_n(v6, 2);
      v55 = sub_100165E7C();
      v57(v55, v56);
    }
    swift_bridgeObjectRelease(v6, v45);
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v2 + 88) + 16);
    *(_QWORD *)(v2 + 216) = Strong;
    if (Strong)
    {
      v59 = *(_QWORD *)(v2 + 168);
      v60 = *(_QWORD *)(v2 + 144);
      v61 = *(_QWORD *)(v2 + 152);
      v62 = sub_100165D54();
      v63 = swift_allocError(v60, v62, 0, 0);
      *(_QWORD *)(v2 + 224) = v63;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v64, v59, v60);
      v65 = (_QWORD *)swift_task_alloc(dword_100315234);
      *(_QWORD *)(v2 + 232) = v65;
      *v65 = v2;
      v65[1] = sub_1001651A8;
      return sub_10017BECC(v63);
    }
    v0 = *(NSObject **)(v2 + 200);
    NWBrowser.cancel()();
  }
  sub_100165E54();
  sub_100165EB4();
LABEL_26:
  sub_100165E0C();
  swift_task_dealloc(v0);
  swift_task_dealloc(v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1001651A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  sub_100165DBC();
  swift_unknownObjectRelease(v2);
  swift_errorRelease(v1);
  return swift_task_switch(sub_1001651FC, 0, 0);
}

uint64_t sub_1001651FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(v2 + 200);
  NWBrowser.cancel()();
  sub_100165E54();
  sub_100165EB4();
  sub_100165E0C();
  swift_task_dealloc(v6);
  swift_task_dealloc(v0);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return sub_100165E20(*(uint64_t (**)(void))(v2 + 8));
}

void sub_100165274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0;
  v2 = type metadata accessor for NWBrowser.Descriptor(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = sub_100165DE4();
  v9 = sub_100165E64();
  v10 = Logger.logObject.getter(v9);
  v11 = v8;
  if (os_log_type_enabled(v10, v8))
  {
    v29 = v2;
    v12 = (uint8_t *)sub_100165DA4(12);
    v13 = sub_100165DA4(32);
    v30 = v0;
    v14 = v13;
    v31 = v13;
    v28 = v6;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_10016FE60(0xD000000000000011, 0x8000000100297760, &v31);
    v16 = sub_100165EE0(v15);
    v2 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v16, v17);
    sub_100165E04((void *)&_mh_execute_header, v10, v11, "Nearby - %s", v12);
    sub_100165DFC(v14, v18, (uint64_t)&type metadata for Any + 8);
    v19 = v14;
    v1 = v30;
    sub_100165D98(v19);
    sub_100165D98((uint64_t)v12);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v28);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v6);
  }
  v20 = type metadata accessor for NWParameters(0);
  sub_100165ED4(v20);
  v21 = NWParameters.init()();
  NWParameters.includePeerToPeer.setter(1);
  *v5 = 0x5F2E64656D61675FLL;
  v5[1] = 0xEB00000000706374;
  v5[2] = 0;
  v5[3] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for NWBrowser.Descriptor.bonjourWithTXTRecord(_:), v2);
  v22 = type metadata accessor for NWBrowser(0);
  sub_100165ED4(v22);
  swift_retain(v21);
  v23 = NWBrowser.init(for:using:)(v5, v21);
  v24 = sub_100165E6C();
  sub_100165EA0(v24);
  swift_retain(v24);
  sub_100165B44((uint64_t)sub_100165B78, v24);
  NWBrowser.stateUpdateHandler.setter(sub_100165B78, v24);
  swift_release_n(v24, 2);
  v25 = sub_100165E6C();
  sub_100165EA0(v25);
  swift_retain(v25);
  sub_100165B44((uint64_t)sub_100165B80, v25);
  NWBrowser.browseResultsChangedHandler.setter(sub_100165B80, v25);
  swift_release_n(v25, 2);
  *(_QWORD *)(v1 + 32) = v23;
  swift_retain(v23);
  sub_100165E88();
  sub_100162B54();
  v26 = (void *)static OS_dispatch_queue.main.getter();
  NWBrowser.start(queue:)();

  swift_release(v23);
  swift_release(v21);
  sub_100165DCC();
}

uint64_t sub_100165570(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v18[24];

  v4 = type metadata accessor for NWBrowser.State(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v7);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v18, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    v12 = type metadata accessor for TaskPriority(0);
    sub_100161B54((uint64_t)v9, 1, 1, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], a1, v4);
    v13 = *(unsigned __int8 *)(v5 + 80);
    v14 = (v13 + 40) & ~v13;
    v15 = (char *)swift_allocObject(&unk_1002C5780, v14 + v6, v13 | 7);
    *((_QWORD *)v15 + 2) = 0;
    *((_QWORD *)v15 + 3) = 0;
    *((_QWORD *)v15 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v15[v14], &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v4);
    sub_1001BDE9C();
    return swift_release(v16);
  }
  return result;
}

uint64_t sub_1001656D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_100314D14);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_100165D94;
  return sub_1001648CC(a5);
}

uint64_t sub_100165724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[24];

  v6 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a3 += 16;
  swift_beginAccess(a3, v15, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v10 = result;
    v11 = type metadata accessor for TaskPriority(0);
    sub_100161B54((uint64_t)v8, 1, 1, v11);
    v12 = (_QWORD *)swift_allocObject(&unk_1002C5758, 56, 7);
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = v10;
    v12[5] = a1;
    v12[6] = a2;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    sub_1001BDF68();
    return swift_release(v13);
  }
  return result;
}

uint64_t sub_100165828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return swift_task_switch(sub_100165844, 0, 0);
}

uint64_t sub_100165844()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  _QWORD *v3;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 16);
  *(_QWORD *)(v0 + 48) = Strong;
  if (Strong)
  {
    v2 = *(_QWORD *)(v0 + 40);
    v3 = (_QWORD *)swift_task_alloc(dword_1003151BC);
    *(_QWORD *)(v0 + 56) = v3;
    *v3 = v0;
    v3[1] = sub_1001658CC;
    return sub_10017ADB4(*(_QWORD *)(v0 + 32), v2);
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return sub_100165E20(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1001658CC()
{
  uint64_t v0;
  uint64_t v1;

  sub_100165E44();
  v1 = *(_QWORD *)(v0 + 48);
  sub_100165DBC();
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_100165914, 0, 0);
}

uint64_t sub_100165914()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 48) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100165930()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for Logger(0);
  __chkstk_darwin(v1);
  v2 = sub_100165DE4();
  v3 = sub_100165E64();
  v4 = Logger.logObject.getter(v3);
  v5 = v2;
  if (os_log_type_enabled(v4, v2))
  {
    v6 = (uint8_t *)sub_100165DA4(12);
    v7 = sub_100165DA4(32);
    v15 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = sub_10016FE60(0xD000000000000015, 0x8000000100297740, &v15);
    v9 = sub_100165EE0(v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v10);
    sub_100165E04((void *)&_mh_execute_header, v4, v5, "Nearby - %s", v6);
    sub_100165DFC(v7, v11, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v7);
    sub_100165D98((uint64_t)v6);
  }

  v12 = sub_100165E7C();
  v13(v12);
  if (!*(_QWORD *)(v0 + 32))
    goto LABEL_7;
  sub_100165EAC();
  sub_100165B44(0, 0);
  NWBrowser.stateUpdateHandler.setter(0, 0);
  sub_100165E88();
  if (!*(_QWORD *)(v0 + 32))
    goto LABEL_7;
  sub_100165EAC();
  sub_100165B44(0, 0);
  NWBrowser.browseResultsChangedHandler.setter(0, 0);
  sub_100165E88();
  if (*(_QWORD *)(v0 + 32))
  {
    sub_100165EAC();
    NWBrowser.cancel()();
    sub_100165E88();
    v14 = *(_QWORD *)(v0 + 32);
  }
  else
  {
LABEL_7:
    v14 = 0;
  }
  *(_QWORD *)(v0 + 32) = 0;
  swift_release(v14);
  sub_100165DCC();
}

uint64_t sub_100165AD8()
{
  uint64_t v0;

  sub_100165B20(v0 + 16);
  sub_100165E98();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for PeerBrowser()
{
  return objc_opt_self(_TtC14GameDaemonCore11PeerBrowser);
}

uint64_t sub_100165B20(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_100165B44(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100165B54()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100165B78(uint64_t a1)
{
  uint64_t v1;

  return sub_100165570(a1, v1);
}

uint64_t sub_100165B80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100165724(a1, a2, v2);
}

uint64_t sub_100165B88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease(v0[2]);
  sub_100165E98();
  swift_bridgeObjectRelease(v0[5], v1);
  swift_bridgeObjectRelease(v0[6], v2);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100165BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (_QWORD *)swift_task_alloc(dword_100314CF4);
  *(_QWORD *)(v1 + 16) = v4;
  v5 = sub_100165E28(v4);
  return sub_100165828(v5, v6, v7, v8, v2, v3);
}

uint64_t sub_100165C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for NWBrowser.State(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100165E98();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v6 = sub_100165E7C();
  return swift_deallocObject(v6, v7, v5);
}

uint64_t sub_100165CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NWBrowser.State(0) - 8) + 80);
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_100314D04);
  *(_QWORD *)(v1 + 16) = v4;
  v5 = sub_100165E28(v4);
  return sub_1001656D0(v5, v6, v7, v8, v3);
}

uint64_t sub_100165D20()
{
  uint64_t v0;

  sub_100165E44();
  sub_100165DBC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100165D54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100314D18;
  if (!qword_100314D18)
  {
    v1 = type metadata accessor for NWError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NWError, v1);
    atomic_store(result, (unint64_t *)&qword_100314D18);
  }
  return result;
}

uint64_t sub_100165D98(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

uint64_t sub_100165DA4(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

uint64_t sub_100165DAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_arrayDestroy(v1, 1, a1 + 8);
}

uint64_t sub_100165DBC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t sub_100165DE4()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_100165DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 1, a3);
}

void sub_100165E04(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_100165E0C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 192));
}

uint64_t sub_100165E20(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100165E28(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_100165E44()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_100165E54()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 200));
}

uint64_t sub_100165E64()
{
  return static GKLog.match.getter();
}

uint64_t sub_100165E6C()
{
  uint64_t v0;

  return swift_allocObject(v0, 24, 7);
}

uint64_t sub_100165E7C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100165E88()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100165E90()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100165E98()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100165EA0(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_100165EAC()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100165EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

unint64_t sub_100165EC0()
{
  return 0xD000000000000014;
}

uint64_t sub_100165ED4(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_100165EE0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

void static OverlayServiceUtils.showDashboard(game:deepLink:launchContext:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  sub_100166CC4();
  v1 = v0;
  v3 = v2;
  v4 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100162164();
  v8 = v7 - v6;
  swift_bridgeObjectRetain(v1);
  v9 = sub_100161BD0(&qword_100314D20);
  if ((sub_100166CDC(v9, v10, v9) & 1) != 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertUserInfoDashboardLaunchContextKey);
    v12 = v11;
    swift_unknownObjectRetain();
    swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v13 = sub_100166D10();
    sub_1001665E8(v13, v14, v12, v15);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease(v12, v16);
    swift_bridgeObjectRelease(0x8000000000000000, v17);
  }
  swift_bridgeObjectRetain(v3);
  v18 = sub_100161BD0(&qword_100314D28);
  if ((sub_100166CDC(v18, v19, v18) & 1) != 0)
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKRemoteAlertUserInfoDeeplinkKey);
    v22 = v21;
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    sub_1001665E8(v29, v20, v22, isUniquelyReferenced_nonNull_native);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease(v22, v24);
    swift_bridgeObjectRelease(0x8000000000000000, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v8, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:), v4);
  v26 = objc_allocWithZone((Class)type metadata accessor for DashboardClientProxy(0));
  v27 = (void *)DashboardClientProxy.init(serviceKind:)(v8);
  dispatch thunk of DashboardClientProxy.showDashboard(initialState:sceneIdentifier:usingLocalEndPoint:canDismissWithGesture:)(&_swiftEmptyDictionarySingleton, 0, 0, 1, 1);

  swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton, v28);
  sub_100165DCC();
}

Swift::Void __swiftcall OverlayServiceUtils.emitMultiplayerEvent(message:)(Swift::String message)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  unsigned int v13;
  id v14;
  void *v15;
  unsigned int v16;

  sub_100166CC4();
  v2 = v1;
  v4 = v3;
  v5 = type metadata accessor for DashboardClientProxy.AccessPointUseCase(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100162164();
  v9 = v8 - v7;
  v10 = (void *)objc_opt_self(GKPreferences);
  v11 = objc_msgSend(v10, "shared");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "multiplayerInGameOverlayEnabled");

    if (!v13)
    {
LABEL_6:
      sub_100165DCC();
      return;
    }
    v14 = objc_msgSend(v10, "shared");
    if (v14)
    {
      v15 = v14;
      v16 = objc_msgSend(v14, "isInternalBuild");

      if (v16)
      {
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DashboardClientProxy.AccessPointUseCase.inGameBanner(_:), v5);
        DashboardClientProxy.showInGameBanner(useCase:title:message:imageData:identifier:sceneIdentifier:)(v9, 0xD000000000000010, 0x80000001002977C0, v4, v2, 0, 0xF000000000000000, 0, 0, 0, 0);
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
      }
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id OverlayServiceUtils.init()()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  objc_super v11;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = type metadata accessor for GameOverlayUIConfig.ServiceKind(0);
  __chkstk_darwin(v3);
  sub_100162164();
  v6 = v5 - v4;
  v7 = OBJC_IVAR___GKOverlayServiceUtils_dashboardClientProxy;
  (*(void (**)(uint64_t, _QWORD))(v8 + 104))(v5 - v4, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:));
  objc_allocWithZone((Class)type metadata accessor for DashboardClientProxy(0));
  v9 = v1;
  *(_QWORD *)&v1[v7] = DashboardClientProxy.init(serviceKind:)(v6);

  v11.receiver = v9;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, "init");
}

uint64_t sub_100166420(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[40];

  sub_100186098();
  sub_100166C78();
  if (v9)
  {
    __break(1u);
    goto LABEL_10;
  }
  v10 = v7;
  v11 = v8;
  sub_100161BD0(&qword_100315CD0);
  if (!sub_100166CB8(a3 & 1))
    goto LABEL_5;
  v12 = sub_100186098();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_10:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
    __break(1u);
    return result;
  }
  v10 = v12;
LABEL_5:
  v14 = *v3;
  if ((v11 & 1) != 0)
  {
    v15 = *(_QWORD *)(v14 + 56);
    result = swift_release(*(_QWORD *)(v15 + 8 * v10));
    *(_QWORD *)(v15 + 8 * v10) = a1;
  }
  else
  {
    sub_1001631F4(a2, (uint64_t)v17);
    return sub_10018671C(v10, (uint64_t)v17, a1, v14);
  }
  return result;
}

uint64_t sub_100166510(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_100166D00(a1, a2, a3);
  sub_100166C78();
  if (v11)
  {
    __break(1u);
LABEL_10:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v12 = v9;
  v13 = v10;
  sub_100161BD0(&qword_100314D88);
  if (sub_100166CB8(a4 & 1))
  {
    sub_1001860C4(a2, a3);
    sub_100166CF0();
    if (!v15)
      goto LABEL_10;
    v12 = v14;
  }
  if ((v13 & 1) != 0)
  {
    v16 = *(_QWORD *)(*(_QWORD *)v4 + 56);
    result = swift_release(*(_QWORD *)(v16 + 8 * v12));
    *(_QWORD *)(v16 + 8 * v12) = a1;
  }
  else
  {
    v18 = sub_100166D10();
    sub_10018676C(v18, v19, a3, a1, v20);
    return sub_100166CA4(a3);
  }
  return result;
}

uint64_t sub_1001665E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v5 = v4;
  v10 = *v4;
  v11 = sub_1001860C4(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_100161BD0(&qword_100314D90);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_1001860C4(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = *(_QWORD *)(v20 + 56);
    result = swift_unknownObjectRelease(*(_QWORD *)(v21 + 8 * v16));
    *(_QWORD *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_10018676C(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t type metadata accessor for OverlayServiceUtils()
{
  return objc_opt_self(GKOverlayServiceUtils);
}

void sub_10016671C()
{
  uint64_t *v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  sub_100166CC4();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for NWEndpoint(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100162164();
  v11 = v10 - v9;
  sub_100186114();
  sub_100166C78();
  if (v14)
  {
    __break(1u);
    goto LABEL_10;
  }
  v15 = v12;
  v16 = v13;
  sub_100161BD0(&qword_100314D80);
  if (sub_100166CB8(v2 & 1))
  {
    v17 = sub_100186114();
    if ((v16 & 1) == (v18 & 1))
    {
      v15 = v17;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
    __break(1u);
    return;
  }
LABEL_5:
  v19 = *v0;
  if ((v16 & 1) != 0)
  {
    v20 = *(_QWORD *)(v19 + 56);
    swift_release(*(_QWORD *)(v20 + 8 * v15));
    *(_QWORD *)(v20 + 8 * v15) = v6;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v4, v7);
    sub_100186784(v15, v11, v6, v19);
  }
  sub_100165DCC();
}

void sub_100166828()
{
  Swift::Int *v0;
  uint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  sub_100166CC4();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = *v0;
  sub_100186174(v10, v8, v6, v4);
  sub_100166C78();
  if (v17)
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v15;
  v19 = v16;
  sub_100161BD0(&qword_100314D78);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v14))
    goto LABEL_5;
  v20 = sub_100166D10();
  v22 = sub_100186174(v20, v21, v7, v5);
  if ((v19 & 1) != (v23 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for EntityCacheProvider.EntityCacheKey);
    __break(1u);
    return;
  }
  v18 = v22;
LABEL_5:
  v24 = *v1;
  if ((v19 & 1) != 0)
  {
    v25 = *(_QWORD *)(v24 + 56);
    swift_unknownObjectRelease();
    *(_QWORD *)(v25 + 8 * v18) = v13;
    sub_100165DCC();
  }
  else
  {
    sub_100186854(v18, v11, v9, v7, v5, v13, v24);
    swift_bridgeObjectRetain(v9);
    sub_100166C8C(v5);
  }
}

uint64_t sub_100166930(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  sub_100166D00(a1, a2, a3);
  sub_100166C78();
  if (v11)
  {
    __break(1u);
LABEL_10:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v12 = v9;
  v13 = v10;
  sub_100161BD0((uint64_t *)&unk_100315CB0);
  if (sub_100166CB8(a4 & 1))
  {
    sub_1001860C4(a2, a3);
    sub_100166CF0();
    if (!v15)
      goto LABEL_10;
    v12 = v14;
  }
  if ((v13 & 1) != 0)
    return sub_100166C3C(a1, *(_QWORD *)(*(_QWORD *)v4 + 56) + 40 * v12);
  v17 = sub_100166D10();
  sub_100186898(v17, v18, a3, a1, v19);
  return sub_100166CA4(a3);
}

id sub_100166A08(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  Swift::Int *v4;
  Swift::Int *v5;
  Swift::Int v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  id result;
  unint64_t v20;

  v5 = v4;
  v9 = *v4;
  sub_100186204();
  sub_100166C78();
  if (v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v10;
  v14 = v11;
  sub_100161BD0(&qword_100314D68);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v9))
    goto LABEL_5;
  v16 = sub_100186204();
  if ((v14 & 1) != (v15 & 1))
  {
LABEL_9:
    v20 = sub_100166C00();
    result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
    return result;
  }
  v13 = v16;
LABEL_5:
  v17 = (_QWORD *)*v5;
  if ((v14 & 1) != 0)
  {
    v18 = (uint64_t *)(v17[7] + 16 * v13);
    result = (id)swift_bridgeObjectRelease(v18[1], v15);
    *v18 = a1;
    v18[1] = a2;
  }
  else
  {
    sub_1001868F0(v13, (uint64_t)a3, a1, a2, v17);
    return a3;
  }
  return result;
}

void sub_100166B18()
{
  Swift::Int *v0;
  uint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;

  sub_100166CC4();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = *v0;
  sub_1001860C4(v6, v4);
  sub_100166C78();
  if (v15)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v16 = v13;
  v17 = v14;
  sub_100161BD0(&qword_100314D60);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12))
  {
    sub_1001860C4(v7, v5);
    sub_100166CF0();
    if (!v20)
      goto LABEL_10;
    v16 = v19;
  }
  v21 = *v1;
  if ((v17 & 1) != 0)
  {
    v22 = (uint64_t *)(*(_QWORD *)(v21 + 56) + 16 * v16);
    swift_bridgeObjectRelease(v22[1], v18);
    *v22 = v11;
    v22[1] = v9;
    sub_100165DCC();
  }
  else
  {
    sub_100186934(v16, v7, v5, v11, v9, v21);
    sub_100166C8C(v5);
  }
}

unint64_t sub_100166C00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100314D70;
  if (!qword_100314D70)
  {
    v1 = objc_opt_self(CNContact);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100314D70);
  }
  return result;
}

uint64_t sub_100166C3C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 40))(a2, a1);
  return a2;
}

uint64_t sub_100166C8C(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100166CA4(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

BOOL sub_100166CB8(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

uint64_t sub_100166CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return swift_dynamicCast(v4 - 104, v4 - 96, a3, v3 + 8, 6);
}

unint64_t sub_100166D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001860C4(a2, a3);
}

uint64_t sub_100166D10()
{
  uint64_t v0;

  return v0;
}

void sub_100166D1C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char v3;

  if (*(_QWORD *)(a2 + 16))
  {
    v2 = sub_100186098();
    if ((v3 & 1) != 0)
      sub_10016D350(v2);
  }
  sub_10016219C();
}

void sub_100166D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a3 + 16))
  {
    v3 = sub_10016D69C(a1, a2);
    if ((v4 & 1) != 0)
      sub_10016D350(v3);
  }
  sub_10016219C();
}

void sub_100166D80(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + 16) && (v4 = sub_100186098(), (v5 & 1) != 0))
  {
    sub_10016D348(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)a2);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
    sub_10016219C();
  }
}

uint64_t sub_100166DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = sub_10016D69C(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  sub_10016D290();
  return v6;
}

void sub_100166E14(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char v3;

  if (*(_QWORD *)(a2 + 16))
  {
    v2 = sub_100186114();
    if ((v3 & 1) != 0)
      sub_10016D350(v2);
  }
  sub_10016219C();
}

void sub_100166E48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  char v7;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_10016D69C(a1, a2), (v7 & 1) != 0))
  {
    sub_10016D348(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_10016219C();
  }
}

void AppMetadataFetcher.FetcherError.hash(into:)()
{
  Hasher._combine(_:)(0);
  sub_10016219C();
}

Swift::Int AppMetadataFetcher.FetcherError.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_100166EF4(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

id sub_100166F40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, id a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _BYTE v16[40];
  _QWORD v17[5];

  v17[3] = &type metadata for AppMetadataTaskCreator;
  v17[4] = &off_1002C59A0;
  v8 = type metadata accessor for AppMetadataCache();
  swift_allocObject(v8, 40, 7);
  sub_10016D5D8();
  sub_10016D290();
  v9 = sub_10016D3E0();
  v12 = sub_1001B842C(v9, v10, v11, a4);
  if (v5)
  {
    sub_10016C794(v17);
  }
  else
  {
    v13 = v12;
    v14 = (char *)objc_allocWithZone((Class)type metadata accessor for AppMetadataFetcher());
    sub_10016C7B8((uint64_t)v17, (uint64_t)v16);
    a5 = sub_10016BFAC(v13, (uint64_t)v16, (uint64_t)a5, v14);
    sub_10016C794(v17);
  }
  return a5;
}

uint64_t AppMetadataNetworkFetcher.init(taskCreator:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016C8B0(a1, a2);
}

void AppMetadataFetcher.__allocating_init(cache:network:bag:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  sub_10016712C(a1, a2, a3, a4, (void (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10016BEA4);
}

void AppMetadataFetcher.init(cache:network:bag:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  sub_10016712C(a1, a2, a3, a4, (void (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10016C088);
}

void sub_10016712C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, void (*a5)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  ObjectType = swift_getObjectType(a1);
  v12 = a3[3];
  v13 = a3[4];
  v14 = sub_10016BF84((uint64_t)a3, v12);
  __chkstk_darwin(v14);
  v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  a5(a1, v16, a4, v5, ObjectType, v12, a2, v13);
  sub_100161FE0(a3);
  sub_100165DCC();
}

uint64_t AppMetadataFetcher.fetch(bundleIDs:adamIDs:batchSize:ttl:refreshExpiredCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v7 + 72) = a5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_QWORD *)(v7 + 64) = a4;
  *(double *)(v7 + 56) = a6;
  *(_QWORD *)(v7 + 40) = a2;
  *(_QWORD *)(v7 + 48) = a3;
  *(_QWORD *)(v7 + 32) = a1;
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v7 + 88) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10016CFA0();
  return sub_10016D26C(v10, v11, v12);
}

uint64_t sub_100167258(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;

  v2[2] = &_swiftEmptySetSingleton;
  v2[3] = &_swiftEmptySetSingleton;
  v3 = v2[4];
  if (v3 && *(_QWORD *)(v3 + 16))
  {
    v4 = swift_bridgeObjectRetain(v3);
    sub_1001674D8(v4, v5);
  }
  v6 = v2[5];
  if (v6 && *(_QWORD *)(v6 + 16))
  {
    v7 = swift_bridgeObjectRetain(v6);
    v6 = sub_1001674D8(v7, v8);
    v9 = (_QWORD *)v2[3];
  }
  else
  {
    v9 = &_swiftEmptySetSingleton;
  }
  v10 = v2[2];
  v2[14] = v9;
  v2[15] = v10;
  if (!*(_QWORD *)(v10 + 16) && !v9[2])
  {
    v20 = sub_10016D010(v6, a2);
    v21 = static GKLog.general.getter(v20);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter(v22);
    v24 = os_log_type_enabled(v22, v23);
    v26 = v2[12];
    v25 = v2[13];
    v27 = v2[11];
    if (v24)
    {
      v28 = (uint8_t *)sub_100165DA4(2);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No bundleIDs or adamIDs to fetch, returning nil.", v28, 2u);
      sub_100165D98((uint64_t)v28);
    }

    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    sub_1001648C4(v29, v30);
    swift_task_dealloc(v2[13]);
    sub_10016D3B8();
    __asm { BR              X1 }
  }
  v11 = dword_100314DAC;
  sub_1001621A4();
  v12 = (_QWORD *)swift_task_alloc(v11);
  v2[16] = v12;
  *v12 = v2;
  v12[1] = sub_1001673F4;
  sub_10016D3B8();
  return sub_100167888(v13, v14, v15, v16, v17, v18);
}

uint64_t sub_1001673F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = *v2;
  v4 = v14;
  sub_10016D2B8(&v14);
  *(_QWORD *)(v4 + 136) = v1;
  v6 = swift_task_dealloc(v5);
  v8 = sub_10016D010(v6, v7);
  sub_10016D110(v8, v9);
  if (!v1)
    *(_QWORD *)(v4 + 144) = a1;
  sub_10016CFA0();
  return swift_task_switch(v10, v11, v12);
}

uint64_t sub_100167474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 112), a2);
  swift_task_dealloc(*(_QWORD *)(v2 + 104));
  v3 = sub_10016D2C4();
  return sub_10016CFBC(v3, v4);
}

uint64_t sub_1001674A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 112), a2);
  sub_10016D2A8();
  return sub_10016CF2C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1001674D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1001737EC(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1], v7);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return swift_bridgeObjectRelease(a1, a2);
}

uint64_t sub_1001675F8(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, const void *a5, void *a6, double a7)
{
  _QWORD *v7;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v7[2] = a6;
  v14 = _Block_copy(aBlock);
  v7[3] = _Block_copy(a5);
  if (a1)
    a1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  v7[4] = a1;
  if (a2)
    a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String);
  v7[5] = a2;
  v15 = swift_allocObject(&unk_1002C5918, 24, 7);
  v7[6] = v15;
  *(_QWORD *)(v15 + 16) = v14;
  v16 = dword_100314DA4;
  a6;
  v17 = (_QWORD *)swift_task_alloc(v16);
  v7[7] = v17;
  *v17 = v7;
  v17[1] = sub_10016770C;
  return AppMetadataFetcher.fetch(bundleIDs:adamIDs:batchSize:ttl:refreshExpiredCompletion:)(a1, a2, a3, (uint64_t)sub_10016C78C, v15, a7);
}

void sub_10016770C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  void *v14;
  uint64_t v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  _QWORD *v18;

  v3 = v1;
  v5 = (_QWORD *)*v2;
  v18 = v5;
  v6 = v5[6];
  v7 = (void *)v5[2];
  sub_10016D100(v5[7], &v18);

  v8 = swift_release(v6);
  v10 = sub_10016D010(v8, v9);
  v12 = sub_10016D5D0(v10, v11);
  if (v3)
  {
    a1 = _convertErrorToNSError(_:)(v3);
    sub_10016D1B4();
    isa = 0;
    v14 = (void *)a1;
  }
  else if (a1)
  {
    sub_10016D338(v12, &qword_100314E78, GKAppMetadata_ptr);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_10016D13C((uint64_t)isa, v15);
    a1 = 0;
    v14 = isa;
  }
  else
  {
    isa = 0;
    v14 = 0;
  }
  v16 = (void (**)(_QWORD, _QWORD, _QWORD))v5[3];
  ((void (**)(_QWORD, Class, uint64_t))v16)[2](v16, isa, a1);

  _Block_release(v16);
  sub_10016D3B8();
  __asm { BR              X0 }
}

void sub_100167814(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_10016CBB4(0, &qword_100314E78, GKAppMetadata_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

uint64_t sub_100167888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 72) = a5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_QWORD *)(v7 + 64) = a4;
  *(double *)(v7 + 56) = a6;
  *(_QWORD *)(v7 + 40) = a2;
  *(_QWORD *)(v7 + 48) = a3;
  *(_QWORD *)(v7 + 32) = a1;
  return sub_10016CFC8((uint64_t)sub_1001678A8);
}

uint64_t sub_1001678A8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(v0[10] + OBJC_IVAR___GKAppMetadataFetcher_cache);
  v0[11] = *v1;
  v2 = v1[1];
  v0[12] = v2;
  v3 = sub_10016D668();
  v0[13] = v3;
  v0[14] = *(_QWORD *)(v2 + 16);
  dispatch thunk of Actor.unownedExecutor.getter(v3, *(_QWORD *)(v2 + 8));
  return sub_10016CF78();
}

uint64_t sub_100167914()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, double))(v0 + 112))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 96), *(double *)(v0 + 56));
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_100167974()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  _QWORD *v7;
  int v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;

  sub_10016D198();
  v0[3] = v0[5];
  v3 = v0[4];
  v0[2] = v3;
  v4 = v0[15];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v38 = v0;
    swift_bridgeObjectRetain(v3);
    sub_10016D290();
    sub_10016D21C();
    v6 = (id *)(v4 + 40);
    v7 = _swiftEmptyArrayStorage;
    do
    {
      v8 = *(unsigned __int8 *)v6;
      v9 = *(v6 - 1);
      v10 = objc_msgSend(v9, "bundleID");
      sub_10016D654();
      sub_10016D5E8();
      v11 = sub_100174EB4(v1, v2);
      v13 = sub_10016D108(v11, v12);
      sub_10016D13C(v13, v14);
      v15 = sub_10016D510();
      sub_10016D654();
      sub_10016D5E8();
      v16 = sub_100174EB4(v1, v2);
      v18 = sub_10016D108(v16, v17);
      sub_10016D13C(v18, v19);
      if (v8 == 1)
      {
        v20 = sub_10016D510();
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v1 = v22;

        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        {
          sub_10016D6B0(0, v7[2] + 1);
          v7 = v27;
        }
        v24 = v7[2];
        v23 = v7[3];
        v2 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          sub_10016D6B0(v23 > 1, v24 + 1);
          v7 = v28;
        }
        v7[2] = v2;
        v25 = &v7[2 * v24];
        v25[4] = v21;
        v25[5] = v1;
      }

      v6 += 2;
      --v5;
    }
    while (v5);
    v0 = v38;
    v29 = swift_bridgeObjectRelease(v38[15], v26);
  }
  else
  {
    swift_bridgeObjectRetain(v3);
    v29 = sub_10016D290();
    v7 = _swiftEmptyArrayStorage;
  }
  if (v7[2])
    sub_100167FFC((uint64_t)v7, v0[6], v0[8], v0[9]);
  sub_10016D010(v29, v30);
  v31 = v0[3];
  v0[16] = v0[2];
  v0[17] = v31;
  v32 = (_QWORD *)swift_task_alloc(dword_100314E4C);
  v0[18] = v32;
  *v32 = v0;
  v32[1] = sub_100167B78;
  sub_10016D4A8();
  return sub_100167C24(v33, v34, v35, v36);
}

uint64_t sub_100167B78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v20 = *v2;
  v4 = v20;
  sub_10016D2B8(&v20);
  *(_QWORD *)(v4 + 152) = v1;
  v6 = swift_task_dealloc(v5);
  if (v1)
  {
    v8 = sub_10016D110(v6, v7);
    v10 = sub_1001648C4(v8, v9);
    sub_10016D010(v10, v11);
  }
  else
  {
    v12 = sub_10016D010(v6, v7);
    v14 = sub_10016D110(v12, v13);
    sub_1001648C4(v14, v15);
    *(_QWORD *)(v4 + 160) = a1;
  }
  sub_10016CFA0();
  return swift_task_switch(v16, v17, v18);
}

uint64_t sub_100167C0C()
{
  uint64_t v0;

  return sub_10016D0F8(*(_QWORD *)(v0 + 160), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100167C18()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100167C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_10016CFC8((uint64_t)sub_100167C3C);
}

#error "100167DA8: call analysis failed (funcsize=125)"

uint64_t sub_100167E38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10016D024();
  v2 = v0[9];
  v0[10] = v3;
  v0[11] = v1;
  swift_task_dealloc(v2);
  if (!v1)
  {
    v4 = v0[7];
    swift_release(v0[8]);
    swift_release(v4);
  }
  sub_10016CFA0();
  return sub_10016CF78();
}

#error "100167F3C: call analysis failed (funcsize=73)"

uint64_t sub_100167FC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(v1);
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100167FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v9 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10016D468();
  sub_100161B54((uint64_t)v11, 1, 1, v12);
  v13 = (_QWORD *)sub_10016D1E0((uint64_t)&unk_1002C58C8);
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v4;
  v13[5] = a1;
  v13[6] = a2;
  v13[7] = a3;
  v13[8] = a4;
  v14 = v4;
  swift_bridgeObjectRetain(a1);
  swift_retain(a4);
  v15 = sub_100194E68((uint64_t)v11, (uint64_t)&unk_100314E58, (uint64_t)v13);
  swift_release(v15);
  sub_10016CBEC((uint64_t)v11, &qword_100314CE8);
}

uint64_t sub_1001680EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[3] = a4;
  v9 = type metadata accessor for Logger(0);
  v8[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[9] = v10;
  v8[10] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100168154, 0, 0);
}

void sub_100168154()
{
  uint64_t v0;
  _QWORD *v1;

  sub_100163928((_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR___GKAppMetadataFetcher_network), *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR___GKAppMetadataFetcher_network + 24));
  v1 = (_QWORD *)sub_10016D278();
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_100168204;
  sub_10016D3B8();
  __asm { BR              X8 }
}

uint64_t sub_100168204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10016D0B4();
  sub_10016D2B8(v3);
  *(_QWORD *)(v2 + 96) = v1;
  swift_task_dealloc(v4);
  if (!v1)
    *(_QWORD *)(v2 + 104) = v0;
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_10016825C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(_QWORD))(v0 + 48))(*(_QWORD *)(v0 + 104));
  sub_1001648C4(v1, v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return sub_100165E20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10016829C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  sub_10016D480();
  v1 = *(_QWORD *)(v0 + 96);
  static GKLog.general.getter();
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 96);
    v6 = (uint8_t *)sub_100165DA4(12);
    v7 = (_QWORD *)sub_100165DA4(8);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *v7 = v8;
    sub_10016D1B4();
    sub_10016D1B4();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to refresh expired adamIDs with error: %@", v6, 0xCu);
    v9 = sub_100161BD0(&qword_100315A10);
    swift_arrayDestroy(v7, 1, v9);
    sub_100165D98((uint64_t)v7);
    sub_100165D98((uint64_t)v6);

    sub_10016D1B4();
  }
  else
  {
    sub_10016D1B4();
    sub_10016D1B4();
    sub_10016D1B4();

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return sub_100165E20(*(uint64_t (**)(void))(v0 + 8));
}

void AppMetadataFetcher.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.AppMetadataFetcher", 33, "init()", 6, 0);
  __break(1u);
}

id AppMetadataFetcher.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppMetadataFetcher();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001684B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_1001684D4, 0, 0);
}

uint64_t sub_1001684D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  sub_100161BD0(&qword_100314DC0);
  sub_100161BD0(&qword_100314DC8);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 56) = v3;
  v4 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  *(_OWORD *)(v3 + 32) = v4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = sub_100168580;
  v6 = sub_10016D1BC();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v6);
}

uint64_t sub_100168580()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10016D024();
  sub_10016D2B8(v2);
  *(_QWORD *)(v0 + 72) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
  sub_10016CFA0();
  return sub_10016CF78();
}

uint64_t sub_1001685D4()
{
  uint64_t v0;

  return sub_10016D0F8(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001685DC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100168608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  unint64_t v7;

  v6[28] = a5;
  v6[29] = a6;
  v6[26] = a3;
  v6[27] = a4;
  v6[24] = a1;
  v6[25] = a2;
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100161BD0(&qword_100314CE8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[30] = swift_task_alloc(v7);
  v6[31] = swift_task_alloc(v7);
  return swift_task_switch(sub_10016867C, 0, 0);
}

void sub_10016867C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  _QWORD *v41;

  v6 = *(_QWORD *)(v3 + 216);
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + 208) + 16);
  *(_QWORD *)(v3 + 256) = v7;
  if (v6)
  {
    if (v6 < 1 || v7 == 0)
    {
      v9 = *(_QWORD *)(v3 + 248);
      **(_QWORD **)(v3 + 192) = &_swiftEmptyDictionarySingleton;
      swift_task_dealloc(v9);
      sub_10016D2A8();
      sub_10016D4C4();
      __asm { BR              X0 }
    }
    if (v7 >= v6)
      v2 = v6;
    else
      v2 = v7;
    *(_QWORD *)(v3 + 264) = &_swiftEmptyDictionarySingleton;
    *(_QWORD *)(v3 + 272) = v6;
    v11 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v12 = sub_1001621A4();
    v13 = swift_unknownObjectRetain_n(v12, 2);
    v14 = (_QWORD *)swift_dynamicCastClass(v13, v11);
    if (!v14)
    {
      sub_1001648C4(0, v15);
      v14 = _swiftEmptyArrayStorage;
    }
    v4 = v14[2];
    a1 = swift_release(v14);
    if (v4 == v2)
    {
      v16 = swift_dynamicCastClass(*(_QWORD *)(v3 + 208), v11);
      v18 = (_QWORD *)v16;
      if (!v16)
      {
        v16 = sub_1001648C4(0, v17);
        v18 = _swiftEmptyArrayStorage;
      }
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1001648C4(a1, a2);
  v35 = sub_100161BD0(&qword_100314F28);
  v18 = (_QWORD *)sub_10016D3D0(v35);
  j__malloc_size(v18);
  sub_10016D54C();
  v18[2] = v2;
  v18[3] = v36;
  v37 = *(_QWORD *)(v3 + 208) + 32;
  v38 = (unint64_t)(v18 + 4);
  if (v37 < (unint64_t)&v18[2 * v2 + 4] && v38 < v37 + 16 * v2)
  {
    sub_10016D208();
    sub_10016D504((uint64_t)"Fatal error", 11, 2, (uint64_t)"UnsafeMutablePointer.initialize overlapping range", 49, v40, (uint64_t)"Swift/UnsafePointer.swift");
    sub_10016D4C4();
    return;
  }
  v16 = swift_arrayInitWithCopy(v38);
LABEL_16:
  v41 = v18;
  v19 = *(_QWORD *)(v3 + 232);
  v20 = *(_QWORD *)(v3 + 216);
  sub_10016D108(v16, v17);
  v21 = sub_10016D468();
  sub_10016D224(v21);
  v22 = (_QWORD *)sub_10016D1E0((uint64_t)&unk_1002C5AE8);
  v23 = sub_10016D3A0(v22);
  v23[7] = v19;
  v23[8] = v41;
  sub_10016D5C4((uint64_t)v23, v24, &qword_100314CE8);
  sub_10016D314();
  v25 = swift_retain(v19);
  v26 = *(_QWORD *)(v3 + 240);
  if ((_DWORD)v20 == 1)
  {
    sub_10016D4A0(v25, &qword_100314CE8);
    v26 = 0;
    v4 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter(v25);
    sub_10016D254();
    if (*v5)
    {
      sub_10016D600();
      sub_10016D5F4();
      sub_10016D418();
      sub_10016D470();
    }
    else
    {
      v26 = 0;
      v4 = 0;
    }
  }
  v27 = **(_QWORD **)(v3 + 200);
  sub_100161BD0(&qword_100314DC0);
  if (v4 | v26)
  {
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = v26;
    *(_QWORD *)(v3 + 96) = v4;
  }
  sub_10016D5B0();
  *(_QWORD *)(v3 + 112) = v28;
  *(_QWORD *)(v3 + 120) = v27;
  v32 = sub_10016D588(v29, v30, v31, (uint64_t)&unk_100314F18);
  v33 = swift_release(v32);
  sub_10016D4A0(v33, &qword_100314CE8);
  v34 = (_QWORD *)swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
  *(_QWORD *)(v3 + 280) = v34;
  sub_100161BD0(&qword_100314F20);
  *v34 = v3;
  v34[1] = sub_100168960;
  sub_10016CFA0();
  sub_10016D4C4();
  ThrowingTaskGroup.next(isolation:)();
}

uint64_t sub_100168960()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_10016D024();
  sub_10016D2B8(v2);
  *(_QWORD *)(v0 + 288) = v1;
  swift_task_dealloc(v3);
  if (v1)
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264), v4);
  sub_10016CFA0();
  return sub_10016CF78();
}

void sub_1001689B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v7 = *(_QWORD *)(v3 + 184);
  if (v7 < 2)
  {
    v5 = *(_QWORD *)(v3 + 272);
    v8 = *(_QWORD *)(v3 + 256);
    v9 = v8 >= v5;
    if (v5 < v8)
    {
      v95 = v3 + 184;
      goto LABEL_40;
    }
    v14 = *(uint64_t **)(v3 + 264);
LABEL_50:
    v52 = *(_QWORD *)(v3 + 248);
    **(_QWORD **)(v3 + 192) = v14;
    swift_task_dealloc(v52);
    sub_10016D2A8();
    sub_10016D1EC();
    __asm { BR              X0 }
  }
  v2 = v3 + 16;
  v95 = v3 + 184;
  v10 = *(_QWORD *)(v3 + 264);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  *(_QWORD *)(v3 + 176) = v10;
  sub_10016C9F0(v7, (uint64_t)sub_10016C9B0, 0, (_QWORD *)(v3 + 16));
  v99 = *(_QWORD *)(v3 + 16);
  v100 = *(_QWORD *)(v3 + 64);
  v97 = *(_QWORD *)(v3 + 24);
  v101 = *(_QWORD *)(v3 + 40);
  v12 = *(_QWORD *)(v3 + 48);
  v98 = *(uint64_t (**)(uint64_t))(v3 + 56);
  v96 = (unint64_t)(*(_QWORD *)(v3 + 32) + 64) >> 6;
  v13 = v7;
  v14 = *(uint64_t **)(v3 + 264);
  v94 = v13;
  a1 = swift_bridgeObjectRetain(v13);
  while (1)
  {
    if (v12)
    {
      sub_10016D62C();
      v16 = v15 | (v101 << 6);
      goto LABEL_28;
    }
    v17 = v101 + 1;
    if (__OFADD__(v101, 1))
      goto LABEL_75;
    if (v17 >= v96)
      goto LABEL_38;
    if (!*(_QWORD *)(v97 + 8 * v17))
    {
      sub_10016D620();
      if (v18 == v19)
        goto LABEL_38;
      sub_10016D614();
      if (!v20)
      {
        sub_10016D620();
        if (v18 == v19)
          goto LABEL_38;
        sub_10016D614();
        if (!v21)
        {
          sub_10016D620();
          if (v18 == v19)
            goto LABEL_38;
          sub_10016D614();
          if (!v22)
          {
            sub_10016D620();
            if (v18 == v19)
              goto LABEL_38;
            sub_10016D614();
            if (!v24)
            {
              if (v23 + 5 >= v96)
                goto LABEL_38;
              if (!*(_QWORD *)(v97 + 8 * (v23 + 5)))
                break;
            }
          }
        }
      }
    }
LABEL_27:
    sub_10016D400();
    v101 = v27;
LABEL_28:
    v28 = (_QWORD *)(*(_QWORD *)(v99 + 48) + 16 * v16);
    v29 = v28[1];
    v30 = *(void **)(*(_QWORD *)(v99 + 56) + 8 * v16);
    *(_QWORD *)(v3 + 152) = *v28;
    *(_QWORD *)(v3 + 160) = v29;
    *(_QWORD *)(v3 + 168) = v30;
    sub_1001621A4();
    v31 = v30;
    v32 = v98(v3 + 152);
    sub_1001648C4(v32, v33);

    v5 = *(_QWORD *)(v3 + 128);
    v4 = *(_QWORD *)(v3 + 136);
    v6 = *(_QWORD **)(v3 + 144);
    v2 = (uint64_t)v14;
    v34 = sub_1001860C4(v5, v4);
    v35 = v14[2];
    v36 = (a2 & 1) == 0;
    a1 = v35 + v36;
    if (__OFADD__(v35, v36))
    {
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    v37 = a2;
    if (v14[3] >= a1)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100161BD0(&qword_100314E60);
        v2 = v3 + 176;
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_10016D540(a1);
      v2 = *v14;
      v38 = sub_10016D018();
      if ((v37 & 1) != (v39 & 1))
      {
        sub_10016D1EC();
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v54);
        return;
      }
      v34 = v38;
    }
    v14 = *(uint64_t **)(v3 + 176);
    if ((v37 & 1) != 0)
    {
      v2 = (uint64_t)*(id *)(v14[7] + 8 * v34);

      sub_10016D010(v40, v41);
      v42 = v14[7];

      *(_QWORD *)(v42 + 8 * v34) = v2;
      isUniquelyReferenced_nonNull_native = 1;
    }
    else
    {
      sub_10016D378((uint64_t)&v14[v34 >> 6]);
      v43 = (uint64_t *)(v14[6] + 16 * v34);
      *v43 = v5;
      v43[1] = v4;
      *(_QWORD *)(v14[7] + 8 * v34) = v6;
      v44 = v14[2];
      v19 = __OFADD__(v44, 1);
      v45 = v44 + 1;
      if (v19)
        goto LABEL_74;
      v14[2] = v45;
      isUniquelyReferenced_nonNull_native = 1;
    }
  }
  v25 = v101 + 7;
  while (v25 < v96)
  {
    if (*(_QWORD *)(v97 + 8 * v25++))
      goto LABEL_27;
  }
LABEL_38:
  v2 = *(_QWORD *)(v3 + 272);
  v46 = *(_QWORD *)(v3 + 256);
  sub_10016C9A0(v94, a2);
  sub_10016CA2C(v99);
  v47 = swift_release(v100);
  a1 = sub_10016D2D4(v47, v48);
  if (v2 >= v46)
    goto LABEL_50;
  v5 = *(_QWORD *)(v3 + 272);
  *(_QWORD *)(v3 + 264) = v14;
  v9 = 1;
  v8 = *(_QWORD *)(v3 + 256);
LABEL_40:
  v49 = *(_QWORD *)(v3 + 216);
  v50 = v8 - v5;
  v51 = __OFSUB__(v8, v5);
  v12 = v5 + v49;
  if (__OFADD__(v5, v49))
  {
    if (!v51)
    {
      if ((v50 & 0x8000000000000000) == 0 && v50 < v49)
      {
        v12 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_55;
      }
      __break(1u);
LABEL_94:
      sub_10016D208();
      v92 = "UnsafeMutablePointer.initialize overlapping range";
      v93 = 49;
LABEL_95:
      sub_10016D504((uint64_t)"Fatal error", 11, 2, (uint64_t)v92, v93, v91, (uint64_t)"Swift/UnsafePointer.swift");
      sub_10016D1EC();
      return;
    }
    __break(1u);
    goto LABEL_84;
  }
  if (v51)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v55 = v5 + v49;
  if ((v50 & 0x8000000000000000) == 0 && v50 < v49)
  {
LABEL_55:
    v55 = v12;
    v12 = v8;
  }
  *(_QWORD *)(v3 + 272) = v55;
  v2 = v12 - v5;
  if (v12 < v5)
    goto LABEL_76;
  if (!v9)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if (v5 < 0)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  if (v8 < v12)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v56 = *(_QWORD *)(v3 + 208);
  v57 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v58 = swift_bridgeObjectRetain(v56);
  v59 = swift_unknownObjectRetain_n(v58, 2);
  v60 = (_QWORD *)swift_dynamicCastClass(v59, v57);
  if (!v60)
  {
    sub_10016D110(0, v61);
    v60 = _swiftEmptyArrayStorage;
  }
  v62 = v60[2];
  a1 = swift_release(v60);
  v4 = *(_QWORD *)(v3 + 208);
  if (v62 != v2)
  {
LABEL_80:
    v63 = sub_10016D010(a1, a2);
    if (v12 == v5)
      goto LABEL_65;
    if (v2 >= 1)
    {
      v83 = sub_100161BD0(&qword_100314F28);
      v84 = (_QWORD *)sub_10016D3D0(v83);
      j__malloc_size(v84);
      sub_10016D54C();
      v84[2] = v2;
      v84[3] = v85;
LABEL_87:
      v86 = *(_QWORD *)(v3 + 208) + 32;
      v87 = v84 + 4;
      v88 = v86 + 16 * v5;
      v89 = v86 + 16 * v12;
      if (v88 >= (unint64_t)&v84[2 * v2 + 4] || (unint64_t)v87 >= v89)
      {
        v63 = swift_arrayInitWithCopy(v87);
        goto LABEL_65;
      }
      goto LABEL_94;
    }
LABEL_85:
    if (v2 < 0)
    {
      sub_10016D208();
      v92 = "UnsafeMutablePointer.initialize with negative count";
      v93 = 51;
      goto LABEL_95;
    }
    v84 = _swiftEmptyArrayStorage;
    goto LABEL_87;
  }
  v63 = swift_dynamicCastClass(*(_QWORD *)(v3 + 208), v57);
  if (!v63)
    v63 = sub_10016D010(0, v64);
LABEL_65:
  v65 = *(_QWORD *)(v3 + 232);
  v66 = *(_QWORD *)(v3 + 216);
  sub_10016D108(v63, v64);
  v67 = sub_10016D468();
  sub_10016D224(v67);
  v68 = (_QWORD *)sub_10016D1E0((uint64_t)&unk_1002C5AE8);
  v69 = sub_10016D3A0(v68);
  v69[7] = v65;
  v69[8] = v70;
  sub_10016D5C4((uint64_t)v69, v71, &qword_100314CE8);
  sub_10016D314();
  v72 = swift_retain(v65);
  v73 = *(_QWORD *)(v3 + 240);
  if ((_DWORD)v66 == 1)
  {
    sub_10016D4A0(v72, &qword_100314CE8);
    v73 = 0;
    v4 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter(v72);
    sub_10016D254();
    if (*v6)
    {
      sub_10016D600();
      sub_10016D5F4();
      sub_10016D418();
      sub_10016D470();
    }
    else
    {
      v73 = 0;
      v4 = 0;
    }
  }
  v74 = **(_QWORD **)(v3 + 200);
  sub_100161BD0(&qword_100314DC0);
  if (v4 | v73)
  {
    v75 = (_QWORD *)(v95 - 112);
    *v75 = 0;
    v75[1] = 0;
    *(_QWORD *)(v3 + 88) = v73;
    *(_QWORD *)(v3 + 96) = v4;
  }
  sub_10016D5B0();
  *(_QWORD *)(v3 + 112) = v76;
  *(_QWORD *)(v3 + 120) = v74;
  v80 = sub_10016D588(v77, v78, v79, (uint64_t)&unk_100314F18);
  v81 = swift_release(v80);
  sub_10016D4A0(v81, &qword_100314CE8);
  v82 = (_QWORD *)swift_task_alloc(async function pointer to ThrowingTaskGroup.next(isolation:)[1]);
  *(_QWORD *)(v3 + 280) = v82;
  sub_100161BD0(&qword_100314F20);
  *v82 = v3;
  v82[1] = sub_100168960;
  sub_10016CFA0();
  sub_10016D1EC();
  ThrowingTaskGroup.next(isolation:)();
}

uint64_t sub_10016907C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  sub_10016D2A8();
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001690AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t);

  *(_QWORD *)(v8 + 16) = a1;
  v12 = (uint64_t (*)(uint64_t))((char *)a6 + *a6);
  v10 = (_QWORD *)swift_task_alloc(a6[1]);
  *(_QWORD *)(v8 + 24) = v10;
  *v10 = v8;
  v10[1] = sub_100169114;
  return v12(a8);
}

uint64_t sub_100169114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;

  sub_10016D0B4();
  v4 = *v3;
  sub_10016D100(*(_QWORD *)(v2 + 24), v5);
  if (v1)
    return sub_10016D170(*(uint64_t (**)(void))(v4 + 8));
  *(_QWORD *)(v2 + 32) = v0;
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_100169168()
{
  uint64_t v0;

  return sub_10016D128(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100169170()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *v0;
  v3 = v0[1];
  v5 = v0[2];
  v4 = v0[3];
  v6 = (_QWORD *)swift_task_alloc(dword_100314EFC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1001691D4;
  return sub_1001684B8(v2, v3, v5, v4);
}

uint64_t sub_1001691D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = sub_10016CF58();
  if (!v1)
    v4 = a1;
  return sub_10016D23C(v4, *(uint64_t (**)(void))(v2 + 8));
}

_QWORD *sub_100169204(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  __int128 v28;
  ValueMetadata *v29;
  _UNKNOWN **v30;

  if (!a1 || !*(_QWORD *)(a1 + 16))
  {
    v15 = _swiftEmptyArrayStorage;
    if (!a2)
      return v15;
    goto LABEL_8;
  }
  v12 = (_QWORD *)swift_allocObject(&unk_1002C5A10, 40, 7);
  v12[2] = a3;
  v12[3] = a5;
  v12[4] = a6;
  swift_bridgeObjectRetain(a1);
  v13 = a3;
  swift_unknownObjectRetain();
  swift_retain(v12);
  sub_100172434(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  v15 = (_QWORD *)v14;
  v17 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    sub_100172434(v16 > 1, v17 + 1, 1, v14);
    v15 = v25;
  }
  v29 = &type metadata for AppMetadataTask;
  v30 = &off_1002C5AC8;
  v18 = (_QWORD *)swift_allocObject(&unk_1002C59E8, 48, 7);
  *(_QWORD *)&v28 = v18;
  v18[2] = a1;
  v18[3] = a4;
  v18[4] = &unk_100314ED0;
  v18[5] = v12;
  v15[2] = v17 + 1;
  sub_10016C8B0(&v28, (uint64_t)&v15[5 * v17 + 4]);
  swift_release(v12);
  if (a2)
  {
LABEL_8:
    if (*(_QWORD *)(a2 + 16))
    {
      v19 = (_QWORD *)swift_allocObject(&unk_1002C59C0, 40, 7);
      v19[2] = a3;
      v19[3] = a5;
      v19[4] = a6;
      v20 = a3;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain(a2);
      swift_retain(v19);
      if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      {
        sub_100172434(0, v15[2] + 1, 1, (uint64_t)v15);
        v15 = v26;
      }
      v22 = v15[2];
      v21 = v15[3];
      if (v22 >= v21 >> 1)
      {
        sub_100172434(v21 > 1, v22 + 1, 1, (uint64_t)v15);
        v15 = v27;
      }
      v29 = &type metadata for AppMetadataTask;
      v30 = &off_1002C5AC8;
      v23 = (_QWORD *)swift_allocObject(&unk_1002C59E8, 48, 7);
      *(_QWORD *)&v28 = v23;
      v23[2] = a2;
      v23[3] = a4;
      v23[4] = &unk_100314EC0;
      v23[5] = v19;
      v15[2] = v22 + 1;
      sub_10016C8B0(&v28, (uint64_t)&v15[5 * v22 + 4]);
      swift_release(v19);
    }
  }
  return v15;
}

uint64_t sub_100169468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100169484, 0, 0);
}

uint64_t sub_100169484(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  sub_10016D338(a1, &qword_100314ED8, AMSMediaTask_ptr);
  v2 = sub_10016D4E0();
  v3 = sub_10016D640((uint64_t)v2);
  sub_10016BE0C(v3, v4);
  v5 = (_QWORD *)swift_task_alloc(dword_100314EE4);
  *(_QWORD *)(v1 + 56) = v5;
  v6 = sub_10016D574(v5, (uint64_t)sub_1001694E0);
  return sub_10016D248(v6, v7);
}

uint64_t sub_1001694E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10016D0C8();
  if (!v1)
    *(_QWORD *)(v2 + 72) = v0;
  sub_10016CFA0();
  return sub_10016CF14();
}

id sub_100169528(void *a1)
{
  id v2;
  id v3;
  NSString v4;
  NSString v5;
  id v6;
  uint64_t v7;

  v2 = objc_allocWithZone((Class)AMSMediaTask);
  v3 = a1;
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v2, "initWithType:clientIdentifier:clientVersion:bag:", 8, v4, v5, v3);

  v7 = Dictionary.init(dictionaryLiteral:)(&off_1002C52D0, &type metadata for String, &type metadata for String, &protocol witness table for String);
  sub_10016BD40(v7, v6);
  return v6;
}

uint64_t sub_1001695F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[43] = a2;
  v3[44] = v2;
  v3[42] = a1;
  return swift_task_switch(sub_100169614, 0, 0);
}

uint64_t sub_100169614()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 16;
  v2 = objc_msgSend(*(id *)(v0 + 352), "perform");
  *(_QWORD *)(v0 + 360) = v2;
  *(_QWORD *)(v0 + 56) = v0 + 152;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1001696CC;
  v3 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v4 = (_QWORD *)(v0 + 80);
  v4[1] = 0x40000000;
  v4[2] = sub_10016AA24;
  v4[3] = &unk_1002C5A28;
  v4[4] = v3;
  objc_msgSend(v2, "resultWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1001696CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(*(_QWORD *)v0 + 368) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  sub_10016CFA0();
  return sub_10016D26C(v1, v2, v3);
}

void sub_100169720()
{
  uint64_t v0;
  void *v1;
  _OWORD *v2;
  void *v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  void *v24;
  void *v25;
  void *v26;
  _OWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  Swift::Int v37;
  unint64_t v38;
  char v39;
  Swift::Bool v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;

  v2 = (_OWORD *)(v0 + 152);
  v1 = *(void **)(v0 + 152);
  v3 = *(void **)(v0 + 360);
  *(_QWORD *)(v0 + 376) = v1;

  if (!sub_10016BDA4(v1))
  {
    *v2 = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
    goto LABEL_43;
  }
  v4 = v0 + 80;
  v5 = (const void *)(v0 + 224);
  *(_QWORD *)(v0 + 224) = 0x656372756F736572;
  *(_QWORD *)(v0 + 232) = 0xE900000000000073;
  sub_10016D51C();
  sub_10016D368();
  sub_10016D110(v6, v7);
  sub_10016D5A8();
  if (!*(_QWORD *)(v0 + 176))
    goto LABEL_43;
  v8 = sub_100161BD0(&qword_100314DE0);
  if ((sub_10016CF50(v0 + 80, v0 + 152, (uint64_t)&type metadata for Any + 8, v8) & 1) == 0)
  {
LABEL_44:

LABEL_45:
    sub_10016D154();
    __asm { BR              X1 }
  }
  *(_QWORD *)(v0 + 224) = 0x73656D6167;
  *(_QWORD *)(v0 + 232) = 0xE500000000000000;
  sub_10016D51C();
  sub_10016D368();
  sub_10016D110(v9, v10);
  sub_10016D5A8();
  if (!*(_QWORD *)(v0 + 176))
  {
LABEL_43:

    sub_10016D56C(v51, &qword_1003159B0);
    goto LABEL_45;
  }
  if ((sub_10016CF50(v0 + 224, v0 + 152, (uint64_t)&type metadata for Any + 8, v8) & 1) == 0)
    goto LABEL_44;
  v11 = *(_QWORD *)(v0 + 224);
  sub_1001B71F0((_QWORD *)(v0 + 296), v11);
  v12 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 328);
  v62 = *(_QWORD *)(v0 + 304);
  v63 = (unint64_t)(*(_QWORD *)(v0 + 312) + 64) >> 6;
  v65 = *(_QWORD *)(v0 + 296);
  v64 = (_QWORD *)(v0 + 120);
  v61 = v11;
  sub_10016D290();
  v14 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    *(_QWORD *)(v0 + 384) = v14;
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v12 << 6);
    }
    else
    {
      v17 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_49;
      if (v17 >= v63)
        goto LABEL_46;
      v18 = *(_QWORD *)(v62 + 8 * v17);
      v19 = v12 + 1;
      if (!v18)
      {
        sub_10016D67C();
        if (v20 == v21)
          goto LABEL_46;
        sub_10016D670();
        if (!v18)
        {
          sub_10016D67C();
          if (v20 == v21)
            goto LABEL_46;
          sub_10016D670();
          if (!v18)
          {
            sub_10016D67C();
            if (v20 == v21)
              goto LABEL_46;
            sub_10016D670();
            if (!v18)
            {
              sub_10016D67C();
              if (v20 == v21)
                goto LABEL_46;
              sub_10016D670();
              if (!v18)
              {
                v19 = v22 + 5;
                if (v22 + 5 >= v63)
                  goto LABEL_46;
                v18 = *(_QWORD *)(v62 + 8 * v19);
                if (!v18)
                {
                  v23 = v12 + 7;
                  while (v23 < v63)
                  {
                    v18 = *(_QWORD *)(v62 + 8 * v23++);
                    if (v18)
                    {
                      v19 = v23 - 1;
                      goto LABEL_30;
                    }
                  }
LABEL_46:
                  v53 = *(_QWORD *)(v0 + 344);
                  swift_release(v65);
                  swift_bridgeObjectRelease(v61, v54);
                  v55 = sub_10016D668();
                  *(_QWORD *)(v0 + 392) = v55;
                  sub_10016D5D8();
                  sub_100185E94();
                  *(_QWORD *)(v0 + 400) = v56;
                  sub_10016D5D0(v56, v57);
                  *(_QWORD *)(v0 + 408) = *(_QWORD *)(v53 + 24);
                  dispatch thunk of Actor.unownedExecutor.getter(v55, *(_QWORD *)(v53 + 8));
                  sub_10016D154();
                  swift_task_switch(v58, v59, v60);
                  return;
                }
              }
            }
          }
        }
      }
LABEL_30:
      v13 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v19 << 6);
      v12 = v19;
    }
    sub_1001631F4(*(_QWORD *)(v65 + 48) + 40 * v16, (uint64_t)v5);
    sub_100161F70(*(_QWORD *)(v65 + 56) + 32 * v16, v0 + 264);
    memcpy(v2, v5, 0x48uLL);
    v24 = (void *)sub_10016CBB4(0, &qword_100314E78, GKAppMetadata_ptr);
    sub_1001631F4((uint64_t)v2, v4);
    sub_100161F70(v0 + 192, (uint64_t)v64);
    GKAppMetadata.init(gameMetadata:)(v64);
    v26 = v25;
    sub_10016D5A8();
    if (!v26)
      goto LABEL_41;
    v66 = v13;
    v67 = v12;
    v27 = v2;
    v28 = objc_msgSend(v26, "bundleID");
    v29 = sub_10016D654();
    v31 = v30;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    v68 = v14;
    v33 = sub_10016D3F0();
    v35 = v14[2];
    v36 = (v34 & 1) == 0;
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
      break;
    v38 = v33;
    v39 = v34;
    sub_100161BD0(&qword_100314E60);
    v40 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v37);
    v14 = v68;
    if (v40)
    {
      v41 = sub_10016D3F0();
      if ((v39 & 1) != (v42 & 1))
      {
        sub_10016D034();
        return;
      }
      v38 = v41;
    }
    if ((v39 & 1) != 0)
    {
      v43 = v68[7];

      *(_QWORD *)(v43 + 8 * v38) = v26;
    }
    else
    {
      sub_10016D378((uint64_t)&v68[v38 >> 6]);
      v46 = (uint64_t *)(v68[6] + 16 * v38);
      *v46 = v29;
      v46[1] = v31;
      *(_QWORD *)(v68[7] + 8 * v38) = v26;
      v47 = v68[2];
      v21 = __OFADD__(v47, 1);
      v48 = v47 + 1;
      if (v21)
        goto LABEL_50;
      v68[2] = v48;
      v44 = swift_bridgeObjectRetain(v31);
    }
    v49 = sub_10016D2D4(v44, v45);
    sub_10016D2B0(v49, v50);
    v2 = v27;
    v5 = (const void *)(v0 + 224);
    v4 = v0 + 80;
    v13 = v66;
    v12 = v67;
LABEL_41:
    sub_10016CBEC((uint64_t)v2, &qword_100314EE8);
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
}

uint64_t sub_100169BE8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 408))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 344));
  *(_QWORD *)(v0 + 416) = 0;
  swift_release(*(_QWORD *)(v0 + 400));
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_100169C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = sub_10016D2C4();
  return sub_10016CFBC(v1, v2);
}

uint64_t sub_100169C70()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 360);
  swift_willThrow();

  return sub_10016D144(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100169CA4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 376);
  v2 = swift_release(*(_QWORD *)(v0 + 400));
  sub_10016D13C(v2, v3);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100169CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100169D00, 0, 0);
}

uint64_t sub_100169D00(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  sub_10016D338(a1, &qword_100314ED8, AMSMediaTask_ptr);
  v2 = sub_10016D4E0();
  v3 = sub_10016D640((uint64_t)v2);
  sub_10016BE58(v3, v4);
  v5 = (_QWORD *)swift_task_alloc(dword_100314EE4);
  *(_QWORD *)(v1 + 56) = v5;
  v6 = sub_10016D574(v5, (uint64_t)sub_100169D5C);
  return sub_10016D248(v6, v7);
}

uint64_t sub_100169D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10016D0C8();
  if (!v1)
    *(_QWORD *)(v2 + 72) = v0;
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_100169DA4()
{
  uint64_t v0;

  return sub_10016CFBC(*(_QWORD *)(v0 + 72), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100169DD4()
{
  uint64_t v0;

  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AppMetadataNetworkFetcher.fetch(bundleIDs:adamIDs:bag:batchSize:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return sub_10016CFC8((uint64_t)sub_100169E20);
}

uint64_t sub_100169E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  _QWORD *v4;

  sub_10016D480();
  sub_100163928(*(_QWORD **)(v0 + 64), *(_QWORD *)(*(_QWORD *)(v0 + 64) + 24));
  v1 = sub_10016D3E0();
  v3 = v2(v1);
  *(_QWORD *)(v0 + 72) = v3;
  v4 = (_QWORD *)swift_task_alloc(dword_100314DBC);
  *(_QWORD *)(v0 + 80) = v4;
  *v4 = v0;
  v4[1] = sub_100169EC4;
  return AppMetadataNetworkFetcher.fetch(tasks:)(v3);
}

uint64_t sub_100169EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10016D0B4();
  sub_10016D2B8(v3);
  *(_QWORD *)(v2 + 88) = v1;
  swift_task_dealloc(v4);
  if (!v1)
    *(_QWORD *)(v2 + 96) = v0;
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_100169F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 72), a2);
  return sub_10016CFBC(*(_QWORD *)(v2 + 96), *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100169F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 72), a2);
  return sub_10016CF2C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t AppMetadataNetworkFetcher.fetch(tasks:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return sub_10016CFC8((uint64_t)sub_100169F88);
}

uint64_t sub_100169F88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[3];
  sub_100161BD0(&qword_100314DC0);
  sub_100161BD0(&qword_100314DC8);
  v2 = swift_task_alloc(32);
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_10016A02C;
  v4 = sub_10016D1BC();
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v4);
}

uint64_t sub_10016A02C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10016D024();
  sub_10016D2B8(v2);
  *(_QWORD *)(v0 + 48) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_task_dealloc(*(_QWORD *)(v0 + 32));
  sub_10016CFA0();
  return sub_10016CF78();
}

uint64_t sub_10016A080()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10016A0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[30] = a2;
  v3[31] = a3;
  v3[29] = a1;
  v4 = sub_100161BD0(&qword_100314E88);
  v3[32] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[33] = v5;
  v3[34] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100161BD0(&qword_100314CE8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[35] = swift_task_alloc(v6);
  v3[36] = swift_task_alloc(v6);
  return swift_task_switch(sub_10016A148, 0, 0);
}

uint64_t sub_10016A148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, __int128 *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  sub_10016D198();
  v15 = *(_QWORD *)(v14 + 248);
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    a9 = (_QWORD *)(v14 + 112);
    a10 = v14 + 144;
    a11 = (__int128 *)(v14 + 72);
    v17 = v15 + 32;
    v18 = sub_10016D468();
    sub_10016D290();
    do
    {
      v20 = *(_QWORD *)(v14 + 280);
      v19 = *(_QWORD *)(v14 + 288);
      sub_100161B54(v19, 1, 1, v18);
      sub_10016C850(v17, (uint64_t)a11);
      v21 = sub_10016D1E0((uint64_t)&unk_1002C5968);
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)(v21 + 24) = 0;
      sub_10016C8B0(a11, v21 + 32);
      sub_10016C930(v19, v20, &qword_100314CE8);
      v22 = sub_10016445C(v20, 1, v18);
      v23 = *(_QWORD *)(v14 + 280);
      if ((_DWORD)v22 == 1)
      {
        sub_10016CBEC(*(_QWORD *)(v14 + 280), &qword_100314CE8);
        v24 = 0;
      }
      else
      {
        v25 = TaskPriority.rawValue.getter(v22);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v23, v18);
        v24 = v25;
      }
      if (*(_QWORD *)(v21 + 16))
      {
        v26 = *(_QWORD *)(v21 + 24);
        v27 = sub_10016D668();
        swift_unknownObjectRetain();
        v28 = dispatch thunk of Actor.unownedExecutor.getter(v27, v26);
        v30 = v29;
        swift_unknownObjectRelease();
      }
      else
      {
        v28 = 0;
        v30 = 0;
      }
      v31 = **(_QWORD **)(v14 + 240);
      v32 = sub_100161BD0(&qword_100314DC0);
      v33 = v30 | v28;
      if (v30 | v28)
      {
        v33 = v14 + 112;
        *a9 = 0;
        *(_QWORD *)(v14 + 120) = 0;
        *(_QWORD *)(v14 + 128) = v28;
        *(_QWORD *)(v14 + 136) = v30;
      }
      v34 = *(_QWORD *)(v14 + 288);
      *(_QWORD *)(v14 + 144) = 1;
      *(_QWORD *)(v14 + 152) = v33;
      *(_QWORD *)(v14 + 160) = v31;
      v35 = swift_task_create(v24 | 0x3100, a10, v32, &unk_100314E98, v21);
      swift_release(v35);
      sub_10016CBEC(v34, &qword_100314CE8);
      v17 += 40;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + 248), v36);
  }
  v37 = **(_QWORD **)(v14 + 240);
  v38 = sub_100161BD0(&qword_100314DC0);
  v39 = sub_100161BD0(&qword_100314EA0);
  ThrowingTaskGroup.makeAsyncIterator()(v37, v38, v39, &protocol self-conformance witness table for Error);
  *(_QWORD *)(v14 + 296) = sub_10016C95C();
  v40 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v14 + 304) = v40;
  *v40 = v14;
  v40[1] = sub_10016A3B0;
  sub_10016D4A8();
  return dispatch thunk of AsyncIteratorProtocol.next()(v41, v42, v43, v44, v45, v46, v47, v48, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10016A3B0()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_10016D024();
  sub_10016D100(v0[38], v2);
  if (v1)
  {
    v0[40] = v1;
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton, v3);
    sub_10016D448();
  }
  else
  {
    v0[39] = (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_10016CFA0();
  return sub_10016CF14();
}

void sub_10016A428(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t (*v59)(_QWORD *);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v3 = v2[28];
  if (v3 == 1)
  {
    v4 = v2[39];
    v5 = v2[35];
    v6 = v2[34];
    v7 = (_QWORD *)v2[29];
    (*(void (**)(uint64_t, _QWORD))(v2[33] + 8))(v6, v2[32]);
    sub_10016C9A0(v2[28], v8);
    *v7 = v4;
    sub_10016D2A8();
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    sub_10016D154();
    __asm { BR              X0 }
  }
  if (v3)
  {
    v10 = v2[39];
    sub_10016D21C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    v2[27] = v10;
    sub_10016C9F0(v3, (uint64_t)sub_10016C9B0, 0, v2 + 2);
    v60 = v2[2];
    v61 = v2[8];
    v62 = v2[5];
    v12 = v2[6];
    v58 = v2[3];
    v59 = (uint64_t (*)(_QWORD *))v2[7];
    v56 = v3;
    v57 = (unint64_t)(v2[4] + 64) >> 6;
    v13 = (_QWORD *)v2[39];
    sub_10016D21C();
    while (1)
    {
      if (v12)
      {
        sub_10016D62C();
        v16 = v15 | (v62 << 6);
      }
      else
      {
        v17 = v62 + 1;
        if (__OFADD__(v62, 1))
          goto LABEL_44;
        if (v17 >= v57)
          goto LABEL_39;
        if (!*(_QWORD *)(v58 + 8 * v17))
        {
          sub_10016D534();
          if (v18 == v19)
            goto LABEL_39;
          sub_10016D528();
          if (!v20)
          {
            sub_10016D534();
            if (v18 == v19)
              goto LABEL_39;
            sub_10016D528();
            if (!v21)
            {
              sub_10016D534();
              if (v18 == v19)
                goto LABEL_39;
              sub_10016D528();
              if (!v22)
              {
                sub_10016D534();
                if (v18 == v19)
                  goto LABEL_39;
                sub_10016D528();
                if (!v24)
                {
                  if (v23 + 5 >= v57)
                    goto LABEL_39;
                  if (!*(_QWORD *)(v58 + 8 * (v23 + 5)))
                  {
                    v25 = v62 + 7;
                    while (v25 < v57)
                    {
                      if (*(_QWORD *)(v58 + 8 * v25++))
                        goto LABEL_27;
                    }
LABEL_39:
                    sub_10016C9A0(v56, v14);
                    sub_10016CA2C(v60);
                    v52 = swift_release(v61);
                    sub_10016D2D4(v52, v53);
                    sub_10016C9A0(v56, v54);
                    goto LABEL_40;
                  }
                }
              }
            }
          }
        }
LABEL_27:
        sub_10016D400();
        v62 = v27;
      }
      v28 = (_QWORD *)(*(_QWORD *)(v60 + 48) + 16 * v16);
      v29 = v28[1];
      v30 = *(void **)(*(_QWORD *)(v60 + 56) + 8 * v16);
      v2[24] = *v28;
      v2[25] = v29;
      v2[26] = v30;
      swift_bridgeObjectRetain(v29);
      v31 = v30;
      v32 = v59(v2 + 24);
      sub_10016D110(v32, v33);

      v35 = v2[21];
      v34 = v2[22];
      v36 = (void *)v2[23];
      v38 = sub_1001860C4(v35, v34);
      v39 = v13[2];
      v40 = (v37 & 1) == 0;
      v41 = v39 + v40;
      if (__OFADD__(v39, v40))
        break;
      v42 = v37;
      if (v13[3] >= v41)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100161BD0(&qword_100314E60);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_10016D540(v41);
        v43 = sub_10016D018();
        if ((v42 & 1) != (v44 & 1))
        {
          sub_10016D034();
          return;
        }
        v38 = v43;
      }
      v13 = (_QWORD *)v2[27];
      if ((v42 & 1) != 0)
      {
        v45 = *(id *)(v13[7] + 8 * v38);

        sub_10016D010(v46, v47);
        v48 = v13[7];

        *(_QWORD *)(v48 + 8 * v38) = v45;
        isUniquelyReferenced_nonNull_native = 1;
      }
      else
      {
        sub_10016D378((uint64_t)&v13[v38 >> 6]);
        v49 = (uint64_t *)(v13[6] + 16 * v38);
        *v49 = v35;
        v49[1] = v34;
        *(_QWORD *)(v13[7] + 8 * v38) = v36;
        v50 = v13[2];
        v19 = __OFADD__(v50, 1);
        v51 = v50 + 1;
        if (v19)
          goto LABEL_43;
        v13[2] = v51;
        isUniquelyReferenced_nonNull_native = 1;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  else
  {
    sub_10016C9A0(0, a2);
    v13 = (_QWORD *)v2[39];
LABEL_40:
    v2[41] = v13;
    v55 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    v2[42] = v55;
    *v55 = v2;
    v55[1] = sub_10016A854;
    sub_10016D154();
    dispatch thunk of AsyncIteratorProtocol.next()();
  }
}

uint64_t sub_10016A810()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  sub_10016D2A8();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016A854()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_10016D024();
  sub_10016D100(v0[42], v2);
  v4 = v0[41];
  if (v1)
  {
    v0[40] = v1;
    swift_bridgeObjectRelease(v4, v3);
    sub_10016D448();
  }
  else
  {
    v0[39] = v4;
  }
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_10016A8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_10016A8D8, 0, 0);
}

uint64_t sub_10016A8D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 24);
  v2 = v1[3];
  v3 = v1[4];
  sub_100163928(v1, v2);
  v4 = (_QWORD *)sub_10016D278();
  *(_QWORD *)(v0 + 32) = v4;
  *v4 = v0;
  v4[1] = sub_10016A93C;
  return v6(v2, v3);
}

uint64_t sub_10016A93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;

  sub_10016D0B4();
  v4 = *v3;
  sub_10016D100(*(_QWORD *)(v2 + 32), v5);
  if (v1)
    return sub_10016D170(*(uint64_t (**)(void))(v4 + 8));
  *(_QWORD *)(v2 + 40) = v0;
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_10016A990()
{
  uint64_t v0;

  return sub_10016D128(*(_QWORD *)(v0 + 40));
}

uint64_t sub_10016A998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc(dword_100314DB4);
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_10016CEF4;
  return AppMetadataNetworkFetcher.fetch(bundleIDs:adamIDs:bag:batchSize:cache:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10016AA24(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
    return sub_1001B72A8(v3, a3);
  if (a2)
    return sub_1001B72FC(v3, (uint64_t)a2);
  __break(1u);
  return result;
}

void GKAppMetadata.init(gameMetadata:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  char v88;
  NSString v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  NSArray v123;
  uint64_t v124;
  Class isa;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSString v133;
  uint64_t v134;
  id v135;
  Class v136;
  Class v137;
  NSString v138;
  NSString v139;
  id v140;
  NSString v141;
  NSString v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  Class v146;
  uint64_t v147;
  Class v148;
  NSString v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  NSString v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  NSString v167;
  uint64_t v168;
  NSString v169;
  NSString v170;
  id v171;
  id v172;
  NSString v173;
  _QWORD v174[2];
  _BYTE v175[24];
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;

  v2 = v1;
  v4 = sub_100161BD0(&qword_100314C18);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v150 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v150 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v150 - v11;
  sub_100161F70((uint64_t)a1, (uint64_t)v175);
  v13 = sub_100161BD0(&qword_100314DE0);
  if ((sub_10016CF50((uint64_t)&v177, (uint64_t)v175, (uint64_t)&type metadata for Any + 8, v13) & 1) == 0)
    goto LABEL_61;
  v14 = v177;
  v174[0] = 25705;
  v174[1] = 0xE200000000000000;
  sub_10016CF20();
  sub_10016CFAC();
  v15 = sub_10016CF84();
  if (*((_QWORD *)&v178 + 1))
  {
    if ((sub_10016CF00(v15, v16, v17, (uint64_t)&type metadata for String) & 1) == 0)
    {
      v74 = v14;
LABEL_60:
      swift_bridgeObjectRelease(v74, v18);
      goto LABEL_61;
    }
    v20 = (NSString)v174[0];
    v19 = v174[1];
    strcpy((char *)v174, "attributes");
    BYTE3(v174[1]) = 0;
    HIDWORD(v174[1]) = -369098752;
    sub_10016CF20();
    sub_10016CFAC();
    sub_10016D2DC(v21, v22);
    sub_10016CF84();
    if (!*((_QWORD *)&v178 + 1))
      goto LABEL_48;
    if ((sub_10016CF38() & 1) == 0)
    {
LABEL_59:
      v74 = v19;
      goto LABEL_60;
    }
    sub_10016D428(0xD000000000000012);
    sub_10016CF20();
    sub_10016CFAC();
    v23 = sub_10016CF84();
    if (*((_QWORD *)&v178 + 1))
    {
      v25 = sub_10016CF38();
      if ((v25 & 1) == 0)
        goto LABEL_58;
      v173 = v20;
      v174[0] = 7565161;
      v174[1] = 0xE300000000000000;
      sub_10016CF20();
      sub_10016D458();
      sub_10016D2B0(v27, v28);
      v23 = sub_10016CF84();
      if (*((_QWORD *)&v178 + 1))
      {
        v25 = sub_10016CF38();
        if ((v25 & 1) != 0)
        {
          v29 = (id)v174[0];
          strcpy((char *)v174, "shortName");
          WORD1(v174[1]) = 0;
          HIDWORD(v174[1]) = -385875968;
          sub_10016CF20();
          sub_10016D458();
          v30 = sub_10016CF84();
          if (!*((_QWORD *)&v178 + 1))
          {
            v75 = v29;
LABEL_46:
            v23 = swift_bridgeObjectRelease(v75, v31);
            goto LABEL_47;
          }
          if ((sub_10016CF00(v30, v31, v32, (uint64_t)&type metadata for String) & 1) == 0)
          {
            v76 = v29;
LABEL_57:
            v25 = swift_bridgeObjectRelease(v76, v33);
            goto LABEL_58;
          }
          v172 = v29;
          v34 = (void *)v174[1];
          v170 = (NSString)v174[0];
          v174[0] = 1701667182;
          v174[1] = 0xE400000000000000;
          sub_10016CF20();
          sub_10016CFAC();
          v35 = sub_10016CF84();
          if (!*((_QWORD *)&v178 + 1))
          {
            v77 = v34;
LABEL_45:
            swift_bridgeObjectRelease(v77, v36);
            v75 = v172;
            goto LABEL_46;
          }
          v171 = v34;
          if ((sub_10016CF00(v35, v36, v37, (uint64_t)&type metadata for String) & 1) == 0)
          {
LABEL_56:
            swift_bridgeObjectRelease(v171, v38);
            v76 = v172;
            goto LABEL_57;
          }
          v169 = (NSString)v174[0];
          strcpy((char *)v174, "bundleId");
          BYTE1(v174[1]) = 0;
          WORD1(v174[1]) = 0;
          HIDWORD(v174[1]) = -402653184;
          sub_10016CF20();
          sub_10016D180();
          v39 = sub_10016CF84();
          if (!*((_QWORD *)&v178 + 1))
          {
LABEL_44:
            sub_10016D2B0(v39, v40);
            v77 = v171;
            goto LABEL_45;
          }
          v42 = sub_10016CF00(v39, v40, v41, (uint64_t)&type metadata for String);
          if ((v42 & 1) == 0)
          {
LABEL_55:
            sub_10016D2B0(v42, v43);
            goto LABEL_56;
          }
          v167 = (NSString)v174[0];
          v168 = v174[1];
          strcpy((char *)v174, "supportsArcade");
          HIBYTE(v174[1]) = -18;
          sub_10016CF20();
          sub_10016CFAC();
          v44 = sub_10016CF84();
          if (*((_QWORD *)&v178 + 1))
          {
            if ((sub_10016CF00(v44, v45, v46, (uint64_t)&type metadata for Bool) & 1) == 0)
              goto LABEL_54;
            v166 = LOBYTE(v174[0]);
            sub_10016D428(0xD000000000000016);
            sub_10016CF20();
            sub_10016D180();
            v48 = sub_10016CF84();
            if (*((_QWORD *)&v178 + 1))
            {
              if ((sub_10016CF00(v48, v45, v49, (uint64_t)&type metadata for Bool) & 1) == 0)
                goto LABEL_54;
              v165 = LOBYTE(v174[0]);
              strcpy((char *)v174, "deviceFamilies");
              HIBYTE(v174[1]) = -18;
              sub_10016CF20();
              sub_10016CFAC();
              sub_10016CF84();
              if (*((_QWORD *)&v178 + 1))
              {
                v50 = sub_100161BD0(&qword_1003159A0);
                if ((sub_10016CF00(v50, v51, v52, v50) & 1) != 0)
                {
                  v164 = v174[0];
                  strcpy((char *)v174, "artwork");
                  v174[1] = 0xE700000000000000;
                  sub_10016CF20();
                  sub_10016D180();
                  sub_10016CF84();
                  if (*((_QWORD *)&v178 + 1))
                  {
                    if ((sub_10016CF38() & 1) == 0)
                    {
LABEL_53:
                      swift_bridgeObjectRelease(v164, v54);
                      goto LABEL_54;
                    }
                    v55 = v174[0];
                    v174[0] = 7107189;
                    v174[1] = 0xE300000000000000;
                    sub_10016CF20();
                    v163 = v55;
                    sub_100166D80(v55, &v177);
                    v56 = sub_10016CF84();
                    if (*((_QWORD *)&v178 + 1))
                    {
                      if ((sub_10016CF00(v56, v57, v58, (uint64_t)&type metadata for String) & 1) == 0)
                      {
LABEL_52:
                        sub_10016D498(v59, (uint64_t)&v182);
                        goto LABEL_53;
                      }
                      v161 = v174[0];
                      v162 = v174[1];
                      v174[0] = 0x6874646977;
                      v174[1] = 0xE500000000000000;
                      sub_10016CF20();
                      sub_10016CF8C();
                      v60 = sub_10016CF84();
                      if (*((_QWORD *)&v178 + 1))
                      {
                        sub_10016D338(v60, (unint64_t *)&qword_100314DE8, NSNumber_ptr);
                        if ((sub_10016CF38() & 1) == 0)
                        {
LABEL_51:
                          sub_10016D498(v62, (uint64_t)&v181);
                          goto LABEL_52;
                        }
                        v160 = (id)v174[0];
                        v174[0] = 0x746867696568;
                        v174[1] = 0xE600000000000000;
                        sub_10016CF20();
                        sub_10016CF8C();
                        sub_10016CF84();
                        if (*((_QWORD *)&v178 + 1))
                        {
                          if ((sub_10016CF38() & 1) != 0)
                          {
                            v150 = (id)v174[0];
                            v159 = type metadata accessor for Date(0);
                            sub_100161B54((uint64_t)v12, 1, 1, v159);
                            sub_10016D428(0xD000000000000011);
                            sub_10016CF20();
                            sub_100166D80((uint64_t)v172, &v177);
                            sub_10016D108(v63, v64);
                            v65 = sub_10016CF84();
                            if (*((_QWORD *)&v178 + 1))
                            {
                              v66 = sub_10016D338(v65, &qword_100314DF0, NSDictionary_ptr);
                              if ((sub_10016CF00(v66, v67, v68, v66) & 1) == 0)
                                goto LABEL_73;
                              v69 = (id)v174[0];
                              sub_10016D688();
                              *(_QWORD *)&v177 = v71;
                              *((_QWORD *)&v177 + 1) = v70;
                              v158 = (NSString)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v177, &type metadata for String);
                              v172 = v69;
                              v72 = objc_msgSend(v69, "__swift_objectForKeyedSubscript:", v158);
                              swift_unknownObjectRelease();
                              if (v72)
                              {
                                _bridgeAnyObjectToAny(_:)(&v177, v72);
                                swift_unknownObjectRelease();
                              }
                              else
                              {
                                v177 = 0u;
                                v178 = 0u;
                              }
                              sub_10016C1C0((uint64_t)&v177, (uint64_t)v175, &qword_1003159B0);
                              if (v176)
                              {
                                if ((sub_10016CF50((uint64_t)v174, (uint64_t)v175, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
                                {
                                  v158 = (NSString)v174[0];
                                  if (qword_1003148F0 != -1)
                                    swift_once(&qword_1003148F0, sub_10016B850);
                                  v157 = (id)qword_100314D98;
                                  v158 = sub_10016D6BC();
                                  sub_10016D108((uint64_t)v158, v80);
                                  v81 = objc_msgSend(v157, "dateFromString:", v158);
                                  sub_10016D340((uint64_t)&v179);
                                  if (v81)
                                  {
                                    static Date._unconditionallyBridgeFromObjectiveC(_:)(v81);

                                    v82 = 0;
                                  }
                                  else
                                  {
                                    v82 = 1;
                                  }
                                  sub_10016D60C();
                                  sub_10016D56C(v144, &qword_100314C18);
                                  sub_100161B54((uint64_t)v10, v82, 1, v159);
                                  sub_10016C1C0((uint64_t)v10, (uint64_t)v12, &qword_100314C18);
                                }
                                else
                                {
                                  sub_10016D60C();
                                }
LABEL_73:
                                *(_QWORD *)&v177 = 0x6F6C6F4374786574;
                                *((_QWORD *)&v177 + 1) = 0xEA00000000003172;
                                sub_10016D0EC();
                                sub_10016CF8C();
                                v83 = sub_10016CF84();
                                if (*((_QWORD *)&v178 + 1))
                                {
                                  sub_10016CF00(v83, v84, v85, (uint64_t)&type metadata for String);
                                  sub_10016D118();
                                  v172 = v87;
                                  if (v88)
                                    v89 = 0;
                                  else
                                    v89 = v86;
                                  v158 = v89;
                                }
                                else
                                {
                                  sub_10016D190(v83, &qword_1003159B0);
                                  v172 = 0;
                                  v158 = 0;
                                }
                                *(_QWORD *)&v177 = 0x6F6C6F4374786574;
                                *((_QWORD *)&v177 + 1) = 0xEA00000000003272;
                                sub_10016D0EC();
                                sub_10016CF8C();
                                v90 = sub_10016CF84();
                                if (*((_QWORD *)&v178 + 1))
                                {
                                  sub_10016CF00(v90, v91, v92, (uint64_t)&type metadata for String);
                                  sub_10016D118();
                                  v157 = v94;
                                  if (v88)
                                    v95 = 0;
                                  else
                                    v95 = v93;
                                  v156 = v95;
                                }
                                else
                                {
                                  sub_10016D190(v90, &qword_1003159B0);
                                  v157 = 0;
                                  v156 = 0;
                                }
                                *(_QWORD *)&v177 = 0x6F6C6F4374786574;
                                *((_QWORD *)&v177 + 1) = 0xEA00000000003372;
                                sub_10016D0EC();
                                sub_10016CF8C();
                                v96 = sub_10016CF84();
                                if (*((_QWORD *)&v178 + 1))
                                {
                                  sub_10016CF00(v96, v97, v98, (uint64_t)&type metadata for String);
                                  sub_10016D118();
                                  v155 = v100;
                                  if (v88)
                                    v101 = 0;
                                  else
                                    v101 = v99;
                                  v154 = v101;
                                }
                                else
                                {
                                  sub_10016D190(v96, &qword_1003159B0);
                                  v155 = 0;
                                  v154 = 0;
                                }
                                *(_QWORD *)&v177 = 0x6F6C6F4374786574;
                                *((_QWORD *)&v177 + 1) = 0xEA00000000003472;
                                sub_10016D0EC();
                                sub_10016CF8C();
                                v102 = sub_10016CF84();
                                if (*((_QWORD *)&v178 + 1))
                                {
                                  sub_10016CF00(v102, v103, v104, (uint64_t)&type metadata for String);
                                  sub_10016D118();
                                  v153 = v106;
                                  if (v88)
                                    v107 = 0;
                                  else
                                    v107 = v105;
                                  v152 = v107;
                                }
                                else
                                {
                                  sub_10016D190(v102, &qword_1003159B0);
                                  v153 = 0;
                                  v152 = 0;
                                }
                                *(_QWORD *)&v177 = 0x726F6C6F436762;
                                *((_QWORD *)&v177 + 1) = 0xE700000000000000;
                                sub_10016D0EC();
                                sub_100166D80(v163, &v177);
                                sub_10016D13C(v108, v109);
                                v110 = sub_10016CF84();
                                if (*((_QWORD *)&v178 + 1))
                                {
                                  sub_10016CF00(v110, v111, v112, (uint64_t)&type metadata for String);
                                  sub_10016D118();
                                  v163 = v114;
                                  if (v88)
                                    v115 = 0;
                                  else
                                    v115 = v113;
                                  v151 = v115;
                                }
                                else
                                {
                                  sub_10016D190(v110, &qword_1003159B0);
                                  v163 = 0;
                                  v151 = 0;
                                }
                                objc_allocWithZone((Class)GKAppMetadataArtwork);
                                v116 = v150;
                                v117 = v160;
                                v147 = v163;
                                v118 = v162;
                                v162 = (uint64_t)v117;
                                v163 = (uint64_t)v116;
                                v172 = sub_10016B880(v161, v118, v117, v116, (uint64_t)v172, (uint64_t)v158, (uint64_t)v157, v156, v155, v154, v153, v152, v147, v151);
                                v167 = String._bridgeToObjectiveC()();
                                sub_10016D13C((uint64_t)v167, v119);
                                v173 = String._bridgeToObjectiveC()();
                                sub_10016D110((uint64_t)v173, v120);
                                v169 = String._bridgeToObjectiveC()();
                                sub_10016D2B0((uint64_t)v169, v121);
                                v170 = String._bridgeToObjectiveC()();
                                sub_10016D13C((uint64_t)v170, v122);
                                v123.super.isa = Array._bridgeToObjectiveC()().super.isa;
                                sub_10016D13C((uint64_t)v123.super.isa, v124);
                                sub_10016C930((uint64_t)v12, (uint64_t)v7, &qword_100314C18);
                                if (sub_10016445C((uint64_t)v7, 1, v159) == 1)
                                {
                                  isa = 0;
                                }
                                else
                                {
                                  isa = Date._bridgeToObjectiveC()().super.isa;
                                  (*(void (**)(char *))(*(_QWORD *)(v159 - 8) + 8))(v7);
                                }
                                sub_10016D688();
                                v174[0] = v127;
                                v174[1] = v126;
                                sub_10016CF20();
                                sub_10016CFAC();
                                sub_10016D2DC(v128, v129);
                                v130 = sub_10016CF84();
                                if (*((_QWORD *)&v178 + 1))
                                {
                                  if ((sub_10016CF00(v130, v131, v132, (uint64_t)&type metadata for String) & 1) != 0)
                                  {
                                    v133 = String._bridgeToObjectiveC()();
                                    sub_10016D2DC((uint64_t)v133, v134);
LABEL_111:
                                    v135 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
                                    v171 = v133;
                                    v148 = isa;
                                    v149 = v133;
                                    v136 = isa;
                                    v137 = v123.super.isa;
                                    v146 = v123.super.isa;
                                    LOBYTE(v145) = v165;
                                    v138 = v167;
                                    v140 = v172;
                                    v139 = v173;
                                    v141 = v169;
                                    v142 = v170;
                                    objc_msgSend(v135, "initWithBundleID:adamID:name:shortName:artwork:supportsArcade:supportsGameController:deviceFamilies:latestVersionReleaseDate:genreDisplayName:", v167, v173, v169, v170, v172, v166, v145, v146, v148, v149);
                                    sub_10016D340((uint64_t)&v182);
                                    sub_10016D340((uint64_t)&v181);

                                    v143 = sub_100161FE0(a1);
                                    sub_10016D56C(v143, &qword_100314C18);
                                    goto LABEL_62;
                                  }
                                }
                                else
                                {
                                  sub_10016D190(v130, &qword_1003159B0);
                                }
                                v133 = 0;
                                goto LABEL_111;
                              }
                              sub_10016D60C();
                              v79 = (__int128 *)v175;
                            }
                            else
                            {
                              v79 = &v177;
                            }
                            sub_10016CBEC((uint64_t)v79, &qword_1003159B0);
                            goto LABEL_73;
                          }
                          sub_10016D340((uint64_t)&v180);
                          goto LABEL_51;
                        }
                        sub_10016D340((uint64_t)&v180);
                      }
                      sub_10016D498(v61, (uint64_t)&v181);
                    }
                    sub_10016D498(v57, (uint64_t)&v182);
                  }
                  swift_bridgeObjectRelease(v164, v53);
                  goto LABEL_43;
                }
LABEL_54:
                v42 = swift_bridgeObjectRelease(v168, v47);
                goto LABEL_55;
              }
            }
          }
LABEL_43:
          v39 = swift_bridgeObjectRelease(v168, v45);
          goto LABEL_44;
        }
LABEL_58:
        sub_10016D2DC(v25, v26);
        goto LABEL_59;
      }
    }
LABEL_47:
    sub_10016D2DC(v23, v24);
LABEL_48:
    v73 = v19;
    goto LABEL_49;
  }
  v73 = v14;
LABEL_49:
  v78 = swift_bridgeObjectRelease(v73, v16);
  sub_10016D190(v78, &qword_1003159B0);
LABEL_61:
  sub_100161FE0(a1);
LABEL_62:
  sub_100165DCC();
}

id sub_10016B850()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
  qword_100314D98 = (uint64_t)result;
  return result;
}

id sub_10016B880(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v15;
  NSString v21;
  uint64_t v22;
  NSString v23;
  uint64_t v24;
  NSString v25;
  uint64_t v26;
  NSString v27;
  uint64_t v28;
  NSString v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  id v33;

  v15 = v14;
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v22);
  if (a6)
  {
    v23 = sub_10016D6BC();
    sub_10016D108((uint64_t)v23, v24);
  }
  else
  {
    v23 = 0;
  }
  if (a8)
  {
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a8, v26);
  }
  else
  {
    v25 = 0;
  }
  if (a10)
  {
    v27 = sub_10016D6BC();
    sub_10016D108((uint64_t)v27, v28);
  }
  else
  {
    v27 = 0;
  }
  if (!a12)
  {
    v29 = 0;
    if (a14)
      goto LABEL_12;
LABEL_14:
    v31 = 0;
    goto LABEL_15;
  }
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a12, v30);
  if (!a14)
    goto LABEL_14;
LABEL_12:
  v31 = String._bridgeToObjectiveC()();
  sub_10016D2B0((uint64_t)v31, v32);
LABEL_15:
  v33 = objc_msgSend(v15, "initWithTemplateURL:width:height:textColor1:textColor2:textColor3:textColor4:backgroundColor:", v21, a3, a4, v23, v25, v27, v29, v31);

  return v33;
}

uint64_t sub_10016B9F0(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

Swift::Int sub_10016BA00(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100161BD0(&qword_100314EB0);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  if (!v11)
    goto LABEL_10;
LABEL_9:
  v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * i);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v21[1]);
      v25 = v24;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v23, v22);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) == 0)
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v28);
        if (v33 != -1)
        {
          v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    v34 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v29);
    *v34 = v23;
    v34[1] = v22;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v29) = v24;
    ++*(_QWORD *)(v8 + 16);
    if (v11)
      goto LABEL_9;
LABEL_10:
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_44;
    if (v17 >= v37)
    {
      swift_release(v5);
      v3 = v36;
      v18 = (_QWORD *)(v5 + 64);
      goto LABEL_37;
    }
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v38 + 8 * v17);
    ++v14;
    if (!v19)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v37)
        goto LABEL_35;
      v19 = *(_QWORD *)(v38 + 8 * v14);
      if (!v19)
        break;
    }
LABEL_21:
    v11 = (v19 - 1) & v19;
  }
  v20 = v17 + 2;
  if (v20 < v37)
  {
    v19 = *(_QWORD *)(v38 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        v14 = v20 + 1;
        if (__OFADD__(v20, 1))
          goto LABEL_45;
        if (v14 >= v37)
          goto LABEL_35;
        v19 = *(_QWORD *)(v38 + 8 * v14);
        ++v20;
        if (v19)
          goto LABEL_21;
      }
    }
    v14 = v20;
    goto LABEL_21;
  }
LABEL_35:
  swift_release(v5);
  v3 = v36;
LABEL_37:
  if ((v39 & 1) != 0)
  {
    v35 = 1 << *(_BYTE *)(v5 + 32);
    if (v35 >= 64)
      sub_1001737D0(0, (unint64_t)(v35 + 63) >> 6, v18);
    else
      *v18 = -1 << v35;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_42:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10016BCFC(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;

  *a1 = a4;
  swift_bridgeObjectRetain(a3);
  v6 = a4;
  return a2;
}

void sub_10016BD40(uint64_t a1, void *a2)
{
  uint64_t v4;
  Class isa;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1, v4);
  objc_msgSend(a2, "setAdditionalQueryParams:", isa);

}

uint64_t sub_10016BDA4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "responseDictionary");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  return v3;
}

void sub_10016BE0C(uint64_t a1, void *a2)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, "setBundleIdentifiers:", isa);

}

void sub_10016BE58(uint64_t a1, void *a2)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, "setItemIdentifiers:", isa);

}

id sub_10016BEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  id v19;
  uint64_t v21;

  v15 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (char *)objc_allocWithZone((Class)type metadata accessor for AppMetadataFetcher());
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, a6);
  v19 = sub_10016C088(a1, (uint64_t)v17, a3, v18, a5, a6, a7, a8);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, a6);
  return v19;
}

uint64_t sub_10016BF84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id sub_10016BFAC(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  char *v11;
  id v12;
  objc_super v14;
  _QWORD v15[5];

  v8 = sub_10016C7EC();
  v15[3] = &type metadata for AppMetadataNetworkFetcher;
  v15[4] = &protocol witness table for AppMetadataNetworkFetcher;
  v9 = swift_allocObject(&unk_1002C5940, 56, 7);
  v15[0] = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(a2 + 32);
  v11 = &a4[OBJC_IVAR___GKAppMetadataFetcher_cache];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = v8;
  sub_10016C850((uint64_t)v15, (uint64_t)&a4[OBJC_IVAR___GKAppMetadataFetcher_network]);
  *(_QWORD *)&a4[OBJC_IVAR___GKAppMetadataFetcher_bag] = a3;
  v14.receiver = a4;
  v14.super_class = (Class)type metadata accessor for AppMetadataFetcher();
  v12 = objc_msgSendSuper2(&v14, "init");
  sub_100161FE0(v15);
  return v12;
}

id sub_10016C088(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v14;
  char *v15;
  id v16;
  objc_super v18;
  _QWORD v19[5];

  v19[3] = a6;
  v19[4] = a8;
  v14 = sub_10016CA34(v19);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v14, a2, a6);
  v15 = &a4[OBJC_IVAR___GKAppMetadataFetcher_cache];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a7;
  sub_10016C850((uint64_t)v19, (uint64_t)&a4[OBJC_IVAR___GKAppMetadataFetcher_network]);
  *(_QWORD *)&a4[OBJC_IVAR___GKAppMetadataFetcher_bag] = a3;
  v18.receiver = a4;
  v18.super_class = (Class)type metadata accessor for AppMetadataFetcher();
  v16 = objc_msgSendSuper2(&v18, "init");
  sub_100161FE0(v19);
  return v16;
}

uint64_t type metadata accessor for AppMetadataFetcher()
{
  return objc_opt_self(GKAppMetadataFetcher);
}

uint64_t sub_10016C168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_task_alloc(dword_100314DD4);
  v3 = (_QWORD *)sub_10016D35C(v2);
  v4 = sub_10016D4F0(v3);
  return sub_10016A0AC(v4, v5, v1);
}

void sub_10016C1C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10016D438(a1, a2, a3);
  sub_10016D65C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_10016219C();
}

unint64_t sub_10016C1F0()
{
  unint64_t result;

  result = qword_100314DF8;
  if (!qword_100314DF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppMetadataFetcher.FetcherError, &type metadata for AppMetadataFetcher.FetcherError);
    atomic_store(result, (unint64_t *)&qword_100314DF8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AppMetadataFetcher.FetcherError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AppMetadataFetcher.FetcherError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10016C2C0 + 4 * byte_100232BB0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10016C2E0 + 4 * byte_100232BB5[v4]))();
}

_BYTE *sub_10016C2C0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10016C2E0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10016C2E8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10016C2F0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10016C2F8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10016C300(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10016C30C()
{
  return 0;
}

ValueMetadata *type metadata accessor for AppMetadataFetcher.FetcherError()
{
  return &type metadata for AppMetadataFetcher.FetcherError;
}

uint64_t destroy for AppMetadataNetworkFetcher(_QWORD *a1)
{
  return sub_100161FE0(a1);
}

uint64_t initializeWithCopy for AppMetadataNetworkFetcher(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for AppMetadataNetworkFetcher(_QWORD *a1, _QWORD *a2)
{
  sub_10016C398(a1, a2);
  return a1;
}

_QWORD *sub_10016C398(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for AppMetadataNetworkFetcher(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AppMetadataNetworkFetcher(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  sub_100161FE0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppMetadataNetworkFetcher(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppMetadataNetworkFetcher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataNetworkFetcher()
{
  return &type metadata for AppMetadataNetworkFetcher;
}

uint64_t sub_10016C5E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10016D5E0();

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40), v1);
  swift_release(*(_QWORD *)(v0 + 64));
  v2 = sub_10016D298();
  return swift_deallocObject(v2, v3, v4);
}

uint64_t sub_10016C614()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10016D480();
  sub_10016D388();
  v0 = swift_task_alloc(dword_100314E54);
  v1 = (_QWORD *)sub_10016D35C(v0);
  v2 = sub_10016D088(v1);
  return sub_1001680EC(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10016C668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _Block_release(*(const void **)(v0 + 48));
  _Block_release(*(const void **)(v0 + 56));

  v1 = sub_10016D298();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10016C6A4()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  void *v6;
  const void *v7;
  void *v8;
  _QWORD *v9;

  v2 = *((_QWORD *)v0 + 2);
  v3 = *((_QWORD *)v0 + 3);
  v4 = *((_QWORD *)v0 + 4);
  v5 = v0[5];
  v6 = (void *)*((_QWORD *)v0 + 6);
  v7 = (const void *)*((_QWORD *)v0 + 7);
  v8 = (void *)*((_QWORD *)v0 + 8);
  v9 = (_QWORD *)swift_task_alloc(dword_100314E6C);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_10016C73C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, const void *, void *, double))((char *)&dword_100314E68
                                                                                                  + dword_100314E68))(v2, v3, v4, v6, v7, v8, v5);
}

uint64_t sub_10016C73C()
{
  uint64_t v0;

  sub_10016CF58();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016C768()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10016C78C(uint64_t a1)
{
  uint64_t v1;

  sub_100167814(a1, *(_QWORD *)(v1 + 16));
}

_QWORD *sub_10016C794(_QWORD *a1)
{
  sub_100161FE0(a1);
  return a1;
}

uint64_t sub_10016C7B8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AppMetadataNetworkFetcher(a2, a1);
  return a2;
}

unint64_t sub_10016C7EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100314E80;
  if (!qword_100314E80)
  {
    v1 = type metadata accessor for AppMetadataCache();
    result = swift_getWitnessTable(&protocol conformance descriptor for AppMetadataCache, v1);
    atomic_store(result, (unint64_t *)&qword_100314E80);
  }
  return result;
}

uint64_t sub_10016C82C()
{
  uint64_t v0;

  sub_100161FE0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10016C850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_10016219C();
}

uint64_t sub_10016C890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10016D5E0();
  sub_100161FE0((_QWORD *)(v0 + 32));
  v1 = sub_10016D298();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10016C8B0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10016C8C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = swift_task_alloc(dword_100314E94);
  v7 = (_QWORD *)sub_10016D35C(v6);
  *v7 = v2;
  v7[1] = sub_10016CEEC;
  return sub_10016A8C0(a1, v4, v5, v1 + 32);
}

void sub_10016C930(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_10016D438(a1, a2, a3);
  sub_10016D65C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_10016219C();
}

unint64_t sub_10016C95C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100314EA8;
  if (!qword_100314EA8)
  {
    v1 = sub_100161C54(&qword_100314E88);
    result = swift_getWitnessTable(&protocol conformance descriptor for ThrowingTaskGroup<A, B>.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_100314EA8);
  }
  return result;
}

uint64_t sub_10016C9A0(uint64_t result, uint64_t a2)
{
  if (result != 1)
    return swift_bridgeObjectRelease(result, a2);
  return result;
}

uint64_t sub_10016C9B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_10016BCFC(&v6, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16));
  v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t sub_10016C9F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_10016CA2C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

_QWORD *sub_10016CA34(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

ValueMetadata *type metadata accessor for AppMetadataTaskCreator()
{
  return &type metadata for AppMetadataTaskCreator;
}

uint64_t sub_10016CA84()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)swift_task_alloc(dword_100314EBC);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10016D2F8(v1, (uint64_t)sub_10016CAD8);
  return sub_100169CE4(v2, v3, v4, v5);
}

uint64_t sub_10016CAD8(uint64_t a1)
{
  uint64_t v1;

  sub_10016CF58();
  return sub_10016D23C(a1, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10016CB04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16), a2);
  swift_release(*(_QWORD *)(v2 + 40));
  return swift_deallocObject(v2, 48, 7);
}

uint64_t sub_10016CB34()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10016CB60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)swift_task_alloc(dword_100314ECC);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_10016D2F8(v1, (uint64_t)sub_10016CEFC);
  return sub_100169468(v2, v3, v4, v5);
}

uint64_t sub_10016CBB4(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

void sub_10016CBEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100161BD0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_10016219C();
}

uint64_t destroy for AppMetadataTask(_QWORD *a1, uint64_t a2)
{
  swift_bridgeObjectRelease(*a1, a2);
  return swift_release(a1[3]);
}

uint64_t *initializeWithCopy for AppMetadataTask(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for AppMetadataTask(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6);
  a1[1] = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v9 = a1[3];
  a1[2] = v8;
  a1[3] = v7;
  swift_retain(v7);
  swift_release(v9);
  return a1;
}

uint64_t *assignWithTake for AppMetadataTask(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4, a2);
  a1[1] = a2[1];
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppMetadataTask(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppMetadataTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataTask()
{
  return &type metadata for AppMetadataTask;
}

uint64_t sub_10016CDC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v3 = v0[5];
  v5 = swift_task_alloc(dword_100314F04);
  v6 = (_QWORD *)sub_10016D35C(v5);
  v7 = sub_10016D4F0(v6);
  return sub_100168608(v7, v8, v1, v2, v4, v3);
}

uint64_t sub_10016CE38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10016D5E0();
  swift_bridgeObjectRelease(v0[4], v1);
  swift_release(v0[7]);
  swift_bridgeObjectRelease(v0[8], v2);
  v3 = sub_10016D298();
  return swift_deallocObject(v3, v4, v5);
}

uint64_t sub_10016CE68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;

  sub_10016D480();
  sub_10016D388();
  v0 = swift_task_alloc(dword_100314F14);
  v1 = (_QWORD *)sub_10016D35C(v0);
  v2 = sub_10016D088(v1);
  return sub_1001690AC(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10016CEBC()
{
  uint64_t v0;

  sub_10016CF58();
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10016CF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return swift_dynamicCast(v5 - 184, v5 - 128, v4 + 8, a4, 6);
}

uint64_t sub_10016CF14()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10016CF20()
{
  uint64_t v0;

  return AnyHashable.init<A>(_:)(v0 - 184);
}

uint64_t sub_10016CF2C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10016CF38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return swift_dynamicCast(v2 - 184, v2 - 128, v1 + 8, v0, 6);
}

uint64_t sub_10016CF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6);
}

uint64_t sub_10016CF58()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_10016CF78()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10016CF84()
{
  uint64_t v0;

  return sub_1001638F4(v0 - 168);
}

void sub_10016CF8C()
{
  uint64_t v0;

  sub_100166D80(*(_QWORD *)(v0 - 264), (_OWORD *)(v0 - 128));
}

void sub_10016CFAC()
{
  uint64_t v0;
  uint64_t v1;

  sub_100166D80(v0, (_OWORD *)(v1 - 128));
}

uint64_t sub_10016CFBC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10016CFC8(uint64_t a1)
{
  return swift_task_switch(a1, 0, 0);
}

void sub_10016CFD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v0 + 8 * (v4 >> 6) + 64) |= 1 << v4;
  v5 = (_QWORD *)(*(_QWORD *)(v0 + 48) + 16 * v4);
  *v5 = v3;
  v5[1] = v2;
  *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * v4) = v1;
}

uint64_t sub_10016D010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

unint64_t sub_10016D018()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1001860C4(v1, v0);
}

void sub_10016D024()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10016D034()
{
  return ((uint64_t (*)(void))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:))();
}

uint64_t sub_10016D050(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10016D06C()
{
  return ((uint64_t (*)(void))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:))();
}

uint64_t sub_10016D088(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_10016D0B4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10016D0C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 56);
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10016D0EC()
{
  uint64_t v0;

  return AnyHashable.init<A>(_:)(v0 - 128);
}

uint64_t sub_10016D0F8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10016D100@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10016D108(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_10016D110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_10016D128@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  **(_QWORD **)(v1 + 16) = a1;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10016D13C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_10016D144(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10016D170(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10016D180()
{
  uint64_t v0;

  sub_100166D80(*(_QWORD *)(v0 - 200), (_OWORD *)(v0 - 128));
}

void sub_10016D190(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10016CBEC(v2 - 128, a2);
}

uint64_t sub_10016D1B4()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10016D1BC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016D1E0(uint64_t a1)
{
  return swift_allocObject(a1, 72, 7);
}

uint64_t sub_10016D21C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10016D224(uint64_t a1)
{
  uint64_t v1;

  return sub_100161B54(v1, 1, 1, a1);
}

uint64_t sub_10016D23C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10016D248(uint64_t a1, uint64_t a2)
{
  return sub_1001695F8(a1, a2);
}

uint64_t sub_10016D254()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_10016D26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_10016D278()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(*(_QWORD *)(v0 + 8) + 4));
}

uint64_t sub_10016D290()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10016D298()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016D2A8()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10016D2B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

void sub_10016D2B8(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10016D2C4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10016D2D4(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(0x8000000000000000, a2);
}

uint64_t sub_10016D2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

BOOL sub_10016D2E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  Swift::Bool v11;
  Swift::Int v12;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v11, v12);
}

uint64_t sub_10016D2F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10016D314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10016445C(v1, 1, v0);
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10016D338(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  return sub_10016CBB4(0, a2, a3);
}

void sub_10016D340(uint64_t a1@<X8>)
{

}

uint64_t sub_10016D348(uint64_t a1, uint64_t a2)
{
  return sub_100161F70(a1, a2);
}

uint64_t sub_10016D350(uint64_t a1)
{
  uint64_t v1;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * a1));
}

uint64_t sub_10016D35C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

void sub_10016D368()
{
  uint64_t v0;
  _OWORD *v1;

  sub_100166D80(v0, v1);
}

void sub_10016D378(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

_QWORD *sub_10016D3A0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result[2] = 0;
  result[3] = 0;
  result[4] = v2;
  result[5] = v1;
  result[6] = v3;
  return result;
}

uint64_t sub_10016D3D0(uint64_t a1)
{
  uint64_t v1;

  return swift_allocObject(a1, 16 * v1 + 32, 7);
}

uint64_t sub_10016D3E0()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_10016D3F0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1001860C4(v0, v1);
}

uint64_t sub_10016D418()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Actor.unownedExecutor.getter(v1, v0);
}

void sub_10016D428(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = a1;
  *(_QWORD *)(v2 - 176) = (v1 - 32) | 0x8000000000000000;
}

uint64_t sub_10016D438(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100161BD0(a3);
}

uint64_t sub_10016D448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_10016D458()
{
  uint64_t v0;
  uint64_t v1;

  sub_100166D80(v0, (_OWORD *)(v1 - 128));
}

uint64_t sub_10016D468()
{
  return type metadata accessor for TaskPriority(0);
}

uint64_t sub_10016D470()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10016D498@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a2 - 256), a1);
}

void sub_10016D4A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10016CBEC(v2, a2);
}

id sub_10016D4E0()
{
  void *v0;

  return sub_100169528(v0);
}

uint64_t sub_10016D4F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10016D504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25);
}

id sub_10016D510()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, *(SEL *)(v0 + 2872));
}

uint64_t sub_10016D51C()
{
  uint64_t v0;

  return AnyHashable.init<A>(_:)(v0);
}

Swift::Int sub_10016D540(uint64_t a1)
{
  char v1;

  return sub_10016BA00(a1, v1 & 1);
}

void sub_10016D560()
{
  uint64_t v0;
  uint64_t v1;

}

void sub_10016D56C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10016CBEC(v2, a2);
}

uint64_t sub_10016D574@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 32);
}

uint64_t sub_10016D588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return swift_task_create(v5, a2, a3, a4, v4);
}

uint64_t sub_10016D5A8()
{
  uint64_t v0;

  return sub_1001638F4(v0);
}

void sub_10016D5B0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = 1;
}

void sub_10016D5C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_10016C930(v3, v4, a3);
}

uint64_t sub_10016D5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_10016D5D8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10016D5E0()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
}

void sub_10016D5E8()
{
  void *v0;

}

uint64_t sub_10016D5F4()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10016D600()
{
  uint64_t v0;

  return swift_getObjectType(v0);
}

void sub_10016D60C()
{
  uint64_t v0;

}

uint64_t sub_10016D640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a1;
  return v1;
}

uint64_t sub_10016D654()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10016D65C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10016D668()
{
  uint64_t v0;

  return swift_getObjectType(v0);
}

unint64_t sub_10016D69C(uint64_t a1, uint64_t a2)
{
  return sub_1001860C4(a1, a2);
}

uint64_t sub_10016D6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a10 + 40), a2);
}

void sub_10016D6B0(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001724FC(a1, a2, 1, v2);
}

NSString sub_10016D6BC()
{
  return String._bridgeToObjectiveC()();
}

void sub_10016D6C4()
{
  void *v0;

}

uint64_t sub_10016D6D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10016D708 + 4 * byte_100232D88[a1]))(0xD000000000000014, 0x8000000100297DE0);
}

uint64_t sub_10016D708()
{
  return 0x64656D6167;
}

uint64_t sub_10016D71C()
{
  return 0x746E6543656D6147;
}

uint64_t sub_10016D73C()
{
  return 0x7265764F656D6167;
}

uint64_t sub_10016D760()
{
  return 0x616C7069746C754DLL;
}

uint64_t sub_10016D780(char a1)
{
  return *(_QWORD *)&a1688540[8 * a1];
}

unint64_t sub_10016D798(unsigned __int8 a1)
{
  int v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(0xE000000000000000, v3);
  v4._countAndFlagsBits = sub_10016D6D0(a1);
  String.append(_:)(v4);
  sub_1001648C4(v5, v6);
  v7._countAndFlagsBits = 2570;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  if (v2 == 4)
    v8 = 0xD0000000000000C5;
  else
    v8 = 0xD000000000000065;
  if (v2 == 4)
    v9 = 0x8000000100297D10;
  else
    v9 = 0x8000000100297CA0;
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  sub_1001648C4(v11, v12);
  return 0xD000000000000010;
}

id GameDaemonTTR.__allocating_init(clientProxyBundleIdentifier:localPlayer:)(uint64_t a1, void *a2, void *a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return GameDaemonTTR.init(clientProxyBundleIdentifier:localPlayer:)(a1, a2, a3);
}

id GameDaemonTTR.init(clientProxyBundleIdentifier:localPlayer:)(uint64_t a1, void *a2, void *a3)
{
  char *v3;
  uint64_t *v7;
  id v8;
  id v9;
  os_log_type_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  void *v41;
  id v42;
  uint64_t v44;
  id v45;
  id v46;
  Class super_class;
  uint64_t v48[5];
  objc_super v49;

  v7 = (uint64_t *)&v3[OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_clientProxyBundleIdentifier];
  *v7 = a1;
  v7[1] = (uint64_t)a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_localPlayer] = a3;
  v49.receiver = v3;
  v49.super_class = (Class)type metadata accessor for GameDaemonTTR();
  super_class = v49.super_class;
  sub_10016D21C();
  v8 = a3;
  v9 = objc_msgSendSuper2(&v49, "init");
  v10 = static os_log_type_t.default.getter();
  v48[0] = 0;
  v48[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v11._countAndFlagsBits = 0xD000000000000029;
  v11._object = (void *)0x8000000100297A80;
  String.append(_:)(v11);
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(a2, v13);
  v14._object = (void *)0x8000000100297AB0;
  v14._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v14);
  v15 = objc_msgSend(v8, "description");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18, v20);
  v21 = type metadata accessor for Logger(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  static GKLog.daemon.getter(v23);
  v26 = sub_100170814(0xE000000000000000);
  v27 = Logger.logObject.getter(v26);
  if (os_log_type_enabled(v27, v10))
  {
    v46 = v8;
    v28 = sub_100165DA4(12);
    v44 = v21;
    v29 = (uint8_t *)v28;
    v30 = sub_100165DA4(32);
    v45 = v9;
    v31 = v30;
    v48[0] = v30;
    *(_DWORD *)v29 = 136315138;
    sub_10016D21C();
    v32 = sub_10016FE60(0, 0xE000000000000000, v48);
    v33 = sub_10017076C(v32);
    v8 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v34);
    sub_100170848(0xE000000000000000);
    sub_100165E04((void *)&_mh_execute_header, v27, v10, "TTR - %s", v29);
    sub_100165DFC(v31, v35, (uint64_t)&type metadata for Any + 8);
    v36 = v31;
    v9 = v45;
    sub_100165D98(v36);
    sub_100165D98((uint64_t)v29);

    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v44);
  }
  else
  {

    sub_10017081C(0xE000000000000000);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  }
  swift_bridgeObjectRelease(0xE000000000000000, v37);
  if (&class metadata base offset for TapToRadarService)
    v38 = &type metadata accessor for TapToRadarService == 0;
  else
    v38 = 1;
  if (v38 || &type metadata for TapToRadarService == 0 || &nominal type descriptor for TapToRadarService == 0)
  {

  }
  else
  {
    type metadata accessor for TapToRadarService(0);
    v41 = (void *)static TapToRadarService.shared.getter();
    v48[3] = (uint64_t)super_class;
    v48[4] = sub_10016DC04();
    v48[0] = (uint64_t)v9;
    v42 = v9;
    TapToRadarService.draftObserver.setter(v48);

  }
  return v9;
}

uint64_t type metadata accessor for GameDaemonTTR()
{
  return objc_opt_self(_TtC14GameDaemonCore13GameDaemonTTR);
}

unint64_t sub_10016DC04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100314F40;
  if (!qword_100314F40)
  {
    v1 = type metadata accessor for GameDaemonTTR();
    result = swift_getWitnessTable(&protocol conformance descriptor for GameDaemonTTR, v1);
    atomic_store(result, (unint64_t *)&qword_100314F40);
  }
  return result;
}

Swift::String_optional __swiftcall GameDaemonTTR.getURLForNewMultiplayerRadar(callbackIdentifier:descriptionAddition:)(Swift::String_optional callbackIdentifier, Swift::String_optional descriptionAddition)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String_optional result;

  object = descriptionAddition.value._object;
  countAndFlagsBits = descriptionAddition.value._countAndFlagsBits;
  v5 = callbackIdentifier.value._object;
  v6 = callbackIdentifier.value._countAndFlagsBits;
  v7 = sub_100161BD0(&qword_100315B00);
  __chkstk_darwin(v7);
  sub_1001707D4();
  sub_10016DD78(4, v6, (unint64_t)v5, countAndFlagsBits, (uint64_t)object, v2);
  v8 = type metadata accessor for URL(0);
  if (sub_10016445C(v2, 1, v8) == 1)
  {
    sub_10016FF88(v2, &qword_100315B00);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = URL.absoluteString.getter();
    v10 = v11;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v2, v8);
  }
  v12 = v9;
  v13 = v10;
  result.value._object = v13;
  result.value._countAndFlagsBits = v12;
  return result;
}

uint64_t sub_10016DD78@<X0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(unint64_t, char *, uint64_t);
  unsigned __int8 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  Swift::String v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  id v93;
  char *v94;
  Class isa;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int v124;
  uint64_t v125;
  _QWORD v126[2];
  unint64_t v127;
  unint64_t v128;

  v110 = a5;
  v107 = a4;
  v114 = a3;
  v108 = a2;
  v124 = a1;
  v120 = a6;
  v6 = type metadata accessor for URLComponents(0);
  v121 = *(_QWORD *)(v6 - 8);
  v122 = v6;
  __chkstk_darwin(v6);
  v119 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v116 = *(_QWORD *)(v8 - 8);
  v117 = v8;
  __chkstk_darwin(v8);
  v115 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for URLQueryItem(0);
  v10 = *(_QWORD *)(v125 - 8);
  v11 = __chkstk_darwin(v125);
  v118 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v109 = (char *)&v107 - v14;
  v15 = __chkstk_darwin(v13);
  v113 = (char *)&v107 - v16;
  v17 = __chkstk_darwin(v15);
  v112 = (char *)&v107 - v18;
  v19 = __chkstk_darwin(v17);
  v123 = (char *)&v107 - v20;
  v21 = __chkstk_darwin(v19);
  v111 = (char *)&v107 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v107 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v107 - v27;
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v107 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v107 - v32;
  URLQueryItem.init(name:value:)(0x6966697373616C43, 0xEE006E6F69746163, 0x2073756F69726553, 0xEB00000000677542);
  v34 = sub_1001725AC(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  v36 = *(_QWORD *)(v34 + 16);
  v35 = *(_QWORD *)(v34 + 24);
  if (v36 >= v35 >> 1)
    v34 = sub_1001725AC(v35 > 1, v36 + 1, 1, v34);
  *(_QWORD *)(v34 + 16) = v36 + 1;
  v37 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v38 = *(_QWORD *)(v10 + 72);
  v39 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v39(v34 + v37 + v38 * v36, v33, v125);
  v40 = v124;
  v41 = 0x30383934363331;
  v42 = 0xE600000000000000;
  if (v124 == 2)
    v42 = 0xE700000000000000;
  else
    v41 = 0x383634303336;
  if (v124 >= 2u)
    v43 = v41;
  else
    v43 = 0x36303634373431;
  if (v124 >= 2u)
    v44 = v42;
  else
    v44 = 0xE700000000000000;
  URLQueryItem.init(name:value:)(0x6E656E6F706D6F43, 0xEB00000000444974, v43, v44);
  swift_bridgeObjectRelease(v44, v45);
  v47 = *(_QWORD *)(v34 + 16);
  v46 = *(_QWORD *)(v34 + 24);
  if (v47 >= v46 >> 1)
    v34 = sub_1001725AC(v46 > 1, v47 + 1, 1, v34);
  *(_QWORD *)(v34 + 16) = v47 + 1;
  v48 = v34 + v37 + v47 * v38;
  v49 = v125;
  v39(v48, v31, v125);
  URLQueryItem.init(name:value:)(0x6E656E6F706D6F43, 0xED0000656D614E74, 0x6E654320656D6147, 0xEB00000000726574);
  v51 = *(_QWORD *)(v34 + 16);
  v50 = *(_QWORD *)(v34 + 24);
  if (v51 >= v50 >> 1)
    v34 = sub_1001725AC(v50 > 1, v51 + 1, 1, v34);
  *(_QWORD *)(v34 + 16) = v51 + 1;
  v39(v34 + v37 + v51 * v38, v28, v49);
  v52 = 18773;
  v53 = 0xE800000000000000;
  if (v40 == 2)
    v53 = 0xE200000000000000;
  else
    v52 = 0x736775422077654ELL;
  if (v40 >= 2u)
    v54 = v52;
  else
    v54 = 0x697461646E756F46;
  if (v40 >= 2u)
    v55 = v53;
  else
    v55 = 0xEA00000000006E6FLL;
  URLQueryItem.init(name:value:)(0xD000000000000010, 0x8000000100297BE0, v54, v55);
  swift_bridgeObjectRelease(v55, v56);
  v58 = *(_QWORD *)(v34 + 16);
  v57 = *(_QWORD *)(v34 + 24);
  if (v58 >= v57 >> 1)
    v34 = sub_1001725AC(v57 > 1, v58 + 1, 1, v34);
  *(_QWORD *)(v34 + 16) = v58 + 1;
  v39(v34 + v37 + v58 * v38, v25, v49);
  v59 = sub_10016D798(v40);
  v61 = v60;
  v127 = 0;
  v128 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(v128, v62);
  v127 = 0xD000000000000019;
  v128 = 0x8000000100297C00;
  if (v110)
  {
    v126[0] = v107;
    v126[1] = v110;
    swift_bridgeObjectRetain(v110);
    v63 = String.init<A>(reflecting:)(v126, &type metadata for String);
    v65 = v64;
  }
  else
  {
    v65 = 0xE300000000000000;
    v63 = 7104878;
  }
  v66 = v65;
  String.append(_:)(*(Swift::String *)&v63);
  swift_bridgeObjectRelease(v65, v67);
  v68 = v127;
  v69 = (void *)v128;
  v127 = v59;
  v128 = v61;
  swift_bridgeObjectRetain(v61);
  v70._countAndFlagsBits = v68;
  v70._object = v69;
  String.append(_:)(v70);
  swift_bridgeObjectRelease(v61, v71);
  swift_bridgeObjectRelease(v69, v72);
  v73 = v128;
  v74 = v111;
  URLQueryItem.init(name:value:)(0x7470697263736544, 0xEB000000006E6F69, v127, v128);
  swift_bridgeObjectRelease(v73, v75);
  v77 = *(_QWORD *)(v34 + 16);
  v76 = *(_QWORD *)(v34 + 24);
  if (v77 >= v76 >> 1)
    v34 = sub_1001725AC(v76 > 1, v77 + 1, 1, v34);
  v78 = v118;
  v79 = v113;
  *(_QWORD *)(v34 + 16) = v77 + 1;
  v39(v34 + v37 + v77 * v38, v74, v49);
  URLQueryItem.init(name:value:)(0xD00000000000001ALL, 0x8000000100297C20, 49, 0xE100000000000000);
  v81 = *(_QWORD *)(v34 + 16);
  v80 = *(_QWORD *)(v34 + 24);
  v82 = v124;
  if (v81 >= v80 >> 1)
    v34 = sub_1001725AC(v80 > 1, v81 + 1, 1, v34);
  *(_QWORD *)(v34 + 16) = v81 + 1;
  v39(v34 + v37 + v81 * v38, v123, v49);
  v83 = sub_10016D780(v82);
  v84 = v112;
  URLQueryItem.init(name:value:)(0x7364726F7779654BLL, 0xE800000000000000, v83, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000, v85);
  v87 = *(_QWORD *)(v34 + 16);
  v86 = *(_QWORD *)(v34 + 24);
  if (v87 >= v86 >> 1)
    v34 = sub_1001725AC(v86 > 1, v87 + 1, 1, v34);
  *(_QWORD *)(v34 + 16) = v87 + 1;
  v39(v34 + v37 + v87 * v38, v84, v49);
  URLQueryItem.init(name:value:)(0x6375646F72706552, 0xEF7974696C696269, 0x6C70704120746F4ELL, 0xEE00656C62616369);
  v89 = *(_QWORD *)(v34 + 16);
  v88 = *(_QWORD *)(v34 + 24);
  if (v89 >= v88 >> 1)
    v34 = sub_1001725AC(v88 > 1, v89 + 1, 1, v34);
  *(_QWORD *)(v34 + 16) = v89 + 1;
  v39(v34 + v37 + v89 * v38, v79, v49);
  if (v114)
  {
    v90 = HIBYTE(v114) & 0xF;
    if ((v114 & 0x2000000000000000) == 0)
      v90 = v108 & 0xFFFFFFFFFFFFLL;
    if (v90)
    {
      URLQueryItem.init(name:value:)(0xD000000000000012, 0x8000000100297C60, v108, v114);
      v92 = *(_QWORD *)(v34 + 16);
      v91 = *(_QWORD *)(v34 + 24);
      if (v92 >= v91 >> 1)
        v34 = sub_1001725AC(v91 > 1, v92 + 1, 1, v34);
      *(_QWORD *)(v34 + 16) = v92 + 1;
      v39(v34 + v37 + v92 * v38, v109, v49);
    }
  }
  v93 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  sub_100164468(0xD000000000000013, 0x8000000100297C40, v93);
  v94 = v115;
  Date.init()();
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v116 + 8))(v94, v117);
  v96 = objc_msgSend(v93, "stringFromDate:", isa);

  v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
  v99 = v98;

  URLQueryItem.init(name:value:)(0x7349664F656D6954, 0xEB00000000657573, v97, v99);
  swift_bridgeObjectRelease(v99, v100);
  v102 = *(_QWORD *)(v34 + 16);
  v101 = *(_QWORD *)(v34 + 24);
  if (v102 >= v101 >> 1)
    v34 = sub_1001725AC(v101 > 1, v102 + 1, 1, v34);
  *(_QWORD *)(v34 + 16) = v102 + 1;
  v103 = ((uint64_t (*)(unint64_t, char *, uint64_t))v39)(v34 + v37 + v102 * v38, v78, v49);
  v104 = v119;
  URLComponents.init()(v103);
  URLComponents.scheme.setter(0x722D6F742D706174, 0xEC00000072616461);
  URLComponents.host.setter(7824750, 0xE300000000000000);
  v105 = URLComponents.queryItems.setter(v34);
  URLComponents.url.getter(v105);

  return (*(uint64_t (**)(char *, uint64_t))(v121 + 8))(v104, v122);
}

Swift::String_optional __swiftcall GameDaemonTTR.getURLForExistingMultiplayerRadar(radarID:)(Swift::String radarID)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String_optional result;

  object = radarID._object;
  countAndFlagsBits = radarID._countAndFlagsBits;
  v4 = sub_100161BD0(&qword_100315B00);
  __chkstk_darwin(v4);
  sub_1001707D4();
  v5 = type metadata accessor for URLComponents(0);
  v6 = __chkstk_darwin(v5);
  URLComponents.init()(v6);
  URLComponents.scheme.setter(0x722D6F742D706174, 0xEC00000072616461);
  sub_10016D21C();
  v7 = URLComponents.host.setter(countAndFlagsBits, object);
  URLComponents.url.getter(v7);
  v8 = type metadata accessor for URL(0);
  if (sub_10016445C(v1, 1, v8) == 1)
  {
    sub_100170804();
    sub_10016FF88(v1, &qword_100315B00);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = URL.absoluteString.getter();
    v10 = v11;
    sub_100170804();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v1, v8);
  }
  v12 = v9;
  v13 = v10;
  result.value._object = v13;
  result.value._countAndFlagsBits = v12;
  return result;
}

void GameDaemonTTR.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.GameDaemonTTR", 28, "init()", 6, 0);
  __break(1u);
}

id GameDaemonTTR.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GameDaemonTTR();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Void __swiftcall GameDaemonTTR.tapToRadarDidFileRadar(_:callbackIdentifier:)(Swift::Int64 _, Swift::String callbackIdentifier)
{
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  Swift::String v19;
  void *v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  BOOL v73;
  void (*v74)(uint64_t, unint64_t);
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, unint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  _WORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  void *v94;
  uint64_t v95;
  void *v96;
  id v97;
  uint64_t v98;
  void (*v99)(uint64_t, unint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  id v111;
  id v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  void (*v118)(uint64_t, unint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  id v125;
  id v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  id v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  os_log_type_t v143;
  _BOOL4 v144;
  unint64_t v145;
  _WORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  os_log_type_t v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  uint8_t *v160;
  void (*v161)(uint64_t, unint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  void **v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  void **aBlock;
  unint64_t v184;
  void (*v185)(uint64_t, void *);
  void *v186;
  uint64_t (*v187)(uint64_t);
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;

  object = callbackIdentifier._object;
  countAndFlagsBits = callbackIdentifier._countAndFlagsBits;
  v5 = type metadata accessor for Logger(0);
  v178 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v175 = (char *)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  sub_1001707C8();
  v177 = v8;
  __chkstk_darwin(v9);
  sub_1001707C8();
  sub_100170790();
  __chkstk_darwin(v10);
  sub_1001707C8();
  sub_100170790();
  __chkstk_darwin(v11);
  sub_1001707C8();
  sub_100170790();
  __chkstk_darwin(v12);
  sub_1001707C8();
  sub_100170790();
  v14 = __chkstk_darwin(v13);
  v16 = ((char *)&v167 - v15);
  v17 = static os_log_type_t.default.getter(v14);
  aBlock = 0;
  v184 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(v184, v18);
  aBlock = (void **)0xD00000000000001ALL;
  v184 = 0x8000000100297AF0;
  v176 = (void **)_;
  *(_QWORD *)&v189 = _;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20, v21);
  v22._countAndFlagsBits = 0x61626C6C6163202CLL;
  v22._object = (void *)0xEE00203A44496B63;
  String.append(_:)(v22);
  v179 = countAndFlagsBits;
  v180 = (uint64_t)object;
  v23._countAndFlagsBits = countAndFlagsBits;
  v23._object = object;
  String.append(_:)(v23);
  v24 = (uint64_t)aBlock;
  v25 = v184;
  static GKLog.daemon.getter(v26);
  v27 = sub_100170814(v25);
  v28 = Logger.logObject.getter(v27);
  if (os_log_type_enabled(v28, v17))
  {
    v29 = sub_100165DA4(12);
    v172 = v5;
    v30 = (uint8_t *)v29;
    v31 = sub_100165DA4(32);
    aBlock = (void **)v31;
    *(_DWORD *)v30 = 136315138;
    swift_bridgeObjectRetain(v25);
    v32 = sub_10016FE60(v24, v25, (uint64_t *)&aBlock);
    v33 = sub_10017076C(v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v34);
    sub_100170848(v25);
    sub_100165E04((void *)&_mh_execute_header, v28, v17, "TTR - %s", v30);
    sub_100165DFC(v31, v35, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v31);
    v36 = (uint64_t)v30;
    v5 = v172;
    sub_100165D98(v36);

  }
  else
  {

    sub_10017081C(v25);
  }
  v37 = *(_QWORD *)(v178 + 8);
  v38 = sub_1001707F4((uint64_t)v16);
  sub_1001707FC(v38, v39);
  v40 = Data.init(base64Encoded:options:)(v179, v180, 0);
  if ((unint64_t)v41 >> 60 == 15)
  {
    v42 = v177;
    sub_10017082C();
    sub_100170824();
    v43 = sub_1001707EC();
    if (sub_100170780(v43))
    {
      v44 = (uint8_t *)sub_100165DA4(2);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v28, "Failed to convert callbackIdentifier to data.", v44, 2u);
      sub_100165D98((uint64_t)v44);
    }
LABEL_16:

    sub_1001707F4(v42);
    return;
  }
  v45 = v40;
  v46 = v41;
  v178 = v37;
  aBlock = v176;
  v47 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v49 = v48;
  sub_10016D338(v47, (unint64_t *)&unk_100315C60, NSKeyedUnarchiver_ptr);
  v50 = sub_100161BD0(&qword_100314F48);
  v51 = swift_allocObject(v50, 64, 7);
  *(_OWORD *)(v51 + 16) = xmmword_100232E00;
  v52 = sub_10016D338(v51, &qword_100314F50, NSArray_ptr);
  *(_QWORD *)(v51 + 32) = v52;
  v16 = sub_10016D338(v52, &qword_100314DF0, NSDictionary_ptr);
  *(_QWORD *)(v51 + 40) = v16;
  v53 = sub_10016D338((uint64_t)v16, &qword_1003167B0, NSString_ptr);
  *(_QWORD *)(v51 + 48) = v53;
  *(_QWORD *)(v51 + 56) = sub_10016D338(v53, &qword_100314F58, NSData_ptr);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(&aBlock, v51, v45, v46);
  v55 = swift_bridgeObjectRelease(v51, v54);
  if (!v186)
  {
    sub_1001707FC(v55, v56);
    sub_10016FF88((uint64_t)&aBlock, &qword_1003159B0);
LABEL_13:
    v42 = v174;
    sub_10017082C();
    sub_100170824();
    v85 = sub_1001707EC();
    if (sub_100170780(v85))
    {
      v86 = (_WORD *)sub_100165DA4(2);
      *v86 = 0;
      sub_1001707B4((void *)&_mh_execute_header, v87, v88, "Unarchived but it's empty.");
      sub_100165D98((uint64_t)v86);
    }
    sub_100170834();
    goto LABEL_16;
  }
  v57 = sub_100161BD0(&qword_100314F60);
  v58 = sub_10016CF50((uint64_t)&v189, (uint64_t)&aBlock, (uint64_t)&type metadata for Any + 8, v57);
  if ((v58 & 1) == 0)
  {
    sub_1001707FC(v58, v59);
    goto LABEL_13;
  }
  v176 = v46;
  v60 = v189;
  v61 = static os_log_type_t.default.getter(v58);
  aBlock = 0;
  v184 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease(v184, v62);
  aBlock = (void **)0xD00000000000002ELL;
  v184 = 0x8000000100297B10;
  v180 = v60;
  v63._countAndFlagsBits = Array.description.getter(v60, v16);
  String.append(_:)(v63);
  v66 = sub_1001648C4(v64, v65);
  v68 = (uint64_t)aBlock;
  v67 = v184;
  v69 = v173;
  static GKLog.daemon.getter(v66);
  v70 = sub_100170814(v67);
  v71 = Logger.logObject.getter(v70);
  v72 = v61;
  v73 = os_log_type_enabled(v71, v61);
  v74 = (void (*)(uint64_t, unint64_t))v178;
  v168 = v45;
  v167 = v49;
  v179 = v47;
  if (v73)
  {
    v75 = (uint8_t *)sub_100165DA4(12);
    v76 = sub_100165DA4(32);
    aBlock = (void **)v76;
    *(_DWORD *)v75 = 136315138;
    swift_bridgeObjectRetain(v67);
    v77 = sub_10016FE60(v68, v67, (uint64_t *)&aBlock);
    v78 = sub_10017076C(v77);
    v45 = v168;
    v79 = (void (*)(uint64_t, unint64_t))v178;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, v80);
    sub_100170848(v67);
    sub_100165E04((void *)&_mh_execute_header, v71, v72, "TTR - %s", v75);
    sub_100165DFC(v76, v81, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v76);
    v82 = (uint64_t)v75;
    v74 = v79;
    sub_100165D98(v82);

    v83 = ((uint64_t (*)(uint64_t, unint64_t))v79)(v173, v5);
  }
  else
  {

    sub_10017081C(v67);
    v83 = sub_1001707F4(v69);
  }
  sub_1001648C4(v83, v84);
  if ((unint64_t)v180 >> 62)
  {
LABEL_59:
    v149 = v180;
    if (v180 < 0)
      v150 = v180;
    else
      v150 = v180 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v180);
    v90 = _CocoaArrayWrapper.endIndex.getter(v150);
    swift_bridgeObjectRelease(v149, v151);
    if (v90)
      goto LABEL_20;
LABEL_63:
    v152 = swift_bridgeObjectRelease(v180, v89);
    v154 = sub_10017085C(v152, v153);
    v155 = static os_log_type_t.default.getter(v154);
    v156 = v155;
    v157 = v170;
    v158 = static GKLog.daemon.getter(v155);
    v159 = Logger.logObject.getter(v158);
    if (os_log_type_enabled(v159, v156))
    {
      v160 = (uint8_t *)sub_100165DA4(12);
      v161 = v74;
      v162 = sub_100165DA4(32);
      aBlock = (void **)v162;
      *(_DWORD *)v160 = 136315138;
      v163 = sub_10016FE60(0xD000000000000023, 0x8000000100297B60, (uint64_t *)&aBlock);
      v164 = sub_10017076C(v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v164, v165);
      sub_100165E04((void *)&_mh_execute_header, v159, v156, "TTR - %s", v160);
      sub_100165DFC(v162, v166, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v162);
      sub_100165D98((uint64_t)v160);

      v161(v157, v5);
    }
    else
    {

      sub_1001707F4(v157);
    }
    sub_1001707A8();
    return;
  }
  v90 = *(_QWORD *)((v180 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v90)
    goto LABEL_63;
LABEL_20:
  v172 = v5;
  v191 = (uint64_t)_swiftEmptyArrayStorage;
  v5 = v180 & 0xC000000000000001;
  v91 = 4;
  v92 = &type metadata for String;
  v177 = (uint64_t)&type metadata for Any + 8;
  v174 = v90;
  v175 = (char *)(v180 & 0xC000000000000001);
  do
  {
    if (v5)
      v93 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v91 - 4, v180);
    else
      v93 = *(id *)(v180 + 8 * v91);
    v94 = v93;
    v95 = v91 - 3;
    if (__OFADD__(v91 - 4, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    *(_QWORD *)&v189 = 0x4449726579616C70;
    *((_QWORD *)&v189 + 1) = 0xE800000000000000;
    v96 = v92;
    v97 = objc_msgSend(v93, "__swift_objectForKeyedSubscript:", _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v189, v92));
    swift_unknownObjectRelease();
    if (v97)
    {
      _bridgeAnyObjectToAny(_:)(&v189, v97);
      swift_unknownObjectRelease();
    }
    else
    {
      v189 = 0u;
      v190 = 0u;
    }
    sub_100170850();
    if (!v186)
    {

      sub_10016FF88((uint64_t)&aBlock, &qword_1003159B0);
      goto LABEL_45;
    }
    if ((sub_10016CF50((uint64_t)&v181, (uint64_t)&aBlock, v177, (uint64_t)v92) & 1) == 0)
    {

      goto LABEL_45;
    }
    v98 = v45;
    v99 = v74;
    v101 = v181;
    v100 = v182;
    *(_QWORD *)&v189 = 0x656B6F5468737570;
    *((_QWORD *)&v189 + 1) = 0xE90000000000006ELL;
    v102 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v189, v96);
    v103 = objc_msgSend(v94, "__swift_objectForKeyedSubscript:", v102, v167);
    swift_unknownObjectRelease();
    if (v103)
    {
      _bridgeAnyObjectToAny(_:)(&v189, v103);
      swift_unknownObjectRelease();
    }
    else
    {
      v189 = 0u;
      v190 = 0u;
    }
    v105 = sub_100170850();
    v74 = v99;
    if (v186)
    {
      v107 = sub_10016CF50((uint64_t)&v181, (uint64_t)&aBlock, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data);
      if ((v107 & 1) != 0)
      {
        v110 = v181;
        v109 = v182;
        objc_allocWithZone((Class)GKTTRMultiplayerParticipant);
        sub_100170728(v110, v109);
        v111 = sub_10016FB8C(v101, v100, v110, v109);
        v5 = (unint64_t)v175;
        if (!v111)
        {
          __break(1u);
          return;
        }
        v112 = v111;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v111);
        v113 = *(_QWORD *)((v191 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v114 = *(_QWORD *)((v191 & 0xFFFFFFFFFFFFFF8) + 0x18);
        v90 = v174;
        if (v113 >= v114 >> 1)
        {
          v173 = *(_QWORD *)((v191 & 0xFFFFFFFFFFFFFF8) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v114 > 1, v113 + 1, 1);
          v113 = v173;
        }
        v115 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v113, v112);
        specialized Array._endMutation()(v115);
        sub_10016FF44(v110, v109);

        v74 = (void (*)(uint64_t, unint64_t))v178;
        v45 = v168;
        goto LABEL_44;
      }
      v45 = v98;
      sub_1001648C4(v107, v108);

    }
    else
    {
      sub_1001648C4(v105, v106);

      sub_10016FF88((uint64_t)&aBlock, &qword_1003159B0);
      v45 = v98;
    }
    v5 = (unint64_t)v175;
    v90 = v174;
LABEL_44:
    v92 = v96;
LABEL_45:
    ++v91;
    v116 = v95 == v90;
    v117 = v179;
  }
  while (!v116);
  v118 = v74;
  v119 = swift_bridgeObjectRelease(v180, v104);
  sub_10016D338(v119, &qword_100314F68, &off_1002BA528);
  v120 = v171;
  v121 = *(_QWORD *)(v171 + OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_clientProxyBundleIdentifier);
  v122 = *(_QWORD *)(v171 + OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_clientProxyBundleIdentifier + 8);
  v123 = OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_localPlayer;
  v124 = *(void **)(v171 + OBJC_IVAR____TtC14GameDaemonCore13GameDaemonTTR_localPlayer);
  swift_bridgeObjectRetain(v122);
  v125 = v124;
  v126 = sub_10016F8B4(v121, v122, v124);
  if (v126)
  {
    v128 = v126;
    v129 = sub_1001706A4(*(id *)(v120 + v123));
    if (v130)
      v131 = v129;
    else
      v131 = 0x6C5065746F6D6552;
    if (v130)
      v132 = v130;
    else
      v132 = 0xEC00000072657961;
    v133 = v191;
    v134 = objc_allocWithZone((Class)GKTTRLogRequestInfo);
    v135 = sub_10016FC34(v133, v117, v167, v131, v132);
    v187 = sub_10016F930;
    v188 = 0;
    aBlock = _NSConcreteStackBlock;
    v184 = 1107296256;
    v185 = sub_10016FB18;
    v186 = &unk_1002C5B60;
    v136 = _Block_copy(&aBlock);
    objc_msgSend(v128, "requestTTRLogsWith:handler:", v135, v136);
    sub_1001707A8();
    _Block_release(v136);

  }
  else
  {
    v137 = (void *)v191;
    v138 = sub_10017085C(0, v127);
    v140 = sub_1001648C4(v138, v139);
    v141 = v169;
    v142 = static GKLog.general.getter(v140);
    Logger.logObject.getter(v142);
    v143 = sub_1001707EC();
    v144 = sub_100170780(v143);
    v145 = (unint64_t)v176;
    if (v144)
    {
      v146 = (_WORD *)sub_100165DA4(2);
      *v146 = 0;
      sub_1001707B4((void *)&_mh_execute_header, v147, v148, "Failed to find match service.");
      sub_100165D98((uint64_t)v146);
    }
    sub_10016FF30(v45, v145);

    v118(v141, v172);
  }
}

id sub_10016F8B4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  NSString v7;
  uint64_t v8;
  id v9;

  v4 = v3;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v8);
  }
  else
  {
    v7 = 0;
  }
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "serviceForBundleID:localPlayer:", v7, a3);

  return v9;
}

uint64_t sub_10016F930(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static GKLog.general.getter(v4);
  swift_errorRetain(a1);
  v7 = swift_errorRetain(a1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v19 = v11;
    *(_DWORD *)v10 = 136315138;
    if (a1)
    {
      v18 = a1;
      swift_errorRetain(a1);
      v12 = sub_100161BD0(&qword_100314EA0);
      v13 = String.init<A>(reflecting:)(&v18, v12);
      v15 = v14;
    }
    else
    {
      v15 = 0xE300000000000000;
      v13 = 7104878;
    }
    v18 = sub_10016FE60(v13, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease(v15, v16);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to requestTTRLogs due to error: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_10016FB18(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

void sub_10016FB6C(Swift::Int64 a1, uint64_t a2, uint64_t a3)
{
  GameDaemonTTR.tapToRadarDidFileRadar(_:callbackIdentifier:)(a1, *(Swift::String *)&a2);
}

id sub_10016FB8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v4;
  NSString v8;
  uint64_t v9;
  Class isa;
  id v11;

  if (a2)
  {
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v9);
  }
  else
  {
    v8 = 0;
  }
  if (a4 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10016FF30(a3, a4);
  }
  v11 = objc_msgSend(v4, "initWithPlayerID:pushToken:", v8, isa);

  return v11;
}

id sub_10016FC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  NSArray v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  NSString v13;
  uint64_t v14;
  id v15;

  if (a1)
  {
    sub_10016CBB4(0, &qword_100314F98, GKTTRMultiplayerParticipant_ptr);
    v9.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1, v10);
    if (a3)
      goto LABEL_3;
LABEL_6:
    v11 = 0;
    if (a5)
      goto LABEL_4;
LABEL_7:
    v13 = 0;
    goto LABEL_8;
  }
  v9.super.isa = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3, v12);
  if (!a5)
    goto LABEL_7;
LABEL_4:
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5, v14);
LABEL_8:
  v15 = objc_msgSend(v5, "initWithPlayersAndPushTokens:radarID:requesterAlias:", v9.super.isa, v11, v13);

  return v15;
}

uint64_t sub_10016FD2C(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_10016FD60(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

uint64_t sub_10016FD80(uint64_t (*a1)(void))
{
  return a1();
}

_BYTE **sub_10016FDA0(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void sub_10016FDB0(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1 + 8;
  if (v6)
    v10 = v6;
  else
    v10 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  v9 = *a2;
  if (*a2)
  {
    *v9 = v7;
    *a2 = v9 + 1;
  }
  else
  {

  }
}

uint64_t sub_10016FE60(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  void *ObjectType;

  v6 = sub_10017000C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100161F70((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100161F70((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100161FE0(v12);
  return v7;
}

uint64_t sub_10016FF30(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10016FF44(result, a2);
  return result;
}

uint64_t sub_10016FF44(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10016FF88(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100161BD0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10016FFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_1003159B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10017000C(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100170160((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_100170224(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

void *sub_100170160(char *__src, size_t __n, char *__dst)
{
  void *result;
  const char *v5;
  uint64_t v6;

  if ((__n & 0x8000000000000000) != 0)
  {
    v5 = "UnsafeMutableRawPointer.initializeMemory with negative count";
    v6 = 60;
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    v5 = "UnsafeMutableRawPointer.initializeMemory overlapping range";
    v6 = 58;
  }
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v5, v6, 2, "Swift/UnsafeRawPointer.swift", 28);
  __break(1u);
  return result;
}

_QWORD *sub_100170224(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1001702B8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10017048C(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_10017048C((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

_QWORD *sub_1001702B8(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return _swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return _swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_100170428(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    v9 = "Insufficient space allocated to copy string contents";
    v10 = "Swift/StringUTF8View.swift";
    v11 = 52;
    v12 = 26;
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  v9 = "invalid Collection: less than 'count' elements in collection";
  v10 = "Swift/ContiguousArrayBuffer.swift";
  v11 = 60;
  v12 = 33;
LABEL_15:
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v9, v11, 2, v10, v12);
  __break(1u);
  return result;
}

_QWORD *sub_100170428(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100161BD0(&qword_100314FA0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_10017048C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100161BD0(&qword_100314FA0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100170624(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100170560(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4, v15);
  return v11;
}

void *sub_100170560(char *__src, size_t __n, char *__dst)
{
  void *result;
  const char *v5;
  uint64_t v6;

  if ((__n & 0x8000000000000000) != 0)
  {
    v5 = "UnsafeMutablePointer.initialize with negative count";
    v6 = 51;
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    v5 = "UnsafeMutablePointer.initialize overlapping range";
    v6 = 49;
  }
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v5, v6, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

char *sub_100170624(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_1001706A4(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "alias");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100170710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100170720(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100170728(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10017076C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return v1 - 144;
}

BOOL sub_100170780(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_100170790()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t sub_1001707A0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1001707A8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10016FF30(v0, *(_QWORD *)(v1 - 248));
}

void sub_1001707B4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_1001707EC()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1001707F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1001707FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_100170804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100170814(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2);
}

uint64_t sub_10017081C(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2);
}

uint64_t sub_100170824()
{
  return Logger.logObject.getter();
}

uint64_t sub_10017082C()
{
  return static GKLog.general.getter();
}

uint64_t sub_100170834()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10016FF30(v1, v0);
}

uint64_t sub_100170840()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_100170848(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3);
}

uint64_t sub_100170850()
{
  uint64_t v0;

  return sub_10016FFC4(v0 - 144, v0 - 192);
}

uint64_t sub_10017085C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(*(_QWORD *)(v2 - 320), a2);
}

_QWORD *sub_100170868(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_22:
    v14 = *(void **)(*(_QWORD *)(a1 + 48) + 40 * v10 + 32);
    if (v14)
    {
      v15 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v17 >= v16 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      result = (_QWORD *)specialized Array._endMutation()(v18);
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_21;
  v8 = v11 + 1;
  if (v11 + 1 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 2;
  if (v11 + 2 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 3;
  if (v11 + 3 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return _swiftEmptyArrayStorage;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_26;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_100170A34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  objc_class *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v5 = (uint64_t *)(a1 + 32);
    v6 = (objc_class *)type metadata accessor for ScopedIDsBatchRequest();
    do
    {
      v7 = *v5++;
      objc_allocWithZone(v6);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(a2);
      v8 = sub_100170FEC(v7, a2);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v8);
      specialized ContiguousArray._endMutation()(v10);
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(a2, v11);
  }
  else
  {
    swift_bridgeObjectRelease(a2, a2);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100170B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  objc_class *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v5 = (uint64_t *)(a1 + 32);
    v6 = (objc_class *)type metadata accessor for ScopedIDsBatchRequest();
    do
    {
      v7 = *v5++;
      objc_allocWithZone(v6);
      swift_bridgeObjectRetain(v7);
      v8 = swift_bridgeObjectRetain(a2);
      v9 = sub_100170FEC(v8, v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
      specialized ContiguousArray._endMutation()(v11);
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(a2, v12);
  }
  else
  {
    swift_bridgeObjectRelease(a2, a2);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100170C40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  char v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_100173420(0, v1, 0);
  result = (_QWORD *)sub_1001994C0(a1);
  v4 = (uint64_t)result;
  v6 = v5;
  v8 = v7 & 1;
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v6)
      goto LABEL_14;
    v17 = v8;
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 40 * v4);
    v10 = *v9;
    v11 = v9[1];
    v13 = _swiftEmptyArrayStorage[2];
    v12 = _swiftEmptyArrayStorage[3];
    swift_bridgeObjectRetain(v11);
    if (v13 >= v12 >> 1)
      sub_100173420(v12 > 1, v13 + 1, 1);
    _swiftEmptyArrayStorage[2] = v13 + 1;
    v14 = &_swiftEmptyArrayStorage[2 * v13];
    v14[4] = v10;
    v14[5] = v11;
    result = (_QWORD *)sub_1001993D8(v4, v6, v17 & 1, a1);
    v4 = (uint64_t)result;
    v6 = v15;
    v8 = v16 & 1;
    if (!--v1)
    {
      sub_100176794((uint64_t)result, v15, v8);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_100170DB8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = sub_100176C80(v4, v5, *a2, v6), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = a2[2];
    v13 = a2[3];
    if (v10 == v12 && v11 == v13)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0);
  }
  return result;
}

uint64_t sub_100170E28(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  v4 = v1[1];
  sub_100176C2C();
  v5 = String.hash(into:)(a1, v3, v4);
  sub_10016D2DC(v5, v6);
  v8 = v1[2];
  v7 = v1[3];
  sub_10016D290();
  String.hash(into:)(a1, v8, v7);
  return swift_bridgeObjectRelease(v7, v9);
}

Swift::Int sub_100170E84()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10, 0);
  v1 = *v0;
  v2 = v0[1];
  sub_100176C14();
  v3 = String.hash(into:)(v10, v1, v2);
  sub_10016D110(v3, v4);
  v5 = v0[2];
  v6 = v0[3];
  sub_10016D290();
  v7 = String.hash(into:)(v10, v5, v6);
  sub_10016D13C(v7, v8);
  return sub_100176D54();
}

Swift::Int sub_100170EFC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  Hasher.init(_seed:)(v9, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v9, v2, v3);
  swift_bridgeObjectRelease(v3, v6);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v9, v5, v4);
  swift_bridgeObjectRelease(v4, v7);
  return Hasher._finalize()();
}

uint64_t ScopedIDsBatchRequest.playerIDs.getter()
{
  return sub_100176CCC(OBJC_IVAR___GKScopedIDsBatchRequest_playerIDs);
}

Class sub_100170FA4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  Class isa;
  uint64_t v4;

  a3();
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_1001648C4((uint64_t)isa, v4);
  return isa;
}

uint64_t ScopedIDsBatchRequest.gameBundleIDs.getter()
{
  return sub_100176CCC(OBJC_IVAR___GKScopedIDsBatchRequest_gameBundleIDs);
}

id sub_100170FEC(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)sub_10016D668();
  *(_QWORD *)&v2[OBJC_IVAR___GKScopedIDsBatchRequest_playerIDs] = a1;
  *(_QWORD *)&v2[OBJC_IVAR___GKScopedIDsBatchRequest_gameBundleIDs] = a2;
  v7.receiver = v2;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "init");
}

void ScopedIDsBatchRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.ScopedIDsBatchRequest", 36, "init()", 6, 0);
  __break(1u);
}

_QWORD *static ScopedIDsUtils.filterUnsupportedGameBundleIDs(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = GKGameCenterIdentifier;
    v3 = (uint64_t *)(swift_bridgeObjectRetain(a1) + 40);
    do
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
      v8 = v5 == v6 && v4 == v7;
      if (v8
        || (v9 = v7,
            v10 = sub_100176C80(v5, v4, v6, v7),
            sub_100176C2C(),
            v6 = swift_bridgeObjectRelease(v9, v11),
            (v10 & 1) != 0))
      {
        isUniquelyReferenced_nonNull_native = sub_10016D2DC(v6, v7);
      }
      else
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100173420(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v15 = _swiftEmptyArrayStorage[2];
        v14 = _swiftEmptyArrayStorage[3];
        if (v15 >= v14 >> 1)
          sub_100173420(v14 > 1, v15 + 1, 1);
        _swiftEmptyArrayStorage[2] = v15 + 1;
        v16 = &_swiftEmptyArrayStorage[2 * v15];
        v16[4] = v5;
        v16[5] = v4;
      }
      v3 += 2;
      --v1;
    }
    while (v1);
    sub_1001648C4(isUniquelyReferenced_nonNull_native, v13);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *static ScopedIDsUtils.batchRequest(playerIDs:gameBundleIDs:desiredSize:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5 || (uint64_t)a3 < 1)
    return _swiftEmptyArrayStorage;
  if (v5 >= v3)
  {
    if ((uint64_t)(a3 / v3) <= 1)
      v13 = 1;
    else
      v13 = a3 / v3;
    sub_1001621A4();
    v14 = sub_100171E58(0, v5, v13, a2, v13);
    sub_10016D290();
    v11 = sub_100170B3C(v14, a1);
  }
  else
  {
    if ((uint64_t)(a3 / v5) <= 1)
      v9 = 1;
    else
      v9 = a3 / v5;
    sub_10016D290();
    v10 = sub_100171E58(0, v3, v9, a1, v9);
    sub_1001621A4();
    v11 = sub_100170A34(v10, a2);
  }
  v7 = v11;
  sub_10016D2DC((uint64_t)v11, v12);
  return v7;
}

char *static ScopedIDsUtils.incomplete(playerIDs:gameBundleIDs:scopedIDs:)(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *result;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[5];
  void *v58;
  _QWORD v59[5];

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    sub_100176C14();
    v49 = sub_100176CA8();
    sub_10016D110(v49, v50);
    if (v49)
      goto LABEL_3;
LABEL_25:
    sub_10016D21C();
    return (char *)a1;
  }
  if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_25;
LABEL_3:
  v7 = a1[2];
  if (!v7)
    return (char *)_swiftEmptyArrayStorage;
  v56 = *(_QWORD *)(a2 + 16);
  if (!v56)
    return (char *)_swiftEmptyArrayStorage;
  v51 = v6;
  v53 = a3;
  v58 = &_swiftEmptySetSingleton;
  v54 = a1 + 4;
  v52 = a1;
  sub_10016D21C();
  for (i = 0; i != v7; ++i)
  {
    v9 = &v54[2 * i];
    v10 = *v9;
    v11 = v9[1];
    sub_10016D21C();
    sub_100176C2C();
    v12 = (uint64_t *)(a2 + 40);
    v13 = v56;
    do
    {
      v14 = *(v12 - 1);
      v15 = *v12;
      v59[0] = v10;
      v59[1] = v11;
      v59[2] = v14;
      v59[3] = v15;
      v59[4] = 0;
      swift_bridgeObjectRetain_n(v15, 2);
      sub_10016D21C();
      sub_10017396C(v57, v59);
      swift_bridgeObjectRelease(v57[1], v16);
      swift_bridgeObjectRelease(v57[3], v17);
      v18 = (void *)v57[4];
      swift_bridgeObjectRelease(v15, v19);

      v12 += 2;
      --v13;
    }
    while (v13);
    v21 = swift_bridgeObjectRelease(v11, v20);
    sub_10016D2DC(v21, v22);
  }
  v24 = swift_bridgeObjectRelease(v52, v23);
  v25 = (uint64_t)v58;
  v26 = v53;
  if (v51)
  {
    sub_100176C14();
    v27 = sub_100176CA8();
    v24 = sub_10016D110(v27, v28);
  }
  else
  {
    v27 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v29 = _swiftEmptyArrayStorage;
  if (!v27)
  {
LABEL_23:
    v45 = sub_1001716EC((uint64_t)v29);
    v46 = sub_1001719D0(v45, v25);
    sub_1001648C4((uint64_t)v46, v47);
    a1 = sub_100170C40((uint64_t)v46);
    sub_10016D13C((uint64_t)a1, v48);
    return (char *)a1;
  }
  v55 = v25;
  v57[0] = _swiftEmptyArrayStorage;
  result = sub_100176D20(v24, v27 & ~(v27 >> 63));
  if ((v27 & 0x8000000000000000) == 0)
  {
    v31 = 0;
    v29 = (_QWORD *)v57[0];
    do
    {
      if ((v53 & 0xC000000000000001) != 0)
        v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v26);
      else
        v32 = *(id *)(v26 + 8 * v31 + 32);
      v33 = v32;
      v34 = objc_msgSend(v32, "playerID", v51);
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v37 = v36;

      v38 = objc_msgSend(v33, "gameBundleID");
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;

      v57[0] = v29;
      v43 = v29[2];
      v42 = v29[3];
      if (v43 >= v42 >> 1)
      {
        sub_100173480((char *)(v42 > 1), v43 + 1, 1);
        v29 = (_QWORD *)v57[0];
      }
      ++v31;
      v29[2] = v43 + 1;
      v44 = &v29[5 * v43];
      v44[4] = v35;
      v44[5] = v37;
      v44[6] = v39;
      v44[7] = v41;
      v44[8] = v33;
      v26 = v53;
    }
    while (v27 != v31);
    v25 = v55;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001716EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[5];
  uint64_t v20;
  _QWORD v21[5];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_1001768FC();
  v4 = Set.init(minimumCapacity:)(v2, &type metadata for PlayerAndGameID, v3);
  v20 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = (void **)(a1 + 64);
    do
    {
      v8 = (uint64_t)*(v7 - 4);
      v9 = (uint64_t)*(v7 - 3);
      v10 = (uint64_t)*(v7 - 2);
      v11 = (uint64_t)*(v7 - 1);
      v12 = *v7;
      v7 += 5;
      v21[0] = v8;
      v21[1] = v9;
      v21[2] = v10;
      v21[3] = v11;
      v21[4] = v12;
      v13 = v12;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v11);
      sub_10017396C(v19, v21);
      swift_bridgeObjectRelease(v19[1], v14);
      swift_bridgeObjectRelease(v19[3], v15);

      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(a1, v16);
    return v20;
  }
  else
  {
    v17 = v4;
    swift_bridgeObjectRelease(a1, v5);
  }
  return v17;
}

uint64_t sub_1001717C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];
  uint64_t v12;

  v2 = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  v12 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = a1 + 40;
    do
    {
      sub_100176C2C();
      sub_100176D14(v11);
      v7 = swift_bridgeObjectRelease(v11[1], v6);
      v5 += 16;
      --v4;
    }
    while (v4);
    sub_1001648C4(v7, v8);
    return v12;
  }
  else
  {
    v9 = v2;
    sub_1001648C4(v2, v3);
  }
  return v9;
}

_QWORD *sub_100171864(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12[2];
  uint64_t v13;
  _QWORD v14[4];
  uint64_t v15;

  v13 = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  result = sub_1001B71F0(v14, a1);
  v3 = v14[1];
  v4 = v14[3];
  v5 = v15;
  v6 = (unint64_t)(v14[2] + 64) >> 6;
  if (!v15)
    goto LABEL_3;
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    sub_100176C2C();
    sub_100176D14(v12);
    result = (_QWORD *)swift_bridgeObjectRelease(v12[1], v11);
    if (v5)
      goto LABEL_2;
LABEL_3:
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v7 >= v6)
      goto LABEL_21;
    v8 = *(_QWORD *)(v3 + 8 * v7);
    v9 = v4 + 1;
    if (!v8)
    {
      v9 = v4 + 2;
      if (v4 + 2 >= v6)
        goto LABEL_21;
      v8 = *(_QWORD *)(v3 + 8 * v9);
      if (!v8)
      {
        v9 = v4 + 3;
        if (v4 + 3 >= v6)
          goto LABEL_21;
        v8 = *(_QWORD *)(v3 + 8 * v9);
        if (!v8)
        {
          v9 = v4 + 4;
          if (v4 + 4 >= v6)
            goto LABEL_21;
          v8 = *(_QWORD *)(v3 + 8 * v9);
          if (!v8)
          {
            v9 = v4 + 5;
            if (v4 + 5 >= v6)
              goto LABEL_21;
            v8 = *(_QWORD *)(v3 + 8 * v9);
            if (!v8)
            {
              v10 = v4 + 6;
              while (v10 < v6)
              {
                v8 = *(_QWORD *)(v3 + 8 * v10++);
                if (v8)
                {
                  v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              sub_100176CDC();
              return (_QWORD *)v13;
            }
          }
        }
      }
    }
LABEL_18:
    v5 = (v8 - 1) & v8;
    v4 = v9;
  }
  __break(1u);
  return result;
}

void *sub_1001719D0(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16) >> 3)
    return sub_100175804(a1, a2);
  sub_100175620((id *)a1);
  return (void *)a2;
}

char *static ScopedIDsUtils.merge(scopedIDs:with:)(unint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *result;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v3 = a1;
  if (!(a1 >> 62))
  {
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_17:
    sub_100176C14();
    return (char *)a2;
  }
  sub_1001621A4();
  v24 = sub_100176CA8();
  sub_1001648C4(v24, v25);
  if (!v24)
    goto LABEL_17;
LABEL_3:
  if (!(a2 >> 62))
  {
    if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
    goto LABEL_19;
  }
  sub_100176C14();
  v26 = sub_100176CA8();
  sub_10016D110(v26, v27);
  if (!v26)
  {
LABEL_19:
    sub_1001621A4();
    return (char *)v3;
  }
LABEL_5:
  sub_1001621A4();
  v4 = sub_100176C14();
  v5 = sub_100176334(v4);
  v7 = v3;
  if (!(v3 >> 62))
  {
    v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_7;
LABEL_21:
    sub_10016D110(v5, v6);
    v29 = sub_1001716EC((uint64_t)_swiftEmptyArrayStorage);
    v3 = (unint64_t)sub_100170868(v29);
    sub_10016D13C(v3, v30);
    return (char *)v3;
  }
  sub_100176C14();
  v8 = sub_100176CA8();
  v5 = sub_10016D110(v8, v28);
  if (!v8)
    goto LABEL_21;
LABEL_7:
  result = sub_100176D20(v5, v8 & ~(v8 >> 63));
  if ((v8 & 0x8000000000000000) == 0)
  {
    v10 = 0;
    v31 = v7 & 0xC000000000000001;
    v32 = v7;
    do
    {
      if (v31)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
      else
        v11 = *(id *)(v7 + 8 * v10 + 32);
      v12 = v11;
      v13 = objc_msgSend(v11, "playerID", v31);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v17 = objc_msgSend(v12, "gameBundleID");
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      v22 = _swiftEmptyArrayStorage[2];
      v21 = _swiftEmptyArrayStorage[3];
      if (v22 >= v21 >> 1)
        v5 = (uint64_t)sub_100173480((char *)(v21 > 1), v22 + 1, 1);
      ++v10;
      _swiftEmptyArrayStorage[2] = v22 + 1;
      v23 = &_swiftEmptyArrayStorage[5 * v22];
      v23[4] = v14;
      v23[5] = v16;
      v23[6] = v18;
      v23[7] = v20;
      v23[8] = v12;
      v7 = v32;
    }
    while (v8 != v10);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

id ScopedIDsUtils.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_10016D668();
  return objc_msgSendSuper2(&v2, "init");
}

id MultiplayerActivityEventFilter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_10016D668();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100171E58(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  unint64_t v29;
  BOOL v31;
  uint64_t result;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  size_t v49;
  unint64_t v50;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v57;
  uint64_t v58;

  v6 = a3;
  v7 = a1;
  v8 = sub_100176938(a1, a2, a3);
  sub_100173454(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v8)
    {
      v54 = a4 + 32;
      while (1)
      {
        v11 = v7 <= a2;
        if (v6 > 0)
          v11 = v7 >= a2;
        if (v11)
        {
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
          goto LABEL_75;
        }
        if (__OFADD__(v7, v6))
          v12 = ((v7 + v6) >> 63) ^ 0x8000000000000000;
        else
          v12 = v7 + v6;
        if (__OFADD__(v7, a5))
          goto LABEL_72;
        if (*(_QWORD *)(a4 + 16) >= v7 + a5)
          v13 = v7 + a5;
        else
          v13 = *(_QWORD *)(a4 + 16);
        v14 = v13 - v7;
        if (v13 < v7)
          goto LABEL_73;
        if (v7 < 0)
          goto LABEL_74;
        v57 = v10;
        v15 = v6;
        v16 = type metadata accessor for __ContiguousArrayStorageBase(0);
        v17 = swift_bridgeObjectRetain(a4);
        v18 = swift_unknownObjectRetain_n(v17, 2);
        v19 = (_QWORD *)swift_dynamicCastClass(v18, v16);
        if (!v19)
        {
          swift_bridgeObjectRelease(a4, v20);
          v19 = _swiftEmptyArrayStorage;
        }
        v21 = v19[2];
        swift_release(v19);
        if (v21 == v14)
        {
          v24 = (_QWORD *)swift_dynamicCastClass(a4, v16);
          v6 = v15;
          v10 = v57;
          if (!v24)
          {
            swift_bridgeObjectRelease(a4, v23);
            v24 = _swiftEmptyArrayStorage;
          }
        }
        else
        {
          swift_bridgeObjectRelease(a4, v22);
          v24 = _swiftEmptyArrayStorage;
          v6 = v15;
          v10 = v57;
          if (v13 != v7)
          {
            if (v14 < 1)
            {
              if (v14 < 0)
                goto LABEL_79;
            }
            else
            {
              v27 = sub_100161BD0(&qword_100314F28);
              v24 = (_QWORD *)swift_allocObject(v27, 16 * v14 + 32, 7);
              v28 = j__malloc_size(v24);
              v24[2] = v14;
              v24[3] = 2 * ((uint64_t)(v28 - 32) / 16);
            }
            v29 = (unint64_t)(v24 + 4);
            if (v54 + 16 * v7 < (unint64_t)&v24[2 * v14 + 4] && v29 < v54 + 16 * v13)
            {
LABEL_80:
              v52 = "UnsafeMutablePointer.initialize overlapping range";
              v53 = 49;
              goto LABEL_81;
            }
            swift_arrayInitWithCopy(v29);
          }
        }
        swift_bridgeObjectRelease(a4, v23);
        v26 = v10[2];
        v25 = v10[3];
        if (v26 >= v25 >> 1)
          sub_100173454(v25 > 1, v26 + 1, 1);
        v10[2] = v26 + 1;
        v10[v26 + 4] = v24;
        v7 = v12;
        if (!--v8)
          goto LABEL_36;
      }
    }
    v12 = v7;
LABEL_36:
    v31 = v12 <= a2;
    if (v6 > 0)
      v31 = v12 >= a2;
    if (v31)
    {
LABEL_39:
      swift_bridgeObjectRelease(a4, v9);
      return (uint64_t)v10;
    }
    v58 = a4 + 32;
    while (1)
    {
      v33 = __OFADD__(v12, v6) ? ((v12 + v6) >> 63) ^ 0x8000000000000000 : v12 + v6;
      if (__OFADD__(v12, a5))
        break;
      if (*(_QWORD *)(a4 + 16) >= v12 + a5)
        v34 = v12 + a5;
      else
        v34 = *(_QWORD *)(a4 + 16);
      v35 = v34 - v12;
      if (v34 < v12)
        goto LABEL_76;
      if (v12 < 0)
        goto LABEL_77;
      v36 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v37 = swift_bridgeObjectRetain(a4);
      v38 = swift_unknownObjectRetain_n(v37, 2);
      v39 = (_QWORD *)swift_dynamicCastClass(v38, v36);
      if (!v39)
      {
        swift_bridgeObjectRelease(a4, v40);
        v39 = _swiftEmptyArrayStorage;
      }
      v41 = v39[2];
      swift_release(v39);
      if (v41 == v35)
      {
        v44 = (_QWORD *)swift_dynamicCastClass(a4, v36);
        if (!v44)
        {
          swift_bridgeObjectRelease(a4, v43);
          v44 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        swift_bridgeObjectRelease(a4, v42);
        v44 = _swiftEmptyArrayStorage;
        if (v34 != v12)
        {
          if (v35 < 1)
          {
            if (v35 < 0)
              goto LABEL_79;
          }
          else
          {
            v48 = sub_100161BD0(&qword_100314F28);
            v44 = (_QWORD *)swift_allocObject(v48, 16 * v35 + 32, 7);
            v49 = j__malloc_size(v44);
            v44[2] = v35;
            v44[3] = 2 * ((uint64_t)(v49 - 32) / 16);
          }
          v50 = (unint64_t)(v44 + 4);
          if (v58 + 16 * v12 < (unint64_t)&v44[2 * v35 + 4] && v50 < v58 + 16 * v34)
            goto LABEL_80;
          swift_arrayInitWithCopy(v50);
        }
      }
      swift_bridgeObjectRelease(a4, v43);
      v46 = v10[2];
      v45 = v10[3];
      if (v46 >= v45 >> 1)
        sub_100173454(v45 > 1, v46 + 1, 1);
      v10[2] = v46 + 1;
      v10[v46 + 4] = v44;
      v47 = v33 <= a2;
      if (v6 > 0)
        v47 = v33 >= a2;
      v12 = v33;
      if (v47)
        goto LABEL_39;
    }
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
  }
  __break(1u);
LABEL_79:
  v52 = "UnsafeMutablePointer.initialize with negative count";
  v53 = 51;
LABEL_81:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v52, v53, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

void sub_100172328(uint64_t a1)
{
  sub_1001723CC(a1, (uint64_t)&type metadata for String);
}

void sub_100172334(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 < 0)
  {
    sub_10016D208();
    sub_100176C44((uint64_t)"Fatal error", v3, v4, (uint64_t)"Can't construct Array with count < 0", v5, v6, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v2 = sub_10016CBB4(0, &qword_100315048, GKGameActivityInternal_ptr);
      *(_QWORD *)((static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2) & 0xFFFFFFFFFFFFF8) + 0x10) = a1;
    }
    sub_1000279E0();
  }
}

void sub_1001723C0(uint64_t a1)
{
  sub_1001723CC(a1, (uint64_t)&type metadata for Int);
}

void sub_1001723CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 < 0)
  {
    sub_10016D208();
    sub_100176C44((uint64_t)"Fatal error", v2, v3, (uint64_t)"Can't construct Array with count < 0", v4, v5, (uint64_t)"Swift/Array.swift");
    __break(1u);
  }
  else
  {
    if (a1)
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2) + 16) = a1;
    sub_1000279E0();
  }
}

void sub_100172434(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if ((a3 & 1) != 0)
  {
    sub_100176BE8();
    if (v8 != v9)
    {
      sub_100176C88();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_100176BD8();
    }
  }
  sub_100176CE4();
  if (v5)
  {
    v10 = sub_100161BD0(&qword_100315088);
    v11 = (char *)swift_allocObject(v10, 40 * v5 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v4;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((a1 & 1) != 0)
  {
    v14 = sub_100172CE0((char *)(a4 + 32), v4, v13);
    *(_QWORD *)(a4 + 16) = 0;
    sub_1001648C4((uint64_t)v14, v15);
  }
  else
  {
    sub_10017286C(0, v4, (unint64_t)v13, a4);
  }
  sub_100176BF8();
}

void sub_1001724FC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if ((a3 & 1) != 0)
  {
    sub_100176BE8();
    if (v8 != v9)
    {
      sub_100176C88();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_100176BD8();
    }
  }
  sub_100176CE4();
  if (v5)
  {
    v10 = sub_100161BD0(&qword_100314F28);
    v11 = (char *)sub_100176C08(v10, 16 * v5);
    j__malloc_size(v11);
    sub_10016D54C();
    *((_QWORD *)v11 + 2) = v4;
    *((_QWORD *)v11 + 3) = v12;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((a1 & 1) != 0)
  {
    v14 = sub_100172D6C((char *)(a4 + 32), v4, v13);
    *(_QWORD *)(a4 + 16) = 0;
    sub_1001648C4((uint64_t)v14, v15);
  }
  else
  {
    sub_100172988(0, v4, (unint64_t)v13, a4);
  }
  sub_1000BA184();
}

uint64_t sub_1001725AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001726C8(a1, a2, a3, a4, &qword_100315078, (void (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

void sub_1001725C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001725F8(a1, a2, a3, a4, &qword_100314F48, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))sub_100172A7C, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))sub_100172E1C);
}

void sub_1001725DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001725F8(a1, a2, a3, a4, &qword_100315040, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))sub_100172A7C, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))sub_100172DC4);
}

void sub_1001725F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD, uint64_t, _QWORD *, uint64_t), uint64_t (*a7)(uint64_t, uint64_t, _QWORD *))
{
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100176BE8();
    if (v12 != v13)
    {
      sub_100176C88();
      if (v12)
      {
        __break(1u);
        return;
      }
      sub_100176BD8();
    }
  }
  else
  {
    v11 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(a4 + 16);
  else
    v15 = v11;
  if (v15)
  {
    v16 = sub_100176CD4(a1, a2, a3, a4, a5);
    v17 = (_QWORD *)sub_100176C08(v16, 8 * v15);
    j__malloc_size(v17);
    sub_100176C6C();
    v17[2] = v14;
    v17[3] = v18;
  }
  else
  {
    v17 = _swiftEmptyArrayStorage;
  }
  v19 = v17 + 4;
  if ((v10 & 1) != 0)
  {
    v20 = a7(a4 + 32, v14, v19);
    *(_QWORD *)(a4 + 16) = 0;
    sub_1001648C4(v20, v21);
  }
  else
  {
    a6(0, v14, v19, a4);
  }
  sub_100176BF8();
}

uint64_t sub_1001726B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001726C8(a1, a2, a3, a4, &qword_100315028, (void (*)(_QWORD))type metadata accessor for MultiplayerActivityEventFilter.TrackedSession);
}

uint64_t sub_1001726C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD))
{
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  const char *v28;
  uint64_t v29;

  v8 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100176BE8();
    if (v10 != v11)
    {
      sub_100176C88();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_10016D208();
        v28 = "Division by zero";
        v29 = 16;
LABEL_25:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v28, v29, 2, "Swift/IntegerTypes.swift", 24);
        __break(1u);
        return result;
      }
      sub_100176BD8();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (!v13)
  {
    v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v14 = sub_100176CD4(a1, a2, a3, a4, a5);
  v15 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (_QWORD *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  v20 = j__malloc_size(v19);
  if (!v16)
    goto LABEL_23;
  if (v20 - v18 == 0x8000000000000000 && v16 == -1)
  {
    sub_10016D208();
    v28 = "Division results in an overflow";
    v29 = 31;
    goto LABEL_25;
  }
  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  v22 = *(unsigned __int8 *)(*(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8) + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = (unint64_t)v19 + v23;
  if ((v8 & 1) != 0)
  {
    v25 = sub_100172EAC(a4 + v23, v12, v24, a6);
    *(_QWORD *)(a4 + 16) = 0;
    sub_1001648C4(v25, v26);
  }
  else
  {
    sub_100172B6C(0, v12, v24, a4, (uint64_t (*)(_QWORD))a6);
  }
  return (uint64_t)v19;
}

uint64_t sub_10017286C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v12 = "UnsafeMutablePointer.initialize with negative count";
    v13 = 51;
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v4;
  if (v7 >= v8 || v7 + 40 * v4 <= a3)
  {
    sub_100161BD0(&qword_100315090);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4, v10);
    return v8;
  }
  v12 = "UnsafeMutablePointer.initialize overlapping range";
  v13 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v12, v13, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_100172988(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t result;
  const char *v11;
  uint64_t v12;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v11 = "UnsafeMutablePointer.initialize with negative count";
    v12 = 51;
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4, v9);
    return v7;
  }
  v11 = "UnsafeMutablePointer.initialize overlapping range";
  v12 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v11, v12, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

char *sub_100172A7C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t v9;
  char *result;
  const char *v11;
  uint64_t v12;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v11 = "UnsafeMutablePointer.initialize with negative count";
    v12 = 51;
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 8 * a1 + 32);
  v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4, v9);
    return v7;
  }
  v11 = "UnsafeMutablePointer.initialize overlapping range";
  v12 = 49;
LABEL_11:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v11, v12, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_100172B6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_10016D208();
    sub_100176C5C();
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    v17 = swift_arrayInitWithCopy(a3);
    sub_1001648C4(v17, v18);
    return v14;
  }
  sub_10016D208();
  sub_100176C34();
LABEL_11:
  result = sub_10016D504(v20, v21, v22, v23, v24, v25, v26);
  __break(1u);
  return result;
}

char *sub_100172C5C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_100172CE0(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

char *sub_100172D6C(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
  {
    sub_10016D208();
    result = (char *)sub_100176BB0((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100176BC8(a3, result);
  }
  return result;
}

char *sub_100172DC4(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0)
  {
    sub_10016D208();
    result = (char *)sub_100176BB0((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_100176BC8(a3, result);
  }
  return result;
}

char *sub_100172E1C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25);
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

uint64_t sub_100172EA0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100172EAC(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for MultiplayerActivityEventFilter.TrackedSession);
}

uint64_t sub_100172EAC(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD))
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 < 0)
  {
    sub_10016D208();
    result = sub_100176BB0((uint64_t)"Fatal error", v9, v10, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v11, v12, (uint64_t)"Swift/UnsafePointer.swift");
    __break(1u);
  }
  else if (a3 < a1
         || (result = ((uint64_t (*)(_QWORD))a4)(0),
             a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    a4(0);
    sub_100176CF4();
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    sub_100176CF4();
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t sub_100172F84(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;

  if (a2 < 0)
  {
    v6 = "UnsafeMutablePointer.initialize with negative count";
    v7 = 51;
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
    {
      sub_100161BD0(&qword_100315038);
      return swift_arrayInitWithCopy(a3);
    }
    v6 = "UnsafeMutablePointer.initialize overlapping range";
    v7 = 49;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v6, v7, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_100173070(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 < 0)
  {
    sub_10016D208();
    sub_100176C5C();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    sub_10016D208();
    sub_100176C34();
  }
  result = sub_10016D504(v5, v6, v7, v8, v9, v10, v11);
  __break(1u);
  return result;
}

uint64_t sub_10017310C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  const char *v5;
  uint64_t v6;

  if (a2 < 0)
  {
    v5 = "UnsafeMutablePointer.initialize with negative count";
    v6 = 51;
  }
  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    v5 = "UnsafeMutablePointer.initialize overlapping range";
    v6 = 49;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v5, v6, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1001731DC(uint64_t a1, uint64_t a2)
{
  return sub_100173204(a1, a2);
}

uint64_t sub_1001731F0(uint64_t a1, uint64_t a2)
{
  return sub_100173204(a1, a2);
}

uint64_t sub_100173204(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0)
  {
    sub_10016D208();
    sub_100176C5C();
  }
  else
  {
    sub_100176CB0();
    if (!v7 && v6)
    {
      v6 = v5 >= v2;
      v7 = v5 == v2;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || !v6)
    {
      sub_10016CBB4(0, v3, v4);
      v8 = sub_100176D00();
      return sub_100176C1C(v8);
    }
    sub_10016D208();
    sub_100176C34();
  }
  result = sub_10016D504(v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

void *sub_100173298(char *__src, uint64_t a2, char *__dst)
{
  void *result;
  const char *v5;
  uint64_t v6;

  if (a2 < 0)
  {
    v5 = "UnsafeMutablePointer.initialize with negative count";
    v6 = 51;
  }
  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst)
      return memcpy(__dst, __src, 8 * a2);
    v5 = "UnsafeMutablePointer.initialize overlapping range";
    v6 = 49;
  }
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v5, v6, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_100173360(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 < 0)
  {
    sub_10016D208();
    sub_100176C5C();
  }
  else
  {
    sub_100176CB0();
    if (!v6 && v5)
    {
      v5 = v4 >= v2;
      v6 = v4 == v2;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (v6 || !v5)
    {
      sub_100161BD0(v3);
      v7 = sub_100176D00();
      return sub_100176C1C(v7);
    }
    sub_10016D208();
    sub_100176C34();
  }
  result = sub_10016D504(v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

void sub_1001733EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_1001734E4(a1, a2, a3, *v3, &qword_100315030, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100172C5C, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100172F84);
  *v3 = v4;
}

void sub_100173420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_1001734E4(a1, a2, a3, *v3, &qword_100314F28, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100172D6C, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100173070);
  *v3 = v4;
}

void sub_100173454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_100173720(a1, a2, a3, *v3, &qword_100315070);
  *v3 = v4;
}

char *sub_100173480(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100173594(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_10017349C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_100173720(a1, a2, a3, *v3, &qword_100315008);
  *v3 = v4;
}

void sub_1001734C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001734E4(a1, a2, a3, a4, &qword_100314F28, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100172D6C, (void (*)(uint64_t, uint64_t, _QWORD *))sub_100173070);
}

void sub_1001734E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, _QWORD *), void (*a7)(uint64_t, uint64_t, _QWORD *))
{
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v10 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100176BE8();
    if (v12 != v13)
    {
      sub_100176C88();
      if (v12)
      {
        __break(1u);
        return;
      }
      sub_100176BD8();
    }
  }
  else
  {
    v11 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(a4 + 16);
  else
    v15 = v11;
  if (v15)
  {
    v16 = sub_100176CD4(a1, a2, a3, a4, a5);
    v17 = (_QWORD *)sub_100176C08(v16, 16 * v15);
    j__malloc_size(v17);
    sub_10016D54C();
    v17[2] = v14;
    v17[3] = v18;
  }
  else
  {
    v17 = _swiftEmptyArrayStorage;
  }
  v19 = v17 + 4;
  v20 = a4 + 32;
  if ((v10 & 1) != 0)
  {
    a6(v20, v14, v19);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a7(v20, v14, v19);
  }
  sub_100176CDC();
  sub_100176BF8();
}

char *sub_100173594(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100161BD0(&qword_100315068);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100172CE0(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10017310C((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

void sub_10017367C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    sub_100176BE8();
    if (v8 != v9)
    {
      sub_100176C88();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_100176BD8();
    }
  }
  sub_100176CE4();
  if (v5)
  {
    v10 = sub_100161BD0(&qword_100315040);
    v11 = (char *)sub_100176C08(v10, 8 * v5);
    j__malloc_size(v11);
    sub_100176C6C();
    *((_QWORD *)v11 + 2) = v4;
    *((_QWORD *)v11 + 3) = v12;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_100172DC4(v14, v4, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100173298(v14, v4, v13);
  }
  sub_100176CDC();
  sub_1000BA184();
}

void sub_100173720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;

  v6 = a1;
  if ((a3 & 1) != 0)
  {
    sub_100176BE8();
    if (v8 != v9)
    {
      sub_100176C88();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_100176BD8();
    }
  }
  else
  {
    v7 = a2;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(a4 + 16);
  else
    v11 = v7;
  if (v11)
  {
    v12 = sub_100176CD4(a1, a2, a3, a4, a5);
    v13 = (char *)sub_100176C08(v12, 8 * v11);
    j__malloc_size(v13);
    sub_100176C6C();
    *((_QWORD *)v13 + 2) = v10;
    *((_QWORD *)v13 + 3) = v14;
  }
  else
  {
    v13 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = (char *)(a4 + 32);
  if ((v6 & 1) != 0)
  {
    sub_100172DC4(v15, v10, v13 + 32);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100173360((uint64_t)v15, v10);
  }
  sub_100176CDC();
  sub_100176BF8();
}

uint64_t sub_1001737D0(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_1001737EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[9];

  v7 = *v3;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v29, a2, a3);
  v8 = sub_100176D54();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  sub_100176D2C();
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(v7 + 48);
    v14 = (uint64_t *)(v13 + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = *v14 == a2 && v16 == a3;
    if (v17 || (v15 = sub_100176C80(v15, v16, a2, a3), (v15 & 1) != 0))
    {
LABEL_7:
      sub_10016D2DC(v15, v16);
      swift_bridgeObjectRelease(v7, v18);
      v19 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v20 = v19[1];
      *a1 = *v19;
      a1[1] = v20;
      swift_bridgeObjectRetain(v20);
      return 0;
    }
    v22 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v22;
      sub_100176D2C();
      if ((v23 & 1) == 0)
        break;
      v24 = (uint64_t *)(v13 + 16 * v10);
      v15 = *v24;
      v16 = v24[1];
      if (*v24 != a2 || v16 != a3)
      {
        v15 = sub_100176C80(v15, v16, a2, a3);
        if ((v15 & 1) == 0)
          continue;
      }
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7, v11);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v29[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_100176C2C();
  sub_1001741DC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v27 = *v3;
  *v3 = v29[0];
  swift_bridgeObjectRelease(v27, v28);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10017396C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v40[9];
  id v41;

  v4 = *a2;
  v3 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  sub_1001767A0((uint64_t)(a2 + 4), (uint64_t)&v41);
  v38 = v2;
  v7 = *v2;
  Hasher.init(_seed:)(v40, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v40, v4, v3);
  swift_bridgeObjectRelease(v3, v8);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v40, v6, v5);
  swift_bridgeObjectRelease(v5, v9);
  v10 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v7 + 32);
  v13 = v10 & ~v12;
  v14 = v7 + 56;
  v37 = v7;
  if (((*(_QWORD *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v15 = ~v12;
    v16 = *(_QWORD *)(v7 + 48);
    while (1)
    {
      v17 = (_QWORD *)(v16 + 40 * v13);
      v11 = v17[1];
      v19 = v17[2];
      v18 = v17[3];
      v20 = *v17 == v4 && v11 == v3;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v11, v4, v3, 0) & 1) != 0)
      {
        v21 = v19 == v6 && v18 == v5;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v18, v6, v5, 0) & 1) != 0)
          break;
      }
      v13 = (v13 + 1) & v15;
      if (((*(_QWORD *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_14;
    }
    swift_bridgeObjectRelease(v5, v11);
    swift_bridgeObjectRelease(v3, v27);
    swift_bridgeObjectRelease(v37, v28);
    sub_1001768D4(&v41);
    v29 = (uint64_t *)(*(_QWORD *)(*v38 + 48) + 40 * v13);
    v30 = *v29;
    v31 = v29[1];
    v32 = v29[2];
    v33 = v29[3];
    v34 = (void *)v29[4];
    *a1 = v30;
    a1[1] = v31;
    a1[2] = v32;
    a1[3] = v33;
    a1[4] = v34;
    v35 = v34;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    return 0;
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease(v37, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
    v40[0] = *v38;
    *v38 = 0x8000000000000000;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v5);
    sub_100176810(&v41);
    sub_100174374((uint64_t)a2, v13, isUniquelyReferenced_nonNull_native);
    v23 = *v38;
    *v38 = v40[0];
    swift_bridgeObjectRelease(v23, v24);
    v25 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v25;
    a1[4] = a2[4];
    return 1;
  }
}

Swift::Int sub_100173BBC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100161BD0(&qword_100315018);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    if (!v9)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
      *v30 = v20;
      v30[1] = v21;
      ++*(_QWORD *)(v6 + 16);
      if (v9)
        goto LABEL_9;
LABEL_10:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_41;
      if (v16 >= v10)
        goto LABEL_35;
      v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v10)
          goto LABEL_35;
        v17 = v33[v13];
        if (!v17)
        {
          v13 = v16 + 2;
          if (v16 + 2 >= v10)
            goto LABEL_35;
          v17 = v33[v13];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              v2 = v32;
              v31 = 1 << *(_BYTE *)(v3 + 32);
              if (v31 > 63)
                sub_1001737D0(0, (unint64_t)(v31 + 63) >> 6, v33);
              else
                *v33 = -1 << v31;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v13 >= v10)
                  goto LABEL_35;
                v17 = v33[v13];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v13 = v18;
          }
        }
      }
LABEL_23:
      v9 = (v17 - 1) & v17;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_100173E94(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100161BD0(&qword_100315050);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v36 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v38 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v37 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain(v3);
    v12 = 0;
    v39 = v3;
    if (!v9)
      goto LABEL_10;
LABEL_9:
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 40 * i);
      v19 = *v18;
      v20 = v18[1];
      v21 = v18[2];
      v22 = v18[3];
      v23 = v18[4];
      Hasher.init(_seed:)(v40, *(_QWORD *)(v6 + 40));
      swift_bridgeObjectRetain(v20);
      String.hash(into:)(v40, v19, v20);
      swift_bridgeObjectRelease(v20, v24);
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v40, v21, v22);
      swift_bridgeObjectRelease(v22, v25);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v6 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) == 0)
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          v32 = v28 == v31;
          if (v28 == v31)
            v28 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v10 + 8 * v28);
          if (v33 != -1)
          {
            v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v10 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      v34 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 40 * v29);
      *v34 = v19;
      v34[1] = v20;
      v34[2] = v21;
      v34[3] = v22;
      v34[4] = v23;
      ++*(_QWORD *)(v6 + 16);
      v3 = v39;
      if (v9)
        goto LABEL_9;
LABEL_10:
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_41;
      if (v15 >= v37)
        goto LABEL_35;
      v16 = v38[v15];
      ++v12;
      if (!v16)
      {
        v12 = v15 + 1;
        if (v15 + 1 >= v37)
          goto LABEL_35;
        v16 = v38[v12];
        if (!v16)
        {
          v12 = v15 + 2;
          if (v15 + 2 >= v37)
            goto LABEL_35;
          v16 = v38[v12];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v37)
            {
LABEL_35:
              swift_release(v3);
              v2 = v36;
              v35 = 1 << *(_BYTE *)(v3 + 32);
              if (v35 > 63)
                sub_1001737D0(0, (unint64_t)(v35 + 63) >> 6, v38);
              else
                *v38 = -1 << v35;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v16 = v38[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_42;
                if (v12 >= v37)
                  goto LABEL_35;
                v16 = v38[v12];
                ++v17;
                if (v16)
                  goto LABEL_23;
              }
            }
            v12 = v17;
          }
        }
      }
LABEL_23:
      v9 = (v16 - 1) & v16;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_1001741DC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100173BBC(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100174564();
      goto LABEL_22;
    }
    sub_1001748F0(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

uint64_t sub_100174374(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD v34[9];

  v5 = (uint64_t *)result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  v33 = result;
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_21;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100173E94(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_100174714();
      goto LABEL_21;
    }
    sub_100174B98(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v34, *(_QWORD *)(*v3 + 40));
  v10 = *v5;
  v11 = v5[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(v34, v10, v11);
  swift_bridgeObjectRelease(v11, v12);
  v13 = v5[2];
  v14 = v5[3];
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(v34, v13, v14);
  swift_bridgeObjectRelease(v14, v15);
  result = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v16;
  v17 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v16;
    v19 = *(_QWORD *)(v9 + 48);
    do
    {
      v20 = (_QWORD *)(v19 + 40 * a2);
      v21 = v20[1];
      v22 = v20[2];
      v23 = v20[3];
      v24 = *v20 == v10 && v21 == v11;
      if (v24 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v10, v11, 0), (result & 1) != 0))
      {
        if (v22 == v13 && v23 == v14)
          goto LABEL_24;
        result = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v13, v14, 0);
        if ((result & 1) != 0)
          goto LABEL_24;
      }
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v17 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_21:
  v26 = *v32;
  *(_QWORD *)(*v32 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v27 = *(_QWORD *)(v26 + 48) + 40 * a2;
  v28 = *(_OWORD *)(v33 + 16);
  *(_OWORD *)v27 = *(_OWORD *)v33;
  *(_OWORD *)(v27 + 16) = v28;
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v33 + 32);
  v29 = *(_QWORD *)(v26 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (!v30)
  {
    *(_QWORD *)(v26 + 16) = v31;
    return result;
  }
  __break(1u);
LABEL_24:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for PlayerAndGameID);
  __break(1u);
  return result;
}

void *sub_100174564()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  sub_100161BD0(&qword_100315018);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain(v21);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100174714()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  id v28;

  v1 = v0;
  sub_100161BD0(&qword_100315050);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = 5 * i;
    v21 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 8 * v20);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v25 = v21[3];
    v26 = (void *)v21[4];
    v27 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v20);
    *v27 = v22;
    v27[1] = v23;
    v27[2] = v24;
    v27[3] = v25;
    v27[4] = v26;
    v28 = v26;
    swift_bridgeObjectRetain(v23);
    result = (void *)swift_bridgeObjectRetain(v25);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_1001748F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100161BD0(&qword_100315018);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_37:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  if (!v10)
    goto LABEL_10;
LABEL_9:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v21;
    ++*(_QWORD *)(v6 + 16);
    if (v10)
      goto LABEL_9;
LABEL_10:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_39;
    if (v16 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_35;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_35;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v10 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v32)
      goto LABEL_35;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100174B98(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100161BD0(&qword_100315050);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_37:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v36 = v2;
  v37 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v38 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  v39 = v3;
  if (!v9)
    goto LABEL_10;
LABEL_9:
  v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 40 * i);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    v23 = (void *)v18[4];
    Hasher.init(_seed:)(v40, *(_QWORD *)(v6 + 40));
    v24 = v23;
    swift_bridgeObjectRetain_n(v20, 2);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v40, v19, v20);
    swift_bridgeObjectRelease(v20, v25);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v40, v21, v22);
    swift_bridgeObjectRelease(v22, v26);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v6 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6))) == 0)
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v27) >> 6;
      while (++v29 != v32 || (v31 & 1) == 0)
      {
        v33 = v29 == v32;
        if (v29 == v32)
          v29 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v10 + 8 * v29);
        if (v34 != -1)
        {
          v30 = __clz(__rbit64(~v34)) + (v29 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v10 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v35 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 40 * v30);
    *v35 = v19;
    v35[1] = v20;
    v35[2] = v21;
    v35[3] = v22;
    v35[4] = v23;
    ++*(_QWORD *)(v6 + 16);
    v3 = v39;
    if (v9)
      goto LABEL_9;
LABEL_10:
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_39;
    if (v15 >= v38)
      goto LABEL_35;
    v16 = *(_QWORD *)(v37 + 8 * v15);
    ++v12;
    if (!v16)
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v38)
        goto LABEL_35;
      v16 = *(_QWORD *)(v37 + 8 * v12);
      if (!v16)
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v38)
          goto LABEL_35;
        v16 = *(_QWORD *)(v37 + 8 * v12);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v38)
  {
LABEL_35:
    result = swift_release_n(v3, 2);
    v2 = v36;
    goto LABEL_37;
  }
  v16 = *(_QWORD *)(v37 + 8 * v17);
  if (v16)
  {
    v12 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v38)
      goto LABEL_35;
    v16 = *(_QWORD *)(v37 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100174EB4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  _QWORD v27[9];

  v5 = *v2;
  Hasher.init(_seed:)(v27, *(_QWORD *)(*v2 + 40));
  sub_100176C2C();
  String.hash(into:)(v27, a1, a2);
  v6 = sub_100176D54();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  sub_100176D40();
  if ((v11 & 1) == 0)
  {
LABEL_18:
    sub_10016D2DC(v9, v10);
    return 0;
  }
  v12 = *(_QWORD *)(v5 + 48);
  v13 = (uint64_t *)(v12 + 16 * v8);
  v14 = *v13;
  v15 = v13[1];
  if (*v13 != a1 || v15 != a2)
  {
    v14 = sub_100176C80(v14, v15, a1, a2);
    if ((v14 & 1) == 0)
    {
      v22 = ~v7;
      while (1)
      {
        v8 = (v8 + 1) & v22;
        sub_100176D40();
        if ((v23 & 1) == 0)
          goto LABEL_18;
        v24 = (uint64_t *)(v12 + 16 * v8);
        v14 = *v24;
        v15 = v24[1];
        if (*v24 != a1 || v15 != a2)
        {
          v14 = sub_100176C80(v14, v15, a1, a2);
          if ((v14 & 1) == 0)
            continue;
        }
        break;
      }
    }
  }
  sub_10016D2DC(v14, v15);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v18 = *v2;
  v27[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100174564();
    v18 = v27[0];
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 48) + 16 * v8);
  sub_10017522C(v8);
  v20 = *v2;
  *v2 = v27[0];
  swift_bridgeObjectRelease(v20, v21);
  return v19;
}

uint64_t sub_100175010@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD v39[9];

  v5 = *v2;
  Hasher.init(_seed:)(v39, *(_QWORD *)(*v2 + 40));
  v6 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v39, v6, v7);
  swift_bridgeObjectRelease(v7, v8);
  v9 = a1[2];
  v10 = a1[3];
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(v39, v9, v10);
  swift_bridgeObjectRelease(v10, v11);
  v12 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v5 + 32);
  v15 = v12 & ~v14;
  v16 = v5 + 56;
  if (((*(_QWORD *)(v5 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v36 = v5;
    v37 = a2;
    v17 = ~v14;
    v18 = *(_QWORD *)(v5 + 48);
    while (1)
    {
      v19 = (_QWORD *)(v18 + 40 * v15);
      v20 = v19[1];
      v21 = v19[2];
      v22 = v19[3];
      v23 = *v19 == v6 && v20 == v7;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, v6, v7, 0) & 1) != 0)
      {
        v24 = v21 == v9 && v22 == v10;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v9, v10, 0) & 1) != 0)
          break;
      }
      v15 = (v15 + 1) & v17;
      if (((*(_QWORD *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        result = swift_bridgeObjectRelease(v36, v20);
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        a2 = v37;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease(v36, v20);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
    v32 = *v38;
    v39[0] = *v38;
    *v38 = 0x8000000000000000;
    a2 = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100174714();
      v32 = v39[0];
    }
    v33 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 40 * v15);
    v26 = *v33;
    v27 = v33[1];
    v28 = v33[2];
    v29 = v33[3];
    v30 = v33[4];
    sub_1001753E4(v15);
    v34 = *v38;
    *v38 = v39[0];
    result = swift_bridgeObjectRelease(v34, v35);
  }
  else
  {
    result = swift_bridgeObjectRelease(v5, v13);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
  }
LABEL_19:
  *a2 = v26;
  a2[1] = v27;
  a2[2] = v28;
  a2[3] = v29;
  a2[4] = v30;
  return result;
}

unint64_t sub_10017522C(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v25, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v25, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12, v14);
        v15 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v2 >= v15)
          {
LABEL_15:
            v18 = *(_QWORD *)(v3 + 48);
            v19 = (_OWORD *)(v18 + 16 * v2);
            v20 = (_OWORD *)(v18 + 16 * v6);
            v21 = v2 != v6 || v19 >= v20 + 1;
            v2 = v6;
            if (v21)
            {
              *v19 = *v20;
              v2 = v6;
            }
          }
        }
        else if (v15 >= v9 || v2 >= v15)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v22 = *(_QWORD *)(v3 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v24;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1001753E4(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v28;
  unint64_t v29;
  __int128 *v30;
  BOOL v31;
  __int128 v32;
  __int128 v33;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      v38 = v4;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = v3;
        v12 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 40 * v6);
        v13 = *v12;
        v14 = v12[1];
        v15 = v7;
        v16 = v12[2];
        v17 = v12[3];
        v18 = (void *)v12[4];
        v19 = v9;
        Hasher.init(_seed:)(v39, v10);
        v20 = v18;
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v17);
        String.hash(into:)(v39, v13, v14);
        swift_bridgeObjectRetain(v17);
        v21 = v16;
        v7 = v15;
        String.hash(into:)(v39, v21, v17);
        swift_bridgeObjectRelease(v17, v22);
        v23 = Hasher._finalize()();

        swift_bridgeObjectRelease(v17, v24);
        swift_bridgeObjectRelease(v14, v25);
        v9 = v19;
        v26 = v23 & v15;
        if (v2 >= (uint64_t)v19)
        {
          if (v26 >= v19 && v2 >= v26)
          {
LABEL_9:
            v3 = v11;
            v28 = *(_QWORD *)(v11 + 48);
            v29 = v28 + 40 * v2;
            v30 = (__int128 *)(v28 + 40 * v6);
            v31 = v2 != v6 || v29 >= (unint64_t)v30 + 40;
            v2 = v6;
            v4 = v38;
            if (v31)
            {
              v32 = *v30;
              v33 = v30[1];
              *(_QWORD *)(v29 + 32) = *((_QWORD *)v30 + 4);
              *(_OWORD *)v29 = v32;
              *(_OWORD *)(v29 + 16) = v33;
              v2 = v6;
            }
            goto LABEL_21;
          }
        }
        else if (v26 >= v19 || v2 >= v26)
        {
          goto LABEL_9;
        }
        v4 = v38;
        v3 = v11;
LABEL_21:
        v6 = (v6 + 1) & v15;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v35 = *(_QWORD *)(v3 + 16);
  v36 = __OFSUB__(v35, 1);
  v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v37;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

id *sub_100175620(id *result)
{
  uint64_t v1;
  id *v2;
  id *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  _OWORD v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  id v24;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 7;
  v4 = 1 << *((_BYTE *)result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & (unint64_t)result[7];
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = (id *)swift_bridgeObjectRetain(result);
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t)v2[6] + 40 * i;
    v16 = *(_OWORD *)v14;
    v15 = *(_OWORD *)(v14 + 16);
    v21 = *(_QWORD *)(v14 + 32);
    v20[0] = v16;
    v20[1] = v15;
    v22 = *(_OWORD *)v14;
    v23 = v15;
    sub_1001767A0((uint64_t)&v21, (uint64_t)&v24);
    sub_1001767E8((uint64_t)&v22);
    sub_1001767E8((uint64_t)&v23);
    sub_100176810(&v24);
    sub_100175010((uint64_t *)v20, v19);
    sub_100176838((uint64_t)v19);
    sub_1001768AC((uint64_t)&v22, v17);
    sub_1001768AC((uint64_t)&v23, v18);
    result = sub_1001768D4(&v24);
    if (v6)
      goto LABEL_5;
LABEL_6:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return (id *)swift_release(v2);
    v12 = (unint64_t)v3[v11];
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return (id *)swift_release(v2);
      v12 = (unint64_t)v3[v8];
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return (id *)swift_release(v2);
        v12 = (unint64_t)v3[v8];
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return (id *)swift_release(v2);
          v12 = (unint64_t)v3[v8];
          if (!v12)
            break;
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return (id *)swift_release(v2);
  v12 = (unint64_t)v3[v13];
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return (id *)swift_release(v2);
    v12 = (unint64_t)v3[v8];
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100175804(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t isStackAllocationSafe;
  uint64_t v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[9];
  uint64_t v60[5];

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v54 = a1 + 56;
    v4 = -1 << *(_BYTE *)(a1 + 32);
    v51 = ~v4;
    if (-v4 < 64)
      v5 = ~(-1 << -(char)v4);
    else
      v5 = -1;
    v6 = v5 & v3;
    v52 = (unint64_t)(63 - v4) >> 6;
    v7 = (char *)(a2 + 56);
    v8 = swift_bridgeObjectRetain(a1);
    v9 = 0;
    v58 = v2;
    v53 = v8;
    if (!v6)
      goto LABEL_7;
LABEL_6:
    v56 = (v6 - 1) & v6;
    v57 = v9;
    for (i = __clz(__rbit64(v6)) | (v9 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
    {
      v15 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 40 * i);
      v16 = *v15;
      v17 = v15[1];
      v18 = v15[2];
      v19 = v15[3];
      v20 = (void *)v15[4];
      Hasher.init(_seed:)(v59, *(_QWORD *)(v2 + 40));
      v55 = v20;
      swift_bridgeObjectRetain_n(v17, 2);
      swift_bridgeObjectRetain(v19);
      String.hash(into:)(v59, v16, v17);
      swift_bridgeObjectRelease(v17, v21);
      swift_bridgeObjectRetain(v19);
      String.hash(into:)(v59, v18, v19);
      swift_bridgeObjectRelease(v19, v22);
      v23 = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v2 + 32);
      v26 = v23 & ~v25;
      if (((*(_QWORD *)&v7[(v26 >> 3) & 0xFFFFFFFFFFFFF8] >> v26) & 1) != 0)
        break;
LABEL_36:
      swift_bridgeObjectRelease(v19, v24);
      swift_bridgeObjectRelease(v17, v35);

      v9 = v57;
      v2 = v58;
      v8 = v53;
      v6 = v56;
      if (v56)
        goto LABEL_6;
LABEL_7:
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_46;
      }
      if (v11 >= v52)
        goto LABEL_44;
      v12 = *(_QWORD *)(v54 + 8 * v11);
      v13 = v9 + 1;
      if (!v12)
      {
        v13 = v9 + 2;
        if (v9 + 2 >= v52)
          goto LABEL_44;
        v12 = *(_QWORD *)(v54 + 8 * v13);
        if (!v12)
        {
          v13 = v9 + 3;
          if (v9 + 3 >= v52)
            goto LABEL_44;
          v12 = *(_QWORD *)(v54 + 8 * v13);
          if (!v12)
          {
            v13 = v9 + 4;
            if (v9 + 4 >= v52)
              goto LABEL_44;
            v12 = *(_QWORD *)(v54 + 8 * v13);
            if (!v12)
            {
              v14 = v9 + 5;
              if (v9 + 5 >= v52)
              {
LABEL_44:
                sub_10016CA2C(v8);
                return (void *)v2;
              }
              v12 = *(_QWORD *)(v54 + 8 * v14);
              if (!v12)
              {
                while (1)
                {
                  v13 = v14 + 1;
                  if (__OFADD__(v14, 1))
                    break;
                  if (v13 >= v52)
                    goto LABEL_44;
                  v12 = *(_QWORD *)(v54 + 8 * v13);
                  ++v14;
                  if (v12)
                    goto LABEL_22;
                }
LABEL_46:
                __break(1u);
              }
              v13 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      v56 = (v12 - 1) & v12;
      v57 = v13;
    }
    v27 = ~v25;
    v28 = *(_QWORD *)(v58 + 48);
    while (1)
    {
      v29 = (_QWORD *)(v28 + 40 * v26);
      v30 = v29[1];
      v32 = v29[2];
      v31 = v29[3];
      v33 = *v29 == v16 && v30 == v17;
      if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v29, v30, v16, v17, 0) & 1) != 0)
      {
        v34 = v32 == v18 && v31 == v19;
        if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, v18, v19, 0) & 1) != 0)
          break;
      }
      v26 = (v26 + 1) & v27;
      if (((*(_QWORD *)&v7[(v26 >> 3) & 0xFFFFFFFFFFFFF8] >> v26) & 1) == 0)
        goto LABEL_36;
    }
    v60[0] = v53;
    v60[1] = v54;
    v60[2] = v51;
    v60[3] = v57;
    v60[4] = v56;

    swift_bridgeObjectRelease(v19, v36);
    isStackAllocationSafe = swift_bridgeObjectRelease(v17, v37);
    v39 = v58;
    v40 = *(_BYTE *)(v58 + 32);
    v41 = v40 & 0x3F;
    v42 = (1 << v40) + 63;
    v43 = v42 >> 6;
    v44 = 8 * (v42 >> 6);
    if (v41 <= 0xD
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v42 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v50 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v44);
      sub_100175D14((unint64_t *)((char *)&v50 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v39, v26, v60);
      v46 = v45;
      swift_release(v39);
      sub_10016CA2C(v60[0]);
      return (void *)v46;
    }
    else
    {
      v47 = (void *)swift_slowAlloc(v44, -1);
      memcpy(v47, v7, v44);
      sub_100175D14((unint64_t *)v47, v43, v58, v26, v60);
      v2 = v48;
      swift_release(v58);
      sub_10016CA2C(v60[0]);
      swift_slowDealloc(v47, -1, -1);
    }
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  return (void *)v2;
}

void sub_100175D14(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  _QWORD *v44;
  id v46;
  _QWORD v47[9];
  uint64_t v48;

  v5 = a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v7 = v6 - 1;
  v48 = a3 + 56;
  v44 = a5;
  while (2)
  {
    v42 = v7;
    do
    {
      while (1)
      {
        v8 = a5[3];
        v9 = a5[4];
        if (v9)
        {
          v10 = (v9 - 1) & v9;
          v11 = __clz(__rbit64(v9)) | (v8 << 6);
          goto LABEL_21;
        }
        v12 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          goto LABEL_45;
        }
        v13 = (unint64_t)(a5[2] + 64) >> 6;
        if (v12 >= v13)
          goto LABEL_43;
        v14 = a5[1];
        v15 = *(_QWORD *)(v14 + 8 * v12);
        if (!v15)
        {
          if (v8 + 2 >= v13)
          {
            ++v8;
          }
          else
          {
            v15 = *(_QWORD *)(v14 + 8 * (v8 + 2));
            if (v15)
            {
              v12 = v8 + 2;
              goto LABEL_20;
            }
            if (v8 + 3 >= v13)
            {
              v8 += 2;
            }
            else
            {
              v15 = *(_QWORD *)(v14 + 8 * (v8 + 3));
              if (v15)
              {
                v12 = v8 + 3;
                goto LABEL_20;
              }
              v12 = v8 + 4;
              if (v8 + 4 >= v13)
              {
                v8 += 3;
              }
              else
              {
                v15 = *(_QWORD *)(v14 + 8 * v12);
                if (v15)
                  goto LABEL_20;
                v16 = v8 + 5;
                while (v16 < v13)
                {
                  v15 = *(_QWORD *)(v14 + 8 * v16++);
                  if (v15)
                  {
                    v12 = v16 - 1;
                    goto LABEL_20;
                  }
                }
                v8 = v13 - 1;
              }
            }
          }
LABEL_43:
          a5[3] = v8;
          a5[4] = 0;
          swift_retain(v5);
          sub_100176048(a1, a2, v42, v5);
          return;
        }
LABEL_20:
        v10 = (v15 - 1) & v15;
        v11 = __clz(__rbit64(v15)) + (v12 << 6);
        v8 = v12;
LABEL_21:
        v17 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 40 * v11);
        v18 = *v17;
        v19 = v17[1];
        v20 = v17[2];
        v21 = v17[3];
        v22 = (void *)v17[4];
        a5[3] = v8;
        a5[4] = v10;
        Hasher.init(_seed:)(v47, *(_QWORD *)(v5 + 40));
        v46 = v22;
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v21);
        String.hash(into:)(v47, v18, v19);
        swift_bridgeObjectRetain(v21);
        String.hash(into:)(v47, v20, v21);
        swift_bridgeObjectRelease(v21, v23);
        v24 = Hasher._finalize()();
        v26 = -1 << *(_BYTE *)(v5 + 32);
        v27 = v24 & ~v26;
        if (((*(_QWORD *)(v48 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) != 0)
          break;
LABEL_34:
        swift_bridgeObjectRelease(v21, v25);
        swift_bridgeObjectRelease(v19, v36);

        a5 = v44;
        v5 = a3;
      }
      v28 = ~v26;
      v29 = *(_QWORD *)(v5 + 48);
      while (1)
      {
        v30 = (_QWORD *)(v29 + 40 * v27);
        v31 = v30[1];
        v32 = v30[2];
        v33 = v30[3];
        v34 = *v30 == v18 && v31 == v19;
        if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v30, v31, v18, v19, 0) & 1) != 0)
        {
          v35 = v32 == v20 && v33 == v21;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v20, v21, 0) & 1) != 0)
            break;
        }
        v27 = (v27 + 1) & v28;
        if (((*(_QWORD *)(v48 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
          goto LABEL_34;
      }

      swift_bridgeObjectRelease(v21, v37);
      swift_bridgeObjectRelease(v19, v38);
      v39 = (v27 >> 3) & 0x1FFFFFFFFFFFFFF8;
      a5 = v44;
      v40 = *(unint64_t *)((char *)a1 + v39);
      *(unint64_t *)((char *)a1 + v39) = v40 & ~(1 << v27);
      v5 = a3;
    }
    while ((v40 & (1 << v27)) == 0);
    v7 = v42 - 1;
    if (__OFSUB__(v42, 1))
    {
LABEL_45:
      __break(1u);
      return;
    }
    if (v42 != 1)
      continue;
    break;
  }
}

Swift::Int sub_100176048(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100161BD0(&qword_100315050);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v37 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  v39 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v40 = v10;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v37)
      goto LABEL_35;
    v15 = a1[v14];
    v16 = v10 + 1;
    if (!v15)
    {
      v16 = v10 + 2;
      if (v10 + 2 >= v37)
        goto LABEL_35;
      v15 = a1[v16];
      if (!v15)
      {
        v16 = v10 + 3;
        if (v10 + 3 >= v37)
          goto LABEL_35;
        v15 = a1[v16];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v40 = v16;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 40 * v13);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    v23 = (void *)v18[4];
    Hasher.init(_seed:)(v41, v8[5]);
    v24 = v23;
    swift_bridgeObjectRetain_n(v20, 2);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v41, v19, v20);
    swift_bridgeObjectRelease(v20, v25);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v41, v21, v22);
    swift_bridgeObjectRelease(v22, v26);
    result = Hasher._finalize()();
    v27 = -1 << *((_BYTE *)v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6))) == 0)
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v27) >> 6;
      while (++v29 != v32 || (v31 & 1) == 0)
      {
        v33 = v29 == v32;
        if (v29 == v32)
          v29 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v11 + 8 * v29);
        if (v34 != -1)
        {
          v30 = __clz(__rbit64(~v34)) + (v29 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v35 = (_QWORD *)(v8[6] + 40 * v30);
    *v35 = v19;
    v35[1] = v20;
    v35[2] = v21;
    v35[3] = v22;
    v35[4] = v23;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    v4 = v39;
    v10 = v40;
    if (!v5)
      goto LABEL_35;
  }
  v17 = v10 + 4;
  if (v10 + 4 >= v37)
    goto LABEL_35;
  v15 = a1[v17];
  if (v15)
  {
    v16 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v37)
      goto LABEL_35;
    v15 = a1[v16];
    ++v17;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100176334(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1, v19);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0)
      v20 = *v1;
    else
      v20 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v4, v21);
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_30;
  }
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1, v10);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    result = sub_1001877E8(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v13 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v22 = v4;
    else
      v22 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v4, v23);
  }
  if (v13 < 1)
    goto LABEL_20;
  v14 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_20:
    v17 = swift_bridgeObjectRelease(result, v12);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

void sub_1001764E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v5 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    sub_1001725F8((uint64_t)isUniquelyReferenced_nonNull_native, v9, 1, v3, &qword_100314F48, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))sub_100172A7C, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))sub_100172E1C);
    v3 = (uint64_t)isUniquelyReferenced_nonNull_native;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v10 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  isUniquelyReferenced_nonNull_native = sub_100173298((char *)(a1 + 32), v2, (char *)(v3 + 8 * v10 + 32));
  if (!v2)
  {
LABEL_14:
    sub_1001648C4((uint64_t)isUniquelyReferenced_nonNull_native, v8);
    *v1 = v3;
    return;
  }
  v11 = *(_QWORD *)(v3 + 16);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *(_QWORD *)(v3 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void sub_1001765D4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100176C94();
  *v0 = v1;
  sub_100176CF4();
  v1[4] = sub_100176674(v2, v3, v4);
  sub_1000BA184();
}

void sub_100176610()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100176C94();
  *v0 = v1;
  sub_100176CF4();
  v1[4] = sub_100176728(v2, v3, v4);
  sub_1000BA184();
}

void sub_100176648(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_100176674(_QWORD *a1, uint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v6;
  id v7;

  v6 = a3 & 0xC000000000000001;
  sub_100192460(a2, (a3 & 0xC000000000000001) == 0);
  if (v6)
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  else
    v7 = *(id *)(a3 + 8 * a2 + 32);
  *a1 = v7;
  return sub_1001766E0;
}

void sub_1001766E0(id *a1)
{

}

uint64_t type metadata accessor for ScopedIDsBatchRequest()
{
  return objc_opt_self(GKScopedIDsBatchRequest);
}

uint64_t type metadata accessor for ScopedIDsUtils()
{
  return objc_opt_self(GKScopedIDsUtils);
}

void (*sub_100176728(_QWORD *a1, uint64_t a2, uint64_t a3))(id *)
{
  unint64_t v6;
  id v7;

  v6 = a3 & 0xC000000000000001;
  sub_100192460(a2, (a3 & 0xC000000000000001) == 0);
  if (v6)
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  else
    v7 = *(id *)(a3 + 8 * a2 + 32);
  *a1 = v7;
  return sub_100176BAC;
}

uint64_t sub_100176794(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result, a2);
  return result;
}

uint64_t sub_1001767A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_100315058);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001767E8(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

id *sub_100176810(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

uint64_t sub_100176838(uint64_t a1)
{
  sub_100176868(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32));
  return a1;
}

void sub_100176868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6;

  if (a2)
  {
    swift_bridgeObjectRelease(a2, a2);
    swift_bridgeObjectRelease(a4, v6);

  }
}

uint64_t sub_1001768AC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8), a2);
  return a1;
}

id *sub_1001768D4(id *a1)
{

  return a1;
}

unint64_t sub_1001768FC()
{
  unint64_t result;

  result = qword_100315060;
  if (!qword_100315060)
  {
    result = swift_getWitnessTable(&unk_100232E90, &type metadata for PlayerAndGameID);
    atomic_store(result, (unint64_t *)&qword_100315060);
  }
  return result;
}

uint64_t sub_100176938(int64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t result;
  BOOL v5;
  BOOL v6;

  result = 0;
  while (1)
  {
    v5 = a1 <= a2;
    if (a3 > 0)
      v5 = a1 >= a2;
    if (v5)
      break;
    v6 = __OFADD__(a1, a3);
    a1 += a3;
    if (v6)
      a1 = (a1 >> 63) ^ 0x8000000000000000;
    v6 = __OFADD__(result++, 1);
    if (v6)
    {
      __break(1u);
      return result;
    }
  }
  return result;
}

void destroy for PlayerAndGameID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8), a2);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24), v3);

}

_QWORD *initializeWithCopy for PlayerAndGameID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v6 = v5;
  return a1;
}

_QWORD *assignWithCopy for PlayerAndGameID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6);
  a1[2] = a2[2];
  v7 = a2[3];
  v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8, v9);
  v10 = (void *)a1[4];
  v11 = (void *)a2[4];
  a1[4] = v11;
  v12 = v11;

  return a1;
}

_QWORD *assignWithTake for PlayerAndGameID(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5, a2);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3], v6);
  v7 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for PlayerAndGameID(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayerAndGameID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayerAndGameID()
{
  return &type metadata for PlayerAndGameID;
}

unint64_t sub_100176B6C()
{
  unint64_t result;

  result = qword_100315080;
  if (!qword_100315080)
  {
    result = swift_getWitnessTable(&unk_100232E68, &type metadata for PlayerAndGameID);
    atomic_store(result, (unint64_t *)&qword_100315080);
  }
  return result;
}

uint64_t sub_100176BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25);
}

void *sub_100176BC8@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_100176C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, a2 + 32, 7);
}

uint64_t sub_100176C14()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100176C1C(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_100176C2C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100176C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, 36, 2, a7, 17);
}

uint64_t sub_100176C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

void *sub_100176C94()
{
  return malloc(0x28uLL);
}

uint64_t sub_100176CA8()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100176CCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + a1));
}

uint64_t sub_100176CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_100161BD0(a5);
}

uint64_t sub_100176CDC()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100176D00()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100176D14(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1001737EC(a1, v1, v2);
}

char *sub_100176D20(uint64_t a1, int64_t a2)
{
  return sub_100173480(0, a2, 0);
}

Swift::Int sub_100176D54()
{
  return Hasher._finalize()();
}

uint64_t sub_100176D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t ObjectType;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  _QWORD v65[4];
  uint64_t v66;

  v62 = a2;
  v3 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v3);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NWBrowser.Result(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v59 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v53 - v11;
  v60 = v13;
  __chkstk_darwin(v10);
  v58 = (char *)&v53 - v14;
  v15 = *(_QWORD *)(a1 + 56);
  v54 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v55 = (unint64_t)(v16 + 63) >> 6;
  v63 = a1;
  result = swift_bridgeObjectRetain(a1);
  v20 = 0;
  v56 = v12;
  v57 = (char *)&type metadata for () + 8;
  v61 = v7;
  if (!v18)
    goto LABEL_5;
LABEL_4:
  v66 = (v18 - 1) & v18;
  v64 = v20;
  for (i = __clz(__rbit64(v18)) | (v20 << 6); ; i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    v27 = v58;
    v26(v58, *(_QWORD *)(v63 + 48) + *(_QWORD *)(v7 + 72) * i, v6);
    v28 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v28(v12, v27, v6);
    v29 = type metadata accessor for TaskPriority(0);
    sub_100161B54((uint64_t)v5, 1, 1, v29);
    v30 = v59;
    v26(v59, (unint64_t)v12, v6);
    sub_1001809F0(&qword_100315218, v31, (uint64_t (*)(uint64_t))type metadata accessor for PeerDiscovery, (uint64_t)&protocol conformance descriptor for PeerDiscovery);
    v32 = v6;
    v34 = v33;
    v35 = *(unsigned __int8 *)(v7 + 80);
    v36 = (v35 + 40) & ~v35;
    v37 = (char *)swift_allocObject(&unk_1002C5E10, v36 + v60, v35 | 7);
    v38 = (uint64_t)v5;
    v39 = v62;
    *((_QWORD *)v37 + 2) = v62;
    *((_QWORD *)v37 + 3) = v34;
    v6 = v32;
    *((_QWORD *)v37 + 4) = v39;
    v28(&v37[v36], v30, v32);
    v40 = sub_10016445C(v38, 1, v29);
    v41 = swift_retain_n(v39, 2);
    if (v40 == 1)
    {
      sub_100180B34(v38, &qword_100314CE8);
      v42 = 0;
    }
    else
    {
      v43 = TaskPriority.rawValue.getter(v41);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v38, v29);
      v42 = v43;
    }
    v5 = (char *)v38;
    v12 = v56;
    v20 = v64;
    v44 = *((_QWORD *)v37 + 2);
    if (v44)
    {
      v45 = *((_QWORD *)v37 + 3);
      ObjectType = swift_getObjectType(*((_QWORD *)v37 + 2));
      swift_unknownObjectRetain(v44);
      v47 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v45);
      v49 = v48;
      swift_unknownObjectRelease(v44);
    }
    else
    {
      v47 = 0;
      v49 = 0;
    }
    v50 = swift_allocObject(&unk_1002C5E38, 32, 7);
    *(_QWORD *)(v50 + 16) = &unk_100315220;
    *(_QWORD *)(v50 + 24) = v37;
    if (v49 | v47)
    {
      v65[0] = 0;
      v65[1] = 0;
      v51 = v65;
      v65[2] = v47;
      v65[3] = v49;
    }
    else
    {
      v51 = 0;
    }
    v7 = v61;
    v52 = swift_task_create(v42 | 0x1C00, v51, v57, &unk_100315228, v50);
    swift_release(v52);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    v18 = v66;
    if (v66)
      goto LABEL_4;
LABEL_5:
    v22 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v22 >= v55)
      goto LABEL_32;
    v23 = *(_QWORD *)(v54 + 8 * v22);
    v24 = v20 + 1;
    if (!v23)
    {
      v24 = v20 + 2;
      if (v20 + 2 >= v55)
        goto LABEL_32;
      v23 = *(_QWORD *)(v54 + 8 * v24);
      if (!v23)
      {
        v24 = v20 + 3;
        if (v20 + 3 >= v55)
          goto LABEL_32;
        v23 = *(_QWORD *)(v54 + 8 * v24);
        if (!v23)
        {
          v24 = v20 + 4;
          if (v20 + 4 >= v55)
            goto LABEL_32;
          v23 = *(_QWORD *)(v54 + 8 * v24);
          if (!v23)
            break;
        }
      }
    }
LABEL_20:
    v66 = (v23 - 1) & v23;
    v64 = v24;
  }
  v25 = v20 + 5;
  if (v20 + 5 >= v55)
  {
LABEL_32:
    swift_release(v62);
    return swift_release(v63);
  }
  v23 = *(_QWORD *)(v54 + 8 * v25);
  if (v23)
  {
    v24 = v20 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v55)
      goto LABEL_32;
    v23 = *(_QWORD *)(v54 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
  return result;
}

void sub_1001771DC(uint64_t a1, unint64_t a2)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t inited;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v5 = sub_100161BD0(&qword_100315198);
  inited = swift_initStackObject(v5, &v17);
  *(_OWORD *)(inited + 16) = xmmword_100232ED0;
  v7 = v2[1];
  v21 = *v2;
  v8 = v21;
  v22 = v7;
  *(_OWORD *)(inited + 48) = v7;
  *(_OWORD *)(inited + 96) = v8;
  v20 = v2[2];
  *(_OWORD *)(inited + 192) = v20;
  *(_QWORD *)(inited + 32) = 101;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  sub_100181760();
  *(_QWORD *)(v9 + 72) = &type metadata for String;
  *(_QWORD *)(v9 + 80) = v10;
  *(_QWORD *)(v9 + 88) = 0xE800000000000000;
  *(_QWORD *)(v9 + 120) = &type metadata for String;
  *(_QWORD *)(v9 + 128) = 0x7550656369766564;
  *(_QWORD *)(v9 + 136) = 0xEF6E656B6F546873;
  *(_QWORD *)(v9 + 144) = a1;
  *(_QWORD *)(v9 + 152) = a2;
  *(_QWORD *)(v9 + 168) = &type metadata for Data;
  *(_QWORD *)(v9 + 176) = 104;
  *(_QWORD *)(v9 + 184) = v11;
  *(_QWORD *)(v9 + 216) = &type metadata for String;
  *(_QWORD *)(v9 + 224) = 28776;
  *(_QWORD *)(v9 + 232) = 0xE200000000000000;
  *(_OWORD *)(v9 + 240) = v12;
  *(_QWORD *)(v9 + 264) = &type metadata for String;
  *(_QWORD *)(v9 + 272) = 0x4449726579616C70;
  *(_QWORD *)(v9 + 280) = 0xE800000000000000;
  v18 = v2[4];
  v19 = v12;
  *(_OWORD *)(v9 + 288) = v18;
  *(_QWORD *)(v9 + 312) = &type metadata for String;
  *(_QWORD *)(v9 + 320) = 0xD000000000000010;
  *(_QWORD *)(v9 + 328) = 0x8000000100298A00;
  *(_QWORD *)(v9 + 360) = &type metadata for Bool;
  *(_BYTE *)(v9 + 336) = 1;
  sub_1001767E8((uint64_t)&v22);
  sub_1001767E8((uint64_t)&v21);
  sub_100170728(a1, a2);
  sub_1001767E8((uint64_t)&v20);
  sub_1001767E8((uint64_t)&v19);
  sub_1001767E8((uint64_t)&v18);
  v13 = sub_1001811E0();
  Dictionary.init(dictionaryLiteral:)(v13, v14, v15, v16);
  sub_100176BF8();
}

void PeerDiscovery.__allocating_init(delegate:localPlayerID:localPushToken:)()
{
  uint64_t v0;

  v0 = sub_1001812B4();
  sub_100181678(v0);
  PeerDiscovery.init(delegate:localPlayerID:localPushToken:)();
  sub_100176BF8();
}

char *PeerDiscovery.init(delegate:localPlayerID:localPushToken:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *ObjectType;
  char *v8;
  objc_super v10;

  v6 = sub_1001812B4();
  ObjectType = (objc_class *)swift_getObjectType(v6);
  swift_defaultActor_initialize(v1);
  sub_1001811C4((uint64_t)(v1 + 14));
  v1[15] = 0;
  v1[16] = 0;
  v1[21] = &_swiftEmptyDictionarySingleton;
  v1[22] = &_swiftEmptyDictionarySingleton;
  v1[23] = &_swiftEmptyDictionarySingleton;
  v1[17] = v4;
  v1[18] = v3;
  v1[19] = v2;
  v1[20] = v0;
  v10.receiver = v1;
  v10.super_class = ObjectType;
  v8 = (char *)objc_msgSendSuper2(&v10, "init");
  swift_unknownObjectWeakAssign(v8 + 112, v5);
  swift_unknownObjectRelease();
  return v8;
}

uint64_t PeerDiscovery.startBrowsing()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[4] = v0;
  v2 = sub_100180D8C();
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = sub_100180C54(v3);
  v1[8] = sub_100180C84();
  sub_100180C8C();
  return sub_10016CF78();
}

#error "1001775C4: call analysis failed (funcsize=165)"

uint64_t sub_1001777D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_100180C8C();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_100177810(uint64_t a1)
{
  uint64_t v1;
  os_log_type_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v3 = *(NSObject **)(v1 + 56);
  static os_log_type_t.info.getter(a1);
  v4 = sub_100165E64();
  v5 = Logger.logObject.getter(v4);
  if (sub_1001810E0(v5))
  {
    v6 = *(_QWORD *)(v1 + 48);
    v7 = (uint8_t *)sub_100165DA4(12);
    v8 = sub_100165DA4(32);
    v21 = v8;
    *(_DWORD *)v7 = 136315138;
    sub_100180E44();
    v10 = sub_10018117C(26, v9, &v21);
    v11 = sub_1001816C8(v10);
    sub_100181220(v11, v12);
    sub_100165E04((void *)&_mh_execute_header, v3, v2, "Nearby - %s", v7);
    sub_100165DFC(v8, v13, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v8);
    sub_100165D98((uint64_t)v7);

    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  }
  else
  {
    v15 = *(_QWORD *)(v1 + 48);

    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
  }
  sub_100181684(v14);
  v16 = *(_QWORD *)(v1 + 32);
  v17 = type metadata accessor for PeerBrowser();
  v18 = sub_100180DD8(v17);
  *(_QWORD *)(v18 + 24) = 0;
  v19 = sub_1001811C4(v18 + 16);
  *(_QWORD *)(v18 + 24) = &off_1002C5C58;
  *(_QWORD *)(v18 + 32) = 0;
  sub_1001815F0(v19);
  sub_10018174C();
  if (*(_QWORD *)(v16 + 120))
  {
    sub_100165EAC();
    sub_100165274();
    sub_100165E88();
  }
  swift_task_dealloc(*(_QWORD *)(v1 + 64));
  sub_10016D2A8();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t PeerDiscovery.stopBrowsing()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[9] = v0;
  v2 = sub_100180D8C();
  v1[10] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[11] = v3;
  v1[12] = sub_100180CA0(v3);
  sub_100180C8C();
  return sub_10016D26C(v4, v5, v6);
}

uint64_t sub_1001779D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1 + 40;
  v3 = static os_log_type_t.info.getter(a1);
  v4 = sub_100165E64();
  v5 = Logger.logObject.getter(v4);
  v6 = v3;
  if (sub_100180FA4(v5))
  {
    v7 = *(_QWORD *)(v1 + 88);
    v27 = *(_QWORD *)(v1 + 80);
    v28 = *(_QWORD *)(v1 + 96);
    v8 = (uint8_t *)sub_100165DA4(12);
    v9 = v1 + 40;
    v10 = sub_100165DA4(32);
    v29 = v10;
    sub_10018144C(4.8149e-34);
    sub_100180E44();
    *(_QWORD *)(v1 + 64) = sub_10018117C(26, v11, &v29);
    sub_100180F70(v1 + 64, v1 + 72);
    sub_100165E04((void *)&_mh_execute_header, v5, (os_log_type_t)v6, "Nearby - %s", v8);
    sub_100165DFC(v10, v12, (uint64_t)&type metadata for Any + 8);
    v13 = v10;
    v2 = v1 + 40;
    sub_100165D98(v13);
    sub_100165D98((uint64_t)v8);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v28, v27);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 88);
    v15 = *(_QWORD *)(v1 + 96);
    v9 = *(_QWORD *)(v1 + 80);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v9);
  }
  v16 = (uint64_t *)(*(_QWORD *)(v1 + 72) + 184);
  v17 = sub_100180E2C();
  sub_100180CCC(v17, v18, 0);
  v19 = *v16;
  v20 = *v16 + 64;
  sub_100180F78();
  result = sub_10016D21C();
  v22 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  sub_1001813E0();
  while (1)
  {
    sub_100165EAC();
    sub_10019A9B0();
    result = sub_100165E88();
    if (v6)
      goto LABEL_5;
LABEL_6:
    v23 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v23 >= v9)
      goto LABEL_22;
    ++v22;
    if (!*(_QWORD *)(v20 + 8 * v23))
    {
      v22 = v23 + 1;
      if (v23 + 1 >= v9)
        goto LABEL_22;
      if (!*(_QWORD *)(v20 + 8 * v22))
      {
        v22 = v23 + 2;
        if (v23 + 2 >= v9)
          goto LABEL_22;
        if (!*(_QWORD *)(v20 + 8 * v22))
          break;
      }
    }
LABEL_19:
    sub_1001813C8();
  }
  v24 = v23 + 3;
  if (v24 < v9)
  {
    if (!*(_QWORD *)(v20 + 8 * v24))
    {
      while (1)
      {
        v22 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_27;
        if (v22 >= v9)
          goto LABEL_22;
        ++v24;
        if (*(_QWORD *)(v20 + 8 * v22))
          goto LABEL_19;
      }
    }
    v22 = v24;
    goto LABEL_19;
  }
LABEL_22:
  v25 = *(_QWORD *)(v1 + 72);
  swift_release(v19);
  sub_100180CCC((uint64_t)v16, v2, 33);
  sub_100161BD0(&qword_1003150A8);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess(v2);
  if (*(_QWORD *)(v25 + 120))
  {
    sub_100165EAC();
    sub_100165930();
    sub_100165E88();
    v26 = *(_QWORD *)(v25 + 120);
  }
  else
  {
    v26 = 0;
  }
  *(_QWORD *)(v25 + 120) = 0;
  swift_release(v26);
  sub_10016D2A8();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100177C88(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10031509C;
  swift_retain(a2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100180C34;
  return PeerDiscovery.startBrowsing()();
}

uint64_t sub_100177CFC(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1003150A4;
  swift_retain(a2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100177D5C;
  return PeerDiscovery.stopBrowsing()();
}

uint64_t sub_100177D5C()
{
  uint64_t v0;
  uint64_t v1;
  void (**v2)(_QWORD);

  sub_100165E44();
  v2 = *(void (***)(_QWORD))(v1 + 24);
  sub_100165DBC();
  sub_100176CDC();
  v2[2](v2);
  _Block_release(v2);
  return sub_100165E20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t PeerDiscovery.startListening(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_100180D8C();
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = sub_100180C54(v4);
  v2[9] = sub_100180C84();
  sub_100180C8C();
  return sub_10016CF78();
}

uint64_t sub_100177DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  os_log_type_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  sub_100180D94();
  a25 = v29;
  a26 = v30;
  a24 = v26;
  v31 = v26 + 24;
  if (*(_QWORD *)(*(_QWORD *)(v26 + 40) + 128))
  {
    v32 = *(NSObject **)(v26 + 72);
    static os_log_type_t.debug.getter(v30);
    v33 = sub_100165E64();
    v34 = Logger.logObject.getter(v33);
    v35 = sub_1001810F0(v34);
    v36 = *(_QWORD *)(v26 + 72);
    v37 = *(_QWORD *)(v26 + 56);
    if (v35)
    {
      v38 = (uint8_t *)sub_100165DA4(12);
      a14 = sub_100165DA4(32);
      v39 = a14;
      *(_DWORD *)v38 = 136315138;
      sub_100180E44();
      *(_QWORD *)(v26 + 24) = sub_10018117C(47, v40, &a14);
      sub_100180E08(v26 + 24, v26 + 32);
      sub_100165E04((void *)&_mh_execute_header, v32, v27, "Nearby - %s", v38);
      sub_100165DFC(v39, v41, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v39);
      sub_100165D98((uint64_t)v38);
    }

    sub_100181464(v36, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
    v57 = (_QWORD *)swift_task_alloc(dword_1003150BC);
    *(_QWORD *)(v26 + 80) = v57;
    *v57 = v26;
    v57[1] = sub_100178138;
    sub_100180EB8();
    return PeerDiscovery.stopListening()();
  }
  else
  {
    v42 = *(_QWORD *)(v26 + 32);
    static os_log_type_t.info.getter(v30);
    sub_100181518();
    sub_1001817B4();
    sub_1001814A8(0xD000000000000032, (uint64_t)"Factory starting listening. Local discovery info: ");
    v43._countAndFlagsBits = sub_1001817A0(v42, (uint64_t)&type metadata for String);
    String.append(_:)(v43);
    sub_10016D110(v44, v45);
    v47 = a14;
    v46 = a15;
    sub_100180F60();
    sub_100170814(v46);
    v48 = sub_100170824();
    v49 = sub_100180D2C(v48);
    v51 = *(_QWORD *)(v26 + 56);
    v50 = *(_QWORD *)(v26 + 64);
    v52 = *(_QWORD *)(v26 + 48);
    if (v49)
    {
      v64 = *(_QWORD *)(v26 + 56);
      v51 = sub_100165DA4(12);
      v63 = v50;
      v50 = sub_100165DA4(32);
      a14 = v50;
      v62 = v52;
      v52 = v26 + 24;
      *(_DWORD *)v51 = 136315138;
      v31 = v51 + 12;
      sub_100176C14();
      *(_QWORD *)(v26 + 16) = sub_100181364(v47, v53, &a14);
      sub_100181220(v26 + 16, v26 + 24);
      sub_100170848(v46);
      sub_100165E04((void *)&_mh_execute_header, v48, v28, "Nearby - %s", (uint8_t *)v51);
      sub_100165DFC(v50, v54, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v50);
      sub_100165D98(v51);

      v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v63, v62);
    }
    else
    {

      sub_10017081C(v46);
      v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    }
    sub_10016D110(v55, v56);
    v59 = sub_100181324();
    v60 = (_QWORD *)sub_100163AE8(v59, 80);
    v60[3] = 0;
    v61 = sub_1001811C4((uint64_t)(v60 + 2));
    v60[5] = v50;
    v60[6] = v46;
    v60[7] = v51;
    v60[8] = v31;
    v60[9] = v48;
    sub_10018172C(v61, (uint64_t)&off_1002C5C70);
    sub_10018110C();
    sub_10018110C();
    sub_10016D290();
    sub_10016D5D8();
    sub_1001A9518();
    sub_1001816BC();
    sub_1001816E8();
    if (*(_QWORD *)(v52 + 128))
    {
      sub_100165EAC();
      sub_1001A8A68();
      sub_100165E88();
    }
    swift_task_dealloc(*(_QWORD *)(v26 + 72));
    sub_10016D2A8();
    return sub_100180C68(*(uint64_t (**)(void))(v26 + 8));
  }
}

uint64_t sub_100178138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_100180C8C();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_100178170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;

  sub_100180CB0();
  a23 = v26;
  a24 = v27;
  a22 = v25;
  v28 = *(_QWORD *)(v25 + 32);
  static os_log_type_t.info.getter(v27);
  sub_100181644();
  sub_1001817B4();
  sub_100181174(50, 0x8000000100298260);
  v55._countAndFlagsBits = sub_1001817A0(v28, (uint64_t)&type metadata for String);
  sub_100180DBC(v55);
  sub_1001648C4(v29, v30);
  v32 = a12;
  v31 = a13;
  sub_100181310();
  sub_100170814(v31);
  v33 = sub_100181308();
  v34 = v24;
  if (sub_100180D84(v33))
  {
    v35 = *(_QWORD *)(v25 + 56);
    v53 = *(_QWORD *)(v25 + 48);
    v54 = *(_QWORD *)(v25 + 64);
    v36 = (uint8_t *)sub_100165DA4(12);
    v37 = sub_100165DA4(32);
    a12 = v37;
    *(_DWORD *)v36 = 136315138;
    v38 = v36 + 4;
    sub_1001621A4();
    v40 = sub_100180E10(v32, v39, &a12);
    v41 = sub_1001816C8(v40);
    sub_100180F70(v41, v42);
    sub_100170848(v31);
    sub_100165E04((void *)&_mh_execute_header, v33, v34, "Nearby - %s", v36);
    sub_100165DFC(v37, v43, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v37);
    sub_100165D98((uint64_t)v36);

    v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v54, v53);
  }
  else
  {
    v36 = *(uint8_t **)(v25 + 56);
    v38 = *(uint8_t **)(v25 + 64);
    v35 = *(_QWORD *)(v25 + 48);

    sub_10017081C(v31);
    v46 = sub_100180E2C();
    v44 = v48(v46, v47);
  }
  sub_1001648C4(v44, v45);
  v49 = sub_100181324();
  v50 = (_QWORD *)sub_100163AE8(v49, 80);
  v50[3] = 0;
  v51 = sub_1001811C4((uint64_t)(v50 + 2));
  v50[5] = v33;
  v50[6] = v38;
  v50[7] = v35;
  v50[8] = v32;
  v50[9] = v36;
  sub_10018172C(v51, (uint64_t)&off_1002C5C70);
  sub_10018110C();
  sub_10018110C();
  sub_10016D290();
  sub_10016D5D8();
  sub_1001A9518();
  sub_1001816BC();
  sub_1001816E8();
  if (*(_QWORD *)(v31 + 128))
  {
    sub_100165EAC();
    sub_1001A8A68();
    sub_100165E88();
  }
  swift_task_dealloc(*(_QWORD *)(v25 + 72));
  sub_10016D2A8();
  return sub_100180C38(*(uint64_t (**)(void))(v25 + 8));
}

uint64_t PeerDiscovery.stopListening()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[15] = v0;
  v2 = sub_100161BD0(&qword_1003150C0);
  v1[16] = sub_100180C54(*(_QWORD *)(v2 - 8));
  v1[17] = sub_100180C84();
  v3 = sub_100180D8C();
  v1[18] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[19] = v4;
  v1[20] = sub_100180CA0(v4);
  sub_100180C8C();
  return sub_10016CF78();
}

uint64_t sub_1001783C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t result;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  sub_100180D94();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  v29 = static os_log_type_t.info.getter(v28);
  v30 = sub_100165E64();
  v31 = Logger.logObject.getter(v30);
  v32 = v29;
  if (sub_1001812AC(v31))
  {
    v33 = *(_QWORD *)(v26 + 152);
    v72 = *(_QWORD *)(v26 + 160);
    v34 = (uint8_t *)sub_100165DA4(12);
    v35 = sub_100165DA4(32);
    a15 = v35;
    *(_DWORD *)v34 = 136315138;
    *(_QWORD *)(v26 + 112) = sub_10018117C(27, 0x80000001002982D0, &a15);
    sub_100180E08(v26 + 112, v26 + 120);
    sub_100165E04((void *)&_mh_execute_header, v31, v32, "Nearby - %s", v34);
    sub_100165DFC(v35, v36, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v35);
    sub_100165D98((uint64_t)v34);

    v37 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
    v38 = v72;
  }
  else
  {
    v39 = *(_QWORD *)(v26 + 152);
    v40 = *(_QWORD *)(v26 + 160);

    v37 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8);
    v38 = v40;
  }
  sub_100181338(v38, v37);
  v71 = *(_QWORD *)(v26 + 120) + 168;
  sub_100180CCC(v71, v26 + 16, 0);
  v41 = *(_QWORD *)v71;
  v73 = *(_QWORD *)v71 + 64;
  v42 = -1;
  v43 = -1 << *(_BYTE *)(*(_QWORD *)v71 + 32);
  if (-v43 < 64)
    v42 = ~(-1 << -(char)v43);
  v44 = v42 & *(_QWORD *)(*(_QWORD *)v71 + 64);
  v45 = (unint64_t)(63 - v43) >> 6;
  result = sub_1001812EC();
  v47 = 0;
  if (!v44)
    goto LABEL_9;
LABEL_7:
  v48 = __clz(__rbit64(v44));
  v44 &= v44 - 1;
  v49 = v48 | (v47 << 6);
LABEL_8:
  v50 = *(_QWORD *)(v26 + 128);
  v51 = *(_QWORD *)(v41 + 48);
  v52 = sub_1001815F8();
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51 + *(_QWORD *)(*(_QWORD *)(v52 - 8) + 72) * v49, v52);
  v53 = *(_QWORD *)(v41 + 56);
  v54 = sub_100181550();
  *(_QWORD *)(v50 + *(int *)(v54 + 48)) = *(_QWORD *)(v53 + 8 * v49);
  sub_100161B54(v50, 0, 1, v54);
  sub_100165E90();
  while (1)
  {
    v60 = *(_QWORD *)(v26 + 136);
    sub_10018075C(*(_QWORD *)(v26 + 128), v60, &qword_1003150C0);
    v61 = sub_100181550();
    if (sub_10016445C(v60, 1, v61) == 1)
      break;
    sub_10019A9B0();
    sub_100165E88();
    v62 = sub_1001815F8();
    result = sub_100180CE4(v62);
    if (v44)
      goto LABEL_7;
LABEL_9:
    v55 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v55 < v45)
    {
      v56 = *(_QWORD *)(v73 + 8 * v55);
      if (v56)
        goto LABEL_12;
      v57 = v47 + 2;
      ++v47;
      if (v55 + 1 < v45)
      {
        v56 = *(_QWORD *)(v73 + 8 * v57);
        if (v56)
          goto LABEL_15;
        v47 = v55 + 1;
        if (v55 + 2 < v45)
        {
          v56 = *(_QWORD *)(v73 + 8 * (v55 + 2));
          if (v56)
          {
            v55 += 2;
            goto LABEL_12;
          }
          v57 = v55 + 3;
          v47 = v55 + 2;
          if (v55 + 3 < v45)
          {
            v56 = *(_QWORD *)(v73 + 8 * v57);
            if (!v56)
            {
              while (1)
              {
                v55 = v57 + 1;
                if (__OFADD__(v57, 1))
                  goto LABEL_55;
                if (v55 >= v45)
                {
                  v47 = v45 - 1;
                  goto LABEL_26;
                }
                v56 = *(_QWORD *)(v73 + 8 * v55);
                ++v57;
                if (v56)
                  goto LABEL_12;
              }
            }
LABEL_15:
            v55 = v57;
LABEL_12:
            v44 = (v56 - 1) & v56;
            v49 = __clz(__rbit64(v56)) + (v55 << 6);
            v47 = v55;
            goto LABEL_8;
          }
        }
      }
    }
LABEL_26:
    v58 = *(_QWORD *)(v26 + 128);
    v59 = sub_100181550();
    sub_100161B54(v58, 1, 1, v59);
    v44 = 0;
  }
  v63 = *(_QWORD *)(v26 + 120);
  sub_1001816A4();
  sub_100180CCC(v71, v26 + 40, 33);
  sub_100161BD0(&qword_1003150D0);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  sub_1001812F4();
  v64 = v63 + 176;
  sub_100180CCC(v63 + 176, v26 + 64, 0);
  v65 = *(_QWORD *)(v63 + 176) + 64;
  sub_100180F78();
  result = sub_100176C14();
  v66 = 0;
  if (!&unk_1003150C8)
    goto LABEL_32;
LABEL_31:
  sub_1001813E0();
  while (1)
  {
    sub_100165EAC();
    sub_10019A9B0();
    result = sub_100165E88();
    if (&unk_1003150C8)
      goto LABEL_31;
LABEL_32:
    v67 = v66 + 1;
    if (__OFADD__(v66, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    if (v67 >= v44)
    {
LABEL_48:
      v69 = *(_QWORD *)(v26 + 120);
      sub_1001816B4();
      sub_100180CCC(v64, v26 + 88, 33);
      sub_100161BD0(&qword_1003150A8);
      Dictionary._Variant.removeAll(keepingCapacity:)(0);
      sub_100181690();
      if (*(_QWORD *)(v69 + 128))
      {
        sub_100165EAC();
        sub_1001A8E80();
        sub_100165E88();
        v70 = *(_QWORD *)(v69 + 128);
      }
      else
      {
        v70 = 0;
      }
      *(_QWORD *)(v69 + 128) = 0;
      swift_release(v70);
      sub_10016D2A8();
      sub_100180C98();
      sub_100180D6C();
      return sub_100180C68(*(uint64_t (**)(void))(v26 + 8));
    }
    ++v66;
    if (!*(_QWORD *)(v65 + 8 * v67))
    {
      v66 = v67 + 1;
      if (v67 + 1 >= v44)
        goto LABEL_48;
      if (!*(_QWORD *)(v65 + 8 * v66))
      {
        v66 = v67 + 2;
        if (v67 + 2 >= v44)
          goto LABEL_48;
        if (!*(_QWORD *)(v65 + 8 * v66))
          break;
      }
    }
LABEL_45:
    sub_1001813C8();
  }
  v68 = v67 + 3;
  if (v68 >= v44)
    goto LABEL_48;
  if (*(_QWORD *)(v65 + 8 * v68))
  {
    v66 = v68;
    goto LABEL_45;
  }
  while (1)
  {
    v66 = v68 + 1;
    if (__OFADD__(v68, 1))
      break;
    if (v66 >= v44)
      goto LABEL_48;
    ++v68;
    if (*(_QWORD *)(v65 + 8 * v66))
      goto LABEL_45;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_100178924(uint64_t a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String, &type metadata for String, &protocol witness table for String);
  v3[4] = v6;
  v7 = dword_1003150B4;
  swift_retain(a3);
  v8 = (_QWORD *)swift_task_alloc(v7);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1001789BC;
  return PeerDiscovery.startListening(_:)(v6);
}

uint64_t sub_1001789BC()
{
  uint64_t v0;
  uint64_t v1;
  void (**v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  sub_100165E44();
  v2 = *(void (***)(_QWORD))(v1 + 24);
  v3 = sub_100165DBC();
  sub_10016D13C(v3, v4);
  sub_1001816B4();
  v2[2](v2);
  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100178A2C(uint64_t a1, int a2, void *aBlock, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = _Block_copy(aBlock);
  v7 = sub_100163AE8(a4, 32);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = a1;
  swift_retain(a1);
  v8 = sub_100181100();
  sub_1001C15C4(v8, v9);
}

uint64_t sub_100178A84(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1003150BC;
  swift_retain(a2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100180C34;
  return PeerDiscovery.stopListening()();
}

uint64_t PeerDiscovery.sendDataToParticipant(_:deviceID:data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[15] = a6;
  v7[16] = v6;
  v7[13] = a4;
  v7[14] = a5;
  v7[11] = a2;
  v7[12] = a3;
  v7[10] = a1;
  v8 = sub_100180D8C();
  v7[17] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[18] = v9;
  v7[19] = sub_100180C54(v9);
  v7[20] = sub_100180C84();
  sub_100180C8C();
  return sub_10016CF78();
}

uint64_t sub_100178B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  NSObject *v60;
  BOOL v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t (*v74)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;

  sub_100180D94();
  v19 = v18[12];
  sub_100180CCC(v18[16] + 184, (uint64_t)(v18 + 2), 32);
  sub_1001621A4();
  sub_100181480();
  v20 = sub_100181788();
  v22 = sub_1001648C4(v20, v21);
  v83 = v18 + 9;
  if (v19
    || (v19 = v18[12],
        sub_100180CCC(v18[16] + 176, (uint64_t)(v18 + 5), 32),
        sub_1001621A4(),
        sub_100181480(),
        v23 = sub_100181788(),
        v22 = sub_1001648C4(v23, v24),
        v19))
  {
    v18[21] = v19;
    v25 = v18[12];
    v26 = static os_log_type_t.info.getter(v22);
    sub_100181518();
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease(a15, v27);
    sub_100181698();
    sub_100180D4C();
    sub_10018146C(v25);
    sub_100181758();
    sub_100170814(0x8000000100298330);
    v28 = sub_1001816F4();
    v29 = v26;
    v30 = sub_1001814E4(v28);
    v31 = v18[20];
    v32 = v18[17];
    v33 = v18[18];
    if (v30)
    {
      v82 = v18[17];
      v81 = v18[20];
      v34 = (uint8_t *)sub_100165DA4(12);
      v84 = sub_100165DA4(32);
      *(_DWORD *)v34 = 136315138;
      sub_10016D21C();
      v35 = sub_1001811E0();
      v38 = sub_10016FE60(v35, v36, v37);
      v39 = sub_100181318(v38, v83);
      sub_100180F70((uint64_t)v39, (uint64_t)(v18 + 10));
      sub_100170848(0x8000000100298330);
      sub_100165E04((void *)&_mh_execute_header, v28, v29, "Nearby - %s", v34);
      sub_100165DFC(v84, v40, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v84);
      sub_100165D98((uint64_t)v34);

      v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v81, v82);
    }
    else
    {
      sub_10017081C(0x8000000100298330);

      v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    }
    sub_10016D010(v41, v42);
    sub_100181410();
    v43 = sub_1001843B8(3);
    v18[22] = v43;
    v44 = sub_100161BD0(&qword_1003150E0);
    v45 = sub_100180DD8(v44);
    *(_OWORD *)(v45 + 16) = xmmword_100232EE0;
    *(_QWORD *)(v45 + 32) = v43;
    v85 = v45;
    specialized Array._endMutation()(v45);
    v46 = sub_100181608();
    sub_100165ED4(v46);
    sub_100165E90();
    v18[23] = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(0x654D79627261654ELL, 0xED00006567617373, 0, 0, 0, v85, 0.5);
    v47 = (_QWORD *)swift_task_alloc(dword_10031615C);
    v18[24] = v47;
    *v47 = v18;
    v47[1] = sub_100178FEC;
    sub_100180F38(v18[14]);
    sub_100180EB8();
    return sub_10019AD5C(v48, v49, v50, v51, v52);
  }
  else
  {
    v55 = v18[10];
    v54 = (void *)v18[11];
    v56 = static os_log_type_t.debug.getter(v22);
    sub_100181518();
    _StringGuts.grow(_:)(55);
    sub_100180E44();
    sub_100181174(21, v57);
    v58._countAndFlagsBits = sub_100181474();
    String.append(_:)(v58);
    sub_1001814A8(0xD00000000000001ELL, (uint64_t)". Cannot send data to player: ");
    v59._countAndFlagsBits = v55;
    v59._object = v54;
    String.append(_:)(v59);
    sub_100181310();
    sub_100170814(a15);
    v60 = sub_100181308();
    v61 = sub_100180D84(v60);
    v62 = v18[19];
    if (v61)
    {
      a13 = v18[18];
      a11 = v18[17];
      v63 = (uint8_t *)sub_100165DA4(12);
      a10 = v62;
      a14 = sub_100165DA4(32);
      sub_100181508(4.8149e-34);
      sub_100176C14();
      v64 = sub_100180E38();
      v18[8] = sub_10016FE60(v64, v65, v66);
      sub_100181220((uint64_t)(v18 + 8), (uint64_t)v83);
      sub_100170848(a15);
      sub_100165E04((void *)&_mh_execute_header, v60, v56, "Nearby - %s", v63);
      sub_100165DFC(a14, v67, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(a14);
      sub_100165D98((uint64_t)v63);

      v68 = (*(uint64_t (**)(uint64_t, uint64_t))(a13 + 8))(v62, a11);
    }
    else
    {
      sub_10017081C(a15);

      v70 = sub_1001811E0();
      v68 = v72(v70, v71);
    }
    sub_10016D110(v68, v69);
    swift_task_dealloc(v18[20]);
    sub_10016D2A8();
    sub_100180EB8();
    return v74(v73, v74, v75, v76, v77, v78, v79, v80, a9, a10, a11, v83, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_100178FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100181718();
  sub_100165DBC();
  sub_100180C8C();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_100179020()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 184));
  sub_100165E88();
  sub_100176CDC();
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  sub_10016D2A8();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1001790F4(uint64_t a1, uint64_t a2, void *a3, void *aBlock, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v12 = v11;
  v5[4] = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v15 = v14;
  v5[5] = v14;
  v16 = a3;
  swift_retain(a5);
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v19 = v18;

  v5[6] = v17;
  v5[7] = v19;
  v20 = (_QWORD *)swift_task_alloc(dword_1003150DC);
  v5[8] = v20;
  *v20 = v5;
  v20[1] = sub_1001791D8;
  return PeerDiscovery.sendDataToParticipant(_:deviceID:data:)(v10, v12, v13, v15, v17, v19);
}

uint64_t sub_1001791D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (**v9)(uint64_t, uint64_t);
  uint64_t v11;

  v3 = *v1;
  v11 = v3;
  sub_1001816DC(*(_QWORD *)(v3 + 64), &v11);
  v4 = sub_1001812FC();
  v6 = sub_10016D010(v4, v5);
  sub_10016D5D0(v6, v7);
  sub_1001816A4();
  if (a1)
  {
    v8 = (void *)_convertErrorToNSError(_:)(a1);
    swift_errorRelease(a1);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(uint64_t (***)(uint64_t, uint64_t))(v3 + 24);
  sub_100180DB0(v9[2]);

  _Block_release(v9);
  return ((uint64_t (*)(void))v1[1])();
}

void PeerDiscovery.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_100181678(v0);
  swift_defaultActor_initialize(v1);
  sub_10018143C((uint64_t)"GameDaemonCore.PeerDiscovery", v2, (uint64_t)"init()");
  __break(1u);
}

void PeerDiscovery.init()()
{
  uint64_t v0;
  uint64_t v1;

  swift_defaultActor_initialize(v0);
  sub_10018143C((uint64_t)"GameDaemonCore.PeerDiscovery", v1, (uint64_t)"init()");
  __break(1u);
}

_QWORD *PeerDiscovery.deinit()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100165B20((uint64_t)(v0 + 14));
  swift_release(v0[15]);
  swift_release(v0[16]);
  swift_bridgeObjectRelease(v0[18], v1);
  sub_10016FF44(v0[19], v0[20]);
  swift_bridgeObjectRelease(v0[21], v2);
  swift_bridgeObjectRelease(v0[22], v3);
  swift_bridgeObjectRelease(v0[23], v4);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t PeerDiscovery.__deallocating_deinit()
{
  uint64_t v0;

  PeerDiscovery.deinit();
  return swift_defaultActor_deallocate(v0);
}

uint64_t PeerDiscovery.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10017936C()
{
  return PeerDiscovery.unownedExecutor.getter();
}

uint64_t sub_100179384@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t);
  uint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(char *, uint64_t);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v2 = type metadata accessor for Logger(0);
  v84 = *(char **)(v2 - 8);
  v85 = v2;
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v83 = (uint64_t (*)(char *, uint64_t))((char *)&v77 - v6);
  v7 = type metadata accessor for NWTXTRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NWBrowser.Result.Metadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v77 - v17;
  NWBrowser.Result.metadata.getter(v16);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v18, v11);
  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v15, v11) != enum case for NWBrowser.Result.Metadata.bonjour(_:))
  {
    v50 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
    v51 = v50(v15, v11);
    v52 = static os_log_type_t.info.getter(v51);
    v53 = ((uint64_t (*)(void))static GKLog.match.getter)();
    v54 = Logger.logObject.getter(v53);
    v55 = v52;
    if (os_log_type_enabled(v54, v52))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v83 = v50;
      v58 = v57;
      v86 = v57;
      *(_DWORD *)v56 = 136315138;
      v88 = sub_10016FE60(0xD000000000000021, 0x8000000100298C60, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Nearby - %s", v56, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      v59 = v58;
      v50 = v83;
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }

    (*((void (**)(char *, uint64_t))v84 + 1))(v5, v85);
    result = v50(v18, v11);
    goto LABEL_29;
  }
  (*(void (**)(char *, uint64_t))(v12 + 96))(v15, v11);
  v82 = v8;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v15, v7);
  v19 = NWTXTRecord.subscript.getter(0x4449656369766564, 0xE800000000000000);
  if (!v20)
  {
    v81 = v12;
    v60 = static os_log_type_t.info.getter(v19);
    v86 = 0;
    v87 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    v61._object = (void *)0x8000000100298C90;
    v61._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v61);
    v80 = v10;
    v62 = _print_unlocked<A, B>(_:_:)(v10, &v86, v7);
    v63 = v86;
    v64 = v87;
    v65 = (char *)v83;
    static GKLog.match.getter(v62);
    v66 = swift_bridgeObjectRetain_n(v64, 2);
    v67 = Logger.logObject.getter(v66);
    v68 = v60;
    if (os_log_type_enabled(v67, v60))
    {
      v79 = v7;
      v69 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = swift_slowAlloc(32, -1);
      v78 = v11;
      v71 = v70;
      v86 = v70;
      *(_DWORD *)v69 = 136315138;
      v77 = v69 + 4;
      swift_bridgeObjectRetain(v64);
      v88 = sub_10016FE60(v63, v64, &v86);
      v7 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease_n(v64, 3);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Nearby - %s", v69, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      v72 = v71;
      v11 = v78;
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v69, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v64, 2);
    }
    (*((void (**)(char *, uint64_t))v84 + 1))(v65, v85);
    swift_bridgeObjectRelease(v64, v73);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v7);
    result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v18, v11);
    goto LABEL_29;
  }
  v21 = v20;
  v85 = v19;
  v22 = objc_msgSend((id)objc_opt_self(GKDevice), "currentDevice");
  if (v22)
  {
    v24 = sub_1001AB008(v22);
    if (v25)
    {
      v26 = v25;
      if (v85 == v24 && v21 == v25)
      {
        swift_bridgeObjectRelease(v21, v25);
        v21 = v26;
      }
      else
      {
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v21, v24, v25, 0);
        swift_bridgeObjectRelease(v26, v29);
        if ((v28 & 1) == 0)
          goto LABEL_10;
      }
      swift_bridgeObjectRelease(v21, v30);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v10, v7);
LABEL_28:
      result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v18, v11);
LABEL_29:
      v49 = 0;
      v21 = 0;
      v33 = 0;
      v34 = 0;
      v38 = 0;
      v39 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v46 = 0;
LABEL_30:
      *a1 = v49;
      a1[1] = v21;
      a1[2] = v33;
      a1[3] = v34;
      a1[4] = v38;
      a1[5] = v39;
      a1[6] = v42;
      a1[7] = v43;
      a1[8] = v44;
      a1[9] = v46;
      return result;
    }
LABEL_10:
    v79 = v7;
    v31 = NWTXTRecord.subscript.getter(101, 0xE100000000000000);
    if (v32)
    {
      v33 = v31;
      v34 = v32;
      v81 = v12;
      v35 = v10;
      v36 = NWTXTRecord.subscript.getter(104, 0xE100000000000000);
      if (v37)
      {
        v38 = v36;
        v39 = v37;
        v78 = v11;
        v80 = v35;
        v40 = NWTXTRecord.subscript.getter(28776, 0xE200000000000000);
        if (v41)
        {
          v42 = v40;
          v43 = v41;
          v44 = NWTXTRecord.subscript.getter(0x4449726579616C70, 0xE800000000000000);
          v84 = v18;
          v46 = v45;
          (*(void (**)(char *, uint64_t))(v82 + 8))(v80, v79);
          result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v84, v78);
          if (v46)
          {
            v49 = v85;
          }
          else
          {
            swift_bridgeObjectRelease(v39, v48);
            swift_bridgeObjectRelease(v34, v74);
            swift_bridgeObjectRelease(v21, v75);
            result = swift_bridgeObjectRelease(v43, v76);
            v49 = 0;
            v21 = 0;
            v33 = 0;
            v34 = 0;
            v38 = 0;
            v39 = 0;
            v42 = 0;
            v43 = 0;
            v44 = 0;
          }
          goto LABEL_30;
        }
        v35 = v80;
        swift_bridgeObjectRelease(v21, 0);
        v21 = v39;
        v11 = v78;
      }
      v12 = v81;
      swift_bridgeObjectRelease(v21, v37);
      v10 = v35;
    }
    else
    {
      v34 = v21;
    }
    swift_bridgeObjectRelease(v34, v32);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v10, v79);
    goto LABEL_28;
  }
  result = swift_bridgeObjectRelease(v21, v23);
  __break(1u);
  return result;
}

uint64_t sub_100179A9C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2[54] = a1;
  v2[55] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[56] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[57] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[58] = swift_task_alloc(v5);
  v2[59] = swift_task_alloc(v5);
  v6 = type metadata accessor for NWEndpoint(0);
  v2[60] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100179B2C, v1, 0);
}

uint64_t sub_100179B2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  Swift::String v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  objc_class *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Class isa;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  objc_class *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t **v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject v80;
  uint64_t v81;

  sub_100179384(v0 + 22);
  sub_10018075C((uint64_t)(v0 + 22), (uint64_t)(v0 + 12), &qword_1003151F0);
  v1 = v0[60];
  if (!v0[13])
  {
    sub_100180E00();
    sub_10016D2A8();
    sub_100180C98();
    sub_100181060();
    __asm { BR              X0 }
  }
  v77 = v0 + 53;
  v2 = v0[55];
  sub_1001815DC(v0 + 2, v0 + 12);
  v4 = v0[2];
  v3 = v0[3];
  v5 = sub_1001621A4();
  NWBrowser.Result.endpoint.getter(v5);
  v6 = sub_100181408();
  v7 = sub_100163AE8(v6, 128);
  v8 = swift_retain(v2);
  sub_100181564(v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001806A4);
  v9 = sub_100180798(v1, v0 + 2, v2, v7);
  v0[61] = v9;
  v79 = v2 + 184;
  sub_100180CCC(v2 + 184, (uint64_t)(v0 + 42), 32);
  v10 = *(_QWORD *)(v2 + 184);
  sub_1001621A4();
  sub_100166D50(v4, v3, v10);
  v12 = v11;
  sub_1001648C4(v11, v13);
  v78 = v9;
  if (v12)
  {
    v14 = sub_1001812F4();
    v15 = static os_log_type_t.debug.getter(v14);
    v80.isa = 0;
    v81 = 0xE000000000000000;
    _StringGuts.grow(_:)(109);
    sub_100181174(44, 0x8000000100298BF0);
    sub_10016D21C();
    v16._countAndFlagsBits = sub_100180E2C();
    String.append(_:)(v16);
    v18 = sub_100181564(v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100180700);
    sub_10016D010((uint64_t)v18, v19);
    v20._countAndFlagsBits = 0x656369766564202CLL;
    v20._object = (void *)0xEB000000005B4449;
    String.append(_:)(v20);
    v21 = *(_QWORD *)(v12 + 48);
    if (v21)
    {
      v0[50] = *(_QWORD *)(v12 + 40);
      v0[51] = v21;
      swift_bridgeObjectRetain(v21);
      v22 = String.init<A>(reflecting:)(v0 + 50, &type metadata for String);
    }
    else
    {
      v22 = 7104878;
    }
    sub_10018146C(v22);
    sub_10016D010(v39, v40);
    v41._countAndFlagsBits = 0xD000000000000030;
    v41._object = (void *)0x8000000100298C20;
    String.append(_:)(v41);
    v42 = sub_10016D21C();
    v43._countAndFlagsBits = Dictionary.description.getter(v42, &type metadata for String, v6);
    String.append(_:)(v43);
    v46 = sub_10016D5D0(v44, v45);
    v48 = sub_10016D010(v46, v47);
    isa = v80.isa;
    v50 = v81;
    static GKLog.match.getter(v48);
    sub_100170814(v81);
    v51 = sub_1001815A0();
    v52 = v15;
    v53 = os_log_type_enabled(v51, v15);
    v54 = v0[59];
    v55 = v0[56];
    if (v53)
    {
      v75 = v0[57];
      v56 = (uint8_t *)sub_100165DA4(12);
      v57 = (objc_class *)sub_100165DA4(32);
      v80.isa = v57;
      *(_DWORD *)v56 = 136315138;
      swift_bridgeObjectRetain(v50);
      v58 = sub_10016FE60((uint64_t)isa, v50, (uint64_t *)&v80);
      v59 = sub_100181318(v58, v77);
      sub_100181794((uint64_t)v59, (uint64_t)(v0 + 54));
      sub_100170848(v50);
      sub_100165E04((void *)&_mh_execute_header, v51, v52, "Nearby - %s", v56);
      sub_100165DFC((uint64_t)v57, v60, (uint64_t)&type metadata for Any + 8);
      sub_100165D98((uint64_t)v57);
      sub_100165D98((uint64_t)v56);

      v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8))(v54, v55);
    }
    else
    {
      sub_10017081C(v81);

      v63 = sub_1001814EC();
      v61 = v65(v63, v64);
    }
    sub_1001707FC(v61, v62);
    sub_10019A9B0();
    swift_release(v12);
  }
  else
  {
    v24 = sub_1001812F4();
    v25 = static os_log_type_t.info.getter(v24);
    v80.isa = 0;
    v81 = 0xE000000000000000;
    sub_100181388();
    v0[48] = 0;
    v0[49] = 0xE000000000000000;
    sub_1001814B8(0xD00000000000002ELL, (uint64_t)"Adding/Changing a peer connection for result: ");
    sub_1001815DC(v0 + 32, v0 + 2);
    v26 = _print_unlocked<A, B>(_:_:)(v0 + 32, v0 + 48, &type metadata for PeerDiscoveryInfo);
    sub_100181564(v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100180700);
    sub_10018124C();
    v28 = v0[48];
    v27 = v0[49];
    sub_100181380();
    sub_100170814(v27);
    v29 = sub_100181378();
    v30 = sub_1001810D0(v29);
    v32 = v0[57];
    v31 = v0[58];
    if (v30)
    {
      v76 = v0[56];
      v73 = v28;
      v33 = (uint8_t *)sub_100165DA4(12);
      v74 = v32;
      v34 = (objc_class *)sub_100165DA4(32);
      v80.isa = v34;
      *(_DWORD *)v33 = 136315138;
      sub_1001812EC();
      v0[52] = sub_100181630(v73, v35, (uint64_t *)&v80);
      sub_100181794((uint64_t)(v0 + 52), (uint64_t)v77);
      sub_100170848(v27);
      sub_100165E04((void *)&_mh_execute_header, &v80, v25, "Nearby - %s", v33);
      sub_100165DFC((uint64_t)v34, v36, (uint64_t)&type metadata for Any + 8);
      sub_100165D98((uint64_t)v34);
      sub_100165D98((uint64_t)v33);

      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v31, v76);
    }
    else
    {
      sub_10017081C(v27);

      v66 = sub_1001814EC();
      v37 = v68(v66, v67);
    }
    sub_1001811EC(v37, v38);
  }
  sub_100180CCC(v79, (uint64_t)(v0 + 45), 33);
  swift_retain(v78);
  sub_1001C0A34();
  v69 = sub_1001812F4();
  sub_1001648C4(v69, v70);
  v71 = (uint64_t **)swift_task_alloc(dword_100316174);
  v0[62] = (uint64_t)v71;
  *v71 = v0;
  v71[1] = (uint64_t *)sub_10017A0D8;
  sub_100181060();
  return sub_10019B178();
}

uint64_t sub_10017A0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_100180C8C();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10017A110()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 488));
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  sub_10016D2A8();
  sub_100180C98();
  return sub_100165E20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10017A150(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[16] = a1;
  v2[17] = v1;
  v3 = type metadata accessor for NWBrowser.Result.Metadata(0);
  v2[18] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[21] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[22] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v7);
  v2[24] = swift_task_alloc(v7);
  v2[25] = swift_task_alloc(v7);
  return swift_task_switch(sub_10017A1F4, v1, 0);
}

void sub_10017A1F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  os_log_type_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t *v10;
  objc_class *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSString v32;
  NSString v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Class isa;
  unint64_t v39;
  NSObject *v40;
  BOOL v41;
  uint64_t v42;
  uint8_t *v43;
  objc_class *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Swift::String v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  Class v71;
  uint64_t v72;
  NSObject *v73;
  BOOL v74;
  uint64_t v75;
  uint8_t *v76;
  objc_class *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t);
  NSObject v98;
  unint64_t v99;

  v2 = v1[16];
  v3 = static os_log_type_t.info.getter(a1);
  sub_100181528();
  _StringGuts.grow(_:)(27);
  v4 = v99;
  v1[11] = (uint64_t)v98.isa;
  v1[12] = v4;
  sub_100180E44();
  String.append(_:)(v5);
  v6 = sub_100181418();
  _print_unlocked<A, B>(_:_:)(v2, v1 + 11, v6);
  v7 = v1[11];
  v8 = v1[12];
  sub_100181380();
  sub_100170814(v8);
  v9 = sub_100181378();
  if (sub_1001814E4(v9))
  {
    v90 = v1[22];
    v93 = v1[21];
    v95 = v1[25];
    v10 = (uint8_t *)sub_100165DA4(12);
    v11 = (objc_class *)sub_100165DA4(32);
    v98.isa = v11;
    *(_DWORD *)v10 = 136315138;
    sub_10016D21C();
    v1[15] = sub_1001812E4(v7, v12, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 15, v1 + 16);
    sub_100170848(v8);
    sub_100165E04((void *)&_mh_execute_header, v9, v3, "Nearby - %s", v10);
    sub_100165DFC((uint64_t)v11, v13, (uint64_t)&type metadata for Any + 8);
    sub_100165D98((uint64_t)v11);
    sub_100165D98((uint64_t)v10);

    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v90 + 8);
    v15 = v14(v95, v93);
  }
  else
  {
    v17 = v1[25];
    v19 = v1[21];
    v18 = v1[22];
    sub_10017081C(v8);

    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
    v15 = v14(v17, v19);
  }
  sub_10016D010(v15, v16);
  v20 = v1[16];
  v21 = (uint64_t *)(v1[17] + 184);
  sub_100180CCC((uint64_t)v21, (uint64_t)(v1 + 5), 0);
  v22 = *v21;
  v23 = swift_task_alloc(32);
  *(_QWORD *)(v23 + 16) = v20;
  sub_10016D290();
  v24 = sub_10017AB9C((uint64_t (*)(_QWORD *))sub_10018098C, v23, v22);
  v26 = v25;
  v28 = v27;
  sub_10016D13C(v24, v25);
  sub_100180C98();
  if (!v26)
    goto LABEL_19;
  if (*(_QWORD *)(v28 + 48))
  {
    v97 = v14;
    v89 = (uint64_t)(v1 + 14);
    v29 = *(_QWORD *)(v28 + 104);
    v94 = v28;
    v30 = (void *)sub_100181670(v1[17]);
    v31 = sub_10016D21C();
    if (v30)
    {
      v32 = String._bridgeToObjectiveC()();
      v33 = String._bridgeToObjectiveC()();
      objc_msgSend(v30, "playerLost:deviceID:", v32, v33);
      swift_unknownObjectRelease(v30);

    }
    v34 = static os_log_type_t.info.getter(v31);
    sub_100181528();
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(v99, v35);
    v98.isa = (Class)0xD00000000000001FLL;
    v99 = 0x8000000100298CE0;
    sub_10018146C(v29);
    sub_10016D010(v36, v37);
    sub_10018124C();
    isa = v98.isa;
    v39 = v99;
    sub_100181380();
    sub_100170814(v39);
    v40 = sub_100181378();
    v41 = sub_1001810D0(v40);
    v42 = v1[24];
    if (v41)
    {
      v88 = v1[21];
      v86 = (uint64_t)isa;
      v43 = (uint8_t *)sub_100165DA4(12);
      v87 = v42;
      v44 = (objc_class *)sub_100165DA4(32);
      v98.isa = v44;
      *(_DWORD *)v43 = 136315138;
      sub_10018135C();
      v1[14] = sub_10016FE60(v86, v39, (uint64_t *)&v98);
      sub_100181220(v89, (uint64_t)(v1 + 15));
      sub_100170848(v39);
      sub_100165E04((void *)&_mh_execute_header, &v98, v34, "Nearby - %s", v43);
      sub_100165DFC((uint64_t)v44, v45, (uint64_t)&type metadata for Any + 8);
      sub_100165D98((uint64_t)v44);
      sub_100165D98((uint64_t)v43);

      v46 = v87;
      v47 = v88;
    }
    else
    {
      sub_10017081C(v39);

      v46 = sub_1001811E0();
    }
    v49 = v14(v46, v47);
    sub_10016D2B0(v49, v50);
    v51 = sub_100181664();
    sub_100180CCC(v51, v52, 32);
    v53 = *v21;
    sub_1001812EC();
    sub_100166D50(v24, v26, v53);
    v55 = v54;
    sub_1001811EC(v54, v56);
    if (v55)
    {
      v57 = v1[19];
      v58 = v1[20];
      v91 = v1[18];
      swift_endAccess(v1 + 8);
      v96 = v55;
      sub_10019A9B0();
      sub_100180CCC((uint64_t)v21, (uint64_t)(v1 + 2), 33);
      sub_100192520(v24, v26);
      v59 = sub_100181690();
      sub_1001811EC(v59, v60);
      v61 = sub_100165E88();
      v62 = static os_log_type_t.info.getter(v61);
      sub_100181528();
      _StringGuts.grow(_:)(26);
      v64 = swift_bridgeObjectRelease(v99, v63);
      v98.isa = (Class)0xD000000000000018;
      v99 = 0x8000000100298D00;
      v65 = NWBrowser.Result.metadata.getter(v64);
      NWBrowser.Result.Metadata.debugDescription.getter(v65);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v91);
      v66._countAndFlagsBits = sub_100180E38();
      String.append(_:)(v66);
      v69 = sub_10016D110(v67, v68);
      v71 = v98.isa;
      v70 = v99;
      static GKLog.match.getter(v69);
      v72 = sub_100170814(v70);
      v73 = Logger.logObject.getter(v72);
      v74 = os_log_type_enabled(v73, v62);
      v75 = v1[23];
      if (v74)
      {
        v92 = v1[21];
        v76 = (uint8_t *)sub_100165DA4(12);
        v77 = (objc_class *)sub_100165DA4(32);
        v98.isa = v77;
        *(_DWORD *)v76 = 136315138;
        sub_10016D5D8();
        v1[13] = sub_10016FE60((uint64_t)v71, v70, (uint64_t *)&v98);
        sub_100181098((uint64_t)(v1 + 13), v89);
        sub_100170848(v70);
        sub_100165E04((void *)&_mh_execute_header, v73, v62, "Nearby - %s", v76);
        sub_100165DFC((uint64_t)v77, v78, (uint64_t)&type metadata for Any + 8);
        sub_100165D98((uint64_t)v77);
        sub_100165D98((uint64_t)v76);

        v79 = v75;
        v80 = v92;
      }
      else
      {
        sub_10017081C(v70);

        v79 = sub_1001811E0();
      }
      v83 = v97(v79, v80);
      sub_10016D5D0(v83, v84);
      swift_release(v96);
      swift_release(v94);
LABEL_19:
      swift_task_dealloc(v1[25]);
      sub_10016D2A8();
      sub_100180C98();
      sub_100180D6C();
      sub_10016D154();
      __asm { BR              X0 }
    }
    swift_endAccess(v1 + 8);
    v48 = v94;
  }
  else
  {
    v48 = v28;
  }
  v81 = swift_release(v48);
  sub_1001811EC(v81, v82);
  goto LABEL_19;
}

uint64_t sub_10017A87C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;

  v2 = type metadata accessor for NWEndpoint(0);
  v30 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100161BD0(&qword_1003151F8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100161BD0(&qword_100315200);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v29 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v29 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(v17 + 32);
  if (v18)
  {
    v19 = swift_retain(*(_QWORD *)(v17 + 32));
    NWConnection.endpoint.getter(v19);
    swift_release(v18);
    v20 = 0;
  }
  else
  {
    v20 = 1;
  }
  v21 = sub_100161B54((uint64_t)v16, v20, 1, v2);
  NWBrowser.Result.endpoint.getter(v21);
  sub_100161B54((uint64_t)v14, 0, 1, v2);
  v22 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_1001809A8((uint64_t)v16, (uint64_t)v7);
  sub_1001809A8((uint64_t)v14, v22);
  if (sub_10016445C((uint64_t)v7, 1, v2) == 1)
  {
    v23 = &qword_100315200;
    sub_100180B34((uint64_t)v14, &qword_100315200);
    sub_100180B34((uint64_t)v16, &qword_100315200);
    if (sub_10016445C(v22, 1, v2) == 1)
    {
      v24 = -1;
    }
    else
    {
      v23 = &qword_1003151F8;
      v24 = 0;
    }
  }
  else
  {
    sub_1001809A8((uint64_t)v7, (uint64_t)v11);
    if (sub_10016445C(v22, 1, v2) == 1)
    {
      sub_100180B34((uint64_t)v14, &qword_100315200);
      sub_100180B34((uint64_t)v16, &qword_100315200);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v2);
      v24 = 0;
      v23 = &qword_1003151F8;
    }
    else
    {
      v25 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v4, v22, v2);
      sub_1001809F0(&qword_100315208, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NWEndpoint, (uint64_t)&protocol conformance descriptor for NWEndpoint);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v4, v2, v26);
      v27 = *(void (**)(char *, uint64_t))(v25 + 8);
      v27(v4, v2);
      v23 = &qword_100315200;
      sub_100180B34((uint64_t)v14, &qword_100315200);
      sub_100180B34((uint64_t)v16, &qword_100315200);
      v27(v11, v2);
    }
  }
  sub_100180B34((uint64_t)v7, v23);
  return v24 & 1;
}

uint64_t sub_10017AB9C(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD v25[5];
  int64_t v26;

  sub_1001B71F0(v25, a3);
  v6 = v25[0];
  v23 = v25[1];
  v7 = v25[3];
  v8 = v25[4];
  v26 = (unint64_t)(v25[2] + 64) >> 6;
  result = swift_bridgeObjectRetain(a3);
  if (!v8)
    goto LABEL_3;
LABEL_2:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v11 = v10 | (v7 << 6);
  while (1)
  {
    v15 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v11);
    v17 = *v15;
    v16 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v11);
    v24[0] = *v15;
    v24[1] = v16;
    v24[2] = v18;
    swift_bridgeObjectRetain(v16);
    swift_retain(v18);
    v19 = a1(v24);
    if (v3)
    {
      swift_release(v6);
      swift_release(v18);
      swift_bridgeObjectRelease(v16, v22);
      return v17;
    }
    if ((v19 & 1) != 0)
    {
      swift_release(v6);
      return v17;
    }
    swift_release(v18);
    result = swift_bridgeObjectRelease(v16, v20);
    if (v8)
      goto LABEL_2;
LABEL_3:
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v12 >= v26)
      goto LABEL_26;
    v13 = *(_QWORD *)(v23 + 8 * v12);
    if (!v13)
    {
      v14 = v7 + 2;
      if (v7 + 2 >= v26)
        goto LABEL_26;
      v13 = *(_QWORD *)(v23 + 8 * v14);
      if (v13)
        goto LABEL_12;
      v14 = v7 + 3;
      if (v7 + 3 >= v26)
        goto LABEL_26;
      v13 = *(_QWORD *)(v23 + 8 * v14);
      if (v13)
        goto LABEL_12;
      v14 = v7 + 4;
      if (v7 + 4 >= v26)
        goto LABEL_26;
      v13 = *(_QWORD *)(v23 + 8 * v14);
      if (v13)
      {
LABEL_12:
        v12 = v14;
        goto LABEL_13;
      }
      v12 = v7 + 5;
      if (v7 + 5 >= v26)
        goto LABEL_26;
      v13 = *(_QWORD *)(v23 + 8 * v12);
      if (!v13)
      {
        v21 = v7 + 6;
        while (v21 < v26)
        {
          v13 = *(_QWORD *)(v23 + 8 * v21++);
          if (v13)
          {
            v12 = v21 - 1;
            goto LABEL_13;
          }
        }
LABEL_26:
        swift_release(v6);
        return 0;
      }
    }
LABEL_13:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v7 = v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_10017ADB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = sub_100181418();
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v3[13] = sub_100180C54(v5);
  v3[14] = sub_100180C84();
  v6 = type metadata accessor for NWBrowser.Result.Change(0);
  v3[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[16] = v7;
  v3[17] = sub_100180C54(v7);
  v3[18] = sub_100180C84();
  v8 = sub_100180D8C();
  v3[19] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[20] = v9;
  v3[21] = sub_100180C54(v9);
  v3[22] = sub_100180C84();
  v3[23] = sub_100180C84();
  sub_100180C8C();
  return sub_10016CF78();
}

uint64_t sub_10017AE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  NSObject *v87;
  BOOL v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_log_type_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  BOOL v128;
  uint64_t (*v129)(uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  Swift::String v155;

  sub_100181420();
  a27 = v30;
  a28 = v31;
  a26 = v28;
  v32 = *(_QWORD *)(v28 + 72);
  static os_log_type_t.debug.getter(v31);
  a15 = 0;
  a16 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease(a16, v33);
  a15 = 0xD00000000000001BLL;
  a16 = 0x8000000100298AF0;
  sub_1001809F0(&qword_1003151C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NWBrowser.Result, (uint64_t)&protocol conformance descriptor for NWBrowser.Result);
  *(_QWORD *)(v28 + 192) = v34;
  v35 = sub_100181474();
  v36._countAndFlagsBits = Set.description.getter(v35);
  String.append(_:)(v36);
  sub_1001648C4(v37, v38);
  sub_100181594(0x65676E616863202CLL, 14963);
  if (v32)
  {
    v39 = *(_QWORD *)(v28 + 72);
    *(_QWORD *)(v28 + 56) = v39;
    swift_bridgeObjectRetain(v39);
    v40 = sub_100161BD0(&qword_1003151E8);
    v41 = String.init<A>(reflecting:)(v28 + 56, v40);
    v43 = v42;
  }
  else
  {
    v43 = 0xE300000000000000;
    v41 = 7104878;
  }
  v44 = v43;
  String.append(_:)(*(Swift::String *)&v41);
  sub_1001648C4(v45, v46);
  v48 = a15;
  v47 = a16;
  sub_100180F60();
  sub_100170814(v47);
  v49 = sub_100170824();
  v50 = sub_100180D2C(v49);
  v51 = *(_QWORD *)(v28 + 184);
  v52 = *(_QWORD *)(v28 + 152);
  v53 = *(_QWORD *)(v28 + 160);
  if (v50)
  {
    v150 = *(_QWORD *)(v28 + 184);
    v152 = v32;
    v54 = (uint8_t *)sub_100165DA4(12);
    v148 = v52;
    v55 = sub_100165DA4(32);
    a15 = v55;
    *(_DWORD *)v54 = 136315138;
    sub_100176C14();
    *(_QWORD *)(v28 + 48) = sub_100181364(v48, v56, &a15);
    sub_100180F70(v28 + 48, v28 + 56);
    sub_100170848(v47);
    sub_100165E04((void *)&_mh_execute_header, v49, v29, "Nearby - %s", v54);
    sub_100165DFC(v55, v57, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v55);
    v58 = (uint64_t)v54;
    v32 = v152;
    sub_100165D98(v58);

    v59 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8);
    v60 = v59(v150, v148);
  }
  else
  {
    sub_10017081C(v47);

    v59 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8);
    v60 = v59(v51, v52);
  }
  v62 = sub_10016D110(v60, v61);
  *(_QWORD *)(v28 + 200) = v59;
  if (!v32)
  {
    v85 = *(NSObject **)(v28 + 168);
    static os_log_type_t.info.getter(v62);
    v86 = sub_100165E64();
    v87 = Logger.logObject.getter(v86);
    v88 = sub_1001810E0(v87);
    v89 = *(_QWORD *)(v28 + 152);
    if (v88)
    {
      v154 = *(_QWORD *)(v28 + 168);
      v90 = (uint8_t *)sub_100165DA4(12);
      v91 = sub_100165DA4(32);
      a15 = v91;
      *(_DWORD *)v90 = 136315138;
      *(_QWORD *)(v28 + 32) = sub_10016FE60(0xD00000000000002FLL, 0x8000000100298B10, &a15);
      v92 = sub_100180E2C();
      sub_100180E08(v92, v93);
      sub_100165E04((void *)&_mh_execute_header, v85, (os_log_type_t)v49, "Nearby - %s", v90);
      sub_100165DFC(v91, v94, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v91);
      sub_100165D98((uint64_t)v90);

      v95 = v154;
      v96 = v89;
    }
    else
    {

      v95 = sub_100180E38();
    }
    v59(v95, v96);
    sub_100165EAC();
    v102 = sub_100181100();
    sub_100176D5C(v102, v103);
    goto LABEL_35;
  }
  v63 = *(_QWORD *)(v28 + 128);
  v64 = *(_QWORD *)(v28 + 72);
  v65 = *(_BYTE *)(v64 + 32);
  *(_BYTE *)(v28 + 260) = v65;
  v66 = -1;
  v67 = -1 << v65;
  if (-(-1 << v65) < 64)
    v66 = ~(-1 << -(char)(-1 << v65));
  v68 = v66 & *(_QWORD *)(v64 + 56);
  v69 = enum case for NWBrowser.Result.Change.added(_:);
  v70 = enum case for NWBrowser.Result.Change.removed(_:);
  *(_DWORD *)(v28 + 248) = enum case for NWBrowser.Result.Change.added(_:);
  *(_DWORD *)(v28 + 252) = v70;
  *(_DWORD *)(v28 + 256) = enum case for NWBrowser.Result.Change.changed(_:);
  v71 = (_QWORD *)swift_bridgeObjectRetain(v64);
  if (v68)
  {
    v72 = 0;
    v73 = __clz(__rbit64(v68));
    v74 = (v68 - 1) & v68;
    goto LABEL_12;
  }
  v100 = 63 - v67;
  if ((unint64_t)(63 - v67) <= 0x7F)
    goto LABEL_34;
  v101 = v71[8];
  if (!v101)
  {
    if (v100 >= 0xC0)
    {
      v101 = v71[9];
      if (v101)
      {
        v72 = 2;
        goto LABEL_21;
      }
      if (v100 >= 0x100)
      {
        v101 = v71[10];
        if (v101)
        {
          v72 = 3;
          goto LABEL_21;
        }
        if (v100 > 0x13F)
        {
          v101 = v71[11];
          if (!v101)
          {
            v146 = v100 >> 6;
            v147 = 12;
            while (v147 - 7 < v146)
            {
              v101 = v71[v147++];
              if (v101)
              {
                v72 = v147 - 8;
                goto LABEL_21;
              }
            }
            goto LABEL_34;
          }
          v72 = 4;
          goto LABEL_21;
        }
      }
    }
LABEL_34:
    swift_release(v71);
LABEL_35:
    sub_100180FAC();
    sub_10016D2A8();
    sub_100180C98();
    sub_100180D6C();
    sub_100180E00();
    sub_1001810BC();
    sub_1001816AC();
    return sub_100180F0C(*(uint64_t (**)(void))(v28 + 8));
  }
  v72 = 1;
LABEL_21:
  v74 = (v101 - 1) & v101;
  v73 = __clz(__rbit64(v101)) + (v72 << 6);
LABEL_12:
  *(_QWORD *)(v28 + 208) = v72;
  *(_QWORD *)(v28 + 216) = v74;
  v75 = *(_QWORD *)(v28 + 136);
  v76 = *(_QWORD *)(v28 + 144);
  v77 = *(_QWORD *)(v28 + 120);
  sub_100181258(v76, v71[6] + *(_QWORD *)(v63 + 72) * v73, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 16));
  sub_100181258(v75, v76, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 32));
  v78 = sub_1001811E0();
  v80 = v79(v78);
  if (v80 == v69)
  {
    v153 = (_QWORD *)(v28 + 40);
    v81 = *(_QWORD *)(v28 + 136);
    v82 = *(_QWORD *)(v28 + 112);
    v83 = *(_QWORD *)(v28 + 96);
    sub_100180E50(*(_QWORD *)(v28 + 128));
    v84 = sub_100181258(v82, v81, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 32));
  }
  else
  {
    if (v80 == *(_DWORD *)(v28 + 252))
    {
      sub_100180DE4();
      sub_100180CD4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 32));
      v97 = (_QWORD *)swift_task_alloc(dword_1003151CC);
      *(_QWORD *)(v28 + 240) = v97;
      *v97 = v28;
      v97[1] = sub_10017BAA8;
      sub_100180F28(*(_QWORD *)(v28 + 104));
      sub_10018113C();
      return sub_10017A150(v98);
    }
    v105 = *(_QWORD *)(v28 + 128);
    v104 = *(_QWORD *)(v28 + 136);
    if (v80 != *(_DWORD *)(v28 + 256))
    {
      sub_10018158C();
      sub_100180DB0(*(uint64_t (**)(uint64_t, uint64_t))(v105 + 8));
      goto LABEL_35;
    }
    v153 = (_QWORD *)(v28 + 40);
    v106 = *(_QWORD *)(v28 + 112);
    v107 = *(_QWORD *)(v28 + 88);
    v108 = *(_QWORD *)(v28 + 96);
    sub_100180DB0(*(uint64_t (**)(uint64_t, uint64_t))(v105 + 96));
    v109 = sub_100161BD0(&qword_1003151D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 32))(v106, v104 + *(int *)(v109 + 48), v107);
    v110 = sub_100181600();
    sub_100180CE4(v110);
    v84 = sub_100181628(v104, *(uint64_t (**)(uint64_t, uint64_t))(v108 + 8));
  }
  v111 = *(_QWORD *)(v28 + 64);
  if (!*(_QWORD *)(v111 + 16)
    || (v84 = sub_100180FCC(),
        v112 = v84 & ~(-1 << *(_BYTE *)(v111 + 32)),
        ((*(_QWORD *)(v111 + ((v112 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v112) & 1) == 0))
  {
LABEL_31:
    v120 = *(_QWORD *)(v28 + 112);
    v122 = *(_QWORD *)(v28 + 88);
    v121 = *(_QWORD *)(v28 + 96);
    v123 = static os_log_type_t.info.getter(v84);
    a15 = 0;
    a16 = 0xE000000000000000;
    _StringGuts.grow(_:)(112);
    v124 = a16;
    *(_QWORD *)(v28 + 16) = a15;
    *(_QWORD *)(v28 + 24) = v124;
    v155._countAndFlagsBits = 0xD000000000000035;
    v155._object = (void *)0x8000000100298B40;
    sub_1001811D8(v155);
    _print_unlocked<A, B>(_:_:)(v120, v28 + 16, v122);
    sub_100181338(v120, *(uint64_t (**)(uint64_t, uint64_t))(v121 + 8));
    sub_100180FC0(0xD000000000000039, (uint64_t)", but result is not present in full results set. Ignoring");
    v126 = *(_QWORD *)(v28 + 16);
    v125 = *(_QWORD *)(v28 + 24);
    sub_100180F60();
    sub_100170814(v125);
    v127 = sub_100170824();
    v128 = sub_1001814E4(v127);
    v129 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 200);
    v130 = *(_QWORD *)(v28 + 176);
    v131 = *(_QWORD *)(v28 + 152);
    v132 = *(_QWORD **)(v28 + 72);
    if (v128)
    {
      v151 = *(_QWORD **)(v28 + 72);
      v133 = (uint8_t *)sub_100165DA4(12);
      v149 = v130;
      v134 = sub_100165DA4(32);
      a15 = v134;
      *(_DWORD *)v133 = 136315138;
      sub_10016D21C();
      v136 = sub_1001812E4(v126, v135, &a15);
      v137 = sub_100181318(v136, v153);
      sub_100181098((uint64_t)v137, v138);
      sub_100170848(v125);
      sub_100165E04((void *)&_mh_execute_header, v127, v123, "Nearby - %s", v133);
      sub_100165DFC(v134, v139, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v134);
      sub_100165D98((uint64_t)v133);

      v140 = sub_100181338(v149, v129);
      sub_10016D010(v140, v141);
      v71 = v151;
    }
    else
    {
      sub_10017081C(v125);

      v142 = v129(v130, v131);
      sub_10016D010(v142, v143);
      v71 = v132;
    }
    goto LABEL_34;
  }
  sub_100181000();
  while (1)
  {
    v115 = *(_QWORD *)(v28 + 104);
    v114 = *(_QWORD *)(v28 + 112);
    v117 = *(_QWORD *)(v28 + 88);
    v116 = *(_QWORD *)(v28 + 96);
    ((void (*)(uint64_t, unint64_t, uint64_t))v111)(v115, *(_QWORD *)(v113 + 48) + v112 * (_QWORD)v59, v117);
    sub_1001809F0(&qword_1003151D8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NWBrowser.Result, (uint64_t)&protocol conformance descriptor for NWBrowser.Result);
    LOBYTE(v114) = dispatch thunk of static Equatable.== infix(_:_:)(v115, v114, v117, v118);
    v119 = *(uint64_t (**)(uint64_t, uint64_t))(v116 + 8);
    *(_QWORD *)(v28 + 224) = v119;
    v84 = sub_100181338(v115, v119);
    if ((v114 & 1) != 0)
      break;
    v113 = *(_QWORD *)(v28 + 64);
    v112 = (v112 + 1) & v32;
    if (((*(_QWORD *)(v113 + ((v112 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v112) & 1) == 0)
      goto LABEL_31;
  }
  v144 = (_QWORD *)swift_task_alloc(dword_1003151E4);
  *(_QWORD *)(v28 + 232) = v144;
  *v144 = v28;
  v144[1] = sub_10017B6C0;
  sub_100180F28(*(_QWORD *)(v28 + 112));
  sub_10018113C();
  return sub_100179A9C(v145);
}

uint64_t sub_10017B6C0()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100165E44();
  v1 = (void (*)(uint64_t, uint64_t))v0[28];
  v2 = v0[14];
  v4 = v0[10];
  v3 = v0[11];
  sub_100165DBC();
  v1(v2, v3);
  return swift_task_switch(sub_10017B71C, v4, 0);
}

#error "10017B8FC: call analysis failed (funcsize=219)"

uint64_t sub_10017BAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100181704();
  sub_100165DBC();
  sub_100180C8C();
  return sub_10016D26C(v0, v1, v2);
}

#error "10017BCCC: call analysis failed (funcsize=223)"

uint64_t sub_10017BE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1003151E4);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_100180C2C;
  return sub_100179A9C(a5);
}

uint64_t sub_10017BECC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[7] = a1;
  v2 = sub_100180D8C();
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v1[10] = sub_100180CA0(v3);
  sub_100180C8C();
  return sub_10016D26C(v4, v5, v6);
}

#error "10017BF40: call analysis failed (funcsize=82)"

uint64_t sub_10017C068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_BYTE *, uint64_t);
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v1 = type metadata accessor for NWEndpoint(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = __chkstk_darwin(v3);
  v8 = &v19[-v7 - 8];
  NWConnection.endpoint.getter(v6);
  v9 = (uint64_t *)(v0 + 168);
  swift_beginAccess(v0 + 168, v19, 32, 0);
  sub_100166E14((uint64_t)v8, *(_QWORD *)(v0 + 168));
  v11 = v10;
  swift_endAccess(v19);
  v12 = *(void (**)(_BYTE *, uint64_t))(v2 + 8);
  v12(v8, v1);
  result = swift_release(v11);
  if (v11)
  {
    NWConnection.endpoint.getter(result);
    swift_beginAccess(v9, v19, 32, 0);
    sub_100166E14((uint64_t)v5, *v9);
    if (v14)
    {
      v15 = v14;
      swift_endAccess(v19);
      v12(v5, v1);
      sub_10019A9B0();
      v16 = swift_release(v15);
    }
    else
    {
      swift_endAccess(v19);
      v16 = ((uint64_t (*)(_BYTE *, uint64_t))v12)(v5, v1);
    }
    NWConnection.endpoint.getter(v16);
    swift_beginAccess(v9, v19, 33, 0);
    v17 = sub_1001925BC();
    swift_endAccess(v19);
    v12(v8, v1);
    return swift_release(v17);
  }
  return result;
}

uint64_t sub_10017C20C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[3] = a1;
  v2[4] = v1;
  v3 = sub_100180D8C();
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = sub_100180CA0(v4);
  sub_100180C8C();
  return sub_10016D26C(v5, v6, v7);
}

#error "10017C284: call analysis failed (funcsize=83)"

uint64_t sub_10017C3AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[9] = v1;
  v3 = sub_100180D8C();
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = sub_100180C54(v4);
  v2[13] = sub_100180C84();
  sub_100180C8C();
  return sub_10016CF78();
}

#error "10017C42C: call analysis failed (funcsize=103)"

uint64_t sub_10017C5A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 120);
  v3 = *v1;
  *(_QWORD *)(v3 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return sub_10016CF78();
  swift_task_dealloc(*(_QWORD *)(v3 + 104));
  sub_10016D2A8();
  return sub_100165E20(*(uint64_t (**)(void))(v3 + 8));
}

#error "10017C64C: call analysis failed (funcsize=115)"

uint64_t sub_10017C800(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  v2[16] = swift_task_alloc(v5);
  v2[17] = swift_task_alloc(v5);
  return swift_task_switch(sub_10017C8BC, v1, 0);
}

uint64_t sub_10017C8BC(uint64_t a1)
{
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Class isa;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  os_log_type_t v68;
  Swift::String v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  BOOL v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  Swift::String v124;
  Swift::String v125;
  Swift::String v126;
  Swift::String v127;

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 128);
  *(_QWORD *)(v1 + 144) = v3;
  if (!v3)
  {
    v56 = *(NSObject **)(v1 + 112);
    static os_log_type_t.debug.getter(a1);
    v57 = sub_100165E64();
    v58 = Logger.logObject.getter(v57);
    v59 = sub_1001810E0(v58);
    v61 = *(_QWORD *)(v1 + 104);
    v60 = *(_QWORD *)(v1 + 112);
    v62 = *(_QWORD *)(v1 + 96);
    if (v59)
    {
      v119 = *(_QWORD *)(v1 + 112);
      v116 = *(_QWORD *)(v1 + 96);
      v63 = (uint8_t *)sub_100165DA4(12);
      v64 = sub_100165DA4(32);
      v122 = v64;
      sub_10018144C(4.8149e-34);
      v65 = sub_10018117C(39, 0x80000001002985A0, &v122);
      v66 = sub_100181638(v65);
      sub_100180F70((uint64_t)v66, v1 + 40);
      sub_100165E04((void *)&_mh_execute_header, v56, v2, "Nearby - %s", v63);
      sub_100165DFC(v64, v67, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v64);
      sub_100165D98((uint64_t)v63);

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v119, v116);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    }
    goto LABEL_22;
  }
  sub_100165E90();
  v4 = sub_1001A90B8();
  if (!v4)
  {
    v68 = static os_log_type_t.debug.getter(0);
    v122 = 0;
    v123 = 0xE000000000000000;
    sub_100181388();
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0xE000000000000000;
    sub_100180E44();
    String.append(_:)(v69);
    *(_QWORD *)(v1 + 40) = v3;
    v70 = type metadata accessor for PeerListener();
    _print_unlocked<A, B>(_:_:)(v1 + 40, v1 + 16, v70);
    v72 = *(_QWORD *)(v1 + 16);
    v71 = *(_QWORD *)(v1 + 24);
    sub_100181758();
    sub_100170814(v71);
    v73 = sub_1001816F4();
    v74 = v68;
    v75 = sub_100180FA4(v73);
    v76 = *(_QWORD *)(v1 + 120);
    v77 = *(_QWORD *)(v1 + 96);
    v78 = *(_QWORD *)(v1 + 104);
    if (v75)
    {
      v120 = *(_QWORD *)(v1 + 96);
      v117 = *(_QWORD *)(v1 + 120);
      v79 = (uint8_t *)sub_100165DA4(12);
      v115 = v78;
      v80 = sub_100165DA4(32);
      v122 = v80;
      *(_DWORD *)v79 = 136315138;
      sub_10016D21C();
      *(_QWORD *)(v1 + 48) = sub_1001812E4(v72, v81, &v122);
      sub_100180E08(v1 + 48, v1 + 56);
      sub_100170848(v71);
      sub_100165E04((void *)&_mh_execute_header, v73, v74, "Nearby - %s", v79);
      sub_100165DFC(v80, v82, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v80);
      sub_100165D98((uint64_t)v79);

      v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v115 + 8))(v117, v120);
    }
    else
    {
      sub_10017081C(v71);

      v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(v76, v77);
    }
    sub_10016D010(v83, v84);
    goto LABEL_21;
  }
  v6 = (uint64_t)v4;
  v7 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 32);
  *(_QWORD *)(v1 + 152) = v7;
  if (!v7)
  {
    v85 = *(NSObject **)(v1 + 128);
    v86 = sub_10016D108((uint64_t)v4, v5);
    static os_log_type_t.debug.getter(v86);
    v87 = sub_100165E64();
    v88 = Logger.logObject.getter(v87);
    v89 = sub_100180D0C(v88);
    v90 = *(_QWORD *)(v1 + 128);
    if (v89)
    {
      v121 = *(_QWORD *)(v1 + 104);
      v118 = *(_QWORD *)(v1 + 96);
      v91 = (uint8_t *)sub_100165DA4(12);
      v92 = sub_100165DA4(32);
      v122 = v92;
      *(_DWORD *)v91 = 136315138;
      *(_QWORD *)(v1 + 56) = sub_10018117C(39, 0x8000000100298600, &v122);
      sub_100180E08(v1 + 56, v1 + 64);
      sub_100165E04((void *)&_mh_execute_header, v85, (os_log_type_t)v6, "Nearby - %s", v91);
      sub_100165DFC(v92, v93, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v92);
      sub_100165D98((uint64_t)v91);

      (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v90, v118);
    }
    else
    {

      v109 = sub_100180E2C();
      v111(v109, v110);
    }
LABEL_21:
    sub_100176CDC();
LABEL_22:
    sub_100181610();
    sub_10016D2A8();
    sub_100180C98();
    sub_100180D6C();
LABEL_23:
    sub_100181060();
    __asm { BR              X0 }
  }
  v8 = (void *)objc_opt_self(NSKeyedArchiver);
  swift_retain(v7);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v1 + 64) = 0;
  v10 = objc_msgSend(v8, "archivedDataWithRootObject:requiringSecureCoding:error:", isa, 1, v1 + 64);

  v11 = *(id *)(v1 + 64);
  v13 = *(_QWORD *)(v1 + 136);
  if (!v10)
  {
    v94 = v11;
    v95 = *(_QWORD *)(v1 + 112);
    sub_10016D108((uint64_t)v11, v12);
    _convertNSErrorToError(_:)(v94);

    swift_willThrow(v96);
    sub_1001816A4();
    sub_100176CDC();
    swift_task_dealloc(v13);
    sub_100180E00();
    sub_1001810BC();
    swift_task_dealloc(v95);
    goto LABEL_23;
  }
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v16 = v15;

  *(_QWORD *)(v1 + 160) = v14;
  *(_QWORD *)(v1 + 168) = v16;
  sub_100181410();
  v17 = sub_1001843B8(1);
  *(_QWORD *)(v1 + 176) = v17;
  v18 = sub_100161BD0(&qword_1003150E0);
  v19 = sub_100180DD8(v18);
  *(_OWORD *)(v19 + 16) = xmmword_100232EE0;
  *(_QWORD *)(v19 + 32) = v17;
  v122 = v19;
  specialized Array._endMutation()(v19);
  v20 = sub_100181608();
  sub_100165ED4(v20);
  sub_100165E90();
  v21 = sub_100180E88();
  v27 = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(v21, v22, v23, v24, v25, v122, v26);
  *(_QWORD *)(v1 + 184) = v27;
  v28 = static os_log_type_t.info.getter(v27);
  v122 = 0;
  v123 = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  v124._countAndFlagsBits = 0xD00000000000002FLL;
  v124._object = (void *)0x8000000100298630;
  sub_100181490(v124);
  v125._countAndFlagsBits = sub_1001817A0(v6, (uint64_t)&type metadata for String);
  sub_100181490(v125);
  v31 = sub_1001648C4(v29, v30);
  sub_10016D108(v31, v32);
  v126._countAndFlagsBits = 0xD000000000000012;
  v126._object = (void *)0x8000000100298660;
  sub_100181490(v126);
  v127._countAndFlagsBits = NWConnection.debugDescription.getter(v33, v34, v35, v36, v37, v38, v39);
  sub_100181490(v127);
  v42 = sub_1001648C4(v40, v41);
  static GKLog.match.getter(v42);
  v43 = sub_100170814(0xE000000000000000);
  v44 = Logger.logObject.getter(v43);
  v45 = sub_1001812AC(v44);
  v46 = *(_QWORD *)(v1 + 136);
  v47 = *(_QWORD *)(v1 + 104);
  if (v45)
  {
    v114 = *(_QWORD *)(v1 + 96);
    v48 = (uint8_t *)sub_100165DA4(12);
    v113 = v47;
    v49 = sub_100165DA4(32);
    v122 = v49;
    *(_DWORD *)v48 = 136315138;
    sub_1001812EC();
    *(_QWORD *)(v1 + 72) = sub_100181630(0, v50, &v122);
    v51 = sub_100180E2C();
    sub_100181098(v51, v52);
    sub_100170848(0xE000000000000000);
    sub_100165E04((void *)&_mh_execute_header, v44, v28, "Nearby - %s", v48);
    sub_100165DFC(v49, v53, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v49);
    sub_100165D98((uint64_t)v48);

    v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v46, v114);
  }
  else
  {
    sub_10017081C(0xE000000000000000);

    v97 = sub_100180E38();
    v54 = v99(v97, v98);
  }
  sub_1001811EC(v54, v55);
  v100 = sub_100180E38();
  sub_100170728(v100, v101);
  v102 = (_QWORD *)swift_task_alloc(dword_10031615C);
  *(_QWORD *)(v1 + 192) = v102;
  *v102 = v1;
  v102[1] = sub_10017D0A4;
  sub_100180E38();
  sub_100181060();
  return sub_10019AD5C(v103, v104, v105, v106, v107);
}

uint64_t sub_10017D0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100181718();
  sub_100165DBC();
  sub_1001812FC();
  sub_100180C8C();
  return swift_task_switch(v0, v1, v2);
}

uint64_t sub_10017D11C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 184));
  sub_100165E88();
  sub_1001812FC();
  swift_release(v1);
  swift_release(v2);
  sub_100181610();
  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  return sub_100180D38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10017D1AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[7] = a1;
  v2[8] = v1;
  v3 = sub_100180D8C();
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = sub_100180CA0(v4);
  sub_100180C8C();
  return sub_10016D26C(v5, v6, v7);
}

#error "10017D220: call analysis failed (funcsize=90)"

uint64_t sub_10017D36C()
{
  uint64_t v0;

  sub_100165E44();
  sub_100165DBC();
  sub_10016D2A8();
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10017D39C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[3] = a1;
  v2[4] = v1;
  v3 = sub_100180D8C();
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = sub_100180CA0(v4);
  sub_100180C8C();
  return sub_10016D26C(v5, v6, v7);
}

#error "10017D50C: call analysis failed (funcsize=88)"

uint64_t sub_10017D54C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[19] = a1;
  v2[20] = v1;
  v3 = sub_100180D8C();
  v2[21] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[22] = v4;
  v2[23] = sub_100180C54(v4);
  v2[24] = sub_100180C84();
  v2[25] = sub_100180C84();
  v5 = sub_1001815F8();
  v2[26] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[27] = v6;
  v2[28] = sub_100180CA0(v6);
  sub_100180C8C();
  return sub_10016CF78();
}

uint64_t sub_10017D5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  Swift::String v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  Swift::String v108;
  Swift::String v109;

  sub_100181420();
  a27 = v29;
  a28 = v30;
  a26 = v28;
  v31 = *(_QWORD *)(v28 + 224);
  v32 = NWConnection.endpoint.getter(v30);
  v33 = static os_log_type_t.info.getter(v32);
  sub_100181228();
  sub_100181388();
  v34 = a17;
  *(_QWORD *)(v28 + 80) = a16;
  v105 = v28 + 120;
  v107 = v28 + 40;
  *(_QWORD *)(v28 + 88) = v34;
  v108._countAndFlagsBits = 0xD000000000000019;
  v108._object = (void *)0x80000001002984D0;
  sub_1001811D8(v108);
  v109._countAndFlagsBits = NWConnection.debugDescription.getter(v35, v36, v37, v38, v39, v40, v41);
  sub_1001811D8(v109);
  sub_10016D110(v42, v43);
  sub_100181174(19, 0x80000001002984F0);
  sub_100181260(v31);
  sub_10018124C();
  v44 = *(_QWORD *)(v28 + 80);
  v45 = *(_QWORD *)(v28 + 88);
  sub_100181380();
  sub_100170814(v45);
  v46 = sub_100181378();
  v47 = v33;
  if (sub_1001812AC(v46))
  {
    v99 = *(_QWORD *)(v28 + 176);
    v100 = *(_QWORD *)(v28 + 168);
    v102 = *(_QWORD *)(v28 + 200);
    v48 = (uint8_t *)sub_100165DA4(12);
    v49 = sub_100165DA4(32);
    a16 = v49;
    *(_DWORD *)v48 = 136315138;
    sub_1001812EC();
    *(_QWORD *)(v28 + 144) = sub_100181630(v44, v50, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 144, v28 + 152);
    sub_100170848(v45);
    sub_100165E04((void *)&_mh_execute_header, v46, v47, "Nearby - %s", v48);
    sub_100165DFC(v49, v51, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v49);
    sub_100165D98((uint64_t)v48);

    v52 = *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8);
    v53 = v52(v102, v100);
  }
  else
  {
    v55 = *(_QWORD *)(v28 + 176);
    sub_10017081C(v45);

    v52 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8);
    v56 = sub_100180E2C();
    v53 = v52(v56, v57);
  }
  sub_1001811EC(v53, v54);
  v58 = *(_QWORD *)(v28 + 224);
  v59 = *(_QWORD *)(v28 + 160);
  sub_100180CCC(v59 + 168, v107, 32);
  sub_100166E14(v58, *(_QWORD *)(v59 + 168));
  v61 = v60;
  swift_endAccess(v107);
  v62 = sub_100165E88();
  v63 = *(_QWORD *)(v28 + 152);
  if (v61)
  {
    v64 = static os_log_type_t.debug.getter(v62);
    sub_100181228();
    _StringGuts.grow(_:)(25);
    v65 = a17;
    *(_QWORD *)(v28 + 64) = a16;
    *(_QWORD *)(v28 + 72) = v65;
    sub_100181558();
    sub_1001814B8(v66 + 4, (uint64_t)"Ignoring a connection: ");
    *(_QWORD *)(v28 + 128) = v63;
    v67 = type metadata accessor for NWConnection(0);
    _print_unlocked<A, B>(_:_:)(v28 + 128, v28 + 64, v67);
    v69 = *(_QWORD *)(v28 + 64);
    v68 = *(_QWORD *)(v28 + 72);
    sub_100180F60();
    sub_100170814(v68);
    v70 = sub_100170824();
    v71 = sub_1001810D0(v70);
    v72 = *(_QWORD *)(v28 + 184);
    v73 = *(_QWORD *)(v28 + 168);
    if (v71)
    {
      v103 = *(_QWORD *)(v28 + 168);
      v101 = *(_QWORD *)(v28 + 184);
      v74 = (uint8_t *)sub_100165DA4(12);
      v75 = sub_100165DA4(32);
      a16 = v75;
      *(_DWORD *)v74 = 136315138;
      sub_10016D21C();
      *(_QWORD *)(v28 + 112) = sub_1001812E4(v69, v76, &a16);
      sub_100181098(v28 + 112, v105);
      sub_100170848(v68);
      sub_100165E04((void *)&_mh_execute_header, v61, v64, "Nearby - %s", v74);
      sub_100165DFC(v75, v77, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v75);
      sub_100165D98((uint64_t)v74);

      v78 = v52(v101, v103);
    }
    else
    {
      sub_10017081C(v68);

      v78 = v52(v72, v73);
    }
    sub_10016D010(v78, v79);
    NWConnection.cancel()();
    sub_100181208();
    sub_10016D2A8();
    sub_100180C98();
    sub_100180D6C();
    sub_100180E00();
    return sub_100180F0C(*(uint64_t (**)(void))(v28 + 8));
  }
  else
  {
    static os_log_type_t.info.getter(v62);
    sub_100181228();
    _StringGuts.grow(_:)(26);
    v80 = a17;
    *(_QWORD *)(v28 + 96) = a16;
    *(_QWORD *)(v28 + 104) = v80;
    sub_100181558();
    sub_100180E44();
    String.append(_:)(v81);
    *(_QWORD *)(v28 + 120) = v63;
    v82 = type metadata accessor for NWConnection(0);
    _print_unlocked<A, B>(_:_:)(v105, v28 + 96, v82);
    v84 = *(_QWORD *)(v28 + 96);
    v83 = *(_QWORD *)(v28 + 104);
    sub_100180F60();
    sub_100170814(v83);
    v85 = sub_100170824();
    if (sub_100180D2C(v85))
    {
      v106 = *(_QWORD *)(v28 + 168);
      v104 = *(_QWORD *)(v28 + 192);
      v86 = (uint8_t *)sub_100165DA4(12);
      v87 = sub_100165DA4(32);
      a16 = v87;
      *(_DWORD *)v86 = 136315138;
      sub_100176C14();
      *(_QWORD *)(v28 + 136) = sub_100181364(v84, v88, &a16);
      sub_100181098(v28 + 136, v28 + 144);
      sub_100170848(v83);
      sub_100165E04((void *)&_mh_execute_header, v85, (os_log_type_t)v45, "Nearby - %s", v86);
      sub_100165DFC(v87, v89, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v87);
      sub_100165D98((uint64_t)v86);

      v90 = v52(v104, v106);
    }
    else
    {
      sub_10017081C(v83);

      v93 = sub_1001814EC();
      v90 = ((uint64_t (*)(uint64_t))v52)(v93);
    }
    sub_10016D110(v90, v91);
    v94 = *(_QWORD *)(v28 + 152);
    v95 = sub_100181408();
    v96 = sub_100163AE8(v95, 128);
    *(_QWORD *)(v28 + 232) = v96;
    *(_QWORD *)(v96 + 24) = 0;
    v97 = sub_1001811C4(v96 + 16);
    *(_OWORD *)(v96 + 96) = 0u;
    *(_OWORD *)(v96 + 112) = 0u;
    *(_OWORD *)(v96 + 64) = 0u;
    *(_OWORD *)(v96 + 80) = 0u;
    *(_OWORD *)(v96 + 32) = 0u;
    *(_OWORD *)(v96 + 48) = 0u;
    *(_QWORD *)(v96 + 24) = &off_1002C5C70;
    sub_1001815F0(v97);
    *(_QWORD *)(v96 + 32) = v94;
    sub_100165E90();
    sub_100165E88();
    v98 = (_QWORD *)swift_task_alloc(dword_100316174);
    *(_QWORD *)(v28 + 240) = v98;
    *v98 = v28;
    v98[1] = sub_10017DB74;
    sub_10018113C();
    return sub_10019B178();
  }
}

uint64_t sub_10017DB74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100181704();
  sub_100165DBC();
  sub_100180C8C();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10017DBA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 232);
  sub_100180CCC(*(_QWORD *)(v0 + 160) + 168, v0 + 16, 33);
  swift_retain(v1);
  sub_1001C0A74();
  sub_100181690();
  sub_1001816B4();
  sub_100181208();
  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  return sub_100165E20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10017DC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[24] = a4;
  v5[25] = v4;
  v5[22] = a2;
  v5[23] = a3;
  v5[21] = a1;
  v6 = sub_100180D8C();
  v5[26] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[27] = v7;
  v5[28] = sub_100180C54(v7);
  v5[29] = sub_100180C84();
  v5[30] = sub_100180C84();
  v5[31] = sub_100180C84();
  v5[32] = sub_100180C84();
  sub_100180C8C();
  return sub_10016CF78();
}

void sub_10017DC90(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  void *object;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  NSObject *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43[2];
  Swift::String v44;
  Swift::String v45;

  v2 = *(_QWORD *)(v1 + 176);
  v3 = static os_log_type_t.info.getter(a1);
  sub_100181538();
  _StringGuts.grow(_:)(54);
  v4 = v43[1];
  *(_QWORD *)(v1 + 80) = v43[0];
  *(_QWORD *)(v1 + 88) = v4;
  sub_100180E44();
  v44._countAndFlagsBits = 0xD000000000000012;
  sub_1001816FC(v44);
  v42 = v2 >> 60;
  if (v2 >> 60 == 15)
  {
    object = (void *)0xE300000000000000;
    v6._countAndFlagsBits = 7104878;
  }
  else
  {
    *(Swift::String *)(v1 + 64) = Data.base64EncodedString(options:)(0);
    v6._countAndFlagsBits = String.init<A>(reflecting:)(v1 + 64, &type metadata for String);
    object = v6._object;
  }
  v40 = (uint64_t *)(v1 + 152);
  v7 = *(_QWORD *)(v1 + 184);
  v6._object = object;
  sub_1001816FC(v6);
  sub_1001648C4(v8, v9);
  sub_100181594(0x67617373656D202CLL, 14949);
  *(_QWORD *)(v1 + 136) = v7;
  v10 = sub_100181410();
  _print_unlocked<A, B>(_:_:)(v1 + 136, v1 + 80, v10);
  sub_100180FC0(0xD000000000000013, (uint64_t)", from connection: ");
  v45._countAndFlagsBits = sub_10019B4F0();
  sub_1001816FC(v45);
  v13 = sub_1001648C4(v11, v12);
  v14 = *(_QWORD *)(v1 + 80);
  v15 = *(_QWORD *)(v1 + 88);
  static GKLog.match.getter(v13);
  v16 = sub_100170814(v15);
  v17 = Logger.logObject.getter(v16);
  v18 = sub_1001812AC(v17);
  v19 = *(_QWORD *)(v1 + 256);
  v20 = *(_QWORD *)(v1 + 216);
  v41 = *(_QWORD *)(v1 + 208);
  if (v18)
  {
    v39 = *(_QWORD *)(v1 + 256);
    v21 = (uint8_t *)sub_100165DA4(12);
    v38 = v20;
    v22 = sub_100165DA4(32);
    v43[0] = v22;
    *(_DWORD *)v21 = 136315138;
    sub_100181548();
    *v40 = sub_10016FE60(v14, v15, v43);
    sub_100181098((uint64_t)v40, v1 + 160);
    sub_100170848(v15);
    sub_100165E04((void *)&_mh_execute_header, v17, v3, "Nearby - %s", v21);
    sub_100165DFC(v22, v23, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v22);
    sub_100165D98((uint64_t)v21);

    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8);
    v25 = v24(v39, v41);
  }
  else
  {
    sub_10017081C(v15);

    v24 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    v25 = v24(v19, v41);
  }
  v27 = sub_10016D108(v25, v26);
  if (v42 > 0xE)
  {
    v28 = static os_log_type_t.info.getter(v27);
    v29 = sub_100165E64();
    v30 = Logger.logObject.getter(v29);
    if (sub_100180D84(v30))
    {
      v31 = (uint8_t *)sub_100165DA4(12);
      v32 = sub_100165DA4(32);
      v43[0] = v32;
      *(_DWORD *)v31 = 136315138;
      sub_1001811CC();
      *(_QWORD *)(v1 + 120) = sub_100180DC8(v33 + 13, (uint64_t)"Invalid content received. Drop.");
      sub_100180E08(v1 + 120, v1 + 128);
      sub_100165E04((void *)&_mh_execute_header, v30, v28, "Nearby - %s", v31);
      sub_100165DFC(v32, v34, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v32);
      sub_100165D98((uint64_t)v31);

      sub_100180E38();
      sub_10018145C();
    }
    else
    {

      v36 = sub_100180E38();
      ((void (*)(uint64_t))v24)(v36);
    }
    sub_100181390();
    sub_10016D2A8();
    sub_100180C98();
    sub_100180D6C();
    sub_100180E00();
    sub_1001814D8();
    sub_1001810A0();
    __asm { BR              X0 }
  }
  sub_100170728(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
  v35 = (char *)&loc_10017E03C + 4 * byte_100232F00[sub_100184458()];
  __asm { BR              X10 }
}

uint64_t sub_10017E704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc(v2);
  return sub_10016CF78();
}

uint64_t sub_10017E760()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_10016FF30(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  sub_100181390();
  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  v1 = (uint64_t (*)(void))sub_1001814D8();
  return sub_100165E20(v1);
}

uint64_t sub_10017E7A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_100180C8C();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10017E7E0()
{
  uint64_t v0;

  sub_10016FF30(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  sub_1001810BC();
  return sub_100180D38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10017E834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[105] = v3;
  v4[104] = a3;
  v4[103] = a2;
  v4[102] = a1;
  v5 = type metadata accessor for NWEndpoint(0);
  v4[106] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[107] = v6;
  v4[108] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[109] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[110] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[111] = swift_task_alloc(v9);
  v4[112] = swift_task_alloc(v9);
  v4[113] = swift_task_alloc(v9);
  v4[114] = swift_task_alloc(v9);
  return swift_task_switch(sub_10017E8F0, v3, 0);
}

#error "10017EEE4: call analysis failed (funcsize=454)"

uint64_t sub_10017F060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_100180C8C();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10017F098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26,uint64_t a27,uint64_t a28)
{
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint64_t v39;
  NSObject *v40;
  BOOL v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  BOOL v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);

  sub_100181420();
  a27 = v29;
  a28 = v30;
  a26 = v28;
  v31 = v28 + 12;
  v32 = v28[104];
  sub_100180CCC(v28[105] + 176, (uint64_t)(v28 + 70), 33);
  swift_retain(v32);
  sub_1001C0A34();
  v33 = swift_endAccess(v28 + 70);
  v35 = sub_10016D5D0(v33, v34);
  v36 = *(_QWORD *)(v32 + 32);
  if (v36)
  {
    v83 = (uint64_t)(v28 + 67);
    v37 = swift_retain(v36);
    v38 = static os_log_type_t.info.getter(v37);
    v39 = sub_100165E64();
    v40 = Logger.logObject.getter(v39);
    v41 = sub_1001812AC(v40);
    v42 = (uint64_t (*)(uint64_t, uint64_t))v28[115];
    v43 = v28[113];
    v44 = v28[109];
    if (v41)
    {
      v45 = (uint8_t *)sub_100165DA4(12);
      v82 = v42;
      v46 = sub_100165DA4(32);
      a16 = v46;
      *(_DWORD *)v45 = 136315138;
      sub_100180E44();
      v28[100] = sub_10016FE60(v47, v48, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 100, v28 + 101);
      sub_100165E04((void *)&_mh_execute_header, v40, v38, "Nearby - %s", v45);
      sub_100165DFC(v46, v49, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v46);
      sub_100165D98((uint64_t)v45);

      v50 = v82(v43, v44);
    }
    else
    {

      v50 = v42(v43, v44);
    }
    v51 = v28[107];
    v52 = v28[105];
    NWConnection.endpoint.getter(v50);
    sub_100180CCC(v52 + 168, v83, 33);
    sub_1001925BC();
    swift_endAccess(v83);
    swift_release(v36);
    sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
    v35 = sub_100165E88();
    v31 = v28 + 12;
  }
  v53 = static os_log_type_t.info.getter(v35);
  sub_100181228();
  _StringGuts.grow(_:)(64);
  v54 = a17;
  v28[95] = a16;
  v28[96] = v54;
  sub_100180E44();
  v55._countAndFlagsBits = 0xD00000000000003ELL;
  String.append(_:)(v55);
  sub_1001815DC(v31, v28 + 2);
  v56 = _print_unlocked<A, B>(_:_:)(v31, v28 + 95, &type metadata for PeerDiscoveryInfo);
  v58 = sub_10016D110(v56, v57);
  v60 = sub_1001648C4(v58, v59);
  v62 = sub_10016D010(v60, v61);
  v64 = sub_1001707FC(v62, v63);
  sub_10016D108(v64, v65);
  v66 = v28[95];
  v67 = v28[96];
  sub_100181758();
  sub_100170814(v67);
  v68 = sub_1001816F4();
  v69 = os_log_type_enabled(v68, v53);
  v70 = (uint64_t (*)(uint64_t, uint64_t))v28[115];
  v71 = v28[112];
  v72 = v28[109];
  if (v69)
  {
    v84 = (uint64_t (*)(uint64_t, uint64_t))v28[115];
    v73 = (uint8_t *)sub_100165DA4(12);
    v74 = sub_100165DA4(32);
    a16 = v74;
    *(_DWORD *)v73 = 136315138;
    sub_1001621A4();
    v28[98] = sub_100180E10(v66, v75, &a16);
    sub_100180F68((uint64_t)(v28 + 98), (uint64_t)(v28 + 99));
    sub_100170848(v67);
    sub_100165E04((void *)&_mh_execute_header, v68, v53, "Nearby - %s", v73);
    sub_100165DFC(v74, v76, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v74);
    sub_100165D98((uint64_t)v73);

    v77 = sub_100181464(v71, v84);
  }
  else
  {
    sub_10017081C(v67);

    v77 = v70(v71, v72);
  }
  sub_1001648C4(v77, v78);
  v79 = (_QWORD *)swift_task_alloc(dword_100315194);
  v28[123] = v79;
  *v79 = v28;
  v79[1] = sub_10017F484;
  sub_100180F38(v28[104]);
  sub_10018113C();
  return sub_10017FB24(v80);
}

uint64_t sub_10017F484()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = v1;
  sub_1001816DC(*(_QWORD *)(v1 + 984), &v3);
  swift_task_dealloc(*(_QWORD *)(v1 + 912));
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  sub_1001810BC();
  return sub_100180D38((uint64_t (*)(void))v0[1]);
}

uint64_t sub_10017F4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[19] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[20] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[21] = swift_task_alloc(v7);
  v4[22] = swift_task_alloc(v7);
  v4[23] = swift_task_alloc(v7);
  return swift_task_switch(sub_10017F568, v3, 0);
}

void sub_10017F568()
{
  _QWORD *v0;
  os_log_type_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  NSObject *v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSString v70;
  NSString v71;
  Class isa;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;

  v2 = v0;
  v3 = v0 + 13;
  v4 = sub_100181670(v2[18]);
  v93 = (void *)v4;
  if (v4)
  {
    v5 = (_QWORD *)v2[17];
    v6 = (void *)v5[6];
    if (v6)
    {
      v7 = v5[5];
      v8 = v5[7];
      v9 = v5[8];
      v10 = v5[9];
      v11 = v5[10];
      v12 = v5[11];
      v13 = v5[12];
      v14 = v5[13];
      v15 = (void *)v5[14];
      v79 = v2[15];
      v77 = v2[16];
      v2[2] = v7;
      v2[3] = v6;
      v88 = v8;
      v2[4] = v8;
      v2[5] = v9;
      v86 = v10;
      v2[6] = v10;
      v2[7] = v11;
      v84 = v12;
      v2[8] = v12;
      v2[9] = v13;
      v2[10] = v14;
      v2[11] = v15;
      sub_100176C14();
      v87 = v9;
      sub_10016D290();
      v85 = v11;
      sub_1001621A4();
      v83 = v13;
      sub_10016D21C();
      v16 = sub_10018135C();
      LOBYTE(v13) = static os_log_type_t.info.getter(v16);
      sub_100181538();
      _StringGuts.grow(_:)(88);
      sub_100181558();
      sub_100180FC0(v17 + 16, (uint64_t)"Handle hello response from player: ");
      sub_10018135C();
      v18._countAndFlagsBits = v14;
      v18._object = v15;
      String.append(_:)(v18);
      v82 = (uint64_t)v15;
      sub_10016D2B0(v19, v20);
      sub_100180D4C();
      sub_100176C14();
      v90 = v7;
      v21._countAndFlagsBits = v7;
      v21._object = v6;
      String.append(_:)(v21);
      sub_10016D110(v22, v23);
      sub_100181174(19, 0x80000001002986A0);
      v24._countAndFlagsBits = sub_10019B4F0();
      String.append(_:)(v24);
      sub_1001648C4(v25, v26);
      v27._countAndFlagsBits = 0x742068737550202ELL;
      v27._object = (void *)0xEE00203A6E656B6FLL;
      String.append(_:)(v27);
      v28._countAndFlagsBits = Data.description.getter(v79, v77);
      String.append(_:)(v28);
      sub_1001648C4(v29, v30);
      v31 = v95;
      v80 = v94;
      sub_100165E64();
      v32 = sub_100170814(v95);
      v33 = Logger.logObject.getter(v32);
      v34 = v13;
      v35 = os_log_type_enabled(v33, (os_log_type_t)v13);
      v36 = v2[23];
      v37 = v2[20];
      if (v35)
      {
        v81 = v2[20];
        v78 = v2[19];
        v38 = (uint8_t *)sub_100165DA4(12);
        v76 = v36;
        v39 = sub_100165DA4(32);
        v94 = v39;
        *(_DWORD *)v38 = 136315138;
        swift_bridgeObjectRetain(v31);
        v40 = sub_10016FE60(v80, v31, &v94);
        v41 = sub_100181318(v40, v2 + 14);
        sub_100180F68((uint64_t)v41, (uint64_t)(v2 + 15));
        sub_100170848(v31);
        sub_100165E04((void *)&_mh_execute_header, v33, v34, "Nearby - %s", v38);
        sub_100165DFC(v39, v42, (uint64_t)&type metadata for Any + 8);
        sub_100165D98(v39);
        sub_100165D98((uint64_t)v38);

        v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 8))(v76, v78);
        sub_1001707FC(v43, v44);
      }
      else
      {
        sub_10017081C(v95);

        v66 = sub_100181338(v36, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
        sub_1001707FC(v66, v67);
      }
      v69 = v2[15];
      v68 = v2[16];
      v70 = String._bridgeToObjectiveC()();
      v71 = String._bridgeToObjectiveC()();
      sub_1001771DC(v69, v68);
      sub_100180700(v90, (uint64_t)v6, v88, v87, v86, v85, v84, v83, v14, v82);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      sub_10016D13C((uint64_t)isa, v73);
      objc_msgSend(v93, "playerFound:deviceID:discoveryInfo:", v70, v71, isa);

    }
    else
    {
      v56 = static os_log_type_t.debug.getter(v4);
      v57 = sub_100165E64();
      v58 = Logger.logObject.getter(v57);
      v59 = os_log_type_enabled(v58, v56);
      v60 = v2[22];
      v62 = v2[19];
      v61 = v2[20];
      if (v59)
      {
        v92 = v2[22];
        v63 = (uint8_t *)sub_100165DA4(12);
        v89 = v62;
        v64 = sub_100165DA4(32);
        *(_DWORD *)v63 = 136315138;
        v94 = v64;
        *v3 = sub_100180DC8(0xD000000000000037, (uint64_t)"Cannot handle hello response without valid remote info.");
        sub_100180E08((uint64_t)v3, (uint64_t)(v2 + 14));
        sub_100165E04((void *)&_mh_execute_header, v58, v56, "Nearby - %s", v63);
        sub_100165DFC(v64, v65, (uint64_t)&type metadata for Any + 8);
        sub_100165D98(v64);
        sub_100165D98((uint64_t)v63);

        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v92, v89);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
      }
    }
    swift_unknownObjectRelease();
  }
  else
  {
    static os_log_type_t.debug.getter(0);
    v45 = sub_100165E64();
    v46 = Logger.logObject.getter(v45);
    v47 = sub_100181240(v46);
    v49 = v2[20];
    v48 = v2[21];
    v50 = v2[19];
    if (v47)
    {
      v91 = v2[19];
      v51 = (uint8_t *)sub_100165DA4(12);
      v94 = sub_100165DA4(32);
      sub_10018144C(4.8149e-34);
      sub_100181558();
      v53 = sub_100180DC8(v52 + 27, (uint64_t)"Cannot handle hello response without delegate.");
      v54 = sub_100181638(v53);
      sub_100180F70((uint64_t)v54, (uint64_t)v3);
      sub_100165E04((void *)&_mh_execute_header, v46, v1, "Nearby - %s", v51);
      sub_100165DFC(v94, v55, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v94);
      sub_100165D98((uint64_t)v51);

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v91);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    }
  }
  v74 = v2[21];
  swift_task_dealloc(v2[23]);
  sub_10016D2A8();
  swift_task_dealloc(v74);
  sub_1001810A0();
  __asm { BR              X0 }
}

uint64_t sub_10017FB24(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  return swift_task_switch(sub_10017FBA0, v1, 0);
}

uint64_t sub_10017FBA0(uint64_t a1)
{
  _QWORD *v1;
  os_log_type_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104[2];

  v3 = (_QWORD *)v1[5];
  if (!v3[4])
  {
    static os_log_type_t.debug.getter(a1);
    v42 = sub_100165E64();
    v43 = Logger.logObject.getter(v42);
    v44 = sub_100180D2C(v43);
    v46 = v1[8];
    v45 = v1[9];
    v47 = v1[7];
    if (v44)
    {
      v97 = v1[9];
      v48 = (uint8_t *)sub_100165DA4(12);
      v49 = sub_100165DA4(32);
      v104[0] = v49;
      *(_DWORD *)v48 = 136315138;
      sub_1001811CC();
      v51 = sub_1001814C8(v50 + 30, (uint64_t)"Cannot send hello response without nwConnection.", v79, v80, v81, v82, v84, v86, v88, v90, v92, v97, v47);
      v52 = sub_100181638(v51);
      sub_100180F70((uint64_t)v52, (uint64_t)(v1 + 3));
      sub_100165E04((void *)&_mh_execute_header, v43, (os_log_type_t)v3, "Nearby - %s", v48);
      sub_100165DFC(v49, v53, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v49);
      sub_100165D98((uint64_t)v48);

      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v98, v101);
      goto LABEL_14;
    }

    v76 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v77 = v45;
    goto LABEL_13;
  }
  v4 = (void *)v3[6];
  if (!v4)
  {
    v54 = v1[10];
    static os_log_type_t.debug.getter(a1);
    v55 = sub_100165E64();
    v56 = Logger.logObject.getter(v55);
    v57 = sub_1001810F0(v56);
    v58 = v1[10];
    v47 = v1[7];
    v59 = v1[8];
    if (v57)
    {
      v102 = v1[10];
      v60 = (uint8_t *)sub_100165DA4(12);
      v99 = v47;
      v61 = sub_100165DA4(32);
      v104[0] = v61;
      *(_DWORD *)v60 = 136315138;
      sub_1001811CC();
      v1[3] = sub_1001814C8(v62 + 35, (uint64_t)"Cannot send hello response without valid remote info.", v79, v80, v81, v82, v84, v86, v88, v90, v92, v99, v102);
      v63 = sub_1001811E0();
      sub_100180E08(v63, v64);
      sub_100165E04((void *)&_mh_execute_header, v54, v2, "Nearby - %s", v60);
      sub_100165DFC(v61, v65, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v61);
      sub_100165D98((uint64_t)v60);

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v103, v100);
      goto LABEL_14;
    }

    v76 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v77 = v58;
LABEL_13:
    v76(v77, v47);
LABEL_14:
    sub_10018161C();
    sub_10016D2A8();
    sub_100180C98();
    sub_1001814D8();
    sub_10016D154();
    __asm { BR              X0 }
  }
  v5 = v3[14];
  v85 = v3[13];
  v87 = v3[12];
  v95 = v3[11];
  v6 = v3[8];
  v93 = v3[9];
  v89 = v3[10];
  v91 = v3[7];
  v7 = v3[5];
  sub_100181410();
  sub_100181548();
  sub_10016D5D8();
  sub_10016D21C();
  sub_1001621A4();
  sub_10018135C();
  v8 = sub_1001843B8(2);
  v1[12] = v8;
  v9 = sub_100161BD0(&qword_1003150E0);
  v10 = sub_100180DD8(v9);
  *(_OWORD *)(v10 + 16) = xmmword_100232EE0;
  *(_QWORD *)(v10 + 32) = v8;
  v104[0] = v10;
  specialized Array._endMutation()(v10);
  v11 = sub_100181608();
  sub_100165ED4(v11);
  sub_100165E90();
  v12 = sub_100180E88();
  v18 = NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)(v12, v13, v14, v15, v16, v104[0], v17);
  v1[13] = v18;
  v83 = static os_log_type_t.info.getter(v18);
  v104[0] = 0;
  v104[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(70);
  sub_1001811CC();
  v20._countAndFlagsBits = v19 + 16;
  v20._object = (void *)0x8000000100298930;
  String.append(_:)(v20);
  sub_10018135C();
  sub_100181698();
  sub_10016D2B0(v21, v22);
  sub_100180D4C();
  sub_100181548();
  v23._countAndFlagsBits = v7;
  v23._object = v4;
  String.append(_:)(v23);
  v24 = sub_100180700(v7, (uint64_t)v4, v91, v6, v93, v89, v95, v87, v85, v5);
  sub_10016D108(v24, v25);
  sub_100181174(18, 0x8000000100298660);
  v26._countAndFlagsBits = sub_10019B4F0();
  String.append(_:)(v26);
  sub_1001648C4(v27, v28);
  sub_100165E64();
  v29 = sub_100170814(0xE000000000000000);
  v30 = Logger.logObject.getter(v29);
  v31 = sub_100180D84(v30);
  v32 = v1[7];
  v33 = v1[8];
  if (v31)
  {
    v96 = v1[11];
    v34 = (uint8_t *)sub_100165DA4(12);
    v94 = v33;
    v35 = sub_100165DA4(32);
    v104[0] = v35;
    sub_100181508(4.8149e-34);
    sub_1001621A4();
    v37 = sub_100180E10(0, v36, v104);
    v38 = sub_100181318(v37, v1 + 4);
    sub_100181220((uint64_t)v38, (uint64_t)(v1 + 5));
    sub_100170848(0xE000000000000000);
    sub_100165E04((void *)&_mh_execute_header, v30, v83, "Nearby - %s", v34);
    sub_100165DFC(v35, v39, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v35);
    sub_100165D98((uint64_t)v34);

    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 8))(v96, v32);
  }
  else
  {
    sub_10017081C(0xE000000000000000);

    v66 = sub_100181664();
    v40 = v68(v66, v67);
  }
  sub_1001648C4(v40, v41);
  v69 = (_QWORD *)swift_task_alloc(dword_10031615C);
  v1[14] = v69;
  *v69 = v1;
  v69[1] = sub_1001800E0;
  sub_10016D154();
  return sub_10019AD5C(v70, v71, v72, v73, v74);
}

uint64_t sub_1001800E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_100180C8C();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_100180118()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  swift_release(*(_QWORD *)(v0 + 104));
  sub_100165E88();
  sub_10018161C();
  sub_10016D2A8();
  sub_100180C98();
  v1 = (uint64_t (*)(void))sub_1001814D8();
  return sub_100165E20(v1);
}

uint64_t type metadata accessor for PeerDiscovery()
{
  return objc_opt_self(GKPeerDiscovery);
}

uint64_t destroy for PeerDiscoveryInfo(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1], a2);
  swift_bridgeObjectRelease(a1[3], v3);
  swift_bridgeObjectRelease(a1[5], v4);
  swift_bridgeObjectRelease(a1[7], v5);
  return swift_bridgeObjectRelease(a1[9], v6);
}

_QWORD *initializeWithCopy for PeerDiscoveryInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *assignWithCopy for PeerDiscoveryInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6);
  a1[2] = a2[2];
  v7 = a2[3];
  v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8, v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11, v12);
  a1[6] = a2[6];
  v13 = a2[7];
  v14 = a1[7];
  a1[7] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14, v15);
  a1[8] = a2[8];
  v16 = a2[9];
  v17 = a1[9];
  a1[9] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17, v18);
  return a1;
}

void *initializeWithTake for PeerDiscoveryInfo(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

_QWORD *assignWithTake for PeerDiscoveryInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5, a2);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7, v8);
  v9 = a2[5];
  v10 = a1[5];
  a1[4] = a2[4];
  a1[5] = v9;
  swift_bridgeObjectRelease(v10, v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[6] = a2[6];
  a1[7] = v12;
  swift_bridgeObjectRelease(v13, v14);
  v15 = a2[9];
  v16 = a1[9];
  a1[8] = a2[8];
  a1[9] = v15;
  swift_bridgeObjectRelease(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for PeerDiscoveryInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PeerDiscoveryInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerDiscoveryInfo()
{
  return &type metadata for PeerDiscoveryInfo;
}

uint64_t sub_10018041C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100180460()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc(dword_100315114);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100180C2C;
  v2 = sub_100180E38();
  return v3(v2);
}

uint64_t sub_1001804E0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_1001815C8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100180F44(v1, (uint64_t)sub_100180C2C);
  return sub_100180D74(v2, v3, v4);
}

uint64_t sub_100180520()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100180554()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc(dword_100315134);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100180C2C;
  v2 = sub_100180E38();
  return v3(v2);
}

uint64_t sub_1001805C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_1001815C8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100180F44(v1, (uint64_t)sub_100180600);
  return sub_100180D74(v2, v3, v4);
}

uint64_t sub_100180600()
{
  uint64_t v0;

  sub_100165DBC();
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100180638()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100180664()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)sub_1001815C8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100180F44(v1, (uint64_t)sub_100180C2C);
  return sub_100180D74(v2, v3, v4);
}

uint64_t sub_1001806A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a10);
  }
  return result;
}

uint64_t sub_100180700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2, a2);
    swift_bridgeObjectRelease(a4, v13);
    swift_bridgeObjectRelease(a6, v14);
    swift_bridgeObjectRelease(a8, v15);
    return swift_bridgeObjectRelease(a10, v16);
  }
  return result;
}

void sub_10018075C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  sub_100161BD0(a3);
  v3 = sub_100181100();
  v4(v3);
  sub_10016219C();
}

uint64_t sub_100180798(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *a2;
  v7 = *(_OWORD *)(a2 + 1);
  v8 = a2[3];
  v32 = *((_OWORD *)a2 + 2);
  v33 = v7;
  v9 = a2[6];
  v31 = *(_OWORD *)(a2 + 7);
  v10 = a2[9];
  v11 = type metadata accessor for NWEndpoint(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a4 + 24) = 0;
  v15 = swift_unknownObjectWeakInit(a4 + 16, 0);
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_QWORD *)(a4 + 24) = &off_1002C5C70;
  swift_unknownObjectWeakAssign(v15, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  type metadata accessor for NWParameters(0);
  v16 = sub_1001AF940();
  v17 = type metadata accessor for NWConnection(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = NWConnection.init(to:using:)(v14, v16);
  swift_release(a3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  v19 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(a4 + 32) = v18;
  swift_release(v19);
  v20 = *(_QWORD *)(a4 + 40);
  v21 = *(_QWORD *)(a4 + 48);
  v22 = *(_QWORD *)(a4 + 56);
  v23 = *(_QWORD *)(a4 + 64);
  v24 = *(_QWORD *)(a4 + 72);
  v25 = *(_QWORD *)(a4 + 80);
  v26 = *(_QWORD *)(a4 + 88);
  v27 = *(_QWORD *)(a4 + 96);
  v28 = *(_QWORD *)(a4 + 104);
  v29 = *(_QWORD *)(a4 + 112);
  *(_QWORD *)(a4 + 40) = v34;
  *(_OWORD *)(a4 + 48) = v33;
  *(_QWORD *)(a4 + 64) = v8;
  *(_OWORD *)(a4 + 72) = v32;
  *(_QWORD *)(a4 + 88) = v9;
  *(_OWORD *)(a4 + 96) = v31;
  *(_QWORD *)(a4 + 112) = v10;
  sub_100180700(v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
  return a4;
}

_QWORD *sub_100180940(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  return a1;
}

uint64_t sub_10018098C(uint64_t a1)
{
  return sub_10017A87C(a1) & 1;
}

uint64_t sub_1001809A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_100315200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1001809F0(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }
  sub_10016219C();
}

uint64_t sub_100180A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100181418();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100180AA4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100181418() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_100315214);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100180C2C;
  return sub_10017BE78(a1, v5, v6, v7, v8);
}

void sub_100180B34(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_100161BD0(a2);
  sub_100180CE4(v2);
  sub_10016219C();
}

uint64_t sub_100180B5C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100180B80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100316F24);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100180BF0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100316F20 + dword_100316F20))(a1, v4);
}

uint64_t sub_100180BF0()
{
  uint64_t v0;

  sub_100165DBC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100180C38(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100180C54@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100180C68(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100180C84()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_100180C98()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100180CA0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100180CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0);
}

uint64_t sub_100180CD4@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t sub_100180CE4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100180CF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v1);
}

BOOL sub_100180D0C(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100180D1C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  unint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  return sub_10016FE60(v4, v3, (uint64_t *)va);
}

BOOL sub_100180D2C(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100180D38(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100180D4C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x656369766564202CLL;
  v0._object = (void *)0xEC000000203A4449;
  String.append(_:)(v0);
}

uint64_t sub_100180D6C()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100180D74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

BOOL sub_100180D84(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100180D8C()
{
  return type metadata accessor for Logger(0);
}

uint64_t sub_100180DB0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void sub_100180DBC(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_100180DC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10016FE60(a1, (a2 - 32) | 0x8000000000000000, (uint64_t *)(v2 - 88));
}

uint64_t sub_100180DD8(uint64_t a1)
{
  return swift_allocObject(a1, 40, 7);
}

uint64_t sub_100180DE4()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[16] + 96))(v0[17], v0[15]);
}

uint64_t sub_100180E00()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100180E08(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_100180E10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_10016FE60(a1, v3, a3);
}

uint64_t sub_100180E2C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100180E38()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100180E50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 96))(v1);
}

uint64_t sub_100180E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4[26] = a2;
  v4[27] = v3;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v4[16] + 16))(v4[18], *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4[16] + 72) * v2, v4[15]);
}

uint64_t sub_100180E88()
{
  return 0x73654D6F6C6C6548;
}

uint64_t sub_100180ED4(uint64_t a1)
{
  return sub_10017A150(a1);
}

uint64_t sub_100180EF0(uint64_t a1)
{
  return sub_100179A9C(a1);
}

uint64_t sub_100180F0C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100180F28@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_100180F38@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_100180F44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100180F60()
{
  return static GKLog.match.getter();
}

uint64_t sub_100180F68(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_100180F70(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

BOOL sub_100180FA4(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100180FAC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 184));
}

void sub_100180FC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100180FCC()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 192));
}

uint64_t sub_100180FE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v1 + *(int *)(a1 + 48), v3);
}

void sub_100181018(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000035;
  String.append(_:)(v1);
}

uint64_t sub_10018107C@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return v1(*(_QWORD *)(v2 + 104), *(_QWORD *)(a1 + 48) + v3 * v4, *(_QWORD *)(v2 + 88));
}

uint64_t sub_100181098(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_1001810BC()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1001810C4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

BOOL sub_1001810D0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

BOOL sub_1001810E0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

BOOL sub_1001810F0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100181100()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10018110C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100170728(v0, v1);
}

uint64_t sub_100181158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return swift_getErrorValue(v0, v2, v1);
}

void sub_100181174(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_10018117C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return sub_10016FE60(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, a3);
}

uint64_t sub_100181184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return a11;
}

void sub_100181194()
{
  _StringGuts.grow(_:)(112);
}

uint64_t sub_1001811AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v1, v3, a1);
}

uint64_t sub_1001811C4(uint64_t a1)
{
  return swift_unknownObjectWeakInit(a1, 0);
}

void sub_1001811D8(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_1001811E0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001811EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_1001811F4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100181208()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[27] + 8))(v0[28], v0[26]);
}

uint64_t sub_100181220(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_100181238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_bridgeObjectRelease(a13, a2);
}

BOOL sub_100181240(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void sub_10018124C()
{
  Swift::String v0;

  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_100181258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_100181260(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return _print_unlocked<A, B>(_:_:)(a1, v1, v2);
}

void sub_10018126C(_OWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100166D80(v1, a1);
}

uint64_t sub_100181274()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t sub_100181290()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

BOOL sub_1001812AC(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1001812B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001812D0()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_1001812E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_10016FE60(a1, v3, a3);
}

uint64_t sub_1001812EC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1001812F4()
{
  uint64_t v0;

  return swift_endAccess(v0);
}

uint64_t sub_1001812FC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10016FF44(v1, v0);
}

uint64_t sub_100181308()
{
  return Logger.logObject.getter();
}

uint64_t sub_100181310()
{
  return static GKLog.match.getter();
}

_QWORD *sub_100181318@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return a2;
}

uint64_t sub_100181324()
{
  return type metadata accessor for PeerListener();
}

uint64_t sub_100181338@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100181340()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10018135C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100181364(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_10016FE60(a1, v3, a3);
}

uint64_t sub_100181378()
{
  return Logger.logObject.getter();
}

uint64_t sub_100181380()
{
  return static GKLog.match.getter();
}

void sub_100181388()
{
  _StringGuts.grow(_:)(49);
}

uint64_t sub_100181390()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 256));
}

NSString sub_1001813B8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1001813F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v0, v1);
}

uint64_t sub_100181408()
{
  return type metadata accessor for PeerConnection();
}

uint64_t sub_100181410()
{
  return type metadata accessor for NWProtocolFramer.Message(0);
}

uint64_t sub_100181418()
{
  return type metadata accessor for NWBrowser.Result(0);
}

uint64_t sub_10018143C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, 28, a3, 6, 0);
}

void sub_10018144C(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_10018145C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 104))();
}

uint64_t sub_100181464@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_10018146C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100181474()
{
  uint64_t v0;

  return v0;
}

void sub_100181480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100166D50(v1, v0, v2);
}

void sub_100181490(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_100181498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return sub_10016FE60(a1, (a2 - 32) | 0x8000000000000000, (uint64_t *)va);
}

void sub_1001814A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1001814B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1001814C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  return sub_10016FE60(a1, (a2 - 32) | 0x8000000000000000, (uint64_t *)va);
}

uint64_t sub_1001814D8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

BOOL sub_1001814E4(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1001814EC()
{
  uint64_t v0;

  return v0;
}

void sub_1001814F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100166D50(v2, v1, v0);
}

void sub_100181508(float a1)
{
  float *v1;

  *v1 = a1;
}

void sub_100181538()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 88) = 0;
  *(_QWORD *)(v0 - 80) = 0xE000000000000000;
}

uint64_t sub_100181548()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100181550()
{
  uint64_t *v0;

  return sub_100161BD0(v0);
}

_QWORD *sub_100181564(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return sub_100180940(v2, a2);
}

uint64_t sub_10018156C()
{
  uint64_t v0;

  return Error.localizedDescription.getter(*(_QWORD *)(v0 - 32), *(_QWORD *)(v0 - 24));
}

uint64_t sub_10018158C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 72));
}

void sub_100181594(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a2 & 0xFFFF0000FFFFLL | 0xEB00000000200000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1001815A0()
{
  return Logger.logObject.getter();
}

uint64_t sub_1001815A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t), uint64_t a13)
{
  return a12(a13, a10);
}

uint64_t sub_1001815C8()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_1001815D0()
{
  return static GKLog.match.getter();
}

void *sub_1001815DC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t sub_1001815E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  return sub_100180700(a1, a2, a3, a4, a5, v10, a7, v11, a9, a10);
}

uint64_t sub_1001815F0(uint64_t a1)
{
  uint64_t v1;

  return swift_unknownObjectWeakAssign(a1, v1);
}

uint64_t sub_1001815F8()
{
  return type metadata accessor for NWEndpoint(0);
}

uint64_t sub_100181600()
{
  return type metadata accessor for NWBrowser.Result.Change.Flags(0);
}

uint64_t sub_100181608()
{
  return type metadata accessor for NWConnection.ContentContext(0);
}

uint64_t sub_100181610()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 136));
}

uint64_t sub_10018161C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 88));
}

uint64_t sub_100181628@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100181630(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_10016FE60(a1, v3, a3);
}

_QWORD *sub_100181638(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return v1;
}

uint64_t sub_100181658()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_100181664()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100181670@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectWeakLoadStrong(a1 + 112);
}

uint64_t sub_100181678(uint64_t a1)
{
  return swift_allocObject(a1, 192, 15);
}

uint64_t sub_100181684@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100181690()
{
  uint64_t v0;

  return swift_endAccess(v0);
}

void sub_100181698()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1001816A4()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1001816AC()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1001816B4()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1001816BC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_10016FF44(v0, v1);
}

uint64_t sub_1001816C8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1 + 16;
}

uint64_t sub_1001816DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_1001816E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 128) = v1;
  return swift_release(v2);
}

uint64_t sub_1001816F4()
{
  return Logger.logObject.getter();
}

void sub_1001816FC(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_100181704()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 240);
}

uint64_t sub_100181718()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 192);
}

uint64_t sub_10018172C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = 0;
  return swift_unknownObjectWeakAssign(a1, v2);
}

uint64_t sub_10018174C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 120) = v0;
  return swift_release(v2);
}

uint64_t sub_100181758()
{
  return static GKLog.match.getter();
}

uint64_t sub_100181788()
{
  uint64_t v0;

  return swift_endAccess(v0);
}

uint64_t sub_100181794(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t sub_1001817A0(uint64_t a1, uint64_t a2)
{
  return Dictionary.description.getter(a1, a2, a2);
}

uint64_t sub_1001817A8()
{
  return sub_10017C068();
}

void sub_1001817B4()
{
  _StringGuts.grow(_:)(52);
}

void sub_1001817BC(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void (**v23)(_QWORD, _QWORD);
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  char *v43;
  Class isa;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint8_t *v51;
  int v52;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE v66[40];
  __int128 v67;
  uint64_t v68;

  v63 = a2;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v61 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v61 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v61 - v16;
  _Block_copy(a3);
  v18 = _Block_copy(a3);
  v19 = static GKLog.daemon.getter(v18);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    v62 = v9;
    v23 = a3;
    v24 = v12;
    v25 = v5;
    v26 = v15;
    v27 = a1;
    v28 = v22;
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "FriendBulletin loadBulletinsForPushNotification:", v22, 2u);
    v29 = v28;
    a1 = v27;
    v15 = v26;
    v5 = v25;
    v12 = v24;
    a3 = v23;
    v9 = v62;
    swift_slowDealloc(v29, -1, -1);
  }

  v30 = *(void (**)(char *, uint64_t))(v6 + 8);
  v30(v17, v5);
  v64 = 99;
  v65 = 0xE100000000000000;
  AnyHashable.init<A>(_:)(&v64);
  sub_100166D80(a1, &v67);
  sub_1001638F4((uint64_t)v66);
  if (!v68)
  {
    v31 = sub_10016FF88((uint64_t)&v67, &qword_1003159B0);
LABEL_15:
    v39 = static GKLog.daemon.getter(v31);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.info.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "FriendBulletin loadBulletinsForPushNotification: failed to get category", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    v43 = v9;
LABEL_18:
    v30(v43, v5);
    isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class))a3)[2](a3, isa);

    goto LABEL_19;
  }
  v31 = swift_dynamicCast(&v64, &v67, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
  if ((v31 & 1) == 0 || v64 != 52)
    goto LABEL_15;
  v64 = 116;
  v65 = 0xE100000000000000;
  AnyHashable.init<A>(_:)(&v64);
  sub_100166D80(a1, &v67);
  sub_1001638F4((uint64_t)v66);
  if (v68)
  {
    v32 = swift_dynamicCast(&v64, &v67, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if ((v32 & 1) != 0)
    {
      v35 = v64;
      v34 = v65;
      if (v64 == 0x64657469766E69 && v65 == 0xE700000000000000)
      {
        v37 = a1;
        v38 = 0xE700000000000000;
        goto LABEL_25;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, 0x64657469766E69, 0xE700000000000000, 0) & 1) != 0)
      {
        v37 = a1;
        v38 = v34;
LABEL_25:
        swift_bridgeObjectRelease(v38, v33);
        v52 = 1;
        goto LABEL_26;
      }
      v37 = a1;
      if (v35 == 0x6465747065636361 && v34 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease(0xE800000000000000, v33);
        v52 = 0;
        goto LABEL_26;
      }
      v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v34, 0x6465747065636361, 0xE800000000000000, 0);
      v56 = swift_bridgeObjectRelease(v34, v55);
      v52 = 0;
      if ((v54 & 1) != 0)
      {
LABEL_26:
        _Block_copy(a3);
        sub_100181DCC(v37, v52, v63, a3);
        goto LABEL_19;
      }
      v57 = static GKLog.daemon.getter(v56);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.info.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "FriendBulletin loadBulletinsForPushNotification: unknown type", v60, 2u);
        swift_slowDealloc(v60, -1, -1);
      }

      v43 = v15;
      goto LABEL_18;
    }
  }
  else
  {
    v32 = sub_10016FF88((uint64_t)&v67, &qword_1003159B0);
  }
  v45 = v63;
  v46 = static GKLog.daemon.getter(v32);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.info.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = a1;
    v50 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "FriendBulletin loadBulletinsForPushNotification: failed to get type, attempting to parse using the old protocol", v50, 2u);
    v51 = v50;
    a1 = v49;
    swift_slowDealloc(v51, -1, -1);
  }

  v30(v12, v5);
  _Block_copy(a3);
  sub_100182958(a1, v45, a3);
LABEL_19:
  _Block_release(a3);
  _Block_release(a3);
  _Block_release(a3);
}

void sub_100181DCC(uint64_t a1, int a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  uint64_t v22;
  objc_class *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  objc_class *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  Class isa;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  Class v62;
  objc_class *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[40];
  __int128 v69;
  uint64_t v70;
  uint64_t v71[14];
  _QWORD v72[14];
  _BYTE v73[112];
  uint64_t v74[6];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[16];
  _OWORD v86[2];

  v64 = a2;
  v7 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v65 - 8);
  v11 = __chkstk_darwin(v65);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v63 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v63 - v17;
  v19 = swift_allocObject(&unk_1002C5E88, 24, 7);
  *(_QWORD *)(v19 + 16) = a4;
  _Block_copy(a4);
  _Block_copy(a4);
  sub_1001A2110(a1, v71);
  sub_100183EDC((uint64_t)v71, (uint64_t)v72, &qword_100315260);
  if (v72[1] == 1)
  {
    _Block_copy(a4);
    sub_100182958(a1, a3, a4);
    goto LABEL_28;
  }
  memcpy(v73, v72, sizeof(v73));
  sub_100183EDC((uint64_t)v73, (uint64_t)v74, &qword_100315268);
  sub_100183EDC((uint64_t)v74, (uint64_t)&v78, &qword_100315268);
  if (!*((_QWORD *)&v78 + 1))
  {
    v39 = sub_100183D70(v71);
    v40 = static GKLog.daemon.getter(v39);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.info.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "FriendBulletin loadBulletinsForPushNotification: failed to get player from relationships", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v65);
    goto LABEL_20;
  }
  v81 = v78;
  v82 = v79;
  v83 = v80;
  v75 = v78;
  v76 = v79;
  v77 = v80;
  sub_100183E6C(v74);
  sub_100183D70(v71);
  type metadata accessor for FriendBulletin();
  v20 = swift_bridgeObjectRetain(a1);
  v21 = sub_100182534(v20);
  if (!v21)
  {
    v86[0] = v81;
    sub_1001768AC((uint64_t)v86, v22);
    sub_100183EDC((uint64_t)&v82, (uint64_t)&v69, &qword_100314D20);
    sub_1001768AC((uint64_t)&v69, v44);
    sub_100183EDC((uint64_t)&v83, (uint64_t)v68, &qword_100314D20);
    v46 = sub_1001768AC((uint64_t)v68, v45);
    v47 = static GKLog.daemon.getter(v46);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.info.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "FriendBulletin loadBulletinsForPushNotification: failed to create bulletin", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v65);
LABEL_20:
    isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class))a4)[2](a4, isa);

    goto LABEL_28;
  }
  v23 = v21;
  *(_QWORD *)&v86[0] = 0x656C746974;
  *((_QWORD *)&v86[0] + 1) = 0xE500000000000000;
  AnyHashable.init<A>(_:)(v86);
  sub_100166D80(a1, &v69);
  sub_1001638F4((uint64_t)v68);
  v63 = v23;
  if (v70)
  {
    if ((swift_dynamicCast(&v66, &v69, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    {
LABEL_24:
      v84 = v81;
      sub_1001768AC((uint64_t)&v84, v25);
      sub_100183EDC((uint64_t)&v82, (uint64_t)v85, &qword_100314D20);
      sub_1001768AC((uint64_t)v85, v55);
      sub_100183EDC((uint64_t)&v83, (uint64_t)v86, &qword_100314D20);
      v54 = sub_1001768AC((uint64_t)v86, v56);
      goto LABEL_25;
    }
    v27 = v66;
    v26 = v67;
    *(_QWORD *)&v86[0] = 0x6567617373656DLL;
    *((_QWORD *)&v86[0] + 1) = 0xE700000000000000;
    AnyHashable.init<A>(_:)(v86);
    sub_100166D80(a1, &v69);
    sub_1001638F4((uint64_t)v68);
    if (v70)
    {
      if ((swift_dynamicCast(&v66, &v69, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
      {
LABEL_23:
        swift_bridgeObjectRelease(v26, v29);
        goto LABEL_24;
      }
      swift_bridgeObjectRelease(v67, v29);
      *(_QWORD *)&v86[0] = 0xD000000000000010;
      *((_QWORD *)&v86[0] + 1) = 0x8000000100298E90;
      AnyHashable.init<A>(_:)(v86);
      sub_100166D80(a1, &v69);
      sub_1001638F4((uint64_t)v68);
      if (v70)
      {
        if ((swift_dynamicCast(&v66, &v69, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
        {
          v30 = v66;
          v31 = v67;
          v32 = v27;
          v33 = v63;
          sub_1001C0BBC(v32, v26, v63);
          sub_1001C0BC8(v30, v31, v33);
          if ((v64 & 1) != 0)
            sub_100183090(v81, *((unint64_t *)&v81 + 1));
          v34 = type metadata accessor for TaskPriority(0);
          sub_100161B54((uint64_t)v9, 1, 1, v34);
          v35 = swift_allocObject(&unk_1002C5EB0, 104, 7);
          *(_QWORD *)(v35 + 16) = 0;
          *(_QWORD *)(v35 + 24) = 0;
          v36 = v76;
          *(_OWORD *)(v35 + 32) = v75;
          *(_OWORD *)(v35 + 48) = v36;
          *(_OWORD *)(v35 + 64) = v77;
          *(_QWORD *)(v35 + 80) = v33;
          *(_QWORD *)(v35 + 88) = sub_100183D68;
          *(_QWORD *)(v35 + 96) = v19;
          v37 = v33;
          swift_retain(v19);
          sub_1001BDE9C();
          swift_release(v38);

          goto LABEL_28;
        }
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease(v26, v28);
  }
  v84 = v81;
  sub_1001768AC((uint64_t)&v84, v24);
  sub_100183EDC((uint64_t)&v82, (uint64_t)v85, &qword_100314D20);
  sub_1001768AC((uint64_t)v85, v52);
  sub_100183EDC((uint64_t)&v83, (uint64_t)v86, &qword_100314D20);
  sub_1001768AC((uint64_t)v86, v53);
  v54 = sub_10016FF88((uint64_t)&v69, &qword_1003159B0);
LABEL_25:
  v57 = v65;
  v58 = static GKLog.daemon.getter(v54);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.info.getter(v59);
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v61 = 0;
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "FriendBulletin loadBulletinsForPushNotification: failed to get title or message", v61, 2u);
    swift_slowDealloc(v61, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v57);
  v62 = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(_QWORD, Class))a4)[2](a4, v62);

LABEL_28:
  swift_release(v19);
  _Block_release(a4);
  _Block_release(a4);
}

objc_class *sub_100182534(uint64_t a1)
{
  objc_class *v1;
  NSDictionary v2;
  uint64_t v3;

  if (a1)
  {
    v2.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_10016D110((uint64_t)v2.super.isa, v3);
  }
  else
  {
    v2.super.isa = 0;
  }
  objc_msgSend(objc_allocWithZone(v1), "initWithPushNotification:", v2.super.isa);
  sub_100184198();
  return v1;
}

uint64_t sub_1001825AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7[7] = a6;
  v7[8] = a7;
  v7[6] = a5;
  v9 = type metadata accessor for URL(0);
  v7[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[10] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[11] = swift_task_alloc(v11);
  v7[12] = swift_task_alloc(v11);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100161BD0(&qword_100315B00) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[13] = swift_task_alloc(v12);
  v13 = swift_task_alloc(v12);
  v7[14] = v13;
  sub_100183EDC((uint64_t)(a4 + 4), (uint64_t)(v7 + 4), &qword_100314D20);
  sub_100183EDC((uint64_t)(v7 + 4), (uint64_t)(v7 + 2), &qword_100314D20);
  v14 = v7[3];
  if (v14)
  {
    v15 = v7[2];
    v17 = *a4;
    v16 = a4[1];
    v18 = (_QWORD *)swift_task_alloc(dword_10031633C);
    v7[15] = v18;
    *v18 = v7;
    v18[1] = sub_100182720;
    return sub_1001A57C8(v13, v15, v14, v17, v16);
  }
  else
  {
    v20 = *a4;
    v21 = a4[1];
    v22 = (_QWORD *)swift_task_alloc(dword_10031634C);
    v7[16] = v22;
    *v22 = v7;
    v22[1] = sub_100182758;
    return sub_1001A5C2C(v13, v20, v21);
  }
}

uint64_t sub_100182720()
{
  sub_100165E44();
  sub_100165DBC();
  return sub_10016D26C((uint64_t)sub_100182790, 0, 0);
}

uint64_t sub_100182758()
{
  sub_100165E44();
  sub_100165DBC();
  return sub_10016D26C((uint64_t)sub_100182790, 0, 0);
}

uint64_t sub_100182790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 72);
  sub_100183FDC(*(_QWORD *)(v0 + 112), v1);
  if (sub_10016445C(v1, 1, v2) == 1)
  {
    sub_10016FF88(*(_QWORD *)(v0 + 104), &qword_100315B00);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 88);
    v3 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 80);
    v7 = *(void **)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 32))(v3, *(_QWORD *)(v0 + 104), v5);
    v8 = sub_100161BD0(&qword_1003150E0);
    v9 = swift_allocObject(v8, 40, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100232EE0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3, v5);
    v10 = objc_allocWithZone((Class)type metadata accessor for BulletinAttachment(0));
    v11 = sub_1001AFDFC(0x656D686361747461, 0xEC000000315F746ELL, v4, 1);
    *(_QWORD *)(v9 + 32) = v11;
    specialized Array._endMutation()(v11);
    sub_1001C0BD4(v9, v7);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  }
  v13 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(uint64_t (**)(uint64_t))(v0 + 56);
  v17 = *(void **)(v0 + 48);
  v18 = sub_100161BD0(&qword_100315280);
  v19 = sub_100184174(v18);
  *(_OWORD *)(v19 + 16) = xmmword_100232EF0;
  *(_QWORD *)(v19 + 56) = type metadata accessor for FriendBulletin();
  *(_QWORD *)(v19 + 32) = v17;
  v20 = v17;
  v21 = v16(v19);
  sub_1001811EC(v21, v22);
  sub_10016FF88(v12, &qword_100315B00);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100182958(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  objc_class *v25;
  unint64_t v26;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  Class v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE v46[40];
  __int128 v47;
  uint64_t v48;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v43 - v10;
  v12 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_1002C5ED8, 24, 7);
  *(_QWORD *)(v15 + 16) = a3;
  type metadata accessor for FriendBulletin();
  _Block_copy(a3);
  v16 = swift_bridgeObjectRetain(a1);
  v17 = (uint64_t)sub_100182534(v16);
  if (!v17)
    goto LABEL_11;
  isa = (Class)v17;
  v44 = 0x656C746974;
  v45 = 0xE500000000000000;
  AnyHashable.init<A>(_:)(&v44);
  sub_100166D80(a1, &v47);
  sub_1001638F4((uint64_t)v46);
  if (!v48)
  {

    v17 = sub_10016FF88((uint64_t)&v47, &qword_1003159B0);
LABEL_11:
    v29 = static GKLog.daemon.getter(v17);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "FriendBulletin loadBulletinsForPushNotification: failed to create bulletin", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class))a3)[2](a3, isa);
    goto LABEL_14;
  }
  if ((swift_dynamicCast(&v44, &v47, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {

    goto LABEL_11;
  }
  v20 = v44;
  v19 = v45;
  v44 = 26991;
  v45 = 0xE200000000000000;
  AnyHashable.init<A>(_:)(&v44);
  sub_100166D80(a1, &v47);
  sub_1001638F4((uint64_t)v46);
  if (v48)
  {
    if ((swift_dynamicCast(&v44, &v47, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v24 = v44;
      v23 = v45;
      sub_1001C0BBC(v20, v19, isa);
      v44 = 2036625250;
      v45 = 0xE400000000000000;
      v25 = isa;
      AnyHashable.init<A>(_:)(&v44);
      sub_100166D80(a1, &v47);
      sub_1001638F4((uint64_t)v46);
      if (v48)
      {
        if ((swift_dynamicCast(&v44, &v47, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
        {
          v26 = v45;
          v27 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v26, v28);
LABEL_22:
          -[objc_class setMessage:](v25, "setMessage:", v27);

          sub_100183090(v24, v23);
          swift_bridgeObjectRelease(v23, v39);
          v40 = type metadata accessor for TaskPriority(0);
          sub_100161B54((uint64_t)v14, 1, 1, v40);
          v41 = (_QWORD *)swift_allocObject(&unk_1002C5F00, 64, 7);
          v41[2] = 0;
          v41[3] = 0;
          v41[4] = v25;
          v41[5] = a1;
          v41[6] = sub_1001840CC;
          v41[7] = v15;
          swift_bridgeObjectRetain(a1);
          isa = v25;
          swift_retain(v15);
          sub_1001BDE9C();
          swift_release(v42);
          goto LABEL_14;
        }
      }
      else
      {
        sub_10016FF88((uint64_t)&v47, &qword_1003159B0);
      }
      v27 = 0;
      goto LABEL_22;
    }
    v33 = swift_bridgeObjectRelease(v19, v22);
  }
  else
  {
    swift_bridgeObjectRelease(v19, v21);
    v33 = sub_10016FF88((uint64_t)&v47, &qword_1003159B0);
  }
  v34 = static GKLog.daemon.getter(v33);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.info.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "FriendBulletin loadBulletinsForPushNotification: failed to get player id", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v38 = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(_QWORD, Class))a3)[2](a3, v38);

LABEL_14:
  swift_release(v15);
  _Block_release(a3);
}

uint64_t sub_100182E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  return swift_task_switch(sub_100182EA0, 0, 0);
}

uint64_t sub_100182EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)(v0 + 88) = 0x656D686361747461;
  v1 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 96) = 0xEB0000000073746ELL;
  AnyHashable.init<A>(_:)(v0 + 88);
  sub_100166D80(v1, (_OWORD *)(v0 + 56));
  sub_1001638F4(v0 + 16);
  if (!*(_QWORD *)(v0 + 80))
  {
    sub_10016FF88(v0 + 56, &qword_1003159B0);
    goto LABEL_5;
  }
  v2 = sub_100161BD0(&qword_100315298);
  if (!swift_dynamicCast(v0 + 104, v0 + 56, (char *)&type metadata for Any + 8, v2, 6))
  {
LABEL_5:
    v3 = _swiftEmptyArrayStorage;
    goto LABEL_6;
  }
  v3 = *(_QWORD **)(v0 + 104);
LABEL_6:
  *(_QWORD *)(v0 + 144) = v3;
  v4 = (_QWORD *)swift_task_alloc(dword_100316364);
  *(_QWORD *)(v0 + 152) = v4;
  *v4 = v0;
  v4[1] = sub_100182FB8;
  return sub_1001A263C((uint64_t)v3);
}

uint64_t sub_100182FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  v3 = swift_task_dealloc(v2);
  sub_10016D13C(v3, v4);
  return sub_10016D26C((uint64_t)sub_100183010, 0, 0);
}

uint64_t sub_100183010()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 128);
  v2 = *(void **)(v0 + 112);
  sub_1001C0BD4(*(_QWORD *)(v0 + 160), v2);
  v3 = sub_100161BD0(&qword_100315280);
  v4 = sub_100184174(v3);
  *(_OWORD *)(v4 + 16) = xmmword_100232EF0;
  *(_QWORD *)(v4 + 56) = type metadata accessor for FriendBulletin();
  *(_QWORD *)(v4 + 32) = v2;
  v5 = v2;
  v6 = v1(v4);
  sub_10016D110(v6, v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100183090(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("GKNotificationsCategoryActionsFriendRequest"));
  sub_100183BFC(v5, v6, v2);
  sub_100183240(a1, a2, &v29);
  v7 = sub_10018415C();
  v8 = sub_100184154(v7);
  sub_10018411C(v8);
  v9 = v35;
  v10 = v36;
  swift_bridgeObjectRetain(v36);
  sub_100183C4C(v9, v10, v8);
  swift_bridgeObjectRelease(v10, v11);
  objc_msgSend(v2, "setDefaultAction:", v8);
  v12 = sub_10018415C();
  v13 = sub_100184154(v12);
  sub_10018411C(v13);
  v14 = v29;
  v15 = v30;
  swift_bridgeObjectRetain(v30);
  sub_100183C4C(v14, v15, v13);
  swift_bridgeObjectRelease(v15, v16);
  objc_msgSend(v2, "setAcceptAction:", v13);
  v17 = sub_10018415C();
  v18 = sub_100184154(v17);
  sub_10018411C(v18);
  v19 = v31;
  v20 = v32;
  swift_bridgeObjectRetain(v32);
  sub_100183C4C(v19, v20, v18);
  swift_bridgeObjectRelease(v20, v21);
  objc_msgSend(v2, "setDeclineAction:", v18);
  v22 = sub_10018415C();
  v23 = sub_100184154(v22);
  sub_10018411C(v23);
  v24 = v33;
  v25 = v34;
  swift_bridgeObjectRetain(v34);
  sub_100183C90(&v29, v26);
  sub_100183C4C(v24, v25, v23);
  sub_1001811EC(v27, v28);
  objc_msgSend(v2, "setViewAction:", v23);

}

uint64_t sub_100183240@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for CharacterSet(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100162164();
  v10 = v9 - v8;
  v27 = a1;
  static CharacterSet.alphanumerics.getter();
  v11 = sub_100164810();
  StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v10, &type metadata for String, v11);
  v13 = v12;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  v15 = 0xE000000000000000;
  if (v13)
  {
    sub_10018418C();
    swift_bridgeObjectRelease(a2, v16);
    sub_100184128((uint64_t)"settings-navigation://com.apple.Settings.GameCenter/INBOX/accept?playerID=");
    v17 = v27;
    sub_10018418C();
    swift_bridgeObjectRelease(a2, v18);
    sub_100184128((uint64_t)"settings-navigation://com.apple.Settings.GameCenter/INBOX/ignore?playerID=");
    result = sub_10016D110(v19, v20);
    v21 = v27;
    v22 = a2;
    v23 = 0xD000000000000033;
    v24 = 0xD000000000000039;
    v25 = 0x8000000100298DB0;
    v26 = 0x8000000100298D70;
    v15 = a2;
  }
  else
  {
    v17 = 0;
    v21 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0xE000000000000000;
    v26 = 0xE000000000000000;
    v25 = 0xE000000000000000;
  }
  *a3 = v17;
  a3[1] = v15;
  a3[2] = v21;
  a3[3] = v22;
  a3[4] = v23;
  a3[5] = v26;
  a3[6] = v24;
  a3[7] = v25;
  return result;
}

id sub_10018339C(uint64_t a1, unint64_t a2)
{
  void *v2;
  char v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  id v28;
  void *v29;
  id v30;
  NSObject *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  id result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  void *v48;
  os_log_type_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSURL *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(char *, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  os_log_type_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;

  v6 = type metadata accessor for Logger(0);
  v90 = *(_QWORD *)(v6 - 8);
  v91 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v88 - v11;
  __chkstk_darwin(v10);
  v88 = (char *)&v88 - v13;
  v14 = sub_100161BD0(&qword_100315B00);
  __chkstk_darwin(v14);
  sub_100162164();
  v17 = v16 - v15;
  v18 = type metadata accessor for URL(0);
  v89 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_100162164();
  v21 = v20 - v19;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("GKDefault"));
  if (v22 == a1 && v23 == a2)
  {
    v27 = &selRef_defaultAction;
LABEL_8:
    swift_bridgeObjectRelease(a2, v23);
    goto LABEL_9;
  }
  v25 = sub_1001840D4(v22, v23);
  sub_100184110(v25, v26);
  if ((v3 & 1) != 0)
  {
    v27 = &selRef_defaultAction;
    goto LABEL_9;
  }
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("GKAccepted"));
  if (v35 == a1 && v23 == a2)
  {
    v27 = &selRef_acceptAction;
    goto LABEL_8;
  }
  v37 = sub_1001840D4(v35, v23);
  sub_100184110(v37, v38);
  if ((v3 & 1) != 0)
  {
    v27 = &selRef_acceptAction;
    goto LABEL_9;
  }
  v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("GKDeclined"));
  if (v68 == a1 && v23 == a2)
  {
    v27 = &selRef_declineAction;
    goto LABEL_8;
  }
  v70 = sub_1001840D4(v68, v23);
  sub_100184110(v70, v71);
  if ((v3 & 1) != 0)
  {
    v27 = &selRef_declineAction;
    goto LABEL_9;
  }
  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("GKView"));
  if (v74 == a1 && v23 == a2)
  {
    v27 = &selRef_viewAction;
    goto LABEL_8;
  }
  v76 = sub_1001840D4(v74, v23);
  v28 = (id)sub_100184110(v76, v77);
  if ((v3 & 1) == 0)
    goto LABEL_46;
  v27 = &selRef_viewAction;
LABEL_9:
  v28 = objc_msgSend(v2, *v27);
  if (!v28)
  {
LABEL_46:
    static GKLog.daemon.getter(v28);
    v78 = swift_bridgeObjectRetain_n(a2, 2);
    v79 = (void *)Logger.logObject.getter(v78);
    v80 = static os_log_type_t.info.getter(v79);
    if (sub_100184164(v80))
    {
      v81 = (_DWORD *)sub_100165DA4(12);
      v82 = sub_100165DA4(32);
      v92 = (id)v82;
      *v81 = 136315138;
      swift_bridgeObjectRetain(a2);
      v83 = sub_10016FE60(a1, a2, (uint64_t *)&v92);
      v84 = sub_100165EE0(v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v84, v85);
      swift_bridgeObjectRelease_n(a2, 3);
      sub_100184140((void *)&_mh_execute_header, v86, v87, "FriendBulletin handleAction invalid actionid %s");
      swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
      sub_100165D98(v82);
      sub_100165D98((uint64_t)v81);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v72 = *(uint64_t (**)(char *, uint64_t))(v90 + 8);
    v73 = v9;
    return (id)v72(v73, v91);
  }
  v29 = v28;
  v30 = objc_msgSend(v28, "type");
  if (!v30)
  {
    result = (id)sub_100183CE4(v29);
    if (v40)
    {
      v41 = URL.init(string:)(result);
      sub_10016D13C(v41, v42);
      v43 = sub_10016445C(v17, 1, v18);
      v44 = v89;
      if (v43 == 1)
      {
        v45 = sub_10016FF88(v17, &qword_100315B00);
        v46 = v88;
        static GKLog.daemon.getter(v45);
        v47 = v29;
        v48 = (void *)Logger.logObject.getter(v47);
        v49 = static os_log_type_t.info.getter(v48);
        if (sub_100184164(v49))
        {
          v50 = (_DWORD *)sub_100165DA4(12);
          v51 = sub_100165DA4(32);
          v92 = (id)v51;
          *v50 = 136315138;
          v52 = sub_100183CE4(v47);
          if (v53)
          {
            v54 = v53;
          }
          else
          {
            v52 = 7104878;
            v54 = 0xE300000000000000;
          }
          v55 = sub_10016FE60(v52, v54, (uint64_t *)&v92);
          v56 = sub_100165EE0(v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v57);

          sub_1001811EC(v58, v59);
          sub_100184140((void *)&_mh_execute_header, v60, v61, "FriendBulletin handleAction invalid url %s");
          swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
          sub_100165D98(v51);
          sub_100165D98((uint64_t)v50);

        }
        else
        {

        }
        v72 = *(uint64_t (**)(char *, uint64_t))(v90 + 8);
        v73 = v46;
        return (id)v72(v73, v91);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 32))(v21, v17, v18);
      result = objc_msgSend((id)objc_opt_self(GKApplicationWorkspace), "defaultWorkspace");
      if (result)
      {
        v65 = result;
        URL._bridgeToObjectiveC()(v64);
        v67 = v66;
        objc_msgSend(v65, "openURL:", v66);

        return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v21, v18);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  static GKLog.daemon.getter(v30);
  v31 = v29;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.info.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)sub_100165DA4(12);
    *(_DWORD *)v34 = 134217984;
    v92 = -[NSObject type](v31, "type");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);

    _os_log_impl((void *)&_mh_execute_header, v32, v33, "FriendBulletin handleAction invalid action type %ld", v34, 0xCu);
    sub_100165D98((uint64_t)v34);
  }
  else
  {

    v32 = v31;
  }
  v63 = v90;
  v62 = v91;

  return (id)(*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v12, v62);
}

void *sub_1001839F0(uint64_t a1)
{
  void *v1;
  NSDictionary v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  objc_super v12;

  if (a1)
  {
    v2.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_10016D110((uint64_t)v2.super.isa, v3);
  }
  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for FriendBulletin();
  v10 = sub_100184180((uint64_t)v12.super_class, "initWithPushNotification:", v4, v5, v6, v7, v8, v9, v12);
  sub_100184198();
  if (v1)

  return v1;
}

id sub_100183AD0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FriendBulletin();
  return objc_msgSendSuper2(&v2, "init");
}

void *sub_100183B20()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for FriendBulletin();
  sub_100184180((uint64_t)v8.super_class, "initWithCoder:", v1, v2, v3, v4, v5, v6, v8);
  sub_100184198();
  return v0;
}

id sub_100183B84()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FriendBulletin();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FriendBulletin()
{
  return objc_opt_self(GKFriendBulletin);
}

uint64_t sub_100183BD4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

void sub_100183BFC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v5);
  objc_msgSend(a3, "setCategoryIdentifier:", v6);

}

void sub_100183C4C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "setInfo:", v4);

}

_QWORD *sub_100183C90(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  v4 = a1[3];
  v5 = a1[5];
  swift_bridgeObjectRelease(a1[7], a2);
  swift_bridgeObjectRelease(v5, v6);
  swift_bridgeObjectRelease(v4, v7);
  swift_bridgeObjectRelease(v3, v8);
  return a1;
}

uint64_t sub_100183CE4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "info");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_100183D44()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100183D68(uint64_t a1)
{
  uint64_t v1;

  sub_1001BE03C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t *sub_100183D70(uint64_t *a1)
{
  sub_100183DC0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13]);
  return a1;
}

uint64_t sub_100183DC0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;

  if (a2 != 1)
  {
    sub_100183E34(result, a2, a3, a4, a5, a6);
    sub_100183E34(a7, a8, a9, a10, a11, a12);
    return swift_bridgeObjectRelease(a14, v16);
  }
  return result;
}

void sub_100183E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v7 = swift_bridgeObjectRelease(a2, a2);
    sub_10016D13C(v7, v8);
    swift_bridgeObjectRelease(a6, v9);
  }
}

uint64_t *sub_100183E6C(uint64_t *a1)
{
  sub_100183EA0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t sub_100183EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100183EDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100161BD0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100183F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40), v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56), v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72), v3);

  swift_release(*(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100183F6C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)swift_task_alloc(dword_100315274);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001840E8(v1);
  return sub_1001825AC(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100183FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_100315B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100184024()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40), v1);
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100184060()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)swift_task_alloc(dword_10031528C);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001840E8(v1);
  return sub_100182E84(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1001840D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_1001840E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100184110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

id sub_10018411C(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 296), 0);
}

void sub_100184128(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;

  *(_QWORD *)(v4 - 80) = v3;
  *(_QWORD *)(v4 - 72) = (a1 - 32) | 0x8000000000000000;
  v5._countAndFlagsBits = v2;
  v5._object = v1;
  String.append(_:)(v5);
}

void sub_100184140(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

id sub_100184154(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 2888));
}

id sub_10018415C()
{
  uint64_t v0;

  return objc_allocWithZone((Class)(v0 + 464));
}

BOOL sub_100184164(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100184174(uint64_t a1)
{
  return swift_allocObject(a1, 64, 7);
}

id sub_100184180(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v9;

  return objc_msgSendSuper2(&a9, a2, v9);
}

void sub_10018418C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 80) = 0;
  *(_QWORD *)(v1 - 72) = v0;
  _StringGuts.grow(_:)(23);
}

void sub_100184198()
{
  void *v0;

}

void sub_1001841A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  uint64_t v15;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin();
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static GKLog.daemon.getter(v7);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "URLSessionTask finished collecting metrics", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v14 = objc_msgSend((id)objc_opt_self(GKAMPController), "controller");
  objc_msgSend(v14, "reportURLSessionEventWithTask:metrics:", a2, a3);

}

id sub_100184344()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for GKInstrumentedURLSessionDelegate()
{
  return objc_opt_self(_TtC14GameDaemonCore32GKInstrumentedURLSessionDelegate);
}

uint64_t sub_1001843B8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];
  ValueMetadata *v6;

  if (qword_1003148F8 != -1)
    swift_once(&qword_1003148F8, sub_100184618);
  v2 = swift_retain(qword_10031B918);
  v3 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)(v2);
  v6 = &type metadata for PeerDiscoveryMessageType;
  v5[0] = a1;
  swift_retain(v3);
  dispatch thunk of NWProtocolFramer.Message.subscript.setter(v5, 0xD000000000000018, 0x80000001002330B0);
  swift_release(v3);
  return v3;
}

uint64_t sub_100184458()
{
  uint64_t result;
  unsigned __int8 v1;
  _QWORD v2[4];

  dispatch thunk of NWProtocolFramer.Message.subscript.getter(v2, 0xD000000000000018, 0x80000001002330B0);
  if (v2[3])
  {
    result = swift_dynamicCast(&v1, v2, (char *)&type metadata for Any + 8, &type metadata for PeerDiscoveryMessageType, 6);
    if ((_DWORD)result)
      return v1;
  }
  else
  {
    sub_100184D20((uint64_t)v2);
    return 0;
  }
  return result;
}

uint64_t sub_1001844D4(uint64_t result)
{
  if (result >= 4)
    return 4;
  else
    return result;
}

uint64_t sub_1001844E4(uint64_t result)
{
  return result;
}

BOOL sub_1001844EC(char *a1, char *a2)
{
  return sub_1001844F8(*a1, *a2);
}

BOOL sub_1001844F8(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int sub_100184508()
{
  unsigned __int8 *v0;

  return sub_100184510(*v0);
}

Swift::Int sub_100184510(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

void sub_100184554(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10018455C(a1, *v1);
}

void sub_10018455C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int sub_100184580(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_100184588(a1, *v1);
}

Swift::Int sub_100184588(uint64_t a1, unsigned __int8 a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

uint64_t sub_1001845C8@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001844D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001845F0@<X0>(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = sub_1001844E4(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100184618()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = type metadata accessor for PeerDiscoveryFramer();
  v1 = sub_100184D6C();
  v2 = type metadata accessor for NWProtocolFramer.Definition(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  result = NWProtocolFramer.Definition.init(implementation:)(v0, v1);
  qword_10031B918 = result;
  return result;
}

unint64_t sub_100184670()
{
  return 0xD000000000000017;
}

uint64_t sub_10018468C(uint64_t a1)
{
  uint64_t v1;

  swift_release(a1);
  return swift_allocObject(v1, 16, 7);
}

uint64_t sub_1001846AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t started;

  v2 = enum case for NWProtocolFramer.StartResult.ready(_:);
  started = type metadata accessor for NWProtocolFramer.StartResult(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 104))(a1, v2, started);
}

void sub_1001846F0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100184458();
  if ((a3 & 0x8000000000000000) != 0)
  {
    sub_10016D208();
    v27 = "Negative value is not representable";
    v28 = 35;
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v27, v28, 2, "Swift/Integers.swift", 20);
    __break(1u);
    return;
  }
  if (HIDWORD(a3))
  {
    sub_10016D208();
    v27 = "Not enough bits to represent the passed value";
    v28 = 45;
    goto LABEL_11;
  }
  v9 = sub_1001849EC(v8 | (a3 << 32));
  v11 = v10;
  NWProtocolFramer.Instance.writeOutput(data:)();
  sub_10016FF44(v9, v11);
  NWProtocolFramer.Instance.writeOutputNoCopy(length:)(a3);
  if (v13)
  {
    v14 = static os_log_type_t.error.getter(v12);
    v32 = 0;
    v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v15._object = (void *)0x8000000100298F40;
    v15._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v15);
    v31 = v13;
    v16 = sub_100161BD0(&qword_100314EA0);
    v17 = _print_unlocked<A, B>(_:_:)(&v31, &v32, v16);
    v19 = v32;
    v18 = v33;
    static GKLog.match.getter(v17);
    v20 = swift_bridgeObjectRetain_n(v18, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = v14;
    if (os_log_type_enabled(v21, v14))
    {
      v30 = v4;
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v29 = v5;
      v25 = v24;
      v32 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain(v18);
      v31 = sub_10016FE60(v19, v18, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      swift_bridgeObjectRelease_n(v18, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Nearby - %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      sub_100165D98(v25);
      sub_100165D98((uint64_t)v23);

      (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
    }
    else
    {

      swift_bridgeObjectRelease_n(v18, 2);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    swift_bridgeObjectRelease(v18, v26);
    swift_errorRelease(v13);
  }
}

uint64_t sub_1001849EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v6 = HIDWORD(a1);
  v7 = a1;
  v8 = Data.init(bytes:count:)(&v7, 4);
  v9 = v1;
  v2 = Data.init(bytes:count:)(&v6, 4);
  v4 = v3;
  Data.append(_:)();
  sub_10016FF44(v2, v4);
  return v8;
}

uint64_t sub_100184A84()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD v7[4];
  _BYTE v8[16];
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;

  v12 = 1;
  v0 = 8;
  v9 = 8;
  v10 = &v11;
  v11 = 0;
  if ((NWProtocolFramer.Instance.parseInput(minimumIncompleteLength:maximumLength:parse:)(8, 8, sub_100184D60, v8) & 1) != 0)
  {
    v0 = 8;
    while ((v12 & 1) == 0)
    {
      v1 = HIDWORD(v11);
      if ((v11 & 0xFFFFFFFC) != 0)
        v2 = 0;
      else
        v2 = v11;
      type metadata accessor for NWProtocolFramer.Message(0);
      v3 = sub_1001843B8(v2);
      v4 = NWProtocolFramer.Instance.deliverInputNoCopy(length:message:isComplete:)(v1, v3, 1);
      v5 = swift_release(v3);
      if ((v4 & 1) == 0)
        return 0;
      v11 = 0;
      v12 = 1;
      __chkstk_darwin(v5);
      v7[2] = 8;
      v7[3] = &v11;
      if ((NWProtocolFramer.Instance.parseInput(minimumIncompleteLength:maximumLength:parse:)(8, 8, sub_100184D60, v7) & 1) == 0)return v0;
    }
  }
  return v0;
}

uint64_t sub_100184BB8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if ((a3 & 1) == 0)
  {
    v7 = a5;
    if (a1)
    {
      if (a2 - a1 >= a5)
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a1 + 4);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(a1 + 4, a1 + 8);
LABEL_7:
        *(_QWORD *)a6 = 0;
        *(_BYTE *)(a6 + 8) = 0;
        return v7;
      }
    }
    else if (a5 <= 0)
    {
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_100184C90()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for PeerDiscoveryFramer()
{
  return objc_opt_self(_TtC14GameDaemonCore19PeerDiscoveryFramer);
}

unint64_t sub_100184CC0()
{
  sub_100184670();
  return 0xD000000000000017;
}

uint64_t sub_100184CE0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001846AC(a1);
}

uint64_t sub_100184CF4()
{
  return sub_100184A84();
}

void sub_100184D08(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1001846F0(a1, a2, a3);
}

uint64_t sub_100184D20(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100161BD0(&qword_1003159B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100184D60(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100184BB8(a1, a2, a3 & 1, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

unint64_t sub_100184D6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100315428;
  if (!qword_100315428)
  {
    v1 = type metadata accessor for PeerDiscoveryFramer();
    result = swift_getWitnessTable("E/\t", v1);
    atomic_store(result, (unint64_t *)&qword_100315428);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for PeerDiscoveryMessageType(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PeerDiscoveryMessageType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PeerDiscoveryMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100184E88 + 4 * byte_100233035[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100184EBC + 4 * asc_100233030[v4]))();
}

uint64_t sub_100184EBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100184EC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100184ECCLL);
  return result;
}

uint64_t sub_100184ED8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100184EE0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100184EE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100184EEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100184EF8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100184F00(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PeerDiscoveryMessageType()
{
  return &type metadata for PeerDiscoveryMessageType;
}

unint64_t sub_100184F1C()
{
  unint64_t result;

  result = qword_100315430;
  if (!qword_100315430)
  {
    result = swift_getWitnessTable(&unk_100233164, &type metadata for PeerDiscoveryMessageType);
    atomic_store(result, (unint64_t *)&qword_100315430);
  }
  return result;
}

void GameActivityStore.__allocating_init()()
{
  uint64_t v0;

  swift_allocObject(v0, 120, 15);
  GameActivityStore.init()();
  sub_10016219C();
}

id GameActivityStore.init()()
{
  _QWORD *v0;
  objc_class *ObjectType;
  uint64_t v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  swift_defaultActor_initialize(v0);
  swift_retain(v0);
  v2 = sub_100161BD0(&qword_100315438);
  v0[14] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v2, &protocol witness table for String);
  sub_100165E88();
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t GameActivityStore.add(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return sub_1001883A0((uint64_t)sub_100185040, v1);
}

unint64_t sub_100185040()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(void **)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = objc_msgSend(v1, "bundleID");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = (_QWORD **)(v2 + 112);
  sub_10018845C(v2 + 112);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + 112));
  v10 = *(_QWORD **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0x8000000000000000;
  result = sub_1001884F8();
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = result;
    v17 = v12;
    sub_100161BD0(&qword_100315448);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v15))
    {
      v19 = sub_1001884F8();
      if ((v17 & 1) != (v18 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v16 = v19;
    }
    v20 = (uint64_t)*v7;
    *v7 = v10;
    v21 = swift_bridgeObjectRelease(v20, v18);
    v22 = (uint64_t)*v7;
    if ((v17 & 1) == 0)
    {
      sub_10018680C(v16, v4, v6, (uint64_t)_swiftEmptyArrayStorage, *v7);
      v21 = sub_100176C14();
    }
    v23 = *(_QWORD *)(v0 + 40);
    v24 = (_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v16);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
    v25 = *(_QWORD *)((*v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_100185DB4(v25);
    v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
    specialized Array._endMutation()(v26);
    v27 = sub_100181690();
    sub_10016D110(v27, v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1001851F8(void *a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_100315444;
  v7 = a1;
  swift_retain(a3);
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_100185274;
  return GameActivityStore.add(_:)((uint64_t)v7);
}

uint64_t sub_100185274()
{
  uint64_t (**v0)(void);
  const void *v1;
  uint64_t v2;
  void *v3;

  v1 = (const void *)*((_QWORD *)*v0 + 4);
  v3 = (void *)*((_QWORD *)*v0 + 2);
  v2 = *((_QWORD *)*v0 + 3);
  sub_100165DBC();
  swift_release(v2);

  sub_10018855C();
  _Block_release(v1);
  return sub_10016D170(v0[1]);
}

uint64_t GameActivityStore.fetchAndRemoveLatestActivity(bundleID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  return sub_1001883A0((uint64_t)sub_1001852E0, v2);
}

uint64_t sub_1001852E0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *);
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10018840C();
  sub_10016D290();
  v2 = sub_1001884E4();
  if (*v3)
    v4 = sub_1001853F0();
  else
    v4 = 0;
  ((void (*)(uint64_t, _QWORD))v2)(v0, 0);
  v5 = sub_100181690();
  sub_10016D110(v5, v6);
  return sub_1001884D8(v4, *(uint64_t (**)(void))(v1 + 8));
}

void (*sub_100185358(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_100186978(v6, a2, a3);
  return sub_1001853C4;
}

void sub_1001853C4(uint64_t *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = sub_10018850C(*a1, *(uint64_t (**)(uint64_t, _QWORD))(*a1 + 40));
  sub_10016D13C(v2, v3);
  sub_100188504(v1);
}

uint64_t sub_1001853F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *v0;
  if (!((unint64_t)*v0 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
    return 0;
  }
  if (v1 < 0)
    v5 = *v0;
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v0);
  v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(v1, v7);
  if (!v6)
    return 0;
LABEL_3:
  result = sub_100188254();
  if (!result)
  {
    v3 = *v0;
    if ((unint64_t)*v0 >> 62)
      goto LABEL_15;
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (__OFSUB__(v4, 1))
    {
      __break(1u);
LABEL_15:
      if (v3 < 0)
        v8 = v3;
      else
        v8 = v3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v3);
      v4 = _CocoaArrayWrapper.endIndex.getter(v8);
      swift_bridgeObjectRelease(v3, v9);
    }
    return sub_1001881C4(v4 - 1);
  }
  return result;
}

uint64_t sub_1001854C8(uint64_t a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100315454;
  swift_retain(a3);
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_100185554;
  return GameActivityStore.fetchAndRemoveLatestActivity(bundleID:)(v6, v8);
}

uint64_t sub_100185554(void *a1)
{
  uint64_t (**v1)(void);
  void (**v3)(_QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((_QWORD *)*v1 + 2);
  v3 = (void (**)(_QWORD, _QWORD))*((_QWORD *)*v1 + 3);
  v5 = sub_100165DBC();
  sub_1001648C4(v5, v6);
  swift_release(v4);
  ((void (**)(_QWORD, void *))v3)[2](v3, a1);
  _Block_release(v3);

  return sub_100165E20(v1[1]);
}

uint64_t GameActivityStore.deinit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 112), a2);
  swift_defaultActor_destroy(v2);
  return v2;
}

uint64_t GameActivityStore.__deallocating_deinit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 112), a2);
  swift_defaultActor_destroy(v2);
  return swift_defaultActor_deallocate(v2);
}

uint64_t GameActivityStore.fetchActivities(bundleID:ascending:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 48) = a2;
  *(_QWORD *)(v4 + 56) = v3;
  *(_BYTE *)(v4 + 64) = a3;
  *(_QWORD *)(v4 + 40) = a1;
  return sub_1001883A0((uint64_t)sub_100185628, v3);
}

uint64_t sub_100185628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char v10;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = *(_QWORD *)(v0 + 56);
  swift_beginAccess(v1 + 112, v0 + 16, 32, 0);
  v2 = *(_QWORD *)(v1 + 112);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_10;
  sub_100176C14();
  v3 = sub_1001884F8();
  if ((v4 & 1) == 0)
  {
    sub_10016D110(v3, v4);
LABEL_10:
    sub_100181690();
    v12 = _swiftEmptyArrayStorage;
    return sub_1001884D8((uint64_t)v12, *(uint64_t (**)(void))(v0 + 8));
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
  sub_10016D290();
  v6 = sub_100181690();
  sub_10016D110(v6, v7);
  if ((v5 & 0x8000000000000000) != 0 || (v5 & 0x4000000000000000) != 0)
  {
    v13 = sub_100185F10(v5);
    v14 = v5;
    v8 = (unint64_t)v13;
    swift_bridgeObjectRelease(v14, v15);
  }
  else
  {
    v8 = v5 & 0xFFFFFFFFFFFFFF8;
  }
  sub_10016D290();
  if ((v8 & 0x8000000000000000) != 0 || (v9 = (_QWORD *)v8, (v8 & 0x4000000000000000) != 0))
  {
    v9 = sub_100185F10(v8);
    sub_100165E88();
  }
  v10 = *(_BYTE *)(v0 + 64);
  v16 = v9;
  sub_100186C8C((uint64_t *)&v16, v10);
  sub_100165E88();
  v12 = v16;
  return sub_1001884D8((uint64_t)v12, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t static GKGameActivityInternal.< infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v15 - v9;
  v11 = objc_msgSend(a1, "createdAt");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v12 = objc_msgSend(a2, "createdAt");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v12) = static Date.< infix(_:_:)(v10, v8);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v13(v10, v4);
  return v12 & 1;
}

uint64_t sub_1001858CC(uint64_t a1, char a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = dword_10031545C;
  swift_retain(a4);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v4[5] = v12;
  *v12 = v4;
  v12[1] = sub_100185968;
  return GameActivityStore.fetchActivities(bundleID:ascending:)(v8, v10, a2);
}

uint64_t sub_100185968()
{
  uint64_t (**v0)(void);
  void (**v1)(_QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  uint64_t v6;

  v2 = *((_QWORD *)*v0 + 2);
  v1 = (void (**)(_QWORD, _QWORD))*((_QWORD *)*v0 + 3);
  v3 = sub_100165DBC();
  sub_1001648C4(v3, v4);
  swift_release(v2);
  sub_10016CBB4(0, &qword_100315048, GKGameActivityInternal_ptr);
  sub_100188524();
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_10016D13C((uint64_t)isa, v6);
  ((void (**)(_QWORD, Class))v1)[2](v1, isa);

  _Block_release(v1);
  return sub_100165E20(v0[1]);
}

uint64_t GameActivityStore.removeActivities(forBundleID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  return sub_1001883A0((uint64_t)sub_100185A18, v2);
}

uint64_t sub_100185A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  void (*v3)(uint64_t *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10018840C();
  sub_10016D290();
  v3 = sub_1001884E4();
  v4 = *v2;
  if (*v2)
  {
    *v2 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10018850C(v0, (uint64_t (*)(uint64_t, _QWORD))v3);
    sub_100181690();
    v6 = swift_bridgeObjectRelease(v4, v5);
  }
  else
  {
    sub_10018850C(v0, (uint64_t (*)(uint64_t, _QWORD))v3);
    v6 = sub_100181690();
  }
  sub_10016D13C(v6, v7);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100185AB4(uint64_t a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  void *v10;
  _QWORD *v11;
  id v12;

  v10 = _Block_copy(aBlock);
  v11 = (_QWORD *)swift_allocObject(a5, 40, 7);
  v11[2] = a3;
  v11[3] = v10;
  v11[4] = a1;
  v12 = a3;
  swift_retain(a1);
  sub_1001C15C4(a6, (uint64_t)v11);
}

uint64_t sub_100185B28(uint64_t a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100315464;
  swift_retain(a3);
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_100185BB4;
  return GameActivityStore.removeActivities(forBundleID:)(v6, v8);
}

uint64_t sub_100185BB4()
{
  uint64_t (**v0)(void);
  void (**v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)*v0 + 2);
  v1 = (void (**)(_QWORD))*((_QWORD *)*v0 + 3);
  v3 = sub_100165DBC();
  sub_10016D13C(v3, v4);
  swift_release(v2);
  v1[2](v1);
  _Block_release(v1);
  return sub_10016D170(v0[1]);
}

uint64_t GameActivityStore.removeAllActivities()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return sub_1001883A0((uint64_t)sub_100185C24, v0);
}

uint64_t sub_100185C24()
{
  uint64_t v0;

  sub_10018845C(*(_QWORD *)(v0 + 40) + 112);
  sub_100161BD0(&qword_100315470);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  sub_100181690();
  return sub_100165E20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100185CD8(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10031546C;
  swift_retain(a2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100185D38;
  return GameActivityStore.removeAllActivities()();
}

uint64_t sub_100185D38()
{
  uint64_t (**v0)(void);
  const void *v1;
  uint64_t v2;

  v1 = (const void *)*((_QWORD *)*v0 + 3);
  v2 = *((_QWORD *)*v0 + 2);
  sub_100165DBC();
  swift_release(v2);
  sub_10018855C();
  _Block_release(v1);
  return sub_100165E20(v0[1]);
}

uint64_t sub_100185D88(void **a1, void **a2)
{
  return static GKGameActivityInternal.< infix(_:_:)(*a1, *a2) & 1;
}

uint64_t sub_100185DB4(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;

  v2 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x18);
  if (result + 1 > (uint64_t)(v2 >> 1))
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, result + 1, 1);
  return result;
}

uint64_t sub_100185DE0(uint64_t result)
{
  uint64_t *v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
  {
    result = sub_1001726B4(v2 > 1, result + 1, 1, *v1);
    *v1 = result;
  }
  return result;
}

void sub_100185E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  sub_100188530();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = sub_100161BD0(&qword_100314F28);
    v3 = (const void *)sub_100176C08(v2, 16 * v1);
    v4 = j__malloc_size(v3);
    sub_1001884A8(2 * ((uint64_t)(v4 - 32) / 16));
    sub_100187988(v5, v6, v7, v8);
    sub_1001883F4();
    sub_100188434();
    if (!v9)
      __break(1u);
  }
  sub_1001883A8();
}

void sub_100185E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  sub_100188530();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = sub_100161BD0(&qword_1003150E0);
    v3 = (const void *)sub_100176C08(v2, 8 * v1);
    v4 = j__malloc_size(v3);
    sub_1001884A8((2 * ((uint64_t)(v4 - 32) / 8)) | 1);
    sub_100187B84(v5, v6, v7, v8);
    sub_1001883F4();
    sub_100188434();
    if (!v9)
      __break(1u);
  }
  sub_1001883A8();
}

_QWORD *sub_100185F10(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_8;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100161BD0(&qword_1003150E0);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v4[2] = v2;
      v4[3] = (2 * ((uint64_t)(v5 - 32) / 8)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v6 = sub_10018780C((uint64_t)(v4 + 4), v2, v1, (void (*)(uint64_t, _QWORD, uint64_t))sub_1001731F0, &qword_1003154F8, &qword_100315438, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_100176610);
    v1 = v7;
    swift_bridgeObjectRelease(v6, v8);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_8:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1, v10);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

void sub_100186020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  sub_100188530();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = sub_100161BD0(&qword_100314F28);
    v3 = (const void *)sub_100176C08(v2, 16 * v1);
    v4 = j__malloc_size(v3);
    sub_1001884A8(2 * ((uint64_t)(v4 - 32) / 16));
    sub_100187D7C(v5, v6, v7, v8);
    sub_1001883F4();
    sub_100188434();
    if (!v9)
      __break(1u);
  }
  sub_1001883A8();
}

unint64_t sub_100186098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v0 + 40));
  v1 = sub_100188524();
  return sub_100186230(v1, v2);
}

unint64_t sub_1001860C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  Swift::Int v5;

  v4 = sub_100188568(a1);
  sub_100188514((uint64_t)v4);
  v5 = Hasher._finalize()();
  return sub_1001862F4(a1, a2, v5);
}

unint64_t sub_100186114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for NWEndpoint(0);
  sub_100188328((unint64_t *)&unk_100315CC0);
  dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, v3);
  v4 = sub_100188524();
  return sub_1001863D4(v4, v5);
}

unint64_t sub_100186174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  _BYTE v14[72];

  sub_100188568(a1);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v14, a1, a2);
  swift_bridgeObjectRelease(a2, v8);
  v9 = sub_100176C14();
  v10 = sub_100188514(v9);
  sub_10016D110(v10, v11);
  v12 = Hasher._finalize()();
  return sub_10018650C(a1, a2, a3, a4, v12);
}

unint64_t sub_100186204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  NSObject._rawHashValue(seed:)(*(_QWORD *)(v0 + 40));
  v1 = sub_100188524();
  return sub_100186604(v1, v2);
}

unint64_t sub_100186230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1001631F4(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1001638F4((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1001862F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1001863D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for NWEndpoint(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_100188328(&qword_100315208);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_10018650C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v13 = ~v7;
    v14 = *(_QWORD *)(v5 + 48);
    do
    {
      v15 = (_QWORD *)(v14 + 32 * v8);
      v16 = v15[1];
      v17 = v15[2];
      v18 = v15[3];
      v19 = *v15 == a1 && v16 == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, a1, a2, 0) & 1) != 0)
      {
        v20 = v17 == a3 && v18 == a4;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a3, a4, 0) & 1) != 0)
          break;
      }
      v8 = (v8 + 1) & v13;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t sub_100186604(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_10016CBB4(0, (unint64_t *)&qword_100314D70, CNContact_ptr);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t sub_10018671C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  result = sub_1001884C0(a1, a4 + 8 * (a1 >> 6));
  v6 = v5[6] + 40 * result;
  v8 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(v7 + 32);
  *(_QWORD *)(v5[7] + 8 * result) = v9;
  v10 = v5[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    v5[2] = v12;
  return result;
}

void sub_10018676C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_10018846C(a1, a2, a3, a4, a5);
  if (v7)
    __break(1u);
  else
    sub_10018854C(v5, v6);
}

uint64_t sub_100186784(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  sub_1001884C0(a1, a4 + 8 * (a1 >> 6));
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for NWEndpoint(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a2, v10);
  *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * a1) = a3;
  v12 = *(_QWORD *)(a4 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    *(_QWORD *)(a4 + 16) = v14;
  return result;
}

unint64_t sub_10018680C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_100186854(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  result = sub_1001884C0(a1, a7 + 8 * (a1 >> 6));
  v9 = (_QWORD *)(v8[6] + 32 * result);
  *v9 = v10;
  v9[1] = v11;
  v9[2] = v12;
  v9[3] = v13;
  *(_QWORD *)(v8[7] + 8 * result) = v14;
  v15 = v8[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    v8[2] = v17;
  return result;
}

void sub_100186898(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v5 = (_QWORD *)(a5[6] + 16 * a1);
  *v5 = a2;
  v5[1] = a3;
  v6 = a5[7] + 40 * a1;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a4 + 32);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    sub_10018854C((uint64_t)a5, v10);
}

void sub_1001868F0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a5[6] + 8 * a1) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * a1);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    sub_10018854C((uint64_t)a5, v8);
}

uint64_t sub_100186934(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  result = sub_1001884C0(a1, a6 + 8 * (a1 >> 6));
  v8 = (_QWORD *)(v7[6] + 16 * result);
  *v8 = v9;
  v8[1] = v10;
  v11 = (_QWORD *)(v7[7] + 16 * result);
  *v11 = v12;
  v11[1] = v13;
  v14 = v7[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    v7[2] = v16;
  return result;
}

void (*sub_100186978(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_100186BA0(v7);
  v7[10] = sub_100186A50(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100186A08;
}

void sub_100186A08(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = sub_10018850C(*(_QWORD *)a1 + 32, *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80));
  sub_10016D13C(v3, v4);
  v2(v1, 0);
  free(v1);
}

void (*sub_100186A50(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL8 v15;
  Swift::Int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v12 = sub_1001860C4(a2, a3);
  *((_BYTE *)v10 + 40) = v13 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v13 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  v17 = v12;
  v18 = v13;
  sub_100161BD0(&qword_100315448);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v16))
  {
    v19 = sub_1001860C4(a2, a3);
    if ((v18 & 1) == (v20 & 1))
    {
      v17 = v19;
      goto LABEL_5;
    }
LABEL_10:
    result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
LABEL_5:
  v10[4] = v17;
  if ((v18 & 1) != 0)
    v21 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v17);
  else
    v21 = 0;
  *v10 = v21;
  return sub_100186B68;
}

void sub_100186B68(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *a1;
  sub_100186BCC(*a1, *((_BYTE *)*a1 + 40), (_QWORD **)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease(*v1, v2);
  sub_100188504(v1);
}

uint64_t (*sub_100186BA0(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_100186BC0;
}

uint64_t sub_100186BC0(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_100186BCC(uint64_t *a1, char a2, _QWORD **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)((*a3)[7] + 8 * a4) = v8;
    }
    else
    {
      sub_10018680C(a4, a5, a6, v8, *a3);
      swift_bridgeObjectRetain(a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy((*a3)[6] + 16 * a4, 1, &type metadata for String);
    v9 = (uint64_t)*a3;
    sub_100161BD0(&qword_100315438);
    _NativeDictionary._delete(at:)(a4, v9);
  }
  return swift_bridgeObjectRetain(v8);
}

uint64_t sub_100186C8C(uint64_t *a1, char a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1001933FC(v4);
    *a1 = v4;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  sub_100186D80(v9, a2 & 1);
  return specialized ContiguousArray._endMutation()(v7);
}

unint64_t sub_100186D10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100315478;
  if (!qword_100315478)
  {
    v1 = sub_10016CBB4(255, &qword_100315048, GKGameActivityInternal_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100315478);
  }
  return result;
}

uint64_t type metadata accessor for GameActivityStore()
{
  return objc_opt_self(GKGameActivityStore);
}

void sub_100186D80(uint64_t *a1, char a2)
{
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v6;
  void **v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  int v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  int v29;
  Swift::Int v30;
  uint64_t *v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t *v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  void *v40;
  Swift::Int v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  char v48;
  void *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t *v116;
  Swift::Int v117;
  Swift::Int v118;
  uint64_t v119;
  void **v120;
  uint64_t v121;
  uint64_t v123;

  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
        sub_10018748C(0, v4, 1, a1, a2 & 1);
      return;
    }
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  v6 = v5;
  sub_100172334(v4 / 2);
  v119 = v4;
  v120 = v7;
  v123 = v8;
  v116 = a1;
  if (v4 <= 0)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v53 = _swiftEmptyArrayStorage[2];
LABEL_102:
    if (v53 < 2)
      goto LABEL_116;
    v105 = *v116;
    while (1)
    {
      v106 = v53 - 2;
      if (v53 < 2)
        break;
      if (!v105)
        goto LABEL_148;
      v96 = (uint64_t)v11;
      v107 = *(_QWORD *)&v11[16 * v106 + 32];
      v108 = *(_QWORD *)&v11[16 * v53 + 24];
      sub_100187584((void **)(v105 + 8 * v107), (id *)(v105 + 8 * *(_QWORD *)&v11[16 * v53 + 16]), v105 + 8 * v108, v120, a2 & 1);
      if (v2)
        goto LABEL_114;
      if (v108 < v107)
        goto LABEL_135;
      if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
      {
        sub_1001932EC(v96);
        v96 = v111;
      }
      if (v106 >= *(_QWORD *)(v96 + 16))
        goto LABEL_136;
      v109 = (_QWORD *)(v96 + 32 + 16 * v106);
      *v109 = v107;
      v109[1] = v108;
      v110 = *(_QWORD *)(v96 + 16);
      if (v53 > v110)
        goto LABEL_137;
      memmove((void *)(v96 + 32 + 16 * (v53 - 1)), (const void *)(v96 + 32 + 16 * v53), 16 * (v110 - v53));
      v11 = (char *)v96;
      *(_QWORD *)(v96 + 16) = v110 - 1;
      v53 = v110 - 1;
      if (v110 <= 2)
        goto LABEL_116;
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  v117 = v6;
  v9 = 0;
  v10 = *a1;
  v115 = *a1 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v121 = *a1;
  while (1)
  {
    v12 = v9++;
    if (v9 < v4)
    {
      v13 = v11;
      v14 = *(void **)(v10 + 8 * v9);
      v15 = *(void **)(v10 + 8 * v12);
      sub_10016CBB4(0, &qword_100315048, GKGameActivityInternal_ptr);
      v16 = v14;
      v17 = v15;
      v18 = v17;
      if ((a2 & 1) != 0)
      {
        v17 = v16;
        v19 = v18;
      }
      else
      {
        v19 = v16;
      }
      v20 = static GKGameActivityInternal.< infix(_:_:)(v17, v19);

      v9 = v12 + 2;
      if (v12 + 2 < v4)
      {
        v21 = v12;
        v22 = v121;
        while (1)
        {
          v23 = v22 + 8 * v21;
          v24 = *(void **)(v23 + 8);
          v25 = *(id *)(v23 + 16);
          v26 = v24;
          v27 = v26;
          if ((a2 & 1) != 0)
          {
            v26 = v25;
            v28 = v27;
          }
          else
          {
            v28 = v25;
          }
          v29 = static GKGameActivityInternal.< infix(_:_:)(v26, v28);

          if (((v20 ^ v29) & 1) != 0)
            break;
          v30 = v21 + 3;
          ++v21;
          v22 = v121;
          if (v30 >= v4)
          {
            v9 = v4;
            goto LABEL_18;
          }
        }
        v9 = v21 + 2;
      }
      v22 = v121;
LABEL_18:
      v11 = v13;
      if ((v20 & 1) != 0)
      {
        if (v9 < v12)
          goto LABEL_141;
        if (v12 < v9)
        {
          v31 = (uint64_t *)(v115 + 8 * v9);
          v32 = v9;
          v33 = v12;
          v34 = (uint64_t *)(v22 + 8 * v12);
          do
          {
            if (v33 != --v32)
            {
              if (!v22)
                goto LABEL_147;
              v35 = *v34;
              *v34 = *v31;
              *v31 = v35;
            }
            ++v33;
            --v31;
            ++v34;
          }
          while (v33 < v32);
        }
      }
    }
    if (v9 < v4)
    {
      if (__OFSUB__(v9, v12))
        goto LABEL_139;
      if (v9 - v12 < v117)
      {
        if (__OFADD__(v12, v117))
          goto LABEL_142;
        if (v12 + v117 >= v4)
          v36 = v4;
        else
          v36 = v12 + v117;
        if (v36 < v12)
          goto LABEL_143;
        if (v9 != v36)
        {
          v118 = v12;
          v114 = v11;
          sub_10016CBB4(0, &qword_100315048, GKGameActivityInternal_ptr);
          v37 = v121;
          v38 = v115 + 8 * v9;
          do
          {
            v39 = v36;
            v40 = *(void **)(v37 + 8 * v9);
            v41 = v118;
            v42 = v38;
            while (1)
            {
              v43 = *(void **)v42;
              v44 = v40;
              v45 = v43;
              v46 = v45;
              if ((a2 & 1) != 0)
              {
                v45 = v44;
                v47 = v46;
              }
              else
              {
                v47 = v44;
              }
              v48 = static GKGameActivityInternal.< infix(_:_:)(v45, v47);

              if ((v48 & 1) == 0)
                break;
              v37 = v121;
              if (!v121)
                goto LABEL_145;
              v49 = *(void **)v42;
              v40 = *(void **)(v42 + 8);
              *(_QWORD *)v42 = v40;
              *(_QWORD *)(v42 + 8) = v49;
              v42 -= 8;
              if (v9 == ++v41)
                goto LABEL_45;
            }
            v37 = v121;
LABEL_45:
            ++v9;
            v38 += 8;
            v36 = v39;
          }
          while (v9 != v39);
          v9 = v39;
          v12 = v118;
          v4 = v119;
          v11 = v114;
        }
      }
    }
    if (v9 < v12)
      goto LABEL_138;
    v50 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) != 0)
    {
      v11 = v50;
    }
    else
    {
      sub_100193208(0, *((_QWORD *)v50 + 2) + 1, 1, v50);
      v11 = v103;
    }
    v52 = *((_QWORD *)v11 + 2);
    v51 = *((_QWORD *)v11 + 3);
    v53 = v52 + 1;
    v10 = v121;
    if (v52 >= v51 >> 1)
    {
      sub_100193208(v51 > 1, v52 + 1, 1, v11);
      v10 = v121;
      v11 = v104;
    }
    *((_QWORD *)v11 + 2) = v53;
    v54 = v11 + 32;
    v55 = &v11[16 * v52 + 32];
    *(_QWORD *)v55 = v12;
    *((_QWORD *)v55 + 1) = v9;
    if (v52)
      break;
    v53 = 1;
LABEL_95:
    if (v9 >= v4)
      goto LABEL_102;
  }
  while (1)
  {
    v56 = v53 - 1;
    if (v53 >= 4)
    {
      v61 = &v54[2 * v53];
      v62 = *(v61 - 8);
      v63 = *(v61 - 7);
      v67 = __OFSUB__(v63, v62);
      v64 = v63 - v62;
      if (v67)
        goto LABEL_123;
      v66 = *(v61 - 6);
      v65 = *(v61 - 5);
      v67 = __OFSUB__(v65, v66);
      v59 = v65 - v66;
      v60 = v67;
      if (v67)
        goto LABEL_124;
      v68 = v53 - 2;
      v69 = &v54[2 * v53 - 4];
      v71 = *v69;
      v70 = v69[1];
      v67 = __OFSUB__(v70, v71);
      v72 = v70 - v71;
      if (v67)
        goto LABEL_125;
      v67 = __OFADD__(v59, v72);
      v73 = v59 + v72;
      if (v67)
        goto LABEL_127;
      if (v73 >= v64)
      {
        v91 = &v54[2 * v56];
        v93 = *v91;
        v92 = v91[1];
        v67 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v67)
          goto LABEL_133;
        v84 = v59 < v94;
        goto LABEL_84;
      }
    }
    else
    {
      if (v53 != 3)
      {
        v85 = *((_QWORD *)v11 + 4);
        v86 = *((_QWORD *)v11 + 5);
        v67 = __OFSUB__(v86, v85);
        v78 = v86 - v85;
        v79 = v67;
        goto LABEL_78;
      }
      v58 = *((_QWORD *)v11 + 4);
      v57 = *((_QWORD *)v11 + 5);
      v67 = __OFSUB__(v57, v58);
      v59 = v57 - v58;
      v60 = v67;
    }
    if ((v60 & 1) != 0)
      goto LABEL_126;
    v68 = v53 - 2;
    v74 = &v54[2 * v53 - 4];
    v76 = *v74;
    v75 = v74[1];
    v77 = __OFSUB__(v75, v76);
    v78 = v75 - v76;
    v79 = v77;
    if (v77)
      goto LABEL_128;
    v80 = &v54[2 * v56];
    v82 = *v80;
    v81 = v80[1];
    v67 = __OFSUB__(v81, v82);
    v83 = v81 - v82;
    if (v67)
      goto LABEL_130;
    if (__OFADD__(v78, v83))
      goto LABEL_132;
    if (v78 + v83 >= v59)
    {
      v84 = v59 < v83;
LABEL_84:
      if (v84)
        v56 = v68;
      goto LABEL_86;
    }
LABEL_78:
    if ((v79 & 1) != 0)
      goto LABEL_129;
    v87 = &v54[2 * v56];
    v89 = *v87;
    v88 = v87[1];
    v67 = __OFSUB__(v88, v89);
    v90 = v88 - v89;
    if (v67)
      goto LABEL_131;
    if (v90 < v78)
      goto LABEL_95;
LABEL_86:
    v95 = v56 - 1;
    if (v56 - 1 >= v53)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if (!v10)
      goto LABEL_146;
    v96 = (uint64_t)v11;
    v97 = &v54[2 * v95];
    v98 = *v97;
    v99 = &v54[2 * v56];
    v100 = v99[1];
    sub_100187584((void **)(v10 + 8 * *v97), (id *)(v10 + 8 * *v99), v10 + 8 * v100, v120, a2 & 1);
    if (v2)
      break;
    if (v100 < v98)
      goto LABEL_120;
    if (v56 > *(_QWORD *)(v96 + 16))
      goto LABEL_121;
    *v97 = v98;
    v54[2 * v95 + 1] = v100;
    v102 = *(_QWORD *)(v96 + 16);
    if (v56 >= v102)
      goto LABEL_122;
    v53 = v102 - 1;
    memmove(&v54[2 * v56], v99 + 2, 16 * (v102 - 1 - v56));
    v11 = (char *)v96;
    *(_QWORD *)(v96 + 16) = v102 - 1;
    v4 = v119;
    v10 = v121;
    if (v102 <= 2)
      goto LABEL_95;
  }
LABEL_114:
  v112 = swift_bridgeObjectRelease(v96, v101);
  if (v119 >= -1)
    goto LABEL_117;
  __break(1u);
LABEL_116:
  v112 = swift_bridgeObjectRelease(v11, v7);
  if (v119 >= -1)
  {
LABEL_117:
    *(_QWORD *)((v123 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
    specialized Array._endMutation()(v112);
    swift_bridgeObjectRelease(v123, v113);
    return;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
}

void sub_10018748C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;

  if (a3 != a2)
  {
    v6 = a3;
    v7 = *a4;
    sub_10016CBB4(0, &qword_100315048, GKGameActivityInternal_ptr);
    v8 = v7 + 8 * v6 - 8;
    while (2)
    {
      v9 = *(void **)(v7 + 8 * v6);
      v10 = a1;
      v11 = v8;
      do
      {
        v12 = *(void **)v11;
        v13 = v9;
        v14 = v12;
        v15 = v14;
        if ((a5 & 1) != 0)
        {
          v14 = v13;
          v16 = v15;
        }
        else
        {
          v16 = v13;
        }
        v17 = static GKGameActivityInternal.< infix(_:_:)(v14, v16);

        if ((v17 & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return;
        }
        v18 = *(void **)v11;
        v9 = *(void **)(v11 + 8);
        *(_QWORD *)v11 = v9;
        *(_QWORD *)(v11 + 8) = v18;
        v11 -= 8;
        ++v10;
      }
      while (v6 != v10);
      ++v6;
      v8 += 8;
      if (v6 != a2)
        continue;
      break;
    }
  }
}

uint64_t sub_100187584(void **a1, id *a2, unint64_t a3, void **a4, char a5)
{
  id *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  BOOL v14;
  void **v15;
  unint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  char v22;
  id *v23;
  BOOL v24;
  id *v27;
  id *v28;
  id *v29;
  id *v30;
  id *v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  unint64_t v36;
  void *v37;
  char v38;
  void **v39;
  BOOL v40;
  BOOL v41;
  void **v44;
  id *v45;

  v7 = a2;
  v8 = a1;
  v9 = (char *)a2 - (char *)a1;
  v10 = a2 - a1;
  v11 = a3 - (_QWORD)a2;
  v12 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v10 >= v12)
  {
    sub_100172C58(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v44 = a4;
    v13 = &a4[v12];
    if (v8 >= v7 || v11 < 8)
    {
      v15 = a4;
      goto LABEL_47;
    }
    sub_10016CBB4(0, &qword_100315048, GKGameActivityInternal_ptr);
    v27 = (id *)(a3 - 8);
    while (1)
    {
      v28 = v7;
      v29 = v27 + 1;
      v30 = v13 - 1;
      v45 = v28;
      v32 = *(v28 - 1);
      v31 = v28 - 1;
      v33 = *(v13 - 1);
      v34 = v32;
      v35 = v34;
      v36 = (unint64_t)v13;
      if ((a5 & 1) != 0)
      {
        v34 = v33;
        v37 = v35;
      }
      else
      {
        v37 = v33;
      }
      v38 = static GKGameActivityInternal.< infix(_:_:)(v34, v37);

      if ((v38 & 1) != 0)
      {
        v39 = v44;
        v40 = v29 != v45 || v27 >= v45;
        v7 = v31;
        v13 = (void **)v36;
        if (!v40)
          goto LABEL_42;
      }
      else
      {
        v41 = v29 != (id *)v36 || (unint64_t)v27 >= v36;
        v31 = v30;
        v13 = v30;
        v39 = v44;
        v7 = v45;
        if (!v41)
          goto LABEL_42;
      }
      *v27 = *v31;
LABEL_42:
      --v27;
      if (v7 <= v8 || v13 <= v39)
      {
        v15 = v44;
        goto LABEL_47;
      }
    }
  }
  sub_100172C58(a1, a2 - a1, a4);
  v13 = &a4[v10];
  v14 = (unint64_t)v7 >= a3 || v9 < 8;
  v15 = a4;
  if (!v14)
  {
    sub_10016CBB4(0, &qword_100315048, GKGameActivityInternal_ptr);
    do
    {
      v16 = (unint64_t)v13;
      v17 = *v15;
      v18 = *v7;
      v19 = v17;
      v20 = v19;
      if ((a5 & 1) != 0)
      {
        v19 = v18;
        v21 = v20;
      }
      else
      {
        v21 = v18;
      }
      v22 = static GKGameActivityInternal.< infix(_:_:)(v19, v21);

      if ((v22 & 1) != 0)
      {
        v23 = v7;
        v24 = v8 == v7++;
      }
      else
      {
        v23 = v15;
        v24 = v8 == v15++;
      }
      v13 = (void **)v16;
      if (!v24)
        *v8 = *v23;
      ++v8;
    }
    while ((unint64_t)v15 < v16 && (unint64_t)v7 < a3);
  }
  v7 = v8;
LABEL_47:
  sub_100172C58(v15, v13 - v15, v7);
  return 1;
}

uint64_t sub_1001877E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10018780C(a1, a2, a3, (void (*)(uint64_t, _QWORD, uint64_t))sub_1001731DC, &qword_100315508, &qword_100315500, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001765D4);
}

uint64_t sub_10018780C(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD, uint64_t), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t (*v23)(_BYTE *, _QWORD);
  id *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[32];

  v13 = result;
  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v28 = a3;
    else
      v28 = a3 & 0xFFFFFFFFFFFFFF8;
    sub_1001621A4();
    v15 = _CocoaArrayWrapper.endIndex.getter(v28);
    result = sub_1001648C4(v15, v29);
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (v13)
  {
    if (v14)
    {
      if (a3 < 0)
        v16 = a3;
      else
        v16 = a3 & 0xFFFFFFFFFFFFFF8;
      sub_1001621A4();
      v17 = _CocoaArrayWrapper.endIndex.getter(v16);
      result = sub_1001648C4(v17, v18);
      if (v17 <= a2)
      {
        if (v15 >= 1)
        {
          sub_100188360(a5, a6);
          v20 = v19;
          sub_1001621A4();
          for (i = 0; i != v15; ++i)
          {
            v22 = sub_100161BD0(a6);
            v23 = (uint64_t (*)(_BYTE *, _QWORD))a7(v30, i, a3, v22, v20);
            v25 = *v24;
            v26 = v23(v30, 0);
            *(_QWORD *)(v13 + 8 * i) = v25;
          }
          sub_1001648C4(v26, v27);
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        a4((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v13);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100187988(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_100187B84(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100187D7C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100187F78()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100187FA4()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1003154AC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10018839C;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1003154A8 + dword_1003154A8))(v2, v3);
}

uint64_t sub_10018800C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)sub_100188554();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001883D4(v1, (uint64_t)sub_10018839C);
  return sub_1001883C4(v2, v3, v4, v5);
}

uint64_t sub_100188050()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100188084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v5 = *(void **)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_1003154CC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10018839C;
  return ((uint64_t (*)(uint64_t, char, void *, uint64_t))((char *)&dword_1003154C8 + dword_1003154C8))(v2, v3, v5, v4);
}

uint64_t sub_100188104()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)sub_100188554();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001883D4(v1, (uint64_t)sub_100180BF0);
  return sub_1001883C4(v2, v3, v4, v5);
}

uint64_t sub_10018814C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100188180()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)sub_100188554();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001883D4(v1, (uint64_t)sub_10018839C);
  return sub_1001883C4(v2, v3, v4, v5);
}

uint64_t sub_1001881C4(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    result = sub_1001882C0(v3);
    v3 = result;
    *v1 = result;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    v9 = v5 + 8 * a1;
    v10 = *(_QWORD *)(v9 + 32);
    v11 = sub_100172C58(v9 + 40, v8, v9 + 32);
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10) = v7;
    specialized Array._endMutation()(v11);
    return v10;
  }
  return result;
}

uint64_t sub_100188254()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *v0 = v1;
  if (!(_DWORD)result || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    result = sub_1001882C0(v1);
    v1 = result;
    *v0 = result;
  }
  v3 = v1 & 0xFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(_QWORD *)(v3 + 16) = v5;
    specialized Array._endMutation()(result);
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001882C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1, v5);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

void sub_100188328(unint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!*a1)
  {
    type metadata accessor for NWEndpoint(255);
    v2 = sub_100188524();
    atomic_store(swift_getWitnessTable(v2, v3), a1);
  }
  sub_10016219C();
}

void sub_100188360(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100161C54(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }
  sub_10016219C();
}

uint64_t sub_1001883A0(uint64_t a1, uint64_t a2)
{
  return swift_task_switch(a1, a2, 0);
}

uint64_t sub_1001883C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1001883D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_1001883F4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10018840C()
{
  uint64_t v0;

  return swift_beginAccess(*(_QWORD *)(v0 + 88) + 112, v0 + 48, 33, 0);
}

uint64_t sub_100188434()
{
  uint64_t v0;

  return sub_10016CA2C(v0);
}

uint64_t sub_10018845C(uint64_t a1)
{
  uint64_t v1;

  return swift_beginAccess(a1, v1, 33, 0);
}

unint64_t sub_10018846C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  *(_QWORD *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  v5 = (_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * result) = a4;
  return result;
}

void sub_1001884A8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = a1;
}

uint64_t sub_1001884C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 64) |= 1 << result;
  return result;
}

uint64_t sub_1001884D8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void (*sub_1001884E4())(uint64_t *a1)
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  return sub_100185358(v1, v2, v0);
}

unint64_t sub_1001884F8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1001860C4(v1, v0);
}

void sub_100188504(void *a1)
{
  free(a1);
}

uint64_t sub_10018850C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  return a2(a1, 0);
}

uint64_t sub_100188514(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return String.hash(into:)(va, v2, v1);
}

uint64_t sub_100188524()
{
  uint64_t v0;

  return v0;
}

void sub_10018854C(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 16) = a2;
}

uint64_t sub_100188554()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10018855C()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0);
}

_QWORD *sub_100188568(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, *(_QWORD *)(v1 + 40));
}

void sub_100188574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char v20;
  _QWORD v21[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v21, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    sub_100176D2C();
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (uint64_t *)(v10 + 16 * v8);
      v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_100188B34(*v11, v12) & 1) == 0)
      {
        v14 = ~v7;
        v15 = (v8 + 1) & v14;
        sub_100176D2C();
        if ((v16 & 1) != 0)
        {
          do
          {
            v17 = (uint64_t *)(v10 + 16 * v15);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((sub_100188B34(*v17, v18) & 1) != 0)
              break;
            v15 = (v15 + 1) & v14;
            sub_100176D2C();
          }
          while ((v20 & 1) != 0);
        }
      }
    }
  }
}

Swift::Int sub_10018866C(uint64_t a1, uint64_t a2)
{
  Swift::Int result;

  result = sub_1001B2918((Swift::Int)&off_1002C5330, a2);
  qword_100315510 = result;
  return result;
}

id NetworkRequestEligibiltyChecker.__allocating_init(hasAcknowledgedLatestGDPR:alwaysAllowedBagKeysObject:isAppUnlistedAndDisallowed:)(char a1, uint64_t a2, char a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return NetworkRequestEligibiltyChecker.init(hasAcknowledgedLatestGDPR:alwaysAllowedBagKeysObject:isAppUnlistedAndDisallowed:)(a1, a2, a3);
}

id NetworkRequestEligibiltyChecker.init(hasAcknowledgedLatestGDPR:alwaysAllowedBagKeysObject:isAppUnlistedAndDisallowed:)(char a1, uint64_t a2, char a3)
{
  char *v3;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  objc_class *v11;
  id v12;
  uint64_t v14;
  objc_super v15;
  _BYTE v16[24];
  uint64_t v17;

  sub_100188814(a2, (uint64_t)v16);
  if (v17)
  {
    v7 = v3;
    v8 = sub_100161BD0(&qword_1003159A0);
    if ((swift_dynamicCast(&v14, v16, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
    {
      v9 = sub_1001717C8(v14);
      v7[OBJC_IVAR___GKNetworkRequestEligibilityChecker_hasAcknowledgedLatestGDPR] = a1 & 1;
      goto LABEL_8;
    }
  }
  else
  {
    v10 = v3;
    sub_100184D20((uint64_t)v16);
  }
  v3[OBJC_IVAR___GKNetworkRequestEligibilityChecker_hasAcknowledgedLatestGDPR] = a1 & 1;
  if (qword_100314900 != -1)
    swift_once(&qword_100314900, sub_10018866C);
  v9 = swift_bridgeObjectRetain(qword_100315510);
LABEL_8:
  *(_QWORD *)&v3[OBJC_IVAR___GKNetworkRequestEligibilityChecker_alwaysAllowedBagKeys] = v9;
  v3[OBJC_IVAR___GKNetworkRequestEligibilityChecker_isAppUnlistedAndDisallowed] = a3 & 1;

  v11 = (objc_class *)type metadata accessor for NetworkRequestEligibiltyChecker();
  v15.receiver = v3;
  v15.super_class = v11;
  v12 = objc_msgSendSuper2(&v15, "init");
  sub_100184D20(a2);
  return v12;
}

uint64_t sub_100188814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_1003159B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NetworkRequestEligibiltyChecker()
{
  return objc_opt_self(GKNetworkRequestEligibilityChecker);
}

id NetworkRequestEligibiltyChecker.verifyEligibility(bagKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  void *v4;
  uint64_t v5;

  sub_100188574(a1, a2, *(_QWORD *)(v2 + OBJC_IVAR___GKNetworkRequestEligibilityChecker_alwaysAllowedBagKeys));
  if ((v3 & 1) == 0
    && (*(_BYTE *)(v2 + OBJC_IVAR___GKNetworkRequestEligibilityChecker_hasAcknowledgedLatestGDPR) & 1) == 0)
  {
    return objc_msgSend((id)objc_opt_self(NSError), "gkPrivacyNoticeNotAcceptedError");
  }
  if (*(_BYTE *)(v2 + OBJC_IVAR___GKNetworkRequestEligibilityChecker_isAppUnlistedAndDisallowed) != 1)
    return 0;
  v4 = (void *)objc_opt_self(NSError);
  v5 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  return sub_100188AAC(37, v5, v4);
}

void NetworkRequestEligibiltyChecker.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.NetworkRequestEligibiltyChecker", 46, "init()", 6, 0);
  __break(1u);
}

id NetworkRequestEligibiltyChecker.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NetworkRequestEligibiltyChecker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_100188AAC(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa;
  uint64_t v7;
  id v8;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2, v7);
  v8 = objc_msgSend(a3, "userErrorForCode:userInfo:", a1, isa);

  return v8;
}

uint64_t sub_100188B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

void sub_100188B44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _BYTE v20[40];
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  uint64_t v25;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_22;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v11 >= v6)
      goto LABEL_30;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      v7 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_30;
      v12 = *(_QWORD *)(v2 + 8 * v7);
      if (!v12)
      {
        v7 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_30;
        v12 = *(_QWORD *)(v2 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_30;
          v12 = *(_QWORD *)(v2 + 8 * v7);
          if (!v12)
            break;
        }
      }
    }
LABEL_21:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_22:
    sub_1001631F4(*(_QWORD *)(a1 + 48) + 40 * v10, (uint64_t)v23);
    v21[0] = v23[0];
    v21[1] = v23[1];
    v22 = v24;
    sub_1001631F4((uint64_t)v21, (uint64_t)v20);
    v14 = sub_100161BD0(&qword_100315C78);
    if ((swift_dynamicCast(&v25, v20, &type metadata for AnyHashable, v14, 6) & 1) == 0)
      v25 = 0;
    sub_1001638F4((uint64_t)v21);
    v15 = v25;
    if (v25)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_1001725C0(0, v8[2] + 1, 1, (uint64_t)v8);
        v8 = v18;
      }
      v17 = v8[2];
      v16 = v8[3];
      if (v17 >= v16 >> 1)
      {
        sub_1001725C0(v16 > 1, v17 + 1, 1, (uint64_t)v8);
        v8 = v19;
      }
      v8[2] = v17 + 1;
      v8[v17 + 4] = v15;
    }
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_30:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v6)
      goto LABEL_30;
    v12 = *(_QWORD *)(v2 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_32:
  __break(1u);
}

_QWORD *sub_100188D84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  _QWORD *v26;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease(a2, a2);
    return _swiftEmptyArrayStorage;
  }
  v26 = _swiftEmptyArrayStorage;
  sub_100173420(0, v3, 0);
  v5 = _swiftEmptyArrayStorage;
  v6 = (_QWORD *)(a1 + 40);
  do
  {
    v8 = *(v6 - 1);
    v7 = (void *)*v6;
    if (*(_QWORD *)(a2 + 16))
    {
      swift_bridgeObjectRetain_n(*v6, 2);
      v9 = sub_1001860C4(v8, (uint64_t)v7);
      if ((v10 & 1) != 0)
      {
        sub_100161F70(*(_QWORD *)(a2 + 56) + 32 * v9, (uint64_t)&v23);
      }
      else
      {
        v23 = 0u;
        v24 = 0u;
      }
      swift_bridgeObjectRelease(v7, v10);
      if (*((_QWORD *)&v24 + 1))
      {
        sub_100161F60(&v23, v25);
        *(_QWORD *)&v23 = 0;
        *((_QWORD *)&v23 + 1) = 0xE000000000000000;
        v11._countAndFlagsBits = v8;
        v11._object = v7;
        String.append(_:)(v11);
        v12._countAndFlagsBits = 61;
        v12._object = (void *)0xE100000000000000;
        String.append(_:)(v12);
        _print_unlocked<A, B>(_:_:)(v25, &v23, (char *)&type metadata for Any + 8);
        v13 = *((_QWORD *)&v23 + 1);
        v14 = v23;
        sub_100161FE0(v25);
        swift_bridgeObjectRelease(v7, v15);
        goto LABEL_11;
      }
    }
    else
    {
      v23 = 0u;
      v24 = 0u;
      swift_bridgeObjectRetain(v7);
    }
    sub_100193CDC((uint64_t)&v23, &qword_1003159B0);
    *(_QWORD *)&v25[0] = v8;
    *((_QWORD *)&v25[0] + 1) = v7;
    swift_bridgeObjectRetain(v7);
    v17._countAndFlagsBits = 1818848829;
    v17._object = (void *)0xE400000000000000;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v7, v18);
    v13 = *((_QWORD *)&v25[0] + 1);
    v14 = *(_QWORD *)&v25[0];
LABEL_11:
    v26 = v5;
    v20 = v5[2];
    v19 = v5[3];
    if (v20 >= v19 >> 1)
    {
      sub_100173420(v19 > 1, v20 + 1, 1);
      v5 = v26;
    }
    v6 += 2;
    v5[2] = v20 + 1;
    v21 = &v5[2 * v20];
    v21[4] = v14;
    v21[5] = v13;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease(a2, v16);
  return v5;
}

uint64_t sub_100188FA0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_100161BD0(&qword_100315CD8);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100232EF0;
  v2 = sub_100194654();
  *(_QWORD *)(v1 + 32) = &type metadata for EntityCacheSchemaV1;
  *(_QWORD *)(v1 + 40) = v2;
  return v1;
}

_QWORD *sub_100188FF4()
{
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100189008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100161BD0(&qword_100315998);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100232EF0;
  v2 = type metadata accessor for EntityCacheSchemaV1.CachedEntity(0);
  sub_1001942D8(&qword_100315970, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  return v1;
}

uint64_t sub_100189078()
{
  return Schema.Version.init(_:_:_:)(1, 0, 0);
}

uint64_t sub_100189088()
{
  return sub_100189134();
}

uint64_t sub_100189094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[4];

  sub_1001923C0(a3, (uint64_t)v10);
  sub_100163928(v10, v10[3]);
  v5 = sub_100194CA4();
  v9[0] = a1;
  v9[1] = a2;
  v6 = sub_100194C84(v5, (uint64_t)v9, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  sub_10016D110(v6, v7);
  sub_100176CDC();
  return sub_100161FE0(v10);
}

uint64_t sub_100189128()
{
  return sub_100189134();
}

uint64_t sub_100189134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100194C50();
  v9 = v1;
  v10 = v2;
  v8 = v0;
  KeyPath = swift_getKeyPath(v3);
  sub_1001942D8(&qword_100315950, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  ((void (*)(uint64_t *, uint64_t, uint64_t))ObservationRegistrar.access<A, B>(_:keyPath:))(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = sub_100194CA4();
  sub_1001942D8(&qword_100315970, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  PersistentModel.getValue<A>(forKey:)(v6);
  sub_100176CDC();
  return v8;
}

uint64_t sub_1001891FC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  unint64_t v8;
  _QWORD v10[2];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  sub_1001923C0(a3, (uint64_t)v11);
  v5 = v12;
  v6 = v13;
  sub_100163928(v11, v12);
  KeyPath = swift_getKeyPath(&unk_1002336D0);
  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_100194080();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, v10, &type metadata for Data, v8, v5, v6);
  swift_release(KeyPath);
  sub_10016FF44(a1, a2);
  return sub_100161FE0(v11);
}

uint64_t sub_1001892A8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v0;
  KeyPath = swift_getKeyPath(&unk_1002336D0);
  sub_1001942D8(&qword_100315950, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1002336D0);
  sub_1001942D8(&qword_100315970, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  sub_10019233C();
  PersistentModel.getValue<A>(forKey:)(v3);
  swift_release(v3);
  return v5;
}

void sub_100189388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100189458((uint64_t)&unk_1002336A8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_100189394(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  sub_1001923C0(a2, (uint64_t)v8);
  sub_100163928(v8, v8[3]);
  sub_100194CA4();
  v3 = type metadata accessor for Date(0);
  sub_1001942D8(&qword_100315C30, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  v4 = sub_100180E38();
  sub_100194C84(v4, v5, v3, v6);
  sub_100176CDC();
  sub_100181628(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8));
  return sub_100161FE0(v8);
}

void sub_10018944C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100189458((uint64_t)&unk_100233680, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

void sub_100189458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;

  sub_100194C50();
  a17 = v19;
  a18 = v20;
  v22 = v21;
  a10 = v18;
  KeyPath = swift_getKeyPath(v21);
  sub_100194C14(&qword_100315950);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&a10, KeyPath, v24);
  sub_100194AE8();
  v25 = swift_getKeyPath(v22);
  sub_100194C14(&qword_100315970);
  sub_1001942D8(&qword_100315978, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  PersistentModel.getValue<A>(forKey:)(v25);
  sub_1001816B4();
  sub_1001947D8();
}

uint64_t sub_100189524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  void *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  void *v45;
  uint64_t v46;
  Swift::String v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = 0;
  v52 = 0xE000000000000000;
  _StringGuts.grow(_:)(78);
  v4._object = (void *)0x8000000100299660;
  v4._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v4);
  v5._countAndFlagsBits = sub_100189088();
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object, v7);
  v8._countAndFlagsBits = 0x203A6469202CLL;
  v8._object = (void *)0xE600000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = sub_100189128();
  v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10, v11);
  v12._countAndFlagsBits = 0x632065747962202CLL;
  v12._object = (void *)0xEE00203A746E756FLL;
  String.append(_:)(v12);
  v13 = sub_1001892A8();
  v15 = v14;
  v16 = Data.count.getter();
  sub_10016FF44(v13, v15);
  v50 = v16;
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v18 = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v18, v19);
  v20._countAndFlagsBits = 0x646568636163202CLL;
  v20._object = (void *)0xED0000203A746120;
  String.append(_:)(v20);
  sub_100189388(v21, v22, v23, v24, v25, v26, v27, v28, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58);
  sub_1001942D8(&qword_100315968, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  v30 = v29;
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v29);
  v32 = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v32, v33);
  v34 = *(void (**)(char *, uint64_t))(v1 + 8);
  v34(v3, v0);
  v35._countAndFlagsBits = 0x657269707865202CLL;
  v35._object = (void *)0xED0000203A746120;
  String.append(_:)(v35);
  sub_10018944C(v36, v37, v38, v39, v40, v41, v42, v43, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58);
  v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v30);
  v45 = v44._object;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v45, v46);
  v34(v3, v0);
  v47._countAndFlagsBits = 41;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  return v51;
}

#error "100189808: call analysis failed (funcsize=59)"

_QWORD *sub_10018987C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];

  v9 = v8;
  v32 = a7;
  v33 = a8;
  v30 = a3;
  v31 = a4;
  v29 = a2;
  v13 = *v8;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[5] = sub_100161BD0(&qword_100315C48);
  sub_1001942D8(&qword_100315970, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  v19 = v18;
  v34[0] = v13;
  v34[1] = v13;
  v34[2] = v18;
  v34[3] = v18;
  v9[6] = swift_getOpaqueTypeConformance2(v34, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10016CA34(v9 + 2);
  v20 = static PersistentModel.createBackingData<A>()(v13, v13, v19, v19);
  ObservationRegistrar.init()(v20);
  sub_100189094(a1, v29, (uint64_t)(v9 + 2));
  sub_100189094(v30, v31, (uint64_t)(v9 + 2));
  v28 = a5;
  sub_100170728(a5, a6);
  v21 = a5;
  v22 = a6;
  sub_1001891FC(v21, a6, (uint64_t)(v9 + 2));
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v24 = v32;
  v23(v17, v32, v14);
  sub_100189394((uint64_t)v17, (uint64_t)(v9 + 2));
  v25 = v33;
  v23(v17, v33, v14);
  sub_100189394((uint64_t)v17, (uint64_t)(v9 + 2));
  sub_10016FF44(v28, v22);
  v26 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v26(v25, v14);
  v26(v24, v14);
  return v9;
}

uint64_t sub_100189A80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1001923C0(v3, a1);
}

uint64_t sub_100189AC8(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + 16);
  swift_beginAccess(v3, v5, 33, 0);
  sub_100161FE0(v3);
  sub_10016C8B0(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t sub_100189B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v0 = sub_100161BD0(&qword_100315990);
  v1 = *(_QWORD *)(type metadata accessor for Schema.PropertyMetadata(0) - 8);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ 5 * *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100233290;
  KeyPath = swift_getKeyPath(&unk_100233720);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x79654B676162, 0xE600000000000000, KeyPath, &v12, &v9);
  v4 = swift_getKeyPath(&unk_1002336F8);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(25705, 0xE200000000000000, v4, &v12, &v9);
  v5 = swift_getKeyPath(&unk_1002336D0);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1635017060, 0xE400000000000000, v5, &v12, &v9);
  v6 = swift_getKeyPath(&unk_1002336A8);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x7441646568636163, 0xE800000000000000, v6, &v12, &v9);
  v7 = swift_getKeyPath(&unk_100233680);
  v12 = 0u;
  v13 = 0u;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x4173657269707865, 0xE900000000000074, v7, &v12, &v9);
  return v2;
}

_QWORD *sub_100189CF4(_QWORD *a1)
{
  uint64_t v1;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return sub_100189D2C(a1);
}

_QWORD *sub_100189D2C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = *v1;
  v2[5] = sub_100161BD0(&qword_100315C48);
  sub_1001942D8(&qword_100315970, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  v6 = v5;
  *(_QWORD *)&v10 = v4;
  *((_QWORD *)&v10 + 1) = v4;
  v11 = v5;
  v12 = v5;
  v2[6] = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10016CA34(v2 + 2);
  v7 = static PersistentModel.createBackingData<A>()(v4, v4, v6, v6);
  ObservationRegistrar.init()(v7);
  sub_1001923C0((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v2 + 2, v9, 33, 0);
  sub_100161FE0(v2 + 2);
  sub_10016C8B0(&v10, (uint64_t)(v2 + 2));
  swift_endAccess(v9);
  sub_100161FE0(a1);
  return v2;
}

uint64_t sub_100189E34()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100161FE0(v0 + 2);
  v1 = (char *)v0
     + OBJC_IVAR____TtCV14GameDaemonCoreP33_1FC4D10440B9DF42E57D244557C7E23B19EntityCacheSchemaV112CachedEntity___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100189E8C()
{
  return type metadata accessor for EntityCacheSchemaV1.CachedEntity(0);
}

uint64_t type metadata accessor for EntityCacheSchemaV1.CachedEntity(uint64_t a1)
{
  uint64_t result;

  result = qword_100315598;
  if (!qword_100315598)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EntityCacheSchemaV1.CachedEntity);
  return result;
}

uint64_t sub_100189ECC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = "(";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100189F58()
{
  return sub_100189524();
}

uint64_t sub_100189F8C()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_100194C00();
  _StringGuts.grow(_:)(31);
  v1._countAndFlagsBits = 0x4564656863746546;
  v1._object = (void *)0xEE0020797469746ELL;
  String.append(_:)(v1);
  v2 = sub_100161BD0(&qword_100315A90);
  sub_100194C38(v2, v3, v2, (uint64_t)&type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v4._countAndFlagsBits = 0x697078457369202CLL;
  v4._object = (void *)0xED0000203A646572;
  String.append(_:)(v4);
  if (*(_BYTE *)(v0 + OBJC_IVAR___GKFetchedEntity_isExpired))
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR___GKFetchedEntity_isExpired))
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  sub_1001648C4(v8, v9);
  return v11;
}

id sub_10018A08C(uint64_t a1, char a2)
{
  _BYTE *v2;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)sub_10016D668();
  *(_QWORD *)&v2[OBJC_IVAR___GKFetchedEntity_entity] = a1;
  v2[OBJC_IVAR___GKFetchedEntity_isExpired] = a2;
  v7.receiver = v2;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "init");
}

void sub_10018A0EC()
{
  sub_100194BB4((uint64_t)"GameDaemonCore.FetchedEntity", 28, (uint64_t)"init()");
  __break(1u);
}

uint64_t type metadata accessor for FetchedEntity()
{
  return objc_opt_self(GKFetchedEntity);
}

uint64_t sub_10018A14C()
{
  uint64_t result;

  result = sub_10018A168();
  qword_100315560 = result;
  return result;
}

uint64_t sub_10018A168()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100161BD0(&qword_100314F48);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100232EF0;
  *(_QWORD *)(v1 + 32) = sub_10016CBB4(0, &qword_100315C70, GKInternalRepresentation_ptr);
  v2 = objc_msgSend((id)objc_opt_self(GKInternalRepresentation), "secureCodedJsonTypes");
  v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100188B44(v3);
  v5 = v4;
  swift_bridgeObjectRelease(v3, v6);
  sub_1001764E8(v5);
  return v1;
}

uint64_t sub_10018A240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, char *, uint64_t);
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  os_log_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  os_log_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v82 = a1;
  *(_QWORD *)&v83 = a3;
  v8 = type metadata accessor for Logger(0);
  v77 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v79 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModelConfiguration.CloudKitDatabase(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100161BD0(&qword_100315B00);
  __chkstk_darwin(v13);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for URL(0);
  v81 = *(_QWORD *)(v84 - 8);
  v16 = __chkstk_darwin(v84);
  v80 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v73 - v18;
  v86 = type metadata accessor for ModelConfiguration(0);
  v20 = *(_QWORD *)(v86 - 8);
  v21 = __chkstk_darwin(v86);
  __chkstk_darwin(v21);
  v24 = (char *)&v73 - v23;
  v78 = v8;
  v76 = v25;
  if ((a5 & 1) != 0)
  {
    swift_bridgeObjectRelease(a4, v22);
    swift_bridgeObjectRelease(a2, v26);
    ModelConfiguration.init(isStoredInMemoryOnly:)(1);
    goto LABEL_6;
  }
  v27 = (void *)objc_opt_self(GKClientProxy);
  v28 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v29 = sub_1001BD188(v82, a2, v83, a4, 0xD000000000000026, 0x80000001002998A0, (uint64_t)v28, v27);

  if (!v29)
  {
    sub_100161B54((uint64_t)v15, 1, 1, v84);
    goto LABEL_11;
  }
  v30 = v80;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v29);

  v31 = v81;
  v32 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
  v33 = v84;
  v32(v15, v30, v84);
  sub_100161B54((uint64_t)v15, 0, 1, v33);
  if (sub_10016445C((uint64_t)v15, 1, v33) == 1)
  {
LABEL_11:
    sub_100193CDC((uint64_t)v15, &qword_100315B00);
    v71 = sub_100193B40();
    swift_allocError(&type metadata for EntityCacheError, v71, 0, 0);
    *v72 = 0x8000000000000000;
    return swift_willThrow();
  }
  v32(v19, v15, v33);
  v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v31 + 16))(v30, v19, v33);
  static ModelConfiguration.CloudKitDatabase.none.getter(v34);
  ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)(0, 0, 0, v30, 1, v12);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v33);
LABEL_6:
  type metadata accessor for ModelContainer(0);
  v35 = sub_100161BD0(&qword_100315998);
  v36 = swift_allocObject(v35, 48, 7);
  v83 = xmmword_100232EF0;
  *(_OWORD *)(v36 + 16) = xmmword_100232EF0;
  v37 = type metadata accessor for EntityCacheSchemaV1.CachedEntity(0);
  sub_1001942D8(&qword_100315970, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  *(_QWORD *)(v36 + 32) = v37;
  *(_QWORD *)(v36 + 40) = v38;
  v39 = sub_100193B7C();
  v40 = sub_100161BD0(&qword_100315B18);
  v41 = *(unsigned __int8 *)(v20 + 80);
  v42 = (v41 + 32) & ~v41;
  v43 = swift_allocObject(v40, v42 + *(_QWORD *)(v20 + 72), v41 | 7);
  *(_OWORD *)(v43 + 16) = v83;
  v44 = v43 + v42;
  v45 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
  v46 = v86;
  v45(v44, v24, v86);
  v47 = v85;
  v48 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)(v36, &type metadata for EntityCacheMigrationPlan, v39, v43);
  if (v47)
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v46);
  v50 = v48;
  v51 = type metadata accessor for EntityCache();
  swift_allocObject(v51, 40, 7);
  v52 = swift_retain(v50);
  v85 = sub_10018CDE0(v52);
  v53 = v79;
  static GKLog.cache.getter(v85);
  v54 = v76;
  v55 = ((uint64_t (*)(uint64_t, char *, uint64_t))v45)(v76, v24, v46);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.debug.getter(v56);
  v58 = v57;
  if (os_log_type_enabled(v56, v57))
  {
    v59 = swift_slowAlloc(22, -1);
    v82 = swift_slowAlloc(64, -1);
    v89 = v82;
    *(_DWORD *)v59 = 136315394;
    v75 = v56;
    v87 = sub_10016FE60(0xD000000000000020, 0x80000001002998D0, &v89);
    v74 = v58;
    v60 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88);
    *(_WORD *)(v59 + 12) = 2080;
    *(_QWORD *)&v83 = v24;
    v73 = v59 + 14;
    v61 = v80;
    v62 = ModelConfiguration.url.getter(v60);
    v63 = URL.absoluteString.getter(v62);
    v65 = v64;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v61, v84);
    v87 = sub_10016FE60(v63, v65, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88);
    swift_bridgeObjectRelease(v65, v66);
    v67 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v46 = v86;
    v67(v54, v86);
    v68 = v75;
    _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v74, "%s initialized at: %s", (uint8_t *)v59, 0x16u);
    v69 = v82;
    swift_arrayDestroy(v82, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v59, -1, -1);
    swift_release(v50);

    (*(void (**)(char *, uint64_t))(v77 + 8))(v79, v78);
    v70 = (char *)v83;
  }
  else
  {

    v67 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v67(v54, v46);
    swift_release(v50);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v53, v78);
    v70 = v24;
  }
  v67((uint64_t)v70, v46);
  return (uint64_t)v85;
}

uint64_t sub_10018A8D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static GKLog.cache.getter(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v14 = v11;
    *(_DWORD *)v10 = 136315138;
    v13 = sub_10016FE60(0xD000000000000020, 0x80000001002998D0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s is deinitializing", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_unknownObjectRelease();
  swift_release(*(_QWORD *)(v1 + 32));
  return v1;
}

uint64_t sub_10018AA70()
{
  uint64_t v0;

  v0 = sub_10018A8D0();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_10018AA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[9] = swift_task_alloc(v6);
  v3[10] = swift_task_alloc(v6);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100161BD0(&qword_100315B58) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v7);
  v3[12] = swift_task_alloc(v7);
  v8 = type metadata accessor for EntityCache();
  v3[13] = v8;
  sub_1001942D8(&qword_100315940, (uint64_t (*)(uint64_t))type metadata accessor for EntityCache);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, v9);
  return swift_task_switch(sub_10018AB74, v10, v11);
}

uint64_t sub_10018AB74()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  os_log_type_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    v2 = v0 + 16;
    sub_1001949D8();
    v3 = swift_bridgeObjectRetain_n(v1, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 56);
    if (v6)
    {
      v38 = *(_QWORD *)(v0 + 32);
      v40 = *(_QWORD *)(v0 + 64);
      v9 = (uint8_t *)sub_100165DA4(12);
      v39 = v7;
      v10 = sub_100165DA4(32);
      v41 = v10;
      *(_DWORD *)v9 = 136315138;
      sub_100176C14();
      *(_QWORD *)(v0 + 24) = sub_10016FE60(v38, v1, &v41);
      v2 = v0 + 16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
      sub_100170848(v1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Deleting entities for bagKey: %s", v9, 0xCu);
      sub_100165DFC(v10, v11, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v10);
      sub_100165D98((uint64_t)v9);

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v8);
    }
    else
    {

      sub_10017081C(v1);
      v23 = sub_100194928();
      v25(v23, v24);
    }
    v26 = *(_QWORD *)(v0 + 88);
    v27 = *(_QWORD *)(v0 + 32);
    v28 = swift_task_alloc(32);
    *(_QWORD *)(v28 + 16) = v27;
    *(_QWORD *)(v28 + 24) = v1;
    *(_QWORD *)(v0 + 16) = sub_100189E8C();
    Predicate.init(_:)(sub_1001940C8, v28, 1, v2);
    v29 = sub_100161BD0(&qword_100315B60);
    sub_100194C90(v26, v30, v31, v29);
    v32 = sub_100181100();
    sub_1001940D0(v32, v33);
    sub_100180E00();
  }
  else
  {
    v12 = *(void **)(v0 + 72);
    v13 = sub_1001949D8();
    Logger.logObject.getter(v13);
    v14 = sub_100194B40();
    if (sub_100194B48(v14))
    {
      v15 = (_WORD *)sub_100165DA4(2);
      *v15 = 0;
      sub_100194A14((void *)&_mh_execute_header, v16, v17, "Deleting all entities");
      sub_100165D98((uint64_t)v15);
    }
    v18 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 64);
    v19 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 56);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    v22 = sub_100161BD0(&qword_100315B60);
    sub_100161B54(v18, 1, 1, v22);
  }
  v34 = *(_QWORD *)(v0 + 96);
  sub_1001942D8(&qword_100315988, (uint64_t (*)(uint64_t))type metadata accessor for EntityCache);
  sub_100194BEC();
  v35 = sub_100189E8C();
  sub_1001942D8(&qword_100315970, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v35, v34, 1, v35, v36);
  sub_1001949C8();
  sub_100194BEC();
  dispatch thunk of ModelContext.save()();
  sub_100193CDC(*(_QWORD *)(v0 + 96), &qword_100315B58);
  sub_1001949C8();
  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018AEEC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v24 = a2;
  v25 = a3;
  v6 = sub_100161BD0(&qword_100315B80);
  v27 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100161BD0(&qword_100315B88);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100161BD0(&qword_100315B90);
  v26 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  sub_10019404C(&qword_100315BA8, &qword_100315B88);
  v18 = v17;
  static PredicateExpressions.build_Arg<A>(_:)(v16, v9, v17);
  KeyPath = swift_getKeyPath(&unk_100233720);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v12, KeyPath, v9, v18);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v28[0] = v24;
  v28[1] = v25;
  static PredicateExpressions.build_Arg<A>(_:)(v28, &type metadata for String);
  a4[3] = sub_100161BD0(&qword_100315B98);
  a4[4] = sub_100193DDC();
  sub_10016CA34(a4);
  sub_10019404C(&qword_100315BB0, &qword_100315B90);
  v21 = v20;
  sub_10019404C(&qword_100315BB8, &qword_100315B80);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v15, v8, v13, v6, v21, v22, &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, v13);
}

uint64_t sub_10018B150(uint64_t a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v3[4] = v7;
  v8 = dword_1003156BC;
  swift_retain(a3);
  v9 = (_QWORD *)swift_task_alloc(v8);
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_10018B1E8;
  return sub_10018AA8C(a1, v7);
}

uint64_t sub_10018B1E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  sub_10019498C();
  sub_1001816DC(*(_QWORD *)(v2 + 40), v3);
  v4 = sub_1001816B4();
  sub_1001648C4(v4, v5);
  v6 = *(_QWORD *)(v2 + 24);
  if (v0)
  {
    v7 = (void *)sub_1001949F8();
    sub_1001947D0();
    sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16));

  }
  else
  {
    sub_100194768();
  }
  _Block_release(*(const void **)(v2 + 24));
  return sub_100165E20(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10018B25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  v6 = sub_100161BD0(&qword_100315B58);
  v5[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100161BD0(&qword_100315C58);
  v5[22] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[23] = v8;
  v5[24] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EntityCache();
  v5[25] = v9;
  sub_1001942D8(&qword_100315940, (uint64_t (*)(uint64_t))type metadata accessor for EntityCache);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  return swift_task_switch(sub_10018B32C, v11, v12);
}

uint64_t sub_10018B32C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  __int128 v46;
  uint64_t v47;

  sub_100180CB0();
  v1 = *(_QWORD *)(v0 + 192);
  v47 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD **)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 144);
  v46 = *(_OWORD *)(v0 + 128);
  sub_100161BD0(&qword_100315B60);
  sub_100194CB4(v2, 1);
  v6 = sub_100189E8C();
  sub_1001942D8(&qword_100315970, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  v8 = v7;
  ((void (*)(uint64_t, _QWORD *, uint64_t, uint64_t))FetchDescriptor.init(predicate:sortBy:))(v2, _swiftEmptyArrayStorage, v6, v7);
  v9 = swift_task_alloc(48);
  *(_OWORD *)(v9 + 16) = v46;
  *(_QWORD *)(v9 + 32) = v5;
  *(_QWORD *)(v9 + 40) = v4;
  v10 = v9;
  *(_QWORD *)(v0 + 112) = v6;
  Predicate.init(_:)(sub_1001940BC, v9, 1, v0 + 112);
  sub_100194CB4(v2, 0);
  ((void (*)(uint64_t, _QWORD *))FetchDescriptor.predicate.setter)(v2, v3);
  ((void (*)(uint64_t, _QWORD, _QWORD *))FetchDescriptor.fetchLimit.setter)(1, 0, v3);
  sub_1001942D8(&qword_100315988, (uint64_t (*)(uint64_t))type metadata accessor for EntityCache);
  ModelActor.modelContext.getter(v47, v11);
  v12 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))dispatch thunk of ModelContext.fetch<A>(_:))(v1, v6, v8);
  v13 = sub_100176CDC();
  if (!((unint64_t)v12 >> 62))
  {
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_18:
    v8 = v10;
    v43 = *(_QWORD *)(v0 + 184);
    sub_10016D13C(v13, v14);
    sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
    goto LABEL_19;
  }
  if (v12 < 0)
    v40 = v12;
  else
    v40 = v12 & 0xFFFFFFFFFFFFFF8;
  sub_10016D290();
  v41 = _CocoaArrayWrapper.endIndex.getter(v40);
  v13 = sub_10016D13C(v41, v42);
  if (!v41)
    goto LABEL_18;
LABEL_3:
  if ((v12 & 0xC000000000000001) != 0)
  {
    v8 = v10;
    v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
  }
  else
  {
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }
    v8 = v10;
    v15 = swift_retain(*(_QWORD *)(v12 + 32));
  }
  v3 = (_QWORD *)(v0 + 48);
  sub_10016D13C(v15, v16);
  sub_10016CBB4(0, (unint64_t *)&unk_100315C60, NSKeyedUnarchiver_ptr);
  if (qword_100314908 != -1)
LABEL_22:
    swift_once(&qword_100314908, sub_10018A14C);
  v17 = qword_100315560;
  v18 = sub_1001892A8();
  v20 = v19;
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v3, v17, v18, v19);
  sub_10016FF44(v18, v20);
  if (!*(_QWORD *)(v0 + 72))
  {
    sub_100193CDC((uint64_t)v3, &qword_1003159B0);
    v35 = sub_100193B40();
    v36 = sub_1001948C0((uint64_t)&type metadata for EntityCacheError, v35);
    sub_100194B94(v37, 0x8000000000000008);
LABEL_8:
    v22 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 192);
    v23 = sub_100193B40();
    sub_1001948C0((uint64_t)&type metadata for EntityCacheError, v23);
    *v24 = v36;
    v25 = sub_1001949F0();
    ((void (*)(uint64_t))swift_willThrow)(v25);
    sub_100194AE8();
    sub_1001947D0();
    sub_100181628(v21, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    sub_100180E00();
    sub_10016D2A8();
    sub_100180C98();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  sub_100161F60(v3, (_OWORD *)(v0 + 16));
  sub_100161F70(v0 + 16, v0 + 80);
  sub_100161BD0(&qword_100315A90);
  v27 = sub_100181100();
  if (!swift_dynamicCast(v27, v28, v29, v30, 6))
  {
    v38 = sub_100193B40();
    v36 = sub_1001948C0((uint64_t)&type metadata for EntityCacheError, v38);
    sub_100194B94(v39, 0x8000000000000010);
    sub_100161FE0((_QWORD *)(v0 + 16));
    goto LABEL_8;
  }
  v31 = *(_QWORD *)(v0 + 184);
  v32 = *(_QWORD *)(v0 + 120);
  v33 = sub_10018978C();
  v34 = objc_allocWithZone((Class)type metadata accessor for FetchedEntity());
  sub_10018A08C(v32, v33 & 1);
  sub_100194AE8();
  sub_100161FE0((_QWORD *)(v0 + 16));
  sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
LABEL_19:
  swift_task_dealloc(v8);
  sub_100180C98();
  sub_100180D6C();
  v44 = sub_10016D2C4();
  return v45(v44);
}

uint64_t sub_10018B790@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v49 = a4;
  v50 = a5;
  v45 = a3;
  v43 = a2;
  v52 = a6;
  v53 = sub_100161BD0(&qword_100315B80);
  v47 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100161BD0(&qword_100315B88);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100161BD0(&qword_100315B90);
  v44 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100161BD0(&qword_100315B98);
  v51 = *(_QWORD *)(v48 - 8);
  v16 = __chkstk_darwin(v48);
  v46 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v42 = (char *)&v40 - v18;
  v19 = *a1;
  sub_10019404C(&qword_100315BA8, &qword_100315B88);
  v21 = v20;
  static PredicateExpressions.build_Arg<A>(_:)(v19, v9, v20);
  KeyPath = swift_getKeyPath(&unk_100233720);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v12, KeyPath, v9, v21);
  swift_release(KeyPath);
  v41 = *(void (**)(char *, uint64_t))(v10 + 8);
  v41(v12, v9);
  v54 = v43;
  v55 = v45;
  static PredicateExpressions.build_Arg<A>(_:)(&v54, &type metadata for String);
  sub_10019404C(&qword_100315BB0, &qword_100315B90);
  v24 = v23;
  v45 = v23;
  sub_10019404C(&qword_100315BB8, &qword_100315B80);
  v26 = v25;
  v27 = v53;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v15, v8, v13, v53, v24, v25, &protocol witness table for String);
  v28 = *(void (**)(char *, uint64_t))(v47 + 8);
  v28(v8, v27);
  v29 = *(void (**)(char *, uint64_t))(v44 + 8);
  v29(v15, v13);
  static PredicateExpressions.build_Arg<A>(_:)(v19, v9, v21);
  v30 = swift_getKeyPath(&unk_1002336F8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v12, v30, v9, v21);
  swift_release(v30);
  v41(v12, v9);
  v54 = v49;
  v55 = v50;
  static PredicateExpressions.build_Arg<A>(_:)(&v54, &type metadata for String);
  v31 = v46;
  v32 = v53;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v15, v8, v13, v53, v45, v26, &protocol witness table for String);
  v28(v8, v32);
  v29(v15, v13);
  v33 = sub_100161BD0(&qword_100315BA0);
  v34 = v52;
  v52[3] = v33;
  v34[4] = sub_100193D78();
  sub_10016CA34(v34);
  sub_10019404C(&qword_100315BC0, &qword_100315B98);
  v35 = v42;
  v36 = v48;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v42, v31, v48, v48, v37, v37);
  v38 = *(void (**)(char *, uint64_t))(v51 + 8);
  v38(v31, v36);
  return ((uint64_t (*)(char *, uint64_t))v38)(v35, v36);
}

uint64_t sub_10018BB90(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v4[5] = v12;
  v14 = dword_1003156C4;
  swift_retain(a4);
  v15 = (_QWORD *)swift_task_alloc(v14);
  v4[6] = v15;
  *v15 = v4;
  v15[1] = sub_10018BC44;
  return sub_10018B25C(v8, v10, v11, v13);
}

uint64_t sub_10018BC44(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = v1;
  sub_100194AAC();
  sub_1001816DC(*(_QWORD *)(v3 + 48), v6);
  v7 = sub_1001949C8();
  v9 = sub_10016D110(v7, v8);
  sub_10016D010(v9, v10);
  if (v4)
  {
    v11 = (void *)sub_100194C9C();
    sub_10016D1B4();
    sub_1001947BC();

    sub_1001948FC();
  }
  else
  {
    sub_1001947A8();
    sub_1001948FC();

  }
  return sub_100165E20(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10018BCD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7[11] = a6;
  v7[12] = v6;
  v7[9] = a4;
  v7[10] = a5;
  v7[7] = a2;
  v7[8] = a3;
  v7[6] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[14] = v9;
  v7[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100161BD0(&qword_100315B58);
  v7[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v7[17] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[18] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[19] = swift_task_alloc(v13);
  v7[20] = swift_task_alloc(v13);
  v7[21] = swift_task_alloc(v13);
  v14 = type metadata accessor for EntityCache();
  v7[22] = v14;
  sub_1001942D8(&qword_100315940, (uint64_t (*)(uint64_t))type metadata accessor for EntityCache);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v14, v15);
  return swift_task_switch(sub_10018BE18, v16, v17);
}

uint64_t sub_10018BE18()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = (void *)objc_opt_self(NSKeyedArchiver);
  *(_QWORD *)(v0 + 16) = 0;
  v3 = objc_msgSend(v2, "archivedDataWithRootObject:requiringSecureCoding:error:", v1, 1, v0 + 16);
  v4 = *(id *)(v0 + 16);
  if (v3)
  {
    v49 = v0 + 16;
    v5 = v0 + 48;
    v6 = *(_QWORD *)(v0 + 168);
    v61 = *(_QWORD *)(v0 + 176);
    v63 = v0;
    v7 = *(_QWORD *)(v0 + 160);
    v52 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v58 = *(_QWORD *)(v0 + 48);
    v50 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 64);
    v11 = *(_QWORD *)(v0 + 72);
    v54 = v10;
    v12 = *(_QWORD *)(v5 + 8);
    v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v15 = v14;

    v16 = sub_100170728(v13, v15);
    static Date.now.getter(v16);
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v17(v7, v6, v9);
    v17(v52, v50, v9);
    v18 = sub_100189E8C();
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    sub_10016D21C();
    sub_100176C2C();
    v19 = sub_10018987C(v58, v12, v54, v11, v13, v15, v7, v52);
    sub_1001942D8(&qword_100315988, (uint64_t (*)(uint64_t))type metadata accessor for EntityCache);
    v21 = v20;
    sub_100194A08(v61);
    sub_1001942D8(&qword_100315970, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
    v23 = v22;
    dispatch thunk of ModelContext.insert<A>(_:)(v19, v18, v22);
    sub_100165E88();
    sub_100194A08(v61);
    dispatch thunk of ModelContext.save()();
    v60 = v13;
    v62 = v15;
    v28 = *(_QWORD *)(v63 + 176);
    v55 = *(_QWORD *)(v63 + 168);
    v29 = *(_QWORD *)(v63 + 128);
    v51 = *(_OWORD *)(v63 + 48);
    v53 = *(_OWORD *)(v63 + 64);
    sub_100165E88();
    sub_100194A08(v28);
    v30 = swift_task_alloc(64);
    *(_OWORD *)(v30 + 16) = v51;
    *(_OWORD *)(v30 + 32) = v53;
    *(_QWORD *)(v30 + 48) = v55;
    *(_QWORD *)(v63 + 24) = v18;
    v56 = v30;
    Predicate.init(_:)(sub_100193CCC, v30, 1, v49 + 8);
    v31 = sub_100161BD0(&qword_100315B60);
    sub_100194C90(v29, v32, v33, v31);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v18, v29, 1, v18, v23);
    v34 = *(_QWORD *)(v63 + 176);
    sub_100193CDC(*(_QWORD *)(v63 + 128), &qword_100315B58);
    sub_1001949D0();
    ModelActor.modelContext.getter(v34, v21);
    v35 = dispatch thunk of ModelContext.save()();
    sub_100194BC8(v35, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v51, *((uint64_t *)&v51 + 1), v53, *((uint64_t *)&v53 + 1), v49 + 8, v56, (uint64_t)v19,
      v60,
      v62);
    swift_release(v59);
    sub_1001949D0();
    v36 = *(_QWORD *)(v63 + 120);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v63 + 144) + 8))(*(_QWORD *)(v63 + 168), *(_QWORD *)(v63 + 136));
    swift_task_dealloc(v57);
    sub_10016D2A8();
    sub_100180C98();
    sub_100180D6C();
    sub_100180E00();
    swift_task_dealloc(v36);
    v37 = *(uint64_t (**)(void))(v63 + 8);
  }
  else
  {
    v24 = v4;
    v25 = _convertNSErrorToError(_:)(v4);

    swift_willThrow();
    v26 = sub_100193B40();
    sub_1001948C0((uint64_t)&type metadata for EntityCacheError, v26);
    *v27 = v25 | 0x4000000000000000;
    swift_willThrow();
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    sub_10016D2A8();
    sub_100180C98();
    sub_100180D6C();
    sub_100180E00();
    v37 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v37();
}

uint64_t sub_10018C408@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;

  v91 = a6;
  v81 = a5;
  v80 = a4;
  v76 = a3;
  v78 = a2;
  v97 = a7;
  v90 = type metadata accessor for PredicateExpressions.ComparisonOperator(0);
  v88 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v87 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100161BD0(&qword_100315B68);
  v94 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v84 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100161BD0(&qword_100315B70);
  v93 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v82 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100161BD0(&qword_100315B78);
  v12 = *(_QWORD *)(v11 - 8);
  v95 = v11;
  v96 = v12;
  __chkstk_darwin(v11);
  v86 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100161BD0(&qword_100315B80);
  v75 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100161BD0(&qword_100315B88);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100161BD0(&qword_100315B90);
  v72 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100161BD0(&qword_100315B98);
  v79 = *(_QWORD *)(v77 - 8);
  v23 = __chkstk_darwin(v77);
  v73 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v71 = (char *)&v69 - v25;
  v83 = sub_100161BD0(&qword_100315BA0);
  v85 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v99 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *a1;
  sub_10019404C(&qword_100315BA8, &qword_100315B88);
  v29 = v28;
  v70 = v27;
  static PredicateExpressions.build_Arg<A>(_:)(v27, v16, v28);
  KeyPath = swift_getKeyPath(&unk_100233720);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v19, KeyPath, v16, v29);
  swift_release(KeyPath);
  v98 = *(void (**)(char *, uint64_t))(v17 + 8);
  v98(v19, v16);
  v100 = v78;
  v101 = v76;
  static PredicateExpressions.build_Arg<A>(_:)(&v100, &type metadata for String);
  sub_10019404C(&qword_100315BB0, &qword_100315B90);
  v32 = v31;
  v78 = v31;
  sub_10019404C(&qword_100315BB8, &qword_100315B80);
  v76 = v33;
  v34 = v20;
  v69 = v20;
  v35 = v74;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v22, v15, v20, v74, v32, v33, &protocol witness table for String);
  v36 = *(void (**)(char *, uint64_t))(v75 + 8);
  v36(v15, v35);
  v37 = *(void (**)(char *, uint64_t))(v72 + 8);
  v37(v22, v34);
  static PredicateExpressions.build_Arg<A>(_:)(v27, v16, v29);
  v38 = swift_getKeyPath(&unk_1002336F8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v19, v38, v16, v29);
  swift_release(v38);
  v98(v19, v16);
  v100 = v80;
  v101 = v81;
  static PredicateExpressions.build_Arg<A>(_:)(&v100, &type metadata for String);
  v39 = v73;
  v40 = v69;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v22, v15, v69, v35, v78, v76, &protocol witness table for String);
  v36(v15, v35);
  v37(v22, v40);
  sub_10019404C(&qword_100315BC0, &qword_100315B98);
  v41 = v71;
  v42 = v77;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v71, v39, v77, v77, v43, v43);
  v44 = *(void (**)(char *, uint64_t))(v79 + 8);
  v44(v39, v42);
  v44(v41, v42);
  static PredicateExpressions.build_Arg<A>(_:)(v70, v16, v29);
  v45 = swift_getKeyPath(&unk_1002336A8);
  v46 = v82;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v19, v45, v16, v29);
  swift_release(v45);
  v98(v19, v16);
  v47 = type metadata accessor for Date(0);
  v48 = v84;
  static PredicateExpressions.build_Arg<A>(_:)(v91, v47);
  v50 = v87;
  v49 = v88;
  v51 = v90;
  (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v87, enum case for PredicateExpressions.ComparisonOperator.lessThan(_:), v90);
  sub_10019404C(&qword_100315BC8, &qword_100315B70);
  v53 = v52;
  sub_10019404C(&qword_100315BD0, &qword_100315B68);
  v55 = v54;
  sub_1001942D8(&qword_100315BD8, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  v56 = v86;
  v57 = v89;
  v58 = v92;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v46, v48, v50, v89, v92, v53, v55, v59);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v48, v58);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v46, v57);
  v60 = sub_100161BD0(&qword_100315BE0);
  v61 = v97;
  v97[3] = v60;
  v61[4] = sub_100193D0C();
  sub_10016CA34(v61);
  sub_10019404C(&qword_100315C38, &qword_100315BA0);
  v63 = v62;
  sub_10019404C(&qword_100315C40, &qword_100315B78);
  v64 = v99;
  v65 = v83;
  v66 = v95;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v99, v56, v83, v95, v63, v67);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v56, v66);
  return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v64, v65);
}

uint64_t type metadata accessor for EntityCache()
{
  return objc_opt_self(_TtC14GameDaemonCoreP33_1FC4D10440B9DF42E57D244557C7E23B11EntityCache);
}

uint64_t sub_10018CC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v6[2] = a3;
  v6[3] = a6;
  v13 = type metadata accessor for Date(0);
  v6[4] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[5] = v14;
  v15 = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[6] = v15;
  v6[7] = _Block_copy(a5);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v18 = v17;
  v6[8] = v17;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v21 = v20;
  v6[9] = v20;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v22 = dword_1003156CC;
  swift_unknownObjectRetain();
  swift_retain(a6);
  v23 = (_QWORD *)swift_task_alloc(v22);
  v6[10] = v23;
  *v23 = v6;
  v23[1] = sub_10018CD1C;
  return sub_10018BCD0(v16, v18, v19, v21, a3, v15);
}

uint64_t sub_10018CD1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;

  v2 = *v1;
  v13 = v2;
  v4 = *(_QWORD *)(v2 + 40);
  v3 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v2 + 24);
  sub_1001816DC(*(_QWORD *)(v2 + 80), &v13);
  sub_100181628(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  swift_unknownObjectRelease();
  v6 = swift_release(v5);
  v8 = sub_1001648C4(v6, v7);
  sub_10016D110(v8, v9);
  v10 = *(_QWORD *)(v2 + 56);
  if (v0)
  {
    v11 = (void *)sub_1001949F8();
    sub_1001947D0();
    sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16));

  }
  else
  {
    sub_100194768();
  }
  _Block_release(*(const void **)(v2 + 56));
  sub_10016D2A8();
  return ((uint64_t (*)(void))v1[1])();
}

_QWORD *sub_10018CDE0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = type metadata accessor for ModelContext(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = swift_retain(a1);
  v6 = ModelContext.init(_:)(v5);
  v7 = type metadata accessor for DefaultSerialModelExecutor(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = DefaultSerialModelExecutor.init(modelContext:)(v6);
  sub_1001942D8(&qword_100315B20, (uint64_t (*)(uint64_t))&type metadata accessor for DefaultSerialModelExecutor);
  v2[2] = v8;
  v2[3] = v9;
  v2[4] = a1;
  return v2;
}

uint64_t sub_10018CE84()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for EntityCache();
  sub_1001942D8(&qword_100315988, (uint64_t (*)(uint64_t))type metadata accessor for EntityCache);
  return ModelActor.unownedExecutor.getter(v0, v1);
}

unint64_t sub_10018CECC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;

  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(0xE000000000000000, v8);
  swift_bridgeObjectRetain(a2);
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(a2, v10);
  v11._countAndFlagsBits = 0x6175676E616C202CLL;
  v11._object = (void *)0xEC000000203A6567;
  String.append(_:)(v11);
  swift_bridgeObjectRetain(a4);
  v12._countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(a4, v13);
  return 0xD000000000000019;
}

uint64_t sub_10018CFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRetain(a3);
  v10 = String.hash(into:)(a1, a2, a3);
  sub_10016D110(v10, v11);
  sub_1001621A4();
  String.hash(into:)(a1, a4, a5);
  return swift_bridgeObjectRelease(a5, v12);
}

uint64_t sub_10018D01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12;
  char v13;
  uint64_t result;

  v12 = a1 == a5 && a2 == a6;
  if (v12 || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0), result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0);
  }
  return result;
}

Swift::Int sub_10018D0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, 0);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v11, a1, a2);
  swift_bridgeObjectRelease(a2, v8);
  swift_bridgeObjectRetain(a4);
  String.hash(into:)(v11, a3, a4);
  swift_bridgeObjectRelease(a4, v9);
  return Hasher._finalize()();
}

Swift::Int sub_10018D134()
{
  uint64_t *v0;

  return sub_10018D0A8(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_10018D140(uint64_t a1)
{
  uint64_t *v1;

  return sub_10018CFAC(a1, *v1, v1[1], v1[2], v1[3]);
}

Swift::Int sub_10018D14C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  Hasher.init(_seed:)(v11, a1);
  sub_100176C14();
  v6 = String.hash(into:)(v11, v2, v3);
  sub_10016D110(v6, v7);
  sub_10016D290();
  v8 = String.hash(into:)(v11, v5, v4);
  sub_10016D13C(v8, v9);
  return Hasher._finalize()();
}

unint64_t sub_10018D1BC()
{
  uint64_t v0;

  return sub_10018CECC(*(_QWORD *)v0, *(void **)(v0 + 8), *(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10018D1C8(uint64_t *a1, uint64_t *a2)
{
  return sub_10018D01C(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_10018D1E4()
{
  uint64_t v0;

  return sub_100193A54(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10018D208(uint64_t a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  void *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v8 = _Block_copy(aBlock);
  v9 = (_QWORD *)sub_100163AE8(a5, 40);
  v9[2] = a3;
  v9[3] = v8;
  v9[4] = a1;
  v10 = a3;
  swift_retain(a1);
  v11 = sub_100181100();
  sub_1001948B0(v11, v12);
}

uint64_t sub_10018D268(uint64_t a1, void *aBlock)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2[2] = _Block_copy(aBlock);
  if (a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  v2[3] = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_100315ADC);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_10018D2F0;
  return sub_10018D1E4();
}

uint64_t sub_10018D2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  sub_10019498C();
  v4 = sub_1001816DC(*(_QWORD *)(v2 + 32), v3);
  sub_1001648C4(v4, v5);
  v6 = *(_QWORD *)(v2 + 16);
  if (v0)
  {
    v7 = (void *)sub_1001949F8();
    sub_1001947D0();
    sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16));

  }
  else
  {
    sub_100194768();
  }
  _Block_release(*(const void **)(v2 + 16));
  return sub_100165E20(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10018D35C()
{
  uint64_t v0;

  return sub_100193AA4(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t sub_10018D384(uint64_t a1, uint64_t a2, void *aBlock)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v3[3] = v6;
  static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v3[4] = v7;
  v8 = (_QWORD *)swift_task_alloc(dword_100315AC4);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_10018D3FC;
  return sub_10018D3FC();
}

uint64_t sub_10018D3FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  uint64_t v10;
  void (*v11)(uint64_t);

  sub_10019489C();
  sub_100194CC0();
  v4 = sub_1001816DC(*(_QWORD *)(v2 + 40), v3);
  v6 = sub_1001648C4(v4, v5);
  sub_10016D010(v6, v7);
  v8 = *(void (***)(_QWORD, _QWORD, _QWORD))(v2 + 16);
  if (v0)
  {
    v9 = (void *)_convertErrorToNSError(_:)(v0);
    sub_1001707A0();
    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v9);

    _Block_release(v8);
  }
  else
  {
    v10 = sub_100181100();
    v11(v10);
    _Block_release(v8);

  }
  return sub_100180D38(*(uint64_t (**)(void))(v1 + 8));
}

void sub_10018D4C4(uint64_t a1, int a2, void *a3, void *a4, uint64_t a5, void *a6, void *aBlock, uint64_t a8, uint64_t a9)
{
  void *v15;
  _QWORD *v16;
  id v17;
  id v18;
  id v19;

  v15 = _Block_copy(aBlock);
  v16 = (_QWORD *)sub_100163AE8(a8, 64);
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v16[6] = v15;
  v16[7] = a1;
  v17 = a3;
  v18 = a4;
  swift_unknownObjectRetain();
  v19 = a6;
  sub_100194B58();
  sub_1001C15C4(a9, (uint64_t)v16);
}

uint64_t sub_10018D558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v10 = type metadata accessor for Date(0);
  v5[2] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[3] = v11;
  v5[4] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = _Block_copy(a5);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5[6] = v12;
  static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5[7] = v13;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v14 = (_QWORD *)swift_task_alloc(dword_100315AAC);
  v5[8] = v14;
  *v14 = v5;
  v14[1] = sub_10018D61C;
  return sub_10018D61C();
}

uint64_t sub_10018D61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  sub_100194848();
  sub_100194AAC();
  v4 = *(_QWORD *)(v2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  sub_1001816DC(*(_QWORD *)(v2 + 64), v5);
  v6 = sub_100181628(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  v8 = sub_1001648C4(v6, v7);
  sub_10016D110(v8, v9);
  v10 = *(_QWORD *)(v2 + 40);
  if (v0)
  {
    v11 = (void *)sub_1001949F8();
    sub_1001947D0();
    sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16));

  }
  else
  {
    sub_100194768();
  }
  _Block_release(*(const void **)(v2 + 40));
  sub_10016D2A8();
  return sub_100194800(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10018D6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[13] = a4;
  v5[14] = v4;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[16] = v7;
  v5[17] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10018D708, v4, 0);
}

void sub_10018D708()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0[14] + 120;
  swift_beginAccess(v1, v0 + 2, 0, 0);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  sub_10016D21C();
  sub_100176C14();
  if (v2)
  {
    v4 = v0[12];
    v3 = v0[13];
    v6 = v0[10];
    v5 = v0[11];
    sub_10016D290();
    v7 = sub_100186174(v6, v5, v4, v3);
    if ((v8 & 1) != 0)
    {
      v9 = v0[11];
      v10 = swift_unknownObjectRetain();
      v12 = sub_10016D13C(v10, v11);
      goto LABEL_6;
    }
    sub_10016D13C(v7, v8);
  }
  v14 = v0[10];
  v15 = v0[13];
  v16 = v0[14];
  v18 = v0[11];
  v17 = v0[12];
  type metadata accessor for EntityCache();
  LOBYTE(v16) = *(_BYTE *)(v16 + 112);
  sub_10016D5D8();
  sub_100176C14();
  sub_10018A240(v14, v18, v17, v15, v16);
  v9 = v0[11];
  sub_100194A74(v1, (uint64_t)(v0 + 5));
  swift_unknownObjectRetain();
  sub_1001C0AAC();
  v12 = swift_endAccess(v0 + 5);
LABEL_6:
  sub_10016D110(v12, v13);
  swift_bridgeObjectRelease(v9, v19);
  swift_task_dealloc(v0[17]);
  sub_10016D154();
  __asm { BR              X1 }
}

uint64_t sub_10018DA9C(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v4[5] = v12;
  v14 = dword_100315794;
  swift_retain(a4);
  v15 = (_QWORD *)swift_task_alloc(v14);
  v4[6] = v15;
  *v15 = v4;
  v15[1] = sub_10018DB50;
  return sub_10018D6A0(v8, v10, v11, v13);
}

uint64_t sub_10018DB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(_QWORD, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_10019489C();
  a15 = v17;
  a16 = v18;
  a14 = v16;
  v20 = v19;
  sub_100165E44();
  v22 = *(void (***)(_QWORD, _QWORD))(v21 + 24);
  v23 = *v16;
  v24 = sub_10016D100(*(_QWORD *)(v21 + 48), &a14);
  v26 = sub_1001648C4(v24, v25);
  sub_10016D110(v26, v27);
  sub_1001949C8();
  v22[2](v22, v20);
  _Block_release(v22);
  sub_100194A00();
  return sub_100180D38(*(uint64_t (**)(void))(v23 + 8));
}

uint64_t sub_10018DBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v6 = type metadata accessor for Logger(0);
  v5[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[12] = v7;
  v5[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10018DC24, v4, 0);
}

uint64_t sub_10018DC24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  sub_100194A74(*(_QWORD *)(v0 + 80) + 120, v0 + 16);
  sub_1001812EC();
  sub_100176C14();
  v5 = sub_10019269C(v1, v4, v3, v2);
  swift_endAccess(v0 + 16);
  if (v5)
    swift_unknownObjectRelease();
  sub_1001949D8();
  sub_100176C14();
  v6 = sub_1001621A4();
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 88);
  v13 = *(void **)(v0 + 72);
  if (v9)
  {
    v27 = v5 != 0;
    v29 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 56);
    v26 = *(_QWORD *)(v0 + 64);
    v15 = sub_100165DA4(18);
    v28 = v12;
    v16 = sub_100165DA4(32);
    v30 = v16;
    *(_DWORD *)v15 = 136315394;
    v17 = sub_100194928();
    v19 = sub_10018CECC(v17, v18, v26, v13);
    *(_QWORD *)(v0 + 40) = sub_10016FE60(v19, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    sub_10017081C((uint64_t)v13);
    v21 = sub_10017081C(v14);
    sub_10016D13C(v21, v22);
    *(_WORD *)(v15 + 12) = 1024;
    *(_DWORD *)(v0 + 112) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 116);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Deleted entity cache: %s (wasRemoved? %{BOOL}d)", (uint8_t *)v15, 0x12u);
    sub_100165DFC(v16, v23, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v16);
    sub_100165D98(v15);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v29, v28);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 56);

    sub_10017081C((uint64_t)v13);
    sub_10017081C(v24);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10018DE74(uint64_t a1, int a2, void *a3, void *a4, void *aBlock, uint64_t a6)
{
  void *v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v10 = _Block_copy(aBlock);
  v11 = (_QWORD *)sub_100163AE8(a6, 48);
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = v10;
  v11[5] = a1;
  v12 = a3;
  v13 = a4;
  swift_retain(a1);
  v14 = sub_100181100();
  sub_1001948B0(v14, v15);
}

uint64_t sub_10018DEDC(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v4[5] = v12;
  v14 = dword_10031579C;
  swift_retain(a4);
  v15 = (_QWORD *)swift_task_alloc(v14);
  v4[6] = v15;
  *v15 = v4;
  v15[1] = sub_10018DF90;
  return sub_10018DBBC(v8, v10, v11, v13);
}

uint64_t sub_10018DF90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_100165E44();
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *v0;
  v4 = sub_10016D100(*(_QWORD *)(v1 + 48), &v9);
  v6 = sub_10016D13C(v4, v5);
  sub_1001648C4(v6, v7);
  sub_100194AE8();
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  sub_1001948FC();
  return sub_100165E20(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_10018DFF4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[5] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10018E054, v0, 0);
}

uint64_t sub_10018E054()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 64);
  v2 = sub_100194928();
  sub_100194A74(v2, v3);
  sub_100161BD0((uint64_t *)&unk_100315AE0);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  v4 = swift_endAccess(v0 + 16);
  v5 = static GKLog.cache.getter(v4);
  v6 = v1;
  Logger.logObject.getter(v5);
  v7 = sub_100194B40();
  if (sub_100194B48(v7))
  {
    v8 = (_WORD *)sub_100165DA4(2);
    *v8 = 0;
    sub_100194A14((void *)&_mh_execute_header, v9, v10, "Deleted all entity caches");
    sub_100165D98((uint64_t)v8);
  }
  v11 = *(_QWORD *)(v0 + 56);

  sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  sub_100180C98();
  return sub_100165E20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10018E178(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1003157A4;
  swift_retain(a2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10018E1D8;
  return sub_10018DFF4();
}

uint64_t sub_10018E1D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_100165E44();
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *v0;
  sub_10016D100(*(_QWORD *)(v1 + 32), &v5);
  sub_100176CDC();
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  sub_100194BC0();
  return sub_100165E20(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_10018E228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 120), a2);
  swift_defaultActor_destroy(v2);
  return swift_defaultActor_deallocate(v2);
}

uint64_t type metadata accessor for EntityCacheProvider()
{
  return objc_opt_self(_TtC14GameDaemonCoreP33_1FC4D10440B9DF42E57D244557C7E23B19EntityCacheProvider);
}

uint64_t type metadata accessor for EntityCacheProvider.NoopEntityCache()
{
  return objc_opt_self(_TtCC14GameDaemonCoreP33_1FC4D10440B9DF42E57D244557C7E23B19EntityCacheProvider15NoopEntityCache);
}

id sub_10018E29C(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  NSString v5;
  uint64_t v6;

  v4 = a1;
  a3();

  sub_100180E38();
  v5 = String._bridgeToObjectiveC()();
  sub_10016D110((uint64_t)v5, v6);
  return sub_10019490C(v5);
}

void sub_10018E2E4()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;

  sub_100194C00();
  _StringGuts.grow(_:)(56);
  v1._countAndFlagsBits = 0xD000000000000016;
  v1._object = (void *)0x8000000100299860;
  String.append(_:)(v1);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_id);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_id + 8);
  sub_100176C2C();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3, v5);
  v6._countAndFlagsBits = 0x797469746E65202CLL;
  v6._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v6);
  v7 = sub_100161BD0(&qword_100315A90);
  sub_100194C38(v7, v8, v7, (uint64_t)&type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9._object = (void *)0x8000000100299880;
  v9._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v9);
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride);
    v12 = *(void **)(v0 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride + 8);
  }
  else
  {
    v12 = (void *)0xE300000000000000;
    v11 = 7104878;
  }
  swift_bridgeObjectRetain(v10);
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  sub_1001648C4(v14, v15);
  sub_1000279A0();
}

void sub_10018E420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_class *v30;
  char *v31;
  char *v32;

  sub_100194C50();
  a16 = v18;
  a17 = v19;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v30 = (objc_class *)sub_10016D668();
  v31 = &v17[OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_id];
  *(_QWORD *)v31 = v29;
  *((_QWORD *)v31 + 1) = v27;
  *(_QWORD *)&v17[OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_entity] = v25;
  v32 = &v17[OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride];
  *(_QWORD *)v32 = v23;
  *((_QWORD *)v32 + 1) = v21;
  a9.receiver = v17;
  a9.super_class = v30;
  objc_msgSendSuper2(&a9, "init");
  sub_1001947D8();
}

#error "10018E4DC: call analysis failed (funcsize=21)"

#error "10018E5B4: call analysis failed (funcsize=28)"

void sub_10018E670()
{
  sub_100194BB4((uint64_t)"GameDaemonCore.GKCacheableEntity", 32, (uint64_t)"init()");
  __break(1u);
}

uint64_t type metadata accessor for GKCacheableEntity()
{
  return objc_opt_self(_TtC14GameDaemonCore17GKCacheableEntity);
}

void sub_10018E70C(char a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for EntityCacheProvider();
  v3 = swift_allocObject(v2, 128, 15);
  swift_defaultActor_initialize(v3);
  *(_BYTE *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = &_swiftEmptyDictionarySingleton;
  sub_10016219C();
}

id sub_10018E76C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  id result;
  void *v16;
  _QWORD *v17;
  id v18;
  id v19;

  sub_10016D668();
  result = objc_msgSend(a4, "replyQueue");
  if (result)
  {
    v16 = result;
    v17 = (_QWORD *)sub_100163AE8((uint64_t)&unk_1002C6590, 72);
    v17[2] = v8;
    v17[3] = a1;
    v17[4] = a2;
    v17[5] = a3;
    v17[6] = a4;
    v17[7] = a7;
    v17[8] = a8;
    v18 = v8;
    swift_bridgeObjectRetain(a1);
    sub_1001812EC();
    v19 = a4;
    swift_retain(a8);
    sub_10018EAB4(a5, a6, v16, (uint64_t)&unk_100315A88, (uint64_t)v17);

    return (id)swift_release(v17);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10018E858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[22] = a6;
  v7[23] = a7;
  v7[20] = a4;
  v7[21] = a5;
  v7[18] = a2;
  v7[19] = a3;
  v7[17] = a1;
  return swift_task_switch(sub_10018E87C, 0, 0);
}

uint64_t sub_10018E87C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Class isa;
  NSString v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;

  sub_10016D198();
  v2 = v0[22];
  v1 = v0[23];
  v9 = (void *)v0[17];
  v10 = v0[21];
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[24] = isa;
  v4 = String._bridgeToObjectiveC()();
  v0[25] = v4;
  v0[14] = v2;
  v0[15] = v1;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256;
  v0[12] = sub_10018EA5C;
  v0[13] = &unk_1002C65A8;
  v5 = _Block_copy(v0 + 10);
  v0[26] = v5;
  v6 = v0[15];
  sub_100194B58();
  swift_release(v6);
  v0[7] = v0 + 16;
  v7 = sub_1001948EC((uint64_t)sub_10018E9B4);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10018EA60;
  v0[13] = &unk_1002C65D0;
  v0[14] = v7;
  objc_msgSend(v9, "createEntityWithRequest:bagKey:clientProxy:entityMaker:completionHandler:", isa, v4, v10, v5, v0 + 10);
  return sub_100194780();
}

uint64_t sub_10018E9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100194954();
  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10018E9F0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_100194B00();

  v2 = sub_10016D2C4();
  return sub_100194758(v2, v3);
}

uint64_t sub_10018EA20()
{
  void *v0;
  uint64_t v1;
  void *v2;

  sub_100194C2C();
  sub_100194BC0();

  return sub_10019482C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10018EA60(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
    return sub_1001B72A8(v3, a3);
  if (a2)
  {
    swift_unknownObjectRetain(a2);
    return sub_1001B7D50(v3, a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10018EAB4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v10 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority(0);
  sub_100161B54((uint64_t)v12, 1, 1, v13);
  v14 = (_QWORD *)swift_allocObject(&unk_1002C63E8, 72, 7);
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a4;
  v14[5] = a5;
  v14[6] = a3;
  v14[7] = a1;
  v14[8] = a2;
  swift_retain(a5);
  v15 = a3;
  swift_retain(a2);
  sub_1001BDE9C();
  return swift_release(v16);
}

uint64_t sub_10018ECD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v12;
  _QWORD *v13;

  v6[4] = a4;
  v6[5] = a5;
  v6[2] = a2;
  v6[3] = a3;
  v12 = swift_allocObject(&unk_1002C6518, 24, 7);
  v6[6] = v12;
  *(_QWORD *)(v12 + 16) = a6;
  v13 = (_QWORD *)swift_task_alloc(dword_100315A0C);
  v6[7] = v13;
  *v13 = v6;
  v13[1] = sub_10018ED74;
  return sub_10018EEF8(a1, a2, a3, a4);
}

uint64_t sub_10018ED74(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_10016D0B4();
  sub_10016D2B8(v6);
  v3[8] = v1;
  v3[9] = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    sub_10016CFA0();
    return sub_100194778(v8, v9, v10);
  }
  else
  {
    v12 = (_QWORD *)swift_task_alloc(dword_100315A1C);
    v3[10] = (uint64_t)v12;
    *v12 = v4;
    v12[1] = sub_10018EE14;
    v13 = sub_100180F38(v3[2]);
    return sub_10018F074(v13, v14, v1, v15, v16, v17, a1);
  }
}

uint64_t sub_10018EE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10016D0B4();
  sub_10016D2B8(v3);
  *(_QWORD *)(v2 + 88) = v1;
  swift_task_dealloc(v4);
  if (!v1)
    *(_QWORD *)(v2 + 96) = v0;
  sub_10016CFA0();
  return sub_1001948DC(v5, v6, v7);
}

uint64_t sub_10018EE68()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10018EE94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100194BD8(a1, a2);
  sub_100165E88();
  return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 96));
}

uint64_t sub_10018EECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100194BD8(a1, a2);
  sub_100165E88();
  return sub_10016CF2C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_10018EEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  return swift_task_switch(sub_10018EF18, 0, 0);
}

uint64_t sub_10018EF18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  sub_10019489C();
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 72) = v4;
  v5 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  *(_QWORD *)(v4 + 32) = v2;
  *(_OWORD *)(v4 + 40) = v5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 80) = v6;
  *v6 = v0;
  v6[1] = sub_10018EFD0;
  sub_10016CFA0();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10018EFD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *v1;
  v2 = v8;
  sub_10016D2B8(&v8);
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc(v3);
  if (!v0)
    swift_task_dealloc(*(_QWORD *)(v2 + 72));
  sub_10016CFA0();
  return sub_100194778(v4, v5, v6);
}

uint64_t sub_10018F030()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, double))(v0 + 8))(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_10018F040()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10018F074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_QWORD *)(v8 + 184) = a6;
  *(_QWORD *)(v8 + 192) = v7;
  *(_QWORD *)(v8 + 168) = a4;
  *(_QWORD *)(v8 + 176) = a5;
  *(double *)(v8 + 160) = a7;
  *(_QWORD *)(v8 + 144) = a2;
  *(_QWORD *)(v8 + 152) = a3;
  *(_QWORD *)(v8 + 136) = a1;
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 200) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 208) = v10;
  *(_QWORD *)(v8 + 216) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  *(_QWORD *)(v8 + 224) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 232) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 240) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 248) = swift_task_alloc(v13);
  return swift_task_switch(sub_10018F11C, 0, 0);
}

uint64_t sub_10018F11C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 256) = (*(uint64_t (**)(_QWORD))(v0 + 176))(*(_QWORD *)(v0 + 152));
  v1 = (_QWORD *)swift_task_alloc(dword_1003159EC);
  *(_QWORD *)(v0 + 264) = v1;
  *v1 = v0;
  v1[1] = sub_10018F170;
  v2 = sub_100180F38(*(_QWORD *)(v0 + 168));
  return sub_10019499C(v2);
}

uint64_t sub_10018F170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100194AD8();
  sub_100194B20();
  *(_QWORD *)(v1 + 272) = v0;
  sub_100194B10(v2);
  sub_10016CFA0();
  return sub_10016D26C(v3, v4, v5);
}

uint64_t sub_10018F1AC()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  Class isa;
  uint64_t v20;
  _QWORD *v21;
  id v23;

  v1 = *((_QWORD *)v0 + 32);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_bagKeyOverride + 8);
  }
  else
  {
    v3 = *((_QWORD *)v0 + 18);
    swift_bridgeObjectRetain(v3);
    v2 = 0;
  }
  v23 = (id)*((_QWORD *)v0 + 34);
  v4 = *((_QWORD *)v0 + 30);
  v5 = *((_QWORD *)v0 + 31);
  v7 = *((_QWORD *)v0 + 28);
  v6 = *((_QWORD *)v0 + 29);
  v8 = v0[20];
  swift_bridgeObjectRetain(v2);
  v9 = String._bridgeToObjectiveC()();
  *((_QWORD *)v0 + 35) = v9;
  swift_bridgeObjectRelease(v3, v10);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_id + 8);
  swift_bridgeObjectRetain(v11);
  v12 = String._bridgeToObjectiveC()();
  *((_QWORD *)v0 + 36) = v12;
  swift_bridgeObjectRelease(v11, v13);
  v14 = OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_entity;
  *((_QWORD *)v0 + 37) = OBJC_IVAR____TtC14GameDaemonCore17GKCacheableEntity_entity;
  v15 = *(_QWORD *)(v1 + v14);
  *((_QWORD *)v0 + 38) = v15;
  v16 = swift_unknownObjectRetain();
  v17 = static Date.now.getter(v16);
  Date.addingTimeInterval(_:)(v17, v8);
  v18 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v18(v4, v7);
  isa = Date._bridgeToObjectiveC()().super.isa;
  *((_QWORD *)v0 + 39) = isa;
  v18(v5, v7);
  v20 = sub_100194B30((uint64_t)sub_10018F350);
  *((_QWORD *)v0 + 10) = _NSConcreteStackBlock;
  v21 = v0 + 10;
  v21[1] = 0x40000000;
  sub_100194BA0(v20, (uint64_t)sub_1001A13EC);
  objc_msgSend(v23, "storeWithBagKey:id:entity:expiresAt:completionHandler:", v9, v12, v15, isa, v21);
  return sub_100194780();
}

uint64_t sub_10018F350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100194934();
  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10018F38C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  sub_10019489C();
  v2 = *(void **)(v0 + 312);
  v4 = *(void **)(v0 + 280);
  v3 = *(void **)(v0 + 288);
  swift_unknownObjectRelease();

  sub_100194A00();
  sub_100194880();

  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  return (*(uint64_t (**)(void *))(v0 + 8))(v4);
}

uint64_t sub_10018F3FC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  NSObject *v22;

  sub_10016D198();
  v1 = *(void **)(v0 + 312);
  v3 = *(void **)(v0 + 280);
  v2 = *(void **)(v0 + 288);
  v4 = *(void **)(v0 + 256);
  v5 = *(_QWORD **)(v0 + 216);
  swift_willThrow();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  static GKLog.cache.getter(v6);
  v7 = v4;
  sub_1001949F0();
  v8 = v7;
  v9 = sub_1001949F0();
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  v12 = v11;
  if (os_log_type_enabled(v10, v11))
  {
    v21 = *(_QWORD *)(v0 + 320);
    v13 = *(void **)(v0 + 256);
    v22 = v10;
    v14 = sub_100165DA4(22);
    v5 = (_QWORD *)sub_100165DA4(16);
    *(_QWORD *)(v0 + 120) = v13;
    *(_DWORD *)v14 = 138412546;
    v15 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
    *v5 = v13;

    *(_WORD *)(v14 + 12) = 2112;
    swift_errorRetain(v21);
    v16 = _swift_stdlib_bridgeErrorToNSError(v21);
    *(_QWORD *)(v0 + 128) = v16;
    sub_100194904(v0 + 128, v0 + 136);
    v5[1] = v16;
    sub_10016D1B4();
    sub_10016D1B4();
    sub_100194BD0((void *)&_mh_execute_header, v22, (os_log_type_t)v12, "Failed to cache entity: %@, error: %@", (uint8_t *)v14);
    v17 = sub_100161BD0(&qword_100315A10);
    sub_100194B60((uint64_t)v5, v18, v17);
    sub_100165D98((uint64_t)v5);
    sub_100165D98(v14);

    sub_10016D1B4();
  }
  else
  {
    v19 = *(void **)(v0 + 256);
    sub_1001947D0();

    sub_1001947D0();
    sub_1001947D0();

  }
  sub_100194C1C(*(_QWORD *)(v0 + 208));
  sub_100194880();

  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
}

uint64_t sub_10018F6A4(uint64_t a1, uint64_t a2, void *a3, void *aBlock, const void *a5, void *a6)
{
  _QWORD *v6;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6[2] = a3;
  v6[3] = a6;
  v12 = _Block_copy(aBlock);
  v6[4] = v12;
  v6[5] = _Block_copy(a5);
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v6[6] = v13;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v16 = v15;
  v6[7] = v15;
  _Block_copy(v12);
  v17 = unk_100315A7C;
  v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100315A78
                                                                                     + dword_100315A78);
  v18 = a3;
  v19 = a6;
  v20 = (_QWORD *)swift_task_alloc(v17);
  v6[8] = v20;
  *v20 = v6;
  v20[1] = sub_10018F7BC;
  return v22(v13, v14, v16, (uint64_t)v18, (uint64_t)v19, (uint64_t)v12);
}

uint64_t sub_10018F7BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  sub_100194AAC();
  v4 = *(void **)(v2 + 16);
  v3 = *(void **)(v2 + 24);
  sub_1001816DC(*(_QWORD *)(v2 + 64), v5);

  v6 = *(_QWORD *)(v2 + 48);
  _Block_release(*(const void **)(v2 + 32));
  sub_10016D010(v7, v8);
  swift_bridgeObjectRelease(v6, v9);
  if (v0)
  {
    v10 = (void *)sub_100194C9C();
    sub_10016D1B4();
    sub_1001947BC();

    sub_1001948FC();
  }
  else
  {
    sub_1001947A8();
    sub_1001948FC();
    sub_100194A00();
  }
  return sub_100165E20(*(uint64_t (**)(void))(v1 + 8));
}

id sub_10018F854(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  id result;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;

  v10 = v9;
  swift_getObjectType(v10);
  result = objc_msgSend(a5, "replyQueue");
  if (result)
  {
    v18 = result;
    v19 = sub_100163AE8((uint64_t)&unk_1002C63C0, 80);
    *(_QWORD *)(v19 + 16) = v10;
    *(_QWORD *)(v19 + 24) = a1;
    *(_QWORD *)(v19 + 32) = a2;
    *(_QWORD *)(v19 + 40) = a3;
    *(_BYTE *)(v19 + 48) = a4 & 1;
    *(_QWORD *)(v19 + 56) = a5;
    *(_QWORD *)(v19 + 64) = a8;
    *(_QWORD *)(v19 + 72) = a9;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a3);
    v20 = a5;
    sub_100194B58();
    v21 = v10;
    sub_10018EAB4(a6, a7, v18, (uint64_t)&unk_100315A30, v19);

    return (id)swift_release(v19);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10018F954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 176) = a7;
  *(_QWORD *)(v8 + 184) = a8;
  *(_QWORD *)(v8 + 160) = a4;
  *(_QWORD *)(v8 + 168) = a6;
  *(_BYTE *)(v8 + 224) = a5;
  *(_QWORD *)(v8 + 144) = a2;
  *(_QWORD *)(v8 + 152) = a3;
  *(_QWORD *)(v8 + 136) = a1;
  return swift_task_switch(sub_10018F97C, 0, 0);
}

uint64_t sub_10018F97C()
{
  _QWORD *v0;
  NSDictionary v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSString v5;
  void *v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  sub_10016D198();
  if (v0[18])
    v1.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  else
    v1.super.isa = 0;
  v0[24] = v1.super.isa;
  v2 = v0[22];
  v3 = v0[23];
  v10 = v0[21];
  v9 = *((unsigned __int8 *)v0 + 224);
  v4 = (void *)v0[17];
  v5 = String._bridgeToObjectiveC()();
  v0[25] = v5;
  v0[14] = v2;
  v0[15] = v3;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256;
  v0[12] = sub_10018EA5C;
  v0[13] = &unk_1002C64A0;
  v6 = _Block_copy(v0 + 10);
  v0[26] = v6;
  swift_retain(v3);
  sub_1001816B4();
  v0[7] = v0 + 16;
  v7 = sub_1001948EC((uint64_t)sub_10018E9B4);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10018EA60;
  v0[13] = &unk_1002C64C8;
  v0[14] = v7;
  objc_msgSend(v4, "readEntityWithRequest:bagKey:includeStaleCacheData:clientProxy:entityMaker:completionHandler:", v1.super.isa, v5, v9, v10, v6, v0 + 10);
  return sub_100194780();
}

id sub_10018FAD4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  sub_100165EAC();
  v4 = (void *)v2(v3);
  v5 = sub_100165E88();
  sub_1001648C4(v5, v6);
  return sub_10019490C(v4);
}

void sub_10018FC80()
{
  Class isa;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  id v3;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v1 = sub_100181100();
  v3 = (id)v2(v1);

  sub_10016219C();
}

uint64_t sub_10018FCDC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 216) = a7;
  *(_QWORD *)(v8 + 224) = v7;
  *(_QWORD *)(v8 + 200) = a5;
  *(_QWORD *)(v8 + 208) = a6;
  *(_BYTE *)(v8 + 400) = a4;
  *(_QWORD *)(v8 + 184) = a2;
  *(_QWORD *)(v8 + 192) = a3;
  *(_QWORD *)(v8 + 176) = a1;
  *(_QWORD *)(v8 + 232) = sub_10016D668();
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 240) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 248) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 256) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 264) = swift_task_alloc(v11);
  sub_10016CFA0();
  return sub_10016D26C(v12, v13, v14);
}

uint64_t sub_10018FD58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_100190750(*(_QWORD **)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
  *(_QWORD *)(v0 + 272) = v1;
  *(_QWORD *)(v0 + 280) = v2;
  v3 = (_QWORD *)swift_task_alloc(dword_1003159EC);
  *(_QWORD *)(v0 + 288) = v3;
  *v3 = v0;
  v3[1] = sub_10018FDAC;
  v4 = sub_100180F38(*(_QWORD *)(v0 + 200));
  return sub_10019499C(v4);
}

uint64_t sub_10018FDAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100194AD8();
  sub_100194B20();
  *(_QWORD *)(v1 + 296) = v0;
  sub_100194B10(v2);
  sub_10016CFA0();
  return sub_10016D26C(v3, v4, v5);
}

uint64_t sub_10018FDE8()
{
  _QWORD *v0;
  void *v1;
  NSString v2;
  NSString v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (void *)v0[37];
  v2 = String._bridgeToObjectiveC()();
  v0[38] = v2;
  v3 = String._bridgeToObjectiveC()();
  v0[39] = v3;
  v0[7] = v0 + 15;
  v4 = sub_1001948EC((uint64_t)sub_10018FE9C);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  sub_100194BA0(v4, (uint64_t)sub_100190A90);
  objc_msgSend(v1, "fetchWithBagKey:id:completionHandler:", v2, v3, v5);
  return sub_100194818();
}

uint64_t sub_10018FE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100194934();
  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10018FED8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t (*v12)(void);

  v2 = *(void **)(v0 + 304);
  v1 = *(void **)(v0 + 312);
  v3 = *(void **)(v0 + 120);
  swift_unknownObjectRelease();

  if (v3 && ((*(_BYTE *)(v0 + 400) & 1) != 0 || (*((_BYTE *)v3 + OBJC_IVAR___GKFetchedEntity_isExpired) & 1) == 0))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280), v4);
    swift_unknownObjectRetain();

    sub_100194C24();
    sub_100180C98();
    v11 = sub_10016D2C4();
    return sub_100194758(v11, v12);
  }
  else
  {
    *(_QWORD *)(v0 + 328) = v3;
    v5 = (_QWORD *)swift_task_alloc(dword_100315A0C);
    *(_QWORD *)(v0 + 336) = v5;
    v6 = sub_100194A44(v5, (uint64_t)sub_10018FF8C);
    return sub_10018EEF8(v6, v7, v8, v9);
  }
}

uint64_t sub_10018FF8C(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 336);
  *(_QWORD *)(v5 + 344) = a1;
  *(_QWORD *)(v5 + 352) = v2;
  sub_100194B10(v6);
  if (!v2)
    *(double *)(v5 + 360) = a2;
  sub_10016CFA0();
  return sub_100194778(v7, v8, v9);
}

uint64_t sub_10018FFFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  __int128 v13;

  v13 = *(_OWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = sub_100163AE8((uint64_t)&unk_1002C62E0, 48);
  *(_QWORD *)(v0 + 368) = v3;
  *(_OWORD *)(v3 + 16) = v13;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = dword_100315A1C;
  sub_100165EAC();
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 376) = v5;
  *v5 = v0;
  v5[1] = sub_1001900A0;
  v6 = sub_100180F38(*(_QWORD *)(v0 + 184));
  return sub_10018F074(v6, v7, v8, v9, v10, v3, v11);
}

uint64_t sub_1001900A0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_10019498C();
  sub_10016D2B8(v4);
  v2[48] = v1;
  swift_task_dealloc(v5);
  v6 = swift_release(v2[46]);
  sub_10016D110(v6, v7);
  if (!v1)
    v2[49] = a1;
  sub_10016CFA0();
  return sub_100194778(v8, v9, v10);
}

uint64_t sub_100190110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  sub_100194C24();
  sub_100180C98();
  v1 = sub_10016D2C4();
  return sub_10016D23C(v1, v2);
}

uint64_t sub_100190144(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = (void *)v1[39];
  v3 = (void *)v1[38];
  v4 = v1[33];
  swift_willThrow(a1);

  v5 = swift_unknownObjectRelease();
  static GKLog.cache.getter(v5);
  sub_10016D21C();
  sub_1001812EC();
  sub_1001949F0();
  sub_10016D21C();
  sub_1001812EC();
  v6 = sub_1001949F0();
  v7 = v4;
  Logger.logObject.getter(v6);
  v8 = sub_100194B40();
  if (os_log_type_enabled(v4, v8))
  {
    v9 = v1[40];
    v10 = v1[35];
    v34 = v1[31];
    v35 = v1[30];
    v36 = v1[33];
    v11 = v1[24];
    v31 = v1[23];
    v12 = sub_100165DA4(32);
    v32 = (_QWORD *)sub_100165DA4(8);
    v33 = sub_100165DA4(64);
    v37 = v33;
    *(_DWORD *)v12 = 136315650;
    sub_100176C14();
    v13 = sub_100180E38();
    v1[19] = sub_10016FE60(v13, v14, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 19, v1 + 20);
    sub_100170848(v10);
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain(v11);
    v1[20] = sub_10016FE60(v31, v11, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 20, v1 + 21);
    sub_100170848(v11);
    *(_WORD *)(v12 + 22) = 2112;
    swift_errorRetain(v9);
    v16 = _swift_stdlib_bridgeErrorToNSError(v9);
    v1[21] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 21, v1 + 22);
    *v32 = v16;
    sub_100194BE4();
    sub_100194BE4();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to fetch entity ID: %s, bagKey: %s, from cache: %@", (uint8_t *)v12, 0x20u);
    v17 = sub_100161BD0(&qword_100315A10);
    sub_100165DFC((uint64_t)v32, v18, v17);
    sub_100165D98((uint64_t)v32);
    sub_100194B60(v33, v19, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v33);
    sub_100165D98(v12);

    sub_100194BE4();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v35);
  }
  else
  {
    v20 = v1[35];
    v21 = v1[33];
    v22 = v1[30];
    v23 = v1[31];
    v24 = v1[24];
    sub_10016D1B4();
    sub_10017081C(v24);
    sub_10017081C(v20);
    sub_10016D1B4();
    sub_10016D1B4();

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  }
  v1[41] = 0;
  v25 = (_QWORD *)swift_task_alloc(dword_100315A0C);
  v1[42] = v25;
  v26 = sub_100194A44(v25, (uint64_t)sub_10018FF8C);
  return sub_10018EEF8(v26, v27, v28, v29);
}

void sub_1001903FC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];

  v1 = v0[41];
  v2 = (void *)_convertErrorToNSError(_:)(v0[44]);
  v3 = sub_100190AD8();
  v5 = (void *)v0[41];
  if ((v3 & 1) != 0 && v1)
  {
    v6 = v0[32];
    v7 = v5;
    static GKLog.cache.getter(v7);
    sub_10016D5D8();
    sub_100170840();
    sub_10016D290();
    sub_10016D5D8();
    v8 = sub_100170840();
    v9 = v6;
    Logger.logObject.getter(v8);
    v10 = sub_100194B40();
    v11 = os_log_type_enabled(v6, v10);
    v12 = v0[35];
    if (v11)
    {
      v13 = v0[34];
      v30 = v0[31];
      v31 = v0[30];
      v32 = v0[32];
      v14 = v0[24];
      v27 = v0[23];
      v15 = sub_100165DA4(32);
      v28 = (_QWORD *)sub_100165DA4(8);
      v29 = sub_100165DA4(64);
      v33[0] = v29;
      *(_DWORD *)v15 = 136315650;
      sub_1001812EC();
      v0[16] = sub_10016FE60(v13, v12, v33);
      sub_100194904((uint64_t)(v0 + 16), (uint64_t)(v0 + 17));
      sub_100170848(v12);
      *(_WORD *)(v15 + 12) = 2080;
      sub_1001621A4();
      v0[17] = sub_10016FE60(v27, v14, v33);
      sub_100194904((uint64_t)(v0 + 17), (uint64_t)(v0 + 18));
      sub_100170848(v14);
      *(_WORD *)(v15 + 22) = 2112;
      sub_100170840();
      v16 = sub_100194C7C();
      v0[18] = v16;
      sub_100194904((uint64_t)(v0 + 18), (uint64_t)(v0 + 19));
      *v28 = v16;
      sub_1001707A0();
      sub_1001707A0();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Using cache fallback for entity ID: %s, bagKey: %s after request error: %@", (uint8_t *)v15, 0x20u);
      v17 = sub_100161BD0(&qword_100315A10);
      sub_100165DFC((uint64_t)v28, v18, v17);
      sub_100165D98((uint64_t)v28);
      sub_100194B60(v29, v19, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v29);
      sub_100165D98(v15);

      sub_1001707A0();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
    }
    else
    {
      v22 = v0[24];

      sub_1001707A0();
      sub_10017081C(v12);
      sub_10017081C(v22);
      sub_1001707A0();
      sub_1001707A0();

      v23 = sub_100194928();
      v25(v23, v24);
    }
    swift_unknownObjectRetain();

    sub_100194C24();
    sub_100180C98();
    sub_10016D2C4();
    sub_10016D154();
    __asm { BR              X1 }
  }
  v20 = sub_10016D13C(v3, v4);
  swift_willThrow(v20);

  sub_100180C98();
  sub_100180D6C();
  sub_10016D154();
  __asm { BR              X0 }
}

uint64_t sub_100190708()
{
  uint64_t v0;

  sub_100180C98();
  sub_100180D6C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100190750(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  if (a1)
  {
    v4 = swift_bridgeObjectRetain(a1);
    v5 = sub_100191218(v4);
    if (v5)
    {
      v7 = v5;
      sub_10016D13C(v5, v6);
      swift_bridgeObjectRetain_n(v7, 2);
      sub_100186020();
      v9 = v8;
      sub_1001648C4(v8, v10);
      v21 = (_QWORD *)v9;
      sub_1001928D4((uint64_t *)&v21);
      sub_1001648C4(v11, v12);
      sub_1001621A4();
      v13 = sub_100194928();
      v15 = sub_100188D84(v13, v14);
      sub_1001648C4((uint64_t)v15, v16);
      sub_100165E88();
      v21 = v15;
      v17 = sub_100161BD0(&qword_1003159A0);
      sub_10019404C(&qword_1003159A8, &qword_1003159A0);
      BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v17, v18);
      v20 = v15;
    }
    else
    {
      Dictionary.description.getter(a1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8);
      v20 = a1;
    }
    swift_bridgeObjectRelease(v20, v19);
  }
  else
  {
    swift_bridgeObjectRetain(a3);
  }
  sub_100180E38();
  sub_1000279A0();
}

uint64_t sub_10019088C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = v1;
  return swift_task_switch(sub_1001908A4, 0, 0);
}

void sub_1001908A4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v0[16];
  v1 = (void *)v0[17];
  v3 = objc_msgSend(v1, "entityCacheProvider");
  v0[18] = v3;
  v4 = objc_msgSend(v1, "playerCredentialsForClientProxy:", v2);
  v5 = objc_msgSend(v4, "playerInternal");

  if (v5)
  {
    v6 = objc_msgSend(v5, "playerID");

    if (!v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v6 = String._bridgeToObjectiveC()();
      sub_10016D110((uint64_t)v6, v7);
    }
    v0[19] = v6;
    sub_10019332C((void *)v0[16]);
    if (v8)
    {
      v9 = String._bridgeToObjectiveC()();
      v0[20] = v9;
      sub_10016D110((uint64_t)v9, v10);
      v0[7] = v0 + 15;
      v0[2] = v0;
      v0[3] = sub_100190A04;
      v11 = swift_continuation_init(v0 + 2, 0);
      v0[10] = _NSConcreteStackBlock;
      v12 = (uint64_t)(v0 + 10);
      *(_QWORD *)(v12 + 8) = 0x40000000;
      sub_100194BA0(v11, (uint64_t)sub_100191C60);
      objc_msgSend(v3, "getCacheWithPlayerID:language:completionHandler:", v6, v9, v12);
      sub_100194818();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100190A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_100190A44()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v0 + 152);
  v1 = *(void **)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 120);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 144));

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_100190A90(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
    return sub_1001B72A8(v3, a3);
  v6 = a2;
  return sub_1001B730C(v3, (uint64_t)a2);
}

uint64_t sub_100190AD8()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v1 = objc_msgSend(v0, "domain");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKErrorDomain);
  if (v2 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(v4, 2);
  }
  else
  {
    v8 = v6;
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
    swift_bridgeObjectRelease(v4, v10);
    swift_bridgeObjectRelease(v8, v11);
    if ((v9 & 1) == 0)
      return (uint64_t)objc_msgSend(v0, "gkIsNotConnectedToInternetError");
  }
  if (objc_msgSend(v0, "code") == (id)3)
    return 1;
  return (uint64_t)objc_msgSend(v0, "gkIsNotConnectedToInternetError");
}

#error "100190C10: call analysis failed (funcsize=29)"

uint64_t sub_100190CCC(uint64_t a1, uint64_t a2, char a3, void *a4, void *aBlock, const void *a6, void *a7)
{
  _QWORD *v7;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;

  v7[2] = a4;
  v7[3] = a7;
  v14 = _Block_copy(aBlock);
  v7[4] = _Block_copy(a6);
  if (a1)
    a1 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v7[5] = a1;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v17 = v16;
  v7[6] = v16;
  v18 = swift_allocObject(&unk_1002C62A0, 24, 7);
  v7[7] = v18;
  *(_QWORD *)(v18 + 16) = v14;
  v19 = dword_100315A04;
  v20 = a4;
  a7;
  v21 = (_QWORD *)swift_task_alloc(v19);
  v7[8] = v21;
  *v21 = v7;
  v21[1] = sub_100190DF8;
  return sub_10018FCDC(a1, v15, v17, a3 & 1, (uint64_t)v20, (uint64_t)sub_100194694, v18);
}

uint64_t sub_100190DF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  sub_100194848();
  sub_100194CC0();
  v4 = (void *)v2[2];
  v3 = (void *)v2[3];
  sub_1001816DC(v2[8], v5);

  v6 = sub_1001816B4();
  sub_10016D010(v6, v7);
  swift_bridgeObjectRelease(v2[5], v8);
  if (v0)
  {
    v9 = (void *)sub_100194C9C();
    sub_10016D1B4();
    sub_1001947BC();

    sub_1001948FC();
  }
  else
  {
    sub_1001947A8();
    sub_1001948FC();
    sub_100194A00();
  }
  return sub_100194800(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100190E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;

  v3[15] = a1;
  v3[16] = a2;
  v5 = (_QWORD *)swift_task_alloc(dword_1003159EC);
  v3[17] = v5;
  *v5 = v3;
  v5[1] = sub_100190EC8;
  return sub_10019088C(a3);
}

uint64_t sub_100190EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100194AD8();
  sub_100194B20();
  *(_QWORD *)(v1 + 144) = v0;
  sub_100194B10(v2);
  sub_10016CFA0();
  return sub_10016D26C(v3, v4, v5);
}

uint64_t sub_100190F04()
{
  _QWORD *v0;
  NSString v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  if (v0[16])
    v1 = String._bridgeToObjectiveC()();
  else
    v1 = 0;
  v2 = v0 + 2;
  v0[19] = v1;
  v3 = (void *)v0[18];
  v4 = sub_100194B30((uint64_t)sub_100190FAC);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  sub_100194BA0(v4, (uint64_t)sub_1001A13EC);
  objc_msgSend(v3, "deleteWithBagKey:completionHandler:", v1, v5);
  return swift_continuation_await(v2);
}

uint64_t sub_100190FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(*(_QWORD *)v0 + 160) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  sub_10016CFA0();
  return sub_10016D26C(v1, v2, v3);
}

uint64_t sub_100191000()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 144));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100191038(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 152);
  swift_willThrow(a1);
  sub_100194A00();

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001910F8(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v9 = v8;
  }
  else
  {
    v9 = 0;
  }
  v4[5] = v9;
  v10 = dword_1003159E4;
  v11 = a2;
  a4;
  v12 = (_QWORD *)swift_task_alloc(v10);
  v4[6] = v12;
  *v12 = v4;
  v12[1] = sub_1001911A8;
  return sub_100190E78(a1, v9, (uint64_t)v11);
}

uint64_t sub_1001911A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  sub_10019489C();
  sub_10019498C();
  v4 = *(void **)(v2 + 16);
  v3 = *(void **)(v2 + 24);
  sub_1001816DC(*(_QWORD *)(v2 + 48), v5);

  sub_1001648C4(v6, v7);
  v8 = *(_QWORD *)(v2 + 32);
  if (v0)
  {
    v9 = (void *)sub_1001949F8();
    sub_1001947D0();
    sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16));

  }
  else
  {
    sub_100194768();
  }
  _Block_release(*(const void **)(v2 + 32));
  return sub_100180D38(*(uint64_t (**)(void))(v1 + 8));
}

unint64_t sub_100191218(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t result;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];
  _BYTE __dst[72];
  _BYTE __src[72];
  _QWORD v46[6];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100161BD0((uint64_t *)&unk_1003159C0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  sub_1001B71F0(v46, a1);
  v4 = v46[0];
  v5 = v46[3];
  v33 = (unint64_t)(v46[2] + 64) >> 6;
  v34 = v46[1];
  v6 = v46[4];
  v7 = &__src[40];
  v8 = &__dst[40];
  v9 = &v40;
  v10 = &v42;
  result = swift_bridgeObjectRetain(a1);
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v35 = (v6 - 1) & v6;
  v36 = v5;
  for (i = __clz(__rbit64(v6)) | (v5 << 6); ; i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    sub_1001631F4(*(_QWORD *)(v4 + 48) + 40 * i, (uint64_t)__src);
    sub_100161F70(*(_QWORD *)(v4 + 56) + 32 * i, (uint64_t)v7);
    memcpy(__dst, __src, sizeof(__dst));
    sub_1001631F4((uint64_t)__dst, (uint64_t)v39);
    if (!swift_dynamicCast(&v37, v39, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v37 = 0;
      v38 = 0;
      sub_100193CDC((uint64_t)__dst, &qword_100314EE8);
      swift_bridgeObjectRelease(v38, v32);
      sub_10016CA2C(v4);
      swift_release(v3);
      return 0;
    }
    v17 = v37;
    v18 = v38;
    sub_100161F70((uint64_t)v8, (uint64_t)v39);
    sub_100193CDC((uint64_t)__dst, &qword_100314EE8);
    sub_100161F60(v39, v9);
    *(_QWORD *)&v41 = v17;
    *((_QWORD *)&v41 + 1) = v18;
    sub_100161F60(v9, v10);
    v19 = v41;
    sub_100161F60(v10, v43);
    sub_100161F60(v43, &v41);
    result = sub_1001860C4(v19, *((uint64_t *)&v19 + 1));
    v21 = result;
    if ((v20 & 1) != 0)
    {
      v22 = v10;
      v23 = v9;
      v24 = v8;
      v25 = v4;
      v26 = v7;
      v27 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(_QWORD *)(v27 + 8), v20);
      *(_OWORD *)v27 = v19;
      v7 = v26;
      v4 = v25;
      v8 = v24;
      v9 = v23;
      v10 = v22;
      v28 = (_QWORD *)(v3[7] + 32 * v21);
      sub_100161FE0(v28);
      result = (unint64_t)sub_100161F60(&v41, v28);
      goto LABEL_28;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v3[6] + 16 * result) = v19;
    result = (unint64_t)sub_100161F60(&v41, (_OWORD *)(v3[7] + 32 * result));
    v29 = v3[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
      goto LABEL_34;
    v3[2] = v31;
LABEL_28:
    v6 = v35;
    v5 = v36;
    if (v35)
      goto LABEL_5;
LABEL_6:
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_35;
    if (v13 >= v33)
      goto LABEL_31;
    v14 = *(_QWORD *)(v34 + 8 * v13);
    v15 = v5 + 1;
    if (!v14)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v33)
        goto LABEL_31;
      v14 = *(_QWORD *)(v34 + 8 * v15);
      if (!v14)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v33)
          goto LABEL_31;
        v14 = *(_QWORD *)(v34 + 8 * v15);
        if (!v14)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v33)
            goto LABEL_31;
          v14 = *(_QWORD *)(v34 + 8 * v15);
          if (!v14)
          {
            v15 = v5 + 5;
            if (v5 + 5 >= v33)
              goto LABEL_31;
            v14 = *(_QWORD *)(v34 + 8 * v15);
            if (!v14)
            {
              v16 = v5 + 6;
              while (v16 < v33)
              {
                v14 = *(_QWORD *)(v34 + 8 * v16++);
                if (v14)
                {
                  v15 = v16 - 1;
                  goto LABEL_21;
                }
              }
LABEL_31:
              sub_10016CA2C(v4);
              return (unint64_t)v3;
            }
          }
        }
      }
    }
LABEL_21:
    v35 = (v14 - 1) & v14;
    v36 = v15;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t destroy for EntityCacheProvider.EntityCacheKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8), a2);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24), v3);
}

_QWORD *initializeWithCopy for EntityCacheProvider.EntityCacheKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for EntityCacheProvider.EntityCacheKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6);
  a1[2] = a2[2];
  v7 = a2[3];
  v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8, v9);
  return a1;
}

_QWORD *assignWithTake for EntityCacheProvider.EntityCacheKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5, a2);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityCacheProvider.EntityCacheKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityCacheProvider.EntityCacheKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityCacheProvider.EntityCacheKey()
{
  return &type metadata for EntityCacheProvider.EntityCacheKey;
}

ValueMetadata *type metadata accessor for EntityCacheSchemaV1()
{
  return &type metadata for EntityCacheSchemaV1;
}

ValueMetadata *type metadata accessor for EntityCacheSchemaV1.CachedEntity._SwiftDataNoType()
{
  return &type metadata for EntityCacheSchemaV1.CachedEntity._SwiftDataNoType;
}

unint64_t sub_100191854()
{
  unint64_t result;

  result = qword_100315938;
  if (!qword_100315938)
  {
    result = swift_getWitnessTable(&unk_100233424, &type metadata for EntityCacheProvider.EntityCacheKey);
    atomic_store(result, (unint64_t *)&qword_100315938);
  }
  return result;
}

void sub_100191890()
{
  sub_1001942D8(&qword_100315940, (uint64_t (*)(uint64_t))type metadata accessor for EntityCache);
}

uint64_t sub_1001918BC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(void);

  v8[17] = a7;
  v8[18] = a8;
  v8[16] = a6;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v8[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[20] = v11;
  v8[21] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v8[22] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[23] = v13;
  v8[24] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t (*)(void))((char *)a4 + *a4);
  v14 = (_QWORD *)swift_task_alloc(a4[1]);
  v8[25] = v14;
  *v14 = v8;
  v14[1] = sub_100191970;
  return v16();
}

uint64_t sub_100191970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10016D0B4();
  sub_10016D2B8(v3);
  *(_QWORD *)(v2 + 208) = v1;
  swift_task_dealloc(v4);
  if (!v1)
    *(_QWORD *)(v2 + 216) = v0;
  sub_10016CFA0();
  return sub_1001948DC(v5, v6, v7);
}

#error "100191AC8: call analysis failed (funcsize=68)"

#error "100191BF4: call analysis failed (funcsize=68)"

void sub_100191C1C(void (*a1)(_QWORD, id), uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = (id)_convertErrorToNSError(_:)(a3);
  a1(0, v4);

}

uint64_t sub_100191C60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  swift_unknownObjectRetain();
  return sub_1001A32D4(v3, a2);
}

void sub_100191C90(uint64_t a1, void *a2, Class isa, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v10 = sub_100161BD0(&qword_100315A20);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v13 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v14 = *(unsigned __int8 *)(v11 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_1002C6320, v15 + v12, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v16 + v15, (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_100193608;
  v19 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100191EE0;
  aBlock[3] = &unk_1002C6338;
  v17 = _Block_copy(aBlock);
  swift_release(v19);
  objc_msgSend(a2, "issueRequest:bagKey:clientProxy:handler:", isa, v13, a6, v17);
  _Block_release(v17);

}

id sub_100191E28(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  id result;
  uint64_t v5;
  void *v6;
  _QWORD v7[2];

  if (a2)
  {
    v7[0] = a2;
    swift_errorRetain(a2);
LABEL_3:
    v3 = sub_100161BD0(&qword_100315A20);
    return (id)CheckedContinuation.resume(throwing:)(v7, v3);
  }
  if (a1)
  {
    v7[0] = a1;
    *(double *)&v7[1] = a3;
    swift_bridgeObjectRetain(a1);
    v5 = sub_100161BD0(&qword_100315A20);
    return (id)CheckedContinuation.resume(returning:)(v7, v5);
  }
  else
  {
    v6 = (void *)objc_opt_self(NSError);
    result = sub_10019338C(3, 0xD000000000000021, 0x8000000100299760, v6);
    if (result)
    {
      v7[0] = result;
      goto LABEL_3;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100191EE0(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, void *, double);
  uint64_t v8;
  id v9;
  uint64_t v10;

  v7 = *(void (**)(uint64_t, void *, double))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (a2)
    v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v8 = 0;
  swift_retain(v6);
  v9 = a3;
  v7(v8, a3, a4);
  swift_release(v6);

  return swift_bridgeObjectRelease(v8, v10);
}

Swift::Int sub_100191F84()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  sub_1001942D8(&qword_100315958, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

void (*sub_100191FFC(_QWORD *a1))(__int128 **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_100189A80((uint64_t)v3);
  return sub_100192048;
}

void sub_100192048(__int128 **a1, char a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = sub_100180E38();
    sub_1001923C0(v3, v4);
    sub_100189AC8((__int128 *)((char *)v2 + 40));
    sub_100161FE0(v2);
  }
  else
  {
    sub_100189AC8(*a1);
  }
  free(v2);
}

Swift::Int sub_1001920A8()
{
  return sub_100191F84();
}

uint64_t sub_1001920C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1001942D8(&qword_100315970, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100192120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_10019217C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100189128();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1001921A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *a2;
  sub_1001942D8(&qword_100315970, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t AppMetadataCache.modelContainer.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 32));
}

uint64_t AppMetadataCache.modelExecutor.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 16));
}

void *sub_100192224()
{
  return &protocol witness table for String;
}

void sub_100192230()
{
  sub_1001942D8(&qword_100315948, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
}

void sub_10019225C()
{
  sub_1001942D8(&qword_100315950, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
}

void sub_100192288()
{
  sub_1001942D8(&qword_100315958, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
}

void sub_1001922B4()
{
  sub_1001942D8(&qword_100315960, type metadata accessor for EntityCacheSchemaV1.CachedEntity);
}

#error "1001922F0: call analysis failed (funcsize=7)"

#error "10019230C: call analysis failed (funcsize=7)"

void sub_100192318(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_1001892A8();
  a1[1] = v2;
  sub_10016219C();
}

unint64_t sub_10019233C()
{
  unint64_t result;

  result = qword_100315980;
  if (!qword_100315980)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100315980);
  }
  return result;
}

void sub_100192378(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_100189128();
  a1[1] = v2;
  sub_10016219C();
}

void sub_10019239C(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_100189088();
  a1[1] = v2;
  sub_10016219C();
}

uint64_t sub_1001923C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100192404(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  *a2 = sub_100194BF8(a1);
  sub_10016219C();
}

uint64_t sub_100192424(uint64_t (*a1)(void))
{
  return sub_100194BF8(a1) & 1;
}

uint64_t sub_100192444(uint64_t (*a1)(void))
{
  return sub_100194BF8(a1);
}

unint64_t sub_100192464(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

#error "1001924C8: call analysis failed (funcsize=37)"

#error "100192574: call analysis failed (funcsize=38)"

uint64_t sub_1001925BC()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  sub_100194A60();
  v2 = sub_100186114();
  sub_1001948CC(v2, v3);
  if ((v1 & 1) == 0)
    return 0;
  sub_100194B18();
  sub_10019478C();
  v4 = sub_100161BD0(&qword_100314D80);
  sub_1001947EC(v4, v5, v6, v7, v8, v9, v10, v11, v17, v18);
  v12 = *(_QWORD *)(v19 + 48);
  v13 = type metadata accessor for NWEndpoint(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v0, v13);
  sub_100194AF0();
  sub_100194C14((unint64_t *)&unk_100315CC0);
  v14 = _NativeDictionary._delete(at:)(v0, v19);
  sub_100194A8C(v14, v15);
  return v12;
}

uint64_t sub_10019269C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v5 = v4;
  v10 = *v5;
  swift_bridgeObjectRetain(*v5);
  v11 = sub_100186174(a1, a2, a3, a4);
  LOBYTE(a4) = v12;
  swift_bridgeObjectRelease(v10, v12);
  if ((a4 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v24 = *v5;
  v14 = *v5;
  *v5 = 0x8000000000000000;
  v15 = *(_QWORD *)(v14 + 24);
  sub_100161BD0(&qword_100314D78);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v15);
  v16 = *(_QWORD *)(v24 + 48) + 32 * v11;
  v17 = *(_QWORD *)(v16 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8), v18);
  swift_bridgeObjectRelease(v17, v19);
  v20 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v11);
  sub_100161BD0(&qword_100315AF0);
  sub_100193B04();
  _NativeDictionary._delete(at:)(v11, v24);
  v21 = *v5;
  *v5 = v24;
  swift_bridgeObjectRelease(v21, v22);
  return v20;
}

void sub_1001927C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_100194C50();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  sub_10016D21C();
  v8 = sub_1001860C4(v5, v3);
  LOBYTE(v3) = v9;
  sub_10016D010(v8, v9);
  if ((v3 & 1) != 0)
  {
    v10 = sub_100194B18();
    v18 = *v1;
    v11 = *v1;
    *v1 = 0x8000000000000000;
    v12 = *(_QWORD *)(v11 + 24);
    sub_100161BD0((uint64_t *)&unk_100315CB0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v12);
    sub_100194B68(v13, *(_QWORD *)(v18 + 48) + 16 * v8);
    v14 = *(_QWORD *)(v18 + 56) + 40 * v8;
    v15 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v14;
    *(_OWORD *)(v7 + 16) = v15;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v14 + 32);
    _NativeDictionary._delete(at:)(v8, v18);
    v16 = *v1;
    *v1 = v18;
    swift_bridgeObjectRelease(v16, v17);
  }
  else
  {
    *(_QWORD *)(v7 + 32) = 0;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    sub_1001947D8();
  }
}

void sub_1001928D4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_100193410(v2);
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_10019293C(v5);
  *a1 = v2;
}

void sub_10019293C(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  char *v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v17;
  Swift::Int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  Swift::Int *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  Swift::Int v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100192FA0(0, v3, 1, a1);
      return;
    }
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  v5 = v4;
  sub_100172328(v3 / 2);
  v110 = v7;
  v111 = v3;
  v112 = v6;
  v108 = a1;
  if (v3 > 0)
  {
    v109 = v5;
    v8 = 0;
    v9 = *a1;
    v107 = *a1 + 8;
    v113 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      v10 = v8++;
      if (v8 >= v3)
        goto LABEL_32;
      v11 = (uint64_t *)(v9 + 16 * v8);
      v12 = *v11;
      v13 = v11[1];
      v14 = (_QWORD *)(v9 + 16 * v10);
      v15 = v14[1];
      if (v12 == *v14 && v13 == v15)
        break;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1);
      v18 = v10 + 2;
      if (v10 + 2 < v3)
        goto LABEL_13;
LABEL_23:
      v8 = v18;
      if ((v17 & 1) == 0)
        goto LABEL_32;
LABEL_24:
      if (v18 < v10)
        goto LABEL_149;
      if (v10 < v18)
      {
        v26 = 16 * v18;
        v27 = 16 * v10;
        v28 = v18;
        v29 = v10;
        do
        {
          if (v29 != --v28)
          {
            if (!v9)
              goto LABEL_153;
            v30 = v9 + v26;
            v31 = *(_QWORD *)(v9 + v27);
            v32 = *(_QWORD *)(v9 + v27 + 8);
            *(_OWORD *)(v9 + v27) = *(_OWORD *)(v9 + v26 - 16);
            *(_QWORD *)(v30 - 16) = v31;
            *(_QWORD *)(v30 - 8) = v32;
          }
          ++v29;
          v26 -= 16;
          v27 += 16;
        }
        while (v29 < v28);
      }
LABEL_31:
      v8 = v18;
LABEL_32:
      if (v8 >= v3)
        goto LABEL_41;
      if (__OFSUB__(v8, v10))
        goto LABEL_144;
      if (v8 - v10 >= v109)
        goto LABEL_41;
      if (__OFADD__(v10, v109))
        goto LABEL_147;
      if (v10 + v109 >= v3)
        v33 = v3;
      else
        v33 = v10 + v109;
      if (v33 < v10)
      {
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
        return;
      }
      if (v8 == v33)
      {
LABEL_41:
        v34 = v113;
      }
      else
      {
        v86 = (_QWORD *)(v9 + 16 * v8);
        v34 = v113;
        do
        {
          v87 = (uint64_t *)(v9 + 16 * v8);
          v88 = *v87;
          v89 = v87[1];
          v90 = v10;
          v91 = v86;
          do
          {
            v92 = *(v91 - 2);
            v93 = *(v91 - 1);
            v94 = v88 == v92 && v89 == v93;
            if (v94 || (_stringCompareWithSmolCheck(_:_:expecting:)(v88, v89, v92, v93, 1) & 1) == 0)
              break;
            if (!v9)
              goto LABEL_151;
            v88 = *v91;
            v89 = v91[1];
            *(_OWORD *)v91 = *((_OWORD *)v91 - 1);
            *(v91 - 1) = v89;
            *(v91 - 2) = v88;
            v91 -= 2;
            ++v90;
          }
          while (v8 != v90);
          ++v8;
          v86 += 2;
        }
        while (v8 != v33);
        v8 = v33;
      }
      if (v8 < v10)
        goto LABEL_143;
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      {
        sub_100193208(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
        v34 = v95;
      }
      v36 = *((_QWORD *)v34 + 2);
      v35 = *((_QWORD *)v34 + 3);
      v37 = v36 + 1;
      if (v36 >= v35 >> 1)
      {
        sub_100193208(v35 > 1, v36 + 1, 1, v34);
        v34 = v96;
      }
      *((_QWORD *)v34 + 2) = v37;
      v38 = v34 + 32;
      v39 = (Swift::Int *)&v34[16 * v36 + 32];
      *v39 = v10;
      v39[1] = v8;
      v113 = v34;
      if (v36)
      {
        while (1)
        {
          v40 = v37 - 1;
          if (v37 >= 4)
          {
            v45 = &v38[2 * v37];
            v46 = *(v45 - 8);
            v47 = *(v45 - 7);
            v51 = __OFSUB__(v47, v46);
            v48 = v47 - v46;
            if (v51)
              goto LABEL_128;
            v50 = *(v45 - 6);
            v49 = *(v45 - 5);
            v51 = __OFSUB__(v49, v50);
            v43 = v49 - v50;
            v44 = v51;
            if (v51)
              goto LABEL_129;
            v52 = v37 - 2;
            v53 = &v38[2 * v37 - 4];
            v55 = *v53;
            v54 = v53[1];
            v51 = __OFSUB__(v54, v55);
            v56 = v54 - v55;
            if (v51)
              goto LABEL_130;
            v51 = __OFADD__(v43, v56);
            v57 = v43 + v56;
            if (v51)
              goto LABEL_132;
            if (v57 >= v48)
            {
              v75 = &v38[2 * v40];
              v77 = *v75;
              v76 = v75[1];
              v51 = __OFSUB__(v76, v77);
              v78 = v76 - v77;
              if (v51)
                goto LABEL_138;
              v68 = v43 < v78;
              goto LABEL_79;
            }
          }
          else
          {
            if (v37 != 3)
            {
              v69 = *((_QWORD *)v34 + 4);
              v70 = *((_QWORD *)v34 + 5);
              v51 = __OFSUB__(v70, v69);
              v62 = v70 - v69;
              v63 = v51;
              goto LABEL_73;
            }
            v42 = *((_QWORD *)v34 + 4);
            v41 = *((_QWORD *)v34 + 5);
            v51 = __OFSUB__(v41, v42);
            v43 = v41 - v42;
            v44 = v51;
          }
          if ((v44 & 1) != 0)
            goto LABEL_131;
          v52 = v37 - 2;
          v58 = &v38[2 * v37 - 4];
          v60 = *v58;
          v59 = v58[1];
          v61 = __OFSUB__(v59, v60);
          v62 = v59 - v60;
          v63 = v61;
          if (v61)
            goto LABEL_133;
          v64 = &v38[2 * v40];
          v66 = *v64;
          v65 = v64[1];
          v51 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          if (v51)
            goto LABEL_135;
          if (__OFADD__(v62, v67))
            goto LABEL_137;
          if (v62 + v67 >= v43)
          {
            v68 = v43 < v67;
LABEL_79:
            if (v68)
              v40 = v52;
            goto LABEL_81;
          }
LABEL_73:
          if ((v63 & 1) != 0)
            goto LABEL_134;
          v71 = &v38[2 * v40];
          v73 = *v71;
          v72 = v71[1];
          v51 = __OFSUB__(v72, v73);
          v74 = v72 - v73;
          if (v51)
            goto LABEL_136;
          if (v74 < v62)
            goto LABEL_90;
LABEL_81:
          v79 = v40 - 1;
          if (v40 - 1 >= v37)
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }
          if (!v9)
            goto LABEL_152;
          v80 = &v38[2 * v79];
          v81 = *v80;
          v82 = &v38[2 * v40];
          v83 = v82[1];
          sub_100193064((char *)(v9 + 16 * *v80), (char *)(v9 + 16 * *v82), v9 + 16 * v83, v112);
          if (v1)
          {
            v97 = v113;
LABEL_107:
            swift_bridgeObjectRelease(v97, v84);
            if (v111 >= -1)
            {
              *(_QWORD *)(v110 + 16) = 0;
              swift_bridgeObjectRelease(v110, v98);
              return;
            }
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
            goto LABEL_148;
          }
          if (v83 < v81)
            goto LABEL_125;
          if (v40 > *((_QWORD *)v113 + 2))
            goto LABEL_126;
          *v80 = v81;
          v38[2 * v79 + 1] = v83;
          v85 = *((_QWORD *)v113 + 2);
          if (v40 >= v85)
            goto LABEL_127;
          v34 = v113;
          v37 = v85 - 1;
          memmove(&v38[2 * v40], v82 + 2, 16 * (v85 - 1 - v40));
          *((_QWORD *)v113 + 2) = v85 - 1;
          if (v85 <= 2)
            goto LABEL_90;
        }
      }
      v37 = 1;
LABEL_90:
      v3 = v111;
      if (v8 >= v111)
        goto LABEL_111;
    }
    v18 = v10 + 2;
    if (v10 + 2 >= v3)
      goto LABEL_31;
    v17 = 0;
LABEL_13:
    v19 = (uint64_t *)(v107 + 16 * v18);
    do
    {
      v20 = *(v19 - 1);
      v21 = *v19;
      v22 = (_QWORD *)(v9 + 16 * v8);
      v23 = v22[1];
      if (v20 == *v22 && v21 == v23)
      {
        if ((v17 & 1) != 0)
          goto LABEL_24;
      }
      else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1)) & 1) != 0)
      {
        goto LABEL_23;
      }
      v19 += 2;
      v25 = v18 + 1;
      v8 = v18;
      v18 = v25;
    }
    while (v25 < v3);
    v18 = v25;
    goto LABEL_23;
  }
  v113 = (char *)_swiftEmptyArrayStorage;
  v37 = _swiftEmptyArrayStorage[2];
LABEL_111:
  if (v37 >= 2)
  {
    v99 = *v108;
    while (1)
    {
      v100 = v37 - 2;
      if (v37 < 2)
        break;
      if (!v99)
        goto LABEL_154;
      v97 = v113;
      v101 = *(_QWORD *)&v113[16 * v100 + 32];
      v102 = *(_QWORD *)&v113[16 * v37 + 24];
      sub_100193064((char *)(v99 + 16 * v101), (char *)(v99 + 16 * *(_QWORD *)&v113[16 * v37 + 16]), v99 + 16 * v102, v112);
      if (v1)
        goto LABEL_107;
      if (v102 < v101)
        goto LABEL_140;
      if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0)
      {
        sub_1001932EC((uint64_t)v113);
        v97 = v105;
      }
      if (v100 >= *((_QWORD *)v97 + 2))
        goto LABEL_141;
      v103 = &v97[16 * v100 + 32];
      *(_QWORD *)v103 = v101;
      *((_QWORD *)v103 + 1) = v102;
      v104 = *((_QWORD *)v97 + 2);
      if (v37 > v104)
        goto LABEL_142;
      memmove(&v97[16 * v37 + 16], &v97[16 * v37 + 32], 16 * (v104 - v37));
      v113 = v97;
      *((_QWORD *)v97 + 2) = v104 - 1;
      v37 = v104 - 1;
      v3 = v111;
      if (v104 <= 2)
        goto LABEL_122;
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
LABEL_122:
  swift_bridgeObjectRelease(v113, v6);
  if (v3 < -1)
    goto LABEL_150;
  *(_QWORD *)(v110 + 16) = 0;
  swift_bridgeObjectRelease(v110, v106);
}

uint64_t sub_100192FA0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        v13 = *(v12 - 2);
        v14 = *(v12 - 1);
        if (result == v13 && v10 == v14)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1);
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        result = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_100193064(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    sub_100172D6C(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v20 = (char *)(a3 - 16);
    while (1)
    {
      v21 = v20 + 16;
      v22 = *((_QWORD *)v12 - 2);
      v23 = *((_QWORD *)v12 - 1);
      v24 = v12 - 16;
      v25 = *((_QWORD *)v6 - 2);
      v26 = *((_QWORD *)v6 - 1);
      v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1) & 1) == 0)
      {
        v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29)
          goto LABEL_43;
      }
      else
      {
        v28 = v21 != v6 || v20 >= v6;
        v24 = v6 - 16;
        v6 -= 16;
        if (!v28)
          goto LABEL_43;
      }
      *(_OWORD *)v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_47;
    }
  }
  sub_100172D6C(a1, (a2 - a1) / 16, a4);
  v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v14 = *((_QWORD *)v6 + 1);
      v15 = *((_QWORD *)v4 + 1);
      v16 = *(_QWORD *)v6 == *(_QWORD *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v14, *(_QWORD *)v4, v15, 1) & 1) != 0)
        break;
      v17 = v4;
      v16 = v7 == v4;
      v4 += 16;
      if (!v16)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_21;
    }
    v17 = v6;
    v16 = v7 == v6;
    v6 += 16;
    if (v16)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  sub_100172D6C(v4, (v12 - v4) / 16, v6);
  return 1;
}

void sub_100193208(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100161BD0(&qword_1003159B8);
    v11 = (char *)sub_100163AE8(v10, 16 * v9 + 32);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13)
      v13 = (char *)memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    v13 = (char *)memcpy(v13, v14, 16 * v8);
  }
  sub_1001648C4((uint64_t)v13, (uint64_t)v14);
  sub_1000BA184();
}

void sub_1001932EC(uint64_t a1)
{
  sub_100193208(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_100193300(char *__src, uint64_t a2, char *__dst)
{
  if (__dst != __src || &__src[16 * a2] <= __dst)
    return (char *)memmove(__dst, __src, 16 * a2);
  return __src;
}

uint64_t sub_10019332C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "language");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

id sub_10019338C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v7;
  uint64_t v8;
  id v9;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3, v8);
  v9 = objc_msgSend(a4, "userErrorForServerCode:reason:", a1, v7);

  return v9;
}

uint64_t sub_1001933FC(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_100193410(uint64_t a1)
{
  sub_1001734C8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100193424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100194840();
  sub_1001949E8();
  _Block_release(*(const void **)(v0 + 32));
  sub_100194BAC();
  v1 = sub_100194918();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10019344C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10019489C();
  sub_100194ABC();
  v1 = (_QWORD *)sub_1001949E0();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001946F0(v1, (uint64_t)sub_100194698);
  return sub_1001946DC(v2, v3, v4, v5, v6);
}

uint64_t sub_10019348C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100194840();
  sub_1001949E8();
  sub_100194BAC();
  sub_100194B8C();
  _Block_release(*(const void **)(v0 + 56));

  v1 = sub_10016D298();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001934C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc(dword_1003159F4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100194698;
  v2 = sub_100180E38();
  return v3(v2);
}

uint64_t sub_100193550()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100193574(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100194B84(a1, a2);
  sub_100194B7C();
  v2 = sub_100194918();
  return swift_deallocObject(v2, v3, v4);
}

uint64_t sub_100193590(uint64_t a1)
{
  _QWORD *v1;

  return sub_100190BB4(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_10019359C(uint64_t a1)
{
  uint64_t v1;

  sub_100191C90(a1, *(void **)(v1 + 16), *(Class *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1001935AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = *(_QWORD *)(sub_100161BD0(&qword_100315A20) - 8);
  v1 = *(unsigned __int8 *)(v0 + 80) | 7;
  sub_100194C1C(v0);
  v2 = sub_100194928();
  return swift_deallocObject(v2, v3, v1);
}

id sub_100193608(uint64_t a1, uint64_t a2, double a3)
{
  sub_100161BD0(&qword_100315A20);
  return sub_100191E28(a1, a2, a3);
}

uint64_t sub_100193668(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100193678(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100193680()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100193694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100194840();
  sub_100194B84(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40), v3);

  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001936D0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_BYTE *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = (_QWORD *)swift_task_alloc(dword_100315A2C);
  *(_QWORD *)(v1 + 16) = v6;
  v7 = sub_100194A28(v6, (uint64_t)sub_10019374C);
  return sub_10018F954(v7, v8, v9, v10, v2, v3, v4, v5);
}

uint64_t sub_10019374C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v5;

  v5 = *v1;
  v3 = *v1;
  sub_10016D100(*(_QWORD *)(v5 + 16), &v5);
  return sub_10016D23C(a1, *(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100193790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectRelease();
  sub_100194B7C();

  swift_release(*(_QWORD *)(v0 + 64));
  v1 = sub_10016D298();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001937C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_100315A44);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100194698;
  return sub_1001918BC(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100193854()
{
  return sub_100193878((void (*)(_QWORD))&_swift_errorRelease);
}

void sub_100193860()
{
  uint64_t v0;

  sub_100191C1C(*(void (**)(_QWORD, id))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10019386C()
{
  return sub_100193878((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_100193878(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 24));
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

void sub_1001938B0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), 0);
  sub_10016219C();
}

uint64_t sub_1001938D8()
{
  uint64_t v0;

  sub_100194840();
  sub_1001949E8();

  _Block_release(*(const void **)(v0 + 40));
  sub_100194B8C();

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100193918()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  sub_100194848();
  sub_100194AC8();
  v1 = (_QWORD *)sub_100194CAC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100194714(v1, (uint64_t)sub_100194698);
  return sub_100194740(v2, v3, v4, v5, v6, v7, v8);
}

void sub_100193958()
{
  sub_10018FC80();
}

uint64_t sub_100193970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100194840();
  sub_100194B84(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40), v3);

  swift_release(*(_QWORD *)(v0 + 64));
  v4 = sub_10016D298();
  return swift_deallocObject(v4, v5, v6);
}

uint64_t sub_1001939A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100194848();
  v2 = v0[6];
  v3 = v0[7];
  v4 = v0[8];
  v5 = (_QWORD *)swift_task_alloc(dword_100315A84);
  *(_QWORD *)(v1 + 16) = v5;
  v6 = sub_100194A28(v5, (uint64_t)sub_1001946D8);
  return sub_10018E858(v6, v7, v8, v9, v2, v3, v4);
}

uint64_t sub_100193A14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  sub_100194848();
  sub_100194AC8();
  v1 = (_QWORD *)sub_100194CAC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100194714(v1, (uint64_t)sub_100194698);
  return sub_100194740(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100193A54(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100193A64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10019489C();
  sub_100194ABC();
  v1 = (_QWORD *)sub_1001949E0();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001946F0(v1, (uint64_t)sub_100194698);
  return sub_1001946DC(v2, v3, v4, v5, v6);
}

uint64_t sub_100193AA4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_100193ABC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)swift_task_alloc(dword_100315ACC);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001883D4(v1, (uint64_t)sub_100194698);
  return sub_1001883C4(v2, v3, v4, v5);
}

unint64_t sub_100193B04()
{
  unint64_t result;

  result = qword_100315AF8;
  if (!qword_100315AF8)
  {
    result = swift_getWitnessTable(&unk_100233474, &type metadata for EntityCacheProvider.EntityCacheKey);
    atomic_store(result, (unint64_t *)&qword_100315AF8);
  }
  return result;
}

unint64_t sub_100193B40()
{
  unint64_t result;

  result = qword_100315B08;
  if (!qword_100315B08)
  {
    result = swift_getWitnessTable(&unk_1002337C0, &type metadata for EntityCacheError);
    atomic_store(result, (unint64_t *)&qword_100315B08);
  }
  return result;
}

unint64_t sub_100193B7C()
{
  unint64_t result;

  result = qword_100315B10;
  if (!qword_100315B10)
  {
    result = swift_getWitnessTable(&unk_100233790, &type metadata for EntityCacheMigrationPlan);
    atomic_store(result, (unint64_t *)&qword_100315B10);
  }
  return result;
}

uint64_t sub_100193BB8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100193BE4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = (_QWORD *)swift_task_alloc(dword_100315B2C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100194698;
  v2 = sub_100181100();
  return v3(v2);
}

uint64_t sub_100193C48()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10019489C();
  sub_100194ABC();
  v1 = (_QWORD *)sub_1001949E0();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001946F0(v1, (uint64_t)sub_100194698);
  return sub_1001946DC(v2, v3, v4, v5, v6);
}

uint64_t sub_100193C8C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10019489C();
  sub_100194ABC();
  v1 = (_QWORD *)sub_1001949E0();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001946F0(v1, (uint64_t)sub_100194698);
  return sub_1001946DC(v2, v3, v4, v5, v6);
}

uint64_t sub_100193CCC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_10018C408(a1, v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

void sub_100193CDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_100161BD0(a2);
  sub_100194A80(*(_QWORD *)(v2 - 8));
  sub_10016219C();
}

unint64_t sub_100193D0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100315BE8;
  if (!qword_100315BE8)
  {
    v1 = sub_100161C54(&qword_100315BE0);
    sub_100193D78();
    sub_100193EBC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100315BE8);
  }
  return result;
}

unint64_t sub_100193D78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100315BF0;
  if (!qword_100315BF0)
  {
    v1 = sub_100161C54(&qword_100315BA0);
    sub_100193DDC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100315BF0);
  }
  return result;
}

unint64_t sub_100193DDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100315BF8;
  if (!qword_100315BF8)
  {
    v1 = sub_100161C54(&qword_100315B98);
    sub_100193F38(&qword_100315C00, &qword_100315B90);
    sub_100193E58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100315BF8);
  }
  return result;
}

unint64_t sub_100193E58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100315C10;
  if (!qword_100315C10)
  {
    v1 = sub_100161C54(&qword_100315B80);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100315C10);
  }
  return result;
}

unint64_t sub_100193EBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100315C18;
  if (!qword_100315C18)
  {
    v1 = sub_100161C54(&qword_100315B78);
    sub_100193F38(&qword_100315C20, &qword_100315B70);
    sub_100193FA8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Comparison<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100315C18);
  }
  return result;
}

uint64_t sub_100193F38(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100161C54(a2);
    sub_10019404C(&qword_100315C08, &qword_100315B88);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100193FA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100315C28;
  if (!qword_100315C28)
  {
    v1 = sub_100161C54(&qword_100315B68);
    sub_1001942D8(&qword_100315978, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    sub_1001942D8(&qword_100315C30, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100315C28);
  }
  return result;
}

void sub_10019404C(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100161C54(a2);
    atomic_store(sub_100194C44(v3), a1);
  }
  sub_10016219C();
}

unint64_t sub_100194080()
{
  unint64_t result;

  result = qword_100315C50;
  if (!qword_100315C50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100315C50);
  }
  return result;
}

uint64_t sub_1001940BC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_10018B790(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1001940C8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10018AEEC(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1001940D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_100315B58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019411C()
{
  uint64_t v0;

  sub_100194840();
  sub_1001949E8();
  swift_unknownObjectRelease();
  sub_100194BAC();
  sub_100194B8C();
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100194158()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  sub_100194848();
  sub_100194AC8();
  v1 = (_QWORD *)sub_100194CAC();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100194714(v1, (uint64_t)sub_100194698);
  return sub_100194740(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10019419C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100194840();
  sub_1001949E8();
  _Block_release(*(const void **)(v0 + 32));
  sub_100194B7C();
  v1 = sub_100194918();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1001941C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10019489C();
  sub_100194ABC();
  v1 = (_QWORD *)sub_1001949E0();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001946F0(v1, (uint64_t)sub_100194204);
  return sub_1001946DC(v2, v3, v4, v5, v6);
}

uint64_t sub_100194204()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = *v0;
  v1 = *v0;
  sub_10016D100(*(_QWORD *)(v3 + 16), &v3);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10019424C()
{
  uint64_t v0;

  sub_100194840();
  _Block_release(*(const void **)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10019427C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)swift_task_alloc(dword_100315CA4);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001883D4(v1, (uint64_t)sub_100194698);
  return sub_1001883C4(v2, v3, v4, v5);
}

void sub_1001942C4(uint64_t a1)
{
  sub_10017367C(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_1001942D8(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = a2(255);
    atomic_store(sub_100194C44(v3), a1);
  }
  sub_10016219C();
}

ValueMetadata *type metadata accessor for EntityCacheMigrationPlan()
{
  return &type metadata for EntityCacheMigrationPlan;
}

unint64_t *initializeBufferWithCopyOfBuffer for EntityCacheError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_10019434C(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_10019434C(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return swift_errorRetain(result);
}

unint64_t destroy for EntityCacheError(unint64_t *a1)
{
  return sub_100194370(*a1);
}

unint64_t sub_100194370(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return swift_errorRelease(result);
}

unint64_t *assignWithCopy for EntityCacheError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_10019434C(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_100194370(v4);
  return a1;
}

_QWORD *initializeWithTake for EntityCacheError(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for EntityCacheError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_100194370(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityCacheError(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 125;
    }
    else
    {
      v2 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7D)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for EntityCacheError(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1001944A4(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_1001944C0(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1001944D0(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for EntityCacheError()
{
  return &type metadata for EntityCacheError;
}

uint64_t *initializeBufferWithCopyOfBuffer for ServerResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ServerResponse(_QWORD *a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*a1, a2);
}

uint64_t *assignWithCopy for ServerResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for ServerResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4, a2);
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerResponse(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerResponse()
{
  return &type metadata for ServerResponse;
}

unint64_t sub_100194654()
{
  unint64_t result;

  result = qword_100315CE0;
  if (!qword_100315CE0)
  {
    result = swift_getWitnessTable(&unk_1002333F4, &type metadata for EntityCacheSchemaV1);
    atomic_store(result, (unint64_t *)&qword_100315CE0);
  }
  return result;
}

uint64_t sub_1001946DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_1001946F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100194714@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100194740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  return a7();
}

uint64_t sub_100194758(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100194768()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 16))(v0, 0);
}

uint64_t sub_100194778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100194780()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

void sub_10019478C()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1001947A8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v0, 0);
}

uint64_t sub_1001947BC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1 + 16))(v1, 0, v0);
}

uint64_t sub_1001947D0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

BOOL sub_1001947EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_100194800(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100194818()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_10019482C(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100194840()
{
  uint64_t v0;

}

uint64_t sub_100194860(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v1, v3, a1, v2, v4);
}

uint64_t sub_100194880()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 + 256) + *(_QWORD *)(v0 + 296)));
}

void sub_1001948B0(uint64_t a1, uint64_t a2)
{
  sub_1001C15C4(a1, a2);
}

uint64_t sub_1001948C0(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0, 0);
}

uint64_t sub_1001948CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_1001948DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1001948EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v2;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_continuation_init(v1, 1);
}

void sub_1001948FC()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_100194904(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

id sub_10019490C(id a1)
{
  return a1;
}

uint64_t sub_100194918()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100194928()
{
  uint64_t v0;

  return v0;
}

void sub_100194934()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  v2 = *v0;
  v3 = (uint64_t *)(v1 - 8);
  *v3 = *v0;
  *v3 = *v0;
  *(_QWORD *)(v2 + 320) = *(_QWORD *)(v2 + 48);
}

void sub_100194954()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  v2 = *v0;
  v3 = (uint64_t *)(v1 - 8);
  *v3 = *v0;
  *v3 = *v0;
  *(_QWORD *)(v2 + 216) = *(_QWORD *)(v2 + 48);
}

uint64_t sub_100194974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return OS_dispatch_queue.async(group:qos:flags:execute:)(0, v0, v1, v2);
}

void sub_10019498C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_10019499C(uint64_t a1)
{
  return sub_10019088C(a1);
}

uint64_t sub_1001949C8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1001949D0()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1001949D8()
{
  return static GKLog.cache.getter();
}

uint64_t sub_1001949E0()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

void sub_1001949E8()
{
  uint64_t v0;

}

uint64_t sub_1001949F0()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1001949F8()
{
  uint64_t v0;

  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_100194A00()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100194A08(uint64_t a1)
{
  uint64_t v1;

  return ModelActor.modelContext.getter(a1, v1);
}

void sub_100194A14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_100194A28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100194A44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 176);
}

uint64_t sub_100194A60()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100194A74(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33, 0);
}

uint64_t sub_100194A80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_100194A8C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *v2;
  *v2 = v3;
  return swift_bridgeObjectRelease(v4, a2);
}

uint64_t sub_100194A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(v11, v12);
}

void sub_100194AAC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void sub_100194AD8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_100194AE8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100194AF0()
{
  return type metadata accessor for PeerConnection();
}

void sub_100194B00()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 208));
}

uint64_t sub_100194B10@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_100194B18()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_100194B20()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_100194B30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v2;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_continuation_init(v1, 1);
}

uint64_t sub_100194B40()
{
  return static os_log_type_t.debug.getter();
}

BOOL sub_100194B48(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100194B58()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100194B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 2, a3);
}

uint64_t sub_100194B68@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a2 + 8), a1);
}

uint64_t sub_100194B70()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_100194B7C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 40));
}

uint64_t sub_100194B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24), a2);
}

void sub_100194B8C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 48));
}

uint64_t sub_100194B94@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = a2;
  return swift_willThrow();
}

uint64_t sub_100194BA0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;

  v3[2] = a2;
  v3[3] = v2;
  v3[4] = result;
  return result;
}

void sub_100194BAC()
{
  uint64_t v0;

}

uint64_t sub_100194BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, a2, a3, 6, 0);
}

void sub_100194BC0()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_100194BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  return sub_10016FF44(a20, a21);
}

void sub_100194BD0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_100194BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(*(_QWORD *)(v2 + 64), a2);
}

uint64_t sub_100194BE4()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100194BEC()
{
  uint64_t v0;
  uint64_t v1;

  return ModelActor.modelContext.getter(v1, v0);
}

uint64_t sub_100194BF8(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100194C14(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_1001942D8(a1, v1);
}

uint64_t sub_100194C1C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_100194C24()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 264));
}

uint64_t sub_100194C2C()
{
  return swift_willThrow();
}

uint64_t sub_100194C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  return _print_unlocked<A, B>(_:_:)((uint64_t *)va, va1, a3);
}

uint64_t sub_100194C44(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_100194C64()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 192));
}

uint64_t sub_100194C70()
{
  uint64_t v0;
  uint64_t v1;

  return _NativeDictionary._delete(at:)(v0, v1);
}

uint64_t sub_100194C7C()
{
  uint64_t v0;

  return _swift_stdlib_bridgeErrorToNSError(v0);
}

uint64_t sub_100194C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return dispatch thunk of BackingData.setValue<A>(forKey:to:)(a1, a2, a3, a4, v4, v5);
}

uint64_t sub_100194C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100161B54(a1, 0, 1, a4);
}

uint64_t sub_100194C9C()
{
  uint64_t v0;

  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_100194CA4()
{
  uint64_t v0;

  return swift_getKeyPath(v0);
}

uint64_t sub_100194CAC()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_100194CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100161B54(a1, a2, 1, v2);
}

void sub_100194CC0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

_QWORD *sub_100194CD4(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  int64_t v7;
  int v8;
  int v9;
  char v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD *v24;

  v4 = *(_QWORD *)(a3 + 16);
  result = _swiftEmptyArrayStorage;
  if (v4)
  {
    v24 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    result = (_QWORD *)sub_1001994C4(a3);
    v7 = (int64_t)result;
    v9 = v8;
    v11 = v10 & 1;
    while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(_BYTE *)(a3 + 32))
    {
      if (((*(_QWORD *)(a3 + 56 + (((unint64_t)v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        goto LABEL_13;
      if (*(_DWORD *)(a3 + 36) != v9)
        goto LABEL_14;
      v12 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v7);
      v13 = v12[1];
      v22[0] = *v12;
      v22[1] = v13;
      swift_bridgeObjectRetain(v13);
      a1(&v23, v22);
      v15 = swift_bridgeObjectRelease(v13, v14);
      if (v3)
        return (_QWORD *)swift_release(v24);
      v16 = v23;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      v17 = v24[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v16);
      specialized ContiguousArray._endMutation()(v18);
      result = (_QWORD *)sub_1001993DC(v7, v9, v11 & 1, a3);
      v7 = (int64_t)result;
      v9 = v19;
      v11 = v20 & 1;
      if (!--v4)
      {
        sub_100176794((uint64_t)result, v19, v20 & 1);
        return v24;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t sub_100194E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v14[4];

  v5 = sub_100198AC0(a1, 0, 0, 0, 1, 0, 0);
  if (*(_QWORD *)(a3 + 16))
  {
    v6 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain();
    v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v6);
    v10 = v9;
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  v11 = sub_100163AE8((uint64_t)&unk_1002C6AE0, 32);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  if (v10 | v8)
  {
    v14[0] = 0;
    v14[1] = 0;
    v12 = v14;
    v14[2] = v8;
    v14[3] = v10;
  }
  else
  {
    v12 = 0;
  }
  return swift_task_create(v5, v12, (char *)&type metadata for () + 8, &unk_100315228, v11);
}

uint64_t sub_100194F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_11;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain(a2);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    v6 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1);
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 8 * v6);
        swift_retain(v7);
      }
      v8 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v9 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0);
      sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
      dispatch thunk of ModelContext.insert<A>(_:)(v7, v9, v10);
      swift_release(v7);
      ++v6;
      if (v8 == v4)
        goto LABEL_9;
    }
    __break(1u);
LABEL_11:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_retain(a2);
    swift_bridgeObjectRetain(a1);
  }
LABEL_9:
  swift_bridgeObjectRelease(a1, v5);
  return swift_release_n(a2, 2);
}

uint64_t sub_1001950A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    for (i = 4; ; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 8 * i);
        swift_retain(v7);
      }
      v8 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      sub_100196ADC();
      if (v2)
      {
        swift_bridgeObjectRelease(a1, v9);
        return swift_release(v7);
      }
      swift_release(v7);
      if (v8 == v4)
        return swift_bridgeObjectRelease(a1, v5);
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  return swift_bridgeObjectRelease(a1, v5);
}

uint64_t sub_1001951BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_100161BD0(&qword_100315CD8);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100232EF0;
  v2 = sub_1001998E0();
  *(_QWORD *)(v1 + 32) = &type metadata for DeniedSuggestionSchemaV1;
  *(_QWORD *)(v1 + 40) = v2;
  return v1;
}

uint64_t sub_100195214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100161BD0(&qword_100315998);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100232EF0;
  v2 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0);
  sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  return v1;
}

uint64_t sub_100195284()
{
  return sub_100195340((uint64_t)&unk_100233B98);
}

uint64_t sub_100195290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  sub_1001923C0(a3, (uint64_t)v14);
  v8 = v15;
  v9 = v16;
  sub_100163928(v14, v15);
  KeyPath = swift_getKeyPath(a5);
  v13[0] = a1;
  v13[1] = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, v13, &type metadata for String, &protocol witness table for String, v8, v9);
  swift_bridgeObjectRelease(a2, v11);
  sub_100176CDC();
  return sub_100161FE0(v14);
}

uint64_t sub_100195334()
{
  return sub_100195340((uint64_t)&unk_100233B70);
}

uint64_t sub_100195340(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = v1;
  KeyPath = swift_getKeyPath(a1);
  sub_1001942D8(&qword_100315F20, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(a1);
  sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  PersistentModel.getValue<A>(forKey:)(v5);
  sub_100176CDC();
  return v7;
}

uint64_t sub_100195410(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  sub_1001923C0(a2, (uint64_t)v9);
  v3 = v10;
  v4 = v11;
  sub_100163928(v9, v10);
  KeyPath = swift_getKeyPath(&unk_100233B48);
  v6 = type metadata accessor for Date(0);
  sub_1001942D8(&qword_100315C30, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, a1, v6, v7, v3, v4);
  swift_release(KeyPath);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return sub_100161FE0(v9);
}

uint64_t sub_1001954E0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v0;
  KeyPath = swift_getKeyPath(&unk_100233B48);
  sub_1001942D8(&qword_100315F20, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_100233B48);
  sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  sub_1001942D8(&qword_100315978, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  PersistentModel.getValue<A>(forKey:)(v3);
  return swift_release(v3);
}

unint64_t sub_1001955D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  void *v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease(v19, v4);
  v18 = 0xD000000000000012;
  v19 = 0x8000000100299B70;
  v5._countAndFlagsBits = sub_100195284();
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object, v7);
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = sub_100195334();
  v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10, v11);
  v12._countAndFlagsBits = 2113568;
  v12._object = (void *)0xE300000000000000;
  String.append(_:)(v12);
  sub_1001954E0();
  sub_1001942D8(&qword_100315968, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v13);
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15, v16);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v18;
}

uint64_t *sub_10019573C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v5 = v4;
  v22 = a3;
  v9 = *v4;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = sub_100161BD0(&qword_100315F98);
  sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  v15 = v14;
  v23[0] = v9;
  v23[1] = v9;
  v23[2] = v14;
  v23[3] = v14;
  v5[6] = swift_getOpaqueTypeConformance2(v23, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10016CA34(v5 + 2);
  v16 = static PersistentModel.createBackingData<A>()(v9, v9, v15, v15);
  ObservationRegistrar.init()(v16);
  if ((a1 & 1) != 0)
    v17 = 0x726579616C70;
  else
    v17 = 0x746361746E6F63;
  if ((a1 & 1) != 0)
    v18 = 0xE600000000000000;
  else
    v18 = 0xE700000000000000;
  v19 = *v5;
  sub_100195290(v17, v18, (uint64_t)(v5 + 2), *v5, (uint64_t)&unk_100233B98);
  sub_100195290(a2, v22, (uint64_t)(v5 + 2), v19, (uint64_t)&unk_100233B70);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  sub_100195410((uint64_t)v13, (uint64_t)(v5 + 2));
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a4, v10);
  return v5;
}

uint64_t sub_1001958EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v0 = sub_100161BD0(&qword_100315990);
  v1 = type metadata accessor for Schema.PropertyMetadata(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ 3 * *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100233800;
  KeyPath = swift_getKeyPath(&unk_100233B98);
  v10 = 0u;
  v11 = 0u;
  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1684957547, 0xE400000000000000, KeyPath, &v10, &v7);
  v4 = swift_getKeyPath(&unk_100233B70);
  v10 = 0u;
  v11 = 0u;
  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(25705, 0xE200000000000000, v4, &v10, &v7);
  v5 = swift_getKeyPath(&unk_100233B48);
  v10 = 0u;
  v11 = 0u;
  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1702125924, 0xE400000000000000, v5, &v10, &v7);
  return v2;
}

_QWORD *sub_100195A24(_QWORD *a1)
{
  uint64_t v1;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return sub_100195A5C(a1);
}

_QWORD *sub_100195A5C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = *v1;
  v2[5] = sub_100161BD0(&qword_100315F98);
  sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  v6 = v5;
  *(_QWORD *)&v10 = v4;
  *((_QWORD *)&v10 + 1) = v4;
  v11 = v5;
  v12 = v5;
  v2[6] = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10016CA34(v2 + 2);
  v7 = static PersistentModel.createBackingData<A>()(v4, v4, v6, v6);
  ObservationRegistrar.init()(v7);
  sub_1001923C0((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v2 + 2, v9, 33, 0);
  sub_100161FE0(v2 + 2);
  sub_10016C8B0(&v10, (uint64_t)(v2 + 2));
  swift_endAccess(v9);
  sub_100161FE0(a1);
  return v2;
}

uint64_t sub_100195B64()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100161FE0(v0 + 2);
  v1 = (char *)v0
     + OBJC_IVAR____TtCV14GameDaemonCoreP33_59C5B83A364DDF4FB01D7B31902CAB5424DeniedSuggestionSchemaV116DeniedSuggestion___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

unint64_t sub_100195BBC()
{
  return sub_1001955D8();
}

_QWORD *sub_100195BE0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  uint64_t v23;
  unsigned __int8 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v46;
  uint64_t v47;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ModelConfiguration.CloudKitDatabase(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ModelConfiguration.GroupContainer(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ModelConfiguration(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v16 = 1;
    ModelConfiguration.init(isStoredInMemoryOnly:)(1);
  }
  else
  {
    v17 = static ModelConfiguration.GroupContainer.identifier(_:)(0xD00000000000001ALL, 0x8000000100299B90);
    static ModelConfiguration.CloudKitDatabase.none.getter(v17);
    ModelConfiguration.init(_:schema:isStoredInMemoryOnly:allowsSave:groupContainer:cloudKitDatabase:)(0xD000000000000010, 0x8000000100233830, 0, 0, 1, v11, v8);
    v18 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v19 = ModelConfiguration.url.getter(v18);
    URL.absoluteString.getter(v19);
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21, v23);
    v24 = objc_msgSend(v18, "fileExistsAtPath:", v22);

    v16 = v24 ^ 1;
  }
  v25 = (_QWORD *)v46;
  *(_BYTE *)(v46 + 16) = v16;
  type metadata accessor for ModelContainer(0);
  v26 = sub_100161BD0(&qword_100315998);
  v27 = swift_allocObject(v26, 48, 7);
  v46 = xmmword_100232EF0;
  *(_OWORD *)(v27 + 16) = xmmword_100232EF0;
  v28 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0);
  sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  *(_QWORD *)(v27 + 32) = v28;
  *(_QWORD *)(v27 + 40) = v29;
  v30 = sub_100199544();
  v31 = sub_100161BD0(&qword_100315B18);
  v32 = *(unsigned __int8 *)(v13 + 80);
  v33 = (v32 + 32) & ~v32;
  v34 = swift_allocObject(v31, v33 + *(_QWORD *)(v13 + 72), v32 | 7);
  *(_OWORD *)(v34 + 16) = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v34 + v33, v15, v12);
  v35 = v47;
  v36 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)(v27, &type metadata for DeniedSuggestionMigrationPlan, v30, v34);
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v37 = type metadata accessor for FriendSuggestionDenierStorage();
    swift_deallocPartialClassInstance(v25, v37, 48, 7);
  }
  else
  {
    v38 = v36;
    v25[5] = v36;
    v39 = type metadata accessor for ModelContext(0);
    swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
    v40 = swift_retain(v38);
    v41 = ModelContext.init(_:)(v40);
    v42 = type metadata accessor for DefaultSerialModelExecutor(0);
    swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
    v43 = DefaultSerialModelExecutor.init(modelContext:)(v41);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    sub_1001942D8(&qword_100315B20, (uint64_t (*)(uint64_t))&type metadata accessor for DefaultSerialModelExecutor);
    v25[3] = v43;
    v25[4] = v44;
  }
  return v25;
}

uint64_t sub_100195FB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = sub_100161BD0(&qword_100315FC8);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100161BD0(&qword_100315FD0);
  v31 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100161BD0(&qword_100315FD8);
  sub_100161B54((uint64_t)v4, 1, 1, v8);
  v9 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0);
  sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  v11 = v10;
  FetchDescriptor.init(predicate:sortBy:)(v4, _swiftEmptyArrayStorage, v9, v10);
  v12 = sub_100195284();
  v14 = v13;
  v29 = a1;
  v15 = sub_100195334();
  v17 = v16;
  v33 = v12;
  v34 = v14;
  v35 = v15;
  v36 = v16;
  v37 = v9;
  Predicate.init(_:)(sub_10019917C, v32, 1, &v37);
  swift_bridgeObjectRelease(v17, v18);
  swift_bridgeObjectRelease(v14, v19);
  sub_100161B54((uint64_t)v4, 0, 1, v8);
  FetchDescriptor.predicate.setter(v4, v5);
  FetchDescriptor.fetchLimit.setter(1, 0, v5);
  FetchDescriptor.includePendingChanges.setter(1, v5);
  v20 = type metadata accessor for FriendSuggestionDenierStorage();
  sub_1001942D8(&qword_100315F38, (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  v22 = v21;
  v23 = ModelActor.modelContext.getter(v20, v21);
  v24 = v30;
  v25 = dispatch thunk of ModelContext.fetchCount<A>(_:)(v7, v9, v11);
  if (v24)
    goto LABEL_2;
  v27 = v25;
  v30 = v11;
  swift_release(v23);
  if (!v27)
  {
    v28 = ModelActor.modelContext.getter(v20, v22);
    dispatch thunk of ModelContext.insert<A>(_:)(v29, v9, v30);
    swift_release(v28);
    v23 = ModelActor.modelContext.getter(v20, v22);
    dispatch thunk of ModelContext.save()();
LABEL_2:
    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
    return swift_release(v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v7, v5);
}

uint64_t sub_100196274@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v49 = a4;
  v50 = a5;
  v45 = a3;
  v43 = a2;
  v52 = a6;
  v53 = sub_100161BD0(&qword_100315B80);
  v47 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100161BD0(&qword_100315FE0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100161BD0(&qword_100315FE8);
  v44 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100161BD0(&qword_100315FF0);
  v51 = *(_QWORD *)(v48 - 8);
  v16 = __chkstk_darwin(v48);
  v46 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v42 = (char *)&v40 - v18;
  v19 = *a1;
  sub_10019404C(&qword_100315FF8, &qword_100315FE0);
  v21 = v20;
  static PredicateExpressions.build_Arg<A>(_:)(v19, v9, v20);
  KeyPath = swift_getKeyPath(&unk_100233B98);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v12, KeyPath, v9, v21);
  swift_release(KeyPath);
  v41 = *(void (**)(char *, uint64_t))(v10 + 8);
  v41(v12, v9);
  v54 = v43;
  v55 = v45;
  static PredicateExpressions.build_Arg<A>(_:)(&v54, &type metadata for String);
  sub_10019404C(&qword_100316000, &qword_100315FE8);
  v24 = v23;
  v45 = v23;
  sub_10019404C(&qword_100315BB8, &qword_100315B80);
  v26 = v25;
  v27 = v53;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v15, v8, v13, v53, v24, v25, &protocol witness table for String);
  v28 = *(void (**)(char *, uint64_t))(v47 + 8);
  v28(v8, v27);
  v29 = *(void (**)(char *, uint64_t))(v44 + 8);
  v29(v15, v13);
  static PredicateExpressions.build_Arg<A>(_:)(v19, v9, v21);
  v30 = swift_getKeyPath(&unk_100233B70);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v12, v30, v9, v21);
  swift_release(v30);
  v41(v12, v9);
  v54 = v49;
  v55 = v50;
  static PredicateExpressions.build_Arg<A>(_:)(&v54, &type metadata for String);
  v31 = v46;
  v32 = v53;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v15, v8, v13, v53, v45, v26, &protocol witness table for String);
  v28(v8, v32);
  v29(v15, v13);
  v33 = sub_100161BD0(&qword_100316008);
  v34 = v52;
  v52[3] = v33;
  v34[4] = sub_100199188();
  sub_10016CA34(v34);
  sub_10019404C(&qword_100316030, &qword_100315FF0);
  v35 = v42;
  v36 = v48;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v42, v31, v48, v48, v37, v37);
  v38 = *(void (**)(char *, uint64_t))(v51 + 8);
  v38(v31, v36);
  return ((uint64_t (*)(char *, uint64_t))v38)(v35, v36);
}

uint64_t sub_100196660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for FriendSuggestionDenierStorage();
  sub_1001942D8(&qword_100315F38, (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  v4 = v3;
  v5 = ModelActor.modelContext.getter(v2, v3);
  swift_retain(v5);
  sub_100194F64(a1, v5);
  swift_release(v5);
  v6 = ModelActor.modelContext.getter(v2, v4);
  dispatch thunk of ModelContext.save()();
  return swift_release(v6);
}

uint64_t sub_100196714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v1 = sub_100161BD0(&qword_100315FC8);
  __chkstk_darwin(v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FriendSuggestionDenierStorage();
  sub_1001942D8(&qword_100315F38, (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  v6 = v5;
  v7 = ModelActor.modelContext.getter(v4, v5);
  v8 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0);
  v9 = sub_100161BD0(&qword_100315FD8);
  sub_100161B54((uint64_t)v3, 1, 1, v9);
  sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v8, v3, 1, v8, v10);
  sub_10016CBEC((uint64_t)v3, &qword_100315FC8);
  result = swift_release(v7);
  if (!v0)
  {
    v12 = ModelActor.modelContext.getter(v4, v6);
    dispatch thunk of ModelContext.save()();
    return swift_release(v12);
  }
  return result;
}

id sub_100196880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;

  v1 = sub_100161BD0(&qword_100315FC8);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100161BD0(&qword_100315FD0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100161BD0(&qword_100315FD8);
  sub_100161B54((uint64_t)v3, 1, 1, v8);
  v9 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0);
  sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  v11 = v10;
  FetchDescriptor.init(predicate:sortBy:)(v3, _swiftEmptyArrayStorage, v9, v10);
  FetchDescriptor.includePendingChanges.setter(1, v4);
  v23 = &_swiftEmptySetSingleton;
  v24 = &_swiftEmptySetSingleton;
  v12 = type metadata accessor for FriendSuggestionDenierStorage();
  sub_1001942D8(&qword_100315F38, (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  v14 = (id)ModelActor.modelContext.getter(v12, v13);
  v15 = dispatch thunk of ModelContext.fetch<A>(_:)(v7, v9, v11);
  if (v0)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_release(v14);
  }
  else
  {
    v17 = v15;
    swift_release(v14);
    sub_1001950A0(v17);
    swift_bridgeObjectRelease(v17, v18);
    v22 = (uint64_t)v23;
    v21 = (uint64_t)v24;
    objc_allocWithZone((Class)type metadata accessor for FriendSuggestionDenyList());
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    v14 = sub_100196E84(v21, v22);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_bridgeObjectRelease(v23, v16);
  swift_bridgeObjectRelease(v24, v19);
  return v14;
}

uint64_t sub_100196ADC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];

  v0 = sub_100195284();
  if (v0 == 0x746361746E6F63 && v1 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  v3 = v0;
  v4 = v1;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746361746E6F63, 0xE700000000000000, v0, v1, 0) & 1) != 0)
  {
    v5 = v4;
LABEL_8:
    swift_bridgeObjectRelease(v5, v1);
    v6 = sub_100195334();
    v8 = v7;
    v9 = v6;
    v10 = v8;
LABEL_9:
    sub_1001737EC(v27, v9, v10);
    return swift_bridgeObjectRelease(v27[1], v11);
  }
  if (v3 == 0x726579616C70 && v4 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000, v1);
    goto LABEL_17;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726579616C70, 0xE600000000000000, v3, v4, 0);
  swift_bridgeObjectRelease(v4, v15);
  if ((v14 & 1) != 0)
  {
LABEL_17:
    v24 = sub_100195334();
    v26 = v25;
    v9 = v24;
    v10 = v26;
    goto LABEL_9;
  }
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000, v16);
  strcpy((char *)v27, "Unknown kind: ");
  HIBYTE(v27[1]) = -18;
  v17._countAndFlagsBits = sub_100195284();
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object, v19);
  v20 = v27[1];
  v21 = sub_100198F64();
  v22 = swift_allocError(&type metadata for FriendSuggestionDenierError, v21, 0, 0);
  *v23 = v27[0];
  v23[1] = v20;
  v23[2] = 0;
  return swift_willThrow(v22);
}

uint64_t sub_100196CC8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t sub_100196CEC()
{
  uint64_t v0;

  v0 = sub_100196CC8();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_100196D08()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for FriendSuggestionDenierStorage();
  sub_1001942D8(&qword_100315F38, (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  return ModelActor.unownedExecutor.getter(v0, v1);
}

uint64_t sub_100196D50()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 40));
}

uint64_t sub_100196D58()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 24));
}

id sub_100196D7C()
{
  id v0;
  id result;

  v0 = objc_allocWithZone((Class)type metadata accessor for FriendSuggestionDenyList());
  result = sub_100196E84((uint64_t)&_swiftEmptySetSingleton, (uint64_t)&_swiftEmptySetSingleton);
  qword_10031B920 = (uint64_t)result;
  return result;
}

id sub_100196DB8()
{
  if (qword_100314910 != -1)
    swift_once(&qword_100314910, sub_100196D7C);
  return (id)qword_10031B920;
}

uint64_t FriendSuggestionDenyList.contactIDs.getter()
{
  return sub_100176CCC(OBJC_IVAR___GKFriendSuggestionDenyList_contactIDs);
}

Class sub_100196E30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  Class isa;
  uint64_t v5;

  v3 = a3();
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3, v5);
  return isa;
}

uint64_t FriendSuggestionDenyList.playerIDs.getter()
{
  return sub_100176CCC(OBJC_IVAR___GKFriendSuggestionDenyList_playerIDs);
}

id sub_100196E84(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)sub_10016D668();
  *(_QWORD *)&v2[OBJC_IVAR___GKFriendSuggestionDenyList_contactIDs] = a1;
  *(_QWORD *)&v2[OBJC_IVAR___GKFriendSuggestionDenyList_playerIDs] = a2;
  v7.receiver = v2;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "init");
}

void FriendSuggestionDenyList.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.FriendSuggestionDenyList", 39, "init()", 6, 0);
  __break(1u);
}

void FriendSuggestionDenier.init()()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(objc_allocWithZone((Class)GKContactDenier), "init");
  objc_msgSend(v0, "initInMemory:legacyDenier:", 0, v1);

  sub_10016219C();
}

id FriendSuggestionDenier.__allocating_init(inMemory:legacyDenier:)(char a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return FriendSuggestionDenier.init(inMemory:legacyDenier:)(a1, a2);
}

id FriendSuggestionDenier.init(inMemory:legacyDenier:)(char a1, void *a2)
{
  void *v2;
  objc_class *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  id v9;
  objc_super v11;

  v5 = (objc_class *)sub_10016D668();
  v6 = sub_1001999FC();
  sub_100163AE8(v6, 48);
  v7 = v2;
  v8 = sub_100195BE0(a1);
  *(_QWORD *)&v7[OBJC_IVAR___GKFriendSuggestionDenier_storage] = v8;
  swift_retain(v8);

  if (*((_BYTE *)v8 + 16) == 1)
    sub_10019717C(a2, (uint64_t)v8);
  swift_release(v8);
  v11.receiver = v7;
  v11.super_class = v5;
  v9 = objc_msgSendSuper2(&v11, "init");

  return v9;
}

uint64_t type metadata accessor for FriendSuggestionDenierStorage()
{
  return objc_opt_self(_TtC14GameDaemonCoreP33_59C5B83A364DDF4FB01D7B31902CAB5429FriendSuggestionDenierStorage);
}

void sub_10019717C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(a1, "deniedContactIdentifiers");
  v12 = sub_1001992D4();
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for String, v12, &protocol witness table for String);

  v14 = sub_100171864(v13);
  static GKLog.general.getter(v14);
  v15 = swift_bridgeObjectRetain(v14);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v18 = 134217984;
    v27 = v14[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_bridgeObjectRelease(v14, v19);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Importing %ld denied contact IDs", v18, 0xCu);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(v14, v20);
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v14[2])
  {
    v22 = type metadata accessor for TaskPriority(0);
    sub_100161B54((uint64_t)v6, 1, 1, v22);
    v23 = (_QWORD *)swift_allocObject(&unk_1002C6B08, 56, 7);
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = v14;
    v23[5] = a2;
    v23[6] = a1;
    swift_retain(a2);
    v24 = a1;
    v25 = sub_100194E68((uint64_t)v6, (uint64_t)&unk_100316040, (uint64_t)v23);
    swift_release(v25);
    sub_10016CBEC((uint64_t)v6, &qword_100314CE8);
  }
  else
  {
    swift_bridgeObjectRelease(v14, v21);
  }
}

void sub_100197410()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority(0);
  sub_100161B54((uint64_t)v3, 1, 1, v4);
  v5 = (_QWORD *)sub_100163AE8((uint64_t)&unk_1002C6AB8, 40);
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v0;
  v6 = v0;
  v7 = sub_100194E68((uint64_t)v3, (uint64_t)&unk_100315FC0, (uint64_t)v5);
  swift_release(v7);
  sub_10016CBEC((uint64_t)v3, &qword_100314CE8);
}

uint64_t sub_1001974D0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100315D0C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10018839C;
  return FriendSuggestionDenier.deleteAll()();
}

uint64_t FriendSuggestionDenier.deleteAll()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100199A74();
  v0[6] = sub_10019992C(v1);
  v0[7] = sub_1001999F4();
  v0[8] = sub_1001999F4();
  sub_10016CFA0();
  return sub_10016D26C(v2, v3, v4);
}

uint64_t sub_10019755C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  os_log_type_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR___GKFriendSuggestionDenier_storage);
  *(_QWORD *)(v1 + 72) = v3;
  if (v3)
  {
    sub_1001999FC();
    sub_1001942D8(&qword_100315D10, (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
    sub_1001999D4();
    sub_1001999A0();
    sub_100199A80();
    sub_100199AB8();
    return sub_100194778(v4, v5, v6);
  }
  else
  {
    v8 = sub_100199A44();
    Logger.logObject.getter(v8);
    v9 = sub_1001999B8();
    if (sub_100194B48(v9))
    {
      v10 = (_WORD *)sub_100165DA4(2);
      sub_100199AA4(v10);
      sub_100194A14((void *)&_mh_execute_header, v11, v12, "Can not clear deny list because storage has failed to initialize");
      sub_100165D98(v0);
    }
    sub_100199A8C();
    sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    sub_1001999AC();
    sub_10016D2A8();
    sub_100180C98();
    return sub_100165E20(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_100197644()
{
  uint64_t v0;

  sub_100196714();
  *(_QWORD *)(v0 + 80) = 0;
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_100197694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_100199A44();
  v3 = (void *)Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter(v3);
  if (sub_100194B48(v4))
  {
    v5 = (_WORD *)sub_100165DA4(2);
    sub_100199AA4(v5);
    sub_100194A14((void *)&_mh_execute_header, v6, v7, "Friend suggestion deny list has been cleared");
    sub_100165D98(v0);
  }
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 32);
  v10 = *(_QWORD *)(v1 + 40);

  sub_100176CDC();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  sub_1001999AC();
  sub_10016D2A8();
  sub_100180C98();
  return sub_100180D38(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10019772C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100199A4C();
  sub_1001949F0();
  v2 = sub_1001949F0();
  sub_100199AB0(v2);
  v3 = sub_1001999B8();
  if (os_log_type_enabled(v0, v3))
  {
    v5 = *(_QWORD *)(v1 + 72);
    v4 = *(_QWORD *)(v1 + 80);
    v6 = (uint8_t *)sub_100165DA4(12);
    v7 = (_QWORD *)sub_100165DA4(8);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v4);
    v8 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v1 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24);
    *v7 = v8;
    sub_10016D1B4();
    sub_10016D1B4();
    sub_100165E04((void *)&_mh_execute_header, v0, v3, "Failed to clear deny list: %@", v6);
    v9 = sub_100161BD0(&qword_100315A10);
    sub_100165DFC((uint64_t)v7, v10, v9);
    sub_100165D98((uint64_t)v7);
    sub_100165D98((uint64_t)v6);
    swift_release(v5);

    sub_10016D1B4();
  }
  else
  {
    swift_release(*(_QWORD *)(v1 + 72));
    sub_10016D1B4();
    sub_10016D1B4();
    sub_10016D1B4();

  }
  sub_100199A24();
  sub_1001999AC();
  sub_10016D2A8();
  sub_100180C98();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001978C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_100199A14(a1, a2);
  *(_QWORD *)(v2 + 40) = sub_1001999C0(v3);
  sub_10016CFA0();
  return sub_10016D26C(v4, v5, v6);
}

uint64_t sub_1001978F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = sub_100199A04();
  static Date.now.getter(v1);
  v2 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0);
  sub_100165ED4(v2);
  *(_QWORD *)(v0 + 48) = sub_1001999E0(0);
  v3 = (_QWORD *)swift_task_alloc(dword_100315F8C);
  *(_QWORD *)(v0 + 56) = v3;
  v4 = sub_100199AC4(v3, (uint64_t)sub_10019795C);
  return sub_10019996C(v4);
}

uint64_t sub_10019795C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10019994C();
  if (v1)
  {
    sub_10016CFA0();
    return sub_100194778(v3, v4, v5);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 48));
    sub_10016D2A8();
    return sub_10019997C(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t sub_1001979AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_1001979C4, 0, 0);
}

uint64_t sub_1001979C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR___GKFriendSuggestionDenier_storage);
  *(_QWORD *)(v0 + 32) = v1;
  if (v1)
  {
    sub_1001999FC();
    sub_1001942D8(&qword_100315D10, (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
    sub_1001999D4();
    sub_1001999A0();
    sub_100199A80();
    sub_100199AB8();
    return sub_10016CF14();
  }
  else
  {
    v3 = sub_100198F64();
    v4 = sub_1001948C0((uint64_t)&type metadata for FriendSuggestionDenierError, v3);
    *(_OWORD *)v5 = xmmword_100233810;
    *(_QWORD *)(v5 + 16) = 0;
    swift_willThrow(v4);
    return sub_10016D170(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_100197A78()
{
  uint64_t v0;

  sub_100195FB4(*(_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 40) = 0;
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_100197ACC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100197AF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = sub_100198F64();
  v4 = sub_1001948C0((uint64_t)&type metadata for FriendSuggestionDenierError, v3);
  *v5 = 0;
  v5[1] = 0;
  v5[2] = v2;
  swift_willThrow(v4);
  swift_release(v1);
  return sub_10016D170(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100197B68(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100315FB4;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_10019991C;
  return sub_1001978C0(v6, v8);
}

uint64_t sub_100197BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_100199A14(a1, a2);
  *(_QWORD *)(v2 + 40) = sub_1001999C0(v3);
  sub_10016CFA0();
  return sub_10016D26C(v4, v5, v6);
}

uint64_t sub_100197C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = sub_100199A04();
  static Date.now.getter(v1);
  v2 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0);
  sub_100165ED4(v2);
  *(_QWORD *)(v0 + 48) = sub_1001999E0(1);
  v3 = (_QWORD *)swift_task_alloc(dword_100315F8C);
  *(_QWORD *)(v0 + 56) = v3;
  v4 = sub_100199AC4(v3, (uint64_t)sub_100197C90);
  return sub_10019996C(v4);
}

uint64_t sub_100197C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10019994C();
  if (v1)
  {
    sub_10016CFA0();
    return sub_100194778(v3, v4, v5);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 48));
    sub_10016D2A8();
    return sub_10019997C(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t sub_100197CE0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  sub_10016D2A8();
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100197D24(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  void *v10;
  _QWORD *v11;
  id v12;
  id v13;

  v10 = _Block_copy(aBlock);
  v11 = (_QWORD *)sub_100163AE8(a5, 40);
  v11[2] = a3;
  v11[3] = v10;
  v11[4] = a1;
  v12 = a3;
  v13 = a1;
  sub_1001C15C4(a6, (uint64_t)v11);
}

uint64_t sub_100197D90(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_100315F84;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_100197E1C;
  return sub_100197BF4(v6, v8);
}

uint64_t sub_100197E1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*v1 + 32);
  v2 = *(_QWORD *)(*v1 + 40);
  v4 = *(void **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(v2);

  swift_bridgeObjectRelease(v3, v6);
  v7 = *(_QWORD *)(v5 + 24);
  if (v0)
  {
    _convertErrorToNSError(_:)(v0);
    sub_100199A98();
    sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16));

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v7 + 16))(*(_QWORD *)(v5 + 24), 0);
  }
  _Block_release(*(const void **)(v5 + 24));
  return sub_100165E20(*(uint64_t (**)(void))(v5 + 8));
}

uint64_t sub_100197EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100199A74();
  *(_QWORD *)(v0 + 48) = sub_10019992C(v1);
  *(_QWORD *)(v0 + 56) = sub_1001999F4();
  sub_10016CFA0();
  return sub_10016D26C(v2, v3, v4);
}

uint64_t sub_100197EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  os_log_type_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR___GKFriendSuggestionDenier_storage);
  *(_QWORD *)(v1 + 64) = v3;
  if (v3)
  {
    sub_1001999FC();
    sub_1001942D8(&qword_100315D10, (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
    sub_1001999D4();
    sub_1001999A0();
    sub_100199A80();
    sub_100199AB8();
    return sub_100194778(v4, v5, v6);
  }
  else
  {
    v8 = sub_100199A44();
    Logger.logObject.getter(v8);
    v9 = sub_1001999B8();
    if (sub_100194B48(v9))
    {
      v10 = (_WORD *)sub_100165DA4(2);
      sub_100199AA4(v10);
      sub_100194A14((void *)&_mh_execute_header, v11, v12, "Can not fetch deny list because storage has failed to initialize");
      sub_100165D98(v0);
    }
    sub_100199A8C();
    sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    if (qword_100314910 != -1)
      swift_once(&qword_100314910, sub_100196D7C);
    v13 = (id)qword_10031B920;
    sub_10016D2A8();
    sub_100180C98();
    return sub_100199924((uint64_t)v13, *(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_100198010()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 72) = sub_100196880();
  *(_QWORD *)(v0 + 80) = 0;
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_100198060()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  sub_100180C98();
  return sub_100199924(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001980A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  sub_100199A4C();
  sub_1001949F0();
  v2 = sub_1001949F0();
  sub_100199AB0(v2);
  v3 = sub_1001999B8();
  v4 = v3;
  if (os_log_type_enabled(v0, v3))
  {
    v5 = *(_QWORD *)(v1 + 80);
    v6 = (uint8_t *)sub_100165DA4(12);
    v7 = (_QWORD *)sub_100165DA4(8);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v1 + 16) = v8;
    sub_100199A34(v1 + 16);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    sub_100165E04((void *)&_mh_execute_header, v0, (os_log_type_t)v4, "Failed to fetch deny list: %@", v6);
    v9 = sub_100161BD0(&qword_100315A10);
    sub_100165DFC((uint64_t)v7, v10, v9);
    sub_100165D98((uint64_t)v7);
    sub_100165D98((uint64_t)v6);
  }
  else
  {
    sub_10016D1B4();
    sub_10016D1B4();
  }

  sub_100199A24();
  if (qword_100314910 != -1)
    swift_once(&qword_100314910, sub_100196D7C);
  v11 = (id)qword_10031B920;
  sub_100199A98();
  sub_100176CDC();
  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  sub_10016D2A8();
  return sub_100199924(v4, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100198234(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100315F6C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100198294;
  return sub_100197EB0();
}

uint64_t sub_100198294(void *a1)
{
  uint64_t (**v1)(void);
  void (**v3)(_QWORD, _QWORD);
  void *v4;

  v3 = (void (**)(_QWORD, _QWORD))*((_QWORD *)*v1 + 3);
  v4 = (void *)*((_QWORD *)*v1 + 2);
  sub_100165DBC();

  ((void (**)(_QWORD, void *))v3)[2](v3, a1);
  _Block_release(v3);

  return v1[1]();
}

void sub_100198324(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  id v10;

  v8 = _Block_copy(aBlock);
  v9 = sub_100163AE8(a4, 32);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = a1;
  v10 = a1;
  sub_1001C15C4(a5, v9);
}

uint64_t sub_10019837C(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100315D0C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1001983DC;
  return FriendSuggestionDenier.deleteAll()();
}

uint64_t sub_1001983DC()
{
  uint64_t (**v0)(void);
  void (**v1)(_QWORD);
  void *v2;

  v1 = (void (**)(_QWORD))*((_QWORD *)*v0 + 3);
  v2 = (void *)*((_QWORD *)*v0 + 2);
  sub_100165DBC();

  v1[2](v1);
  _Block_release(v1);
  return sub_100165E20(v0[1]);
}

uint64_t sub_100198430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  v7 = type metadata accessor for Logger(0);
  v6[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[8] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[9] = swift_task_alloc(v9);
  v6[10] = swift_task_alloc(v9);
  v10 = type metadata accessor for Date(0);
  v6[11] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[12] = v11;
  v6[13] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001984CC, 0, 0);
}

uint64_t sub_1001984CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1[13];
  v3 = v1[4];
  static Date.now.getter(a1);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v2;
  v1[14] = sub_100194CD4((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1001993BC, v4, v3);
  v1[15] = 0;
  swift_task_dealloc(v4);
  v5 = sub_1001999FC();
  sub_1001942D8(&qword_100315D10, (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
  dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
  sub_100199A80();
  sub_100199AB8();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_10019858C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[15];
  sub_100196660(v0[14]);
  v0[16] = v1;
  swift_bridgeObjectRelease(v0[14], v2);
  sub_10016CFA0();
  return sub_10016CF14();
}

uint64_t sub_1001985E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = sub_100199A44();
  v3 = (void *)Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter(v3);
  if (sub_100194B48(v4))
  {
    v5 = (_WORD *)sub_100165DA4(2);
    sub_100199AA4(v5);
    sub_100194A14((void *)&_mh_execute_header, v6, v7, "Clearing legacy denier after successfully importing from it");
    sub_100165D98(v0);
  }
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(void **)(v1 + 48);

  sub_100181684(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  objc_msgSend(v10, "clearFriendSuggestionsDenyList");
  sub_100199988();
  sub_10016D2A8();
  sub_100180C98();
  swift_task_dealloc(v8);
  return sub_100180D38(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10019868C(uint64_t a1)
{
  uint8_t *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(NSObject **)(v2 + 128);
  static GKLog.general.getter(a1);
  sub_1001949F0();
  v4 = sub_1001949F0();
  sub_100199AB0(v4);
  v5 = sub_1001999B8();
  if (os_log_type_enabled(v3, v5))
  {
    v6 = *(_QWORD *)(v2 + 128);
    v1 = (uint8_t *)sub_100165DA4(12);
    v7 = (_QWORD *)sub_100165DA4(8);
    *(_DWORD *)v1 = 138412290;
    swift_errorRetain(v6);
    v8 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v2 + 24) = v8;
    sub_100199A34(v2 + 24);
    *v7 = v8;
    sub_10016D1B4();
    sub_10016D1B4();
    sub_100165E04((void *)&_mh_execute_header, v3, v5, "Failed to import denied contact IDs: %@", v1);
    v9 = sub_100161BD0(&qword_100315A10);
    sub_100165DFC((uint64_t)v7, v10, v9);
    sub_100165D98((uint64_t)v7);
    sub_100165D98((uint64_t)v1);

    sub_10016D1B4();
  }
  else
  {
    sub_10016D1B4();
    sub_10016D1B4();
    sub_10016D1B4();

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 64) + 8))(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 56));
  sub_100199988();
  sub_10016D2A8();
  sub_100180C98();
  swift_task_dealloc(v1);
  return sub_100165E20(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t *sub_1001987E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *result;
  uint64_t v14;

  v6 = type metadata accessor for Date(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v9 = a1[1];
  (*(void (**)(char *, uint64_t))(v11 + 16))(v8, a2);
  v12 = type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  swift_bridgeObjectRetain(v9);
  result = sub_10019573C(0, v10, v9, (uint64_t)v8);
  *a3 = result;
  return result;
}

Swift::Int sub_1001988AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  sub_1001942D8(&qword_100315F28, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

void (*sub_10019891C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_100189A80((uint64_t)v3);
  return sub_100198968;
}

void sub_100198968(uint64_t *a1, char a2)
{
  uint64_t v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_1001923C0(*a1, v2 + 40);
    sub_100189AC8((__int128 *)(v2 + 40));
    sub_100161FE0((_QWORD *)v2);
  }
  else
  {
    sub_100189AC8((__int128 *)*a1);
  }
  free((void *)v2);
}

Swift::Int sub_1001989CC()
{
  return sub_1001988AC();
}

uint64_t sub_1001989EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_100198A44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100195334();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100198A6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *a2;
  sub_1001942D8(&qword_100315F40, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_100198AC0(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned __int8 v20;
  uint64_t v21;

  v14 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100199134(a1, (uint64_t)v16);
  v17 = type metadata accessor for TaskPriority(0);
  v18 = sub_10016445C((uint64_t)v16, 1, v17);
  if ((_DWORD)v18 == 1)
  {
    sub_10016CBEC((uint64_t)v16, &qword_100314CE8);
    result = 0;
    if ((a2 & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    v20 = TaskPriority.rawValue.getter(v18);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    result = v20;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a3 & 1) != 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  result |= 0x100uLL;
  if ((a3 & 1) != 0)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  result |= 0x800uLL;
  if ((a5 & 1) != 0)
LABEL_6:
    result |= 0x1000uLL;
LABEL_7:
  if ((a6 & 1) != 0)
    result |= 0x2000uLL;
  if ((a7 & 1) != 0)
    return result | 0x4000;
  return result;
}

uint64_t sub_100198BF8()
{
  return type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(0);
}

uint64_t type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion(uint64_t a1)
{
  uint64_t result;

  result = qword_100315D48;
  if (!qword_100315D48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeniedSuggestionSchemaV1.DeniedSuggestion);
  return result;
}

uint64_t sub_100198C38(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = "(";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for FriendSuggestionDenyList()
{
  return objc_opt_self(GKFriendSuggestionDenyList);
}

uint64_t type metadata accessor for FriendSuggestionDenier()
{
  return objc_opt_self(GKFriendSuggestionDenier);
}

ValueMetadata *type metadata accessor for DeniedSuggestionSchemaV1()
{
  return &type metadata for DeniedSuggestionSchemaV1;
}

ValueMetadata *type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion._SwiftDataNoType()
{
  return &type metadata for DeniedSuggestionSchemaV1.DeniedSuggestion._SwiftDataNoType;
}

void sub_100198D20()
{
  sub_1001942D8(&qword_100315F18, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
}

void sub_100198D4C()
{
  sub_1001942D8(&qword_100315F20, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
}

void sub_100198D78()
{
  sub_1001942D8(&qword_100315F28, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
}

void sub_100198DA4()
{
  sub_1001942D8(&qword_100315F30, type metadata accessor for DeniedSuggestionSchemaV1.DeniedSuggestion);
}

void sub_100198DD0()
{
  sub_1001942D8(&qword_100315D10, (uint64_t (*)(uint64_t))type metadata accessor for FriendSuggestionDenierStorage);
}

void sub_100198DFC()
{
  sub_1001954E0();
  sub_10016219C();
}

void sub_100198E18(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_100195334();
  a1[1] = v2;
  sub_10016219C();
}

void sub_100198E3C(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_100195284();
  a1[1] = v2;
  sub_10016219C();
}

uint64_t sub_100198E64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)swift_task_alloc(dword_100315F4C);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100180F44(v1, (uint64_t)sub_10018839C);
  return sub_100180D74(v2, v3, v4);
}

uint64_t sub_100198EAC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100198ED8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)swift_task_alloc(dword_100315F5C);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100180F44(v1, (uint64_t)sub_10018839C);
  return sub_100180D74(v2, v3, v4);
}

uint64_t sub_100198F20()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)sub_100188554();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001883D4(v1, (uint64_t)sub_10018839C);
  return sub_1001883C4(v2, v3, v4, v5);
}

unint64_t sub_100198F64()
{
  unint64_t result;

  result = qword_100315F90;
  if (!qword_100315F90)
  {
    result = swift_getWitnessTable(&unk_100233C2C, &type metadata for FriendSuggestionDenierError);
    atomic_store(result, (unint64_t *)&qword_100315F90);
  }
  return result;
}

uint64_t sub_100198FA4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100198FD8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)sub_100188554();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001883D4(v1, (uint64_t)sub_10018839C);
  return sub_1001883C4(v2, v3, v4, v5);
}

uint64_t sub_10019901C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100199048()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100315FBC);
  *(_QWORD *)(v0 + 16) = v1;
  sub_100199A5C(v1);
  return sub_1001974D0();
}

uint64_t sub_1001990A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001990C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)sub_100188554();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100180600;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100316F20 + dword_100316F20))(a1, v4);
}

uint64_t sub_100199134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_100314CE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019917C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_100196274(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

unint64_t sub_100199188()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316010;
  if (!qword_100316010)
  {
    v1 = sub_100161C54(&qword_100316008);
    sub_1001991EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316010);
  }
  return result;
}

unint64_t sub_1001991EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316018;
  if (!qword_100316018)
  {
    v1 = sub_100161C54(&qword_100315FF0);
    sub_100199258();
    sub_100193E58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316018);
  }
  return result;
}

unint64_t sub_100199258()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316020;
  if (!qword_100316020)
  {
    v1 = sub_100161C54(&qword_100315FE8);
    sub_10019404C(&qword_100316028, &qword_100315FE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316020);
  }
  return result;
}

unint64_t sub_1001992D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100314DE8;
  if (!qword_100314DE8)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100314DE8);
  }
  return result;
}

uint64_t sub_100199310()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32), v1);
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10019934C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc(dword_10031603C);
  *(_QWORD *)(v1 + 16) = v5;
  v6 = sub_100199A5C(v5);
  return sub_100198430(v6, v7, v8, v2, v3, v4);
}

uint64_t *sub_1001993BC@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;

  return sub_1001987E8(a1, *(_QWORD *)(v2 + 16), a2);
}

int64_t sub_1001993DC(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1001994C4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

unint64_t sub_100199544()
{
  unint64_t result;

  result = qword_100316048;
  if (!qword_100316048)
  {
    result = swift_getWitnessTable(&unk_100233BFC, &type metadata for DeniedSuggestionMigrationPlan);
    atomic_store(result, (unint64_t *)&qword_100316048);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeniedSuggestionMigrationPlan()
{
  return &type metadata for DeniedSuggestionMigrationPlan;
}

unint64_t destroy for FriendSuggestionDenierError(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  int v4;

  result = *(_QWORD *)(a1 + 8);
  v4 = -1;
  if (result < 0xFFFFFFFF)
    v4 = result;
  if (v4 - 1 < 0)
  {
    swift_bridgeObjectRelease(result, a2);
    return swift_errorRelease(*(_QWORD *)(a1 + 16));
  }
  return result;
}

void _s14GameDaemonCore27FriendSuggestionDenierErrorOwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = a2[1];
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    v5 = a2[2];
    swift_bridgeObjectRetain(v3);
    sub_1001949F0();
    a1[2] = v5;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }
  sub_10016219C();
}

_QWORD *assignWithCopy for FriendSuggestionDenierError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1[1];
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = a1[1];
  v7 = v6 - 1;
  if (a2[1] < 0xFFFFFFFFuLL)
    v5 = a2[1];
  v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *a1 = *a2;
      v13 = a2[1];
      a1[1] = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v4, v14);
      v15 = a1[2];
      v16 = a2[2];
      swift_errorRetain(v16);
      a1[2] = v16;
      swift_errorRelease(v15);
      return a1;
    }
    swift_bridgeObjectRelease(a1[1], a2);
    swift_errorRelease(a1[2]);
    goto LABEL_11;
  }
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    v11 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v11;
    return a1;
  }
  *a1 = *a2;
  v9 = a2[1];
  a1[1] = v9;
  v10 = a2[2];
  swift_bridgeObjectRetain(v9);
  swift_errorRetain(v10);
  a1[2] = v10;
  return a1;
}

__n128 initializeWithTake for FriendSuggestionDenierError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for FriendSuggestionDenierError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = a1[1];
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = a2[1];
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease(v4, a2);
      v9 = a1[2];
      a1[2] = a2[2];
      swift_errorRelease(v9);
      return a1;
    }
    swift_bridgeObjectRelease(v4, a2);
    swift_errorRelease(a1[2]);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for FriendSuggestionDenierError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FriendSuggestionDenierError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_10019987C(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_1001998A0(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FriendSuggestionDenierError()
{
  return &type metadata for FriendSuggestionDenierError;
}

unint64_t sub_1001998E0()
{
  unint64_t result;

  result = qword_100316050;
  if (!qword_100316050)
  {
    result = swift_getWitnessTable("e2\t", &type metadata for DeniedSuggestionSchemaV1);
    atomic_store(result, (unint64_t *)&qword_100316050);
  }
  return result;
}

uint64_t sub_100199924(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10019992C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = a1;
  v2 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v1 + 40) = v2;
  return swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10019994C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 56);
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10019996C(uint64_t a1)
{
  return sub_1001979AC(a1);
}

uint64_t sub_10019997C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100199988()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[13], v0[11]);
}

uint64_t sub_1001999A0()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of Actor.unownedExecutor.getter(v0, v1);
}

uint64_t sub_1001999AC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 64));
}

uint64_t sub_1001999B8()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1001999C0(uint64_t a1)
{
  return swift_task_alloc((*(_QWORD *)(*(_QWORD *)(a1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1001999D4()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t *sub_1001999E0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_10019573C(a1, v3, v1, v2);
}

uint64_t sub_1001999F4()
{
  uint64_t v0;

  return swift_task_alloc(v0);
}

uint64_t sub_1001999FC()
{
  return type metadata accessor for FriendSuggestionDenierStorage();
}

uint64_t sub_100199A04()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100199A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return type metadata accessor for Date(0);
}

uint64_t sub_100199A24()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[5] + 8))(v0[6], v0[4]);
}

uint64_t sub_100199A34(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a1 + 8);
}

uint64_t sub_100199A44()
{
  return static GKLog.general.getter();
}

uint64_t sub_100199A4C()
{
  return static GKLog.general.getter();
}

uint64_t sub_100199A5C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100199A74()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return type metadata accessor for Logger(0);
}

void sub_100199A8C()
{
  void *v0;

}

uint64_t sub_100199A98()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

_WORD *sub_100199AA4(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100199AB0(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

uint64_t sub_100199AC4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

id MetricsIntBucketer.__allocating_init(buckets:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return MetricsIntBucketer.init(buckets:)(a1);
}

id MetricsIntBucketer.init(buckets:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  objc_class *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  objc_super v10;
  uint64_t v11;

  v2 = v1;
  ObjectType = swift_getObjectType(v2);
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = (objc_class *)ObjectType;
    v11 = a1;
    v6 = v2;
    swift_bridgeObjectRetain(a1);
    sub_100199D58(&v11);
    swift_bridgeObjectRelease(a1, v7);
    if (*(_QWORD *)(v11 + 16))
    {
      v8 = *(_QWORD *)(v11 + 32);
      sub_10019A790(0, 1);
      *(_QWORD *)&v6[OBJC_IVAR___GKMetricsIntBucketer_firstBucket] = v8;
      *(_QWORD *)&v6[OBJC_IVAR___GKMetricsIntBucketer_buckets] = v11;

      v10.receiver = v6;
      v10.super_class = v5;
      return objc_msgSendSuper2(&v10, "init");
    }
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001FLL, 0x8000000100299BF0, "GameDaemonCore/MetricsIntBucketer.swift", 39, 2, 20, 0);
  __break(1u);
  result = (id)swift_release(v11);
  __break(1u);
  return result;
}

Swift::Int __swiftcall MetricsIntBucketer.clamp(_:)(Swift::Int a1)
{
  uint64_t v1;
  Swift::Int v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v7;
  Swift::Int *v8;
  uint64_t i;
  Swift::Int v10;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___GKMetricsIntBucketer_firstBucket);
  if (v2 < a1)
  {
    v3 = *(_QWORD **)(v1 + OBJC_IVAR___GKMetricsIntBucketer_buckets);
    v4 = v3[2];
    if (v4)
    {
      v5 = v3[4];
      if (v5 == a1)
        return a1;
      if (v5 > a1)
        return v2;
      if (v4 == 1)
        return v5;
      v7 = v3[5];
      if (v7 == a1)
      {
        return a1;
      }
      else
      {
        v8 = v3 + 6;
        for (i = v4 - 2; ; --i)
        {
          v2 = v5;
          if (v7 > a1)
            break;
          v5 = v7;
          if (!i)
            return v5;
          v10 = *v8++;
          v7 = v10;
          if (v10 == a1)
            return a1;
        }
      }
    }
  }
  return v2;
}

void MetricsIntBucketer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.MetricsIntBucketer", 33, "init()", 6, 0);
  __break(1u);
}

void sub_100199D58(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1001942C4(v2);
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_100199DC0(v5);
  *a1 = v2;
}

void sub_100199DC0(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  char *v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t *v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  Swift::Int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_10019A390(0, v3, 1, a1);
      return;
    }
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  v5 = v4;
  sub_1001723C0(v3 / 2);
  v90 = a1;
  v91 = v7;
  v95 = v6;
  v93 = v3;
  if (v3 > 0)
  {
    v8 = 0;
    v9 = *a1;
    v89 = *a1 - 8;
    v10 = (char *)_swiftEmptyArrayStorage;
    v92 = v5;
    v94 = *a1;
    while (1)
    {
      v11 = v8++;
      if (v8 < v3)
      {
        v12 = *(_QWORD *)(v9 + 8 * v8);
        v13 = *(_QWORD *)(v9 + 8 * v11);
        v8 = v11 + 2;
        if (v11 + 2 < v3)
        {
          v14 = v12;
          while (1)
          {
            v15 = *(_QWORD *)(v9 + 8 * v8);
            if (v12 < v13 == v15 >= v14)
              break;
            ++v8;
            v14 = v15;
            if (v8 >= v3)
            {
              v8 = v3;
              break;
            }
          }
        }
        if (v12 < v13)
        {
          if (v8 < v11)
            goto LABEL_127;
          if (v11 < v8)
          {
            v16 = v8 - 1;
            v17 = v11;
            do
            {
              if (v17 != v16)
              {
                if (!v9)
                  goto LABEL_133;
                v18 = *(_QWORD *)(v9 + 8 * v17);
                *(_QWORD *)(v9 + 8 * v17) = *(_QWORD *)(v9 + 8 * v16);
                *(_QWORD *)(v9 + 8 * v16) = v18;
              }
              v58 = ++v17 < v16--;
            }
            while (v58);
          }
        }
      }
      if (v8 < v3)
      {
        if (__OFSUB__(v8, v11))
          goto LABEL_124;
        if (v8 - v11 < v5)
        {
          v19 = v11 + v5;
          if (__OFADD__(v11, v5))
            goto LABEL_128;
          if (v19 >= v3)
            v19 = v3;
          if (v19 < v11)
          {
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            return;
          }
          if (v8 != v19)
          {
            v20 = (uint64_t *)(v89 + 8 * v8);
            do
            {
              v21 = *(_QWORD *)(v9 + 8 * v8);
              v22 = v11;
              v23 = v20;
              do
              {
                v24 = *v23;
                if (v21 >= *v23)
                  break;
                if (!v9)
                  goto LABEL_131;
                *v23 = v21;
                v23[1] = v24;
                --v23;
                ++v22;
              }
              while (v8 != v22);
              ++v8;
              ++v20;
            }
            while (v8 != v19);
            v8 = v19;
          }
        }
      }
      if (v8 < v11)
        goto LABEL_123;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_100193208(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v10 = v78;
      }
      v26 = *((_QWORD *)v10 + 2);
      v25 = *((_QWORD *)v10 + 3);
      v27 = v26 + 1;
      v9 = v94;
      if (v26 >= v25 >> 1)
      {
        sub_100193208(v25 > 1, v26 + 1, 1, v10);
        v9 = v94;
        v10 = v79;
      }
      *((_QWORD *)v10 + 2) = v27;
      v28 = v10 + 32;
      v29 = &v10[16 * v26 + 32];
      *(_QWORD *)v29 = v11;
      *((_QWORD *)v29 + 1) = v8;
      if (v26)
      {
        while (1)
        {
          v30 = v27 - 1;
          if (v27 >= 4)
          {
            v35 = &v28[2 * v27];
            v36 = *(v35 - 8);
            v37 = *(v35 - 7);
            v41 = __OFSUB__(v37, v36);
            v38 = v37 - v36;
            if (v41)
              goto LABEL_108;
            v40 = *(v35 - 6);
            v39 = *(v35 - 5);
            v41 = __OFSUB__(v39, v40);
            v33 = v39 - v40;
            v34 = v41;
            if (v41)
              goto LABEL_109;
            v42 = v27 - 2;
            v43 = &v28[2 * v27 - 4];
            v45 = *v43;
            v44 = v43[1];
            v41 = __OFSUB__(v44, v45);
            v46 = v44 - v45;
            if (v41)
              goto LABEL_110;
            v41 = __OFADD__(v33, v46);
            v47 = v33 + v46;
            if (v41)
              goto LABEL_112;
            if (v47 >= v38)
            {
              v65 = &v28[2 * v30];
              v67 = *v65;
              v66 = v65[1];
              v41 = __OFSUB__(v66, v67);
              v68 = v66 - v67;
              if (v41)
                goto LABEL_118;
              v58 = v33 < v68;
              goto LABEL_70;
            }
          }
          else
          {
            if (v27 != 3)
            {
              v59 = *((_QWORD *)v10 + 4);
              v60 = *((_QWORD *)v10 + 5);
              v41 = __OFSUB__(v60, v59);
              v52 = v60 - v59;
              v53 = v41;
              goto LABEL_64;
            }
            v32 = *((_QWORD *)v10 + 4);
            v31 = *((_QWORD *)v10 + 5);
            v41 = __OFSUB__(v31, v32);
            v33 = v31 - v32;
            v34 = v41;
          }
          if ((v34 & 1) != 0)
            goto LABEL_111;
          v42 = v27 - 2;
          v48 = &v28[2 * v27 - 4];
          v50 = *v48;
          v49 = v48[1];
          v51 = __OFSUB__(v49, v50);
          v52 = v49 - v50;
          v53 = v51;
          if (v51)
            goto LABEL_113;
          v54 = &v28[2 * v30];
          v56 = *v54;
          v55 = v54[1];
          v41 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          if (v41)
            goto LABEL_115;
          if (__OFADD__(v52, v57))
            goto LABEL_117;
          if (v52 + v57 >= v33)
          {
            v58 = v33 < v57;
LABEL_70:
            if (v58)
              v30 = v42;
            goto LABEL_72;
          }
LABEL_64:
          if ((v53 & 1) != 0)
            goto LABEL_114;
          v61 = &v28[2 * v30];
          v63 = *v61;
          v62 = v61[1];
          v41 = __OFSUB__(v62, v63);
          v64 = v62 - v63;
          if (v41)
            goto LABEL_116;
          if (v64 < v52)
            goto LABEL_81;
LABEL_72:
          v69 = v10;
          v70 = v30 - 1;
          if (v30 - 1 >= v27)
          {
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          if (!v9)
            goto LABEL_132;
          v71 = &v28[2 * v70];
          v72 = *v71;
          v73 = v28;
          v74 = &v28[2 * v30];
          v75 = v74[1];
          sub_10019A3E8((char *)(v9 + 8 * *v71), (char *)(v9 + 8 * *v74), v9 + 8 * v75, v95);
          if (v1)
          {
            v10 = v69;
LABEL_87:
            swift_bridgeObjectRelease(v10, v76);
            if (v93 >= -1)
            {
              *(_QWORD *)(v91 + 16) = 0;
              swift_bridgeObjectRelease(v91, v80);
              return;
            }
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
            goto LABEL_129;
          }
          if (v75 < v72)
            goto LABEL_105;
          if (v30 > *((_QWORD *)v69 + 2))
            goto LABEL_106;
          *v71 = v72;
          v73[2 * v70 + 1] = v75;
          v77 = *((_QWORD *)v69 + 2);
          if (v30 >= v77)
            goto LABEL_107;
          v10 = v69;
          v27 = v77 - 1;
          memmove(v74, v74 + 2, 16 * (v77 - 1 - v30));
          v28 = v73;
          *((_QWORD *)v69 + 2) = v77 - 1;
          v9 = v94;
          if (v77 <= 2)
            goto LABEL_81;
        }
      }
      v27 = 1;
LABEL_81:
      v5 = v92;
      v3 = v93;
      if (v8 >= v93)
        goto LABEL_91;
    }
  }
  v10 = (char *)_swiftEmptyArrayStorage;
  v27 = _swiftEmptyArrayStorage[2];
LABEL_91:
  if (v27 >= 2)
  {
    v81 = *v90;
    while (1)
    {
      v82 = v27 - 2;
      if (v27 < 2)
        break;
      if (!v81)
        goto LABEL_134;
      v83 = *(_QWORD *)&v10[16 * v82 + 32];
      v84 = *(_QWORD *)&v10[16 * v27 + 24];
      sub_10019A3E8((char *)(v81 + 8 * v83), (char *)(v81 + 8 * *(_QWORD *)&v10[16 * v27 + 16]), v81 + 8 * v84, v95);
      if (v1)
        goto LABEL_87;
      if (v84 < v83)
        goto LABEL_120;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_1001932EC((uint64_t)v10);
        v10 = v87;
      }
      if (v82 >= *((_QWORD *)v10 + 2))
        goto LABEL_121;
      v85 = &v10[16 * v82 + 32];
      *(_QWORD *)v85 = v83;
      *((_QWORD *)v85 + 1) = v84;
      v86 = *((_QWORD *)v10 + 2);
      if (v27 > v86)
        goto LABEL_122;
      memmove(&v10[16 * v27 + 16], &v10[16 * v27 + 32], 16 * (v86 - v27));
      *((_QWORD *)v10 + 2) = v86 - 1;
      v27 = v86 - 1;
      if (v86 <= 2)
        goto LABEL_102;
    }
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
LABEL_102:
  swift_bridgeObjectRelease(v10, v6);
  if (v93 < -1)
    goto LABEL_130;
  *(_QWORD *)(v91 + 16) = 0;
  swift_bridgeObjectRelease(v91, v88);
}

uint64_t sub_10019A390(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 8 * a3);
      v7 = result;
      v8 = (uint64_t *)v5;
      do
      {
        v9 = *v8;
        if (v6 >= *v8)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        *v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 8;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_10019A3E8(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  BOOL v15;
  char *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    sub_100172DC4(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = &v4[8 * v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (char *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 8;
      v20 = *((_QWORD *)v6 - 1);
      if (*((_QWORD *)v12 - 1) >= v20)
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v21 = v19 != v6 || v18 >= v6;
        v6 -= 8;
        if (!v21)
          goto LABEL_35;
      }
      *(_QWORD *)v18 = v20;
LABEL_35:
      v18 -= 8;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_39;
    }
  }
  sub_100172DC4(a1, (a2 - a1) / 8, a4);
  v12 = &v4[8 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 < *(_QWORD *)v4)
        break;
      v14 = *(_QWORD *)v4;
      v15 = v7 == v4;
      v4 += 8;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 8;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v15 = v7 == v6;
    v6 += 8;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *(_QWORD *)v7 = v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  sub_100172DC4(v4, (v12 - v4) / 8, v6);
  return 1;
}

uint64_t sub_10019A560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v7 < 0)
    v21 = v7;
  else
    v21 = v7 & 0xFFFFFFFFFFFFFF8;
  sub_10016D21C();
  v9 = _CocoaArrayWrapper.endIndex.getter(v21);
  sub_10016D010(v9, v22);
LABEL_4:
  if (v9 < v5)
  {
    __break(1u);
    goto LABEL_35;
  }
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_37:
  if (v7 < 0)
    v23 = v7;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  sub_10016D21C();
  v10 = _CocoaArrayWrapper.endIndex.getter(v23);
  sub_10016D010(v10, v24);
LABEL_9:
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
  {
    __break(1u);
LABEL_42:
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    sub_10016D21C();
    v14 = _CocoaArrayWrapper.endIndex.getter(v25);
    sub_10016D010(v14, v26);
    goto LABEL_17;
  }
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_20;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_42;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
  if (v14 <= v11)
    v14 = v11;
  sub_10016D21C();
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4, v15);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_20:
  v16 = (_QWORD *)(v13 + 32 + 8 * v6);
  v17 = type metadata accessor for NWProtocolOptions(0);
  result = swift_arrayDestroy(v16, v9, v17);
  if (!v8)
  {
LABEL_28:
    *v16 = v3;
    return specialized Array._endMutation()(result);
  }
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v27 = v7;
    else
      v27 = v13;
    sub_10016D21C();
    v19 = _CocoaArrayWrapper.endIndex.getter(v27);
    sub_10016D010(v19, v28);
  }
  else
  {
    v19 = *(_QWORD *)(v13 + 16);
  }
  if (__OFSUB__(v19, v5))
  {
    __break(1u);
  }
  else
  {
    result = sub_100172C58(v13 + 32 + 8 * v5, v19 - v5, v16 + 1);
    if (!((unint64_t)v7 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      goto LABEL_26;
    }
  }
  if (v7 < 0)
    v29 = v7;
  else
    v29 = v13;
  sub_10016D21C();
  v20 = _CocoaArrayWrapper.endIndex.getter(v29);
  result = sub_10016D010(v20, v30);
LABEL_26:
  if (!__OFADD__(v20, v8))
  {
    *(_QWORD *)(v13 + 16) = v20 + v8;
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

void sub_10019A790(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_17;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    sub_1001725DC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    v4 = v12;
    if (!v8)
      goto LABEL_17;
  }
  v13 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v13, a2))
    goto LABEL_23;
  sub_100172DC4((char *)(v4 + 32 + 8 * a2), v13 - a2, (char *)(v4 + 32 + 8 * a1));
  v14 = *(_QWORD *)(v4 + 16);
  v15 = __OFADD__(v14, v8);
  v16 = v14 + v8;
  if (!v15)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_17:
    *v2 = v4;
    return;
  }
LABEL_24:
  __break(1u);
}

uint64_t type metadata accessor for MetricsIntBucketer()
{
  return objc_opt_self(GKMetricsIntBucketer);
}

uint64_t sub_10019A89C(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1001726B4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v14 + v15 * v6;
  result = swift_arrayDestroy(v16, v7, v12);
  if (!v7)
    goto LABEL_16;
  v17 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v17, a2))
    goto LABEL_22;
  result = sub_100172EA0(v14 + v15 * a2, v17 - a2, v16);
  v18 = *(_QWORD *)(v4 + 16);
  v19 = __OFADD__(v18, v8);
  v20 = v18 - v7;
  if (!v19)
  {
    *(_QWORD *)(v4 + 16) = v20;
LABEL_16:
    *v2 = v4;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10019A9B0()
{
  _QWORD *v0;
  os_log_type_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v61;
  uint64_t v62;
  uint64_t (*v63)(char *, uint64_t);
  uint64_t v64;
  unint64_t v65;

  v2 = v0;
  v3 = sub_100180D8C();
  v63 = *(uint64_t (**)(char *, uint64_t))(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v61 - v8;
  static os_log_type_t.info.getter(v7);
  sub_10019E01C();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(v65, v10);
  v64 = 0xD00000000000001ELL;
  v65 = 0x8000000100299FA0;
  v11._countAndFlagsBits = sub_10019B4F0();
  String.append(_:)(v11);
  sub_10016D5D0(v12, v13);
  v15 = v64;
  v14 = v65;
  sub_100181310();
  sub_100170814(v14);
  v16 = sub_100181308();
  if (sub_100180FA4(v16))
  {
    v62 = v3;
    v17 = (uint8_t *)sub_100165DA4(12);
    v18 = sub_100165DA4(32);
    v61 = v6;
    v19 = v18;
    v64 = v18;
    *(_DWORD *)v17 = 136315138;
    sub_10016D5D8();
    v21 = sub_10019DFD0(v15, v20, &v64);
    v22 = sub_10019DFF8(v21);
    v3 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22, v23);
    sub_100170848(v14);
    sub_100165E04((void *)&_mh_execute_header, v16, v1, "Nearby - %s", v17);
    sub_100165DFC(v19, v24, (uint64_t)&type metadata for Any + 8);
    v25 = v19;
    v6 = v61;
    sub_100165D98(v25);
    sub_100165D98((uint64_t)v17);

  }
  else
  {

    sub_10017081C(v14);
  }
  v26 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v63 + 1);
  v27 = v26(v9, v3);
  sub_10016D5D0(v27, v28);
  if (v2[15])
  {
    sub_100165EAC();
    Task.cancel()();
    sub_100165E88();
  }
  v29 = v2[4];
  if (v29)
  {
    v63 = v26;
    v30 = swift_retain(v29);
    static os_log_type_t.info.getter(v30);
    sub_10019E01C();
    _StringGuts.grow(_:)(24);
    v32 = swift_bridgeObjectRelease(v65, v31);
    v64 = 0xD000000000000016;
    v65 = 0x8000000100299FC0;
    v39._countAndFlagsBits = NWConnection.debugDescription.getter(v32, v33, v34, v35, v36, v37, v38);
    String.append(_:)(v39);
    v42 = sub_10016D110(v40, v41);
    v44 = v64;
    v43 = v65;
    static GKLog.match.getter(v42);
    v45 = sub_100170814(v43);
    v46 = Logger.logObject.getter(v45);
    v47 = v26;
    if (sub_100180FA4(v46))
    {
      v61 = v6;
      v48 = (uint8_t *)sub_100165DA4(12);
      v49 = sub_100165DA4(32);
      v64 = v49;
      v62 = v3;
      *(_DWORD *)v48 = 136315138;
      sub_10016D5D8();
      v51 = sub_10019DFD0(v44, v50, &v64);
      v52 = sub_10019DFF8(v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, v53);
      sub_100170848(v43);
      sub_100165E04((void *)&_mh_execute_header, v46, v47, "Nearby - %s", v48);
      sub_100165DFC(v49, v54, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v49);
      sub_100165D98((uint64_t)v48);

      v55 = v61;
      v56 = v62;
    }
    else
    {

      sub_10017081C(v43);
      v55 = v6;
      v56 = v3;
    }
    v58 = v63(v55, v56);
    sub_10016D5D0(v58, v59);
    NWConnection.forceCancel()();
    swift_release(v29);
    v57 = v2[4];
  }
  else
  {
    v57 = 0;
  }
  v2[4] = 0;
  swift_release(v57);
  v2[3] = 0;
  return swift_unknownObjectWeakAssign(v2 + 2, 0);
}

uint64_t sub_10019AD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[10] = a5;
  v6[11] = v5;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  v7 = sub_100180D8C();
  v6[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[13] = v8;
  v6[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10016CFA0();
  return sub_10016D26C(v9, v10, v11);
}

uint64_t sub_10019ADB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 32);
  *(_QWORD *)(v0 + 120) = v1;
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 64);
    v7 = *(_OWORD *)(v0 + 48);
    v3 = swift_task_alloc(48);
    *(_QWORD *)(v0 + 128) = v3;
    *(_QWORD *)(v3 + 16) = v1;
    *(_OWORD *)(v3 + 24) = v7;
    *(_QWORD *)(v3 + 40) = v2;
    v4 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    sub_100165EAC();
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 136) = v5;
    *v5 = v0;
    v5[1] = sub_10019AE90;
    sub_10016CFA0();
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
  else
  {
    sub_10019DFF0();
    return sub_10019DF74(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_10019AE90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (!v0)
    swift_task_dealloc(*(_QWORD *)(v2 + 128));
  sub_10016CFA0();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_10019AEF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 120));
  sub_10019DFF0();
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10019AF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  void *object;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  sub_100180D94();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  v29 = *(_QWORD *)(v26 + 144);
  v30 = *(void **)(v26 + 80);
  v31 = *(_QWORD *)(v26 + 72);
  v32 = swift_task_dealloc(*(_QWORD *)(v26 + 128));
  v33 = static os_log_type_t.error.getter(v32);
  sub_100181518();
  _StringGuts.grow(_:)(47);
  v34 = a15;
  *(_QWORD *)(v26 + 16) = a14;
  *(_QWORD *)(v26 + 24) = v34;
  sub_100180E44();
  v35._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v35);
  v36._countAndFlagsBits = sub_10019B4F0();
  object = v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(object, v38);
  v39._countAndFlagsBits = 673197344;
  v39._object = (void *)0xE400000000000000;
  String.append(_:)(v39);
  v40._countAndFlagsBits = v31;
  v40._object = v30;
  String.append(_:)(v40);
  sub_100180E44();
  String.append(_:)(v41);
  *(_QWORD *)(v26 + 32) = v29;
  v42 = sub_100161BD0(&qword_100314EA0);
  v43 = _print_unlocked<A, B>(_:_:)(v26 + 32, v26 + 16, v42);
  v44 = *(_QWORD *)(v26 + 16);
  v45 = *(_QWORD *)(v26 + 24);
  static GKLog.match.getter(v43);
  v46 = sub_100170814(v45);
  v47 = Logger.logObject.getter(v46);
  v48 = v33;
  if (sub_100180FA4(v47))
  {
    v65 = *(_QWORD *)(v26 + 120);
    v66 = *(_QWORD *)(v26 + 144);
    v49 = *(_QWORD *)(v26 + 104);
    v63 = *(_QWORD *)(v26 + 96);
    v64 = *(_QWORD *)(v26 + 112);
    v50 = (uint8_t *)sub_100165DA4(12);
    v51 = sub_100165DA4(32);
    a14 = v51;
    *(_DWORD *)v50 = 136315138;
    sub_1001621A4();
    *(_QWORD *)(v26 + 40) = sub_100180E10(v44, v52, &a14);
    sub_100180E08(v26 + 40, v26 + 48);
    sub_100170848(v45);
    sub_100165E04((void *)&_mh_execute_header, v47, v48, "Nearby - %s", v50);
    sub_100165DFC(v51, v53, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v51);
    sub_100165D98((uint64_t)v50);

    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v64, v63);
    v54 = swift_release(v65);
    sub_1001648C4(v54, v55);
    v56 = v66;
  }
  else
  {
    v57 = *(_QWORD *)(v26 + 144);
    v58 = *(_QWORD *)(v26 + 120);
    v59 = *(_QWORD *)(v26 + 104);
    sub_10017081C(v45);

    sub_1001810C4(*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
    v60 = swift_release(v58);
    sub_1001648C4(v60, v61);
    v56 = v57;
  }
  swift_errorRelease(v56);
  sub_10019DFF0();
  return sub_100180C68(*(uint64_t (**)(void))(v26 + 8));
}

uint64_t sub_10019B178()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[4] = v0;
  v2 = sub_100180D8C();
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[7] = swift_task_alloc(v4);
  v1[8] = swift_task_alloc(v4);
  sub_10016CFA0();
  return sub_10016D26C(v5, v6, v7);
}

#error "10019B410: call analysis failed (funcsize=188)"

unint64_t sub_10019B4F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v1 = 7104878;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease(0xE000000000000000, v2);
  v30 = 0xD00000000000001DLL;
  v31 = 0x8000000100299CF0;
  if (*(_QWORD *)(v0 + 32))
  {
    v3 = sub_100165EAC();
    v10 = NWConnection.debugDescription.getter(v3, v4, v5, v6, v7, v8, v9);
    v12 = v11;
    sub_100165E88();
    v28 = v10;
    v29 = v12;
    v13 = String.init<A>(reflecting:)(&v28, &type metadata for String);
    v15 = v14;
  }
  else
  {
    v15 = 0xE300000000000000;
    v13 = 7104878;
  }
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease(v15, v17);
  v18._countAndFlagsBits = 0x6167656C6564202CLL;
  v18._object = (void *)0xEC000000203A6574;
  String.append(_:)(v18);
  v19 = sub_10019E00C();
  if (v19)
  {
    v20 = *(_QWORD *)(v0 + 24);
    v28 = v19;
    v29 = v20;
    v21 = sub_100161BD0(&qword_100316150);
    v1 = String.init<A>(reflecting:)(&v28, v21);
    v23 = v22;
  }
  else
  {
    v23 = (void *)0xE300000000000000;
  }
  v24._countAndFlagsBits = v1;
  v24._object = v23;
  String.append(_:)(v24);
  sub_10016D110(v25, v26);
  return v30;
}

uint64_t sub_10019B630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)a1;
  *(_QWORD *)(v2 + 40) = v3;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(v2 + 104) = *(_QWORD *)(a1 + 72);
  sub_10016CFA0();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_10019B67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v4 = *(_OWORD *)(v0 + 64);
  v3 = *(_OWORD *)(v0 + 80);
  v5 = *(_OWORD *)(v0 + 48);
  v7 = *(_QWORD **)(v0 + 16);
  v6 = *(_QWORD **)(v0 + 24);
  v8 = v6[5];
  v9 = v6[6];
  v10 = v6[7];
  v11 = v6[8];
  v12 = v6[9];
  v13 = v6[10];
  v14 = v6[11];
  v15 = v6[12];
  v16 = v6[13];
  v17 = v6[14];
  *(_OWORD *)(v6 + 5) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v6 + 7) = v5;
  *(_OWORD *)(v6 + 9) = v4;
  *(_OWORD *)(v6 + 11) = v3;
  v6[13] = v2;
  v6[14] = v1;
  sub_100180700(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
  sub_10019DB08(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019B6EC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[9] = a1;
  v2[10] = v1;
  v3 = type metadata accessor for NWError(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100161BD0(&qword_100314CE8);
  v2[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v2[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[16] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v8);
  v2[18] = swift_task_alloc(v8);
  v2[19] = swift_task_alloc(v8);
  v9 = type metadata accessor for NWConnection.State(0);
  v2[20] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[21] = v10;
  v2[22] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10019B7DC, 0, 0);
}

#error "10019BA84: call analysis failed (funcsize=415)"

uint64_t sub_10019BE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_100194A00();
  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10019BED4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 184));
  sub_10019DF80();
  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  sub_1001810BC();
  return sub_10019DF74(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10019BF24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_100194A00();
  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10019BF5C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 184));
  sub_100194C1C(*(_QWORD *)(v0 + 96));
  sub_10019DF80();
  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  sub_1001810BC();
  return sub_10019DF74(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10019BFB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_100194A00();
  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10019BFF0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1003161A4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10019DF6C;
  return sub_10019C038();
}

uint64_t sub_10019C038()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1[15] = v0;
  v2 = sub_100161BD0(&qword_1003161A8);
  v1[16] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[17] = v3;
  v1[18] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100161BD0(&qword_1003161B0);
  v1[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[20] = v5;
  v1[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v1[22] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[23] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[24] = swift_task_alloc(v8);
  v1[25] = swift_task_alloc(v8);
  return swift_task_switch(sub_10019C100, 0, 0);
}

#error "10019C148: call analysis failed (funcsize=140)"

uint64_t sub_10019C344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10019C378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  void *object;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  BOOL v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;

  sub_100180D94();
  a25 = v27;
  a26 = v28;
  a24 = v26;
  v29 = *(_QWORD *)(v26 + 24);
  *(_QWORD *)(v26 + 240) = *(_QWORD *)(v26 + 16);
  *(_QWORD *)(v26 + 248) = v29;
  v30 = *(_QWORD *)(v26 + 32);
  v31 = *(_QWORD *)(v26 + 40);
  *(_QWORD *)(v26 + 256) = v30;
  *(_QWORD *)(v26 + 264) = v31;
  if (v30 == 1)
  {
    sub_100194C1C(*(_QWORD *)(v26 + 160));
    sub_100165E88();
    swift_task_dealloc(*(_QWORD *)(v26 + 200));
    sub_10016D2A8();
    sub_100180C98();
    sub_100180D6C();
    return sub_100180C68(*(uint64_t (**)(void))(v26 + 8));
  }
  else
  {
    if (v31)
    {
      v33 = swift_errorRetain(v31);
      v60 = static os_log_type_t.error.getter(v33);
      *(_QWORD *)(v26 + 88) = 0;
      *(_QWORD *)(v26 + 96) = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v34 = *(_QWORD *)(v26 + 96);
      *(_QWORD *)(v26 + 72) = *(_QWORD *)(v26 + 88);
      *(_QWORD *)(v26 + 80) = v34;
      sub_100180E44();
      v35._countAndFlagsBits = 0xD000000000000033;
      String.append(_:)(v35);
      swift_getErrorValue(v31, v26 + 104, v26 + 48);
      v36._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v26 + 56), *(_QWORD *)(v26 + 64));
      object = v36._object;
      String.append(_:)(v36);
      v39 = swift_bridgeObjectRelease(object, v38);
      v40 = *(_QWORD *)(v26 + 80);
      v58 = *(_QWORD *)(v26 + 72);
      static GKLog.match.getter(v39);
      v41 = sub_100170814(v40);
      v42 = Logger.logObject.getter(v41);
      v43 = v60;
      v44 = sub_100180FA4(v42);
      v45 = *(_QWORD *)(v26 + 192);
      v61 = *(_QWORD *)(v26 + 176);
      if (v44)
      {
        v46 = (_QWORD *)(v26 + 216);
        v57 = *(void (**)(uint64_t, uint64_t))(v26 + 216);
        v59 = v42;
        v47 = sub_100165DA4(12);
        v56 = v45;
        v48 = sub_100165DA4(32);
        a15 = v48;
        *(_DWORD *)v47 = 136315138;
        swift_bridgeObjectRetain(v40);
        *(_QWORD *)(v47 + 4) = sub_10016FE60(v58, v40, &a15);
        sub_100170848(v40);
        sub_100165E04((void *)&_mh_execute_header, v59, v43, "Nearby - %s", (uint8_t *)v47);
        sub_100165DFC(v48, v49, (uint64_t)&type metadata for Any + 8);
        sub_100165D98(v48);
        sub_100165D98(v47);

        v57(v56, v61);
      }
      else
      {
        v46 = (_QWORD *)(v26 + 224);
        v51 = *(void (**)(uint64_t, uint64_t))(v26 + 224);
        sub_10017081C(v40);

        v51(v45, v61);
      }
      swift_bridgeObjectRelease(v40, v50);
      swift_errorRelease(v31);
    }
    else
    {
      v46 = (_QWORD *)(v26 + 224);
    }
    *(_QWORD *)(v26 + 272) = *v46;
    v52 = (_QWORD *)swift_task_alloc(dword_1003161BC);
    *(_QWORD *)(v26 + 280) = v52;
    *v52 = v26;
    v52[1] = sub_10019C5EC;
    sub_100180EB8();
    return sub_10019C848(v53, v54, v55);
  }
}

uint64_t sub_10019C5EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_10019C620()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10019DACC(v0[30], v0[31], v0[32], v0[33]);
  v0[28] = v0[34];
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to AsyncStream.Iterator.next(isolation:) + 1));
  v0[29] = v1;
  *v1 = v0;
  v1[1] = sub_10019C344;
  sub_10016CFA0();
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t sub_10019C694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v18[24];

  v4 = type metadata accessor for NWConnection.State(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v7);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v18, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    v12 = type metadata accessor for TaskPriority(0);
    sub_100161B54((uint64_t)v9, 1, 1, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], a1, v4);
    v13 = *(unsigned __int8 *)(v5 + 80);
    v14 = (v13 + 40) & ~v13;
    v15 = (char *)swift_allocObject(&unk_1002C6D78, v14 + v6, v13 | 7);
    *((_QWORD *)v15 + 2) = 0;
    *((_QWORD *)v15 + 3) = 0;
    *((_QWORD *)v15 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v15[v14], &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v4);
    sub_1001BDE9C();
    return swift_release(v16);
  }
  return result;
}

uint64_t sub_10019C7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_10031618C);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10019DF6C;
  return sub_10019B6EC(a5);
}

uint64_t sub_10019C848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[14] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[15] = swift_task_alloc(v7);
  v4[16] = swift_task_alloc(v7);
  return swift_task_switch(sub_10019C8BC, 0, 0);
}

uint64_t sub_10019C8BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Strong;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = static os_log_type_t.info.getter(a1);
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(0xE000000000000000, v4);
  v33 = 0xD000000000000018;
  v34 = 0x8000000100299F20;
  *(_QWORD *)(v1 + 40) = *(_QWORD *)(v2 + 32);
  v5 = sub_100161BD0(&qword_1003161C0);
  v6._countAndFlagsBits = Optional.debugDescription.getter(v5);
  String.append(_:)(v6);
  sub_1001648C4(v7, v8);
  v10 = v33;
  v9 = v34;
  sub_100181310();
  sub_100170814(v34);
  v11 = sub_100181308();
  if (os_log_type_enabled(v11, v3))
  {
    v12 = *(_QWORD *)(v1 + 112);
    v31 = *(_QWORD *)(v1 + 104);
    v32 = *(_QWORD *)(v1 + 128);
    v13 = (uint8_t *)sub_100165DA4(12);
    v14 = sub_100165DA4(32);
    v33 = v14;
    *(_DWORD *)v13 = 136315138;
    sub_1001621A4();
    *(_QWORD *)(v1 + 64) = sub_100180E10(v10, v15, &v33);
    sub_100180F70(v1 + 64, v1 + 72);
    sub_100170848(v9);
    sub_100165E04((void *)&_mh_execute_header, v11, v3, "Nearby - %s", v13);
    sub_100165DFC(v14, v16, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v14);
    sub_100165D98((uint64_t)v13);

    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    v18 = v17(v32, v31);
  }
  else
  {
    v20 = *(_QWORD *)(v1 + 112);
    sub_10017081C(v34);

    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    v21 = sub_100180E2C();
    v18 = v17(v21, v22);
  }
  sub_1001648C4(v18, v19);
  *(_QWORD *)(v1 + 136) = v17;
  if (*(_QWORD *)(v1 + 88))
  {
    if (qword_1003148F8 != -1)
      swift_once(&qword_1003148F8, sub_100184618);
    v23 = dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)(qword_10031B918);
    *(_QWORD *)(v1 + 144) = v23;
    if (v23)
    {
      v24 = v23;
      v25 = type metadata accessor for NWProtocolFramer.Message(0);
      v26 = swift_dynamicCastClass(v24, v25);
      if (v26)
      {
        v27 = v26;
        Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v1 + 96) + 16);
        *(_QWORD *)(v1 + 152) = Strong;
        if (Strong)
        {
          v29 = (_QWORD *)swift_task_alloc(dword_10031517C);
          *(_QWORD *)(v1 + 160) = v29;
          *v29 = v1;
          v29[1] = sub_10019CB68;
          return sub_10017DC24(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), v27, *(_QWORD *)(v1 + 96));
        }
      }
      sub_100176CDC();
    }
  }
  sub_10019E014();
  sub_10016D2A8();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10019CB68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100165E44();
  v3 = *(_QWORD *)(v2 + 160);
  *v4 = *v1;
  *(_QWORD *)(v2 + 168) = v0;
  swift_task_dealloc(v3);
  sub_10016CFA0();
  return sub_10016D26C(v5, v6, v7);
}

uint64_t sub_10019CBB8()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_100165E88();
  sub_10019E014();
  sub_10016D2A8();
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

#error "10019CC28: call analysis failed (funcsize=124)"

uint64_t sub_10019CDEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = sub_100161BD0(&qword_1003161D0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v4 + 104))(v3, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:));
  return AsyncStream.init(_:bufferingPolicy:_:)(&_s7MessageVN, v3, sub_10019DB70, v0, &_s7MessageVN);
}

uint64_t sub_10019CE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v19 = a4;
  v20 = a5;
  v21 = a2;
  v7 = sub_100161BD0(&qword_100316160);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = type metadata accessor for NWConnection.SendCompletion(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t (**)(uint64_t))((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_1002C6D28, v15 + v9, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v16 + v15, (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  *v13 = sub_10019D830;
  v13[1] = (uint64_t (*)(uint64_t))v16;
  (*(void (**)(uint64_t (**)(uint64_t), _QWORD, uint64_t))(v11 + 104))(v13, enum case for NWConnection.SendCompletion.contentProcessed(_:), v10);
  NWConnection.send(content:contentContext:isComplete:completion:)(a3, v19, v20, 1, v13);
  return (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_10019CFEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = sub_100161BD0(&qword_100316168);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NWError(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10019D870(a1, (uint64_t)v4);
  if (sub_10016445C((uint64_t)v4, 1, v5) == 1)
  {
    sub_10019D8B8((uint64_t)v4);
    v9 = sub_100161BD0(&qword_100316160);
    return CheckedContinuation.resume(returning:)(v9, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v11 = sub_100165D54();
    v12 = swift_allocError(v5, v11, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v13, v8, v5);
    v16 = v12;
    v14 = sub_100161BD0(&qword_100316160);
    CheckedContinuation.resume(throwing:)(&v16, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t *sub_10019D148()
{
  uint64_t *v0;

  sub_100165B20((uint64_t)(v0 + 2));
  sub_100165E98();
  sub_100180700(v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11], v0[12], v0[13], v0[14]);
  swift_release(v0[15]);
  return v0;
}

uint64_t sub_10019D194()
{
  uint64_t v0;

  sub_10019D148();
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for PeerConnection()
{
  return objc_opt_self(_TtC14GameDaemonCore14PeerConnection);
}

unint64_t sub_10019D1D4()
{
  return sub_10019B4F0();
}

uint64_t sub_10019D1F4(uint64_t a1)
{
  uint64_t *v1;

  return sub_10019CE8C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10019D200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = sub_100161BD0(&qword_1003161D8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_1002C6DC8, v10 + 8, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11 + v9, v7, v4);
  *(_QWORD *)(v11 + v10) = a2;
  swift_retain(a2);
  NWConnection.receiveMessage(completion:)(sub_10019DB7C, v11);
  return swift_release(v11);
}

uint64_t sub_10019D2F4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  os_log_type_t v44;
  Swift::String v45;
  Swift::String v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v59 = a7;
  v68 = a6;
  v64 = a3;
  v65 = a1;
  v66 = a2;
  v8 = type metadata accessor for Logger(0);
  v62 = *(_QWORD *)(v8 - 8);
  v63 = v8;
  __chkstk_darwin(v8);
  v61 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100161BD0(&qword_1003161D8);
  v58 = *(_QWORD *)(v69 - 8);
  v10 = *(_QWORD *)(v58 + 64);
  __chkstk_darwin(v69);
  v57 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NWError(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v67 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100161BD0(&qword_100316168);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v57 - v18;
  v20 = sub_100161BD0(&qword_1003161E0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a5;
  sub_10019D870(a5, (uint64_t)v19);
  v25 = sub_10016445C((uint64_t)v19, 1, v11);
  v60 = v12;
  if (v25 == 1)
  {
    sub_10019D8B8((uint64_t)v19);
    v26 = 0;
  }
  else
  {
    v27 = sub_100165D54();
    v26 = swift_allocError(v11, v27, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v28, v19, v11);
  }
  v30 = v65;
  v29 = v66;
  v71 = v65;
  v72 = v66;
  v73 = v64;
  v74 = v26;
  swift_retain(v64);
  sub_10019DB80(v30, v29);
  v32 = v68;
  v31 = v69;
  AsyncStream.Continuation.yield(_:)(&v71, v69);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  sub_10019D870(v24, (uint64_t)v17);
  if (sub_10016445C((uint64_t)v17, 1, v11) == 1)
  {
    sub_10019D8B8((uint64_t)v17);
    v34 = v57;
    v33 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v32, v31);
    v35 = *(unsigned __int8 *)(v33 + 80);
    v36 = (v35 + 16) & ~v35;
    v37 = (v10 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    v38 = swift_allocObject(&unk_1002C6DF0, v37 + 8, v35 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v38 + v36, v34, v31);
    v39 = v59;
    *(_QWORD *)(v38 + v37) = v59;
    swift_retain(v39);
    NWConnection.receiveMessage(completion:)(sub_10019DB7C, v38);
    return swift_release(v38);
  }
  else
  {
    v41 = v60;
    v42 = v67;
    v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v60 + 32))(v67, v17, v11);
    v44 = static os_log_type_t.info.getter(v43);
    v71 = 0;
    v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    v45._object = (void *)0x8000000100299F70;
    v45._countAndFlagsBits = 0xD000000000000027;
    String.append(_:)(v45);
    v66 = v11;
    _print_unlocked<A, B>(_:_:)(v42, &v71, v11);
    v46._countAndFlagsBits = 41;
    v46._object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    v48 = v71;
    v47 = v72;
    v49 = v61;
    static GKLog.match.getter(v50);
    v51 = swift_bridgeObjectRetain_n(v47, 2);
    v52 = Logger.logObject.getter(v51);
    v53 = v44;
    if (os_log_type_enabled(v52, v44))
    {
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = swift_slowAlloc(32, -1);
      v71 = v55;
      *(_DWORD *)v54 = 136315138;
      swift_bridgeObjectRetain(v47);
      v70 = sub_10016FE60(v48, v47, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease_n(v47, 3);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Nearby - %s", v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v47, 2);
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v63);
    swift_bridgeObjectRelease(v47, v56);
    AsyncStream.Continuation.finish()();
    return (*(uint64_t (**)(char *, unint64_t))(v41 + 8))(v67, v66);
  }
}

uint64_t sub_10019D7EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100161BD0(&qword_100316160);
  sub_10019DFA0();
  v3 = v1 + v2;
  v5 = v4 | 7;
  sub_100194C1C(v6);
  return sub_10019DF94(v0, v3, v5);
}

uint64_t sub_10019D830(uint64_t a1)
{
  sub_100161BD0(&qword_100316160);
  return sub_10019CFEC(a1);
}

uint64_t sub_10019D870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_100316168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019D8B8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100161BD0(&qword_100316168);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10019D8F8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10019D91C(uint64_t a1)
{
  uint64_t v1;

  return sub_10019C694(a1, v1);
}

uint64_t sub_10019D924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for NWConnection.State(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  swift_unknownObjectRelease();
  sub_100165E98();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v6 = sub_100165E7C();
  return swift_deallocObject(v6, v7, v5);
}

uint64_t sub_10019D998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NWConnection.State(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_10031617C);
  *(_QWORD *)(v1 + 16) = v5;
  v6 = sub_100199A5C(v5);
  return sub_10019C7F4(v6, v7, v8, v3, v4);
}

uint64_t sub_10019DA1C()
{
  uint64_t v0;

  sub_100165E44();
  sub_100165DBC();
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10019DA48()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_100165E98();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10019DA70()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100316194);
  *(_QWORD *)(v0 + 16) = v1;
  sub_100199A5C(v1);
  return sub_10019BFF0();
}

uint64_t sub_10019DACC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != 1)
  {
    sub_10016FF30(result, a2);
    swift_release(a3);
    return swift_errorRelease(a4);
  }
  return result;
}

_QWORD *sub_10019DB08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[9];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_10019DB70(uint64_t a1)
{
  uint64_t v1;

  return sub_10019D200(a1, v1);
}

uint64_t sub_10019DB80(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100170728(result, a2);
  return result;
}

uint64_t sub_10019DB98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100161BD0(&qword_1003161D8);
  sub_10019DFA0();
  v2 = v1 | 7;
  v5 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100194C1C(v6);
  swift_release(*(_QWORD *)(v0 + v5));
  v7 = sub_100165E7C();
  return sub_10019DF94(v7, v8, v2);
}

uint64_t sub_10019DBEC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;

  v11 = *(_QWORD *)(sub_100161BD0(&qword_1003161D8) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  return sub_10019D2F4(a1, a2, a3, a4, a5, v5 + v12, *(_QWORD *)(v5 + ((*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t _s7MessageVwxx(uint64_t *a1)
{
  unint64_t v2;

  v2 = a1[1];
  if (v2 >> 60 != 15)
    sub_10016FF44(*a1, v2);
  swift_release(a1[2]);
  return swift_errorRelease(a1[3]);
}

uint64_t _s7MessageVwcp(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_100170728(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = a2[2];
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_errorRetain(v7);
  *(_QWORD *)(a1 + 24) = v7;
  return a1;
}

uint64_t *_s7MessageVwca(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *a2;
      sub_100170728(*a2, a2[1]);
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_10016FF44(v7, v8);
      goto LABEL_8;
    }
    sub_10019DDF8((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v5 = *a2;
  sub_100170728(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  v9 = a1[2];
  v10 = a2[2];
  a1[2] = v10;
  swift_retain(v10);
  swift_release(v9);
  v11 = a1[3];
  v12 = a2[3];
  swift_errorRetain(v12);
  a1[3] = v12;
  swift_errorRelease(v11);
  return a1;
}

uint64_t sub_10019DDF8(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

uint64_t *_s7MessageVwta(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_10016FF44(v6, v4);
      goto LABEL_6;
    }
    sub_10019DDF8((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  v7 = a1[2];
  a1[2] = a2[2];
  swift_release(v7);
  v8 = a1[3];
  a1[3] = a2[3];
  swift_errorRelease(v8);
  return a1;
}

uint64_t _s7MessageVwet(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s7MessageVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *_s7MessageVMa()
{
  return &_s7MessageVN;
}

uint64_t sub_10019DF74(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10019DF80()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 176));
}

uint64_t sub_10019DF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10019DFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return NWConnection.debugDescription.getter(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10019DFD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_10016FE60(a1, v3, a3);
}

uint64_t sub_10019DFD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  return sub_10016FE60(a1, (a2 - 32) | 0x8000000000000000, (uint64_t *)va);
}

uint64_t sub_10019DFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_bridgeObjectRelease(a15, a2);
}

uint64_t sub_10019DFF0()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 112));
}

uint64_t sub_10019DFF8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_10019E00C()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t sub_10019E014()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 128));
}

void sub_10019E01C()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0;
  *(_QWORD *)(v0 - 88) = 0xE000000000000000;
}

void sub_10019E030(Swift::String a1)
{
  String.append(_:)(a1);
}

void sub_10019E038(Swift::String a1)
{
  String.append(_:)(a1);
}

unint64_t sub_10019E044()
{
  return 0xD000000000000011;
}

uint64_t sub_10019E058()
{
  return NSPersistentStoreCoordinator.replacePersistentStore(at:destinationOptions:withPersistentStoreFrom:sourceOptions:type:)();
}

uint64_t sub_10019E078()
{
  return NSPersistentStoreCoordinator.destroyPersistentStore(at:type:options:)();
}

void sub_10019E098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  Class ObjectType;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a6;
  v43 = a3;
  v44 = a5;
  v45 = a2;
  ObjectType = (Class)swift_getObjectType(v7);
  v11 = sub_100161BD0(&qword_100315B00);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v39 - v15;
  v17 = sub_10019FB28();
  v42 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v39 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v39 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v39 - v27;
  sub_100183FDC(a1, (uint64_t)v16);
  if (sub_10016445C((uint64_t)v16, 1, v17) == 1)
  {
    swift_bridgeObjectRelease(a7, v29);
    swift_bridgeObjectRelease(a4, v30);
    sub_10019FA58((uint64_t)v16);
    type metadata accessor for ProcessExiter();
    sub_10019FAF4((uint64_t)"Unable to locate old database URL. Exiting.");
  }
  v39 = a1;
  v31 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  v31(v28, v16, v17);
  sub_100183FDC(v45, (uint64_t)v14);
  if (sub_10016445C((uint64_t)v14, 1, v17) == 1)
  {
    swift_bridgeObjectRelease(a7, v32);
    swift_bridgeObjectRelease(a4, v33);
    sub_10019FA58((uint64_t)v14);
    type metadata accessor for ProcessExiter();
    sub_10019FAF4((uint64_t)"Unable to locate new database URL. Exiting.");
  }
  v31(v26, v14, v17);
  v34 = v42;
  v35 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
  v35(v23, v28, v17);
  v35(v20, v26, v17);
  v36 = (char *)objc_allocWithZone(ObjectType);
  sub_10019F698((uint64_t)v23, (uint64_t)v20, v43, (uint64_t)a4, v44, v41, a7, v36);
  sub_10019FB48();
  sub_10019FA58(v39);
  v37 = *(void (**)(char *, uint64_t))(v34 + 8);
  v37(v26, v17);
  v37(v28, v17);
  v38 = sub_10019FB78();
  sub_10019FB08(v38, *a4);
  sub_100165DCC();
}

void InsecureDatabaseMigrator.__allocating_init(insecureDatabaseURL:secureDatabaseURL:persistentStoreCoordinatorProtocol:options:fileManager:bundleID:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10019E54C(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10019F5B0);
}

void InsecureDatabaseMigrator.init(insecureDatabaseURL:secureDatabaseURL:persistentStoreCoordinatorProtocol:options:fileManager:bundleID:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10019E54C(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10019F7E4);
}

void sub_10019E54C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v22 = a8;
  v16 = a3[3];
  v15 = a3[4];
  v17 = sub_10016BF84((uint64_t)a3, v16);
  __chkstk_darwin(v17);
  v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  v22(a1, a2, v19, a4, a5, a6, a7, v21, v16, v15);
  sub_100161FE0(a3);
  sub_100165DCC();
}

Swift::Void __swiftcall InsecureDatabaseMigrator.migrate()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  unint64_t *v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;

  v75 = type metadata accessor for NSPersistentStore.StoreType(0);
  v73 = *(uint64_t (**)(char *, uint64_t))(v75 - 8);
  __chkstk_darwin(v75);
  sub_10019FB64();
  v71 = v1;
  sub_10019FB3C();
  __chkstk_darwin(v2);
  v4 = (char *)&v67 - v3;
  v79 = type metadata accessor for Logger(0);
  v5 = *(_QWORD **)(v79 - 8);
  __chkstk_darwin(v79);
  sub_10019FB64();
  v74 = v6;
  sub_10019FB3C();
  __chkstk_darwin(v7);
  v76 = (char *)&v67 - v8;
  sub_10019FB3C();
  __chkstk_darwin(v9);
  v72 = (uint64_t)&v67 - v10;
  sub_10019FB3C();
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v67 - v13;
  static GKLog.cache.getter(v12);
  v15 = v0;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v19 = &qword_100316000;
  v78 = v15;
  if (v18)
  {
    v20 = sub_100165DA4(12);
    v77 = v5;
    v21 = (uint8_t *)v20;
    v22 = sub_100165DA4(32);
    v80 = v22;
    *(_DWORD *)v21 = 136315138;
    v23 = sub_10019FB28();
    v24 = sub_10019F93C();
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    v27 = sub_10019FB58(v25, v26);
    v28 = sub_10019DFF8(v27);
    v19 = &qword_100316000;
    v15 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28, v29);

    sub_10016D13C(v30, v31);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "About to migrate: %s to secure location", v21, 0xCu);
    sub_10019FAD4(v32, v33, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v22);
    sub_100165D98((uint64_t)v21);

    v34 = (_QWORD *)v77[1];
  }
  else
  {

    v34 = (_QWORD *)v5[1];
  }
  v77 = v34;
  ((void (*)(char *, uint64_t))v34)(v14, v79);
  v35 = &v15[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator];
  v36 = *(_QWORD *)&v15[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator + 24];
  v37 = *(_QWORD *)&v15[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator + 32];
  sub_100163928(&v15[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator], v36);
  v38 = &v15[OBJC_IVAR___GKInsecureDatabaseMigrator_secureDatabaseURL];
  v39 = *(_QWORD *)&v15[OBJC_IVAR___GKInsecureDatabaseMigrator_options];
  v40 = &v15[v19[64]];
  static NSPersistentStore.StoreType.sqlite.getter();
  (*(void (**)(char *, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t))(v37 + 8))(v38, v39, v40, v39, v4, v36, v37);
  v70 = v40;
  v41 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v73 + 1);
  v42 = v41(v4, v75);
  v43 = v72;
  static GKLog.cache.getter(v42);
  v44 = v15;
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter(v45);
  v47 = os_log_type_enabled(v45, v46);
  v73 = v41;
  if (v47)
  {
    v48 = (_DWORD *)sub_100165DA4(12);
    v69 = sub_100165DA4(32);
    v80 = v69;
    v68 = v48;
    *v48 = 136315138;
    v67 = v48 + 1;
    v49 = sub_10019FB28();
    v50 = sub_10019F93C();
    v51 = v70;
    v52 = dispatch thunk of CustomStringConvertible.description.getter(v49, v50);
    v54 = sub_10019FB58(v52, v53);
    v55 = sub_10019DFF8(v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v56);

    sub_10016D13C(v57, v58);
    v59 = (uint64_t)v68;
    sub_10019FAE8((void *)&_mh_execute_header, v45, v46, "About to destroy: %s");
    v60 = v69;
    sub_10019FAD4(v61, v62, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v60);
    sub_100165D98(v59);

    v63 = v51;
    sub_10019FB1C(v72);
  }
  else
  {

    sub_10019FB1C(v43);
    v63 = v70;
  }
  v64 = v71;
  v65 = *((_QWORD *)v35 + 3);
  v66 = *((_QWORD *)v35 + 4);
  sub_100163928(v35, v65);
  static NSPersistentStore.StoreType.sqlite.getter();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 16))(v63, v64, v39, v65, v66);
  sub_10019FB30(v64);
  sub_10019EC94();
}

uint64_t sub_10019EC94()
{
  uint8_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t Path;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  uint64_t (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  void *v46;
  uint8_t *v47;
  unint64_t *v48;
  void *v49;
  void *v50;
  NSString v51;
  uint64_t v52;
  id v53;
  void *object;
  void *v55;
  NSString v56;
  id v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  id v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  os_log_type_t v89;
  uint8_t *v90;
  _QWORD *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint8_t *v99;
  _QWORD *v100;
  NSString v101;
  uint64_t v102;
  unsigned int v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint8_t *v117;
  _QWORD *v118;
  uint64_t v119;
  id v120;

  v2 = v1;
  v3 = type metadata accessor for Logger(0);
  v114 = *(_QWORD *)(v3 - 8);
  v115 = v3;
  v4 = __chkstk_darwin(v3);
  v110 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v108 - v6;
  v8 = type metadata accessor for URL(0);
  v118 = *(_QWORD **)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v111 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v112 = (char *)&v108 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v108 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v108 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v108 - v20;
  v117 = v0;
  Path = URL.deletingLastPathComponent()(v19);
  v23 = URL.pathExtension.getter(Path);
  v25 = v23 == 0x617461646367 && v24 == 0xE600000000000000;
  v26 = &qword_100316000;
  v116 = v15;
  if (v25)
  {
    v30 = (id)swift_bridgeObjectRelease(0xE600000000000000, v24);
  }
  else
  {
    v27 = v24;
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, 0x617461646367, 0xE600000000000000, 0);
    v30 = (id)swift_bridgeObjectRelease(v27, v29);
    if ((v28 & 1) == 0)
    {
LABEL_13:
      URL.deletingLastPathComponent()(v30);
      object = URL.path(percentEncoded:)(1)._object;
      v55 = *(void **)&v117[v26[66]];
      v56 = String._bridgeToObjectiveC()();
      v120 = 0;
      v57 = objc_msgSend(v55, "contentsOfDirectoryAtPath:error:", v56, &v120);

      v58 = v120;
      if (!v57)
      {
        v73 = v120;
        swift_bridgeObjectRelease(object, v74);
        _convertNSErrorToError(_:)(v58);

        swift_willThrow(v75);
        v45 = (void (*)(char *, uint64_t))v118[1];
        v70 = v15;
        goto LABEL_20;
      }
      v108 = v55;
      v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v57, &type metadata for String);
      v60 = v58;

      v61 = *(_QWORD *)(v59 + 16);
      swift_bridgeObjectRelease(v59, v62);
      v63 = v15;
      v64 = v118;
      v65 = (uint64_t (*)(char *, char *, uint64_t))v118[2];
      v66 = v112;
      v67 = v65(v112, v63, v8);
      if (v61)
      {
        v45 = (void (*)(char *, uint64_t))v64[1];
        v45(v66, v8);
LABEL_16:
        swift_bridgeObjectRelease(object, v68);
        v69 = v116;
LABEL_17:
        v70 = v69;
LABEL_20:
        v45(v70, v8);
        return ((uint64_t (*)(char *, uint64_t))v45)(v21, v8);
      }
      v77 = URL.lastPathComponent.getter(v67);
      v79 = v78;
      v80 = *(_QWORD *)&v117[OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID];
      v81 = *(_QWORD *)&v117[OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID + 8];
      if (v77 == v80 && v78 == v81)
      {
        swift_bridgeObjectRelease(v78, v78);
        v45 = (void (*)(char *, uint64_t))v64[1];
        v84 = ((uint64_t (*)(char *, uint64_t))v45)(v66, v8);
      }
      else
      {
        LODWORD(v117) = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v78, v80, v81, 0);
        swift_bridgeObjectRelease(v79, v83);
        v45 = (void (*)(char *, uint64_t))v64[1];
        v84 = ((uint64_t (*)(char *, uint64_t))v45)(v66, v8);
        if ((v117 & 1) == 0)
          goto LABEL_16;
      }
      v85 = v110;
      static GKLog.cache.getter(v84);
      v113 = v21;
      v86 = v65(v111, v21, v8);
      v87 = Logger.logObject.getter(v86);
      v88 = v8;
      v89 = static os_log_type_t.debug.getter(v87);
      if (os_log_type_enabled(v87, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(12, -1);
        v91 = (_QWORD *)swift_slowAlloc(32, -1);
        v109 = v2;
        v118 = v91;
        v120 = v91;
        v117 = v90;
        *(_DWORD *)v90 = 136315138;
        v112 = (char *)(v90 + 4);
        v92 = sub_10019F93C();
        v93 = v111;
        v94 = dispatch thunk of CustomStringConvertible.description.getter(v88, v92);
        v96 = v95;
        v119 = sub_10016FE60(v94, v95, (uint64_t *)&v120);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120);
        swift_bridgeObjectRelease(v96, v97);
        v98 = v88;
        v45(v93, v88);
        v99 = v117;
        _os_log_impl((void *)&_mh_execute_header, v87, v89, "Removing old bundle folder: %s", v117, 0xCu);
        v100 = v118;
        swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v100, -1, -1);
        swift_slowDealloc(v99, -1, -1);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v110, v115);
        v8 = v98;
      }
      else
      {
        v45(v111, v88);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v85, v115);
        v8 = v88;
      }
      v69 = v116;
      v101 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object, v102);
      v120 = 0;
      v103 = objc_msgSend(v108, "removeItemAtPath:error:", v101, &v120);

      v104 = v120;
      v21 = v113;
      if (v103)
      {
        v105 = v120;
      }
      else
      {
        v106 = v120;
        _convertNSErrorToError(_:)(v104);

        swift_willThrow(v107);
      }
      goto LABEL_17;
    }
  }
  static GKLog.cache.getter(v30);
  v31 = v118;
  v32 = (uint64_t (*)(char *, char *, uint64_t))v118[2];
  v113 = v21;
  v33 = v32(v18, v21, v8);
  v34 = Logger.logObject.getter(v33);
  v35 = v8;
  v36 = static os_log_type_t.debug.getter(v34);
  if (os_log_type_enabled(v34, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = (void *)swift_slowAlloc(32, -1);
    v109 = v1;
    v39 = v38;
    v120 = v38;
    *(_DWORD *)v37 = 136315138;
    v108 = v37 + 4;
    v40 = sub_10019F93C();
    v41 = dispatch thunk of CustomStringConvertible.description.getter(v35, v40);
    v43 = v42;
    v119 = sub_10016FE60(v41, v42, (uint64_t *)&v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120);
    swift_bridgeObjectRelease(v43, v44);
    v45 = (void (*)(char *, uint64_t))v118[1];
    v45(v18, v35);
    _os_log_impl((void *)&_mh_execute_header, v34, v36, "Removing old database folder: %s", v37, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    v46 = v39;
    v2 = v109;
    swift_slowDealloc(v46, -1, -1);
    v47 = v37;
    v26 = &qword_100316000;
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {
    v45 = (void (*)(char *, uint64_t))v31[1];
    v45(v18, v35);
  }

  (*(void (**)(char *, uint64_t))(v114 + 8))(v7, v115);
  v8 = v35;
  v48 = v26;
  v49 = *(void **)&v117[v26[66]];
  v21 = v113;
  v50 = URL.path(percentEncoded:)(1)._object;
  v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v50, v52);
  v120 = 0;
  LODWORD(v50) = objc_msgSend(v49, "removeItemAtPath:error:", v51, &v120);

  v53 = v120;
  v15 = v116;
  if ((_DWORD)v50)
  {
    v30 = v120;
    v26 = v48;
    goto LABEL_13;
  }
  v71 = v120;
  _convertNSErrorToError(_:)(v53);

  swift_willThrow(v72);
  return ((uint64_t (*)(char *, uint64_t))v45)(v21, v8);
}

void InsecureDatabaseMigrator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.InsecureDatabaseMigrator", 39, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_10019F544(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v6 = a4();
  v8 = sub_10016FE60(v6, v7, a3);
  v9 = *a1 + 8;
  v13 = v8;
  v10 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
  result = sub_10016D13C(v10, v11);
  *a1 = v9;
  return result;
}

id sub_10019F5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Class v18;
  char *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;

  v22 = a6;
  v23 = a7;
  v15 = *(_QWORD *)(a9 - 8);
  __chkstk_darwin(a1);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (char *)objc_allocWithZone(v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a9);
  v20 = sub_10019F7E4(a1, a2, (uint64_t)v17, a4, a5, v22, v23, v19, a9, a10);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, a9);
  return v20;
}

id sub_10019F698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  objc_class *ObjectType;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char *v19;
  id v20;
  void (*v21)(uint64_t, uint64_t);
  objc_super v25;
  _QWORD v26[5];

  ObjectType = (objc_class *)swift_getObjectType(a8);
  v26[3] = sub_10019FA98();
  v26[4] = &protocol witness table for NSPersistentStoreCoordinator;
  v26[0] = a3;
  v15 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_insecureDatabaseURL];
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v15, a1, v16);
  v18(&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_secureDatabaseURL], a2, v16);
  *(_QWORD *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_fileManager] = a5;
  sub_1001923C0((uint64_t)v26, (uint64_t)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator]);
  *(_QWORD *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_options] = a4;
  v19 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID];
  *(_QWORD *)v19 = a6;
  *((_QWORD *)v19 + 1) = a7;
  v25.receiver = a8;
  v25.super_class = ObjectType;
  v20 = objc_msgSendSuper2(&v25, "init");
  sub_100161FE0(v26);
  v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v21(a2, v16);
  v21(a1, v16);
  return v20;
}

id sub_10019F7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10)
{
  objc_class *ObjectType;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  id v23;
  void (*v24)(uint64_t, uint64_t);
  objc_super v28;
  _QWORD v29[5];

  ObjectType = (objc_class *)swift_getObjectType(a8);
  v29[3] = a9;
  v29[4] = a10;
  v17 = sub_10016CA34(v29);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 32))(v17, a3, a9);
  v18 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_insecureDatabaseURL];
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v21(v18, a1, v19);
  v21(&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_secureDatabaseURL], a2, v19);
  *(_QWORD *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_fileManager] = a5;
  sub_1001923C0((uint64_t)v29, (uint64_t)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_persistentStoreCoordinator]);
  *(_QWORD *)&a8[OBJC_IVAR___GKInsecureDatabaseMigrator_options] = a4;
  v22 = &a8[OBJC_IVAR___GKInsecureDatabaseMigrator_bundleID];
  *(_QWORD *)v22 = a6;
  *((_QWORD *)v22 + 1) = a7;
  v28.receiver = a8;
  v28.super_class = ObjectType;
  v23 = objc_msgSendSuper2(&v28, "init");
  sub_100161FE0(v29);
  v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v24(a2, v19);
  v24(a1, v19);
  return v23;
}

unint64_t sub_10019F93C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316208;
  if (!qword_100316208)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_100316208);
  }
  return result;
}

uint64_t sub_10019F97C()
{
  return type metadata accessor for InsecureDatabaseMigrator(0);
}

uint64_t type metadata accessor for InsecureDatabaseMigrator(uint64_t a1)
{
  uint64_t result;

  result = qword_100316248;
  if (!qword_100316248)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InsecureDatabaseMigrator);
  return result;
}

uint64_t sub_10019F9BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = "(";
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = &unk_100233E08;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10019FA58(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100161BD0(&qword_100315B00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10019FA98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316258;
  if (!qword_100316258)
  {
    v1 = objc_opt_self(NSPersistentStoreCoordinator);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100316258);
  }
  return result;
}

uint64_t sub_10019FAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return swift_arrayDestroy(v3, 1, a3);
}

uint64_t sub_10019FAE0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

void sub_10019FAE8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

void sub_10019FAF4(uint64_t a1@<X8>)
{
  sub_1001B68A0(0xD00000000000002BLL, (a1 - 32) | 0x8000000000000000);
}

uint64_t sub_10019FB08@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return swift_deallocPartialClassInstance(v3, a1, *(unsigned int *)((v2 & a2) + 0x30), *(unsigned __int16 *)((v2 & a2) + 0x34));
}

uint64_t sub_10019FB1C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 128))(a1, *(_QWORD *)(v1 - 112));
}

uint64_t sub_10019FB28()
{
  return type metadata accessor for URL(0);
}

uint64_t sub_10019FB30(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 160))(a1, *(_QWORD *)(v1 - 144));
}

uint64_t sub_10019FB48()
{
  uint64_t v0;

  return sub_10019FA58(*(_QWORD *)(v0 - 88));
}

uint64_t sub_10019FB50()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10019FB58(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10016FE60(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_10019FB78()
{
  uint64_t v0;

  return swift_getObjectType(*(_QWORD *)(v0 - 112));
}

uint64_t sub_10019FB84()
{
  return 0x6C61626F6C67;
}

uint64_t sub_10019FBD4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  NSString v23;
  void *v24;
  id v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  void *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  id v40;
  uint64_t result;
  uint64_t v42;
  id v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  objc_class *ObjectType;
  char *v49;
  objc_super v50;
  char v51[96];
  uint64_t v52;
  uint64_t v53;

  sub_100166CC4();
  v52 = v1;
  v53 = v2;
  v3 = v0;
  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v6 = sub_1001A1364();
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  sub_1001A1358();
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100161BD0(&qword_100315B00);
  sub_1001A1358();
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10019FB28();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v49 = (char *)&v42 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v42 - v20;
  v22 = v3;
  v23 = String._bridgeToObjectiveC()();
  v24 = v5;
  v25 = objc_msgSend(v5, "containerURLForSecurityApplicationGroupIdentifier:", v23);

  if (v25)
  {
    v45 = v9;
    v26 = v49;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v25);

    v27 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v27(v12, v26, v13);
    sub_1001A13A4((uint64_t)v12, 0);
    if (sub_10016445C((uint64_t)v12, 1, v13) != 1)
    {
      v27(v21, v12, v13);
      v28 = v24;
      *(_QWORD *)&v22[OBJC_IVAR___GKSecureFileLocator_fileManager] = v24;
      v44 = v27;
      v29 = &v22[OBJC_IVAR___GKSecureFileLocator_rootDirectory];
      v30 = v14;
      v31 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
      v31(&v22[OBJC_IVAR___GKSecureFileLocator_rootDirectory], v21, v13);
      v32 = v17;
      v31(v17, v29, v13);
      strcpy(v51, "Library/Caches");
      v51[15] = -18;
      v34 = v45;
      v33 = v46;
      v35 = v47;
      (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v45, enum case for URL.DirectoryHint.isDirectory(_:), v47);
      sub_100164810();
      v43 = v28;
      v36 = v49;
      URL.appending<A>(path:directoryHint:)(v51, v34);
      v37 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v35);
      sub_1001A13D0(v37, v38);
      v39 = *(void (**)(char *, uint64_t))(v30 + 8);
      v39(v32, v13);
      v39(v21, v13);
      v44(&v22[OBJC_IVAR___GKSecureFileLocator_parentCachesDirectory], v36, v13);

      v50.receiver = v22;
      v50.super_class = ObjectType;
      v40 = objc_msgSendSuper2(&v50, "init");

      return (uint64_t)v40;
    }
  }
  else
  {
    sub_1001A13A4((uint64_t)v12, 1);
  }
  sub_10019FA58((uint64_t)v12);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000010029A200, "GameDaemonCore/SecureFileLocator.swift", 38, 2, 78, 0);
  __break(1u);
  return result;
}

void sub_10019FF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_100166CC4();
  v24._countAndFlagsBits = v3;
  v24._object = v4;
  v23 = v5;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v25 = v12;
  sub_1001A1364();
  sub_1001A136C();
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10019FB28();
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_1001A12BC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v1, v0 + OBJC_IVAR___GKSecureFileLocator_parentCachesDirectory, v16);
  v26 = v11;
  v27 = v9;
  swift_bridgeObjectRetain(v9);
  v18._countAndFlagsBits = 47;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v7;
  v19._object = v23;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 45;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  String.append(_:)(v24);
  sub_1001A13B8(enum case for URL.DirectoryHint.isDirectory(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  sub_100164810();
  sub_1001A130C();
  v21 = sub_1001A1320((uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1001A13D0(v21, v22);
  sub_1001A1398(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
  sub_100165DCC();
}

void sub_1001A00B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[6];

  sub_100166CC4();
  v11[1] = v1;
  v11[0] = v2;
  v11[3] = v3;
  v4 = sub_1001A1364();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10019FB28();
  sub_1001A136C();
  __chkstk_darwin(v8);
  sub_1001A12BC();
  sub_10019FF7C();
  v11[4] = 0x6573616261746144;
  v11[5] = 0xEB0000000031562FLL;
  sub_1001A13B8(enum case for URL.DirectoryHint.isDirectory(_:), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 104));
  sub_100164810();
  sub_1001A130C();
  v9 = sub_1001A1320((uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_1001A13D0(v9, v10);
  sub_1001A1398(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  sub_100165DCC();
}

id sub_1001A01D0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSURL *v25;
  void *v26;
  void *v27;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_100166CC4();
  v29 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = sub_10019FB28();
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_1001A1328();
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v17 = v16;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v20 = v19;
  v21 = v9;
  v29(v12, v14, v15, v17, v18, v20);

  swift_bridgeObjectRelease(v14, v22);
  swift_bridgeObjectRelease(v17, v23);
  swift_bridgeObjectRelease(v20, v24);
  URL._bridgeToObjectiveC()(v25);
  v27 = v26;
  sub_1001A1320(v0, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  return v27;
}

void sub_1001A02D8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;

  sub_100166CC4();
  v43 = v1;
  v39 = v2;
  v45 = v3;
  v46 = v4;
  v5 = sub_1001A12F8(__stack_chk_guard);
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  sub_1001A1358();
  __chkstk_darwin(v6);
  sub_1001A1384();
  v44 = v7;
  v42 = sub_1001A1364();
  v8 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10019FB28();
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1001A1384();
  v14 = v13;
  sub_1001A00B4();
  v15 = *(void **)(v0 + OBJC_IVAR___GKSecureFileLocator_fileManager);
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR___GKSecureFileLocator_fileManager);
  v17 = v16;
  v47 = 0;
  v18 = objc_msgSend(v15, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v16, 1, 0, &v47);

  v19 = v47;
  if (v18)
  {
    v20 = v42;
    v47 = v39;
    v48 = v43;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for URL.DirectoryHint.notDirectory(_:), v42);
    sub_100164810();
    v21 = v19;
    v22 = v46;
    URL.appending<A>(path:directoryHint:)(&v47, v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
    v23 = 0;
  }
  else
  {
    v43 = v12;
    v45 = v11;
    v24 = v46;
    v25 = v47;
    v26 = _convertNSErrorToError(_:)(v19);

    v28 = swift_willThrow(v27);
    v29 = v44;
    static GKLog.cache.getter(v28);
    sub_1001A137C();
    v30 = sub_1001A137C();
    v31 = v29;
    Logger.logObject.getter(v30);
    v32 = sub_100194B40();
    if (os_log_type_enabled(v29, v32))
    {
      sub_100165DA4(12);
      v33 = (_QWORD *)sub_1001A12D4();
      LODWORD(v29->isa) = 138412290;
      sub_1001A137C();
      v34 = (void *)_swift_stdlib_bridgeErrorToNSError(v26);
      v47 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      *v33 = v34;
      sub_1001A12E4();
      sub_1001A12E4();
      sub_1001A12EC((void *)&_mh_execute_header, v29, v32, "Failed to create secure directory: %@");
      v35 = sub_100161BD0(&qword_100315A10);
      sub_100165DFC((uint64_t)v33, v36, v35);
      sub_100165D98((uint64_t)v33);
      v37 = (uint64_t)v29;
      v29 = v44;
      sub_100165D98(v37);

    }
    else
    {

      sub_1001A12E4();
      sub_1001A12E4();
    }
    v22 = v24;
    v38 = v43;
    sub_1001A12E4();
    (*(void (**)(NSObject *, uint64_t))(v40 + 8))(v29, v41);
    v11 = v45;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v14, v45);
    v23 = 1;
  }
  sub_100161B54(v22, v23, 1, v11);
  sub_100165DCC();
}

void sub_1001A0788()
{
  sub_1001A02D8();
}

void sub_1001A08E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100166CC4();
  v1 = sub_10019FB28();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1001A1340();
  sub_10019FF7C();
  sub_1001A0984();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  sub_100165DCC();
}

void sub_1001A0984()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSURL *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;

  sub_100166CC4();
  v27 = v1;
  v28 = v2;
  v3 = v0;
  v4 = sub_1001A12F8(__stack_chk_guard);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (NSURL *)((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = ((char *)&v25 - (char *)v7);
  URL._bridgeToObjectiveC()(v7);
  v10 = v9;
  v26 = 0;
  LODWORD(v3) = objc_msgSend(v3, "removeItemAtURL:error:", v9, &v26);

  if ((_DWORD)v3)
  {
    v11 = v26;
  }
  else
  {
    v25 = (uint64_t)v26;
    v12 = v26;
    v13 = (_DWORD *)_convertNSErrorToError(_:)(v25);

    v14 = swift_willThrow();
    ((void (*)(uint64_t))static GKLog.cache.getter)(v14);
    sub_1001A13B0();
    v15 = sub_1001A13B0();
    Logger.logObject.getter(v15);
    v16 = sub_100194B40();
    if (os_log_type_enabled(v8, v16))
    {
      sub_100165DA4(12);
      v17 = sub_1001A12D4();
      v25 = v4;
      v18 = (_QWORD *)v17;
      *v13 = 138412290;
      sub_1001A13B0();
      v19 = _swift_stdlib_bridgeErrorToNSError(v13);
      v20 = sub_100165EE0(v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v21);
      *v18 = v19;
      sub_100194BE4();
      sub_100194BE4();
      sub_1001A12EC((void *)&_mh_execute_header, v8, v16, "Failed to remove item: %@");
      v22 = sub_100161BD0(&qword_100315A10);
      sub_100165DFC((uint64_t)v18, v23, v22);
      v24 = (uint64_t)v18;
      v4 = v25;
      sub_100165D98(v24);
      sub_100165D98((uint64_t)v13);

      sub_100194BE4();
    }
    else
    {
      sub_100194BE4();
      sub_100194BE4();
      sub_100194BE4();

    }
    (*(void (**)(NSObject *, uint64_t))(v5 + 8))(v8, v4);
    sub_100165DCC();
  }
}

uint64_t sub_1001A0C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10019FB28();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1001A1328();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v0 + OBJC_IVAR___GKSecureFileLocator_parentCachesDirectory, v2);
  sub_1001A0CDC();
  return sub_1001A1320(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
}

void sub_1001A0CDC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSURL *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  id v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;

  sub_100166CC4();
  v4 = v0;
  v62 = v5;
  v59 = v6;
  v7 = sub_1001A12F8(__stack_chk_guard);
  sub_1001A136C();
  __chkstk_darwin(v8);
  sub_1001A1340();
  v9 = sub_10019FB28();
  v61 = *(_QWORD *)(v9 - 8);
  sub_1001A1358();
  v11 = __chkstk_darwin(v10);
  v58 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v57 - v14;
  __chkstk_darwin(v13);
  v60 = (char *)&v57 - v16;
  sub_100161BD0(&qword_100315B00);
  sub_1001A1358();
  __chkstk_darwin(v17);
  sub_1001A12BC();
  URL._bridgeToObjectiveC()(v18);
  v20 = v19;
  v66 = 0;
  v63 = v4;
  v21 = objc_msgSend(v4, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v19, 0, 0, &v66);

  v22 = v66;
  if (v21)
  {
    v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v9);
    v24 = v22;

    v25 = *(_QWORD *)(v23 + 16);
    v57 = v23;
    if (v25)
    {
      v26 = v61;
      v27 = v23 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
      v28 = *(_QWORD *)(v61 + 16);
      v64 = *(_QWORD *)(v61 + 72);
      v65 = v28;
      swift_bridgeObjectRetain(v23);
      v29 = v62;
      v30 = (uint64_t)v15;
      v31 = (uint64_t)v60;
      while (1)
      {
        sub_1001A13D8(v1, v27);
        sub_100164550(v1, 0);
        if (sub_10016445C(v1, 1, v9) == 1)
          goto LABEL_23;
        v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v31, v1, v9);
        if (v29)
        {
          v33 = URL.isFileURL.getter(v32);
          v34 = sub_1001A13D8(v30, v31);
          if ((v33 & 1) != 0)
          {
            v35 = v30;
            v36 = (uint64_t)v58;
            v37 = URL.deletingPathExtension()(v34);
            v38 = URL.lastPathComponent.getter(v37);
            v40 = v39;
            sub_1001A1304(v36);
            if (v38 == v59 && v40 == v29)
            {
              swift_bridgeObjectRelease(v40, v41);
              sub_1001A1304(v35);
              v30 = v35;
LABEL_16:
              v31 = (uint64_t)v60;
              sub_1001A13C4();
              v26 = v61;
              v29 = v62;
              goto LABEL_17;
            }
            v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, v59, v29, 0);
            swift_bridgeObjectRelease(v40, v44);
            sub_1001A1304(v35);
            v30 = v35;
            if ((v43 & 1) != 0)
              goto LABEL_16;
            v26 = v61;
            v29 = v62;
            v31 = (uint64_t)v60;
          }
          else
          {
            sub_1001A1304(v30);
          }
        }
        else
        {
          sub_1001A13C4();
        }
LABEL_17:
        sub_1001A1304(v31);
        v27 += v64;
        if (!--v25)
          goto LABEL_22;
      }
    }
    swift_bridgeObjectRetain(v23);
LABEL_22:
    sub_100164550(v1, 1);
LABEL_23:
    swift_bridgeObjectRelease_n(v57, 2);
  }
  else
  {
    v45 = v66;
    v46 = (_DWORD *)_convertNSErrorToError(_:)(v22);

    v47 = swift_willThrow();
    static GKLog.cache.getter(v47);
    sub_1001A13E4();
    v48 = sub_1001A13E4();
    Logger.logObject.getter(v48);
    v49 = sub_100194B40();
    if (os_log_type_enabled(v3, (os_log_type_t)v49))
    {
      v65 = v7;
      sub_100165DA4(12);
      v50 = (_QWORD *)sub_1001A12D4();
      *v46 = 138412290;
      sub_1001A13E4();
      v51 = v2;
      v52 = _swift_stdlib_bridgeErrorToNSError(v46);
      v53 = sub_100165EE0(v52);
      v7 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v54);
      *v50 = v52;
      v2 = v51;
      sub_10016D1B4();
      sub_10016D1B4();
      sub_1001A12EC((void *)&_mh_execute_header, v3, (os_log_type_t)v49, "Unable to retrieve contents of directory with error: %@");
      v55 = sub_100161BD0(&qword_100315A10);
      sub_100165DFC((uint64_t)v50, v56, v55);
      sub_100165D98((uint64_t)v50);
      sub_100165D98((uint64_t)v46);

      sub_10016D1B4();
    }
    else
    {
      sub_10016D1B4();
      sub_10016D1B4();
      sub_10016D1B4();

    }
    (*(void (**)(NSObject *, uint64_t))(v2 + 8))(v3, v7);
  }
  sub_100165DCC();
}

void SecureFileLocator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.SecureFileLocator", 32, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1001A1200()
{
  return type metadata accessor for SecureFileLocator(0);
}

uint64_t type metadata accessor for SecureFileLocator(uint64_t a1)
{
  uint64_t result;

  result = qword_1003162A0;
  if (!qword_1003162A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureFileLocator);
  return result;
}

uint64_t sub_1001A1240(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    result = swift_updateClassMetadata2(a1, 256, 3, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001A12D4()
{
  return swift_slowAlloc(8, -1);
}

uint64_t sub_1001A12E4()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

void sub_1001A12EC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1001A12F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return type metadata accessor for Logger(0);
}

uint64_t sub_1001A1304(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1001A130C()
{
  uint64_t v0;
  uint64_t v1;

  return URL.appending<A>(path:directoryHint:)(v1 - 96, v0);
}

uint64_t sub_1001A1320@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_1001A1364()
{
  return type metadata accessor for URL.DirectoryHint(0);
}

uint64_t sub_1001A137C()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1001A1398@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1001A13A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100161B54(a1, a2, 1, v2);
}

uint64_t sub_1001A13B0()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1001A13B8@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v3, a1, v2);
}

void sub_1001A13C4()
{
  sub_1001A0984();
}

uint64_t sub_1001A13D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(*(_QWORD *)(v2 - 88), a2);
}

uint64_t sub_1001A13D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 112))(a1, a2, v2);
}

uint64_t sub_1001A13E4()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1001A13EC(uint64_t a1, void *a2)
{
  if (a2)
    return sub_1001B72A8(*(_QWORD *)(a1 + 32), a2);
  else
    return j__swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
}

id PseudonymManager.init()()
{
  void *v0;
  objc_class *ObjectType;
  char *v2;
  id result;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  objc_allocWithZone((Class)IDSService);
  v2 = v0;
  result = sub_1001A1CC8(0xD000000000000027, 0x800000010029A230);
  if (result)
  {
    *(_QWORD *)&v2[OBJC_IVAR___GKPseudonymManager_service] = result;
    result = objc_msgSend(objc_allocWithZone((Class)GKFireworksPseudonymManager), "initWithService:", result);
    if (result)
    {
      *(_QWORD *)&v2[OBJC_IVAR___GKPseudonymManager_fwManager] = result;

      v4.receiver = v2;
      v4.super_class = ObjectType;
      return objc_msgSendSuper2(&v4, "init");
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PseudonymManager.fetchPseudonym()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return sub_10016CFC8((uint64_t)sub_1001A1524);
}

uint64_t sub_1001A1524()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(void **)(v0[16] + OBJC_IVAR___GKPseudonymManager_fwManager);
  v0[17] = v1;
  v0[7] = v0 + 15;
  v2 = sub_1001948EC((uint64_t)sub_1001A15B8);
  v0[10] = _NSConcreteStackBlock;
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_1001A176C;
  v3[3] = &unk_1002C6EC8;
  v3[4] = v2;
  objc_msgSend(v1, "provisionPseudonymIfNeeded:", v3);
  return sub_1001A2100();
}

uint64_t sub_1001A15B8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  sub_1001A20E4();
  *(_QWORD *)(v0 + 144) = v1;
  if (v1)
    v2 = sub_1001A1708;
  else
    v2 = sub_1001A15FC;
  return sub_10016D26C((uint64_t)v2, 0, 0);
}

uint64_t sub_1001A15FC()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 120);

  if (v1)
  {
    v2 = objc_msgSend(v1, "URI");
    v3 = objc_msgSend(v2, "prefixedURI");

    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
  }
  else
  {
    v8 = sub_1001A1D28();
    v9 = sub_1001948C0((uint64_t)&type metadata for PseudonymManagerError, v8);
    *(_QWORD *)v10 = 0;
    *(_BYTE *)(v10 + 8) = 2;
    sub_1001A2108();
    sub_1001948C0((uint64_t)&type metadata for PseudonymManagerError, v8);
    *(_QWORD *)v11 = v9;
    *(_BYTE *)(v11 + 8) = 0;
    sub_1001A2108();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A1708(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(void **)(v1 + 136);
  swift_willThrow(a1);

  v3 = *(_QWORD *)(v1 + 144);
  v4 = sub_1001A1D28();
  sub_1001948C0((uint64_t)&type metadata for PseudonymManagerError, v4);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  sub_1001A2108();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001A176C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
    return sub_1001B72A8(v3, a3);
  v6 = a2;
  return sub_1001B731C(v3, (uint64_t)a2);
}

uint64_t sub_1001A1810(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1003162C4;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1001A1870;
  return PseudonymManager.fetchPseudonym()();
}

uint64_t sub_1001A1870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  NSString v9;
  void *v10;
  uint64_t v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  _QWORD *v14;

  v4 = v2;
  v6 = *(_QWORD **)v3;
  v14 = v6;
  v7 = (void *)v6[2];
  sub_1001816DC(v6[4], &v14);

  if (v4)
  {
    v8 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    v9 = 0;
    v10 = (void *)v8;
  }
  else
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v11);
    v8 = 0;
    v10 = v9;
  }
  v12 = (void (**)(_QWORD, _QWORD, _QWORD))v6[3];
  ((void (**)(_QWORD, NSString, uint64_t))v12)[2](v12, v9, v8);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t PseudonymManager.revokePseudonym(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return sub_10016CFC8((uint64_t)sub_1001A194C);
}

uint64_t sub_1001A194C()
{
  _QWORD *v0;
  void *v1;
  id v2;
  NSString v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(void **)(v0[17] + OBJC_IVAR___GKPseudonymManager_fwManager);
  v0[18] = v1;
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  v0[19] = v3;
  v4 = sub_1001948EC((uint64_t)sub_1001A1A04);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_1001A13EC;
  v5[3] = &unk_1002C6EE0;
  v5[4] = v4;
  objc_msgSend(v2, "revokePseudonym:withCompletionHandler:", v3, v5);
  return sub_1001A2100();
}

uint64_t sub_1001A1A04()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  sub_1001A20E4();
  *(_QWORD *)(v0 + 160) = v1;
  if (v1)
    v2 = sub_1001A1A80;
  else
    v2 = sub_1001A1A48;
  return sub_10016D26C((uint64_t)v2, 0, 0);
}

uint64_t sub_1001A1A48()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A1A80(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(void **)(v1 + 152);
  v3 = *(_QWORD *)(v1 + 160);
  v4 = *(void **)(v1 + 144);
  swift_willThrow(a1);

  v5 = sub_1001A1D28();
  sub_1001948C0((uint64_t)&type metadata for PseudonymManagerError, v5);
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = 1;
  sub_1001A2108();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001A1B64(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v8 = v7;
  v3[4] = v7;
  v9 = dword_1003162D4;
  a3;
  v10 = (_QWORD *)swift_task_alloc(v9);
  v3[5] = v10;
  *v10 = v3;
  v10[1] = sub_1001A1BF0;
  return PseudonymManager.revokePseudonym(_:)(v6, v8);
}

uint64_t sub_1001A1BF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v2 = *v1;
  v9 = v2;
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(void **)(v2 + 16);
  sub_1001816DC(*(_QWORD *)(v2 + 40), &v9);

  swift_bridgeObjectRelease(v3, v5);
  v6 = *(_QWORD *)(v2 + 24);
  if (v0)
  {
    v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v6 + 16))(*(_QWORD *)(v2 + 24), 0);
  }
  _Block_release(*(const void **)(v2 + 24));
  return ((uint64_t (*)(void))v1[1])();
}

id sub_1001A1CC8(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v4;
  uint64_t v5;
  id v6;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v5);
  }
  else
  {
    v4 = 0;
  }
  v6 = objc_msgSend(v2, "initWithService:", v4);

  return v6;
}

unint64_t sub_1001A1D28()
{
  unint64_t result;

  result = qword_1003162C8;
  if (!qword_1003162C8)
  {
    result = swift_getWitnessTable("A1\t", &type metadata for PseudonymManagerError);
    atomic_store(result, (unint64_t *)&qword_1003162C8);
  }
  return result;
}

uint64_t type metadata accessor for PseudonymManager()
{
  return objc_opt_self(GKPseudonymManager);
}

uint64_t initializeBufferWithCopyOfBuffer for PseudonymManagerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1001A1DC8(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_1001A1DC8(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return swift_errorRetain(result);
  return result;
}

uint64_t destroy for PseudonymManagerError(uint64_t a1)
{
  return sub_1001A1DEC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_1001A1DEC(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return swift_errorRelease(result);
  return result;
}

uint64_t assignWithCopy for PseudonymManagerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1001A1DC8(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_1001A1DEC(v5, v6);
  return a1;
}

uint64_t initializeWithTake for PseudonymManagerError(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for PseudonymManagerError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_1001A1DEC(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PseudonymManagerError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PseudonymManagerError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001A1F24(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1001A1F3C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PseudonymManagerError()
{
  return &type metadata for PseudonymManagerError;
}

uint64_t sub_1001A1F64()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001A1F98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100316304);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1001A20E0;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100316300 + dword_100316300))(v2, v3, v4);
}

uint64_t sub_1001A2004()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A2030()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100316314);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1001A2094;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100316310 + dword_100316310))(v2, v3);
}

uint64_t sub_1001A2094()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1001A20E4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 - 8);
  *v2 = *v0;
  *v2 = *v0;
}

uint64_t sub_1001A2100()
{
  return swift_continuation_await();
}

uint64_t sub_1001A2108()
{
  return swift_willThrow();
}

void sub_1001A2110(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[2];
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;

  strcpy((char *)v148, "relationships");
  HIWORD(v148[1]) = -4864;
  AnyHashable.init<A>(_:)(v148);
  sub_100166D80(a1, &v151);
  sub_1001638F4((uint64_t)&v149);
  if (v152)
  {
    v9 = sub_100161BD0(&qword_100315010);
    v3 = &type metadata for Any;
    if ((sub_10016CF50((uint64_t)v148, (uint64_t)&v151, (uint64_t)&type metadata for Any + 8, v9) & 1) != 0)
    {
      v10 = v148[0];
      v11 = sub_1001A8624();
      sub_100166E48(v11, 0xE600000000000000, v10, v12);
      if (v150)
      {
        if ((sub_10016CF50((uint64_t)&v151, (uint64_t)&v149, (uint64_t)&type metadata for Any + 8, v9) & 1) != 0)
        {
          v20 = sub_1001A852C();
          sub_1001A8884(v20, v21, v22);
          if (v150)
          {
            v31 = sub_1001A845C(v23, v24, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String, v27, v28, v29, v30, v136, v142, v144);
            v32 = v151;
            if (!v31)
              v32 = 0;
            v145 = v32;
            if (v31)
              v33 = *((_QWORD *)&v151 + 1);
            else
              v33 = 0;
            v147 = v33;
          }
          else
          {
            sub_1001A84E4(v23, &qword_1003159B0, v25, v26, v27, v28, v29, v30, v136);
            v145 = 0;
            v147 = 0;
          }
          v43 = sub_1001A8624();
          sub_1001A8884(v43 & 0xFFFFFFFFFFFFLL | 0x4143000000000000, 0xEA00000000004449, v44);
          if (v150)
          {
            v53 = sub_1001A845C(v45, v46, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String, v49, v50, v51, v52, v137, v142, v145);
            v54 = v151;
            if (!v53)
              v54 = 0;
            v143 = v54;
            if (v53)
              v55 = *((_QWORD *)&v151 + 1);
            else
              v55 = 0;
            v146 = v55;
          }
          else
          {
            sub_1001A84E4(v45, &qword_1003159B0, v47, v48, v49, v50, v51, v52, v137);
            v143 = 0;
            v146 = 0;
          }
          sub_1001A8884(0x7255726174617661, 0xE90000000000006CLL, &v149);
          v58 = sub_10016D010(v56, v57);
          if (v150)
          {
            sub_1001A845C(v58, v59, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String, v62, v63, v64, v65, v138, v143, v145);
            sub_1001A8878();
            if (v66)
              v34 = 0;
            else
              v34 = v68;
            if (v66)
              v35 = 0;
            else
              v35 = v69;
          }
          else
          {
            sub_1001A84E4(v58, &qword_1003159B0, v60, v61, v62, v63, v64, v65, v138);
            v34 = 0;
            v35 = 0;
          }
          if (v147)
          {
LABEL_35:
            sub_100166E48(1701667175, 0xE400000000000000, v10, &v149);
            v139 = v9;
            if (v150)
            {
              v79 = sub_10016CF50((uint64_t)&v151, (uint64_t)&v149, (uint64_t)&type metadata for Any + 8, v9);
              v80 = v10;
              if ((v79 & 1) != 0)
              {
                sub_1001A882C(0x64496D616461, 0xE600000000000000, &v149);
                if (v150)
                {
                  sub_1001A845C(v81, v82, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String, v85, v86, v87, v88, v139, v143, v145);
                  sub_1001A8878();
                  if (v89)
                    v6 = 0;
                  else
                    v6 = v90;
                  if (v89)
                    v4 = 0;
                  else
                    v4 = v91;
                }
                else
                {
                  sub_1001A84E4(v81, &qword_1003159B0, v83, v84, v85, v86, v87, v88, v139);
                  v6 = 0;
                  v4 = 0;
                }
                sub_1001A882C(0x6449656C646E7562, 0xE800000000000000, &v149);
                if (v150)
                {
                  sub_1001A845C(v104, v105, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String, v108, v109, v110, v111, v140, v143, v145);
                  sub_1001A8878();
                  if (v112)
                    v3 = 0;
                  else
                    v3 = v113;
                  if (v112)
                    v5 = 0;
                  else
                    v5 = v114;
                }
                else
                {
                  sub_1001A84E4(v104, &qword_1003159B0, v106, v107, v108, v109, v110, v111, v140);
                  v3 = 0;
                  v5 = 0;
                }
                sub_1001A882C(0x6C72556567616D69, 0xE800000000000000, &v149);
                v117 = sub_10016D108(v115, v116);
                if (v150)
                {
                  sub_1001A845C(v117, v118, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String, v121, v122, v123, v124, v141, v143, v145);
                  sub_1001A8878();
                  if (v125)
                    v2 = 0;
                  else
                    v2 = v128;
                  if (v125)
                    v39 = 0;
                  else
                    v39 = v129;
                  if (v4)
                    goto LABEL_74;
                }
                else
                {
                  sub_1001A84E4(v117, &qword_1003159B0, v119, v120, v121, v122, v123, v124, v141);
                  v2 = 0;
                  v39 = 0;
                  if (v4)
                  {
LABEL_74:
                    if (v5)
                    {
                      if (!v39)
                      {
                        v130 = swift_bridgeObjectRelease(v4, v127);
                        sub_1001811EC(v130, v131);
                        sub_1001A86E8();
                      }
LABEL_48:
                      sub_100166E48(0x676E656C6C616863, 0xE900000000000065, v80, &v149);
                      v94 = sub_10016D13C(v92, v93);
                      if (v150)
                      {
                        if ((sub_10016CF50((uint64_t)&v151, (uint64_t)&v149, (uint64_t)&type metadata for Any + 8, v139) & 1) == 0)
                          goto LABEL_54;
                        sub_100166E48(25705, 0xE200000000000000, v151, &v149);
                        v94 = sub_10016D13C(v101, v102);
                        if (v150)
                        {
                          if ((sub_1001A845C(v94, v103, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String, v97, v98, v99, v100, v139, v143, v145) & 1) != 0)
                          {
                            v41 = *((_QWORD *)&v151 + 1);
                            v40 = v151;
LABEL_55:
                            v37 = v143;
                            v36 = v145;
                            v38 = v146;
                            v42 = v147;
                            goto LABEL_56;
                          }
LABEL_54:
                          v40 = 0;
                          v41 = 0;
                          goto LABEL_55;
                        }
                      }
                      sub_1001A84E4(v94, &qword_1003159B0, v95, v96, v97, v98, v99, v100, v139);
                      goto LABEL_54;
                    }
                    v134 = swift_bridgeObjectRelease(v4, v127);
                    sub_10016D108(v134, v135);
                    v6 = 0;
                    v4 = 0;
                    v3 = 0;
LABEL_47:
                    v2 = 0;
                    v39 = 0;
                    goto LABEL_48;
                  }
                }
                v132 = sub_1001811EC(v126, v127);
                sub_10016D108(v132, v133);
                v6 = 0;
LABEL_46:
                v3 = 0;
                v5 = 0;
                goto LABEL_47;
              }
            }
            else
            {
              v80 = v10;
              sub_1001A84E4(v72, &qword_1003159B0, v73, v74, v75, v76, v77, v78, v139);
            }
            v6 = 0;
            v4 = 0;
            goto LABEL_46;
          }
          v70 = swift_bridgeObjectRelease(v146, v67);
          sub_10016D010(v70, v71);
        }
      }
      else
      {
        sub_1001A84E4(v13, &qword_1003159B0, v14, v15, v16, v17, v18, v19, v136);
      }
      v143 = 0;
      v145 = 0;
      v146 = 0;
      v147 = 0;
      v34 = 0;
      v35 = 0;
      goto LABEL_35;
    }
  }
  else
  {
    sub_10016CBEC((uint64_t)&v151, &qword_1003159B0);
  }
  v34 = 0;
  v35 = 0;
  sub_1001A86E8();
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 1;
LABEL_56:
  *a2 = v36;
  a2[1] = v42;
  a2[2] = v37;
  a2[3] = v38;
  a2[4] = v34;
  a2[5] = v35;
  a2[6] = v6;
  a2[7] = v4;
  a2[8] = (uint64_t)v3;
  a2[9] = v5;
  a2[10] = v2;
  a2[11] = v39;
  a2[12] = v40;
  a2[13] = v41;
}

uint64_t sub_1001A263C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[30] = a1;
  v2 = sub_10019FB28();
  v1[31] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[32] = v3;
  v1[33] = sub_1001A846C(v3);
  v1[34] = sub_1001999F4();
  v4 = sub_100180D8C();
  v1[35] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[36] = v5;
  v1[37] = sub_1001A846C(v5);
  v1[38] = sub_1001999F4();
  v6 = sub_100161BD0(&qword_100315B00);
  v1[39] = sub_1001A846C(*(_QWORD *)(v6 - 8));
  v1[40] = sub_1001999F4();
  v1[41] = sub_1001999F4();
  sub_10016CFA0();
  return sub_10016D26C(v7, v8, v9);
}

uint64_t sub_1001A26D0()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v71;
  uint64_t v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v0[29] = _swiftEmptyArrayStorage;
  v3 = v0[30];
  v4 = *(_QWORD *)(v3 + 16);
  v0[42] = v4;
  if (!v4)
  {
LABEL_37:
    sub_1001A8688();
    sub_100180C98();
    sub_100180D6C();
    sub_100180E00();
    sub_1001810BC();
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    sub_10016D154();
    __asm { BR              X1 }
  }
  v1 = v0 + 6;
  v5 = (uint64_t)(v0 + 26);
  swift_bridgeObjectRetain(v3);
  v6 = 0;
  v7 = (char *)&type metadata for Any + 8;
  while (1)
  {
    v0[43] = v6;
    v8 = *(_QWORD *)(v0[30] + 8 * v6 + 32);
    if (*(_QWORD *)(v8 + 16))
      break;
LABEL_18:
    sub_1001A8700();
    if (v14)
    {
      swift_bridgeObjectRelease(v0[30], v35);
      goto LABEL_37;
    }
  }
  sub_100176C14();
  v9 = sub_1001A86E0(1701869940, 0xE400000000000000);
  if ((v10 & 1) == 0
    || (v11 = sub_1001A8918(v9),
        sub_100161F70(v11, (uint64_t)(v0 + 6)),
        v9 = sub_10016CF50(v5, (uint64_t)(v0 + 6), (uint64_t)v7, (uint64_t)&type metadata for String),
        (v9 & 1) == 0))
  {
    sub_10016D110(v9, v10);
    goto LABEL_18;
  }
  v2 = v0[26];
  v13 = v0[27];
  sub_1001A87A4(v0[41], v10, v12, v0[31]);
  v14 = v14 && v13 == 0xE600000000000000;
  if (v14 || (sub_1001A858C(v2, v13, 0x6C6F626D7973) & 1) != 0)
  {
    if (*(_QWORD *)(v8 + 16))
    {
      v15 = sub_1001A86E0(1701667182, 0xE400000000000000);
      if ((v16 & 1) != 0)
      {
        v17 = sub_1001A8918(v15);
        sub_1001A861C(v17);
        v18 = sub_10016CF50((uint64_t)(v0 + 18), (uint64_t)(v0 + 10), (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
        if ((v18 & 1) != 0)
        {
          v20 = v0[38];
          v21 = sub_10016D110(v18, v19);
          v23 = sub_10016D2B0(v21, v22);
          v94 = v0[18];
          v95 = v0[19];
          v24 = sub_1001A8544(v23);
          Logger.logObject.getter(v24);
          v25 = sub_1001A84C0();
          if (sub_1001A8740(v25))
          {
            v26 = (uint8_t *)sub_1001A8480();
            *(_WORD *)v26 = 0;
            sub_1001A84C8((void *)&_mh_execute_header, v20, (os_log_type_t)v13, "BulletinHelpers assembleAttachment assembling symbol url", v26);
            sub_100165D98((uint64_t)v26);
          }
          v27 = v0[40];
          v2 = v0[41];
          v28 = v0[38];
          v30 = v0[35];
          v29 = v0[36];

          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
          v31 = sub_1001A5164(v94, v95, v27);
          sub_10016D13C(v31, v32);
          sub_10016CBEC(v2, &qword_100315B00);
          v33 = sub_1001A88D0();
          sub_1001A7E70(v33, v34, &qword_100315B00);
          v7 = (char *)&type metadata for Any + 8;
          goto LABEL_32;
        }
      }
    }
  }
  sub_1001A8864();
  if (v14 && v13 == 0xE600000000000000)
  {
    v41 = swift_bridgeObjectRelease(0xE600000000000000, v36);
  }
  else
  {
    v38 = sub_1001A858C(v2, v13, 0x726579616C70);
    v39 = v38;
    v41 = sub_10016D2B0(v38, v40);
    if ((v39 & 1) == 0)
    {
LABEL_31:
      sub_10016D110(v41, v42);
LABEL_32:
      sub_1001A86C4();
      if (sub_1001A87EC() == 1)
      {
        sub_10016CBEC(v0[41], &qword_100315B00);
        v46 = sub_100165E7C();
        sub_10016CBEC(v46, v47);
      }
      else
      {
        v48 = v0[43];
        v50 = v0[33];
        v49 = v0[34];
        v51 = v0[31];
        v52 = v0[32];
        v53 = sub_1001A8840();
        v54(v53);
        sub_1001A84EC();
        v0[28] = v48;
        v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        String.append(_:)(v55);
        sub_10016D2B0(v56, v57);
        v58 = v0[22];
        v59 = v0[23];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v50, v49, v51);
        v60 = objc_allocWithZone((Class)type metadata accessor for BulletinAttachment(0));
        v61 = sub_1001A8834(v58, v59, v50);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
        v2 = *(_QWORD *)((v0[29] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v62 = *(_QWORD *)((v0[29] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v2 >= v62 >> 1)
          sub_1001A869C(v2 + 1, v62);
        v63 = v0[41];
        v64 = v0[34];
        v65 = v0[31];
        v66 = v0[32];
        v67 = sub_1001A88B8();
        v69 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v68);
        specialized Array._endMutation()(v69);
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
        sub_10016CBEC(v63, &qword_100315B00);
        v5 = (uint64_t)(v0 + 26);
        v7 = (char *)&type metadata for Any + 8;
      }
      goto LABEL_18;
    }
  }
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_31;
  v43 = sub_1001A852C();
  v41 = sub_1001A86E0(v43, v44);
  if ((v42 & 1) == 0)
    goto LABEL_31;
  v45 = sub_1001A8918(v41);
  sub_1001A861C(v45);
  v41 = sub_10016CF50((uint64_t)(v0 + 20), (uint64_t)(v0 + 2), (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
  if ((v41 & 1) == 0)
    goto LABEL_31;
  v71 = v0[37];
  v0[44] = v0[21];
  v72 = sub_1001A8544(v41);
  Logger.logObject.getter(v72);
  v73 = sub_1001A84C0();
  if (os_log_type_enabled(v71, v73))
  {
    v74 = (uint8_t *)sub_1001A8480();
    *(_WORD *)v74 = 0;
    sub_1001A84C8((void *)&_mh_execute_header, v71, v73, "BulletinHelpers assembleAttachment assembling avatar url", v74);
    sub_100165D98((uint64_t)v74);
  }
  v76 = v0[36];
  v75 = v0[37];
  v77 = v0[35];

  v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
  if (*(_QWORD *)(v8 + 16))
  {
    v78 = sub_1001A86E0(7107189, 0xE300000000000000);
    v80 = v0 + 14;
    if ((v79 & 1) != 0)
    {
      v81 = sub_1001A8918(v78);
      v78 = sub_1001A861C(v81);
      goto LABEL_46;
    }
    v82 = 0uLL;
  }
  else
  {
    v82 = 0uLL;
    v80 = v0 + 14;
  }
  *v80 = v82;
  v80[1] = v82;
LABEL_46:
  sub_10016D110(v78, v79);
  if (v0[17])
  {
    if ((sub_10016CF50((uint64_t)(v0 + 24), (uint64_t)v80, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
    {
      v0[45] = v0[25];
      v83 = (_QWORD *)swift_task_alloc(dword_10031633C);
      v0[46] = v83;
      sub_1001A888C(v83);
      sub_10016D154();
      return sub_1001A57C8(v84, v85, v86, v87, v88);
    }
  }
  else
  {
    sub_10016CBEC((uint64_t)v80, &qword_1003159B0);
  }
  v90 = (_QWORD *)swift_task_alloc(dword_10031634C);
  v0[47] = v90;
  *v90 = v0;
  v90[1] = sub_1001A3298;
  sub_10016D154();
  return sub_1001A5C2C(v91, v92, v93);
}

uint64_t sub_1001A2CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100165E44();
  v0 = sub_100165DBC();
  v2 = sub_1001648C4(v0, v1);
  sub_10016D13C(v2, v3);
  sub_10016CFA0();
  return sub_10016CF78();
}

uint64_t sub_1001A2CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v73;
  uint64_t v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v1 = v0 + 176;
  v2 = v0 + 208;
  sub_1001A8814(*(_QWORD *)(v0 + 328));
  v3 = sub_1001A8840();
  sub_1001A7E70(v3, v4, &qword_100315B00);
  v5 = (char *)&type metadata for Any + 8;
  while (2)
  {
    while (2)
    {
      sub_1001A86C4();
      v6 = sub_1001A87EC();
      v7 = *(_QWORD *)(v0 + 312);
      if (v6 == 1)
      {
        sub_1001A8814(*(_QWORD *)(v0 + 328));
      }
      else
      {
        v95 = v2;
        v8 = *(_QWORD *)(v0 + 344);
        v9 = *(_QWORD *)(v0 + 264);
        v10 = sub_1001A88B8();
        v11(v10);
        sub_1001A84EC();
        *(_QWORD *)(v0 + 224) = v8;
        v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v97 = v1;
        String.append(_:)(v12);
        sub_10016D110(v13, v14);
        v15 = sub_1001A88D0();
        v16(v15);
        v17 = objc_allocWithZone((Class)type metadata accessor for BulletinAttachment(0));
        v18 = sub_100165E7C();
        v20 = sub_1001A8834(v18, v19, v9);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        v22 = *(_QWORD *)((*(_QWORD *)(v0 + 232) & 0xFFFFFFFFFFFFFF8) + 0x10);
        v21 = *(_QWORD *)((*(_QWORD *)(v0 + 232) & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v22 >= v21 >> 1)
          sub_1001A869C(v22 + 1, v21);
        v7 = *(_QWORD *)(v0 + 328);
        v23 = *(_QWORD *)(v0 + 272);
        v25 = *(_QWORD *)(v0 + 248);
        v24 = *(_QWORD *)(v0 + 256);
        v26 = sub_1001A88D0();
        v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v27);
        specialized Array._endMutation()(v28);
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
        v2 = v95;
        v1 = v97;
        v5 = (char *)&type metadata for Any + 8;
      }
      sub_1001A8814(v7);
      sub_1001A8700();
      if (v37)
      {
LABEL_37:
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 240), v29);
        sub_1001A8688();
        sub_100180C98();
        sub_100180D6C();
        sub_100180E00();
        sub_1001810BC();
        swift_task_dealloc(&qword_100315B00);
        swift_task_dealloc(v5);
        sub_100181060();
        __asm { BR              X1 }
      }
      while (1)
      {
        *(_QWORD *)(v0 + 344) = v30;
        v31 = *(_QWORD *)(*(_QWORD *)(v0 + 240) + 8 * v30 + 32);
        if (*(_QWORD *)(v31 + 16))
          break;
LABEL_12:
        sub_1001A8700();
        if (v37)
          goto LABEL_37;
      }
      sub_10018135C();
      v32 = sub_1001A878C(1701869940, 0xE400000000000000);
      if ((v33 & 1) == 0
        || (v34 = sub_1001A88F4(v32),
            sub_100161F70(v34, v0 + 48),
            v32 = sub_10016CF50(v2, v0 + 48, (uint64_t)v5, (uint64_t)&type metadata for String),
            (v32 & 1) == 0))
      {
        sub_10016D2B0(v32, v33);
        goto LABEL_12;
      }
      v36 = *(_QWORD *)(v0 + 216);
      sub_1001A87A4(*(_QWORD *)(v0 + 328), v33, v35, *(_QWORD *)(v0 + 248));
      v37 = v37 && v36 == 0xE600000000000000;
      if (v37 || (v38 = sub_1001A88B8(), (sub_1001A858C(v38, v39, 0x6C6F626D7973) & 1) != 0))
      {
        if (*(_QWORD *)(v31 + 16))
        {
          v40 = sub_1001A878C(1701667182, 0xE400000000000000);
          if ((v41 & 1) != 0)
          {
            v42 = sub_1001A88F4(v40);
            sub_1001A861C(v42);
            v43 = sub_10016CF50(v0 + 144, v0 + 80, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
            if ((v43 & 1) != 0)
            {
              v45 = *(NSObject **)(v0 + 304);
              v46 = sub_10016D2B0(v43, v44);
              v48 = sub_10016D110(v46, v47);
              v96 = *(_QWORD *)(v0 + 144);
              v98 = *(_QWORD *)(v0 + 152);
              v49 = sub_1001A8544(v48);
              Logger.logObject.getter(v49);
              v50 = sub_1001A84C0();
              if (sub_1001A8740(v50))
              {
                v51 = (uint8_t *)sub_1001A8480();
                *(_WORD *)v51 = 0;
                sub_1001A84C8((void *)&_mh_execute_header, v45, (os_log_type_t)v31, "BulletinHelpers assembleAttachment assembling symbol url", v51);
                sub_100165D98((uint64_t)v51);
              }
              v53 = *(_QWORD *)(v0 + 320);
              v52 = *(_QWORD *)(v0 + 328);

              v54 = sub_1001A8840();
              v55(v54);
              v56 = sub_1001A5164(v96, v98, v53);
              sub_10016D13C(v56, v57);
              sub_1001A8814(v52);
              v58 = sub_1001A88D0();
              sub_1001A7E70(v58, v59, &qword_100315B00);
              v5 = (char *)&type metadata for Any + 8;
              continue;
            }
          }
        }
      }
      break;
    }
    sub_1001A8864();
    if (v37 && v36 == 0xE600000000000000)
    {
      v67 = swift_bridgeObjectRelease(0xE600000000000000, v60);
      v5 = (char *)&type metadata for Any + 8;
    }
    else
    {
      v62 = sub_1001A88B8();
      v64 = sub_1001A858C(v62, v63, 0x726579616C70);
      v65 = v64;
      v67 = sub_10016D110(v64, v66);
      v5 = (char *)&type metadata for Any + 8;
      if ((v65 & 1) == 0)
        goto LABEL_36;
    }
    if (!*(_QWORD *)(v31 + 16)
      || (v69 = sub_1001A852C(), v67 = sub_1001A878C(v69, v70), (v68 & 1) == 0)
      || (v71 = sub_1001A88F4(v67),
          sub_1001A861C(v71),
          v67 = sub_10016CF50(v0 + 160, v0 + 16, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String), (v67 & 1) == 0))
    {
LABEL_36:
      sub_10016D2B0(v67, v68);
      continue;
    }
    break;
  }
  v73 = *(NSObject **)(v0 + 296);
  *(_QWORD *)(v0 + 352) = *(_QWORD *)(v0 + 168);
  v74 = sub_1001A8544(v67);
  Logger.logObject.getter(v74);
  v75 = sub_1001A84C0();
  if (os_log_type_enabled(v73, v75))
  {
    v76 = (uint8_t *)sub_1001A8480();
    *(_WORD *)v76 = 0;
    sub_1001A84C8((void *)&_mh_execute_header, v73, v75, "BulletinHelpers assembleAttachment assembling avatar url", v76);
    sub_100165D98((uint64_t)v76);
  }
  v78 = *(_QWORD *)(v0 + 288);
  v77 = *(_QWORD *)(v0 + 296);
  v79 = *(_QWORD *)(v0 + 280);

  v80 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(v77, v79);
  if (*(_QWORD *)(v31 + 16) && (v80 = sub_1001A878C(7107189, 0xE300000000000000), (v81 & 1) != 0))
  {
    v82 = sub_1001A88F4(v80);
    v83 = v0 + 112;
    v80 = sub_1001A861C(v82);
  }
  else
  {
    v83 = v0 + 112;
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 128) = 0u;
  }
  sub_10016D2B0(v80, v81);
  if (*(_QWORD *)(v0 + 136))
  {
    if ((sub_10016CF50(v0 + 192, v83, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
    {
      *(_QWORD *)(v0 + 360) = *(_QWORD *)(v0 + 200);
      v84 = (_QWORD *)swift_task_alloc(dword_10031633C);
      *(_QWORD *)(v0 + 368) = v84;
      sub_1001A888C(v84);
      sub_100181060();
      return sub_1001A57C8(v85, v86, v87, v88, v89);
    }
  }
  else
  {
    sub_10016CBEC(v83, &qword_1003159B0);
  }
  v91 = (_QWORD *)swift_task_alloc(dword_10031634C);
  *(_QWORD *)(v0 + 376) = v91;
  *v91 = v0;
  v91[1] = sub_1001A3298;
  sub_100181060();
  return sub_1001A5C2C(v92, v93, v94);
}

uint64_t sub_1001A3298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100165E44();
  v0 = sub_100165DBC();
  sub_10016D13C(v0, v1);
  sub_10016CFA0();
  return sub_10016D26C(v2, v3, v4);
}

uint64_t sub_1001A32D4(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)(a1 + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_1001A32E4(uint64_t a1, uint64_t a2)
{
  return sub_1001A32F0(a1, a2, &qword_100316358);
}

uint64_t sub_1001A32F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = a2;
  sub_1001A7E70((uint64_t)&v5, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40), a3);
  return swift_continuation_resume(a1);
}

uint64_t sub_1001A3330(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;
  uint64_t v11;

  if (a1 == 0x4449726579616C70 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449726579616C70, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0;
  }
  if (a1 == 0x4143726579616C70 && a2 == 0xEA00000000004449)
  {
    v8 = 0xEA00000000004449;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4143726579616C70, 0xEA00000000004449, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8, a2);
    return 1;
  }
  if (a1 == 0x5255726174617661 && a2 == 0xE90000000000004CLL)
  {
    swift_bridgeObjectRelease(0xE90000000000004CLL, a2);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x5255726174617661, 0xE90000000000004CLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2, v11);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001A3494(char a1)
{
  if (!a1)
    return 0x4449726579616C70;
  if (a1 == 1)
    return 0x4143726579616C70;
  return 0x5255726174617661;
}

#error "1001A351C: call analysis failed (funcsize=10)"

void sub_1001A3528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, __int16 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_1001A8604();
  a21 = v25;
  a22 = v26;
  v28 = v27;
  sub_100161BD0(&qword_100316380);
  sub_1001A84D0();
  __chkstk_darwin(v29);
  sub_1001A8750();
  v30 = sub_1001A7C20();
  sub_1001A85EC((uint64_t)&type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys, v31, v30);
  if (v22)
  {
    sub_1001A8638();
  }
  else
  {
    HIBYTE(a12) = 0;
    v32 = sub_1001A8598((uint64_t)&a12 + 1);
    sub_1001A85D4(v32, v33);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a12, v23);
    sub_10016D290();
    v34 = sub_1001A87FC();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v34, v35);
    sub_1001A849C(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    sub_10016D290();
    v36 = sub_100161FE0(v28);
    v38 = sub_10016D13C(v36, v37);
    v40 = sub_1001648C4(v38, v39);
    sub_1001811EC(v40, v41);
    sub_1001A87CC();
  }
  sub_1001A8444();
}

void sub_1001A367C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_1001A36A0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;
  uint64_t v11;

  if (a1 == 0x44496D616461 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44496D616461, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0;
  }
  if (a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8, a2);
    return 1;
  }
  if (a1 == 0x4C52556567616D69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000, a2);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C52556567616D69, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2, v11);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001A37EC()
{
  return 3;
}

uint64_t sub_1001A37F4()
{
  return 0;
}

uint64_t sub_1001A3800(char a1)
{
  if (!a1)
    return 0x44496D616461;
  if (a1 == 1)
    return 0x4449656C646E7562;
  return 0x4C52556567616D69;
}

#error "1001A387C: call analysis failed (funcsize=10)"

void sub_1001A3888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  uint64_t (*v34)(void);
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, char *, uint64_t);

  sub_1001A8604();
  a23 = v28;
  a24 = v29;
  v50 = v30;
  v32 = v31;
  v34 = v33;
  v35 = v24;
  v37 = v36;
  v39 = sub_100161BD0(v38);
  sub_1001A877C();
  __chkstk_darwin(v40);
  sub_100163AD0();
  v42 = v37[3];
  v41 = v37[4];
  sub_100163928(v37, v42);
  v43 = v34();
  dispatch thunk of Encoder.container<A>(keyedBy:)(v32, v32, v43, v42, v41);
  v44 = *v35;
  v45 = v35[1];
  a14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v44, v45, &a14, v39);
  if (!v25)
  {
    v46 = v35[2];
    v47 = v35[3];
    a13 = 1;
    v50(v46, v47, &a13, v39);
    v48 = v35[4];
    v49 = v35[5];
    a12 = 2;
    v50(v48, v49, &a12, v39);
  }
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v39);
  sub_1001A8444();
}

void sub_1001A399C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, __int16 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_1001A8604();
  a21 = v24;
  a22 = v25;
  v27 = v26;
  sub_100161BD0(&qword_100316368);
  sub_1001A84D0();
  __chkstk_darwin(v28);
  sub_1001A8750();
  v29 = sub_1001A7BE4();
  sub_1001A85EC((uint64_t)&type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys, v30, v29);
  if (v22)
  {
    sub_1001A8638();
  }
  else
  {
    HIBYTE(a12) = 0;
    v31 = sub_1001A8598((uint64_t)&a12 + 1);
    sub_1001A85D4(v31, v32);
    sub_1001A8598((uint64_t)&a12);
    sub_10016D290();
    v33 = sub_1001A87FC();
    KeyedDecodingContainer.decode(_:forKey:)(v33, v34);
    sub_1001A849C(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    sub_10016D290();
    v35 = sub_100161FE0(v27);
    v37 = sub_10016D13C(v35, v36);
    v39 = sub_1001648C4(v37, v38);
    sub_1001811EC(v39, v40);
    sub_1001A87CC();
  }
  sub_1001A8444();
}

void sub_1001A3AE4()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_1001A3B08(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000, a2);
    v6 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2, v5);
    v6 = v4 ^ 1;
  }
  return v6 & 1;
}

uint64_t sub_1001A3B74()
{
  return 25705;
}

void sub_1001A3B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  sub_1001A8604();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  sub_100161BD0(&qword_1003163A8);
  sub_1001A84D0();
  __chkstk_darwin(v9);
  sub_1001A8514();
  v10 = v8[3];
  v11 = v8[4];
  sub_100163928(v8, v10);
  v12 = sub_1001A7C5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys, &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys, v12, v10, v11);
  KeyedEncodingContainer.encode(_:forKey:)(v6, v4, v13, v0);
  sub_100181628(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1001A8444();
}

uint64_t sub_1001A3C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v6 = sub_100161BD0(&qword_100316398);
  sub_1001A877C();
  __chkstk_darwin(v7);
  sub_1001A12BC();
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  sub_1001A8750();
  v10 = sub_1001A7C5C();
  v11 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys, &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys, v10, v8, v9);
  if (!v2)
  {
    v1 = KeyedDecodingContainer.decode(_:forKey:)(v11, v6);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  }
  sub_1001A8638();
  return v1;
}

uint64_t sub_1001A3D14(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;
  uint64_t v11;

  if (a1 == 0x726579616C70 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726579616C70, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0;
  }
  if (a1 == 1701667175 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667175, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8, a2);
    return 1;
  }
  if (a1 == 0x676E656C6C616863 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065, a2);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E656C6C616863, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2, v11);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_1001A3E54(unsigned __int8 a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  sub_1001A8858();
}

uint64_t sub_1001A3E90(char a1)
{
  if (!a1)
    return 0x726579616C70;
  if (a1 == 1)
    return 1701667175;
  return 0x676E656C6C616863;
}

uint64_t sub_1001A3EE0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  _BYTE v16[48];
  _BYTE v17[16];
  _BYTE v18[48];
  _BYTE v19[48];

  v4 = v1;
  v6 = sub_100161BD0(&qword_1003163D8);
  sub_1001A877C();
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_100163928(a1, v10);
  v12 = sub_1001A7C98();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BulletinHelpers.BulletinRelationships.CodingKeys, &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys, v12, v10, v11);
  sub_1001A8640(v4, (uint64_t)v19);
  sub_1001A8640((uint64_t)v19, (uint64_t)v16);
  v15 = 0;
  sub_1001A7DF8();
  sub_1001A84A8();
  if (!v2)
  {
    sub_1001A8640(v4 + 48, (uint64_t)v18);
    sub_1001A8640((uint64_t)v18, (uint64_t)v16);
    v15 = 1;
    sub_1001A7E34();
    sub_1001A84A8();
    sub_1001A8640(v4 + 96, (uint64_t)v17);
    sub_1001A8640((uint64_t)v17, (uint64_t)v16);
    v15 = 2;
    sub_1001A7EB0();
    sub_1001A84A8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v6);
}

void sub_1001A4068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  sub_1001A8604();
  a22 = v27;
  a23 = v28;
  v30 = v29;
  v32 = v31;
  sub_100161BD0(&qword_1003163B0);
  sub_1001A84D0();
  __chkstk_darwin(v33);
  sub_1001A8514();
  v34 = v30[3];
  v35 = v30[4];
  sub_100163928(v30, v34);
  v36 = sub_1001A7C98();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BulletinHelpers.BulletinRelationships.CodingKeys, &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys, v36, v34, v35);
  if (v23)
  {
    sub_1001A8638();
  }
  else
  {
    a13 = 0;
    sub_1001A7CD4();
    sub_1001A85A8((uint64_t)&unk_1002C7298);
    a13 = 1;
    sub_100183EA0(v51, v52, v53, v54, v55, v56);
    sub_1001A7D10();
    sub_1001A85A8((uint64_t)&unk_1002C7210);
    a13 = 2;
    sub_1001A7D80(v51, v52, v53, v54, v55, v56);
    sub_1001A7DBC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_1002C7320, &a13, v24, &unk_1002C7320);
    sub_100181628(v25, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    sub_100183EA0(v51, v52, v53, v54, v55, v56);
    v37 = sub_1001A8568();
    sub_1001A7D80(v37, v38, v39, v40, v41, v42);
    sub_10016D290();
    sub_1001A7D4C(v25, v52, v53, v54, v24, v26);
    sub_1001A7D4C(v51, v52, v53, v54, v55, v56);
    sub_1001A8638();
    sub_1001A7D4C(v51, v52, v53, v54, v55, v56);
    v43 = sub_1001A8568();
    sub_1001A7D4C(v43, v44, v45, v46, v47, v48);
    sub_1001648C4(v49, v50);
    *v32 = v51;
    v32[1] = v52;
    v32[2] = v53;
    v32[3] = v54;
    v32[4] = v55;
    v32[5] = v56;
    v32[6] = v54;
    v32[7] = v52;
    v32[8] = v53;
    v32[9] = v54;
    v32[10] = v53;
    v32[11] = v51;
    v32[12] = v51;
    v32[13] = v52;
  }
  sub_1001A8444();
}

uint64_t sub_1001A4378()
{
  char *v0;

  return sub_1001A3494(*v0);
}

uint64_t sub_1001A4380@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001A3330(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001A43A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A7C20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A43CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A7C20();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1001A440C: call analysis failed (funcsize=16)"

void sub_1001A4434()
{
  unsigned __int8 *v0;

  sub_1001A3E54(*v0);
}

void sub_1001A444C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1001A367C(a1, *v1);
}

uint64_t sub_1001A4454()
{
  char *v0;

  return sub_1001A3800(*v0);
}

uint64_t sub_1001A445C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001A36A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001A4480()
{
  return sub_1001A37F4();
}

uint64_t sub_1001A449C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1001A37EC();
  *a1 = result;
  return result;
}

uint64_t sub_1001A44C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A7BE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A44E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A7BE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1001A4528: call analysis failed (funcsize=16)"

uint64_t sub_1001A455C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001A3B08(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1001A4584()
{
  return sub_1001A37F4();
}

uint64_t sub_1001A459C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static AppMetadataFetcher.FetcherError.__derived_enum_equals(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001A45C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A7C5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A45EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A7C5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A4614@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1001A3C34(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

void sub_1001A463C()
{
  sub_1001A3B80();
}

void sub_1001A4654(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  sub_1001A8858();
}

uint64_t sub_1001A468C()
{
  char *v0;

  return sub_1001A3E90(*v0);
}

uint64_t sub_1001A4694@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001A3D14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001A46B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A7C98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A46E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A7C98();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001A4708(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11[14];

  sub_1001A4068(a1, a2, a3, a4, a5, a6, a7, a8, v11[0], v11[1], SWORD2(v11[1]), SBYTE6(v11[1]), SHIBYTE(v11[1]), v11[2], v11[3], v11[4], v11[5], v11[6], v11[7],
    v11[8],
    v11[9],
    v11[10],
    v11[11]);
  if (!v9)
    memcpy(a9, v11, 0x70uLL);
}

uint64_t sub_1001A4750(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[112];

  memcpy(v4, v1, sizeof(v4));
  return sub_1001A3EE0(a1);
}

uint64_t sub_1001A47A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  v6 = sub_100161BD0(&qword_100315B00);
  v5[19] = v6;
  v5[20] = sub_100180CA0(*(_QWORD *)(v6 - 8));
  v7 = sub_10019FB28();
  v5[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[22] = v8;
  v5[23] = sub_100180CA0(v8);
  sub_10016CFA0();
  return sub_10016D26C(v9, v10, v11);
}

uint64_t sub_1001A4808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 160);
  v27 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = 8222587;
  *(_QWORD *)(v0 + 40) = 0xE300000000000000;
  *(_QWORD *)(v0 + 48) = 3682865;
  *(_QWORD *)(v0 + 56) = 0xE300000000000000;
  v3 = sub_100164810();
  v4 = sub_1001A854C(v0 + 32, v0 + 48);
  v6 = v5;
  *(_QWORD *)(v0 + 64) = v4;
  *(_QWORD *)(v0 + 80) = 8218747;
  *(_QWORD *)(v0 + 72) = v5;
  *(_QWORD *)(v0 + 88) = 0xE300000000000000;
  *(_QWORD *)(v0 + 96) = 3682865;
  *(_QWORD *)(v0 + 104) = 0xE300000000000000;
  v7 = sub_1001A854C(v0 + 80, v0 + 96);
  swift_bridgeObjectRelease(v6, v8);
  URL.init(string:)(v7);
  v9 = sub_10016445C(v1, 1, v27);
  if ((_DWORD)v9 == 1)
  {
    v11 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 112);
    sub_10016D010(v9, v10);
    sub_10016CBEC(v11, &qword_100315B00);
    sub_100161B54(v13, 1, 1, v12);
    sub_1001A88E8();
    sub_10016D2A8();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 144);
    sub_1001A88C4(*(_QWORD *)(v0 + 176));
    v18 = objc_msgSend((id)objc_opt_self(GKClientProxy), "gameCenterClient", &type metadata for String, v3, v3, v3);
    *(_QWORD *)(v0 + 192) = v18;
    v19 = String._bridgeToObjectiveC()();
    sub_10016D010((uint64_t)v19, v20);
    v21 = objc_msgSend(v19, "_gkSHA256Hash");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    sub_10016D290();
    sub_1001A88A0();
    sub_1001A88AC();
    sub_1001811EC(v22, v23);
    v24 = v16;
    *(_QWORD *)(v0 + 200) = v16;
    v25 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 208) = v25;
    v25[2] = v18;
    v25[3] = v15;
    v25[4] = v17;
    v25[5] = v24;
    v26 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 216) = v26;
    *v26 = v0;
    v26[1] = sub_1001A4A9C;
    sub_10016CFA0();
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
}

uint64_t sub_1001A4A9C()
{
  uint64_t v0;
  uint64_t v1;

  sub_100165E44();
  v0 = sub_100165DBC();
  sub_1001648C4(v0, v1);
  sub_10016D2A8();
  sub_10016CFA0();
  return sub_10016CF78();
}

uint64_t sub_1001A4ADC()
{
  uint64_t v0;

  sub_10016D448();
  sub_1001A88E8();
  sub_10016D2A8();
  return sub_10016D170(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1001A4B18(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSURL *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  __CFString *v31;
  void *v32;
  char *v33;
  uint64_t v34;
  NSString v35;
  __CFString *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  _QWORD aBlock[5];
  uint64_t v44;

  v42 = a5;
  v38 = a1;
  v8 = sub_100161BD0(&qword_100316328);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  v9 = *(_QWORD *)(v39 + 64);
  __chkstk_darwin(v8);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  sub_10016CBB4(0, &qword_100316330, &off_1002BA660);
  v13 = a2;
  v41 = sub_1001A4DB0(0, a2, 0);
  if (v41)
  {
    URL._bridgeToObjectiveC()(v14);
    v37 = v15;
    v36 = CFSTR("GKBulletins");
    v34 = a4;
    v16 = v42;
    v35 = String._bridgeToObjectiveC()();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v10);
    v33 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v17 = v39;
    v18 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v18, v38, v40);
    v20 = *(unsigned __int8 *)(v11 + 80);
    v21 = (v20 + 16) & ~v20;
    v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = *(unsigned __int8 *)(v17 + 80);
    v24 = (v23 + v22 + 16) & ~v23;
    v25 = swift_allocObject(&unk_1002C7010, v24 + v9, v20 | v23 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v25 + v21, v33, v10);
    v26 = (_QWORD *)(v25 + v22);
    *v26 = v34;
    v26[1] = v16;
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v25 + v24, v18, v19);
    aBlock[4] = sub_1001A5058;
    v44 = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001A50DC;
    aBlock[3] = &unk_1002C7028;
    v27 = _Block_copy(aBlock);
    v28 = v44;
    swift_bridgeObjectRetain(v16);
    swift_release(v28);
    v29 = v41;
    v31 = v36;
    v30 = v37;
    v32 = v35;
    objc_msgSend(v41, "requestImageDataForURL:subdirectory:fileName:handler:", v37, v36, v35, v27);
    _Block_release(v27);

  }
  else
  {
    __break(1u);
  }
}

void sub_1001A4DA4(uint64_t a1)
{
  uint64_t v1;

  sub_1001A4B18(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

id sub_1001A4DB0(void *a1, void *a2, void *a3)
{
  uint64_t v3;
  id v7;

  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v3), "serviceWithTransport:forClient:credential:", a1, a2, a3);

  return v7;
}

uint64_t sub_1001A4E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  Class isa;
  unsigned int v12;
  void *v13;
  NSURL *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v7 = sub_100161BD0(&qword_100315B00);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)objc_opt_self(GKImageRestrictions);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v12 = objc_msgSend(v10, "isAuthorizedForGamesWithImageData:", isa);

  if (v12
    && (v13 = (void *)objc_opt_self(NSData),
        URL._bridgeToObjectiveC()(v14),
        v16 = v15,
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("GKBulletins")),
        v19 = sub_1001A7120((uint64_t)v16, v17, v18, a4, a5, v13),
        v21 = v20,
        v16,
        v21))
  {
    URL.init(string:)(v19);
    swift_bridgeObjectRelease(v21, v22);
  }
  else
  {
    v23 = type metadata accessor for URL(0);
    sub_100161B54((uint64_t)v9, 1, 1, v23);
  }
  v24 = sub_100161BD0(&qword_100316328);
  return CheckedContinuation.resume(returning:)(v9, v24);
}

uint64_t sub_1001A4F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = sub_10019FB28();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = sub_100161BD0(&qword_100316328);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 16) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 8), v12);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1001A5058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  sub_10019FB28();
  sub_1001A8730();
  v7 = v6 & ~v5;
  v9 = (*(_QWORD *)(v8 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100161BD0(&qword_100316328);
  return sub_1001A4E18(a1, a2, v2 + v7, *(_QWORD *)(v2 + v9), *(_QWORD *)(v2 + v9 + 8));
}

uint64_t sub_1001A50DC(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, unint64_t);
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *(void (**)(uint64_t, unint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v8 = v7;

  v4(v6, v8);
  sub_10016FF44(v6, v8);
  return swift_release(v3);
}

uint64_t sub_1001A514C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001A515C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001A5164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  UIImage *v22;
  NSData *v23;
  NSData *v24;
  uint64_t v25;
  uint64_t v26;
  __CFString *v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  void *v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];
  uint64_t v66;
  uint64_t v67;

  v63 = a3;
  v8 = sub_100180D8C();
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  v9 = __chkstk_darwin(v8);
  v59 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = ((char *)&v55 - v12);
  __chkstk_darwin(v11);
  v56 = (char *)&v55 - v14;
  v58 = type metadata accessor for URL.DirectoryHint(0);
  v15 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  sub_100163AD0();
  v16 = sub_100161BD0(&qword_100315B00);
  __chkstk_darwin(v16);
  sub_1001A8514();
  v64 = sub_10019FB28();
  v57 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  sub_1001A12BC();
  v17 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 4, 3, 40.0);
  sub_10016CBB4(0, &qword_100316340, UIImage_ptr);
  v62 = v17;
  sub_10018135C();
  v18 = sub_1001A6210(a1, a2, v17);
  if (!v18
    || (v19 = v18,
        v20 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor"),
        v21 = objc_msgSend(v19, "imageWithTintColor:", v20),
        v19,
        v20,
        v22 = (UIImage *)sub_1001A628C(8.0),
        v21,
        !v22))
  {
LABEL_7:
    static GKLog.daemon.getter(v18);
    v38 = swift_bridgeObjectRetain_n(a2, 2);
    Logger.logObject.getter(v38);
    v39 = sub_1001A84C0();
    if (os_log_type_enabled(v13, v39))
    {
      v40 = (uint8_t *)sub_100165DA4(12);
      v41 = sub_100165DA4(32);
      v65[0] = v41;
      *(_DWORD *)v40 = 136315138;
      sub_10018135C();
      v66 = sub_10016FE60(a1, a2, v65);
      sub_1001A884C((uint64_t)&v66, (uint64_t)&v67);
      swift_bridgeObjectRelease_n(a2, 3);
      sub_100165E04((void *)&_mh_execute_header, v13, v39, "BulletinHelpers assembleSymbolAttachmentURL failed to create symbol: %s", v40);
      v54 = 1;
      sub_10019FAD4(v42, v43, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v41);
      sub_100165D98((uint64_t)v40);
      sub_1001A86D8();

      sub_1001A881C();
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      sub_1001A86D8();
      sub_1001A881C();
      v54 = 1;
    }
    v53 = v63;
    goto LABEL_11;
  }
  v23 = UIImagePNGRepresentation(v22);
  if (!v23)
  {

    goto LABEL_7;
  }
  v24 = v23;
  v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  v65[0] = a1;
  v65[1] = a2;
  sub_10018135C();
  v27 = CFSTR("GKBulletins");
  sub_1001A8720();
  v28 = String._bridgeToObjectiveC()();
  sub_1001648C4((uint64_t)v28, v29);
  v30 = sub_1001A8840();
  v32 = (id)GKImageCachePathForSubdirectoryAndFilename(v30, v31);

  if (!v32)
  {
    v45 = v56;
    v46 = static GKLog.daemon.getter(v33);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.info.getter(v47);
    v49 = os_log_type_enabled(v47, v48);
    v50 = v62;
    v53 = v63;
    v51 = v55;
    if (v49)
    {
      v52 = (_WORD *)sub_1001A8480();
      sub_100199AA4(v52);
      sub_1001A84C8((void *)&_mh_execute_header, v47, v48, "BulletinHelpers assembleSymbolAttachmentURL failed to create disk path", (uint8_t *)v27);
      sub_100165D98((uint64_t)v27);

      sub_1001A87E4(v51);
    }
    else
    {

      sub_1001A87E4(v51);
    }

    (*(void (**)(char *, uint64_t))(v60 + 8))(v45, v61);
    v54 = 1;
LABEL_11:
    v34 = v64;
    return sub_100161B54(v53, v54, 1, v34);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v32);

  v34 = v64;
  sub_100161B54(v5, 1, 1, v64);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v3, enum case for URL.DirectoryHint.inferFromPath(_:), v58);
  v35 = sub_100165E7C();
  URL.init(filePath:directoryHint:relativeTo:)(v35, v36, v3, v5);
  v37 = v55;
  Data.write(to:options:)(v4, 0, v55, v26);

  sub_1001A86D8();
  sub_1001A87E4(v37);
  v53 = v63;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v63, v4, v34);
  v54 = 0;
  return sub_100161B54(v53, v54, 1, v34);
}

uint64_t sub_1001A57C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  v6 = sub_100161BD0(&qword_100315B00);
  v5[19] = v6;
  v5[20] = sub_100180CA0(*(_QWORD *)(v6 - 8));
  v7 = sub_10019FB28();
  v5[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[22] = v8;
  v5[23] = sub_100180CA0(v8);
  v9 = sub_100180D8C();
  v5[24] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[25] = v10;
  v5[26] = sub_1001A846C(v10);
  v5[27] = sub_1001999F4();
  sub_10016CFA0();
  return sub_10016D26C(v11, v12, v13);
}

uint64_t sub_1001A5850(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  NSString v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;

  v2 = v1[27];
  v3 = sub_1001A8544(a1);
  Logger.logObject.getter(v3);
  v4 = sub_1001A84C0();
  if (os_log_type_enabled(v2, v4))
  {
    v5 = (uint8_t *)sub_1001A8480();
    *(_WORD *)v5 = 0;
    sub_1001A84C8((void *)&_mh_execute_header, v2, v4, "BulletinHelpers assemblePlayerAvatarURL", v5);
    sub_100165D98((uint64_t)v5);
  }
  v6 = v1[20];
  v55 = v1[21];
  v8 = v1[15];
  v7 = v1[16];

  sub_1001A88DC();
  v1[2] = v8;
  v1[3] = v7;
  v1[4] = 8222587;
  v1[5] = 0xE300000000000000;
  v1[6] = 3682865;
  v1[7] = 0xE300000000000000;
  v9 = sub_100164810();
  sub_1001A8664();
  v1[8] = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v10, v11, v12, v13, v14, v15, v16, v17);
  v1[9] = v18;
  v1[10] = 8218747;
  v1[11] = 0xE300000000000000;
  v1[12] = 3682865;
  v1[13] = 0xE300000000000000;
  v53 = v9;
  v54 = v9;
  v52 = v9;
  sub_1001A8664();
  v27 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v19, v20, v21, v22, v23, v24, v25, v26);
  sub_1001811EC(v27, v28);
  URL.init(string:)(v27);
  v29 = sub_10016445C(v6, 1, v55);
  if ((_DWORD)v29 == 1)
  {
    v31 = v1[26];
    v32 = (uint8_t *)v1[20];
    sub_10016D13C(v29, v30);
    sub_10016CBEC((uint64_t)v32, &qword_100315B00);
    v34 = static GKLog.daemon.getter(v33);
    Logger.logObject.getter(v34);
    v35 = sub_1001A84C0();
    if (sub_100194B48(v35))
    {
      v36 = (_WORD *)sub_1001A8480();
      sub_100199AA4(v36);
      sub_1001A84C8((void *)&_mh_execute_header, v31, (os_log_type_t)v31, "BulletinHelpers assemblePlayerAvatarURL invalid url", v32);
      sub_100165D98((uint64_t)v32);
    }
    v37 = v1[21];
    v38 = v1[14];

    sub_1001A88DC();
    sub_100161B54(v38, 1, 1, v37);
    sub_1001A8710();
    sub_10016D2A8();
    sub_100180C98();
    sub_100180D6C();
    sub_10016D154();
    __asm { BR              X0 }
  }
  v40 = v1[23];
  v42 = v1[17];
  v41 = v1[18];
  sub_1001A88C4(v1[22]);
  v43 = objc_msgSend((id)objc_opt_self(GKClientProxy), "gameCenterClient", &type metadata for String, v52, v53, v54);
  v1[28] = v43;
  v44 = String._bridgeToObjectiveC()();
  sub_10016D13C((uint64_t)v44, v45);
  v46 = objc_msgSend(v44, "_gkSHA256Hash");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  sub_100176C14();
  sub_1001A88A0();
  sub_1001A88AC();
  sub_1001811EC(v47, v48);
  v1[29] = v41;
  v49 = (_QWORD *)swift_task_alloc(64);
  v1[30] = v49;
  v49[2] = v43;
  v49[3] = v40;
  v49[4] = v42;
  v49[5] = v41;
  v49[6] = v42;
  v49[7] = v41;
  v50 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v1[31] = v50;
  *v50 = v1;
  v50[1] = sub_1001A5BA4;
  sub_10016CFA0();
  sub_10016D154();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1001A5BA4()
{
  uint64_t v0;
  uint64_t v1;

  sub_100165E44();
  v0 = sub_100165DBC();
  sub_1001648C4(v0, v1);
  sub_10016D2A8();
  sub_10016CFA0();
  return sub_10016CF78();
}

uint64_t sub_1001A5BE4()
{
  uint64_t v0;

  sub_10016D448();
  sub_1001A8710();
  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  return sub_10016D170(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001A5C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  v4 = sub_100180D8C();
  v3[20] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[21] = v5;
  v3[22] = sub_1001A846C(v5);
  v3[23] = sub_1001999F4();
  v3[24] = sub_1001999F4();
  v6 = type metadata accessor for URL.DirectoryHint(0);
  v3[25] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[26] = v7;
  v3[27] = sub_100180CA0(v7);
  v8 = sub_100161BD0(&qword_100315B00);
  v3[28] = sub_100180CA0(*(_QWORD *)(v8 - 8));
  v9 = sub_10019FB28();
  v3[29] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[30] = v10;
  v3[31] = sub_100180CA0(v10);
  sub_10016CFA0();
  return sub_10016D26C(v11, v12, v13);
}

uint64_t sub_1001A5CD0()
{
  uint64_t v0;
  uint64_t v1;
  __CFString *v2;
  NSString v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSString v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  _WORD *v19;

  v2 = CFSTR("GKBulletins");
  sub_10016D290();
  sub_1001A8720();
  v3 = String._bridgeToObjectiveC()();
  sub_10016D13C((uint64_t)v3, v4);
  v5 = (id)GKImageCachePathForSubdirectoryAndFilename(v2, v3);

  if (v5)
  {
    v7 = v0 + 16;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v10 = v9;

    *(_QWORD *)(v0 + 256) = v8;
    *(_QWORD *)(v0 + 264) = v10;
    v11 = (void *)objc_opt_self(GKBulletinMonogramRenderer);
    v12 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 272) = v12;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1001A5EB4;
    v13 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v14 = (_QWORD *)(v0 + 80);
    v14[1] = 0x40000000;
    v14[2] = sub_1001A6EDC;
    v14[3] = &unk_1002C7118;
    v14[4] = v13;
    objc_msgSend(v11, "monogramImageForPlayerID:withCompletion:", v12, v14);
    return swift_continuation_await(v7);
  }
  else
  {
    v16 = *(NSObject **)(v0 + 184);
    v17 = sub_1001A8544(v6);
    Logger.logObject.getter(v17);
    v18 = sub_1001A84C0();
    if (sub_100194B48(v18))
    {
      v19 = (_WORD *)sub_1001A8480();
      sub_100199AA4(v19);
      sub_1001A84C8((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "BulletinHelpers assemblePlayerMonogramAttachmentURL failed to create disk path", (uint8_t *)v2);
      sub_100165D98((uint64_t)v2);
    }
    sub_1001A8900();
    sub_1001A876C();
    sub_1001A8794(v1);
    sub_1001A86B0();
    sub_10016D2A8();
    sub_100180C98();
    sub_100180D6C();
    sub_100180E00();
    sub_1001810BC();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001A5EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_1001A5EEC(uint64_t a1, uint64_t a2)
{
  NSData *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(void **)(v3 + 120);
  v6 = *(void **)(v3 + 272);
  if (v5)
  {
    v2 = UIImagePNGRepresentation(*(UIImage **)(v3 + 120));

    v9 = *(_QWORD *)(v3 + 264);
    if (v2)
    {
      v10 = *(_QWORD *)(v3 + 248);
      v32 = *(_QWORD *)(v3 + 256);
      v11 = *(_QWORD *)(v3 + 224);
      v12 = *(_QWORD *)(v3 + 208);
      v13 = *(_QWORD *)(v3 + 216);
      v30 = *(_QWORD *)(v3 + 200);
      v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
      v15 = v14;

      sub_1001A8794(v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v13, enum case for URL.DirectoryHint.inferFromPath(_:), v30);
      URL.init(filePath:directoryHint:relativeTo:)(v32, v9, v13, v11);
      Data.write(to:options:)(v10, 0, v31, v15);
      v17 = *(_QWORD *)(v3 + 240);
      v16 = *(_QWORD *)(v3 + 248);
      v18 = *(_QWORD *)(v3 + 232);
      v25 = *(_QWORD *)(v3 + 136);
      sub_1001A890C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v25, v16, v18);
      v26 = v25;
      v27 = 0;
      v28 = v18;
      goto LABEL_9;
    }
    v19 = sub_10016D13C(v7, v8);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v3 + 264), a2);

  }
  v20 = *(NSObject **)(v3 + 192);
  v21 = sub_1001A8544(v19);
  Logger.logObject.getter(v21);
  v22 = sub_1001A84C0();
  if (sub_100194B48(v22))
  {
    v23 = (_WORD *)sub_1001A8480();
    sub_100199AA4(v23);
    sub_1001A84C8((void *)&_mh_execute_header, v20, (os_log_type_t)v6, "BulletinHelpers assemblePlayerMonogramAttachmentURL failed to create image", (uint8_t *)v2);
    sub_100165D98((uint64_t)v2);
  }
  v24 = *(_QWORD *)(v3 + 232);
  sub_1001A8900();
  sub_1001A876C();
  v26 = v4;
  v27 = 1;
  v28 = v24;
LABEL_9:
  sub_100161B54(v26, v27, 1, v28);
  sub_1001A86B0();
  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  sub_1001810BC();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

id sub_1001A6210(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  NSString v7;
  uint64_t v8;
  id v9;

  v4 = v3;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v8);
  }
  else
  {
    v7 = 0;
  }
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "_systemImageNamed:withConfiguration:", v7, a3);

  return v9;
}

uint64_t sub_1001A628C(double a1)
{
  void *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t result;
  _QWORD v16[5];
  uint64_t v17;

  objc_msgSend(v1, "size");
  v4 = a1 + a1 + v3;
  objc_msgSend(v1, "size");
  v6 = a1 + a1 + v5;
  v7 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRendererFormat), "init");
  v8 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:format:", v7, v4, v6);
  v9 = swift_allocObject(&unk_1002C7140, 40, 7);
  *(_QWORD *)(v9 + 16) = v1;
  *(double *)(v9 + 24) = a1;
  *(double *)(v9 + 32) = a1;
  v10 = swift_allocObject(&unk_1002C7168, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1001A731C;
  *(_QWORD *)(v10 + 24) = v9;
  v16[4] = sub_1001A843C;
  v17 = v10;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1001A6F6C;
  v16[3] = &unk_1002C7180;
  v11 = _Block_copy(v16);
  v12 = v17;
  v13 = v1;
  swift_retain(v10);
  swift_release(v12);
  v14 = objc_msgSend(v8, "imageWithActions:", v11);

  _Block_release(v11);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v10, "", 108, 284, 31, 1);
  swift_release(v9);
  result = swift_release(v10);
  if ((v7 & 1) == 0)
    return (uint64_t)v14;
  __break(1u);
  return result;
}

void sub_1001A6454(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  NSURL *v15;
  void *v16;
  void *v17;
  void *v18;
  __CFString *v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v29 = a6;
  v30 = a7;
  v9 = sub_100161BD0(&qword_100316328);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10016CBB4(0, &qword_100316330, &off_1002BA660);
  v13 = a2;
  v14 = sub_1001A4DB0(0, a2, 0);
  if (v14)
  {
    v16 = v14;
    URL._bridgeToObjectiveC()(v15);
    v18 = v17;
    v19 = CFSTR("GKBulletins");
    v20 = String._bridgeToObjectiveC()();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
    v21 = *(unsigned __int8 *)(v10 + 80);
    v22 = (v21 + 16) & ~v21;
    v23 = (v11 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = swift_allocObject(&unk_1002C7060, v23 + 16, v21 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v24 + v22, v12, v9);
    v25 = (_QWORD *)(v24 + v23);
    v26 = v30;
    *v25 = v29;
    v25[1] = v26;
    aBlock[4] = sub_1001A7260;
    v32 = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001A50DC;
    aBlock[3] = &unk_1002C7078;
    v27 = _Block_copy(aBlock);
    v28 = v32;
    swift_bridgeObjectRetain(v26);
    swift_release(v28);
    objc_msgSend(v16, "requestImageDataForURL:subdirectory:fileName:handler:", v18, v19, v20, v27);
    _Block_release(v27);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001A664C(uint64_t a1, unint64_t a2, uint64_t a3, UIImage *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  UIImage *v26;
  NSData *v27;
  NSData *v28;
  unint64_t v29;
  __CFString *v30;
  Swift::String v31;
  uint64_t v32;
  NSString v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  UIImage *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  UIImage *v72;
  uint64_t v73;

  v66 = a4;
  v69 = a3;
  v8 = type metadata accessor for URL.DirectoryHint(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100161BD0(&qword_100315B00);
  __chkstk_darwin(v12);
  v70 = (uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for URL(0);
  v64 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  v67 = *(_QWORD *)(v16 - 8);
  v68 = v16;
  v17 = __chkstk_darwin(v16);
  v65 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v61 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v61 - v22;
  sub_10016CBB4(0, &qword_100316340, UIImage_ptr);
  sub_100170728(a1, a2);
  v24 = sub_1001A6CD8(a1, a2);
  if (v24)
  {
    v25 = v24;
    v26 = (UIImage *)sub_1001A6D4C();

    v27 = UIImagePNGRepresentation(v26);
    if (v27)
    {
      v28 = v27;
      v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v63 = v29;

      v72 = v66;
      v73 = a5;
      v30 = CFSTR("GKBulletins");
      swift_bridgeObjectRetain(a5);
      v31._countAndFlagsBits = 1735290926;
      v31._object = (void *)0xE400000000000000;
      String.append(_:)(v31);
      v32 = v73;
      v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v32, v34);
      v35 = (id)GKImageCachePathForSubdirectoryAndFilename(v30, v33);

      if (v35)
      {
        v66 = v26;
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v39 = v38;

        v41 = v70;
        v40 = v71;
        sub_100161B54(v70, 1, 1, v71);
        (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for URL.DirectoryHint.inferFromPath(_:), v8);
        URL.init(filePath:directoryHint:relativeTo:)(v37, v39, v11, v41);
        v42 = v62;
        v43 = v63;
        Data.write(to:options:)(v15, 0, v62, v63);
        v58 = v64;
        (*(void (**)(uint64_t, char *, uint64_t))(v64 + 16))(v41, v15, v40);
        sub_100161B54(v41, 0, 1, v40);
        v59 = sub_100161BD0(&qword_100316328);
        CheckedContinuation.resume(returning:)(v41, v59);

        sub_10016FF44(v42, v43);
        return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v15, v40);
      }
      else
      {
        v51 = v62;
        v50 = v63;
        v52 = static GKLog.daemon.getter(v36);
        v53 = Logger.logObject.getter(v52);
        v54 = static os_log_type_t.info.getter(v53);
        if (os_log_type_enabled(v53, v54))
        {
          v55 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v55 = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "BulletinHelpers assemblePlayerAvatarURL failed to create disk path", v55, 2u);
          swift_slowDealloc(v55, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v67 + 8))(v23, v68);
        v56 = v70;
        sub_100161B54(v70, 1, 1, v71);
        v57 = sub_100161BD0(&qword_100316328);
        CheckedContinuation.resume(returning:)(v56, v57);

        return sub_10016FF44(v51, v50);
      }
    }

  }
  v44 = static GKLog.daemon.getter(v24);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.info.getter(v45);
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "BulletinHelpers assemblePlayerAvatarURL failed to create image", v47, 2u);
    swift_slowDealloc(v47, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v67 + 8))(v21, v68);
  v48 = v70;
  sub_100161B54(v70, 1, 1, v71);
  v49 = sub_100161BD0(&qword_100316328);
  return CheckedContinuation.resume(returning:)(v48, v49);
}

id sub_1001A6CD8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  id v5;
  Class isa;
  id v7;

  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, "initWithData:", isa);
  sub_10016FF44(a1, a2);

  return v7;
}

uint64_t sub_1001A6D4C()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t result;
  _QWORD v13[5];
  uint64_t v14;

  objc_msgSend(v0, "size");
  v2 = v1;
  objc_msgSend(v0, "size");
  v4 = v3;
  v5 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:", v2, v3);
  v6 = (double *)swift_allocObject(&unk_1002C70B0, 56, 7);
  v6[2] = 0.0;
  v6[3] = 0.0;
  v6[4] = v2;
  v6[5] = v4;
  *((_QWORD *)v6 + 6) = v0;
  v7 = swift_allocObject(&unk_1002C70D8, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1001A72E4;
  *(_QWORD *)(v7 + 24) = v6;
  v13[4] = sub_100162E14;
  v14 = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_1001A6F6C;
  v13[3] = &unk_1002C70F0;
  v8 = _Block_copy(v13);
  v9 = v14;
  v10 = v0;
  swift_retain(v7);
  swift_release(v9);
  v11 = objc_msgSend(v5, "imageWithActions:", v8);

  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 108, 292, 37, 1);
  swift_release(v6);
  result = swift_release(v7);
  if ((v5 & 1) == 0)
    return (uint64_t)v11;
  __break(1u);
  return result;
}

uint64_t sub_1001A6EDC(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  return sub_1001A32F0(v3, (uint64_t)a2, &qword_100316350);
}

id sub_1001A6F14(int a1, id a2, double a3, double a4)
{
  double v7;
  double v8;

  objc_msgSend(a2, "size");
  return objc_msgSend(a2, "drawInRect:", a3, a4, v7, v8);
}

void sub_1001A6F6C(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

void sub_1001A6FA0(double a1, double a2, double a3, double a4, uint64_t a5, void *a6)
{
  CGImage *v11;
  CGImage *v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  CGImageRef v16;
  CGImage *v17;
  double v18;
  id v19;
  id v20;
  CGRect v21;

  v20 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithOvalInRect:", a1, a2, a3, a4);
  objc_msgSend(v20, "addClip");
  v11 = (CGImage *)objc_msgSend(a6, "CGImage");
  if (v11)
  {
    v12 = v11;
    objc_msgSend(a6, "size");
    v14 = v13;
    objc_msgSend(a6, "size");
    v21.size.height = v15;
    v21.origin.x = 0.0;
    v21.origin.y = 0.0;
    v21.size.width = v14;
    v16 = CGImageCreateWithImageInRect(v12, v21);

    if (v16)
    {
      v17 = v16;
      objc_msgSend(a6, "scale");
      v19 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v17, objc_msgSend(a6, "imageOrientation"), v18);

      objc_msgSend(v19, "drawInRect:", a1, a2, a3, a4);
    }
  }

}

uint64_t sub_1001A7120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  NSString v9;
  uint64_t v10;
  NSString v11;
  id v12;
  uint64_t v13;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3, v10);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(a6, "_gkImageCachePathForURL:subdirectory:filename:", a1, v9, v11);

  if (!v12)
    return 0;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

  return v13;
}

void sub_1001A71E0(uint64_t a1)
{
  uint64_t v1;

  sub_1001A6454(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1001A71F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100161BD0(&qword_100316328);
  sub_1001A8730();
  v3 = v2 & ~v1;
  v5 = v1 | 7;
  v6 = (*(_QWORD *)(v4 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v4 + 8))(v0 + v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8), v7);
  v8 = sub_100165E7C();
  return swift_deallocObject(v8, v9, v5);
}

uint64_t sub_1001A7260(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100161BD0(&qword_100316328);
  sub_1001A8730();
  v7 = v6 & ~v5;
  v9 = v2 + ((*(_QWORD *)(v8 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1001A664C(a1, a2, v2 + v7, *(UIImage **)v9, *(_QWORD *)(v9 + 8));
}

uint64_t sub_1001A72C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

void sub_1001A72E4(uint64_t a1)
{
  uint64_t v1;

  sub_1001A6FA0(*(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), a1, *(void **)(v1 + 48));
}

uint64_t sub_1001A72F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

id sub_1001A731C(int a1)
{
  uint64_t v1;

  return sub_1001A6F14(a1, *(id *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32));
}

__n128 sub_1001A7338(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships.GameRelationship()
{
  sub_1001A8680();
}

uint64_t sub_1001A7364(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease(a1[1], a2);
  swift_bridgeObjectRelease(a1[3], v3);
  return sub_1001A865C(a1[5], v4);
}

void sub_1001A7390(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  sub_10016D290();
  sub_100176C14();
  sub_1000BA184();
}

void sub_1001A73D4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  v5 = swift_bridgeObjectRetain(v4);
  sub_10016D110(v5, v6);
  a1[2] = a2[2];
  v7 = a2[3];
  a1[3] = v7;
  v8 = swift_bridgeObjectRetain(v7);
  sub_10016D110(v8, v9);
  a1[4] = a2[4];
  v10 = a2[5];
  a1[5] = v10;
  v11 = swift_bridgeObjectRetain(v10);
  sub_1001648C4(v11, v12);
  sub_1000BA184();
}

void sub_1001A744C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5, a2);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7, v8);
  v9 = a2[5];
  v10 = a1[5];
  a1[4] = a2[4];
  a1[5] = v9;
  swift_bridgeObjectRelease(v10, v11);
  sub_10016219C();
}

uint64_t sub_1001A749C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001A74DC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships.PlayerRelationship()
{
  sub_1001A8680();
}

_QWORD *sub_1001A7534(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_1001A7560(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *sub_1001A7568(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4, v5);
  return a1;
}

_QWORD *sub_1001A75A8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4, a2);
  return a1;
}

uint64_t sub_1001A75D8(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001A7618(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships.ChallengeRelationship()
{
  sub_1001A8680();
}

void type metadata accessor for BulletinHelpers()
{
  sub_1001A8680();
}

uint64_t sub_1001A766C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  if (v3)
  {
    swift_bridgeObjectRelease(v3, a2);
    swift_bridgeObjectRelease(a1[3], v4);
    swift_bridgeObjectRelease(a1[5], v5);
  }
  v6 = a1[7];
  if (v6)
  {
    swift_bridgeObjectRelease(v6, a2);
    swift_bridgeObjectRelease(a1[9], v7);
    swift_bridgeObjectRelease(a1[11], v8);
  }
  return swift_bridgeObjectRelease(a1[13], a2);
}

_QWORD *sub_1001A76C4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = a2[1];
  if (v4)
  {
    *a1 = *a2;
    a1[1] = v4;
    v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v7;
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  }
  v8 = a2[7];
  if (v8)
  {
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    v10 = a2[11];
    a1[10] = a2[10];
    a1[11] = v10;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v11 = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v11;
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  }
  v12 = a2[13];
  a1[12] = a2[12];
  a1[13] = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

_QWORD *sub_1001A7794(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a1[1];
  v5 = a2[1];
  if (v4)
  {
    if (v5)
    {
      *a1 = *a2;
      v6 = a2[1];
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRelease(v4, v7);
      a1[2] = a2[2];
      v8 = a2[3];
      v9 = a1[3];
      a1[3] = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease(v9, v10);
      a1[4] = a2[4];
      v11 = a2[5];
      v12 = a1[5];
      a1[5] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12, v13);
    }
    else
    {
      sub_1001A79C0((uint64_t)a1);
      v18 = *((_OWORD *)a2 + 1);
      v17 = *((_OWORD *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v18;
      *((_OWORD *)a1 + 2) = v17;
    }
  }
  else if (v5)
  {
    *a1 = *a2;
    v14 = a2[1];
    a1[1] = v14;
    a1[2] = a2[2];
    v15 = a2[3];
    a1[3] = v15;
    a1[4] = a2[4];
    v16 = a2[5];
    a1[5] = v16;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
  }
  else
  {
    v19 = *(_OWORD *)a2;
    v20 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v20;
    *(_OWORD *)a1 = v19;
  }
  v21 = a1 + 6;
  v22 = a2 + 6;
  v23 = a1[7];
  v24 = a2[7];
  if (v23)
  {
    if (v24)
    {
      a1[6] = a2[6];
      v25 = a2[7];
      a1[7] = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v23, v26);
      a1[8] = a2[8];
      v27 = a2[9];
      v28 = a1[9];
      a1[9] = v27;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v28, v29);
      a1[10] = a2[10];
      v30 = a2[11];
      v31 = a1[11];
      a1[11] = v30;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRelease(v31, v32);
    }
    else
    {
      sub_1001A79EC((uint64_t)(a1 + 6));
      v37 = *((_OWORD *)a2 + 4);
      v36 = *((_OWORD *)a2 + 5);
      *v21 = *v22;
      *((_OWORD *)a1 + 4) = v37;
      *((_OWORD *)a1 + 5) = v36;
    }
  }
  else if (v24)
  {
    a1[6] = a2[6];
    v33 = a2[7];
    a1[7] = v33;
    a1[8] = a2[8];
    v34 = a2[9];
    a1[9] = v34;
    a1[10] = a2[10];
    v35 = a2[11];
    a1[11] = v35;
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
  }
  else
  {
    v38 = *v22;
    v39 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 5) = v39;
    *v21 = v38;
  }
  a1[12] = a2[12];
  v40 = a2[13];
  v41 = a1[13];
  a1[13] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41, v42);
  return a1;
}

uint64_t sub_1001A79C0(uint64_t a1)
{
  sub_1001A732C(a1, &unk_1002C7298);
  return a1;
}

uint64_t sub_1001A79EC(uint64_t a1)
{
  sub_1001A732C(a1, &unk_1002C7210);
  return a1;
}

void *initializeWithTake for AppMetadataSchemaV1.AppMetadata.Artwork(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t sub_1001A7A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      swift_bridgeObjectRelease(v4, a2);
      v6 = *(_QWORD *)(a2 + 24);
      v7 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v6;
      swift_bridgeObjectRelease(v7, v8);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v9;
      swift_bridgeObjectRelease(v10, v11);
      goto LABEL_6;
    }
    sub_1001A79C0(a1);
  }
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_6:
  v13 = *(_QWORD *)(a1 + 56);
  if (!v13)
  {
LABEL_10:
    v21 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v21;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_11;
  }
  v14 = *(_QWORD *)(a2 + 56);
  if (!v14)
  {
    sub_1001A79EC(a1 + 48);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v14;
  swift_bridgeObjectRelease(v13, a2);
  v15 = *(_QWORD *)(a2 + 72);
  v16 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRelease(v16, v17);
  v18 = *(_QWORD *)(a2 + 88);
  v19 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v18;
  swift_bridgeObjectRelease(v19, v20);
LABEL_11:
  v22 = *(_QWORD *)(a2 + 104);
  v23 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v22;
  swift_bridgeObjectRelease(v23, a2);
  return a1;
}

uint64_t sub_1001A7B14(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001A7B68(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for BulletinHelpers.BulletinRelationships()
{
  sub_1001A8680();
}

unint64_t sub_1001A7BE4()
{
  unint64_t result;

  result = qword_100316370;
  if (!qword_100316370)
  {
    result = swift_getWitnessTable(&unk_1002344B4, &type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316370);
  }
  return result;
}

unint64_t sub_1001A7C20()
{
  unint64_t result;

  result = qword_100316388;
  if (!qword_100316388)
  {
    result = swift_getWitnessTable(&unk_100234464, &type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316388);
  }
  return result;
}

unint64_t sub_1001A7C5C()
{
  unint64_t result;

  result = qword_1003163A0;
  if (!qword_1003163A0)
  {
    result = swift_getWitnessTable(&unk_100234414, &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1003163A0);
  }
  return result;
}

unint64_t sub_1001A7C98()
{
  unint64_t result;

  result = qword_1003163B8;
  if (!qword_1003163B8)
  {
    result = swift_getWitnessTable(&unk_1002343C4, &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1003163B8);
  }
  return result;
}

unint64_t sub_1001A7CD4()
{
  unint64_t result;

  result = qword_1003163C0;
  if (!qword_1003163C0)
  {
    result = swift_getWitnessTable(&unk_100234060, &unk_1002C7298);
    atomic_store(result, (unint64_t *)&qword_1003163C0);
  }
  return result;
}

unint64_t sub_1001A7D10()
{
  unint64_t result;

  result = qword_1003163C8;
  if (!qword_1003163C8)
  {
    result = swift_getWitnessTable(&unk_1002340B0, &unk_1002C7210);
    atomic_store(result, (unint64_t *)&qword_1003163C8);
  }
  return result;
}

void sub_1001A7D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v7 = swift_bridgeObjectRelease(a2, a2);
    sub_10016D13C(v7, v8);
    sub_1001A865C(a6, v9);
  }
}

uint64_t sub_1001A7D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

unint64_t sub_1001A7DBC()
{
  unint64_t result;

  result = qword_1003163D0;
  if (!qword_1003163D0)
  {
    result = swift_getWitnessTable(&unk_100234010, &unk_1002C7320);
    atomic_store(result, (unint64_t *)&qword_1003163D0);
  }
  return result;
}

unint64_t sub_1001A7DF8()
{
  unint64_t result;

  result = qword_1003163E0;
  if (!qword_1003163E0)
  {
    result = swift_getWitnessTable(&unk_100234038, &unk_1002C7298);
    atomic_store(result, (unint64_t *)&qword_1003163E0);
  }
  return result;
}

unint64_t sub_1001A7E34()
{
  unint64_t result;

  result = qword_1003163F0;
  if (!qword_1003163F0)
  {
    result = swift_getWitnessTable(&unk_100234088, &unk_1002C7210);
    atomic_store(result, (unint64_t *)&qword_1003163F0);
  }
  return result;
}

void sub_1001A7E70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100161BD0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_10016219C();
}

unint64_t sub_1001A7EB0()
{
  unint64_t result;

  result = qword_100316400;
  if (!qword_100316400)
  {
    result = swift_getWitnessTable(&unk_100233FE8, &unk_1002C7320);
    atomic_store(result, (unint64_t *)&qword_100316400);
  }
  return result;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001A7F44 + 4 * byte_100233EE0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001A7F64 + 4 * byte_100233EE5[v4]))();
}

_BYTE *sub_1001A7F44(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001A7F64(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001A7F6C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001A7F74(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001A7F7C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001A7F84(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FairPlaySessionError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s14GameDaemonCore15BulletinHelpersO21BulletinRelationshipsV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001A8084 + 4 * byte_100233EEF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001A80B8 + 4 * byte_100233EEA[v4]))();
}

uint64_t sub_1001A80B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A80C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A80C8);
  return result;
}

uint64_t sub_1001A80D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A80DCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001A80E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A80E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys()
{
  return &type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys;
}

unint64_t sub_1001A8108()
{
  unint64_t result;

  result = qword_100316408;
  if (!qword_100316408)
  {
    result = swift_getWitnessTable(&unk_100234174, &type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316408);
  }
  return result;
}

unint64_t sub_1001A8148()
{
  unint64_t result;

  result = qword_100316410;
  if (!qword_100316410)
  {
    result = swift_getWitnessTable(&unk_10023422C, &type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316410);
  }
  return result;
}

unint64_t sub_1001A8188()
{
  unint64_t result;

  result = qword_100316418;
  if (!qword_100316418)
  {
    result = swift_getWitnessTable(&unk_1002342E4, &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316418);
  }
  return result;
}

unint64_t sub_1001A81C8()
{
  unint64_t result;

  result = qword_100316420;
  if (!qword_100316420)
  {
    result = swift_getWitnessTable(&unk_10023439C, &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316420);
  }
  return result;
}

unint64_t sub_1001A8208()
{
  unint64_t result;

  result = qword_100316428;
  if (!qword_100316428)
  {
    result = swift_getWitnessTable(&unk_10023430C, &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316428);
  }
  return result;
}

unint64_t sub_1001A8248()
{
  unint64_t result;

  result = qword_100316430;
  if (!qword_100316430)
  {
    result = swift_getWitnessTable(&unk_100234334, &type metadata for BulletinHelpers.BulletinRelationships.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316430);
  }
  return result;
}

unint64_t sub_1001A8288()
{
  unint64_t result;

  result = qword_100316438;
  if (!qword_100316438)
  {
    result = swift_getWitnessTable(&unk_100234254, &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316438);
  }
  return result;
}

unint64_t sub_1001A82C8()
{
  unint64_t result;

  result = qword_100316440;
  if (!qword_100316440)
  {
    result = swift_getWitnessTable(&unk_10023427C, &type metadata for BulletinHelpers.BulletinRelationships.ChallengeRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316440);
  }
  return result;
}

unint64_t sub_1001A8308()
{
  unint64_t result;

  result = qword_100316448;
  if (!qword_100316448)
  {
    result = swift_getWitnessTable(&unk_10023419C, &type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316448);
  }
  return result;
}

unint64_t sub_1001A8348()
{
  unint64_t result;

  result = qword_100316450;
  if (!qword_100316450)
  {
    result = swift_getWitnessTable(&unk_1002341C4, &type metadata for BulletinHelpers.BulletinRelationships.PlayerRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316450);
  }
  return result;
}

unint64_t sub_1001A8388()
{
  unint64_t result;

  result = qword_100316458;
  if (!qword_100316458)
  {
    result = swift_getWitnessTable("]5\t", &type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316458);
  }
  return result;
}

unint64_t sub_1001A83C8()
{
  unint64_t result;

  result = qword_100316460;
  if (!qword_100316460)
  {
    result = swift_getWitnessTable(&unk_10023410C, &type metadata for BulletinHelpers.BulletinRelationships.GameRelationship.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316460);
  }
  return result;
}

uint64_t sub_1001A845C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  return swift_dynamicCast(va1, (uint64_t *)va, a3, a4, 6);
}

uint64_t sub_1001A846C@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1001A8480()
{
  return swift_slowAlloc(2, -1);
}

uint64_t sub_1001A848C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1001A849C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1001A84A8()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v1 - 224, v1 - 225, v0);
}

uint64_t sub_1001A84C0()
{
  return static os_log_type_t.info.getter();
}

void sub_1001A84C8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

void sub_1001A84E4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10016CBEC((uint64_t)va, a2);
}

void sub_1001A84EC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 176) = 0x656D686361747461;
  *(_QWORD *)(v0 + 184) = 0xEB000000005F746ELL;
}

uint64_t sub_1001A852C()
{
  return 0x6449726579616C70;
}

uint64_t sub_1001A8544(uint64_t a1)
{
  return static GKLog.daemon.getter(a1);
}

uint64_t sub_1001A854C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(a1, a2, 0, 0, 0, 1, v2, v2);
}

uint64_t sub_1001A8568()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 176);
}

uint64_t sub_1001A858C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, 0xE600000000000000, 0);
}

uint64_t sub_1001A8598(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1001A85A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, v2 - 65, v1, a1);
}

uint64_t sub_1001A85C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A85D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = a1;
  *(_BYTE *)(v2 - 66) = 1;
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1001A85EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_1001A861C(uint64_t a1)
{
  uint64_t v1;

  return sub_100161F70(a1, v1);
}

uint64_t sub_1001A8624()
{
  return 0x726579616C70;
}

uint64_t sub_1001A8638()
{
  _QWORD *v0;

  return sub_100161FE0(v0);
}

void sub_1001A8640(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1001A7E70(a1, a2, v2);
}

void sub_1001A8648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1001A7D4C(a1, a2, v3, v5, v4, v2);
}

uint64_t sub_1001A865C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a1, a2);
}

uint64_t sub_1001A8688()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 328));
}

uint64_t sub_1001A869C@<X0>(uint64_t a1@<X1>, unint64_t a2@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a2 > 1, a1, 1);
}

uint64_t sub_1001A86B0()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 248));
}

uint64_t sub_1001A86C4()
{
  uint64_t v0;

  return sub_100183FDC(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 312));
}

void sub_1001A86D8()
{
  uint64_t v0;

}

unint64_t sub_1001A86E0(uint64_t a1, uint64_t a2)
{
  return sub_1001860C4(a1, a2);
}

uint64_t sub_1001A8710()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 216));
}

void sub_1001A8720()
{
  Swift::String v0;

  v0._countAndFlagsBits = 1735290926;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
}

BOOL sub_1001A8740(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

_QWORD *sub_1001A8750()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_100163928(v0, v1);
}

uint64_t sub_1001A876C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

unint64_t sub_1001A878C(uint64_t a1, uint64_t a2)
{
  return sub_1001860C4(a1, a2);
}

uint64_t sub_1001A8794(uint64_t a1)
{
  uint64_t v1;

  return sub_100161B54(a1, 1, 1, v1);
}

uint64_t sub_1001A87A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100161B54(a1, 1, 1, a4);
}

void sub_1001A87CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *v2 = *(_QWORD *)(v5 - 88);
  v2[1] = v3;
  v2[2] = *(_QWORD *)(v5 - 104);
  v2[3] = v0;
  v2[4] = v4;
  v2[5] = v1;
}

uint64_t sub_1001A87E4(uint64_t a1)
{
  unint64_t v1;

  return sub_10016FF44(a1, v1);
}

uint64_t sub_1001A87EC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10016445C(v0, 1, v1);
}

uint64_t sub_1001A87FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = v1 - 67;
  *(_QWORD *)(v1 - 96) = v0;
  return result;
}

void sub_1001A8814(uint64_t a1)
{
  uint64_t *v1;

  sub_10016CBEC(a1, v1);
}

uint64_t sub_1001A881C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 152) + 8))(v0, *(_QWORD *)(v1 - 144));
}

void sub_1001A882C(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  sub_100166E48(a1, a2, v3, a3);
}

id sub_1001A8834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AFDFC(a1, a2, a3, 1);
}

uint64_t sub_1001A8840()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001A884C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

void sub_1001A8884(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  sub_100166E48(a1, a2, v3, a3);
}

uint64_t sub_1001A888C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 320);
}

void sub_1001A88A0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 95;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

void sub_1001A88AC()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1001A88B8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001A88C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 32))(v1);
}

uint64_t sub_1001A88D0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001A88DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1001A88E8()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 184));
}

uint64_t sub_1001A88F4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 56) + 32 * a1;
}

void sub_1001A8900()
{
  void *v0;

}

uint64_t sub_1001A890C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10016FF44(v1, v0);
}

uint64_t sub_1001A8918(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 56) + 32 * a1;
}

uint64_t sub_1001A8924(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = type metadata accessor for NWEndpoint.Port(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v14 - v7;
  v9 = sub_100161BD0(&qword_100316558);
  __chkstk_darwin(v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001AB1A0(a1, (uint64_t)v11);
  if (sub_10016445C((uint64_t)v11, 1, v2) == 1)
    return 7104878;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v11, v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v12 = String.init<A>(reflecting:)(v6, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v12;
}

void sub_1001A8A68()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  uint64_t v53;
  unint64_t v54;

  sub_100166CC4();
  v2 = v0;
  v3 = *v0;
  v4 = sub_100180D8C();
  sub_1001A877C();
  __chkstk_darwin(v5);
  sub_1001AB270();
  v8 = v6 - v7;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v48 - v11;
  v13 = v2[4];
  if (v13)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v2 + 2);
    if (Strong)
    {
      v51 = v1;
      v15 = v2[3];
      v16 = Strong;
      v17 = swift_retain(v13);
      LODWORD(v49) = static os_log_type_t.info.getter(v17);
      v53 = 0;
      v54 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      sub_1001AB2C8((uint64_t)"Starting Listener: ");
      v52[0] = v2;
      sub_1001AB3EC((uint64_t)v52, (uint64_t)&v53, v3);
      v18._countAndFlagsBits = 0x6167656C6544202ELL;
      v18._object = (void *)0xEF203A7369206574;
      String.append(_:)(v18);
      v50 = v16;
      v52[0] = v16;
      v52[1] = v15;
      v19 = sub_100161BD0(&qword_100316150);
      v20 = sub_1001AB3EC((uint64_t)v52, (uint64_t)&v53, v19);
      v21 = v53;
      v22 = v54;
      static GKLog.match.getter(v20);
      v23 = sub_100170814(v22);
      v24 = Logger.logObject.getter(v23);
      v25 = v49;
      if (os_log_type_enabled(v24, (os_log_type_t)v49))
      {
        v48 = v21;
        v26 = (uint8_t *)sub_100165DA4(12);
        v27 = sub_100165DA4(32);
        v49 = v4;
        v28 = v27;
        v53 = v27;
        *(_DWORD *)v26 = 136315138;
        swift_bridgeObjectRetain(v22);
        v29 = sub_10016FE60(v48, v22, &v53);
        v30 = sub_1001AB374(v29);
        sub_100181220(v30, v31);
        sub_100170848(v22);
        sub_100165E04((void *)&_mh_execute_header, v24, v25, "Nearby - %s", v26);
        sub_100165DFC(v28, v32, (uint64_t)&type metadata for Any + 8);
        sub_100165D98(v28);
        sub_100165D98((uint64_t)v26);

        (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v49);
      }
      else
      {
        sub_10017081C(v22);

        (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v4);
      }
      swift_bridgeObjectRelease(v22, v33);
      v45 = sub_1001AB324();
      sub_1001AB388(v45);
      swift_retain(v45);
      sub_100165B44((uint64_t)sub_1001AAF68, v45);
      NWListener.stateUpdateHandler.setter(sub_1001AAF68, v45);
      swift_release_n(v45, 2);
      v46 = sub_1001AB324();
      sub_1001AB388(v46);
      sub_100165E90();
      sub_100165B44((uint64_t)sub_1001AAF70, v46);
      NWListener.newConnectionHandler.setter(sub_1001AAF70, v46);
      swift_release_n(v46, 2);
      sub_10016CBB4(0, (unint64_t *)&qword_100314960, OS_dispatch_queue_ptr);
      v47 = (void *)static OS_dispatch_queue.main.getter();
      NWListener.start(queue:)();

      swift_unknownObjectRelease();
      swift_release(v13);
    }
  }
  else
  {
    v34 = static os_log_type_t.info.getter(v10);
    v35 = static GKLog.match.getter(v34);
    v36 = Logger.logObject.getter(v35);
    v37 = v34;
    if (sub_1001AB280(v36))
    {
      v38 = v4;
      v39 = (uint8_t *)sub_100165DA4(12);
      v40 = sub_100165DA4(32);
      *(_DWORD *)v39 = 136315138;
      v53 = v40;
      v41 = sub_10016FE60(0xD000000000000037, 0x800000010029A480, &v53);
      v42 = sub_1001AB374(v41);
      sub_1001A884C(v42, v43);
      sub_100165E04((void *)&_mh_execute_header, v36, v37, "Nearby - %s", v39);
      sub_100165DFC(v40, v44, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v40);
      sub_100165D98((uint64_t)v39);

      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v38);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v4);
    }
  }
  sub_100165DCC();
}

void sub_1001A8E80()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  sub_100166CC4();
  v2 = v0;
  v3 = *v0;
  v4 = sub_100180D8C();
  sub_1001A877C();
  __chkstk_darwin(v5);
  sub_100162164();
  v8 = v7 - v6;
  v10 = static os_log_type_t.info.getter(v9);
  v23 = 0;
  v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  sub_1001AB2C8((uint64_t)"Stopping listener: ");
  v22 = (uint64_t)v0;
  _print_unlocked<A, B>(_:_:)(&v22, &v23, v3);
  v12 = v23;
  v11 = v24;
  sub_1001AB3CC();
  v13 = sub_100170814(v11);
  v14 = sub_1001AB3B8(v13);
  v15 = v10;
  if (os_log_type_enabled(v14, v10))
  {
    v16 = (uint8_t *)sub_100165DA4(12);
    v21 = v1;
    v17 = sub_100165DA4(32);
    v23 = v17;
    *(_DWORD *)v16 = 136315138;
    swift_bridgeObjectRetain(v11);
    v22 = sub_10016FE60(v12, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    sub_100170848(v11);
    sub_100165E04((void *)&_mh_execute_header, v14, v15, "Nearby - %s", v16);
    sub_100165DFC(v17, v18, (uint64_t)&type metadata for Any + 8);
    sub_100165D98(v17);
    sub_100165D98((uint64_t)v16);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v8, v4);
  }
  else
  {

    sub_10017081C(v11);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v4);
  }
  swift_bridgeObjectRelease(v11, v19);
  if (!v2[4])
    goto LABEL_8;
  sub_100165EAC();
  sub_100165B44(0, 0);
  NWListener.stateUpdateHandler.setter(0, 0);
  sub_100165E88();
  if (!v2[4])
    goto LABEL_8;
  sub_100165EAC();
  sub_100165B44(0, 0);
  NWListener.newConnectionHandler.setter(0, 0);
  sub_100165E88();
  if (v2[4])
  {
    sub_100165EAC();
    NWListener.cancel()();
    sub_100165E88();
    v20 = v2[4];
  }
  else
  {
LABEL_8:
    v20 = 0;
  }
  v2[4] = 0;
  swift_release(v20);
  sub_100165DCC();
}

id sub_1001A90B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[15];
  uint64_t v53;
  uint64_t v54;

  sub_100166CC4();
  v53 = v2;
  v54 = v3;
  v4 = sub_100180D8C();
  sub_1001A877C();
  __chkstk_darwin(v5);
  sub_1001AB270();
  v8 = v6 - v7;
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - v10;
  result = objc_msgSend((id)objc_opt_self(GKDevice), "currentDevice");
  if (result)
  {
    v13 = sub_1001AB008(result);
    if (v14)
    {
      v15 = v13;
      v16 = v14;
      v17 = (uint64_t *)(v0 + 40);
      sub_1001AB1E8();
      v18 = sub_100166DC8(101, 0xE100000000000000, *(_QWORD *)(v0 + 40));
      if (v19)
      {
        v20 = v18;
        v21 = v19;
        sub_1001AB288();
        sub_1001AB1E8();
        v22 = sub_100166DC8(104, 0xE100000000000000, *v17);
        if (v23)
        {
          v24 = v23;
          v50 = v22;
          sub_1001AB288();
          sub_1001AB1E8();
          v25 = sub_100166DC8(28776, 0xE200000000000000, *v17);
          if (v26)
          {
            v27 = v26;
            v28 = v25;
            sub_1001AB288();
            v29 = sub_100161BD0(&qword_100316538);
            v30 = ((uint64_t (*)(uint64_t, uint64_t *))swift_initStackObject)(v29, &v51);
            *(_OWORD *)(v30 + 16) = xmmword_100233290;
            *(_QWORD *)(v30 + 32) = 0x4449656369766564;
            *(_QWORD *)(v30 + 40) = 0xE800000000000000;
            *(_QWORD *)(v30 + 48) = v15;
            *(_QWORD *)(v30 + 56) = v16;
            *(_QWORD *)(v30 + 64) = 101;
            *(_QWORD *)(v30 + 72) = 0xE100000000000000;
            *(_QWORD *)(v30 + 80) = v20;
            *(_QWORD *)(v30 + 88) = v21;
            *(_QWORD *)(v30 + 96) = 104;
            *(_QWORD *)(v30 + 104) = 0xE100000000000000;
            *(_QWORD *)(v30 + 112) = v50;
            *(_QWORD *)(v30 + 120) = v24;
            *(_QWORD *)(v30 + 128) = 28776;
            *(_QWORD *)(v30 + 136) = 0xE200000000000000;
            *(_QWORD *)(v30 + 144) = v28;
            *(_QWORD *)(v30 + 152) = v27;
            *(_QWORD *)(v30 + 160) = 0x4449726579616C70;
            *(_QWORD *)(v30 + 168) = 0xE800000000000000;
            v31 = *(_QWORD *)(v0 + 72);
            *(_QWORD *)(v30 + 176) = *(_QWORD *)(v0 + 64);
            *(_QWORD *)(v30 + 184) = v31;
            swift_bridgeObjectRetain(v31);
            return (id)Dictionary.init(dictionaryLiteral:)(v30, &type metadata for String, &type metadata for String, &protocol witness table for String);
          }
          sub_1001AB288();
          swift_bridgeObjectRelease(v21, v43);
          v42 = v24;
        }
        else
        {
          sub_1001AB288();
          v42 = v21;
        }
        swift_bridgeObjectRelease(v42, v41);
      }
      else
      {
        sub_1001AB288();
      }
      v44 = swift_bridgeObjectRelease(v16, v40);
      static os_log_type_t.info.getter(v44);
      sub_1001AB3DC();
      v45 = sub_1001815A0();
      if (sub_1001AB250(v45))
      {
        v46 = (uint8_t *)sub_100165DA4(12);
        v47 = sub_100165DA4(32);
        v52[0] = v47;
        *(_DWORD *)v46 = 136315138;
        v48 = sub_10016FE60(0xD00000000000001ALL, 0x800000010029A500, v52);
        sub_1001AB1FC(v48);
        sub_100165E04((void *)&_mh_execute_header, v0, (os_log_type_t)v16, "Nearby - %s", v46);
        sub_100165DFC(v47, v49, (uint64_t)&type metadata for Any + 8);
        sub_100165D98(v47);
        sub_100165D98((uint64_t)v46);
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v11, v4);
    }
    else
    {
      v32 = static os_log_type_t.info.getter(v13);
      v33 = sub_1001AB3CC();
      v34 = sub_1001AB3B8(v33);
      v35 = v32;
      if (sub_1001AB280(v34))
      {
        v36 = (uint8_t *)sub_100165DA4(12);
        v37 = sub_100165DA4(32);
        v52[0] = v37;
        *(_DWORD *)v36 = 136315138;
        v38 = sub_10016FE60(0xD00000000000001DLL, 0x800000010029A4E0, v52);
        sub_1001AB1FC(v38);
        sub_100165E04((void *)&_mh_execute_header, v34, v35, "Nearby - %s", v36);
        sub_100165DFC(v37, v39, (uint64_t)&type metadata for Any + 8);
        sub_100165D98(v37);
        sub_100165D98((uint64_t)v36);
      }

      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v4);
    }
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1001A9460()
{
  uint64_t v0;
  id result;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  result = objc_msgSend((id)objc_opt_self(GKDevice), "currentDevice");
  if (result)
  {
    result = (id)sub_1001AB008(result);
    if (v2)
    {
      v3 = v2;
      v10 = result;
      v11 = v2;
      swift_bridgeObjectRetain(v2);
      v4._countAndFlagsBits = 36;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      swift_bridgeObjectRelease(v3, v5);
      v7 = *(_QWORD *)(v0 + 64);
      v6 = *(void **)(v0 + 72);
      swift_bridgeObjectRetain(v11);
      v8._countAndFlagsBits = v7;
      v8._object = v6;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(v11, v9);
      return v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1001A9518()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  NSObject *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  void *v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  BOOL v90;
  NSObject *v91;
  NSObject *v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *);
  uint64_t (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  uint64_t Strong;
  uint64_t v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  NSObject *v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  char *v124;
  uint64_t v125;
  NSObject *v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint8_t *v151;
  NSObject *v152;
  NSObject *v153;
  id v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  NSObject *v160;
  uint64_t v161;
  char *v162;
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;

  sub_100166CC4();
  v1 = v0;
  v157 = *v0;
  sub_100161BD0(&qword_100316560);
  sub_1001A1358();
  __chkstk_darwin(v2);
  sub_100162164();
  v160 = (v4 - v3);
  v5 = type metadata accessor for NWTXTRecord(0);
  v161 = *(_QWORD *)(v5 - 8);
  sub_1001A1358();
  __chkstk_darwin(v6);
  sub_1001AB270();
  v159 = v7 - v8;
  __chkstk_darwin(v9);
  v162 = (char *)&v151 - v10;
  v11 = sub_100180D8C();
  v163 = *(void (**)(char *, uint64_t))(v11 - 8);
  v164 = v11;
  sub_1001A1358();
  __chkstk_darwin(v12);
  sub_1001AB270();
  v15 = v13 - v14;
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v151 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v151 - v21;
  v23 = __chkstk_darwin(v20);
  v156 = (char *)&v151 - v24;
  v25 = __chkstk_darwin(v23);
  v158 = (char *)&v151 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v151 - v28;
  __chkstk_darwin(v27);
  type metadata accessor for NWEndpoint.Port(0);
  sub_1001A1358();
  __chkstk_darwin(v30);
  sub_100162164();
  v33 = v32 - v31;
  v34 = sub_1001A9460();
  if (!v35)
  {
    v41 = static os_log_type_t.error.getter(v34);
    sub_1001AB3DC();
    v42 = sub_1001815A0();
    if (os_log_type_enabled(v42, v41))
    {
      v43 = (uint8_t *)sub_100165DA4(12);
      v44 = sub_100165DA4(32);
      v167 = v44;
      *(_DWORD *)v43 = 136315138;
      v45 = sub_1001AB304(0xD000000000000036, (uint64_t)"Cannot create bonjour listener without providing name.");
      v46 = sub_1001AB394(v45);
      sub_1001A884C(v46, v47);
      sub_100165E04((void *)&_mh_execute_header, v42, v41, "Nearby - %s", v43);
      sub_100165DFC(v44, v48, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v44);
      sub_100165D98((uint64_t)v43);
    }

    sub_1001AB368();
    v49(v15);
    goto LABEL_12;
  }
  v36 = v35;
  v154 = v34;
  v155 = v5;
  type metadata accessor for NWParameters(0);
  v37 = sub_1001AF998();
  v38 = swift_retain(v37);
  static NWEndpoint.Port.any.getter(v38);
  v39 = type metadata accessor for NWListener(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v40 = NWListener.init(using:on:)(v37, v33);
  v152 = v37;
  v0[4] = v40;
  v153 = v40;
  swift_retain(v40);
  sub_100165E88();
  v50 = (void *)objc_opt_self(GKDevice);
  v51 = objc_msgSend(v50, "currentDevice");
  if (v51)
  {
    v52 = sub_1001AB008(v51);
    if (v53)
    {
      v54 = v53;
      v55 = v52;
      if (sub_1001A90B8())
      {
        v57 = NWTXTRecord.init(_:)();
        v58 = static os_log_type_t.info.getter(v57);
        sub_1001AB260();
        _StringGuts.grow(_:)(39);
        sub_1001AB3E4(v59, v60);
        v167 = 0xD000000000000025;
        v168 = 0x800000010029A660;
        v61._countAndFlagsBits = v55;
        v61._object = v54;
        String.append(_:)(v61);
        v64 = sub_10016D110(v62, v63);
        v65 = v167;
        v66 = v168;
        static GKLog.match.getter(v64);
        v67 = sub_100170814(v66);
        v68 = Logger.logObject.getter(v67);
        if (os_log_type_enabled(v68, v58))
        {
          v69 = (uint8_t *)sub_100165DA4(12);
          v70 = sub_100165DA4(32);
          v167 = v70;
          *(_DWORD *)v69 = 136315138;
          v151 = v69 + 4;
          swift_bridgeObjectRetain(v66);
          v71 = sub_10016FE60(v65, v66, &v167);
          v72 = sub_1001AB394(v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, v73);
          sub_100170848(v66);
          sub_100165E04((void *)&_mh_execute_header, v68, v58, "Nearby - %s", v69);
          sub_100165DFC(v70, v74, (uint64_t)&type metadata for Any + 8);
          sub_100165D98(v70);
          sub_100165D98((uint64_t)v69);

        }
        else
        {

          sub_10017081C(v66);
        }
        v98 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v163 + 1);
        v99 = v29;
        v100 = v164;
        v101 = v98(v99, v164);
        sub_10016D110(v101, v102);
        v103 = v153;
        v104 = v161;
        v105 = v159;
        (*(void (**)(uint64_t, char *, uint64_t))(v161 + 16))(v159, v162, v155);
        v106 = v160;
        NWListener.Service.init(name:type:domain:txtRecord:)(v154, v36, 0x5F2E64656D61675FLL, 0xEB00000000706374, 0, 0, v105);
        v107 = type metadata accessor for NWListener.Service(0);
        sub_100161B54((uint64_t)v106, 0, 1, v107);
        NWListener.service.setter(v106);
        Strong = swift_unknownObjectWeakLoadStrong(v1 + 2);
        if (Strong)
        {
          v109 = Strong;
          v163 = (void (*)(char *, uint64_t))v98;
          v110 = v1[3];
          static os_log_type_t.info.getter(Strong);
          sub_1001AB260();
          _StringGuts.grow(_:)(43);
          v111._countAndFlagsBits = 0xD00000000000001BLL;
          v111._object = (void *)0x800000010029A6D0;
          String.append(_:)(v111);
          v165 = (uint64_t)v1;
          sub_1001AB3C0((uint64_t)&v165, (uint64_t)&v167, v157);
          v112._countAndFlagsBits = 0x6167656C6564202CLL;
          v112._object = (void *)0xEC000000203A6574;
          String.append(_:)(v112);
          v165 = v109;
          v166 = v110;
          v113 = sub_100161BD0(&qword_100316150);
          sub_1001AB3C0((uint64_t)&v165, (uint64_t)&v167, v113);
          v115 = v167;
          v114 = v168;
          v116 = v158;
          sub_1001AB3B0();
          v117 = sub_100170814(v114);
          v118 = sub_1001AB3A8(v117);
          if (sub_1001AB250(v118))
          {
            v119 = (uint8_t *)sub_100165DA4(12);
            v120 = sub_100165DA4(32);
            v167 = v120;
            *(_DWORD *)v119 = 136315138;
            swift_bridgeObjectRetain(v114);
            v165 = sub_10016FE60(v115, v114, &v167);
            v104 = v161;
            sub_100181220((uint64_t)&v165, (uint64_t)&v166);
            sub_100170848(v114);
            sub_100165E04((void *)&_mh_execute_header, v103, (os_log_type_t)&protocol witness table for DefaultStringInterpolation, "Nearby - %s", v119);
            sub_100165DFC(v120, v121, (uint64_t)&type metadata for Any + 8);
            sub_100165D98(v120);
            sub_100165D98((uint64_t)v119);

            v163(v116, v164);
            sub_1001AB2DC();
            v122 = v153;
          }
          else
          {

            sub_10017081C(v114);
            sub_1001AB344();
            sub_1001AB2DC();
            v122 = v103;
          }
          swift_release(v122);
          v149 = swift_unknownObjectRelease();
          sub_10016D110(v149, v150);
        }
        else
        {
          v123 = static os_log_type_t.error.getter(0);
          v124 = v156;
          v125 = sub_1001AB3B0();
          v126 = sub_1001AB3A8(v125);
          if (sub_1001AB334(v126))
          {
            v127 = (uint8_t *)sub_100165DA4(12);
            v128 = sub_100165DA4(32);
            v163 = (void (*)(char *, uint64_t))v98;
            v129 = v128;
            v167 = v128;
            *(_DWORD *)v127 = 136315138;
            v130 = sub_1001AB304(0xD000000000000030, (uint64_t)"Cannot setup PeerListener with a valid delegate.");
            sub_1001AB234(v130);
            sub_100165E04((void *)&_mh_execute_header, v106, v123, "Nearby - %s", v127);
            sub_100165DFC(v129, v131, (uint64_t)&type metadata for Any + 8);
            sub_100165D98(v129);
            sub_100165D98((uint64_t)v127);

            sub_1001AB344();
          }
          else
          {

            v98(v124, v100);
          }
          sub_1001AB2DC();
          swift_release(v103);
        }
        (*(void (**)(char *))(v104 + 8))(v162);
      }
      else
      {
        v84 = sub_10016D110(0, v56);
        v86 = sub_10016D5D0(v84, v85);
        v87 = static os_log_type_t.error.getter(v86);
        v88 = static GKLog.match.getter(v87);
        v89 = Logger.logObject.getter(v88);
        v90 = sub_1001AB334(v89);
        v91 = v152;
        v92 = v153;
        if (v90)
        {
          v93 = (uint8_t *)sub_100165DA4(12);
          v94 = sub_100165DA4(32);
          v167 = v94;
          *(_DWORD *)v93 = 136315138;
          v95 = sub_10016FE60(0xD000000000000028, 0x800000010029A630, &v167);
          sub_1001AB234(v95);
          sub_100165E04((void *)&_mh_execute_header, v37, (os_log_type_t)v87, "Nearby - %s", v93);
          sub_100165DFC(v94, v96, (uint64_t)&type metadata for Any + 8);
          sub_100165D98(v94);
          sub_100165D98((uint64_t)v93);
        }

        sub_1001AB368();
        v97(v22);
        swift_release(v91);
        swift_release(v92);
      }
    }
    else
    {
      v75 = sub_10016D5D0(v52, 0);
      v76 = static os_log_type_t.error.getter(v75);
      sub_1001AB260();
      _StringGuts.grow(_:)(42);
      sub_1001AB3E4(v77, v78);
      v167 = 0xD000000000000028;
      v168 = 0x800000010029A600;
      v79 = objc_msgSend(v50, "currentDevice");
      if (v79)
      {
        v165 = (uint64_t)v79;
        v80 = sub_10016CBB4(0, &qword_100316568, GKDevice_ptr);
        v81 = String.init<A>(reflecting:)(&v165, v80);
        v83 = v82;
      }
      else
      {
        v83 = 0xE300000000000000;
        v81 = 7104878;
      }
      v132 = v152;
      v133 = v83;
      String.append(_:)(*(Swift::String *)&v81);
      sub_1001648C4(v134, v135);
      v136 = v168;
      sub_1001AB3CC();
      v137 = sub_100170814(v136);
      v138 = sub_1001AB3B8(v137);
      v139 = v76;
      if (sub_1001AB280(v138))
      {
        v140 = (uint8_t *)sub_100165DA4(12);
        v141 = sub_100165DA4(32);
        v167 = v141;
        *(_DWORD *)v140 = 136315138;
        v142 = sub_1001621A4();
        v144 = sub_1001AB2E8(v142, v143, &v167);
        sub_1001AB218(v144);
        sub_100170848(v136);
        sub_100165E04((void *)&_mh_execute_header, v138, v139, "Nearby - %s", v140);
        sub_100165DFC(v141, v145, (uint64_t)&type metadata for Any + 8);
        sub_100165D98(v141);
        sub_100165D98((uint64_t)v140);

      }
      else
      {

        sub_10017081C(v136);
      }
      sub_1001AB368();
      v146(v19);
      swift_release(v132);
      v147 = swift_release(v153);
      sub_1001648C4(v147, v148);
    }
LABEL_12:
    sub_100165DCC();
    return;
  }
  __break(1u);
}

uint64_t sub_1001AA0C8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for NWError(0);
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  v6 = type metadata accessor for Logger(0);
  v2[16] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[17] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v8);
  v2[19] = swift_task_alloc(v8);
  v2[20] = swift_task_alloc(v8);
  v2[21] = swift_task_alloc(v8);
  v9 = sub_100161BD0(&qword_100316558);
  v2[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NWListener.State(0);
  v2[23] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[24] = v11;
  v2[25] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001AA1D4, 0, 0);
}

uint64_t sub_1001AA1D4()
{
  NSObject *v0;
  uint8_t *v1;
  uint64_t v2;
  uint8_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_DWORD *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  NSObject *v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t);
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t Strong;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint8_t *v81;
  uint8_t *v82;
  uint8_t *v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;

  v7 = *(_QWORD *)(v2 + 88);
  v8 = *(_QWORD *)(v7 + 32);
  *(_QWORD *)(v2 + 208) = v8;
  if (!v8)
    goto LABEL_27;
  v4 = v2 + 56;
  v3 = (uint8_t *)(v2 + 80);
  v5 = *(_QWORD *)(v2 + 192);
  v0 = *(NSObject **)(v2 + 200);
  v1 = *(uint8_t **)(v2 + 184);
  (*(void (**)(NSObject *, _QWORD, uint8_t *))(v5 + 16))(v0, *(_QWORD *)(v2 + 80), v1);
  v9 = sub_100165E7C();
  v11 = v10(v9);
  if (v11 != enum case for NWListener.State.failed(_:))
  {
    if (v11 == enum case for NWListener.State.ready(_:))
    {
      v30 = *(_QWORD *)(v2 + 176);
      v31 = sub_100165E90();
      v32 = static os_log_type_t.info.getter(v31);
      _StringGuts.grow(_:)(20);
      v34 = swift_bridgeObjectRelease(0xE000000000000000, v33);
      v95 = 0xD000000000000012;
      v96 = 0x800000010029A570;
      NWListener.port.getter(v34);
      v35 = sub_1001A8924(v30);
      v37 = v36;
      sub_1001AB160(v30);
      v38._countAndFlagsBits = v35;
      v38._object = v37;
      String.append(_:)(v38);
      v40 = swift_bridgeObjectRelease(v37, v39);
      v4 = 0x800000010029A570;
      static GKLog.match.getter(v40);
      v41 = sub_100170814(0x800000010029A570);
      v6 = Logger.logObject.getter(v41);
      v42 = os_log_type_enabled((os_log_t)v6, v32);
      v0 = *(NSObject **)(v2 + 168);
      v1 = *(uint8_t **)(v2 + 128);
      v5 = *(_QWORD *)(v2 + 136);
      if (v42)
      {
        v89 = *(_QWORD *)(v2 + 136);
        v5 = sub_100165DA4(12);
        v85 = v0;
        v0 = sub_100165DA4(32);
        v95 = (uint64_t)v0;
        v82 = v1;
        v1 = (uint8_t *)(v2 + 72);
        *(_DWORD *)v5 = 136315138;
        swift_bridgeObjectRetain(0x800000010029A570);
        *(_QWORD *)(v2 + 72) = sub_10016FE60(0xD000000000000012, 0x800000010029A570, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 72, v2 + 80);
        sub_100170848(0x800000010029A570);
        sub_100165E04((void *)&_mh_execute_header, v6, v32, "Nearby - %s", (uint8_t *)v5);
        sub_100165DFC((uint64_t)v0, v43, (uint64_t)&type metadata for Any + 8);
        sub_100165D98((uint64_t)v0);
        sub_100165D98(v5);

        v44 = (*(uint64_t (**)(NSObject *, uint8_t *))(v89 + 8))(v85, v82);
      }
      else
      {

        sub_10017081C(0x800000010029A570);
        v65 = sub_100165E7C();
        v44 = v67(v65, v66);
      }
      sub_10016D5D0(v44, v45);
      v68 = v8;
    }
    else
    {
      if (v11 != enum case for NWListener.State.cancelled(_:))
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 192) + 8))(*(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 184));
        goto LABEL_27;
      }
      v55 = sub_100165E90();
      v56 = static os_log_type_t.info.getter(v55);
      v57 = v56;
      v58 = static GKLog.match.getter(v56);
      v0 = Logger.logObject.getter(v58);
      v5 = v57;
      v59 = os_log_type_enabled(v0, v57);
      v6 = *(_QWORD *)(v2 + 136);
      v1 = *(uint8_t **)(v2 + 144);
      v3 = *(uint8_t **)(v2 + 128);
      if (v59)
      {
        v94 = *(_QWORD *)(v2 + 128);
        v91 = *(_QWORD *)(v2 + 144);
        v1 = (uint8_t *)sub_100165DA4(12);
        v60 = sub_100165DA4(32);
        v95 = v60;
        v87 = v6;
        *(_DWORD *)v1 = 136315138;
        v6 = (uint64_t)(v1 + 12);
        v3 = v1 + 4;
        *(_QWORD *)(v2 + 48) = sub_10016FE60(0xD000000000000025, 0x800000010029A520, &v95);
        sub_100181220(v2 + 48, v2 + 56);
        sub_100165E04((void *)&_mh_execute_header, v0, (os_log_type_t)v5, "Nearby - %s", v1);
        sub_100165DFC(v60, v61, (uint64_t)&type metadata for Any + 8);
        sub_100165D98(v60);
        sub_100165D98((uint64_t)v1);

        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v91, v94);
      }
      else
      {

        (*(void (**)(uint8_t *, uint8_t *))(v6 + 8))(v1, v3);
      }
      swift_release(v8);
      v68 = *(_QWORD *)(v7 + 32);
      *(_QWORD *)(v7 + 32) = 0;
    }
    swift_release(v68);
    goto LABEL_27;
  }
  v12 = *(_QWORD *)(v2 + 200);
  v14 = *(_DWORD **)(v2 + 112);
  v13 = *(_QWORD *)(v2 + 120);
  v16 = *(_QWORD *)(v2 + 96);
  v15 = *(_QWORD *)(v2 + 104);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 192) + 96))(v12, *(_QWORD *)(v2 + 184));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v13, v12, v16);
  *v14 = -65569;
  (*(void (**)(_DWORD *, _QWORD, uint64_t))(v15 + 104))(v14, enum case for NWError.dns(_:), v16);
  sub_100165E90();
  LOBYTE(v12) = static NWError.== infix(_:_:)(v13, v14);
  v17 = *(uint64_t (**)(_DWORD *, uint64_t))(v15 + 8);
  *(_QWORD *)(v2 + 216) = v17;
  v18 = v17(v14, v16);
  v5 = static os_log_type_t.info.getter(v18);
  v6 = *(_QWORD *)(v2 + 120);
  v19 = *(_QWORD *)(v2 + 96);
  if ((v12 & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 + 160);
    v95 = 0;
    v96 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0xE000000000000000;
    v20._countAndFlagsBits = sub_1001AB354();
    String.append(_:)(v20);
    _print_unlocked<A, B>(_:_:)(v6, v2 + 32, v19);
    v21._countAndFlagsBits = 0x726174736572202CLL;
    v21._object = (void *)0xEC000000676E6974;
    String.append(_:)(v21);
    v8 = *(_QWORD *)(v2 + 40);
    v92 = *(_QWORD *)(v2 + 32);
    static GKLog.match.getter(v22);
    v23 = sub_100170814(v8);
    v24 = Logger.logObject.getter(v23);
    v25 = sub_1001AB314(v24);
    v0 = *(NSObject **)(v2 + 160);
    v1 = *(uint8_t **)(v2 + 128);
    v3 = *(uint8_t **)(v2 + 136);
    if (v25)
    {
      v88 = *(_QWORD *)(v2 + 160);
      v84 = *(_QWORD *)(v2 + 136);
      v3 = (uint8_t *)sub_100165DA4(12);
      v4 = v2 + 72;
      v26 = sub_100165DA4(32);
      v95 = v26;
      v81 = v1;
      v1 = (uint8_t *)(v2 + 64);
      *(_DWORD *)v3 = 136315138;
      v0 = (v3 + 4);
      sub_1001621A4();
      *(_QWORD *)(v2 + 64) = sub_10016FE60(v92, v8, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 64, v2 + 72);
      sub_100170848(v8);
      sub_100165E04((void *)&_mh_execute_header, v6, (os_log_type_t)v5, "Nearby - %s", v3);
      sub_100165DFC(v26, v27, (uint64_t)&type metadata for Any + 8);
      sub_100165D98(v26);
      sub_100165D98((uint64_t)v3);

      v28 = (*(uint64_t (**)(uint64_t, uint8_t *))(v84 + 8))(v88, v81);
    }
    else
    {

      sub_10017081C(v8);
      v62 = sub_100165E7C();
      v28 = v64(v62, v63);
    }
    sub_1001648C4(v28, v29);
    sub_1001AB3D4();
    sub_1001A9518();
    sub_1001A8A68();
  }
  else
  {
    v93 = (uint64_t *)(v2 + 56);
    v95 = 0;
    v96 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0xE000000000000000;
    v46._countAndFlagsBits = sub_1001AB354();
    String.append(_:)(v46);
    _print_unlocked<A, B>(_:_:)(v6, v2 + 16, v19);
    v47._countAndFlagsBits = 0x6970706F7473202CLL;
    v47._object = (void *)0xEA0000000000676ELL;
    String.append(_:)(v47);
    v4 = *(_QWORD *)(v2 + 16);
    v8 = *(_QWORD *)(v2 + 24);
    sub_1001AB3DC();
    sub_100170814(v8);
    v48 = sub_1001815A0();
    v49 = sub_1001AB314(v48);
    v0 = *(NSObject **)(v2 + 152);
    v1 = *(uint8_t **)(v2 + 128);
    v3 = *(uint8_t **)(v2 + 136);
    if (v49)
    {
      v90 = *(_QWORD *)(v2 + 128);
      v86 = *(_QWORD *)(v2 + 152);
      v0 = sub_100165DA4(12);
      v83 = v3;
      v3 = (uint8_t *)sub_100165DA4(32);
      v95 = (uint64_t)v3;
      LODWORD(v0->isa) = 136315138;
      v1 = (uint8_t *)&v0->isa + 4;
      v50 = sub_1001621A4();
      *v93 = sub_1001AB2E8(v50, v51, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v93, v2 + 64);
      sub_100170848(v8);
      sub_100165E04((void *)&_mh_execute_header, v6, (os_log_type_t)v5, "Nearby - %s", (uint8_t *)v0);
      sub_100165DFC((uint64_t)v3, v52, (uint64_t)&type metadata for Any + 8);
      sub_100165D98((uint64_t)v3);
      sub_100165D98((uint64_t)v0);

      v53 = (*((uint64_t (**)(uint64_t, uint64_t))v83 + 1))(v86, v90);
    }
    else
    {

      sub_10017081C(v8);
      v69 = sub_100165E7C();
      v53 = v71(v69, v70);
    }
    sub_1001648C4(v53, v54);
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v2 + 88) + 16);
    *(_QWORD *)(v2 + 224) = Strong;
    if (Strong)
    {
      v73 = *(_QWORD *)(v2 + 120);
      v74 = *(_QWORD *)(v2 + 96);
      v75 = *(_QWORD *)(v2 + 104);
      v76 = sub_100165D54();
      v77 = swift_allocError(v74, v76, 0, 0);
      *(_QWORD *)(v2 + 232) = v77;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v78, v73, v74);
      v79 = (_QWORD *)swift_task_alloc(dword_1003151B4);
      *(_QWORD *)(v2 + 240) = v79;
      *v79 = v2;
      v79[1] = sub_1001AAA54;
      return sub_10017D1AC(v77);
    }
    sub_1001AB3D4();
  }
  sub_1001AB2F4();
  sub_100165EB4();
LABEL_27:
  sub_1001AB2B0();
  swift_task_dealloc(v0);
  swift_task_dealloc(v8);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1001AAA54()
{
  uint64_t v0;
  uint64_t v1;

  sub_100165E44();
  v1 = *(_QWORD *)(v0 + 232);
  sub_100165DBC();
  swift_unknownObjectRelease();
  swift_errorRelease(v1);
  return swift_task_switch(sub_1001AAAA8, 0, 0);
}

uint64_t sub_1001AAAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1001AB3D4();
  sub_1001AB2F4();
  sub_100165EB4();
  sub_1001AB2B0();
  swift_task_dealloc(v1);
  swift_task_dealloc(v0);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1001AAB30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v18[24];

  v4 = type metadata accessor for NWListener.State(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v7);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v18, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    v12 = type metadata accessor for TaskPriority(0);
    sub_100161B54((uint64_t)v9, 1, 1, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], a1, v4);
    v13 = *(unsigned __int8 *)(v5 + 80);
    v14 = (v13 + 40) & ~v13;
    v15 = (char *)swift_allocObject(&unk_1002C7730, v14 + v6, v13 | 7);
    *((_QWORD *)v15 + 2) = 0;
    *((_QWORD *)v15 + 3) = 0;
    *((_QWORD *)v15 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v15[v14], &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v4);
    sub_1001BDE9C();
    return swift_release(v16);
  }
  return result;
}

uint64_t sub_1001AAC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_100316554);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_10019DF6C;
  return sub_1001AA0C8(a5);
}

uint64_t sub_1001AACE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];

  v4 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v13, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v8 = result;
    v9 = type metadata accessor for TaskPriority(0);
    sub_100161B54((uint64_t)v6, 1, 1, v9);
    v10 = (_QWORD *)swift_allocObject(&unk_1002C7708, 48, 7);
    v10[2] = 0;
    v10[3] = 0;
    v10[4] = v8;
    v10[5] = a1;
    swift_retain(a1);
    sub_1001BDF68();
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_1001AADD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch(sub_1001AADEC, 0, 0);
}

uint64_t sub_1001AADEC()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 16);
  *(_QWORD *)(v0 + 40) = Strong;
  if (Strong)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_100315164);
    *(_QWORD *)(v0 + 48) = v2;
    *v2 = v0;
    v2[1] = sub_1001AAE68;
    return sub_10017D54C(*(_QWORD *)(v0 + 32));
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_1001AAE68()
{
  sub_100165E44();
  sub_100165DBC();
  swift_unknownObjectRelease();
  return swift_task_switch(sub_1001AAEB0, 0, 0);
}

uint64_t sub_1001AAEB0()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 40) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1001AAECC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165B20((uint64_t)(v0 + 2));
  sub_100165E98();
  swift_bridgeObjectRelease(v0[5], v1);
  sub_10016FF44(v0[6], v0[7]);
  swift_bridgeObjectRelease(v0[9], v2);
  return v0;
}

uint64_t sub_1001AAF04()
{
  uint64_t v0;

  sub_1001AAECC();
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for PeerListener()
{
  return objc_opt_self(_TtC14GameDaemonCore12PeerListener);
}

uint64_t sub_1001AAF44()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AAF68(uint64_t a1)
{
  uint64_t v1;

  return sub_1001AAB30(a1, v1);
}

uint64_t sub_1001AAF70(uint64_t a1)
{
  uint64_t v1;

  return sub_1001AACE4(a1, v1);
}

uint64_t sub_1001AAF78()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_100165E98();
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001AAFA8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)swift_task_alloc(dword_10031652C);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001AB290(v1);
  return sub_1001AADD0(v2, v3, v4, v5, v6);
}

uint64_t sub_1001AB008(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, "udid");

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  return sub_100165E7C();
}

uint64_t sub_1001AB070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for NWListener.State(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  swift_unknownObjectRelease();
  sub_100165E98();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v6 = sub_100165E7C();
  return swift_deallocObject(v6, v7, v5);
}

uint64_t sub_1001AB0E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for NWListener.State(0);
  v1 = (_QWORD *)swift_task_alloc(dword_100316544);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_1001AB290(v1);
  return sub_1001AAC90(v2, v3, v4, v5, v6);
}

uint64_t sub_1001AB160(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100161BD0(&qword_100316558);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001AB1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_100316558);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001AB1E8()
{
  uint64_t v0;
  uint64_t v1;

  return swift_beginAccess(v0, v1 - 120, 32, 0);
}

uint64_t sub_1001AB1FC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 96, v1 - 88);
}

uint64_t sub_1001AB218(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 160, v1 - 152);
}

uint64_t sub_1001AB234(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 160, v1 - 152);
}

BOOL sub_1001AB250(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void sub_1001AB260()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0;
  *(_QWORD *)(v0 - 104) = 0xE000000000000000;
}

BOOL sub_1001AB280(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1001AB288()
{
  uint64_t v0;

  return swift_endAccess(v0 - 120);
}

uint64_t sub_1001AB290(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1001AB2B0()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 200));
}

void sub_1001AB2C8(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
}

uint64_t sub_1001AB2DC()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 264));
}

uint64_t sub_1001AB2E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_10016FE60(v4, v3, a3);
}

uint64_t sub_1001AB2F4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 208));
}

uint64_t sub_1001AB304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10016FE60(a1, (a2 - 32) | 0x8000000000000000, (uint64_t *)(v2 - 112));
}

BOOL sub_1001AB314(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1001AB324()
{
  uint64_t v0;

  return swift_allocObject(v0, 24, 7);
}

BOOL sub_1001AB334(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1001AB344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 176))(v1, v0);
}

unint64_t sub_1001AB354()
{
  return 0xD000000000000015;
}

uint64_t sub_1001AB374(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_1001AB388(uint64_t a1)
{
  uint64_t v1;

  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_1001AB394(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 160) = a1;
  return v1 - 160;
}

uint64_t sub_1001AB3A8(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

uint64_t sub_1001AB3B0()
{
  return static GKLog.match.getter();
}

uint64_t sub_1001AB3B8(uint64_t a1)
{
  return Logger.logObject.getter(a1);
}

uint64_t sub_1001AB3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _print_unlocked<A, B>(_:_:)(a1, a2, a3);
}

uint64_t sub_1001AB3CC()
{
  return static GKLog.match.getter();
}

void sub_1001AB3D4()
{
  sub_1001A8E80();
}

uint64_t sub_1001AB3DC()
{
  return static GKLog.match.getter();
}

uint64_t sub_1001AB3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(*(_QWORD *)(v2 - 104), a2);
}

uint64_t sub_1001AB3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _print_unlocked<A, B>(_:_:)(a1, a2, a3);
}

Swift::Int sub_1001AB3F8(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int sub_1001AB43C()
{
  unsigned __int8 *v0;

  return sub_1001AB3F8(*v0);
}

Swift::Int sub_1001AB444(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001AB484(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = a1;
  return swift_release(v2);
}

id sub_1001AB494(uint64_t a1)
{
  _QWORD *v1;
  objc_super v4;

  swift_defaultActor_initialize(v1);
  v1[14] = 0;
  v1[15] = a1;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for FairPlaySessionProvider();
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t sub_1001AB500(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = sub_100161BD0(&qword_100314CE8);
  v3[7] = sub_1001999C0(v4);
  v5 = sub_1001ADD40();
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[10] = v7;
  v3[11] = sub_1001ADC3C(v7);
  v3[12] = sub_100180C84();
  sub_100180C8C();
  return sub_100194778(v8, v9, v10);
}

uint64_t sub_1001AB570()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v30;
  uint64_t v31;

  v1 = v0[6];
  v2 = *(_QWORD *)(v1 + 112);
  v0[13] = v2;
  if (v2)
  {
    v3 = *((unsigned int *)&async function pointer to Task.value.getter + 1);
    swift_retain(v2);
    v4 = (_QWORD *)swift_task_alloc(v3);
    v0[14] = v4;
    v5 = sub_1001AD890();
    v6 = sub_100161BD0(&qword_100314EA0);
    *v4 = v0;
    v4[1] = sub_1001AB764;
    v7 = v0 + 3;
    v8 = v2;
  }
  else
  {
    v9 = v0[11];
    v10 = v0[12];
    v11 = v0[9];
    v12 = v0[10];
    v13 = v0[7];
    v14 = v0[8];
    v31 = v13;
    v15 = (void *)v0[4];
    v30 = (void *)v0[5];
    Date.init()();
    v16 = type metadata accessor for TaskPriority(0);
    sub_1001ADCAC(v13, v17, v18, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v10, v14);
    v19 = sub_1001AD704();
    v20 = *(unsigned __int8 *)(v11 + 80);
    v21 = (v20 + 48) & ~v20;
    v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = (char *)swift_allocObject(&unk_1002C7758, v22 + 8, v20 | 7);
    *((_QWORD *)v23 + 2) = v1;
    *((_QWORD *)v23 + 3) = v19;
    *((_QWORD *)v23 + 4) = v15;
    *((_QWORD *)v23 + 5) = v1;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(&v23[v21], v9, v14);
    *(_QWORD *)&v23[v22] = v30;
    swift_retain_n(v1, 2);
    v24 = v15;
    v25 = v30;
    v26 = sub_1001AC870(v31, (uint64_t)&unk_1003165D0, (uint64_t)v23);
    v0[16] = v26;
    v27 = swift_retain(v26);
    sub_1001AB484(v27);
    v28 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to Task.value.getter + 1));
    v0[17] = v28;
    v5 = sub_1001AD890();
    v6 = sub_100161BD0(&qword_100314EA0);
    *v28 = v0;
    v28[1] = sub_1001AB7FC;
    v7 = v0 + 2;
    v8 = v26;
  }
  return Task.value.getter(v7, v8, v5, v6, &protocol self-conformance witness table for Error);
}

uint64_t sub_1001AB764()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  sub_10016D024();
  sub_10016D2B8(v2);
  *(_QWORD *)(v0 + 120) = v1;
  swift_task_dealloc(v3);
  if (v1)
    v4 = sub_1001AB894;
  else
    v4 = sub_1001AB7B8;
  return sub_100194778((uint64_t)v4, *(_QWORD *)(v0 + 48), 0);
}

uint64_t sub_1001AB7B8()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 24);
  sub_1001ADC88();
  sub_100180C98();
  sub_100180D6C();
  return sub_100194758(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001AB7FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  sub_10016D024();
  sub_10016D2B8(v2);
  *(_QWORD *)(v0 + 144) = v1;
  swift_task_dealloc(v3);
  if (v1)
    v4 = sub_1001AB8D0;
  else
    v4 = sub_1001AB850;
  return sub_100194778((uint64_t)v4, *(_QWORD *)(v0 + 48), 0);
}

uint64_t sub_1001AB850()
{
  uint64_t v0;
  uint64_t v1;

  sub_1001ADCE8();
  sub_10016D448();
  v1 = *(_QWORD *)(v0 + 16);
  sub_1001ADC88();
  sub_100180C98();
  sub_100180D6C();
  return sub_100194758(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001AB894()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  sub_1001ADC88();
  sub_100180C98();
  sub_100180D6C();
  return sub_10016D170(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001AB8D0()
{
  uint64_t v0;

  sub_1001ADCE8();
  sub_10016D448();
  sub_1001ADC88();
  sub_100180C98();
  sub_100180D6C();
  return sub_10016D170(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001AB90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v7[46] = a6;
  v7[47] = a7;
  v7[44] = a4;
  v7[45] = a5;
  v7[43] = a1;
  v8 = type metadata accessor for Logger(0);
  v7[48] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[49] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[50] = swift_task_alloc(v10);
  v7[51] = swift_task_alloc(v10);
  v7[52] = swift_task_alloc(v10);
  v11 = (_QWORD *)swift_task_alloc(dword_1003165E4);
  v7[53] = v11;
  *v11 = v7;
  v11[1] = sub_1001AB9E0;
  return sub_1001AC58C((uint64_t)(v7 + 2));
}

uint64_t sub_1001AB9E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  sub_10016D024();
  sub_10016D2B8(v3);
  v0[54] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return sub_1001ADC68((uint64_t)sub_1001AC444, v0[45], 0);
  v6 = (_QWORD *)swift_task_alloc(dword_1003165A4);
  v0[55] = (uint64_t)v6;
  *v6 = v2;
  v6[1] = sub_1001ABAAC;
  return sub_1001ACB70((uint64_t)(v0 + 2), v0[44]);
}

uint64_t sub_1001ABAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 440);
  *(_QWORD *)(v4 + 448) = a1;
  *(_QWORD *)(v4 + 456) = a2;
  *(_QWORD *)(v4 + 464) = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v7 = *(_QWORD *)(v4 + 360);
    *(_OWORD *)(v4 + 232) = *(_OWORD *)(v4 + 16);
    sub_1001768AC(v4 + 232, v6);
    *(_OWORD *)(v4 + 296) = *(_OWORD *)(v4 + 32);
    sub_1001768AC(v4 + 296, v8);
    *(_OWORD *)(v4 + 280) = *(_OWORD *)(v4 + 48);
    sub_1001768AC(v4 + 280, v9);
    v10 = sub_1001AC4A8;
    v11 = v7;
  }
  else
  {
    v11 = *(_QWORD *)(v4 + 360);
    v10 = sub_1001ABBA0;
  }
  return sub_1001ADC28((uint64_t)v10, v11, 0);
}

uint64_t sub_1001ABBA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  _QWORD *v24;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);

  v2 = *(_QWORD *)(v0 + 448);
  v1 = *(_QWORD *)(v0 + 456);
  v3 = objc_msgSend(objc_allocWithZone((Class)GKFairPlaySAPSession), "init");
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 472) = v3;
  *(_QWORD *)(v0 + 480) = v4;
  swift_bridgeObjectRetain(v4);
  sub_1001AD8CC(v5, v4, v3);
  sub_10016D110(v6, v7);
  *(_QWORD *)(v0 + 320) = 0;
  v8 = sub_1001AD910(v2, v1, v0 + 320, v3, (SEL *)&selRef_exchangeData_error_);
  v9 = *(void **)(v0 + 320);
  if (v8)
  {
    v10 = v8;
    v11 = *(NSObject **)(v0 + 416);
    v12 = v9;
    v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v15 = v14;
    *(_QWORD *)(v0 + 488) = v13;
    *(_QWORD *)(v0 + 496) = v14;

    v17 = static GKLog.daemon.getter(v16);
    Logger.logObject.getter(v17);
    v18 = sub_1001A84C0();
    if (os_log_type_enabled(v11, v18))
    {
      v19 = (uint8_t *)sub_100165DA4(2);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v18, "MESCAL:did exchange initialize cert data", v19, 2u);
      sub_100165D98((uint64_t)v19);
    }
    v20 = *(_QWORD *)(v0 + 416);
    v21 = *(_QWORD *)(v0 + 384);
    v22 = *(_QWORD *)(v0 + 392);

    v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    *(_QWORD *)(v0 + 504) = v23;
    v23(v20, v21);
    v24 = (_QWORD *)swift_task_alloc(dword_1003165AC);
    *(_QWORD *)(v0 + 512) = v24;
    *v24 = v0;
    v24[1] = sub_1001ABDE4;
    return sub_1001ACF00(v0 + 16, *(_QWORD *)(v0 + 352), v13, v15);
  }
  else
  {
    v26 = v9;
    sub_10016D110((uint64_t)v26, v27);
    *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 32);
    sub_1001768AC(v0 + 136, v28);
    *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 48);
    sub_1001768AC(v0 + 152, v29);
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v30);
    sub_1001ADCD0();

    sub_1001ADBD4();
    sub_100180E00();
    sub_1001810BC();
    sub_1001816AC();
    v31 = (uint64_t (*)(void))sub_1001ADCDC();
    return sub_1001ADBF8(v31);
  }
}

uint64_t sub_1001ABDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;

  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 512);
  *(_QWORD *)(v4 + 520) = a1;
  *(_QWORD *)(v4 + 528) = a2;
  *(_QWORD *)(v4 + 536) = v2;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 360);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 480), v7);
  v9 = (_OWORD *)(v4 + 32);
  v10 = (_OWORD *)(v4 + 48);
  if (v2)
  {
    *(_OWORD *)(v4 + 168) = *v9;
    sub_1001768AC(v4 + 168, v8);
    *(_OWORD *)(v4 + 184) = *v10;
    sub_1001768AC(v4 + 184, v11);
    v12 = sub_1001AC50C;
  }
  else
  {
    *(_OWORD *)(v4 + 200) = *v9;
    sub_1001768AC(v4 + 200, v8);
    *(_OWORD *)(v4 + 216) = *v10;
    sub_1001768AC(v4 + 216, v13);
    v12 = sub_1001ABEF8;
  }
  return sub_1001ADC28((uint64_t)v12, v6, 0);
}

uint64_t sub_1001ABEF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  Class isa;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  id v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Class v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  unint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t (*v74)(void);
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = (void *)objc_opt_self(NSDictionary);
  *(_QWORD *)(v0 + 312) = 0;
  v4 = sub_1001AD910(v2, v1, v0 + 312, v3, (SEL *)&selRef__gkDictionaryWithServerData_error_);
  v5 = *(void **)(v0 + 312);
  if (!v4)
  {
    v58 = *(_QWORD *)(v0 + 488);
    v105 = *(_QWORD *)(v0 + 496);
    v59 = *(void **)(v0 + 472);
    v60 = v5;
    _convertNSErrorToError(_:)(v5);
    sub_1001ADD38();
    sub_1001ADD04();
    sub_1001ADC4C();
    v61 = sub_1001ADCF8();
    sub_10016FF44(v61, v62);

    v63 = v58;
    v64 = v105;
LABEL_14:
    sub_10016FF44(v63, v64);
    sub_1001AB484(0);
    sub_1001ADD04();
    sub_100180C98();
    sub_100180E00();
    sub_1001816AC();
    v74 = *(uint64_t (**)(void))(v0 + 8);
    return v74();
  }
  v6 = v4;
  v7 = *(NSObject **)(v0 + 408);
  v8 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v9 = v5;

  v11 = static GKLog.daemon.getter(v10);
  v12 = v7;
  Logger.logObject.getter(v11);
  v13 = sub_1001A84C0();
  if (os_log_type_enabled(v7, v13))
  {
    v14 = (uint8_t *)sub_100165DA4(2);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "MESCAL:got the setup data from the server", v14, 2u);
    sub_100165D98((uint64_t)v14);
  }
  v15 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
  v16 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 384);

  v15(v16, v17);
  *(_QWORD *)(v0 + 264) = 0xD000000000000010;
  *(_QWORD *)(v0 + 272) = 0x800000010029A780;
  AnyHashable.init<A>(_:)(v0 + 264);
  sub_100166D80((uint64_t)v8, (_OWORD *)(v0 + 104));
  swift_bridgeObjectRelease(v8, v18);
  sub_1001638F4(v0 + 64);
  if (!*(_QWORD *)(v0 + 128))
  {
    sub_10016FF88(v0 + 104, &qword_1003159B0);
    goto LABEL_13;
  }
  if ((swift_dynamicCast(v0 + 248, v0 + 104, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_13:
    v65 = *(_QWORD *)(v0 + 520);
    v67 = *(_QWORD *)(v0 + 488);
    v66 = *(_QWORD *)(v0 + 496);
    v68 = *(void **)(v0 + 472);
    v70 = *(_QWORD *)(v0 + 448);
    v69 = *(_QWORD *)(v0 + 456);
    v71 = sub_1001AD6C8();
    v72 = sub_1001948C0((uint64_t)&type metadata for FairPlaySessionError, v71);
    sub_1001ADC78(v72, v73);
    sub_1001ADD54(v65);
    sub_10016FF44(v67, v66);

    v63 = v70;
    v64 = v69;
    goto LABEL_14;
  }
  v19 = Data.init(base64Encoded:options:)(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), 0);
  v21 = v20;
  sub_10016D110(v19, v20);
  isa = 0;
  if (v21 >> 60 != 15)
  {
    v23 = sub_1001ADCF8();
    sub_100170728(v23, v24);
    sub_1001ADCF8();
    isa = Data._bridgeToObjectiveC()().super.isa;
    v25 = sub_1001ADCF8();
    sub_10016FF30(v25, v26);
  }
  v104 = v19;
  v27 = *(void **)(v0 + 472);
  *(_QWORD *)(v0 + 328) = 0;
  v28 = objc_msgSend(v27, "exchangeData:error:", isa, v0 + 328);
  sub_1001ADD38();
  v29 = *(id *)(v0 + 328);
  if (!v8)
  {
    v76 = *(_QWORD *)(v0 + 520);
    v77 = *(_QWORD *)(v0 + 488);
    v102 = *(_QWORD *)(v0 + 496);
    v78 = *(void **)(v0 + 472);
    _convertNSErrorToError(_:)(v29);
    sub_1001ADD38();
    sub_1001ADD04();
    sub_1001ADC4C();
    sub_1001ADD54(v76);

    sub_1001ADCB8(v79, v80, v81, v82, v83, v84, v85, v86, v97, v98, v102, v104);
    v63 = v77;
    v64 = v103;
    goto LABEL_14;
  }
  v30 = *(NSObject **)(v0 + 400);
  v31 = *(void **)(v0 + 376);
  v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
  sub_10016FF44(v32, v33);

  v34 = Date.timeIntervalSinceNow.getter();
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterDomainPlayerAuthentication);
  v37 = v36;
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterPlayerAuthenticationDRMResponseTime);
  v40 = v39;
  v41 = Date._bridgeToObjectiveC()().super.isa;
  sub_1001AD96C(v35, v37, v38, v40, (uint64_t)v41, v31);

  v43 = static GKLog.daemon.getter(v42);
  v44 = v30;
  Logger.logObject.getter(v43);
  v45 = sub_1001A84C0();
  v46 = os_log_type_enabled(v30, v45);
  v48 = *(_QWORD *)(v0 + 448);
  v47 = *(_QWORD *)(v0 + 456);
  if (v46)
  {
    v101 = *(_QWORD *)(v0 + 456);
    v99 = *(_QWORD *)(v0 + 448);
    v49 = (uint8_t *)sub_100165DA4(12);
    *(_DWORD *)v49 = 134217984;
    *(double *)(v0 + 336) = -v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "MESCAL:did finish exchanging cert data after %f seconds", v49, 0xCu);
    sub_100165D98((uint64_t)v49);
    sub_1001ADC4C();
    sub_1001ADCD0();
    sub_10016FF44(v99, v101);

    sub_1001ADCB8(v50, v51, v52, v53, v54, v55, v56, v57, v97, v99, v101, v104);
  }
  else
  {
    sub_1001ADC4C();
    sub_1001ADCD0();
    v87 = sub_10016FF44(v48, v47);
    sub_1001ADCB8(v87, v88, v89, v90, v91, v92, v93, v94, v97, v98, v100, v104);

  }
  v95 = *(_QWORD *)(v0 + 472);
  v96 = *(_QWORD **)(v0 + 344);
  (*(void (**)(_QWORD, _QWORD))(v0 + 504))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384));
  *v96 = v95;
  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  v74 = *(uint64_t (**)(void))(v0 + 8);
  return v74();
}

uint64_t sub_1001AC444()
{
  uint64_t (*v0)(void);

  sub_1001ADC94();
  sub_1001ADBD4();
  sub_100180E00();
  sub_1001810BC();
  sub_1001816AC();
  v0 = (uint64_t (*)(void))sub_1001ADCDC();
  return sub_1001ADBBC(v0);
}

uint64_t sub_1001AC4A8()
{
  uint64_t (*v0)(void);

  sub_1001ADC94();
  sub_1001ADBD4();
  sub_100180E00();
  sub_1001810BC();
  sub_1001816AC();
  v0 = (uint64_t (*)(void))sub_1001ADCDC();
  return sub_1001ADBBC(v0);
}

uint64_t sub_1001AC50C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_1001ADC94();
  v1 = (void *)v0[59];
  v2 = v0[56];
  sub_10016FF44(v0[61], v0[62]);

  sub_1001ADD54(v2);
  sub_1001ADBD4();
  sub_100180E00();
  sub_1001810BC();
  sub_1001816AC();
  v3 = (uint64_t (*)(void))sub_1001ADCDC();
  return sub_1001ADBBC(v3);
}

uint64_t sub_1001AC58C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 168) = a1;
  *(_QWORD *)(v2 + 176) = v1;
  return swift_task_switch(sub_1001AC5A4, 0, 0);
}

uint64_t sub_1001AC5A4()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[22];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1001AC638;
  v3 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1001AD5C0;
  v4[3] = &unk_1002C7770;
  v4[4] = v3;
  objc_msgSend(v2, "getValuesWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1001AC638()
{
  return swift_task_switch(sub_1001AC684, 0, 0);
}

uint64_t sub_1001AC684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;

  v1 = *(_QWORD *)(v0 + 120);
  if (!v1)
    goto LABEL_13;
  strcpy((char *)(v0 + 152), "gk-sap-version");
  *(_BYTE *)(v0 + 167) = -18;
  sub_1001ADCC4();
  sub_1001ADC58();
  v2 = sub_1001ADD5C();
  if (!*(_QWORD *)(v0 + 144))
    goto LABEL_9;
  if ((sub_1001ADC14(v2, v3, v4, (uint64_t)&type metadata for Int) & 1) == 0)
  {
LABEL_11:
    v20 = v1;
LABEL_12:
    swift_bridgeObjectRelease(v20, v5);
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 152) = 0xD000000000000015;
  *(_QWORD *)(v0 + 160) = 0x800000010029A7A0;
  sub_1001ADCC4();
  sub_1001ADC58();
  v7 = sub_1001ADD5C();
  if (!*(_QWORD *)(v0 + 144))
  {
LABEL_9:
    v19 = v1;
    goto LABEL_10;
  }
  if ((sub_1001ADC14(v7, v3, v8, (uint64_t)&type metadata for String) & 1) == 0)
    goto LABEL_11;
  v10 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 160);
  strcpy((char *)(v0 + 152), "gk-sap-setup");
  *(_BYTE *)(v0 + 165) = 0;
  *(_WORD *)(v0 + 166) = -5120;
  sub_1001ADCC4();
  sub_1001ADC58();
  swift_bridgeObjectRelease(v1, v11);
  v12 = sub_1001ADD5C();
  if (*(_QWORD *)(v0 + 144))
  {
    if ((sub_1001ADC14(v12, v3, v13, (uint64_t)&type metadata for String) & 1) != 0)
    {
      v15 = *(_QWORD *)(v0 + 160);
      v14 = *(_QWORD **)(v0 + 168);
      v16 = *(_QWORD *)(v0 + 152);
      *(_QWORD *)(v0 + 80) = v6;
      *v14 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v14[1] = v17;
      v14[2] = v10;
      v14[3] = v9;
      v14[4] = v16;
      v14[5] = v15;
      return sub_1001ADBF8(*(uint64_t (**)(void))(v0 + 8));
    }
    v20 = v9;
    goto LABEL_12;
  }
  v19 = v9;
LABEL_10:
  swift_bridgeObjectRelease(v19, v3);
  sub_10016FF88(v0 + 120, &qword_1003159B0);
LABEL_13:
  v21 = sub_1001AD6C8();
  v22 = sub_1001948C0((uint64_t)&type metadata for FairPlaySessionError, v21);
  *v23 = 0;
  swift_willThrow(v22);
  return sub_1001ADBF8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001AC870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = sub_10016445C(a1, 1, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10016FF88(a1, &qword_100314CE8);
    v8 = 7168;
  }
  else
  {
    v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v8 = v9 | 0x1C00;
  }
  if (*(_QWORD *)(a3 + 16))
  {
    v10 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain();
    v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    v14 = v13;
    swift_unknownObjectRelease();
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = sub_1001AD890();
  if (v14 | v12)
  {
    v18[0] = 0;
    v18[1] = 0;
    v16 = v18;
    v18[2] = v12;
    v18[3] = v14;
  }
  else
  {
    v16 = 0;
  }
  return swift_task_create(v8, v16, v15, a2, a3);
}

uint64_t sub_1001ACA14(void *a1, void *a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD *v11;

  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  v8 = dword_10031659C;
  v9 = a1;
  v10 = a2;
  swift_retain(a4);
  v11 = (_QWORD *)swift_task_alloc(v8);
  v4[6] = v11;
  *v11 = v4;
  v11[1] = sub_1001ACAA4;
  return sub_1001AB500((uint64_t)v9, (uint64_t)v10);
}

uint64_t sub_1001ACAA4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  void *v11;
  void (*v12)(void);
  _QWORD *v14;

  v3 = v1;
  v5 = *(_QWORD **)v2;
  v14 = v5;
  v7 = (void *)v5[3];
  v6 = v5[4];
  v8 = (void *)v5[2];
  sub_10016D2B8(&v14);
  swift_task_dealloc(v9);

  swift_release(v6);
  v10 = (void (**)(_QWORD, _QWORD, _QWORD))v5[5];
  if (v3)
  {
    v11 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v10)[2](v10, 0, v11);

    _Block_release(v10);
  }
  else
  {
    sub_100180C8C();
    v12();
    _Block_release(v10);

  }
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1001ACB70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_100161BD0(&qword_1003165B0);
  v3[5] = sub_1001999C0(v4);
  v5 = sub_100161BD0(&qword_100315B00);
  v3[6] = sub_1001999C0(v5);
  v6 = type metadata accessor for URLRequest(0);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[8] = v7;
  v3[9] = sub_1001ADC3C(*(_QWORD *)(v7 + 64));
  v3[10] = sub_100180C84();
  sub_100180C8C();
  return sub_100194778(v8, v9, v10);
}

uint64_t sub_1001ACBF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSURL *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  _QWORD *v16;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 48);
  URL.init(string:)(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16));
  v2 = type metadata accessor for URL(0);
  v3 = sub_10016445C(v1, 1, v2);
  v5 = 0;
  if (v3 != 1)
  {
    v6 = *(_QWORD *)(v0 + 48);
    URL._bridgeToObjectiveC()(v4);
    v5 = v7;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v6, v2);
  }
  LOWORD(v21) = 0;
  v8 = objc_msgSend(*(id *)(v0 + 24), "requestWithURL:playerID:authToken:pushToken:client:postData:includeUDID:includeAPNS:sapSession:", v5, 0, 0, 0, 0, 0, v21, 0);

  if (v8)
  {
    v12 = *(_QWORD *)(v0 + 64);
    v11 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 40);
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v8);

    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
    v15(v14, v11, v13);
    sub_100161B54(v14, 0, 1, v13);
    if (sub_1001ADD0C(v14) != 1)
    {
      v15(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 56));
      v16 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
      *(_QWORD *)(v0 + 88) = v16;
      *v16 = v0;
      v16[1] = sub_1001ACDC8;
      return NSURLSession.data(for:delegate:)(*(_QWORD *)(v0 + 80), 0);
    }
  }
  else
  {
    sub_1001ADCAC(*(_QWORD *)(v0 + 40), v9, v10, *(_QWORD *)(v0 + 56));
  }
  sub_10016FF88(*(_QWORD *)(v0 + 40), &qword_1003165B0);
  v18 = sub_1001AD6C8();
  v19 = sub_1001948C0((uint64_t)&type metadata for FairPlaySessionError, v18);
  sub_1001ADC78(v19, v20);
  sub_1001ADD18();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ACDC8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  _QWORD *v13;

  v13 = (_QWORD *)*v4;
  v8 = v13;
  sub_10016D2B8(&v13);
  v8[12] = v3;
  swift_task_dealloc(v9);
  v10 = v8[4];
  if (v3)
  {
    v11 = sub_1001ACEAC;
  }
  else
  {

    v8[13] = a2;
    v8[14] = a1;
    v11 = sub_1001ACE4C;
  }
  return sub_100194778((uint64_t)v11, v10, 0);
}

uint64_t sub_1001ACE4C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
  sub_10016D2A8();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104));
}

uint64_t sub_1001ACEAC()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
  sub_1001ADD18();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001ACF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  v6 = sub_100161BD0(&qword_1003165B0);
  v5[20] = sub_1001999C0(v6);
  v7 = sub_100161BD0(&qword_100315B00);
  v5[21] = sub_1001999C0(v7);
  v8 = type metadata accessor for URLRequest(0);
  v5[22] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[23] = v9;
  v5[24] = sub_1001ADC3C(*(_QWORD *)(v9 + 64));
  v5[25] = sub_100180C84();
  sub_100180C8C();
  return sub_1001ADC68(v10, v11, v12);
}

uint64_t sub_1001ACFB4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Class isa;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSURL *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  _QWORD *v33;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;

  v1 = *(_QWORD **)(v0 + 120);
  v2 = sub_100161BD0(&qword_100316538);
  inited = swift_initStackObject(v2, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100234550;
  *(_QWORD *)(inited + 32) = 0x737265762D706173;
  *(_QWORD *)(inited + 40) = 0xEB000000006E6F69;
  v4 = v1[1];
  *(_QWORD *)(inited + 48) = *v1;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 64) = 0xD000000000000010;
  *(_QWORD *)(inited + 72) = 0x800000010029A780;
  swift_bridgeObjectRetain(v4);
  *(Swift::String *)(inited + 80) = Data.base64EncodedString(options:)(0);
  v5 = sub_1001ADD24();
  v9 = Dictionary.init(dictionaryLiteral:)(v5, v6, v7, v8);
  v10 = (void *)objc_opt_self(NSPropertyListSerialization);
  sub_1001ADD24();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9, v12);
  *(_QWORD *)(v0 + 112) = 0;
  v13 = objc_msgSend(v10, "dataWithPropertyList:format:options:error:", isa, 100, 0, v0 + 112);

  v14 = *(id *)(v0 + 112);
  if (v13)
  {
    v15 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 120);
    v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v19 = v18;

    *(_QWORD *)(v0 + 208) = v17;
    *(_QWORD *)(v0 + 216) = v19;
    URL.init(string:)(*(_QWORD *)(v16 + 32));
    v20 = type metadata accessor for URL(0);
    v22 = 0;
    if (sub_1001ADD0C(v15) != 1)
    {
      v23 = *(_QWORD *)(v0 + 168);
      URL._bridgeToObjectiveC()(v21);
      v22 = v24;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v23, v20);
    }
    v25 = sub_1001AD610((uint64_t)v22, 0, 0, 0, 0, v17, v19, 0, 0, 0, *(void **)(v0 + 128));

    if (v25)
    {
      v29 = *(_QWORD *)(v0 + 184);
      v28 = *(_QWORD *)(v0 + 192);
      v30 = *(_QWORD *)(v0 + 176);
      v31 = *(_QWORD *)(v0 + 160);
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
      v32(v31, v28, v30);
      sub_100161B54(v31, 0, 1, v30);
      if (sub_10016445C(v31, 1, v30) != 1)
      {
        v32(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 176));
        v33 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
        *(_QWORD *)(v0 + 224) = v33;
        *v33 = v0;
        v33[1] = sub_1001AD320;
        return NSURLSession.data(for:delegate:)(*(_QWORD *)(v0 + 200), 0);
      }
    }
    else
    {
      sub_1001ADCAC(*(_QWORD *)(v0 + 160), v26, v27, *(_QWORD *)(v0 + 176));
    }
    sub_10016FF88(*(_QWORD *)(v0 + 160), &qword_1003165B0);
    v37 = sub_1001AD6C8();
    v38 = sub_1001948C0((uint64_t)&type metadata for FairPlaySessionError, v37);
    sub_1001ADC78(v38, v39);
    sub_10016FF44(v17, v19);
  }
  else
  {
    v35 = v14;
    _convertNSErrorToError(_:)(v14);

    swift_willThrow(v36);
  }
  sub_1001ADD48();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AD320()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  sub_1001ADC94();
  v16 = v2;
  v17 = v3;
  v15 = v1;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v15 = (_QWORD *)*v1;
  v10 = v15;
  sub_10016D2B8(&v15);
  v10[29] = v0;
  swift_task_dealloc(v11);
  v12 = v10[19];
  if (v0)
  {
    v13 = sub_1001AD48C;
  }
  else
  {

    v10[30] = v7;
    v10[31] = v9;
    v13 = sub_1001AD3EC;
  }
  return swift_task_switch(v13, v12, 0);
}

uint64_t sub_1001AD3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1001ADC94();
  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  sub_10016FF44(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_10016D2A8();
  sub_100180C98();
  sub_100180E00();
  sub_1001810BC();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 240));
}

uint64_t sub_1001AD48C()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  sub_10016FF44(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  sub_10016D448();
  sub_1001ADD48();
  sub_100180C98();
  sub_100180D6C();
  sub_100180E00();
  v1 = (uint64_t (*)(void))sub_1001ADCDC();
  return v1();
}

void sub_1001AD514()
{
  uint64_t v0;

  swift_defaultActor_initialize(v0);
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.FairPlaySessionProvider", 38, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1001AD55C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1001AD588()
{
  uint64_t v0;

  sub_1001AD55C();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FairPlaySessionProvider()
{
  return objc_opt_self(GKFairPlaySessionProvider);
}

uint64_t sub_1001AD5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
    a2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  return sub_1001A32E4(v2, a2);
}

id sub_1001AD610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10, void *a11)
{
  Class isa;
  id v18;
  uint64_t v20;

  isa = Data._bridgeToObjectiveC()().super.isa;
  BYTE1(v20) = a9;
  LOBYTE(v20) = a8;
  v18 = objc_msgSend(a11, "requestWithURL:playerID:authToken:pushToken:client:postData:includeUDID:includeAPNS:sapSession:", a1, a2, a3, a4, a5, isa, v20, a10);

  return v18;
}

unint64_t sub_1001AD6C8()
{
  unint64_t result;

  result = qword_1003165B8;
  if (!qword_1003165B8)
  {
    result = swift_getWitnessTable(&unk_100234650, &type metadata for FairPlaySessionError);
    atomic_store(result, &qword_1003165B8);
  }
  return result;
}

unint64_t sub_1001AD704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003165C8;
  if (!qword_1003165C8)
  {
    v1 = type metadata accessor for FairPlaySessionProvider();
    result = swift_getWitnessTable(&unk_1002345A8, v1);
    atomic_store(result, (unint64_t *)&qword_1003165C8);
  }
  return result;
}

uint64_t sub_1001AD740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_1001ADD40();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  swift_release(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1001AD7DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_1001ADD40() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_1003165C4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10016C73C;
  return sub_1001AB90C(a1, v6, v7, v8, v9, v10, v11);
}

unint64_t sub_1001AD890()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003165D8;
  if (!qword_1003165D8)
  {
    v1 = objc_opt_self(GKFairPlaySAPSession);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_1003165D8);
  }
  return result;
}

void sub_1001AD8CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "setSAPVersion:", v4);

}

id sub_1001AD910(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5)
{
  Class isa;
  id v9;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(a4, *a5, isa, a3);

  return v9;
}

void sub_1001AD96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v11);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4, v12);
  objc_msgSend(a6, "reportEvent:type:startTime:", v10, v13, a5);

}

uint64_t sub_1001AD9FC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001ADA38()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_1003165EC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10016C73C;
  return ((uint64_t (*)(void *, void *, void *, uint64_t))((char *)&dword_1003165E8 + dword_1003165E8))(v2, v3, v5, v4);
}

uint64_t storeEnumTagSinglePayload for FairPlaySessionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001ADAFC + 4 * byte_100234565[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001ADB30 + 4 * byte_100234560[v4]))();
}

uint64_t sub_1001ADB30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001ADB38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001ADB40);
  return result;
}

uint64_t sub_1001ADB4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001ADB54);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001ADB58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001ADB60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FairPlaySessionError()
{
  return &type metadata for FairPlaySessionError;
}

unint64_t sub_1001ADB80()
{
  unint64_t result;

  result = qword_1003165F8;
  if (!qword_1003165F8)
  {
    result = swift_getWitnessTable(&unk_100234628, &type metadata for FairPlaySessionError);
    atomic_store(result, (unint64_t *)&qword_1003165F8);
  }
  return result;
}

uint64_t sub_1001ADBBC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001ADBD4()
{
  uint64_t v0;

  v0 = sub_1001AB484(0);
  return swift_willThrow(v0);
}

uint64_t sub_1001ADBF8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001ADC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return swift_dynamicCast(v5, v4, v6 + 8, a4, 6);
}

uint64_t sub_1001ADC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1001ADC3C@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1001ADC4C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10016FF44(v1, v0);
}

void sub_1001ADC58()
{
  _OWORD *v0;
  uint64_t v1;

  sub_100166D80(v1, v0);
}

uint64_t sub_1001ADC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1001ADC78(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_1001ADC88()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 96));
}

uint64_t sub_1001ADCAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100161B54(a1, 1, 1, a4);
}

uint64_t sub_1001ADCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v12;

  return sub_10016FF30(a12, v12);
}

uint64_t sub_1001ADCC4()
{
  uint64_t v0;

  return AnyHashable.init<A>(_:)(v0);
}

uint64_t sub_1001ADCD0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10016FF44(v1, v0);
}

uint64_t sub_1001ADCDC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1001ADCE8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 128));
}

uint64_t sub_1001ADCF8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1001ADD04()
{
  return swift_willThrow();
}

uint64_t sub_1001ADD0C(uint64_t a1)
{
  uint64_t v1;

  return sub_10016445C(a1, 1, v1);
}

uint64_t sub_1001ADD18()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

uint64_t sub_1001ADD24()
{
  uint64_t v0;

  return v0;
}

void sub_1001ADD38()
{
  void *v0;

}

uint64_t sub_1001ADD40()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_1001ADD48()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 200));
}

uint64_t sub_1001ADD54(uint64_t a1)
{
  unint64_t v1;

  return sub_10016FF44(a1, v1);
}

uint64_t sub_1001ADD5C()
{
  uint64_t v0;

  return sub_1001638F4(v0);
}

void sub_1001ADD64(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      v18 = _swiftEmptyArrayStorage;
      sub_10017349C(0, v5 & ~(v5 >> 63), 0);
      if (v5 < 0)
        break;
      v6 = 0;
      v7 = v18;
      while (v5 != v6)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
        else
          v8 = *(id *)(a1 + 8 * v6 + 32);
        v9 = v8;
        v16 = v8;
        sub_1001AE170(&v16, &v17);
        if (v3)
        {

          swift_release(v7);
          return;
        }
        v3 = 0;

        v10 = v17;
        v18 = v7;
        v12 = v7[2];
        v11 = v7[3];
        if (v12 >= v11 >> 1)
        {
          sub_10017349C(v11 > 1, v12 + 1, 1);
          v7 = v18;
        }
        ++v6;
        v7[2] = v12 + 1;
        v7[v12 + 4] = v10;
        if (v5 == v6)
          goto LABEL_13;
      }
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v13 = a1;
      else
        v13 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v13);
      swift_bridgeObjectRelease(a1, v14);
      if (!v5)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:

  }
}

void sub_1001ADF0C()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;

  type metadata accessor for AppPurchaseHistoryFetcher();
  v1 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStoreForMediaType:", AMSAccountMediaTypeProduction);
  v2 = objc_msgSend((id)objc_opt_self(ASDPurchaseHistory), "sharedInstance");
  sub_1001AEEAC(v1, v2);
  if (!v0)
    sub_1001AE8C8(v3);
}

uint64_t sub_1001AE01C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_1001AE034, 0, 0);
}

uint64_t sub_1001AE034()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100316684);
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_1001AE090;
  return sub_1001AF0F8(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1001AE090(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 40);
  v4 = *v2;
  *(_QWORD *)(v4 + 48) = a1;
  *(_QWORD *)(v4 + 56) = v1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_1001AE104, 0, 0);
}

uint64_t sub_1001AE104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1)
  {
    v2 = v0 + 16;
    sub_1001ADD64(v1, *(id *)(v0 + 32));
    sub_1001AE98C(v3, v4);
  }
  else
  {
    v2 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1001AE170@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t inited;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  uint64_t result;
  _QWORD v29[2];
  uint64_t *v30;
  char v31[232];
  id v32;

  v30 = a2;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = sub_100161BD0(&qword_100315198);
  inited = swift_initStackObject(v8, v31);
  *(_OWORD *)(inited + 16) = xmmword_100232E00;
  *(_QWORD *)(inited + 32) = 0x4449656C646E7562;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v10 = objc_msgSend(v7, "bundleID");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  *(_QWORD *)(inited + 48) = v11;
  *(_QWORD *)(inited + 56) = v13;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x44496D616461;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  v32 = objc_msgSend(v7, "storeItemID");
  *(_QWORD *)(inited + 96) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  *(_QWORD *)(inited + 104) = v14;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  strcpy((char *)(inited + 128), "datePurchased");
  *(_WORD *)(inited + 142) = -4864;
  v15 = objc_msgSend(v7, "datePurchased");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v15);

  *(_QWORD *)(inited + 168) = v3;
  v16 = sub_10016CA34((_QWORD *)(inited + 144));
  (*(void (**)(_QWORD *, char *, uint64_t))(v4 + 32))(v16, v6, v3);
  *(_QWORD *)(inited + 176) = 0x6C6174736E497369;
  *(_QWORD *)(inited + 184) = 0xEB0000000064656CLL;
  v17 = objc_msgSend(v7, "bundleID");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain(v20);
  v22 = v29[1];
  v23 = sub_1001AE6D0(v18, v20, 0);
  if (v22)
  {
    swift_errorRelease(v22);
    swift_bridgeObjectRelease(v20, v25);
    v26 = 0;
  }
  else
  {
    v27 = v23;
    swift_bridgeObjectRelease(v20, v24);
    if (v27)
    {

      v26 = 1;
    }
    else
    {
      v26 = 0;
    }
  }
  *(_QWORD *)(inited + 216) = &type metadata for Bool;
  *(_BYTE *)(inited + 192) = v26;
  result = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  *v30 = result;
  return result;
}

void sub_1001AE498()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.GameInstallDataFetcher", 37, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1001AE4C4(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
    a1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  v3[4] = a1;
  v6 = dword_10031663C;
  a3;
  v7 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v7;
  *v7 = v3;
  v7[1] = sub_1001AE554;
  return sub_1001AE01C(a1);
}

uint64_t sub_1001AE554(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSArray v12;
  uint64_t v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v7 = *(_QWORD *)(*v2 + 32);
  v6 = *(_QWORD *)(*v2 + 40);
  v8 = *(void **)(*v2 + 16);
  v9 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7, v10);
  if (v3)
  {
    a1 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    v11 = (void *)a1;
  }
  else
  {
    if (a1)
    {
      sub_100161BD0(&qword_100315010);
      v12.super.isa = Array._bridgeToObjectiveC()().super.isa;
      sub_1001AE98C((uint64_t)v12.super.isa, v13);
      a1 = 0;
    }
    v11 = 0;
  }
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  v14[2](v14, 0, a1);

  _Block_release(v14);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

id sub_1001AE648()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GameInstallDataFetcher();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for GameInstallDataFetcher()
{
  return objc_opt_self(GKGameInstallDataFetcher);
}

id sub_1001AE6D0(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v13;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v7);
  v13 = 0;
  v8 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v13);

  v9 = v13;
  if (v8)
  {
    v10 = v13;
  }
  else
  {
    v11 = v13;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow();
  }
  return v8;
}

uint64_t sub_1001AE7A8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001AE7DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100316644);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1001A2094;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100316640 + dword_100316640))(v2, v3, v4);
}

id sub_1001AE848(uint64_t a1, char *a2)
{
  id v3;
  objc_super v5;
  _QWORD v6[5];

  v6[3] = &type metadata for AppInstallHistoryFetcher;
  v6[4] = &off_1002C78F8;
  *(_QWORD *)&a2[OBJC_IVAR___GKGameInstallDataFetcher_appPurchaseHistoryFetcher] = a1;
  sub_1001923C0((uint64_t)v6, (uint64_t)&a2[OBJC_IVAR___GKGameInstallDataFetcher_appInstallHistoryFetcher]);
  v5.receiver = a2;
  v5.super_class = (Class)type metadata accessor for GameInstallDataFetcher();
  v3 = objc_msgSendSuper2(&v5, "init");
  sub_100161FE0(v6);
  return v3;
}

id sub_1001AE8C8(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD v7[5];

  v7[3] = &type metadata for AppInstallHistoryFetcher;
  v7[4] = &off_1002C78F8;
  v2 = (char *)objc_allocWithZone((Class)type metadata accessor for GameInstallDataFetcher());
  v3 = sub_10016BF84((uint64_t)v7, (uint64_t)&type metadata for AppInstallHistoryFetcher);
  __chkstk_darwin(v3);
  (*(void (**)(void))(v4 + 16))();
  v5 = sub_1001AE848(a1, v2);
  sub_100161FE0(v7);
  return v5;
}

ValueMetadata *type metadata accessor for AppInstallHistoryFetcher()
{
  return &type metadata for AppInstallHistoryFetcher;
}

uint64_t sub_1001AE98C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

void *ArcadeStateMetricsFieldsProvider.fieldName.unsafeMutableAddressor()
{
  return &static ArcadeStateMetricsFieldsProvider.fieldName;
}

unint64_t static ArcadeStateMetricsFieldsProvider.fieldName.getter()
{
  return 0xD000000000000011;
}

void ArcadeStateMetricsFieldsProvider.addMetricsFields(into:using:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _DWORD *v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v0 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(GKPreferences), "shared");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "arcadeSubscriptionState");

    if ((unint64_t)v5 >= 4)
      v7 = 0;
    else
      v7 = (char)v5;
    v8 = static GKLog.daemon.getter(v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.info.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (_DWORD *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      *v11 = 136315138;
      v12[1] = v0;
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v2, v0);
    __asm { BR              X11 }
  }
  __break(1u);
  JUMPOUT(0x1001AED20);
}

uint64_t sub_1001AED40()
{
  return MetricsFieldsProvider.addTimeSensitiveMetricsFields(into:using:)();
}

uint64_t sub_1001AED54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(async function pointer to MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)[1]);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1001A2094;
  return MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)(a1, a2, a3, a4);
}

void sub_1001AEDD0()
{
  ArcadeStateMetricsFieldsProvider.addMetricsFields(into:using:)();
}

uint64_t sub_1001AEDE4()
{
  uint64_t v0;

  v0 = type metadata accessor for MetricsFieldExclusionRequest(0);
  sub_1001AEE54(v0, qword_10031B928);
  sub_1001AEE94(v0, (uint64_t)qword_10031B928);
  return MetricsFieldExclusionRequest.init(rawValue:)(0xD000000000000011, 0x800000010029A8F0);
}

ValueMetadata *type metadata accessor for ArcadeStateMetricsFieldsProvider()
{
  return &type metadata for ArcadeStateMetricsFieldsProvider;
}

uint64_t *sub_1001AEE54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_1001AEE94(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

void sub_1001AEEAC(void *a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;

  v4 = objc_msgSend(a1, "ams_activeiTunesAccount");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "ams_DSID");
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v6, "longLongValue");

      v9 = type metadata accessor for AppPurchaseHistoryFetcher();
      v10 = swift_allocObject(v9, 32, 7);
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = a2;
      return;
    }
    v14 = sub_1001AF758();
    v15 = sub_1001948C0((uint64_t)&type metadata for AppPurchaseHistoryFetcher.AppPurchaseHistoryError, v14);
    *v16 = 1;
    swift_willThrow(v15);

  }
  else
  {
    v11 = sub_1001AF758();
    v12 = sub_1001948C0((uint64_t)&type metadata for AppPurchaseHistoryFetcher.AppPurchaseHistoryError, v11);
    *v13 = 0;
    swift_willThrow(v12);
  }

}

BOOL sub_1001AEFAC(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_1001AEFBC(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int sub_1001AEFE0(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_1001AF024(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001AEFAC(*a1, *a2);
}

Swift::Int sub_1001AF030()
{
  char *v0;

  return sub_1001AEFE0(*v0);
}

void sub_1001AF038(uint64_t a1)
{
  char *v1;

  sub_1001AEFBC(a1, *v1);
}

id sub_1001AF040(uint64_t a1)
{
  uint64_t v1;
  id v3;
  id v4;
  NSArray v5;

  v3 = objc_msgSend(objc_allocWithZone((Class)ASDPurchaseHistoryQuery), "init");
  objc_msgSend(v3, "setAccountID:", *(_QWORD *)(v1 + 16));
  v4 = sub_1001AF934((uint64_t)objc_msgSend(v3, "setIsHidden:", 0), "setIsFirstParty:");
  sub_1001AF934((uint64_t)v4, "setIsPreorder:");
  if (a1)
    v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  else
    v5.super.isa = 0;
  objc_msgSend(v3, "setBundleIDs:", v5.super.isa);

  return v3;
}

uint64_t sub_1001AF0F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_1001AF110, 0, 0);
}

uint64_t sub_1001AF110()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;

  v1 = v0[4];
  v2 = sub_1001AF040(v0[3]);
  v0[5] = (uint64_t)v2;
  v3 = swift_task_alloc(32);
  v0[6] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (uint64_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = (uint64_t)v4;
  v5 = sub_100161BD0(&qword_100316718);
  *v4 = v0;
  v4[1] = (uint64_t *)sub_1001AF1CC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000001DLL, 0x800000010029A990, sub_1001AF648, v3, v5);
}

uint64_t sub_1001AF1CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001AF26C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 48));
    v4 = sub_1001AF238;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001AF238()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001AF26C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001AF2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v6 = sub_100161BD0(&qword_100316720);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = *(void **)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_1002C7970, v11 + v8, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1001AF6B4;
  v15 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AF588;
  aBlock[3] = &unk_1002C7988;
  v13 = _Block_copy(aBlock);
  swift_release(v15);
  objc_msgSend(v9, "executeQuery:withResultHandler:", a3, v13);
  _Block_release(v13);
}

uint64_t sub_1001AF3E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if (a2)
  {
    v16 = a2;
    swift_errorRetain(a2);
    v2 = sub_100161BD0(&qword_100316720);
    return CheckedContinuation.resume(throwing:)(&v16, v2);
  }
  if (!a1)
  {
    v13 = 0;
    goto LABEL_22;
  }
  v16 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0)
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v14 = a1;
    swift_bridgeObjectRetain(a1);
    result = _CocoaArrayWrapper.endIndex.getter(v14);
    v5 = result;
    if (result)
      goto LABEL_6;
LABEL_21:
    swift_bridgeObjectRelease(a1, v6);
    v13 = _swiftEmptyArrayStorage;
    goto LABEL_22;
  }
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(a1);
  if (!v5)
    goto LABEL_21;
LABEL_6:
  if (v5 < 1)
  {
    __break(1u);
    return result;
  }
  for (i = 0; i != v5; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
    else
      v8 = *(id *)(a1 + 8 * i + 32);
    v9 = v8;
    if (objc_msgSend(v8, "genreID") == (id)6014)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(6014);
      v10 = v16[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
      specialized ContiguousArray._endMutation()(v11);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease(a1, v12);
  v13 = v16;
LABEL_22:
  v16 = v13;
  v15 = sub_100161BD0(&qword_100316720);
  return CheckedContinuation.resume(returning:)(&v16, v15);
}

uint64_t sub_1001AF588(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  unint64_t v7;
  id v8;
  uint64_t v9;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_1001AF71C();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4, v9);
}

uint64_t sub_1001AF604()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for AppPurchaseHistoryFetcher()
{
  return objc_opt_self(_TtC14GameDaemonCore25AppPurchaseHistoryFetcher);
}

void sub_1001AF648(uint64_t a1)
{
  uint64_t v1;

  sub_1001AF2A8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001AF650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100161BD0(&qword_100316720);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001AF6B4(uint64_t a1, _QWORD *a2)
{
  sub_100161BD0(&qword_100316720);
  return sub_1001AF3E4(a1, a2);
}

uint64_t sub_1001AF704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001AF714(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1001AF71C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316728;
  if (!qword_100316728)
  {
    v1 = objc_opt_self(ASDPurchaseHistoryApp);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100316728);
  }
  return result;
}

unint64_t sub_1001AF758()
{
  unint64_t result;

  result = qword_100316730;
  if (!qword_100316730)
  {
    result = swift_getWitnessTable(&unk_100234880, &type metadata for AppPurchaseHistoryFetcher.AppPurchaseHistoryError);
    atomic_store(result, (unint64_t *)&qword_100316730);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AppPurchaseHistoryFetcher.AppPurchaseHistoryError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AppPurchaseHistoryFetcher.AppPurchaseHistoryError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001AF868 + 4 * byte_1002347B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001AF89C + 4 * asc_1002347B0[v4]))();
}

uint64_t sub_1001AF89C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AF8A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001AF8ACLL);
  return result;
}

uint64_t sub_1001AF8B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001AF8C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001AF8C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AF8CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1001AF8D8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AppPurchaseHistoryFetcher.AppPurchaseHistoryError()
{
  return &type metadata for AppPurchaseHistoryFetcher.AppPurchaseHistoryError;
}

unint64_t sub_1001AF8F8()
{
  unint64_t result;

  result = qword_100316738;
  if (!qword_100316738)
  {
    result = swift_getWitnessTable(&unk_100234858, &type metadata for AppPurchaseHistoryFetcher.AppPurchaseHistoryError);
    atomic_store(result, (unint64_t *)&qword_100316738);
  }
  return result;
}

id sub_1001AF934(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 2);
}

uint64_t sub_1001AF940()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;

  v0 = type metadata accessor for NWProtocolTLS.Options(0);
  sub_100165ED4(v0);
  v1 = NWProtocolTLS.Options.init()();
  v2 = dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter();
  sec_protocol_options_set_peer_authentication_required(v2, 0);
  swift_unknownObjectRelease(v2);
  return sub_1001AFAD0(v1);
}

uint64_t sub_1001AF998()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;

  v0 = sub_1001AFA10();
  v1 = type metadata accessor for NWProtocolTLS.Options(0);
  sub_100165ED4(v1);
  v2 = NWProtocolTLS.Options.init()();
  v3 = dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter();
  sec_protocol_options_set_local_identity(v3, v0);
  swift_unknownObjectRelease();
  v4 = sub_1001AFAD0(v2);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t sub_1001AFA10()
{
  NSString v0;
  __SecIdentity *SelfSignedIdentity;
  __SecIdentity *v2;
  sec_identity_t v3;
  sec_identity_t v4;
  uint64_t result;

  v0 = String._bridgeToObjectiveC()();
  SelfSignedIdentity = (__SecIdentity *)_CFHTTPServerCreateSelfSignedIdentity();
  if (SelfSignedIdentity)
  {
    v2 = SelfSignedIdentity;
    v3 = sec_identity_create(SelfSignedIdentity);
    if (v3)
    {
      v4 = v3;

      return (uint64_t)v4;
    }
  }
  else
  {
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003ALL, 0x800000010029AA20, "GameDaemonCore/PeerDiscoveryParameters.swift", 44, 2, 72, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001AFAD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void (*v11)(_BYTE *, _QWORD);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];

  v2 = type metadata accessor for NWProtocolTCP.Options(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = NWProtocolTCP.Options.init()();
  dispatch thunk of NWProtocolTCP.Options.enableKeepalive.setter(1);
  dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.setter(2);
  swift_retain(a1);
  swift_retain(v3);
  v4 = NWParameters.__allocating_init(tls:tcp:)(a1, v3);
  swift_retain(v4);
  NWParameters.includePeerToPeer.setter(1);
  if (qword_1003148F8 != -1)
    swift_once(&qword_1003148F8, sub_100184618);
  v5 = qword_10031B918;
  v6 = type metadata accessor for NWProtocolFramer.Options(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = swift_retain(v5);
  v8 = NWProtocolFramer.Options.init(definition:)(v7);
  v9 = NWParameters.defaultProtocolStack.getter();
  swift_retain(v8);
  v11 = (void (*)(_BYTE *, _QWORD))dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.modify(v17);
  v12 = *v10;
  if ((unint64_t)*v10 >> 62
    && (v12 < 0 ? (v14 = *v10) : (v14 = v12 & 0xFFFFFFFFFFFFFF8),
        swift_bridgeObjectRetain(*v10),
        v15 = _CocoaArrayWrapper.endIndex.getter(v14),
        result = swift_bridgeObjectRelease(v12, v16),
        v15 < 0))
  {
    __break(1u);
  }
  else
  {
    sub_10019A560(0, 0, v8);
    v11(v17, 0);
    swift_release(a1);
    swift_release(v4);
    swift_release(v3);
    swift_release(v8);
    swift_release(v9);
    return v4;
  }
  return result;
}

uint64_t sub_1001AFCC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___GKBulletinAttachment_identifier);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___GKBulletinAttachment_identifier + 8));
  return v1;
}

uint64_t sub_1001AFD80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___GKBulletinAttachment_url;
  v4 = sub_10019FB28();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1001AFDE4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView);
}

id sub_1001AFDFC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  objc_super v13;

  v7 = &v4[OBJC_IVAR___GKBulletinAttachment_identifier];
  *v7 = a1;
  v7[1] = a2;
  v8 = &v4[OBJC_IVAR___GKBulletinAttachment_url];
  v9 = sub_10019FB28();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a3, v9);
  v4[OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView] = a4;
  v13.receiver = v4;
  v13.super_class = (Class)sub_1001B0690();
  v11 = objc_msgSendSuper2(&v13, "init");
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
  return v11;
}

void sub_1001AFF50(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSString v4;
  NSString v5;
  void *v6;
  void *v7;
  NSString v8;
  uint64_t v9;
  id v10;

  v2 = v1;
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  sub_1001B0E1C();

  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR___GKBulletinAttachment_url);
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  sub_1001B0E1C();

  v9 = *(unsigned __int8 *)(v2 + OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView);
  v10 = sub_1001B0E30();
  objc_msgSend(a1, "encodeBool:forKey:", v9, v10);

}

id sub_1001B0090(void *a1)
{
  void *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void (*v25)(char *, char *, uint64_t);
  _QWORD *v26;
  NSString v27;
  unsigned __int8 v28;
  objc_class *v29;
  uint64_t v30;
  uint64_t v31;
  objc_super v32;
  uint64_t v33;
  uint64_t v34;

  v4 = sub_100161BD0(&qword_100315B00);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v30 - v8;
  v10 = sub_10019FB28();
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100163AD0();
  v12 = sub_10016CBB4(0, &qword_1003167B0, NSString_ptr);
  v13 = v1;
  v14 = NSCoder.decodeObject<A>(of:forKey:)(v12, 0x696669746E656469, 0xEA00000000007265, v12);
  if (v14
    && (v15 = (void *)v14,
        v33 = 0,
        v34 = 0,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(v14, &v33),
        v15,
        (v16 = v34) != 0))
  {
    v31 = v33;
    v17 = sub_10016CBB4(0, &qword_1003167B8, NSURL_ptr);
    v18 = NSCoder.decodeObject<A>(of:forKey:)(v17, 7107189, 0xE300000000000000, v17);
    if (v18
      && (v19 = (void *)v18,
          sub_1001A13A4((uint64_t)v7, 1),
          v20 = sub_1001B0C40(&qword_1003167C0, (uint64_t)&protocol conformance descriptor for URL),
          dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)(v19, v7, v10, v20), v19, sub_10016445C((uint64_t)v7, 1, v10) != 1))
    {
      v25 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v25(v9, v7, v10);
      sub_1001A13A4((uint64_t)v9, 0);
      if (sub_10016445C((uint64_t)v9, 1, v10) != 1)
      {
        v25(v2, v9, v10);
        v26 = (_QWORD *)((char *)v13 + OBJC_IVAR___GKBulletinAttachment_identifier);
        *v26 = v31;
        v26[1] = v16;
        (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))((uint64_t)v13 + OBJC_IVAR___GKBulletinAttachment_url, v2, v10);
        v27 = sub_1001B0E30();
        v28 = objc_msgSend(a1, "decodeBoolForKey:", v27);

        (*(void (**)(char *, uint64_t))(v11 + 8))(v2, v10);
        *((_BYTE *)v13 + OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView) = v28;

        v29 = (objc_class *)sub_1001B0690();
        v32.receiver = v13;
        v32.super_class = v29;
        v23 = objc_msgSendSuper2(&v32, "init");

        return v23;
      }
    }
    else
    {
      sub_1001A13A4((uint64_t)v9, 1);
    }

    swift_bridgeObjectRelease(v16, v21);
    sub_10019FA58((uint64_t)v9);
  }
  else
  {

  }
  v22 = sub_1001B0690();
  swift_deallocPartialClassInstance(v13, v22, *(unsigned int *)((swift_isaMask & *v13) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v13) + 0x34));
  return 0;
}

void sub_1001B03BC()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.BulletinAttachment", 33, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1001B03F4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v9;
  uint64_t v10;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0;
  }
  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    v8 = 0xE300000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8, a2);
    return 1;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x800000010029AAC0)
  {
    swift_bridgeObjectRelease(0x800000010029AAC0, a2);
    return 2;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010029AAC0, a1, a2, 0);
    swift_bridgeObjectRelease(a2, v10);
    if ((v9 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001B053C(char a1)
{
  if (!a1)
    return 0x696669746E656469;
  if (a1 == 1)
    return 7107189;
  return 0xD00000000000001DLL;
}

uint64_t sub_1001B0594()
{
  char *v0;

  return sub_1001B053C(*v0);
}

uint64_t sub_1001B059C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001B03F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B05C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001B0C04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B05E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001B0C04();
  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_1001B0610()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)sub_1001B0690();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001B0690()
{
  return type metadata accessor for BulletinAttachment(0);
}

uint64_t type metadata accessor for BulletinAttachment(uint64_t a1)
{
  uint64_t result;

  result = qword_100316770;
  if (!qword_100316770)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BulletinAttachment);
  return result;
}

uint64_t sub_1001B06D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1002348F8;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100234910;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001B0750(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_100161BD0(&qword_100316798);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100163928(a1, v9);
  v11 = sub_1001B0C04();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BulletinAttachment.CodingKeys, &type metadata for BulletinAttachment.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + OBJC_IVAR___GKBulletinAttachment_identifier);
  v13 = *(_QWORD *)(v3 + OBJC_IVAR___GKBulletinAttachment_identifier + 8);
  v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = v3 + OBJC_IVAR___GKBulletinAttachment_url;
    v21 = 1;
    v15 = type metadata accessor for URL(0);
    v16 = sub_1001B0C40((unint64_t *)&unk_1003167A0, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v21, v5, v15, v16);
    v17 = *(unsigned __int8 *)(v3 + OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView);
    v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void (**sub_1001B08D4(_QWORD *a1))(uint64_t, char *, uint64_t)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return sub_1001B0914(a1);
}

void (**sub_1001B0914(_QWORD *a1))(uint64_t, char *, uint64_t)
{
  void *v1;
  void *v2;
  void (**v4)(uint64_t, char *, uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void (**v10)(uint64_t, char *, uint64_t);
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  objc_class *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void (**v28)(uint64_t, char *, uint64_t);
  objc_super v29;
  char v30;

  v2 = v1;
  v24 = type metadata accessor for URL(0);
  v4 = *(void (***)(uint64_t, char *, uint64_t))(v24 - 8);
  __chkstk_darwin(v24);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100161BD0(&qword_100316780);
  __chkstk_darwin(v25);
  sub_100163AD0();
  v8 = a1[3];
  v7 = a1[4];
  v27 = a1;
  sub_100163928(a1, v8);
  v9 = sub_1001B0C04();
  v26 = v2;
  v10 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BulletinAttachment.CodingKeys, &type metadata for BulletinAttachment.CodingKeys, v9, v8, v7);
  if (v10)
  {
    v15 = v26;
    sub_100161FE0(v27);

    v16 = type metadata accessor for BulletinAttachment(0);
    swift_deallocPartialClassInstance(v15, v16, *(unsigned int *)((swift_isaMask & *v15) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v15) + 0x34));
  }
  else
  {
    v11 = v6;
    v28 = v4;
    v13 = v24;
    v12 = v25;
    v30 = 0;
    v14 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v25);
    v18 = v26;
    v19 = (_QWORD *)((char *)v26 + OBJC_IVAR___GKBulletinAttachment_identifier);
    *v19 = v14;
    v19[1] = v20;
    v30 = 1;
    v21 = sub_1001B0C40(&qword_100316790, (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v13, &v30, v12, v13, v21);
    v28[4]((uint64_t)&v18[OBJC_IVAR___GKBulletinAttachment_url], v11, v13);
    v30 = 2;
    v18[OBJC_IVAR___GKBulletinAttachment_hiddenFromDefaultExpandedView] = KeyedDecodingContainer.decode(_:forKey:)(&v30, v25) & 1;

    v22 = (objc_class *)type metadata accessor for BulletinAttachment(0);
    v29.receiver = v18;
    v29.super_class = v22;
    v4 = (void (**)(uint64_t, char *, uint64_t))objc_msgSendSuper2(&v29, "init");
    sub_1001B0E0C();
    sub_100161FE0(v27);
  }
  return v4;
}

void (**sub_1001B0BBC@<X0>(_QWORD *a1@<X0>, void (***a2)(uint64_t, char *, uint64_t)@<X8>))(uint64_t, char *, uint64_t)
{
  uint64_t v2;
  void (**result)(uint64_t, char *, uint64_t);

  result = sub_1001B08D4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001B0BE4(_QWORD *a1)
{
  return sub_1001B0750(a1);
}

unint64_t sub_1001B0C04()
{
  unint64_t result;

  result = qword_100316788;
  if (!qword_100316788)
  {
    result = swift_getWitnessTable(&unk_100234A3C, &type metadata for BulletinAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316788);
  }
  return result;
}

uint64_t sub_1001B0C40(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BulletinAttachment.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001B0CCC + 4 * byte_1002348C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001B0D00 + 4 * byte_1002348C0[v4]))();
}

uint64_t sub_1001B0D00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B0D08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001B0D10);
  return result;
}

uint64_t sub_1001B0D1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001B0D24);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001B0D28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B0D30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BulletinAttachment.CodingKeys()
{
  return &type metadata for BulletinAttachment.CodingKeys;
}

unint64_t sub_1001B0D50()
{
  unint64_t result;

  result = qword_1003167C8;
  if (!qword_1003167C8)
  {
    result = swift_getWitnessTable(&unk_100234A14, &type metadata for BulletinAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1003167C8);
  }
  return result;
}

unint64_t sub_1001B0D90()
{
  unint64_t result;

  result = qword_1003167D0;
  if (!qword_1003167D0)
  {
    result = swift_getWitnessTable(&unk_100234984, &type metadata for BulletinAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1003167D0);
  }
  return result;
}

unint64_t sub_1001B0DD0()
{
  unint64_t result;

  result = qword_1003167D8;
  if (!qword_1003167D8)
  {
    result = swift_getWitnessTable(&unk_1002349AC, &type metadata for BulletinAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1003167D8);
  }
  return result;
}

uint64_t sub_1001B0E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 128));
}

id sub_1001B0E1C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v0, *(SEL *)(v3 + 3312), v1, v2);
}

NSString sub_1001B0E30()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1001B0E44()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v0 = sub_100161BD0(&qword_100314F28);
  inited = swift_initStackObject(v0, &v6);
  *(_OWORD *)(inited + 16) = xmmword_100233800;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterCSTopic);
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterClientPerformanceTopic);
  *(_QWORD *)(inited + 56) = v3;
  *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterGCPerformanceTopic);
  *(_QWORD *)(inited + 72) = v4;
  result = sub_1001717C8(inited);
  qword_1003167E0 = result;
  return result;
}

uint64_t sub_1001B0ED4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE v13[24];

  v3 = sub_100161BD0(&qword_100316880);
  v4 = __chkstk_darwin(v3);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v12[-v7];
  v9 = v1 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline____lazy_storage___metricsPipeline;
  swift_beginAccess(v1 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline____lazy_storage___metricsPipeline, v13, 0, 0);
  sub_1001B32DC(v9, (uint64_t)v8);
  v10 = type metadata accessor for MetricsPipeline(0);
  if (sub_10016445C((uint64_t)v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, v8, v10);
  sub_1001B329C((uint64_t)v8);
  sub_1001B1030(v1, a1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v6, a1, v10);
  sub_100161B54((uint64_t)v6, 0, 1, v10);
  swift_beginAccess(v9, v12, 33, 0);
  sub_1001B3324((uint64_t)v6, v9);
  return swift_endAccess(v12);
}

uint64_t sub_1001B1030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void *v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  void (*v43)(char *, uint64_t);
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD *, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD v94[3];
  unint64_t v95;
  void *v96;
  _QWORD v97[3];
  ValueMetadata *v98;
  void *v99;

  v91 = a2;
  v79 = type metadata accessor for MetricsFieldExclusionRequest(0);
  v82 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v4 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100161BD0(&qword_1003168A8);
  __chkstk_darwin(v5);
  v81 = (uint64_t)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Bag(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for MetricsFieldsAggregator(0);
  v92 = *(_QWORD *)(v80 - 8);
  v11 = __chkstk_darwin(v80);
  v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v79 - v15;
  v17 = __chkstk_darwin(v14);
  v83 = (char *)&v79 - v18;
  v19 = __chkstk_darwin(v17);
  v84 = (char *)&v79 - v20;
  v21 = __chkstk_darwin(v19);
  v85 = (char *)&v79 - v22;
  v23 = __chkstk_darwin(v21);
  v93 = (char *)&v79 - v24;
  __chkstk_darwin(v23);
  v88 = (char *)&v79 - v25;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v86 = a1 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline_bag;
  v87 = v26;
  ((void (*)(char *))v26)(v10);
  v27 = (void *)objc_opt_self(ACAccountStore);
  v28 = objc_msgSend(v27, "ams_sharedAccountStore");
  v29 = sub_1001B336C();
  v98 = (ValueMetadata *)v29;
  v99 = &protocol witness table for ACAccountStore;
  v97[0] = v28;
  v30 = v79;
  v31 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v90 = v10;
  v32 = v10;
  v33 = v16;
  MetricsFieldsAggregator.init(bag:accountProvider:bundle:)(v32, v97, v31);
  v34 = objc_msgSend(v27, "ams_sharedAccountStore");
  v95 = v29;
  v96 = &protocol witness table for ACAccountStore;
  v94[0] = v34;
  v35 = v81;
  v89 = v7;
  v36 = v7;
  v37 = v80;
  sub_100161B54(v81, 1, 1, v36);
  v38 = objc_msgSend((id)objc_opt_self(AMSProcessInfo), "currentProcess");
  v39 = static AMSMetricsIdentifierFieldsProvider.metricsResetInterval.getter();
  v40 = static AMSMetricsIdentifierFieldsProvider.metricsKeys.getter();
  v98 = (ValueMetadata *)type metadata accessor for AMSMetricsIdentifierFieldsProvider(0);
  v99 = &protocol witness table for AMSMetricsIdentifierFieldsProvider;
  sub_10016CA34(v97);
  v41 = AMSMetricsIdentifierFieldsProvider.init(accountProvider:process:bag:shouldMigrate:resetInterval:keys:activeITunesAccountRequired:)(v94, v38, v35, 0, v40, 0, v39);
  static MetricsFieldExclusionRequest.amsMetricsID.getter(v41);
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)(v97, v4);
  v42 = *(void (**)(char *, uint64_t))(v82 + 8);
  v42(v4, v30);
  v43 = *(void (**)(char *, uint64_t))(v92 + 8);
  v43(v13, v37);
  sub_100161FE0(v97);
  v98 = (ValueMetadata *)type metadata accessor for GKDaemonHostAppFieldsProvider(0);
  v99 = (void *)sub_100161F20(&qword_1003168B8, type metadata accessor for GKDaemonHostAppFieldsProvider, (uint64_t)"q1\t");
  v44 = sub_10016CA34(v97);
  v45 = enum case for MetricsFieldsProviderCategory.timeSensitive(_:);
  v46 = type metadata accessor for MetricsFieldsProviderCategory(0);
  v47 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 104);
  LODWORD(v82) = v45;
  v47(v44, v45, v46);
  if (qword_100314930 != -1)
    swift_once(&qword_100314930, sub_1001B39D4);
  v48 = sub_1001AEE94(v30, (uint64_t)qword_10031B968);
  v49 = v83;
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)(v97, v48);
  v43(v33, v37);
  sub_100161FE0(v97);
  v98 = &type metadata for ArcadeStateMetricsFieldsProvider;
  v99 = (void *)sub_1001B33A8();
  if (qword_100314918 != -1)
    swift_once(&qword_100314918, sub_1001AEDE4);
  v50 = sub_1001AEE94(v30, (uint64_t)qword_10031B928);
  v51 = v84;
  MetricsFieldsAggregator.addingOptOutProvider(_:forRequest:)(v97, v50);
  v43(v49, v37);
  v52 = sub_100161FE0(v97);
  static MetricsFieldExclusionRequest.page.getter(v52);
  v53 = v85;
  MetricsFieldsAggregator.removingOptOutProvider(forRequest:)(v4);
  v42(v4, v30);
  v54 = ((uint64_t (*)(char *, uint64_t))v43)(v51, v37);
  static MetricsFieldExclusionRequest.app.getter(v54);
  v55 = v93;
  MetricsFieldsAggregator.removingOptOutProvider(forRequest:)(v4);
  v42(v4, v30);
  v43(v53, v37);
  v56 = type metadata accessor for MultiplayerActivityFieldsProvider(0);
  v57 = swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
  v47((_QWORD *)(v57 + OBJC_IVAR____TtC14GameDaemonCore33MultiplayerActivityFieldsProvider_category), v82, v46);
  v98 = (ValueMetadata *)v56;
  v99 = (void *)sub_100161F20(&qword_1003168C8, type metadata accessor for MultiplayerActivityFieldsProvider, (uint64_t)&unk_1002354C8);
  v97[0] = v57;
  if (qword_100314940 != -1)
    swift_once(&qword_100314940, sub_1001C198C);
  v58 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v59 = sub_1001AEE94(v58, (uint64_t)qword_10031B988);
  v60 = v88;
  MetricsFieldsAggregator.addingOptInProvider(_:forRequest:)(v97, v59);
  v43(v55, v37);
  sub_100161FE0(v97);
  v61 = sub_100161BD0(&qword_1003168D0);
  v62 = GKReporterCSTopic;
  v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterCSTopic);
  v65 = v64;
  v66 = v90;
  v85 = (char *)v43;
  v68 = v86;
  v67 = v87;
  v69 = v37;
  v70 = v89;
  v87(v90, v86, v89);
  v71 = LowMemoryMetricsEventLinter.__allocating_init(defaultTopic:bag:rules:)(v63, v65, v66, _swiftEmptyArrayStorage);
  v72 = type metadata accessor for AMSMetricsEventRecorder(0);
  v67(v66, v68, v70);
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  v75 = AMSMetricsEventRecorder.__allocating_init(bag:defaultTopic:)(v66, v73, v74);
  v76 = type metadata accessor for StandardMetricsFieldsBuilder(0);
  v77 = v93;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v93, v60, v69);
  v98 = (ValueMetadata *)v61;
  v99 = (void *)sub_1001B33E4();
  v97[0] = v71;
  v95 = v72;
  v96 = &protocol witness table for AMSMetricsEventRecorder;
  v94[0] = v75;
  MetricsPipeline.init(builderType:aggregator:linter:recorder:)(v76, &protocol witness table for StandardMetricsFieldsBuilder, v77, v97, v94);
  return ((uint64_t (*)(char *, uint64_t))v85)(v60, v69);
}

id GKMetricsPipeline.__allocating_init(bag:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return GKMetricsPipeline.init(bag:)();
}

id GKMetricsPipeline.init(bag:)()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  objc_super v13;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = type metadata accessor for Bag(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v1 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline____lazy_storage___metricsPipeline;
  v8 = type metadata accessor for MetricsPipeline(0);
  sub_100161B54(v7, 1, 1, v8);
  v9 = v1;
  v10 = swift_unknownObjectRetain();
  Bag.init(from:)(v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))((uint64_t)v9 + OBJC_IVAR____TtC14GameDaemonCore17GKMetricsPipeline_bag, v6, v3);

  v13.receiver = v9;
  v13.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v13, "init");
  swift_unknownObjectRelease();
  return v11;
}

uint64_t GKMetricsPipeline.processEvent(topic:shouldFlush:metricsFields:hostAppBundleId:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v7 + 56) = a6;
  *(_QWORD *)(v7 + 64) = v6;
  *(_QWORD *)(v7 + 40) = a4;
  *(_QWORD *)(v7 + 48) = a5;
  *(_BYTE *)(v7 + 128) = a3;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v7 + 72) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 80) = v9;
  *(_QWORD *)(v7 + 88) = sub_100180CA0(v9);
  v10 = type metadata accessor for MetricsData(0);
  *(_QWORD *)(v7 + 96) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 104) = v11;
  *(_QWORD *)(v7 + 112) = sub_100180CA0(v11);
  sub_10016CFA0();
  return sub_10016D26C(v12, v13, v14);
}

uint64_t sub_1001B1978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (qword_100314920 != -1)
    swift_once(&qword_100314920, sub_1001B0E44);
  sub_100188574(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), qword_1003167E0);
  if ((v1 & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 32);
    v2 = *(_QWORD *)(v0 + 40);
    v4 = *(unsigned __int8 *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 24);
    v6 = sub_100161BD0(&qword_100316800);
    v7 = *(_QWORD *)(type metadata accessor for MetricsFieldInclusionRequest(0) - 8);
    v8 = swift_allocObject(v6, ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72), *(unsigned __int8 *)(v7 + 80) | 7);
    *(_OWORD *)(v8 + 16) = xmmword_100232EF0;
    v9 = swift_bridgeObjectRetain(v2);
    static MetricsFieldInclusionRequest.pageFields.getter(v9);
    v10 = sub_1001B2D60(v8);
    swift_bridgeObjectRetain(v3);
    MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(v5, v3, v4, v2, v10, &_swiftEmptySetSingleton);
    v11 = (_QWORD *)swift_task_alloc(dword_10031680C);
    *(_QWORD *)(v0 + 120) = v11;
    *v11 = v0;
    v11[1] = sub_1001B1C50;
    return sub_1001B1CBC(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 32);
    static GKLog.general.getter(v1);
    v14 = swift_bridgeObjectRetain_n(v13, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    v17 = os_log_type_enabled(v15, v16);
    v19 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 88);
    v20 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 32);
    if (v17)
    {
      v24 = *(_QWORD *)(v0 + 24);
      v26 = *(_QWORD *)(v0 + 72);
      v22 = (uint8_t *)sub_100165DA4(12);
      v25 = v18;
      v23 = sub_100165DA4(32);
      v27 = v23;
      *(_DWORD *)v22 = 136315138;
      swift_bridgeObjectRetain(v21);
      *(_QWORD *)(v0 + 16) = sub_10016FE60(v24, v21, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease_n(v21, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Topic %s is not an allowed topic", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      sub_100165D98(v23);
      sub_100165D98((uint64_t)v22);

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v25, v26);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 32), 2);

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    }
    sub_1001B3454();
    sub_10016D2A8();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001B1C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_1001B1C84()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
  sub_1001B3454();
  sub_10016D2A8();
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001B1CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MetricsPipeline(0);
  v4[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[13] = v8;
  v4[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LintedMetricsEvent(0);
  v4[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[16] = v10;
  v4[17] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MetricsFieldsContext(0);
  v4[18] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[19] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[20] = swift_task_alloc(v13);
  v4[21] = swift_task_alloc(v13);
  v14 = type metadata accessor for MainActor(0);
  v4[22] = static MainActor.shared.getter();
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  v4[23] = v15;
  v4[24] = v16;
  return swift_task_switch(sub_1001B1DDC, v15, v16);
}

uint64_t sub_1001B1DDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;

  v2 = v0[6];
  v1 = v0[7];
  MetricsFieldsContext.init()();
  v0[2] = v2;
  v0[3] = v1;
  if (qword_100314928 != -1)
    swift_once(&qword_100314928, sub_1001B34B8);
  v3 = v0[20];
  v4 = v0[18];
  v5 = v0[19];
  v6 = v0[14];
  v7 = sub_100161BD0(&qword_1003168A0);
  v8 = sub_1001AEE94(v7, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
  MetricsFieldsContext.addingValue<A>(_:forProperty:)(v0 + 2, v8, &type metadata for String);
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[25] = v9;
  v9(v3, v4);
  sub_1001B0ED4(v6);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to MetricsPipeline.process(_:using:)[1]);
  v0[26] = v10;
  *v10 = v0;
  v10[1] = sub_1001B1EF0;
  return MetricsPipeline.process(_:using:)(v0[17], v0[5], v0[21]);
}

uint64_t sub_1001B1EF0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    v7 = v2[23];
    v8 = v2[24];
    v9 = sub_1001B1FE4;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[16] + 8))(v2[17], v2[15]);
    v7 = v2[23];
    v8 = v2[24];
    v9 = sub_1001B1F8C;
  }
  return swift_task_switch(v9, v7, v8);
}

uint64_t sub_1001B1F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v2 + 176));
  sub_1001B3428();
  sub_10016D2A8();
  swift_task_dealloc(v0);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return sub_100180D38(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1001B1FE4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(v0 + 216);
  v4 = swift_release(*(_QWORD *)(v0 + 176));
  static GKLog.general.getter(v4);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v2 = *(_QWORD *)(v0 + 216);
    v8 = (uint8_t *)sub_100165DA4(12);
    v1 = (_QWORD *)sub_100165DA4(8);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v2);
    v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 32) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    *v1 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to process metric event with error: %@", v8, 0xCu);
    v10 = sub_100161BD0(&qword_100315A10);
    swift_arrayDestroy(v1, 1, v10);
    sub_100165D98((uint64_t)v1);
    sub_100165D98((uint64_t)v8);

  }
  else
  {
    v11 = *(_QWORD *)(v0 + 216);

    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }
  v13 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 72);
  swift_errorRelease(*(_QWORD *)(v0 + 216));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  sub_1001B3428();
  sub_10016D2A8();
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return sub_100165E20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001B222C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *aBlock, void *a6)
{
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v6[2] = a6;
  v6[3] = _Block_copy(aBlock);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v14 = v13;
  v6[4] = v13;
  v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v6[5] = v15;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v18 = v17;
  v6[6] = v17;
  v19 = dword_1003167FC;
  a6;
  v20 = (_QWORD *)swift_task_alloc(v19);
  v6[7] = v20;
  *v20 = v6;
  v20[1] = sub_1001B2324;
  return GKMetricsPipeline.processEvent(topic:shouldFlush:metricsFields:hostAppBundleId:)(v12, v14, a2, v15, v16, v18);
}

uint64_t sub_1001B2324()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void (**v4)(_QWORD);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100165E44();
  v2 = v1[6];
  v3 = v1[4];
  v5 = (void *)v1[2];
  v4 = (void (**)(_QWORD))v1[3];
  sub_100165DBC();
  v7 = swift_bridgeObjectRelease(v2, v6);
  sub_1001648C4(v7, v8);
  swift_bridgeObjectRelease(v3, v9);

  v4[2](v4);
  _Block_release(v4);
  return sub_100180D38(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t GKMetricsPipeline.processMultiplayerActivityEvent(metricsFields:hostAppBundleId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for MetricsData(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = sub_100180CA0(v6);
  sub_10016CFA0();
  return sub_10016D26C(v7, v8, v9);
}

uint64_t sub_1001B23D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;

  v1 = sub_100161BD0(&qword_100316818);
  v2 = type metadata accessor for MetricsFieldExclusionRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100234550;
  static MetricsFieldExclusionRequest.amsMetricsID.getter(v7);
  v8 = v7 + v6 + v4;
  if (qword_100314918 != -1)
    swift_once(&qword_100314918, sub_1001AEDE4);
  v9 = sub_1001AEE94(v2, (uint64_t)qword_10031B928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v8, v9, v2);
  if (*(_QWORD *)(v7 + 16))
  {
    v10 = (void *)sub_1001B2AC8(v7);
  }
  else
  {
    swift_setDeallocating(v7);
    sub_1001B28D0((uint64_t (*)(_QWORD))&type metadata accessor for MetricsFieldExclusionRequest);
    v10 = &_swiftEmptySetSingleton;
  }
  v11 = v0[2];
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(GKReporterMultiplayerActivityTopic);
  v14 = v13;
  v15 = sub_100161BD0(&qword_100316800);
  v16 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = swift_allocObject(v15, v19 + *(_QWORD *)(v17 + 72), v18 | 7);
  *(_OWORD *)(v20 + 16) = xmmword_100232EF0;
  v21 = v20 + v19;
  v22 = qword_100314940;
  swift_bridgeObjectRetain(v11);
  if (v22 != -1)
    swift_once(&qword_100314940, sub_1001C198C);
  v23 = sub_1001AEE94(v16, (uint64_t)qword_10031B988);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v21, v23, v16);
  if (*(_QWORD *)(v20 + 16))
  {
    v24 = (void *)sub_1001B2D60(v20);
  }
  else
  {
    swift_setDeallocating(v20);
    sub_1001B28D0((uint64_t (*)(_QWORD))&type metadata accessor for MetricsFieldInclusionRequest);
    v24 = &_swiftEmptySetSingleton;
  }
  MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(v12, v14, 0, v0[2], v24, v10);
  v25 = (_QWORD *)swift_task_alloc(dword_10031680C);
  v0[9] = v25;
  *v25 = v0;
  v25[1] = sub_1001B2648;
  return sub_1001B1CBC(v0[8], v0[3], v0[4]);
}

uint64_t sub_1001B2648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100165E44();
  sub_100165DBC();
  sub_10016CFA0();
  return sub_10016D26C(v0, v1, v2);
}

uint64_t sub_1001B267C()
{
  uint64_t v0;

  sub_1001B3460(*(_QWORD *)(v0 + 56));
  sub_10016D2A8();
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001B2724(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v4[4] = v8;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v11 = v10;
  v4[5] = v10;
  v12 = dword_100316814;
  a4;
  v13 = (_QWORD *)swift_task_alloc(v12);
  v4[6] = v13;
  *v13 = v4;
  v13[1] = sub_1001B27EC;
  return GKMetricsPipeline.processMultiplayerActivityEvent(metricsFields:hostAppBundleId:)(v8, v9, v11);
}

uint64_t sub_1001B27EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void (**v3)(_QWORD);
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100165E44();
  v2 = v1[5];
  v3 = (void (**)(_QWORD))v1[3];
  v4 = (void *)v1[2];
  sub_100165DBC();
  v6 = swift_bridgeObjectRelease(v2, v5);
  sub_1001648C4(v6, v7);

  v3[2](v3);
  _Block_release(v3);
  return sub_100165E20(*(uint64_t (**)(void))(v0 + 8));
}

void GKMetricsPipeline.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.GKMetricsPipeline", 32, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1001B28D0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1(0);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  swift_arrayDestroy(v1 + ((v3 + 32) & ~v3), *(_QWORD *)(v1 + 16), v2);
  return swift_deallocClassInstance(v1, 32, 7);
}

Swift::Int sub_1001B2918(Swift::Int result, uint64_t a2)
{
  Swift::Int v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[9];

  v2 = result;
  v3 = *(_QWORD *)(result + 16);
  if (!v3)
  {
    v4 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }
  sub_100161BD0(&qword_100315018);
  result = static _SetStorage.allocate(capacity:)(v3);
  v4 = (_QWORD *)result;
  v25 = *(_QWORD *)(v2 + 16);
  if (!v25)
  {
LABEL_25:
    sub_1001648C4(result, a2);
    return (Swift::Int)v4;
  }
  v5 = 0;
  v6 = result + 56;
  while (v5 < *(_QWORD *)(v2 + 16))
  {
    v7 = (uint64_t *)(v2 + 32 + 16 * v5);
    v9 = *v7;
    v8 = v7[1];
    Hasher.init(_seed:)(v26, v4[5]);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(v26, v9, v8);
    result = Hasher._finalize()();
    v10 = -1 << *((_BYTE *)v4 + 32);
    v11 = result & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      v15 = v4[6];
      v16 = (uint64_t *)(v15 + 16 * v11);
      a2 = v16[1];
      v17 = *v16 == v9 && a2 == v8;
      if (v17 || (result = sub_1001B3444(*v16, a2), (result & 1) != 0))
      {
LABEL_11:
        result = swift_bridgeObjectRelease(v8, a2);
        goto LABEL_22;
      }
      v18 = ~v10;
      while (1)
      {
        v11 = (v11 + 1) & v18;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
        v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0)
          break;
        v19 = (uint64_t *)(v15 + 16 * v11);
        a2 = v19[1];
        if (*v19 != v9 || a2 != v8)
        {
          result = sub_1001B3444(*v19, a2);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_11;
      }
    }
    *(_QWORD *)(v6 + 8 * v12) = v14 | v13;
    v21 = (_QWORD *)(v4[6] + 16 * v11);
    *v21 = v9;
    v21[1] = v8;
    v22 = v4[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_27;
    v4[2] = v24;
LABEL_22:
    if (++v5 == v25)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1001B2AC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for MetricsFieldExclusionRequest(0);
  v36 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v8 = (char *)&v31 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    v11 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  sub_100161BD0(&qword_100316888);
  result = static _SetStorage.allocate(capacity:)(v9);
  v11 = (_QWORD *)result;
  v33 = *(_QWORD *)(a1 + 16);
  if (!v33)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1, v6);
    return (uint64_t)v11;
  }
  v12 = 0;
  v35 = result + 56;
  v13 = *(unsigned __int8 *)(v36 + 80);
  v31 = a1;
  v32 = a1 + ((v13 + 32) & ~v13);
  while (v12 < *(_QWORD *)(a1 + 16))
  {
    v14 = *(_QWORD *)(v36 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
    v15(v8, v32 + v14 * v12, v2);
    v16 = v11[5];
    v17 = sub_100161F20(&qword_100316890, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
    v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v2, v17);
    v19 = -1 << *((_BYTE *)v11 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    v22 = *(_QWORD *)(v35 + 8 * (v20 >> 6));
    v23 = 1 << v20;
    if (((1 << v20) & v22) != 0)
    {
      v34 = v12;
      v24 = ~v19;
      while (1)
      {
        v15(v5, v11[6] + v20 * v14, v2);
        v25 = sub_100161F20(&qword_100316898, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldExclusionRequest);
        v26 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v8, v2, v25);
        v27 = *(void (**)(char *, uint64_t))(v36 + 8);
        v27(v5, v2);
        if ((v26 & 1) != 0)
          break;
        v20 = (v20 + 1) & v24;
        v21 = v20 >> 6;
        v22 = *(_QWORD *)(v35 + 8 * (v20 >> 6));
        v23 = 1 << v20;
        if ((v22 & (1 << v20)) == 0)
        {
          a1 = v31;
          v12 = v34;
          goto LABEL_10;
        }
      }
      result = ((uint64_t (*)(char *, uint64_t))v27)(v8, v2);
      a1 = v31;
      v12 = v34;
    }
    else
    {
LABEL_10:
      *(_QWORD *)(v35 + 8 * v21) = v23 | v22;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v36 + 32))(v11[6] + v20 * v14, v8, v2);
      v28 = v11[2];
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
        goto LABEL_18;
      v11[2] = v30;
    }
    if (++v12 == v33)
      goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1001B2D60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v36 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v8 = (char *)&v31 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    v11 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  sub_100161BD0(&qword_1003168E0);
  result = static _SetStorage.allocate(capacity:)(v9);
  v11 = (_QWORD *)result;
  v33 = *(_QWORD *)(a1 + 16);
  if (!v33)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1, v6);
    return (uint64_t)v11;
  }
  v12 = 0;
  v35 = result + 56;
  v13 = *(unsigned __int8 *)(v36 + 80);
  v31 = a1;
  v32 = a1 + ((v13 + 32) & ~v13);
  while (v12 < *(_QWORD *)(a1 + 16))
  {
    v14 = *(_QWORD *)(v36 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
    v15(v8, v32 + v14 * v12, v2);
    v16 = v11[5];
    v17 = sub_100161F20(&qword_1003168E8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
    v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v2, v17);
    v19 = -1 << *((_BYTE *)v11 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    v22 = *(_QWORD *)(v35 + 8 * (v20 >> 6));
    v23 = 1 << v20;
    if (((1 << v20) & v22) != 0)
    {
      v34 = v12;
      v24 = ~v19;
      while (1)
      {
        v15(v5, v11[6] + v20 * v14, v2);
        v25 = sub_100161F20((unint64_t *)&unk_1003168F0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
        v26 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v8, v2, v25);
        v27 = *(void (**)(char *, uint64_t))(v36 + 8);
        v27(v5, v2);
        if ((v26 & 1) != 0)
          break;
        v20 = (v20 + 1) & v24;
        v21 = v20 >> 6;
        v22 = *(_QWORD *)(v35 + 8 * (v20 >> 6));
        v23 = 1 << v20;
        if ((v22 & (1 << v20)) == 0)
        {
          a1 = v31;
          v12 = v34;
          goto LABEL_10;
        }
      }
      result = ((uint64_t (*)(char *, uint64_t))v27)(v8, v2);
      a1 = v31;
      v12 = v34;
    }
    else
    {
LABEL_10:
      *(_QWORD *)(v35 + 8 * v21) = v23 | v22;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v36 + 32))(v11[6] + v20 * v14, v8, v2);
      v28 = v11[2];
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
        goto LABEL_18;
      v11[2] = v30;
    }
    if (++v12 == v33)
      goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1001B2FF8()
{
  return type metadata accessor for GKMetricsPipeline(0);
}

uint64_t type metadata accessor for GKMetricsPipeline(uint64_t a1)
{
  uint64_t result;

  result = qword_100316848;
  if (!qword_100316848)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GKMetricsPipeline);
  return result;
}

void sub_1001B3038(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for Bag(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001B30C0(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

void sub_1001B30C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100316858)
  {
    v2 = type metadata accessor for MetricsPipeline(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100316858);
  }
}

uint64_t sub_1001B3114()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001B3150()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_100316864);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10019DF6C;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_100316860 + dword_100316860))(v2, v3, v5, v4);
}

uint64_t sub_1001B31C8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001B320C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(void **)(v0 + 48);
  v6 = *(void **)(v0 + 56);
  v8 = (_QWORD *)swift_task_alloc(dword_100316874);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_10019DA1C;
  return ((uint64_t (*)(uint64_t, char, uint64_t, uint64_t, void *, void *))((char *)&dword_100316870
                                                                                  + dword_100316870))(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_1001B329C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100161BD0(&qword_100316880);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001B32DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_100316880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B3324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_100316880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001B336C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003168B0;
  if (!qword_1003168B0)
  {
    v1 = objc_opt_self(ACAccountStore);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003168B0);
  }
  return result;
}

unint64_t sub_1001B33A8()
{
  unint64_t result;

  result = qword_1003168C0;
  if (!qword_1003168C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ArcadeStateMetricsFieldsProvider, &type metadata for ArcadeStateMetricsFieldsProvider);
    atomic_store(result, (unint64_t *)&qword_1003168C0);
  }
  return result;
}

unint64_t sub_1001B33E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003168D8;
  if (!qword_1003168D8)
  {
    v1 = sub_100161C54(&qword_1003168D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for LowMemoryMetricsEventLinter<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1003168D8);
  }
  return result;
}

uint64_t sub_1001B3428()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 200))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
}

uint64_t sub_1001B3444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_1001B3454()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 112));
}

uint64_t sub_1001B3460@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t GKDaemonHostAppFieldsProvider.HostAppKey.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_100314928 != -1)
    swift_once(&qword_100314928, sub_1001B34B8);
  v0 = sub_100161BD0(&qword_1003168A0);
  return sub_1001AEE94(v0, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
}

uint64_t sub_1001B34B8()
{
  uint64_t v0;

  v0 = sub_100161BD0(&qword_1003168A0);
  sub_1001AEE54(v0, static GKDaemonHostAppFieldsProvider.HostAppKey);
  sub_1001B3A48();
  return MetricsFieldsContext.Property.init(_:)(0xD00000000000001ALL, 0x800000010029AC50, &type metadata for String);
}

uint64_t static GKDaemonHostAppFieldsProvider.HostAppKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100314928 != -1)
    swift_once(&qword_100314928, sub_1001B34B8);
  v2 = sub_100161BD0(&qword_1003168A0);
  v3 = sub_1001AEE94(v2, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
  return sub_1001B3A18(a1, v3, v2, *(uint64_t (**)(void))(*(_QWORD *)(v2 - 8) + 16));
}

uint64_t GKDaemonHostAppFieldsProvider.category.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MetricsFieldsProviderCategory(0);
  return sub_1001B3A18(a1, v1, v3, *(uint64_t (**)(void))(*(_QWORD *)(v3 - 8) + 16));
}

uint64_t GKDaemonHostAppFieldsProvider.addMetricsFields(into:using:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;

  v2 = a1[3];
  v3 = a1[4];
  sub_100163928(a1, v2);
  v4 = dispatch thunk of MetricsFieldsBuilder.allMetricsFields.getter(v2, v3);
  v5 = sub_1001B3A20();
  sub_100166E48(v5, v6, v4, v7);
  swift_bridgeObjectRelease(v4, v8);
  v9 = v16;
  result = sub_100184D20((uint64_t)v15);
  if (!v9)
  {
    if (qword_100314928 != -1)
      swift_once(&qword_100314928, sub_1001B34B8);
    v11 = sub_100161BD0(&qword_1003168A0);
    v12 = sub_1001AEE94(v11, (uint64_t)static GKDaemonHostAppFieldsProvider.HostAppKey);
    v16 = sub_100161BD0(&qword_100314D20);
    MetricsFieldsContext.subscript.getter(v15, v12, &type metadata for String);
    v13 = a1[3];
    v14 = a1[4];
    sub_10016BF84((uint64_t)a1, v13);
    dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)(v15, 0x70704174736F68, 0xE700000000000000, v13, v14);
    return sub_100161FE0(v15);
  }
  return result;
}

uint64_t sub_1001B36FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for MetricsFieldsProviderCategory(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1001B3734(_QWORD *a1)
{
  return GKDaemonHostAppFieldsProvider.addMetricsFields(into:using:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsFieldsProviderCategory(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for GKDaemonHostAppFieldsProvider(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MetricsFieldsProviderCategory(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsFieldsProviderCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsFieldsProviderCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsFieldsProviderCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MetricsFieldsProviderCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001B38D4);
}

uint64_t sub_1001B38D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1001B3A38();
  return sub_10016445C(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for GKDaemonHostAppFieldsProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001B3908);
}

uint64_t sub_1001B3908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1001B3A38();
  return sub_100161B54(v1, v0, v0, v2);
}

uint64_t type metadata accessor for GKDaemonHostAppFieldsProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100316958;
  if (!qword_100316958)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GKDaemonHostAppFieldsProvider);
  return result;
}

uint64_t sub_1001B396C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for MetricsFieldsProviderCategory(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001B39D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for MetricsFieldExclusionRequest(0);
  sub_1001AEE54(v0, qword_10031B968);
  sub_1001B3A48();
  v1 = sub_1001B3A20();
  return MetricsFieldExclusionRequest.init(rawValue:)(v1, v2);
}

uint64_t sub_1001B3A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1001B3A20()
{
  return 0x70704174736F68;
}

uint64_t sub_1001B3A38()
{
  return type metadata accessor for MetricsFieldsProviderCategory(0);
}

uint64_t sub_1001B3A48()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1001AEE94(v0, v1);
}

uint64_t sub_1001B3A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_OWORD *)(a1 + 16);
    v8[0] = *(_OWORD *)a1;
    v8[1] = v4;
    v9 = *(_QWORD *)(a1 + 32);
    sub_1001C0B24();
    return swift_bridgeObjectRelease(a3, v5);
  }
  else
  {
    sub_1001B66E4(a1);
    sub_1001927C8();
    swift_bridgeObjectRelease(a3, v7);
    return sub_1001B66E4((uint64_t)v8);
  }
}

id sub_1001B3ADC()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MatchReporter()), "init");
  static MatchReporter.shared = (uint64_t)result;
  return result;
}

uint64_t *MatchReporter.shared.unsafeMutableAddressor()
{
  if (qword_100314938 != -1)
    swift_once(&qword_100314938, sub_1001B3ADC);
  return &static MatchReporter.shared;
}

id static MatchReporter.shared.getter()
{
  if (qword_100314938 != -1)
    swift_once(&qword_100314938, sub_1001B3ADC);
  return (id)static MatchReporter.shared;
}

id sub_1001B3B9C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  objc_class *ObjectType;
  objc_super v22;
  _QWORD *v23;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR___GKMatchReporter_matchRecording] = 0;
  v19 = OBJC_IVAR___GKMatchReporter_matchQueue;
  v18[1] = sub_10016CBB4(0, (unint64_t *)&qword_100314960, OS_dispatch_queue_ptr);
  v11 = v1;
  static DispatchQoS.unspecified.getter(v11);
  v23 = _swiftEmptyArrayStorage;
  sub_1001B661C((unint64_t *)&qword_100314968, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = v12;
  v14 = sub_100161BD0(&qword_100314970);
  sub_1001B6658((unint64_t *)&qword_100314978, &qword_100314970);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v14, v15, v5, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v20);
  v16 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x636552686374616DLL, 0xED0000726564726FLL, v10, v7, v4, 0);
  *(_QWORD *)&v1[v19] = v16;

  v22.receiver = v11;
  v22.super_class = ObjectType;
  return objc_msgSendSuper2(&v22, "init");
}

uint64_t sub_1001B3DDC(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  uint64_t v17;
  uint64_t inited;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37[256];
  uint64_t v38;

  v17 = sub_100161BD0(&qword_100316B70);
  inited = swift_initStackObject(v17, v37);
  *(_OWORD *)(inited + 16) = xmmword_100232E00;
  *(_QWORD *)(inited + 32) = 0x707954746E657665;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  v35 = 0x686374616DLL;
  v36 = 0xE500000000000000;
  AnyHashable.init<A>(_:)(&v35);
  *(_QWORD *)(inited + 88) = 0x707954686374616DLL;
  *(_QWORD *)(inited + 96) = 0xE900000000000065;
  v35 = a1;
  v36 = a2;
  swift_bridgeObjectRetain(a2);
  AnyHashable.init<A>(_:)(&v35);
  *(_QWORD *)(inited + 144) = 0x6579616C506E696DLL;
  *(_QWORD *)(inited + 152) = 0xEA00000000007372;
  v35 = (uint64_t)a3;
  sub_10016CBB4(0, (unint64_t *)&qword_100314DE8, NSNumber_ptr);
  sub_1001B6694();
  v19 = a3;
  AnyHashable.init<A>(_:)(&v35);
  *(_QWORD *)(inited + 200) = 0x6579616C5078616DLL;
  *(_QWORD *)(inited + 208) = 0xEA00000000007372;
  v35 = (uint64_t)a4;
  v20 = a4;
  AnyHashable.init<A>(_:)(&v35);
  v38 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for AnyHashable, &protocol witness table for String);
  if (a6)
  {
    v33 = a5;
    v34 = a6;
    swift_bridgeObjectRetain(a6);
    AnyHashable.init<A>(_:)(&v33);
    sub_1001B3A54((uint64_t)&v35, 0x7954746C75736572, 0xEA00000000006570);
  }
  if (a8)
  {
    v33 = a7;
    v34 = a8;
    swift_bridgeObjectRetain(a8);
    AnyHashable.init<A>(_:)(&v33);
    sub_1001B3A54((uint64_t)&v35, 0x726553686374616DLL, 0xEB00000000726576);
  }
  if (a9)
  {
    v33 = a9;
    v21 = a9;
    AnyHashable.init<A>(_:)(&v33);
    sub_1001B3A54((uint64_t)&v35, 0x727544686374616DLL, 0xED00006E6F697461);
  }
  if (a10)
  {
    v33 = a10;
    v22 = a10;
    AnyHashable.init<A>(_:)(&v33);
    sub_1001B3A54((uint64_t)&v35, 0x61727544656D6167, 0xEC0000006E6F6974);
  }
  if (a11)
  {
    v33 = a11;
    v23 = a11;
    AnyHashable.init<A>(_:)(&v33);
    sub_1001B3A54((uint64_t)&v35, 0xD000000000000010, 0x800000010029ADF0);
  }
  if (a12)
  {
    v33 = a12;
    v24 = a12;
    AnyHashable.init<A>(_:)(&v33);
    sub_1001B3A54((uint64_t)&v35, 0xD00000000000001CLL, 0x800000010029ADD0);
  }
  v25 = v38;
  sub_1001BE080(v38);
  v27 = v26;
  swift_bridgeObjectRelease(v25, v28);
  return v27;
}

uint64_t sub_1001B418C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___GKMatchReporter_matchRecording);
  *(_QWORD *)(v0 + OBJC_IVAR___GKMatchReporter_matchRecording) = 0;
  return swift_release(v1);
}

Swift::Void __swiftcall MatchReporter.recordMatchStart(type:minPlayers:maxPlayers:)(Swift::String type, NSNumber minPlayers, NSNumber maxPlayers)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[7];

  sub_100166CC4();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = sub_1001B6804();
  v14 = sub_1001B678C(v13);
  __chkstk_darwin(v14);
  v15 = sub_1001B675C();
  v16 = sub_1001B688C(v15);
  __chkstk_darwin(v16);
  sub_100163AD0();
  v17 = sub_100163AE8((uint64_t)&unk_1002C7C68, 24);
  swift_unknownObjectUnownedInit(v17 + 16, v4);
  v18 = (_QWORD *)sub_100163AE8((uint64_t)&unk_1002C7C90, 56);
  v18[2] = v17;
  v18[3] = v12;
  v18[4] = v10;
  v18[5] = v8;
  v18[6] = v6;
  v24[5] = sub_1001B4458;
  v24[6] = v18;
  v24[1] = _NSConcreteStackBlock;
  v24[2] = 1107296256;
  v19 = sub_1001B67BC((uint64_t)sub_100163518);
  sub_100194B58();
  swift_bridgeObjectRetain(v10);
  v20 = v8;
  v21 = v6;
  sub_1001B67FC();
  v24[0] = _swiftEmptyArrayStorage;
  sub_1001B661C(&qword_100315A50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_1001B67F4();
  sub_1001B67EC(&qword_100315A60);
  sub_1001B67AC((uint64_t)v24, v22, v23);
  sub_1001B680C();
  _Block_release(v19);
  sub_1001B6778();
  sub_1001B685C();
  sub_1001B67A0();
  sub_100176CDC();
  sub_100165DCC();
}

uint64_t sub_1001B4320()
{
  uint64_t v0;

  swift_unknownObjectUnownedDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001B4344(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v9;
  char *Strong;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = a1 + 16;
  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v11 = *(_QWORD *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (!v11)
  {
    v12 = (char *)swift_unknownObjectUnownedLoadStrong(v9);
    v13 = type metadata accessor for MultiplayerRecording();
    swift_allocObject(v13, 120, 7);
    swift_bridgeObjectRetain(a3);
    v14 = sub_1001B64DC(a2, a3, (uint64_t)a4, (uint64_t)a5);
    v15 = *(_QWORD *)&v12[OBJC_IVAR___GKMatchReporter_matchRecording];
    *(_QWORD *)&v12[OBJC_IVAR___GKMatchReporter_matchRecording] = v14;

    swift_release(v15);
  }
}

uint64_t sub_1001B4420()
{
  uint64_t v0;
  uint64_t v1;

  sub_1001B6874();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32), v1);

  return swift_deallocObject(v0, 56, 7);
}

void sub_1001B4458()
{
  uint64_t v0;

  sub_1001B4344(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_1001B4468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001B4478(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

Swift::Void __swiftcall MatchReporter.recordMatchServer(type:)(Swift::String type)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[7];

  sub_100166CC4();
  v3 = v2;
  v5 = v4;
  v6 = sub_1001B6804();
  v7 = sub_1001B678C(v6);
  __chkstk_darwin(v7);
  sub_1001B675C();
  sub_1001B67D8();
  __chkstk_darwin(v8);
  sub_100163AD0();
  v9 = sub_100163AE8((uint64_t)&unk_1002C7C68, 24);
  sub_1001B683C(v9);
  v10 = (_QWORD *)sub_100163AE8((uint64_t)&unk_1002C7CE0, 40);
  v10[2] = v1;
  v10[3] = v5;
  v10[4] = v3;
  v15[5] = sub_1001B46F8;
  v15[6] = v10;
  v15[1] = _NSConcreteStackBlock;
  v15[2] = 1107296256;
  v11 = sub_1001B67BC((uint64_t)sub_100163518);
  sub_100194B58();
  swift_bridgeObjectRetain(v3);
  sub_1001B67FC();
  v15[0] = _swiftEmptyArrayStorage;
  sub_1001B687C(&qword_100315A50, v12, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_1001B67F4();
  sub_1001B67EC(&qword_100315A60);
  sub_1001B67AC((uint64_t)v15, v13, v14);
  sub_1001B6824();
  _Block_release(v11);
  sub_1001B6778();
  sub_1001B67C8();
  sub_1001B67A0();
  sub_100176CDC();
  sub_100165DCC();
}

void sub_1001B4660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v6 = *(_QWORD *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (v6)
  {
    v9 = Strong;
    swift_retain(v6);

    v7 = *(_QWORD *)(v6 + 96);
    *(_QWORD *)(v6 + 88) = a2;
    *(_QWORD *)(v6 + 96) = a3;
    swift_bridgeObjectRetain(a3);
    swift_release(v6);
    swift_bridgeObjectRelease(v7, v8);
  }
  else
  {

  }
}

uint64_t sub_1001B46EC()
{
  return sub_1001B5FDC((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1001B46F8()
{
  uint64_t *v0;

  sub_1001B4660(v0[2], v0[3], v0[4]);
}

Swift::Void __swiftcall MatchReporter.recordActiveDevices(count:)(NSNumber count)
{
  sub_1001B485C();
}

void sub_1001B4774(uint64_t a1, void *a2)
{
  char *Strong;
  uint64_t v4;
  id v5;
  id v6;
  char *v7;

  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v4 = *(_QWORD *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (v4)
  {
    v6 = Strong;
    swift_retain(v4);

    v7 = *(char **)(v4 + 104);
    *(_QWORD *)(v4 + 104) = a2;
    v5 = a2;
    swift_release(v4);
    Strong = v7;
  }

}

void sub_1001B47E4()
{
  uint64_t v0;

  sub_1001B4774(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

Swift::Void __swiftcall MatchReporter.recordSharePlayDevices(count:)(NSNumber count)
{
  sub_1001B485C();
}

void sub_1001B485C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[6];

  sub_100166CC4();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = sub_1001B6804();
  v10 = sub_1001B678C(v9);
  __chkstk_darwin(v10);
  v11 = sub_1001B675C();
  v12 = sub_1001B688C(v11);
  __chkstk_darwin(v12);
  sub_100163AD0();
  v13 = sub_100163AE8((uint64_t)&unk_1002C7C68, 24);
  sub_1001B684C(v13);
  v14 = sub_100163AE8(v6, 32);
  *(_QWORD *)(v14 + 16) = v0;
  *(_QWORD *)(v14 + 24) = v8;
  v20[4] = v4;
  v20[5] = v14;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256;
  v20[2] = sub_100163518;
  v20[3] = v2;
  v15 = _Block_copy(v20);
  sub_100194B58();
  v16 = v8;
  sub_1001B67FC();
  v19 = _swiftEmptyArrayStorage;
  sub_1001B661C(&qword_100315A50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_1001B67F4();
  sub_1001B67EC(&qword_100315A60);
  sub_1001B67AC((uint64_t)&v19, v17, v18);
  sub_1001B680C();
  _Block_release(v15);
  sub_1001B6778();
  sub_1001B685C();
  sub_1001B67A0();
  sub_100176CDC();
  sub_100165DCC();
}

void sub_1001B49AC(uint64_t a1, void *a2)
{
  char *Strong;
  uint64_t v4;
  id v5;
  id v6;
  char *v7;

  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v4 = *(_QWORD *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (v4)
  {
    v6 = Strong;
    swift_retain(v4);

    v7 = *(char **)(v4 + 112);
    *(_QWORD *)(v4 + 112) = a2;
    v5 = a2;
    swift_release(v4);
    Strong = v7;
  }

}

uint64_t sub_1001B4A1C()
{
  uint64_t v0;

  sub_1001B6874();

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001B4A44()
{
  uint64_t v0;

  sub_1001B49AC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void MatchReporter.recordMatchComplete(matchType:result:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[7];

  sub_100166CC4();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v24 = v9;
  v11 = v10;
  v13 = v12;
  v14 = sub_1001B6804();
  v15 = sub_1001B678C(v14);
  __chkstk_darwin(v15);
  v16 = sub_1001B675C();
  v25 = *(_QWORD *)(v16 - 8);
  v26 = v16;
  __chkstk_darwin(v16);
  sub_100163AD0();
  v17 = sub_100163AE8((uint64_t)&unk_1002C7C68, 24);
  sub_1001B684C(v17);
  v18 = (_QWORD *)sub_100163AE8((uint64_t)&unk_1002C7DD0, 72);
  v18[2] = v2;
  v18[3] = v6;
  v18[4] = v4;
  v18[5] = v13;
  v18[6] = v11;
  v18[7] = v24;
  v18[8] = v8;
  v27[5] = sub_1001B53A4;
  v27[6] = v18;
  v27[1] = _NSConcreteStackBlock;
  v27[2] = 1107296256;
  v19 = sub_1001B67BC((uint64_t)sub_100163518);
  swift_bridgeObjectRetain(v8);
  sub_100194B58();
  swift_retain(v4);
  swift_bridgeObjectRetain(v11);
  sub_1001B67FC();
  v27[0] = _swiftEmptyArrayStorage;
  sub_1001B661C(&qword_100315A50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = v20;
  v22 = sub_1001B67F4();
  sub_1001B67EC(&qword_100315A60);
  dispatch thunk of SetAlgebra.init<A>(_:)(v27, v22, v23, v14, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1, v0, v19);
  _Block_release(v19);
  sub_1001B6778();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v1, v26);
  sub_1001B67A0();
  sub_100176CDC();
  sub_100165DCC();
}

void sub_1001B4C60(uint64_t a1, void (*a2)(Class), uint64_t a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *Strong;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  Class v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  objc_class *v37;
  uint64_t v38;
  uint64_t v39;
  objc_class *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double Current;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  char *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id v69;
  char *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  id v74;
  char *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  id v79;
  void *v80;
  Class v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  char v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  Class isa;
  Class v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  void (*v103)(Class);
  uint64_t v104;
  void *v105;

  v100 = a7;
  v101 = a6;
  v102 = a3;
  v103 = a2;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + 16;
  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v16 = *(_QWORD *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (!v16)
    goto LABEL_4;
  v18 = a1 + 16;
  v19 = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v20 = v19;
  v21 = *(_QWORD *)&v19[OBJC_IVAR___GKMatchReporter_matchRecording];
  if (!v21)
  {

    v14 = a1 + 16;
LABEL_9:
    v32 = (Class)swift_unknownObjectUnownedLoadStrong(v14);
    v33 = *(_QWORD *)((char *)v32 + OBJC_IVAR___GKMatchReporter_matchRecording);
    if (!v33)
    {
LABEL_52:

      return;
    }
    v99 = v32;
    swift_retain(v33);

    v34 = v14;
    v35 = *(_QWORD *)(v33 + 16);
    v36 = *(_QWORD *)(v33 + 24);
    swift_bridgeObjectRetain(v36);
    swift_release(v33);
    v37 = (objc_class *)swift_unknownObjectUnownedLoadStrong(v34);
    v99 = v37;
    v39 = *(_QWORD *)((char *)v37 + OBJC_IVAR___GKMatchReporter_matchRecording);
    if (v39)
    {
      swift_retain(*(_QWORD *)((char *)v37 + OBJC_IVAR___GKMatchReporter_matchRecording));

      v99 = (Class)*(id *)(v39 + 40);
      swift_release(v39);
      v40 = (objc_class *)swift_unknownObjectUnownedLoadStrong(v34);
      v42 = *(_QWORD *)((char *)v40 + OBJC_IVAR___GKMatchReporter_matchRecording);
      isa = v40;
      if (!v42)
      {
        swift_bridgeObjectRelease(v36, v41);
LABEL_22:

LABEL_48:
        v32 = isa;
        goto LABEL_52;
      }
      swift_retain(v42);

      v43 = *(id *)(v42 + 48);
      swift_release(v42);
      isa = (Class)swift_unknownObjectUnownedLoadStrong(v34);
      v45 = *(_QWORD *)((char *)isa + OBJC_IVAR___GKMatchReporter_matchRecording);
      if (!v45)
      {
        swift_bridgeObjectRelease(v36, v44);

        goto LABEL_48;
      }
      v97 = v43;
      swift_retain(v45);

      v46 = *(double *)(v45 + 32);
      swift_release(v45);
      Current = CFAbsoluteTimeGetCurrent();
      v48 = swift_unknownObjectUnownedLoadStrong(v34);
      v49 = (void *)v48;
      v50 = *(_QWORD *)(v48 + OBJC_IVAR___GKMatchReporter_matchRecording);
      if (v50)
      {
        swift_retain(*(_QWORD *)(v48 + OBJC_IVAR___GKMatchReporter_matchRecording));

        v51 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", Current - v46);
        v49 = *(void **)(v50 + 56);
        *(_QWORD *)(v50 + 56) = v51;
        swift_release(v50);
      }

      if (a5)
      {
        swift_bridgeObjectRetain(a5);
        swift_bridgeObjectRelease(v36, v52);
        v36 = a5;
      }
      else
      {
        a4 = v35;
      }
      v55 = (char *)swift_unknownObjectUnownedLoadStrong(v18);
      v56 = v55;
      v57 = *(_QWORD *)&v55[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v57)
      {
        swift_retain(*(_QWORD *)&v55[OBJC_IVAR___GKMatchReporter_matchRecording]);

        v58 = *(_QWORD *)(v57 + 24);
        *(_QWORD *)(v57 + 16) = a4;
        *(_QWORD *)(v57 + 24) = v36;
        swift_bridgeObjectRetain(v36);
        swift_release(v57);
        swift_bridgeObjectRelease(v58, v59);
      }
      else
      {

      }
      v60 = (void *)swift_unknownObjectUnownedLoadStrong(v18);
      v61 = (char *)swift_unknownObjectUnownedLoadStrong(v18);
      v62 = v61;
      v63 = *(_QWORD *)&v61[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v63)
      {
        swift_retain(*(_QWORD *)&v61[OBJC_IVAR___GKMatchReporter_matchRecording]);

        v64 = *(void **)(v63 + 88);
        isa = *(Class *)(v63 + 96);
        swift_bridgeObjectRetain(isa);
        swift_release(v63);
      }
      else
      {

        v64 = 0;
        isa = 0;
      }
      v65 = (char *)swift_unknownObjectUnownedLoadStrong(v18);
      v66 = v65;
      v67 = *(_QWORD *)&v65[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v67)
      {
        swift_retain(*(_QWORD *)&v65[OBJC_IVAR___GKMatchReporter_matchRecording]);

        v68 = *(void **)(v67 + 56);
        v69 = v68;
        swift_release(v67);
      }
      else
      {

        v68 = 0;
      }
      v70 = (char *)swift_unknownObjectUnownedLoadStrong(v18);
      v71 = v70;
      v72 = *(_QWORD *)&v70[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v72)
      {
        swift_retain(*(_QWORD *)&v70[OBJC_IVAR___GKMatchReporter_matchRecording]);

        v73 = *(void **)(v72 + 104);
        v74 = v73;
        swift_release(v72);
      }
      else
      {

        v73 = 0;
      }
      v75 = (char *)swift_unknownObjectUnownedLoadStrong(v18);
      v76 = v75;
      v77 = *(_QWORD *)&v75[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v77)
      {
        swift_retain(*(_QWORD *)&v75[OBJC_IVAR___GKMatchReporter_matchRecording]);

        v78 = *(void **)(v77 + 112);
        v79 = v78;
        swift_release(v77);
      }
      else
      {

        v78 = 0;
      }
      v80 = v64;
      v81 = isa;
      v82 = v100;
      v83 = sub_1001B3DDC(a4, v36, v99, v97, v101, v100, v80, (uint64_t)isa, v68, 0, v73, v78);

      swift_bridgeObjectRelease(v36, v84);
      swift_bridgeObjectRelease(v81, v85);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v83, v86);
      v103(isa);
      v87 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(GKMetricsEventMatchFailed);
      v89 = v88;
      if (!v82)
      {

        swift_bridgeObjectRelease(v89, v94);
        goto LABEL_48;
      }
      if (v87 == v101 && v88 == v82)
      {
        swift_bridgeObjectRelease(v88, v88);
        v93 = v97;
      }
      else
      {
        v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v101, v82, v87, v88, 0);
        swift_bridgeObjectRelease(v89, v92);
        v93 = v97;
        if ((v91 & 1) == 0)
        {

          goto LABEL_22;
        }
      }
      v95 = (void *)swift_unknownObjectUnownedLoadStrong(v18);
      sub_1001B418C();

    }
    else
    {
      swift_bridgeObjectRelease(v36, v38);
    }
    v32 = v99;
    goto LABEL_52;
  }
  swift_retain(*(_QWORD *)&v19[OBJC_IVAR___GKMatchReporter_matchRecording]);

  v22 = *(_QWORD *)(v21 + 56);
  v17 = swift_release(v21);
  v14 = a1 + 16;
  if (!v22)
    goto LABEL_9;
LABEL_4:
  static GKLog.daemon.getter(v17);
  v23 = swift_retain_n(a1, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v101 = (void *)swift_slowAlloc(32, -1);
    v105 = v101;
    *(_DWORD *)v26 = 136315138;
    v27 = (char *)swift_unknownObjectUnownedLoadStrong(v14);
    v28 = v27;
    v29 = *(_QWORD *)&v27[OBJC_IVAR___GKMatchReporter_matchRecording];
    if (v29)
    {
      swift_retain(*(_QWORD *)&v27[OBJC_IVAR___GKMatchReporter_matchRecording]);

      v30 = *(_QWORD *)(v29 + 16);
      v31 = *(_QWORD *)(v29 + 24);
      swift_bridgeObjectRetain(v31);
      swift_release(v29);
    }
    else
    {

      v31 = 0xE700000000000000;
      v30 = 0x6E776F6E6B6E55;
    }
    v104 = sub_10016FE60(v30, v31, (uint64_t *)&v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v31, v53);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Match record not found for matchType: %s", v26, 0xCu);
    v54 = v101;
    swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v103(0);
}

uint64_t sub_1001B536C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1001B6874();
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6], v1);
  swift_bridgeObjectRelease(v0[8], v2);
  return swift_deallocObject(v0, 72, 7);
}

void sub_1001B53A4()
{
  uint64_t v0;

  sub_1001B4C60(*(_QWORD *)(v0 + 16), *(void (**)(Class))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(_QWORD *)(v0 + 64));
}

Swift::Void __swiftcall MatchReporter.recordGameStart()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[7];

  sub_100166CC4();
  v1 = sub_1001B6804();
  v2 = sub_1001B678C(v1);
  __chkstk_darwin(v2);
  sub_1001B675C();
  sub_1001B67D8();
  __chkstk_darwin(v3);
  sub_100163AD0();
  v4 = sub_100163AE8((uint64_t)&unk_1002C7C68, 24);
  swift_unknownObjectUnownedInit(v4 + 16);
  v11[5] = sub_1001B588C;
  v11[6] = v4;
  v11[1] = _NSConcreteStackBlock;
  v11[2] = 1107296256;
  v5 = sub_1001B67BC((uint64_t)sub_100163518);
  sub_100194B58();
  sub_1001B67FC();
  v11[0] = _swiftEmptyArrayStorage;
  sub_1001B687C(&qword_100315A50, v6, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v8 = v7;
  v9 = sub_1001B67F4();
  sub_1001B67EC(&qword_100315A60);
  dispatch thunk of SetAlgebra.init<A>(_:)(v11, v9, v10, v1, v8);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v0);
  _Block_release(v5);
  sub_1001B6778();
  sub_1001B67C8();
  sub_1001B67A0();
  sub_100176CDC();
  sub_100165DCC();
}

void sub_1001B55F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *Strong;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v7 = *(_QWORD *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (v7)
  {
    v9 = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
    v10 = *(_QWORD *)&v9[OBJC_IVAR___GKMatchReporter_matchRecording];
    if (v10)
    {
      v23 = v9;
      swift_retain(v10);

      *(CFAbsoluteTime *)(v10 + 32) = CFAbsoluteTimeGetCurrent();
      swift_release(v10);
    }
    else
    {

    }
  }
  else
  {
    static GKLog.daemon.getter(v8);
    v11 = swift_retain_n(a1, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = (id)swift_slowAlloc(32, -1);
      v25 = v23;
      *(_DWORD *)v14 = 136315138;
      v15 = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
      v16 = v15;
      v17 = *(_QWORD *)&v15[OBJC_IVAR___GKMatchReporter_matchRecording];
      if (v17)
      {
        swift_retain(*(_QWORD *)&v15[OBJC_IVAR___GKMatchReporter_matchRecording]);

        v19 = *(_QWORD *)(v17 + 16);
        v18 = *(_QWORD *)(v17 + 24);
        swift_bridgeObjectRetain(v18);
        swift_release(v17);
      }
      else
      {

        v18 = 0xE700000000000000;
        v19 = 0x6E776F6E6B6E55;
      }
      v24 = sub_10016FE60(v19, v18, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v18, v20);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Match record not found at start of game for matchType: %s", v14, 0xCu);
      v21 = v23;
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void sub_1001B588C()
{
  uint64_t v0;

  sub_1001B55F8(v0);
}

void MatchReporter.recordGameComplete(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[7];

  sub_100166CC4();
  v2 = v1;
  v4 = v3;
  v5 = sub_1001B6804();
  v6 = sub_1001B678C(v5);
  __chkstk_darwin(v6);
  sub_1001B675C();
  sub_1001B67D8();
  __chkstk_darwin(v7);
  sub_100163AD0();
  v8 = sub_100163AE8((uint64_t)&unk_1002C7C68, 24);
  sub_1001B683C(v8);
  v9 = (_QWORD *)sub_100163AE8((uint64_t)&unk_1002C7E48, 40);
  v9[2] = v0;
  v9[3] = v4;
  v9[4] = v2;
  v14[5] = sub_1001B6010;
  v14[6] = v9;
  v14[1] = _NSConcreteStackBlock;
  v14[2] = 1107296256;
  v10 = sub_1001B67BC((uint64_t)sub_100163518);
  sub_100194B58();
  swift_retain(v2);
  sub_1001B67FC();
  v14[0] = _swiftEmptyArrayStorage;
  sub_1001B687C(&qword_100315A50, v11, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_1001B67F4();
  sub_1001B67EC(&qword_100315A60);
  sub_1001B67AC((uint64_t)v14, v12, v13);
  sub_1001B6824();
  _Block_release(v10);
  sub_1001B6778();
  sub_1001B67C8();
  sub_1001B67A0();
  sub_100176CDC();
  sub_100165DCC();
}

void sub_1001B5A28(uint64_t a1, void (*a2)(Class))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *Strong;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double Current;
  char *v33;
  uint64_t v34;
  id v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  char *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  char *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  id v52;
  void *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  id v58;
  char *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  id v63;
  char *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  id v68;
  void *v69;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Class isa;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  void *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  id v91;
  void (*v92)(Class);
  void *v93;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1 + 16;
  Strong = (char *)swift_unknownObjectUnownedLoadStrong(v8);
  v10 = *(_QWORD *)&Strong[OBJC_IVAR___GKMatchReporter_matchRecording];

  if (v10)
  {
    v12 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
    v13 = v12;
    v14 = *(_QWORD *)&v12[OBJC_IVAR___GKMatchReporter_matchRecording];
    if (v14)
    {
      swift_retain(*(_QWORD *)&v12[OBJC_IVAR___GKMatchReporter_matchRecording]);

      v15 = *(_QWORD *)(v14 + 56);
      v11 = swift_release(v14);
      if (v15)
      {
        v16 = swift_unknownObjectUnownedLoadStrong(v8);
        v17 = (char *)v16;
        v18 = *(_QWORD *)(v16 + OBJC_IVAR___GKMatchReporter_matchRecording);
        if (v18)
        {
          swift_retain(*(_QWORD *)(v16 + OBJC_IVAR___GKMatchReporter_matchRecording));

          v20 = *(void **)(v18 + 16);
          v19 = *(_QWORD *)(v18 + 24);
          swift_bridgeObjectRetain(v19);
          swift_release(v18);
          v21 = swift_unknownObjectUnownedLoadStrong(v8);
          v17 = (char *)v21;
          v23 = *(_QWORD *)(v21 + OBJC_IVAR___GKMatchReporter_matchRecording);
          if (v23)
          {
            swift_retain(*(_QWORD *)(v21 + OBJC_IVAR___GKMatchReporter_matchRecording));

            v24 = *(id *)(v23 + 40);
            swift_release(v23);
            v25 = swift_unknownObjectUnownedLoadStrong(v8);
            v17 = (char *)v25;
            v27 = *(_QWORD *)(v25 + OBJC_IVAR___GKMatchReporter_matchRecording);
            if (v27)
            {
              swift_retain(*(_QWORD *)(v25 + OBJC_IVAR___GKMatchReporter_matchRecording));

              v28 = *(id *)(v27 + 48);
              swift_release(v27);
              v17 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
              v30 = *(_QWORD *)&v17[OBJC_IVAR___GKMatchReporter_matchRecording];
              if (v30)
              {
                v92 = a2;
                swift_retain(v30);

                v31 = *(double *)(v30 + 32);
                swift_release(v30);
                Current = CFAbsoluteTimeGetCurrent();
                v33 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                v34 = *(_QWORD *)&v33[OBJC_IVAR___GKMatchReporter_matchRecording];
                v91 = v20;
                if (v34)
                {
                  swift_retain(v34);

                  v35 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", Current - v31);
                  v33 = *(char **)(v34 + 64);
                  *(_QWORD *)(v34 + 64) = v35;
                  swift_release(v34);
                }

                v90 = swift_unknownObjectUnownedLoadStrong(v8);
                v36 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                v37 = v36;
                v38 = *(_QWORD *)&v36[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v38)
                {
                  swift_retain(*(_QWORD *)&v36[OBJC_IVAR___GKMatchReporter_matchRecording]);

                  v39 = *(_QWORD *)(v38 + 80);
                  v89 = *(void **)(v38 + 72);
                  swift_bridgeObjectRetain(v39);
                  swift_release(v38);
                }
                else
                {

                  v89 = 0;
                  v39 = 0;
                }
                v88 = v19;
                v44 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                v45 = v44;
                v46 = *(_QWORD *)&v44[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v46)
                {
                  swift_retain(*(_QWORD *)&v44[OBJC_IVAR___GKMatchReporter_matchRecording]);

                  v47 = *(void **)(v46 + 88);
                  v86 = *(_QWORD *)(v46 + 96);
                  v87 = v47;
                  swift_bridgeObjectRetain(v86);
                  swift_release(v46);
                }
                else
                {

                  v86 = 0;
                  v87 = 0;
                }
                v48 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                v49 = v48;
                v50 = *(_QWORD *)&v48[OBJC_IVAR___GKMatchReporter_matchRecording];
                v93 = v28;
                if (v50)
                {
                  swift_retain(v50);

                  v51 = *(void **)(v50 + 56);
                  v52 = v51;
                  swift_release(v50);
                }
                else
                {

                  v51 = 0;
                }
                v53 = v24;
                v54 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                v55 = v54;
                v56 = *(_QWORD *)&v54[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v56)
                {
                  swift_retain(*(_QWORD *)&v54[OBJC_IVAR___GKMatchReporter_matchRecording]);

                  v57 = *(void **)(v56 + 64);
                  v58 = v57;
                  swift_release(v56);
                }
                else
                {

                  v57 = 0;
                }
                v59 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                v60 = v59;
                v61 = *(_QWORD *)&v59[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v61)
                {
                  swift_retain(*(_QWORD *)&v59[OBJC_IVAR___GKMatchReporter_matchRecording]);

                  v62 = *(void **)(v61 + 104);
                  v63 = v62;
                  swift_release(v61);
                }
                else
                {

                  v62 = 0;
                }
                v64 = (char *)swift_unknownObjectUnownedLoadStrong(v8);
                v65 = v64;
                v66 = *(_QWORD *)&v64[OBJC_IVAR___GKMatchReporter_matchRecording];
                if (v66)
                {
                  swift_retain(*(_QWORD *)&v64[OBJC_IVAR___GKMatchReporter_matchRecording]);

                  v67 = *(void **)(v66 + 112);
                  v68 = v67;
                  swift_release(v66);
                }
                else
                {

                  v67 = 0;
                }
                v83 = v62;
                v69 = v62;
                v82 = v51;
                v71 = (void *)v90;
                v70 = (uint64_t)v91;
                v91 = v51;
                v72 = v88;
                v85 = v53;
                v73 = v53;
                v74 = v86;
                v75 = v39;
                v76 = sub_1001B3DDC(v70, v88, v73, v93, v89, v39, v87, v86, v82, v57, v83, v67);

                swift_bridgeObjectRelease(v72, v77);
                swift_bridgeObjectRelease(v74, v78);
                swift_bridgeObjectRelease(v75, v79);
                isa = Dictionary._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v76, v81);
                v92(isa);

                goto LABEL_20;
              }
              swift_bridgeObjectRelease(v19, v29);

            }
            else
            {
              swift_bridgeObjectRelease(v19, v26);

            }
          }
          else
          {
            swift_bridgeObjectRelease(v19, v22);
          }
        }

        a2(0);
LABEL_20:
        v93 = (void *)swift_unknownObjectUnownedLoadStrong(v8);
        sub_1001B418C();

        return;
      }
    }
    else
    {

    }
  }
  v40 = static GKLog.daemon.getter(v11);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.info.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Match record not found at finish gameplay.", v43, 2u);
    swift_slowDealloc(v43, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  a2(0);
}

uint64_t sub_1001B5FD0()
{
  return sub_1001B5FDC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001B5FDC(void (*a1)(_QWORD))
{
  uint64_t v1;

  sub_1001B6874();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

void sub_1001B6010()
{
  uint64_t v0;

  sub_1001B5A28(*(_QWORD *)(v0 + 16), *(void (**)(Class))(v0 + 24));
}

void static MatchReporter.onInviteReceived(bulletin:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Class v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  NSString v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  Class isa;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  sub_100166CC4();
  v54 = v0;
  v55 = v1;
  v3 = v2;
  v4 = (Class)type metadata accessor for Logger(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1001B686C(v6, "gameDescriptor");
  if (!v9)
  {
LABEL_11:
    static GKLog.daemon.getter(v9);
    v30 = v3;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      isa = v4;
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v33 = 138412290;
      v52 = v30;
      v34 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      v35 = (uint64_t)v50;
      *v50 = v30;

      v4 = isa;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Not emitting MAF event for incomplete bulletin localPlayerID: %@", v33, 0xCu);
      v36 = sub_100161BD0(&qword_100315A10);
      swift_arrayDestroy(v35, 1, v36);
      sub_100165D98(v35);
      sub_100165D98((uint64_t)v33);
    }
    else
    {

      v31 = v30;
    }

    (*(void (**)(char *, Class))(v5 + 8))(v8, v4);
    sub_100165DCC();
    return;
  }
  v10 = v9;
  v11 = objc_msgSend(v9, "bundleIdentifier");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v13 = v12;

  v15 = sub_1001B6884(v14, (SEL *)&selRef_receiverPlayerID);
  if (!v16)
  {
    v28 = v13;
LABEL_10:
    v9 = (id)swift_bridgeObjectRelease(v28, v16);
    goto LABEL_11;
  }
  v17 = v15;
  v18 = v16;
  v19 = (objc_class *)sub_1001B6884(v15, (SEL *)&selRef_originatorPlayerID);
  if (!v20)
  {
    sub_10016D110((uint64_t)v19, 0);
    v28 = v18;
    goto LABEL_10;
  }
  v21 = v20;
  isa = v19;
  v22 = sub_1001B6884((uint64_t)v19, (SEL *)&selRef_sessionID);
  if (!v23)
  {
    sub_10016D110(v22, 0);
    swift_bridgeObjectRelease(v18, v29);
    v28 = v21;
    goto LABEL_10;
  }
  v24 = v23;
  v25 = v22;
  v26 = (uint64_t)sub_1001B686C(v22, "isMessageBasedInvite");
  if ((v26 & 1) != 0)
  {
    v27 = 2;
  }
  else
  {
    v26 = (uint64_t)sub_1001B686C(v26, "isSharePlayInvite");
    if ((v26 & 1) != 0)
    {
      v27 = 4;
    }
    else
    {
      v26 = (uint64_t)sub_1001B686C(v26, "isNearbyInvite");
      v27 = 3;
      if (!(_DWORD)v26)
        v27 = 1;
    }
  }
  v50 = (_QWORD *)v27;
  v37 = sub_1001B686C(v26, "serverHosted");
  v38 = sub_1001B686C((uint64_t)v37, "transportVersionToUse");
  v39 = v38;
  if (v38)
  {
    v40 = sub_1001B686C((uint64_t)v38, "integerValue");

  }
  else
  {
    v40 = 0;
  }
  ((void (*)(_QWORD))type metadata accessor for MultiplayerActivityReporter)(0);
  v41 = ((uint64_t (*)(_QWORD *, id, uint64_t, uint64_t, Class, uint64_t, uint64_t, uint64_t, id, BOOL))static MultiplayerActivityReporter.makeInviteReceivedFields(approach:isHosted:localPlayerID:senderPlayerID:sessionID:transportVersion:))(v50, v37, v17, v18, isa, v21, v25, v24, v40, v39 == 0);
  swift_bridgeObjectRelease(v24, v42);
  swift_bridgeObjectRelease(v21, v43);
  swift_bridgeObjectRelease(v18, v44);
  v45 = objc_msgSend((id)objc_opt_self(GKAMPController), "controller");
  v46 = String._bridgeToObjectiveC()();
  sub_10016D110((uint64_t)v46, v47);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v41, v48);
  objc_msgSend(v45, "reportMultiplayerActivityEventWithHostAppBundleId:metricsFields:", v46, isa);

}

uint64_t sub_1001B64DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 48) = a4;
  *(CFAbsoluteTime *)(v4 + 32) = CFAbsoluteTimeGetCurrent();
  return v4;
}

uint64_t sub_1001B6514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24), a2);

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 80), v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 96), v4);

  return v2;
}

uint64_t sub_1001B6570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_1001B6514(a1, a2);
  return swift_deallocClassInstance(v2, 120, 7);
}

void sub_1001B658C(void (*a1)(void))
{
  a1();
  sub_10016219C();
}

uint64_t type metadata accessor for MatchReporter()
{
  return objc_opt_self(GKMatchReporter);
}

uint64_t type metadata accessor for MultiplayerRecording()
{
  return objc_opt_self(_TtC14GameDaemonCoreP33_4AEC5DA5437D5D761880B6B27EADF34520MultiplayerRecording);
}

uint64_t sub_1001B65E8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001B660C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_1001B661C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_10016219C();
}

void sub_1001B6658(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100161C54(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }
  sub_10016219C();
}

unint64_t sub_1001B6694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316B78;
  if (!qword_100316B78)
  {
    v1 = sub_10016CBB4(255, (unint64_t *)&qword_100314DE8, NSNumber_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100316B78);
  }
  return result;
}

uint64_t sub_1001B66E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100161BD0(&qword_100316B80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001B675C()
{
  return type metadata accessor for DispatchQoS(0);
}

uint64_t sub_1001B6778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v0);
}

uint64_t sub_1001B678C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t sub_1001B67A0()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1001B67AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(a1, a2, a3, v3, v4);
}

void *sub_1001B67BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = a1;
  *(_QWORD *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

uint64_t sub_1001B67C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1001B67EC(unint64_t *a1)
{
  uint64_t *v1;

  sub_1001B6658(a1, v1);
}

uint64_t sub_1001B67F4()
{
  uint64_t *v0;

  return sub_100161BD0(v0);
}

uint64_t sub_1001B67FC()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_1001B6804()
{
  return type metadata accessor for DispatchWorkItemFlags(0);
}

uint64_t sub_1001B680C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1, v0, v2);
}

uint64_t sub_1001B6824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1, v0, v2);
}

uint64_t sub_1001B683C(uint64_t a1)
{
  uint64_t v1;

  return swift_unknownObjectUnownedInit(a1 + 16, v1);
}

uint64_t sub_1001B684C(uint64_t a1)
{
  uint64_t v1;

  return swift_unknownObjectUnownedInit(a1 + 16, v1);
}

uint64_t sub_1001B685C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 152));
}

id sub_1001B686C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1001B6874()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

void sub_1001B687C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_1001B661C(a1, v3, a3);
}

uint64_t sub_1001B6884(uint64_t a1, SEL *a2)
{
  void *v2;

  return sub_1001644B8(v2, a2);
}

uint64_t sub_1001B688C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = result;
  return result;
}

void sub_1001B68A0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static GKLog.general.getter(v6);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(12, -1);
    v17 = v4;
    v13 = a1;
    v14 = (uint8_t *)v12;
    v15 = swift_slowAlloc(32, -1);
    v19 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain(a2);
    v18 = sub_10016FE60(v13, a2, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    sub_100165D98(v15);
    sub_100165D98((uint64_t)v14);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v17);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  exit(-1);
}

uint64_t type metadata accessor for ProcessExiter()
{
  return objc_opt_self(GKProcessExiter);
}

uint64_t sub_1001B6A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  _QWORD v24[5];
  int64_t v25;

  sub_1001B71F4(a1, v24);
  v6 = v24[0];
  v22 = v24[1];
  v7 = v24[3];
  v8 = v24[4];
  v25 = (unint64_t)(v24[2] + 64) >> 6;
  result = swift_bridgeObjectRetain(a1);
  if (!v8)
    goto LABEL_3;
LABEL_2:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v12 = v11 | (v7 << 6);
  while (1)
  {
    v17 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v12);
    v18 = *v17;
    v19 = v17[1];
    v23[2] = *v17;
    v23[3] = v19;
    v23[0] = a2;
    v23[1] = a3;
    v20 = sub_100164810();
    swift_bridgeObjectRetain(v19);
    if ((StringProtocol.contains<A>(_:)(v23, &type metadata for String, &type metadata for String, v20, v20) & 1) != 0)
    {
      swift_bridgeObjectRelease(a3, v21);
      swift_release(v6);
      return v18;
    }
    result = swift_bridgeObjectRelease(v19, v21);
    if (v8)
      goto LABEL_2;
LABEL_3:
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v13 >= v25)
      goto LABEL_23;
    v14 = *(_QWORD *)(v22 + 8 * v13);
    v15 = v7 + 1;
    if (!v14)
    {
      v15 = v7 + 2;
      if (v7 + 2 >= v25)
        goto LABEL_23;
      v14 = *(_QWORD *)(v22 + 8 * v15);
      if (!v14)
      {
        v15 = v7 + 3;
        if (v7 + 3 >= v25)
          goto LABEL_23;
        v14 = *(_QWORD *)(v22 + 8 * v15);
        if (!v14)
        {
          v15 = v7 + 4;
          if (v7 + 4 >= v25)
            goto LABEL_23;
          v14 = *(_QWORD *)(v22 + 8 * v15);
          if (!v14)
          {
            v15 = v7 + 5;
            if (v7 + 5 >= v25)
              goto LABEL_23;
            v14 = *(_QWORD *)(v22 + 8 * v15);
            if (!v14)
            {
              v16 = v7 + 6;
              while (v16 < v25)
              {
                v14 = *(_QWORD *)(v22 + 8 * v16++);
                if (v14)
                {
                  v15 = v16 - 1;
                  goto LABEL_18;
                }
              }
LABEL_23:
              swift_bridgeObjectRelease(a3, v10);
              swift_release(v6);
              return 0;
            }
          }
        }
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v7 = v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001B6C94(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v64;

  v5 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v30 = a1;
    else
      v30 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    result = _CocoaArrayWrapper.endIndex.getter(v30);
    v6 = result;
    if (result)
      goto LABEL_3;
LABEL_23:
    v10 = 0;
    goto LABEL_24;
  }
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(a1);
  if (!v6)
    goto LABEL_23;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  v59 = a1;
  v61 = a2;
  v9 = 0;
  v10 = 0;
  v64 = a1 & 0xC000000000000001;
  v62 = v6;
  do
  {
    if (v64)
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a1);
    else
      v11 = *(id *)(a1 + 8 * v9 + 32);
    v12 = v11;
    v13 = sub_1001B722C(v11);
    if (v14)
    {
      v15 = v13;
      v16 = v14;
      swift_bridgeObjectRetain(v14);
      v17 = swift_bridgeObjectRetain(v61);
      v18 = sub_1001B6A94(v17, v15, v16);
      v20 = v19;
      swift_bridgeObjectRelease(v61, v19);
      if (v20)
      {
        sub_100166DC8(v18, v20, v61);
        v22 = v21;
        v23 = swift_bridgeObjectRelease(v20, v21);
        if (v22)
        {
          swift_isUniquelyReferenced_nonNull_native(v5);
          sub_100166B18();

          sub_10016D2B0(v25, v26);
          swift_bridgeObjectRelease(0x8000000000000000, v27);
        }
        else
        {
          sub_10016D2B0(v23, v24);

        }
        a1 = v59;
      }
      else
      {

        sub_10016D2B0(v28, v29);
      }
      v6 = v62;
    }
    else
    {

    }
    ++v9;
  }
  while (v6 != v9);
LABEL_24:
  swift_bridgeObjectRelease(a1, v8);
  v31 = sub_10016CBB4(0, (unint64_t *)&qword_100314D70, CNContact_ptr);
  v32 = sub_1001B71A0();
  v60 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v31, &type metadata for String, v32);
  v33 = a3;
  if (a3 >> 62)
    goto LABEL_49;
  v34 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v33 = swift_bridgeObjectRetain(a3);
  if (v34)
  {
    do
    {
      v58 = v10;
      v36 = 0;
      while (1)
      {
        if ((a3 & 0xC000000000000001) != 0)
        {
          v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, a3);
        }
        else
        {
          if (v36 >= *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_48;
          v33 = (uint64_t)*(id *)(a3 + 32 + 8 * v36);
        }
        v37 = (void *)v33;
        if (__OFADD__(v36++, 1))
          break;
        v39 = objc_msgSend((id)v33, "handles", v58);
        v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v39, &type metadata for String);

        v41 = *(_QWORD *)(v40 + 16);
        if (v41)
        {
          swift_bridgeObjectRetain(v40);
          v10 = (_QWORD *)(v40 + 40);
          while (1)
          {
            if (*(_QWORD *)(v5 + 16))
            {
              v42 = *v10;
              swift_bridgeObjectRetain(*v10);
              swift_bridgeObjectRetain(v5);
              sub_1001B728C();
              v44 = v43;
              swift_bridgeObjectRelease(v5, v43);
              if ((v44 & 1) != 0)
              {
                sub_1001B729C();
                if (*(_QWORD *)(v5 + 16) && (v48 = sub_1001B728C(), (v49 & 1) != 0))
                {
                  v50 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v48);
                  v51 = *v50;
                  v52 = v50[1];
                  swift_bridgeObjectRetain(v52);
                  swift_bridgeObjectRelease(v42, v53);
                  v54 = v37;
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
                  sub_100166A08(v51, v52, v54, isUniquelyReferenced_nonNull_native);

                  v47 = 0x8000000000000000;
                }
                else
                {

                  v47 = v42;
                }
                goto LABEL_44;
              }
              swift_bridgeObjectRelease(v42, v45);
            }
            v10 += 2;
            if (!--v41)
            {

              v33 = sub_1001B729C();
              goto LABEL_45;
            }
          }
        }

        v47 = v40;
LABEL_44:
        v33 = swift_bridgeObjectRelease(v47, v46);
LABEL_45:
        if (v36 == v34)
          goto LABEL_46;
      }
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      if (v33 < 0)
        v57 = v33;
      else
        v57 = v33 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v33);
      v33 = _CocoaArrayWrapper.endIndex.getter(v57);
      v34 = v33;
    }
    while (v33);
  }
LABEL_46:
  swift_bridgeObjectRelease(a3, v35);
  swift_bridgeObjectRelease(v5, v56);
  return v60;
}

unint64_t sub_1001B71A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316BB8;
  if (!qword_100316BB8)
  {
    v1 = sub_10016CBB4(255, (unint64_t *)&qword_100314D70, CNContact_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100316BB8);
  }
  return result;
}

uint64_t sub_1001B71F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_1001B722C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "handle");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

unint64_t sub_1001B728C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1001860C4(v0, v1);
}

uint64_t sub_1001B729C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1001B72AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = sub_100161BD0(&qword_100314EA0);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t sub_1001B72FC(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(*(_QWORD *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_1001B730C(uint64_t a1, uint64_t a2)
{
  return sub_1001B7328(a1, a2, &qword_100316BD8);
}

uint64_t sub_1001B731C(uint64_t a1, uint64_t a2)
{
  return sub_1001B7328(a1, a2, &qword_100316BE0);
}

uint64_t sub_1001B7328(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = a2;
  sub_100183EDC((uint64_t)&v5, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40), a3);
  return swift_continuation_throwingResume(a1);
}

uint64_t sub_1001B7368(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[30] = a1;
  v2[31] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[32] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[33] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[34] = swift_task_alloc(v5);
  v2[35] = swift_task_alloc(v5);
  v6 = type metadata accessor for DispatchQoS.QoSClass(0);
  v2[36] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[37] = v7;
  v2[38] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return sub_10016D26C((uint64_t)sub_1001B73F8, 0, 0);
}

uint64_t sub_1001B73F8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = v0 + 2;
  v4 = v1[37];
  v3 = v1[38];
  v5 = v1[36];
  v6 = (void *)v1[30];
  v7 = sub_100161BD0(&qword_100315280);
  v8 = swift_allocObject(v7, 64, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100232EF0;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 32) = 0xD000000000000018;
  *(_QWORD *)(v8 + 40) = 0x800000010029AE60;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v1[39] = isa;
  swift_bridgeObjectRelease(v8, v10);
  sub_100162B54();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for DispatchQoS.QoSClass.default(_:), v5);
  v11 = static OS_dispatch_queue.global(qos:)(v3);
  v1[40] = v11;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v1[7] = v1 + 28;
  v1[2] = v1;
  v1[3] = sub_1001B7570;
  v12 = swift_continuation_init(v2, 1);
  v1[10] = _NSConcreteStackBlock;
  v1 += 10;
  v1[1] = 0x40000000;
  v1[2] = sub_1001B79D4;
  v1[3] = &unk_1002C7F00;
  v1[4] = v12;
  objc_msgSend(v6, "getValuesForKeys:queue:completion:", isa, v11, v1);
  return swift_continuation_await(v2);
}

uint64_t sub_1001B7570()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  sub_100165E44();
  *v1 = *v0;
  v3 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 328) = v3;
  if (v3)
    v4 = sub_1001B778C;
  else
    v4 = sub_1001B75C0;
  return sub_10016D26C((uint64_t)v4, 0, 0);
}

uint64_t sub_1001B75C0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(void **)(v0 + 312);

  if (v1)
  {
    *(_QWORD *)(v0 + 192) = 0xD000000000000018;
    *(_QWORD *)(v0 + 200) = 0x800000010029AE60;
    AnyHashable.init<A>(_:)(v0 + 192);
    sub_100166D80(v1, (_OWORD *)(v0 + 160));
    sub_1001648C4(v4, v5);
    sub_1001638F4(v0 + 120);
    if (*(_QWORD *)(v0 + 184))
    {
      v6 = sub_100161BD0(&qword_1003159A0);
      v3 = swift_dynamicCast(v0 + 232, v0 + 160, (char *)&type metadata for Any + 8, v6, 6);
      if ((v3 & 1) != 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(v0 + 232) + 16))
        {
          v8 = sub_1001B7A48(*(_QWORD *)(v0 + 232));
          sub_1001648C4(v8, v9);
          goto LABEL_11;
        }
        v3 = sub_1001648C4(v3, v7);
      }
    }
    else
    {
      v3 = sub_100184D20(v0 + 160);
    }
  }
  v10 = static GKLog.daemon.getter(v3);
  v8 = Logger.logObject.getter(v10);
  v11 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled((os_log_t)v8, v11))
  {
    v12 = (uint8_t *)sub_100165DA4(2);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v8, v11, "Fetched empty list of trusted image domains. Allowing all.", v12, 2u);
    sub_100165D98((uint64_t)v12);
  }
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 264);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  LOBYTE(v8) = 1;
LABEL_11:
  v17 = *(_QWORD *)(v0 + 272);
  v16 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8 & 1);
}

uint64_t sub_1001B778C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(void **)(v1 + 320);
  v2 = *(_QWORD *)(v1 + 328);
  v4 = *(void **)(v1 + 312);
  swift_willThrow(a1);

  static GKLog.daemon.getter(v5);
  swift_errorRetain(v2);
  v6 = swift_errorRetain(v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v1 + 328);
    v21 = *(_QWORD *)(v1 + 264);
    v22 = *(_QWORD *)(v1 + 256);
    v23 = *(_QWORD *)(v1 + 272);
    v10 = sub_100165DA4(22);
    v11 = (_QWORD *)sub_100165DA4(8);
    v12 = sub_100165DA4(32);
    v24 = v12;
    *(_DWORD *)v10 = 136315394;
    *(_QWORD *)(v1 + 216) = sub_10016FE60(0xD000000000000018, 0x800000010029AE60, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 216, v1 + 224);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v9);
    v13 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v1 + 208) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 208, v1 + 216);
    *v11 = v13;
    sub_100194BE4();
    sub_100194BE4();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to fetch bag values for key: %s, error: %@. Allowing all.", (uint8_t *)v10, 0x16u);
    v14 = sub_100161BD0(&qword_100315A10);
    swift_arrayDestroy(v11, 1, v14);
    sub_100165D98((uint64_t)v11);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    sub_100165D98(v12);
    sub_100165D98(v10);

    sub_100194BE4();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  }
  else
  {
    v16 = *(_QWORD *)(v1 + 264);
    v15 = *(_QWORD *)(v1 + 272);
    v17 = *(_QWORD *)(v1 + 256);
    sub_10016D1B4();
    sub_10016D1B4();
    sub_10016D1B4();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  v18 = *(_QWORD *)(v1 + 272);
  v19 = *(_QWORD *)(v1 + 280);
  swift_task_dealloc(*(_QWORD *)(v1 + 304));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(1);
}

uint64_t sub_1001B79D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
    return sub_1001B72AC(v3, (uint64_t)a3);
  if (a2)
    a2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  return sub_1001B7328(v3, a2, &qword_100316358);
}

uint64_t sub_1001B7A48(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;

  v3 = sub_1001B7CF0(v1);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain(a1);
      v7 = v6 - 1;
      v8 = (_QWORD *)(a1 + 40);
      do
      {
        v9 = v7;
        v6 = *(v8 - 1);
        v10 = (void *)*v8;
        swift_bridgeObjectRetain(*v8);
        v11._countAndFlagsBits = v6;
        v11._object = v10;
        LOBYTE(v6) = String.hasSuffix(_:)(v11);
        swift_bridgeObjectRelease(v10, v12);
        if ((v6 & 1) != 0)
          break;
        v7 = v9 - 1;
        v8 += 2;
      }
      while (v9);
      v3 = swift_bridgeObjectRelease(v5, v13);
    }
    sub_1001648C4(v3, v4);
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  return v6 & 1;
}

uint64_t sub_1001B7B70(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_100316BD4;
  v7 = a1;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1001B7BEC;
  return sub_1001B7368((uint64_t)v7);
}

uint64_t sub_1001B7BEC(char a1)
{
  uint64_t v1;
  _QWORD *v3;
  void (**v4)(_QWORD, _QWORD);
  void *v5;
  void *v6;

  sub_100165E44();
  v4 = (void (**)(_QWORD, _QWORD))v3[4];
  v6 = (void *)v3[2];
  v5 = (void *)v3[3];
  sub_100165DBC();

  v4[2](v4, a1 & 1);
  _Block_release(v4);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001B7C50()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001B7C84()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100316BC4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100165D20;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_100316BC0 + dword_100316BC0))(v2, v3, v4);
}

uint64_t sub_1001B7CF0(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "host");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_1001B7D54(void *a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001B82D0();
  v10 = sub_1001B7F94(a1, a2);
  v11 = objc_msgSend(v3, "bag");
  if (v11)
  {
    v12 = v11;
    -[NSObject setBag:](v10, "setBag:", v11);
    v13 = objc_msgSend((id)objc_opt_self(AMSMetricsLoadURLEvent), "shouldCollectMetricsPromiseForContext:", v10);
    v14 = swift_allocObject(&unk_1002C7F28, 32, 7);
    *(_QWORD *)(v14 + 16) = v10;
    *(_QWORD *)(v14 + 24) = v3;
    aBlock[4] = sub_1001B8338;
    v25 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001B8214;
    aBlock[3] = &unk_1002C7F40;
    v15 = _Block_copy(aBlock);
    v16 = v25;
    v17 = v10;
    v18 = v3;
    swift_release(v16);
    objc_msgSend(v13, "addSuccessBlock:", v15);
    _Block_release(v15);

  }
  else
  {
    v19 = static GKLog.general.getter(0);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Cannot report session event without a bag.", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
      v23 = v10;
    }
    else
    {
      v23 = v20;
      v20 = v10;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

id sub_1001B7F94(void *a1, void *a2)
{
  uint64_t v2;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "initWithTask:metrics:", a1, a2);

  return v5;
}

void sub_1001B7FEC(void *a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  if (objc_msgSend(a1, "BOOLValue"))
  {
    v5 = objc_msgSend((id)objc_opt_self(AMSMetricsLoadURLEvent), "loadURLEventPromiseWithContext:", a2);
    v6 = swift_allocObject(&unk_1002C7F78, 24, 7);
    swift_unknownObjectWeakInit(v6 + 16, a3);
    v7 = swift_allocObject(&unk_1002C7FA0, 32, 7);
    *(_QWORD *)(v7 + 16) = v6;
    *(_QWORD *)(v7 + 24) = a2;
    v11[4] = sub_1001B83A8;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_1001B8214;
    v11[3] = &unk_1002C7FB8;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = a2;
    swift_release(v9);
    objc_msgSend(v5, "addSuccessBlock:", v8);
    _Block_release(v8);

  }
}

void sub_1001B8104(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void *Strong;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;
  id v11;
  _BYTE v12[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = sub_1001B83B0(Strong);
    if (v7)
    {
      v8 = v7;
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v8, v10);
      objc_msgSend(a1, "addPropertiesWithDictionary:", isa);

    }
  }
  v11 = objc_msgSend((id)objc_opt_self(AMSMetrics), "internalInstanceUsingBag:", objc_msgSend(a3, "bag"));
  swift_unknownObjectRelease();
  objc_msgSend(v11, "enqueueEvent:", a1);

}

void sub_1001B8218(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

unint64_t sub_1001B82D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316BE8;
  if (!qword_100316BE8)
  {
    v1 = objc_opt_self(AMSMetricsLoadURLContext);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100316BE8);
  }
  return result;
}

uint64_t sub_1001B830C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001B8338(void *a1)
{
  uint64_t v1;

  sub_1001B7FEC(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001B8340(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001B8350(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001B8358()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001B837C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001B83A8(void *a1)
{
  uint64_t v1;

  sub_1001B8104(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1001B83B0(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "metadata");

  if (!v2)
    return 0;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  return v3;
}

uint64_t sub_1001B842C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  void (*v40)(uint64_t, char *, uint64_t);
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(uint64_t, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t ObjectType;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v84 = a3;
  v85 = a4;
  v7 = type metadata accessor for Logger(0);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  sub_1001A1358();
  __chkstk_darwin(v8);
  sub_100162164();
  v79 = v10 - v9;
  type metadata accessor for ModelConfiguration.CloudKitDatabase(0);
  sub_1001A1358();
  __chkstk_darwin(v11);
  sub_100162164();
  v14 = v13 - v12;
  v15 = type metadata accessor for ModelConfiguration(0);
  v81 = *(_QWORD *)(v15 - 8);
  v82 = v15;
  sub_1001A1358();
  __chkstk_darwin(v16);
  sub_10019FB64();
  v77 = v17;
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v71 - v20;
  __chkstk_darwin(v19);
  v80 = (char *)&v71 - v22;
  sub_100161BD0(&qword_100315B00);
  sub_1001A1358();
  __chkstk_darwin(v23);
  sub_100162164();
  v26 = v25 - v24;
  v27 = type metadata accessor for URL(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  sub_10019FB64();
  v74 = v29;
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v71 - v32;
  __chkstk_darwin(v31);
  v83 = (uint64_t)&v71 - v34;
  v35 = (void *)objc_opt_self(NSFileManager);
  v86 = v4;
  swift_retain(v4);
  v36 = objc_msgSend(v35, "defaultManager");
  sub_1001B89D0((uint64_t)v36);
  v37 = (void *)objc_opt_self(GKClientProxy);
  v38 = sub_1001BD188(a1, a2, v84, (uint64_t)v85, 0xD000000000000011, 0x800000010029B0D0, (uint64_t)v36, v37);
  if (!v38)
  {
    sub_100164550(v26, 1);
    v42 = v86;
    goto LABEL_7;
  }
  v39 = v38;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v40 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 32);
  v40(v26, v33, v27);
  sub_100164550(v26, 0);
  v41 = sub_10016445C(v26, 1, v27);
  v42 = v86;
  if (v41 == 1)
  {
LABEL_7:
    swift_release(v42);
    sub_10016CBEC(v26, &qword_100315B00);
    v64 = sub_1001BD250();
    swift_allocError(&type metadata for AppMetadataCache.AppMetadataCacheError, v64, 0, 0);
    swift_willThrow();

    ObjectType = swift_getObjectType(v42);
    sub_1001BDE90(v42, ObjectType);
    return v26;
  }
  v85 = v36;
  v43 = v83;
  v40(v83, (char *)v26, v27);
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 16))(v33, v43, v27);
  static ModelConfiguration.CloudKitDatabase.none.getter(v44);
  v45 = v80;
  ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)(0, 0, 0, v33, 1, v14);
  v72 = swift_getObjectType(v42);
  v46 = v81;
  v47 = *(void (**)(uint64_t, char *, uint64_t))(v81 + 16);
  v84 = v28;
  v48 = v42;
  v49 = v82;
  v73 = v47;
  v47((uint64_t)v21, v45, v82);
  v50 = v78;
  v51 = AppMetadataCache.__allocating_init(configuration:)((uint64_t)v21);
  if (v50)
  {
    static GKLog.cache.getter(v51);
    sub_1001BDE88();
    v52 = sub_1001BDE88();
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      v78 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v55 = 138412290;
      sub_1001BDE88();
      v56 = _swift_stdlib_bridgeErrorToNSError(v50);
      v87 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88);
      v57 = (uint64_t)v78;
      *v78 = v56;
      v58 = v86;
      sub_1001BDE24();
      sub_1001BDE24();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed to construct model container with error, deleting files: %@", v55, 0xCu);
      v59 = sub_100161BD0(&qword_100315A10);
      swift_arrayDestroy(v57, 1, v59);
      sub_100165D98(v57);
      sub_100165D98((uint64_t)v55);
      v60 = v80;
      v62 = v75;
      v61 = v76;
      v63 = v74;
    }
    else
    {
      sub_1001BDE24();
      sub_1001BDE24();
      v60 = v80;
      v62 = v75;
      v61 = v76;
      v63 = v74;
      v58 = v86;
    }

    v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v79, v61);
    v68 = ModelConfiguration.url.getter(v67);
    URL.deletingLastPathComponent()(v68);
    sub_1001BDE50(v63);
    sub_1001BDE04();
    v69 = v85;
    sub_1001A0CDC();
    sub_1001BDE24();
    sub_1001BDE50((uint64_t)v33);
    v48 = v58;
    swift_release(v58);
    v70 = v77;
    v73(v77, v60, v82);
    v26 = AppMetadataCache.__allocating_init(configuration:)(v70);

    sub_1001BDE2C();
  }
  else
  {
    v26 = v51;
    swift_release(v48);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v49);
  }
  sub_1001BDE50(v83);
  sub_1001BDE90(v48, v72);
  return v26;
}

uint64_t sub_1001B89D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a1;
  v1 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v1 - 8);
  sub_1001A1358();
  __chkstk_darwin(v2);
  sub_1001AB270();
  v5 = v3 - v4;
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - v7;
  type metadata accessor for ModelConfiguration.CloudKitDatabase(0);
  sub_1001A1358();
  __chkstk_darwin(v9);
  sub_100162164();
  v12 = v11 - v10;
  v31 = type metadata accessor for ModelConfiguration(0);
  v13 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_100162164();
  v16 = v15 - v14;
  v17 = type metadata accessor for ModelConfiguration.GroupContainer(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_1001AB270();
  v21 = v19 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v30 - v23;
  static ModelConfiguration.GroupContainer.identifier(_:)(0xD00000000000001ALL, 0x8000000100299B90);
  v25 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 16))(v21, v24, v17);
  static ModelConfiguration.CloudKitDatabase.none.getter(v25);
  v26 = ModelConfiguration.init(_:schema:isStoredInMemoryOnly:allowsSave:groupContainer:cloudKitDatabase:)(0x646174654D707041, 0xEB00000000617461, 0, 0, 1, v21, v12);
  v27 = ModelConfiguration.url.getter(v26);
  URL.deletingLastPathComponent()(v27);
  v28 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  v28(v5, v1);
  sub_1001BDE04();
  sub_1001A0CDC();
  v28((uint64_t)v8, v1);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v24, v17);
}

uint64_t AppMetadataCache.__allocating_init(configuration:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  type metadata accessor for ModelContainer(0);
  v3 = sub_100161BD0(&qword_100315998);
  v4 = swift_allocObject(v3, 48, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100232EF0;
  v5 = sub_1001BCD70();
  sub_1001BD454((uint64_t)&unk_100316BF0);
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v6;
  v7 = sub_1001B8D9C();
  v8 = sub_100161BD0(&qword_100315B18);
  v9 = type metadata accessor for ModelConfiguration(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(v8, v12 + *(_QWORD *)(v10 + 72), v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_100232EF0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13 + v12, a1, v9);
  v14 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)(v4, &type metadata for AppMetadataMigrationPlan, v7, v13);
  if (v1)
    return sub_100181464(a1, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  v16 = v14;
  v17 = type metadata accessor for AppMetadataCache();
  swift_allocObject(v17, 40, 7);
  AppMetadataCache.init(modelContainer:)(v16);
  v19 = v18;
  sub_100181464(a1, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  return v19;
}

uint64_t type metadata accessor for AppMetadataSchemaV1.AppMetadata(uint64_t a1)
{
  uint64_t result;

  result = qword_100316C88;
  if (!qword_100316C88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppMetadataSchemaV1.AppMetadata);
  return result;
}

unint64_t sub_1001B8D9C()
{
  unint64_t result;

  result = qword_100316BF8;
  if (!qword_100316BF8)
  {
    result = swift_getWitnessTable(&unk_100234EC8, &type metadata for AppMetadataMigrationPlan);
    atomic_store(result, (unint64_t *)&qword_100316BF8);
  }
  return result;
}

void AppMetadataCache.fetch(bundleIDs:adamIDs:ttl:)(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  id v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[16];
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;

  v50 = a2;
  v48 = a1;
  v5 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v5 - 8);
  sub_1001A1358();
  __chkstk_darwin(v6);
  sub_1001AB270();
  __chkstk_darwin(v7);
  v9 = (char *)v47 - v8;
  sub_100161BD0(&qword_100316C00);
  sub_1001A1358();
  __chkstk_darwin(v10);
  sub_100163AD0();
  v11 = sub_100161BD0(&qword_100316C08);
  v49 = *(_QWORD *)(v11 - 8);
  sub_1001A1358();
  __chkstk_darwin(v12);
  sub_100162164();
  v15 = v14 - v13;
  sub_100161BD0(&qword_100316C10);
  sub_1001BDE58(v3, 1);
  v16 = sub_1001BCD70();
  sub_1001BD454((uint64_t)&unk_100316BF0);
  v18 = v17;
  FetchDescriptor.init(predicate:sortBy:)(v3, _swiftEmptyArrayStorage, v16, v17);
  v55 = v48;
  v56 = v50;
  v58 = v16;
  Predicate.init(_:)(sub_1001BA5D4, v54, 1, &v58);
  sub_1001BDE58(v3, 0);
  v19 = v3;
  v20 = v11;
  FetchDescriptor.predicate.setter(v19, v11);
  v21 = type metadata accessor for AppMetadataCache();
  sub_1001BD454((uint64_t)&unk_100316C18);
  ModelActor.modelContext.getter(v21, v22);
  v23 = v52;
  v24 = dispatch thunk of ModelContext.fetch<A>(_:)(v15, v16, v18);
  if (v23)
  {
    sub_100181464(v15, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
    sub_100165E88();
    return;
  }
  v25 = v24;
  v48 = 0;
  v26 = sub_100165E88();
  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v44 = v25;
    else
      v44 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v45 = _CocoaArrayWrapper.endIndex.getter(v44);
    v26 = sub_10016D2B0(v45, v46);
    v28 = v45;
  }
  else
  {
    v28 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v29 = v53;
  v30 = v49;
  if (!v28)
  {
    sub_10016D2B0(v26, v27);
LABEL_18:
    sub_100181464(v15, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
    return;
  }
  v57 = _swiftEmptyArrayStorage;
  v52 = v28;
  sub_1001733EC(0, v28 & ~(v28 >> 63), 0);
  if ((v52 & 0x8000000000000000) == 0)
  {
    v47[0] = v15;
    v47[1] = v20;
    v31 = 0;
    v32 = -a3;
    v50 = v25 & 0xC000000000000001;
    v51 = v25;
    do
    {
      if (v50)
      {
        v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v25);
      }
      else
      {
        v33 = *(_QWORD *)(v25 + 8 * v31 + 32);
        swift_retain(v33);
      }
      v34 = Date.init()();
      Date.addingTimeInterval(_:)(v34, v32);
      v35 = *(void (**)(char *, uint64_t))(v29 + 8);
      sub_1001BDE7C();
      v36 = sub_1001B9764();
      sub_1001B99D8();
      v37 = Date.compare(_:)(v9);
      sub_1001BDE7C();
      v35(v9, v5);
      swift_release(v33);
      v38 = v57;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v57);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1001733EC(0, v38[2] + 1, 1);
        v38 = v57;
      }
      v42 = v38[2];
      v41 = v38[3];
      if (v42 >= v41 >> 1)
      {
        sub_1001733EC(v41 > 1, v42 + 1, 1);
        v38 = v57;
      }
      ++v31;
      v38[2] = v42 + 1;
      v43 = &v38[2 * v42];
      v43[4] = v36;
      *((_BYTE *)v43 + 40) = v37 == -1;
      v29 = v53;
      v25 = v51;
    }
    while (v52 != v31);
    sub_10016D2B0(isUniquelyReferenced_nonNull_native, v40);
    v15 = v47[0];
    v30 = v49;
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t sub_1001B927C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;

  v56 = a3;
  v59 = a4;
  v6 = sub_100161BD0(&qword_100316E18);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100161BD0(&qword_100316E20);
  v11 = *(_QWORD *)(v10 - 8);
  v53 = v10;
  v54 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100161BD0(&qword_100316E28);
  v52 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100161BD0(&qword_100316E30);
  v17 = *(_QWORD *)(v16 - 8);
  v57 = v16;
  v58 = v17;
  v18 = __chkstk_darwin(v16);
  v55 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v51 = (char *)&v46 - v20;
  v21 = *a1;
  v49 = v21;
  v61 = a2;
  v50 = sub_100161BD0(&qword_100316E38);
  static PredicateExpressions.build_Arg<A>(_:)(&v61, v50);
  sub_1001BD780((uint64_t)&unk_100316E40);
  v23 = v22;
  static PredicateExpressions.build_Arg<A>(_:)(v21, v6, v22);
  KeyPath = swift_getKeyPath(&unk_100234F58);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v9, KeyPath, v6, v23);
  swift_release(KeyPath);
  v48 = *(void (**)(char *, uint64_t))(v7 + 8);
  v48(v9, v6);
  sub_1001BD780((uint64_t)&unk_100316E48);
  v26 = v25;
  v47 = v25;
  sub_1001BD780((uint64_t)&unk_100316E50);
  v28 = v27;
  v46 = v27;
  sub_1001BD780((uint64_t)&unk_100316E58);
  v30 = v29;
  v31 = v60;
  v32 = v53;
  static PredicateExpressions.build_contains<A, B>(_:_:)(v15, v13, v60, v53, v26, v28, v29, &protocol witness table for String);
  v33 = *(void (**)(char *, uint64_t))(v54 + 8);
  v34 = v32;
  v33(v13, v32);
  v35 = *(void (**)(char *, uint64_t))(v52 + 8);
  v35(v15, v31);
  v61 = v56;
  static PredicateExpressions.build_Arg<A>(_:)(&v61, v50);
  static PredicateExpressions.build_Arg<A>(_:)(v49, v6, v23);
  v36 = swift_getKeyPath(&unk_100234F80);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v9, v36, v6, v23);
  swift_release(v36);
  v48(v9, v6);
  v37 = v55;
  v38 = v60;
  static PredicateExpressions.build_contains<A, B>(_:_:)(v15, v13, v60, v34, v47, v46, v30, &protocol witness table for String);
  v33(v13, v34);
  v35(v15, v38);
  v39 = sub_100161BD0(&qword_100316E60);
  v40 = v59;
  v59[3] = v39;
  v40[4] = sub_1001BD534();
  sub_10016CA34(v40);
  sub_1001BD780((uint64_t)&unk_100316EA0);
  v41 = v51;
  v42 = v57;
  static PredicateExpressions.build_Disjunction<A, B>(lhs:rhs:)(v51, v37, v57, v57, v43, v43);
  v44 = *(void (**)(char *, uint64_t))(v58 + 8);
  v44(v37, v42);
  return ((uint64_t (*)(char *, uint64_t))v44)(v41, v42);
}

uint64_t sub_1001B9690()
{
  return sub_1001B96A8((uint64_t)&unk_100234F58);
}

uint64_t sub_1001B969C()
{
  return sub_1001B96A8((uint64_t)&unk_100234F80);
}

uint64_t sub_1001B96A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  v5 = v1;
  KeyPath = swift_getKeyPath(a1);
  sub_1001BDDEC((uint64_t)&unk_100316D88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v3);
  swift_release(KeyPath);
  sub_100194CA4();
  sub_1001BDDEC((uint64_t)&unk_100316BF0);
  sub_1001BDE64();
  sub_100176CDC();
  return v5;
}

id sub_1001B9764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  objc_class *v20;
  objc_class *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v35;
  uint64_t v36;
  Class v37;
  Class isa;
  uint64_t v39;
  id v40;
  char *v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[14];
  _QWORD v45[14];
  _QWORD v46[5];
  uint64_t v47;
  _QWORD v48[7];
  uint64_t v49;
  _QWORD v50[9];
  uint64_t v51;
  _QWORD v52[11];
  uint64_t v53;
  _QWORD v54[13];
  uint64_t v55;

  v0 = sub_100161BD0(&qword_100314C18);
  __chkstk_darwin(v0);
  v41 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001BB4D0((uint64_t)&v42);
  v39 = v43;
  v40 = v42;
  swift_bridgeObjectRetain(v43);
  sub_1001BD4C0(&v42, v2);
  sub_1001BB4D0((uint64_t)v44);
  sub_1001BD4C0(v44, v3);
  isa = Double._bridgeToObjectiveC()().super.super.isa;
  sub_1001BB4D0((uint64_t)v45);
  sub_1001BD4C0(v45, v4);
  v37 = Double._bridgeToObjectiveC()().super.super.isa;
  sub_1001BB4D0((uint64_t)v46);
  v5 = v47;
  v36 = v46[4];
  swift_bridgeObjectRetain(v47);
  sub_1001BD4C0(v46, v6);
  sub_1001BB4D0((uint64_t)v48);
  v35 = v48[6];
  v7 = v49;
  swift_bridgeObjectRetain(v49);
  sub_1001BD4C0(v48, v8);
  sub_1001BB4D0((uint64_t)v50);
  v9 = v50[8];
  v10 = v51;
  swift_bridgeObjectRetain(v51);
  sub_1001BD4C0(v50, v11);
  sub_1001BB4D0((uint64_t)v52);
  v12 = v52[10];
  v13 = v53;
  swift_bridgeObjectRetain(v53);
  sub_1001BD4C0(v52, v14);
  sub_1001BB4D0((uint64_t)v54);
  v16 = v54[12];
  v15 = v55;
  swift_bridgeObjectRetain(v55);
  sub_1001BD4C0(v54, v17);
  v18 = objc_allocWithZone((Class)GKAppMetadataArtwork);
  v40 = sub_10016B880((uint64_t)v40, v39, isa, v37, v36, v5, v35, v7, v9, v10, v12, v13, v16, v15);
  v19 = sub_1001B9690();
  isa = v20;
  v39 = v19;
  v21 = (objc_class *)sub_1001B969C();
  v36 = v22;
  v37 = v21;
  v35 = sub_1001BB364();
  v24 = v23;
  v25 = sub_1001BB410();
  v27 = v26;
  LOBYTE(v7) = sub_1001BB618();
  LOBYTE(v13) = sub_1001BB6C0();
  v28 = sub_1001BB864();
  v29 = (uint64_t)v41;
  sub_1001BBA40();
  v30 = sub_1001BBCB0();
  v32 = v31;
  v33 = objc_allocWithZone((Class)GKAppMetadata);
  return sub_1001BCB4C(v39, (uint64_t)isa, (uint64_t)v37, v36, v35, v24, v25, v27, v40, v7 & 1, v13 & 1, v28, v29, v30, v32);
}

uint64_t sub_1001B99D8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v0;
  KeyPath = swift_getKeyPath(&unk_100235098);
  sub_1001BD454((uint64_t)&unk_100316D88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_100235098);
  sub_1001BD454((uint64_t)&unk_100316BF0);
  sub_1001BD454((uint64_t)&qword_100315978);
  PersistentModel.getValue<A>(forKey:)(v3);
  return swift_release(v3);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppMetadataCache.insert(metadatas:)(Swift::OpaquePointer metadatas)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t rawValue;
  uint64_t v19;
  uint64_t v20;

  v3 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  sub_1001A1358();
  __chkstk_darwin(v4);
  sub_100163AD0();
  Date.init()();
  if (!((unint64_t)metadatas._rawValue >> 62))
  {
    v5 = *(_QWORD *)(((unint64_t)metadatas._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(metadatas._rawValue);
    if (v5)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease(metadatas._rawValue, v6);
    v16 = type metadata accessor for AppMetadataCache();
    sub_1001BD454((uint64_t)&unk_100316C18);
    ModelActor.modelContext.getter(v16, v17);
    dispatch thunk of ModelContext.save()();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v1, v20);
    sub_100165E88();
    return;
  }
  if ((uint64_t)metadatas._rawValue < 0)
    rawValue = (unint64_t)metadatas._rawValue;
  else
    rawValue = (unint64_t)metadatas._rawValue & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(metadatas._rawValue);
  v5 = _CocoaArrayWrapper.endIndex.getter(rawValue);
  if (!v5)
    goto LABEL_9;
LABEL_3:
  if (v5 >= 1)
  {
    v7 = 0;
    do
    {
      if (((unint64_t)metadatas._rawValue & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, metadatas._rawValue);
      else
        v8 = *((id *)metadatas._rawValue + v7 + 4);
      v9 = v8;
      ++v7;
      v10 = type metadata accessor for AppMetadataCache();
      sub_1001BD454((uint64_t)&unk_100316C18);
      v12 = ModelActor.modelContext.getter(v10, v11);
      v13 = sub_1001B9CD8(v1);
      v14 = sub_1001BCD70();
      sub_1001BD454((uint64_t)&unk_100316BF0);
      dispatch thunk of ModelContext.insert<A>(_:)(v13, v14, v15);
      swift_release(v13);
      swift_release(v12);

    }
    while (v5 != v7);
    goto LABEL_9;
  }
  __break(1u);
}

_QWORD *sub_1001B9CD8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[15];

  v65 = a1;
  v2 = sub_100161BD0(&qword_100314C18);
  __chkstk_darwin(v2);
  v66 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v63 = *(_QWORD *)(v4 - 8);
  v64 = v4;
  __chkstk_darwin(v4);
  v62 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(v1, "artwork");
  v7 = objc_msgSend(v6, "templateURL");

  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v60 = v8;

  v9 = objc_msgSend(v1, "artwork");
  v10 = objc_msgSend(v9, "width");

  objc_msgSend(v10, "doubleValue");
  v12 = v11;

  v13 = objc_msgSend(v1, "artwork");
  v14 = objc_msgSend(v13, "height");

  objc_msgSend(v14, "doubleValue");
  v16 = v15;

  v17 = sub_1001BD28C(objc_msgSend(v1, "artwork"), (SEL *)&selRef_textColor1);
  v19 = v18;
  v20 = sub_1001BD28C(objc_msgSend(v1, "artwork"), (SEL *)&selRef_textColor2);
  v22 = v21;
  v23 = sub_1001BD28C(objc_msgSend(v1, "artwork"), (SEL *)&selRef_textColor3);
  v25 = v24;
  v26 = sub_1001BD28C(objc_msgSend(v1, "artwork"), (SEL *)&selRef_textColor4);
  v28 = v27;
  v29 = sub_1001BD28C(objc_msgSend(v1, "artwork"), (SEL *)&selRef_backgroundColor);
  v67[0] = v61;
  v67[1] = v60;
  v67[2] = v12;
  v67[3] = v16;
  v67[4] = v17;
  v67[5] = v19;
  v67[6] = v20;
  v67[7] = v22;
  v67[8] = v23;
  v67[9] = v25;
  v67[10] = v26;
  v67[11] = v28;
  v67[12] = v29;
  v67[13] = v30;
  v31 = objc_msgSend(v1, "bundleID");
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v60 = v32;

  v33 = objc_msgSend(v1, "adamID");
  v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v58 = v34;

  v35 = objc_msgSend(v1, "name");
  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v56 = v36;

  v37 = objc_msgSend(v1, "shortName");
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  v41 = objc_msgSend(v1, "supportsArcade");
  v42 = objc_msgSend(v1, "supportsGameController");
  v43 = objc_msgSend(v1, "deviceFamilies");
  v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, &type metadata for String);

  v45 = (uint64_t)v62;
  v46 = v64;
  (*(void (**)(void))(v63 + 16))();
  v47 = objc_msgSend(v1, "latestVersionReleaseDate");
  if (v47)
  {
    v48 = v47;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v47);

    v49 = 0;
  }
  else
  {
    v49 = 1;
  }
  v50 = v66;
  sub_100161B54(v66, v49, 1, v46);
  v51 = sub_1001BD2F4(v1);
  v53 = v52;
  v54 = type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
  swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
  return sub_1001BBF38(v61, v60, v59, v58, v57, v56, v38, v40, v67, v41, v42, v44, v45, v50, v51, v53);
}

uint64_t AppMetadataCache.deleteAll()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = v0;
  v2 = sub_100161BD0(&qword_100316C00);
  v1[3] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AppMetadataCache();
  v1[4] = v3;
  sub_1001BD454((uint64_t)&unk_100316C28);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, v4);
  return swift_task_switch(sub_1001BA218, v5, v6);
}

uint64_t sub_1001BA218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  sub_1001BD454((uint64_t)&unk_100316C18);
  v4 = v3;
  v5 = ModelActor.modelContext.getter(v1, v3);
  v6 = type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
  v7 = sub_100161BD0(&qword_100316C10);
  sub_100161B54(v2, 1, 1, v7);
  sub_1001BD454((uint64_t)&unk_100316BF0);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v6, v2, 1, v6, v8);
  sub_10016CBEC(v2, &qword_100316C00);
  swift_release(v5);
  v9 = ModelActor.modelContext.getter(*(_QWORD *)(v0 + 32), v4);
  dispatch thunk of ModelContext.save()();
  swift_release(v9);
  swift_task_dealloc(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BA3B4(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_100316C24;
  swift_retain(a2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1001BA414;
  return AppMetadataCache.deleteAll()();
}

uint64_t sub_1001BA414()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  swift_task_dealloc(v2);
  sub_100176CDC();
  v4 = *(_QWORD *)(v3 + 24);
  if (v0)
  {
    v5 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 16))(*(_QWORD *)(v3 + 24), 0);
  }
  _Block_release(*(const void **)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void AppMetadataCache.__allocating_init(modelContainer:)(uint64_t a1)
{
  uint64_t v1;

  swift_allocObject(v1, 40, 7);
  AppMetadataCache.init(modelContainer:)(a1);
  sub_10016219C();
}

uint64_t type metadata accessor for AppMetadataCache()
{
  return objc_opt_self(GKAppMetadataCache);
}

void AppMetadataCache.init(modelContainer:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_super v10;

  v2 = v1;
  v4 = type metadata accessor for ModelContext(0);
  sub_100165ED4(v4);
  swift_retain(v1);
  v5 = swift_retain(a1);
  v6 = ModelContext.init(_:)(v5);
  v7 = type metadata accessor for DefaultSerialModelExecutor(0);
  sub_100165ED4(v7);
  v8 = DefaultSerialModelExecutor.init(modelContext:)(v6);
  sub_1001BD454((uint64_t)&unk_100315B20);
  v2[2] = v8;
  v2[3] = v9;
  v2[4] = a1;
  swift_retain(a1);
  swift_release(v2);
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for AppMetadataCache();
  objc_msgSendSuper2(&v10, "init");
  sub_100176CDC();
  sub_100162698();
}

uint64_t sub_1001BA5D4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1001B927C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void AppMetadataCache.init()(uint64_t a1, uint64_t a2)
{
  sub_1001BDE40((uint64_t)"GameDaemonCore.AppMetadataCache", a2, (uint64_t)"init()");
  __break(1u);
}

uint64_t AppMetadataCache.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t AppMetadataCache.__deallocating_deinit()
{
  uint64_t v0;

  AppMetadataCache.deinit();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_1001BA64C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AppMetadataCache();
  sub_1001BD454((uint64_t)&unk_100316C18);
  return ModelActor.unownedExecutor.getter(v0, v1);
}

void sub_1001BA690(uint64_t a1, unint64_t a2, double a3)
{
  AppMetadataCache.fetch(bundleIDs:adamIDs:ttl:)(a1, a2, a3);
}

void sub_1001BA6A4(Swift::OpaquePointer a1)
{
  AppMetadataCache.insert(metadatas:)(a1);
}

uint64_t sub_1001BA6B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = sub_100161BD0(&qword_100315CD8);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100232EF0;
  v2 = sub_1001BD0BC();
  *(_QWORD *)(v1 + 32) = &type metadata for AppMetadataSchemaV1;
  *(_QWORD *)(v1 + 40) = v2;
  return v1;
}

uint64_t sub_1001BA710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100161BD0(&qword_100315998);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100232EF0;
  v2 = type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
  sub_1001BD454((uint64_t)&unk_100316BF0);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  return v1;
}

uint64_t sub_1001BA784(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  char v23;
  uint64_t v24;

  if (a1 == 0x6574616C706D6574 && a2 == 0xEB000000004C5255)
  {
    v5 = 0xEB000000004C5255;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574616C706D6574, 0xEB000000004C5255, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5, a2);
    return 0;
  }
  if (a1 == 0x6874646977 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6874646977, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8, a2);
    return 1;
  }
  if (a1 == 0x746867696568 && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746867696568, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10, a2);
    return 2;
  }
  if (a1 == 0x6F6C6F4374786574 && a2 == 0xEA00000000003172)
  {
    v12 = 0xEA00000000003172;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6C6F4374786574, 0xEA00000000003172, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12, a2);
    return 3;
  }
  v13 = 0xEA00000000003272;
  if (a1 == 0x6F6C6F4374786574 && a2 == 0xEA00000000003272)
  {
    v15 = 0xEA00000000003272;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6C6F4374786574, 0xEA00000000003272, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v15, v13);
    return 4;
  }
  v16 = 0xEA00000000003372;
  if (a1 == 0x6F6C6F4374786574 && a2 == 0xEA00000000003372)
  {
    v18 = 0xEA00000000003372;
    goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6C6F4374786574, 0xEA00000000003372, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v18, v16);
    return 5;
  }
  v19 = 0xEA00000000003472;
  if (a1 == 0x6F6C6F4374786574 && a2 == 0xEA00000000003472)
  {
    v21 = 0xEA00000000003472;
    goto LABEL_56;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6C6F4374786574, 0xEA00000000003472, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
LABEL_56:
    swift_bridgeObjectRelease(v21, v19);
    return 6;
  }
  if (a1 == 0x756F72676B636162 && a2 == 0xEF726F6C6F43646ELL)
  {
    swift_bridgeObjectRelease(0xEF726F6C6F43646ELL, v19);
    return 7;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(0x756F72676B636162, 0xEF726F6C6F43646ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2, v24);
    if ((v23 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_1001BAAB4()
{
  return 8;
}

uint64_t sub_1001BAABC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001BAAF8 + 4 * byte_100234C00[a1]))(0x6574616C706D6574, 0xEB000000004C5255);
}

uint64_t sub_1001BAAF8()
{
  return 0x6874646977;
}

uint64_t sub_1001BAB0C()
{
  return 0x746867696568;
}

uint64_t sub_1001BAB20()
{
  return 0x6F6C6F4374786574;
}

uint64_t sub_1001BAB3C()
{
  return 0x6F6C6F4374786574;
}

uint64_t sub_1001BAB5C()
{
  return 0x6F6C6F4374786574;
}

uint64_t sub_1001BAB7C()
{
  return 0x6F6C6F4374786574;
}

uint64_t sub_1001BAB9C()
{
  return 0x756F72676B636162;
}

uint64_t sub_1001BABC0(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v3 = v1;
  v5 = sub_100161BD0(&qword_100316EC0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100163928(a1, v9);
  v11 = sub_1001BDB9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys, &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((_QWORD *)v3 + 1);
  v35 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)&v12, v13, &v35, v5);
  if (!v2)
  {
    v14 = v3[2];
    v34 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v34, v5, v14);
    v15 = v3[3];
    v33 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v33, v5, v15);
    v16 = *((_QWORD *)v3 + 4);
    v17 = *((_QWORD *)v3 + 5);
    v32 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v32, v5);
    v18 = *((_QWORD *)v3 + 6);
    v19 = *((_QWORD *)v3 + 7);
    v31 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v31, v5);
    v20 = *((_QWORD *)v3 + 8);
    v21 = *((_QWORD *)v3 + 9);
    v30 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v30, v5);
    v22 = *((_QWORD *)v3 + 10);
    v23 = *((_QWORD *)v3 + 11);
    v29 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v29, v5);
    v24 = *((_QWORD *)v3 + 12);
    v25 = *((_QWORD *)v3 + 13);
    v28 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v28, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001BADC4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v5 = sub_100161BD0(&qword_100316EB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100163928(a1, v9);
  v11 = sub_1001BDB9C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys, &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100161FE0(a1);
  v57 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v5);
  v14 = v13;
  v56 = 1;
  swift_bridgeObjectRetain(v13);
  KeyedDecodingContainer.decode(_:forKey:)(&v56, v5);
  v16 = v15;
  v55 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v55, v5);
  v18 = v17;
  v54 = 3;
  v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v5);
  v46 = v12;
  v53 = 4;
  v49 = v19;
  swift_bridgeObjectRetain(v19);
  v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v53, v5);
  v48 = v21;
  v44 = v20;
  v52 = 5;
  swift_bridgeObjectRetain(v21);
  v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v5);
  v51 = 6;
  v47 = v22;
  swift_bridgeObjectRetain(v22);
  v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v5);
  v42 = v23;
  v50 = 7;
  swift_bridgeObjectRetain(v23);
  v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v5);
  v26 = v25;
  v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  v28 = v24;
  v27(v8, v5);
  swift_bridgeObjectRetain(v26);
  sub_100161FE0(a1);
  swift_bridgeObjectRelease(v26, v29);
  v30 = v42;
  swift_bridgeObjectRelease(v42, v31);
  v32 = v47;
  swift_bridgeObjectRelease(v47, v33);
  v34 = v48;
  swift_bridgeObjectRelease(v48, v35);
  v36 = v49;
  swift_bridgeObjectRelease(v49, v37);
  result = swift_bridgeObjectRelease(v14, v38);
  *a2 = v46;
  a2[1] = v14;
  a2[2] = v16;
  a2[3] = v18;
  a2[4] = v45;
  a2[5] = v36;
  a2[6] = v44;
  a2[7] = v34;
  a2[8] = v43;
  a2[9] = v32;
  a2[10] = v41;
  a2[11] = v30;
  a2[12] = v28;
  a2[13] = v26;
  return result;
}

uint64_t sub_1001BB22C()
{
  unsigned __int8 *v0;

  return sub_1001BAABC(*v0);
}

uint64_t sub_1001BB234@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001BA784(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BB258@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1001BAAB4();
  *a1 = result;
  return result;
}

uint64_t sub_1001BB27C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BDB9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BB2A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BDB9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1001BB2CC@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  uint64_t v5[14];

  result = (void *)sub_1001BADC4(a1, v5);
  if (!v2)
    return memcpy(a2, v5, 0x70uLL);
  return result;
}

uint64_t sub_1001BB314(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[112];

  memcpy(v4, v1, sizeof(v4));
  return sub_1001BABC0(a1);
}

uint64_t sub_1001BB364()
{
  return sub_1001B96A8((uint64_t)&unk_100234FA8);
}

uint64_t sub_1001BB370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  sub_1001923C0(a3, (uint64_t)v11);
  v5 = v12;
  v6 = v13;
  sub_100163928(v11, v12);
  v7 = sub_100194CA4();
  v10[0] = a1;
  v10[1] = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v7, v10, &type metadata for String, &protocol witness table for String, v5, v6);
  swift_bridgeObjectRelease(a2, v8);
  sub_100176CDC();
  return sub_100161FE0(v11);
}

uint64_t sub_1001BB410()
{
  return sub_1001B96A8((uint64_t)&unk_100234FD0);
}

uint64_t sub_1001BB41C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;
  _BYTE __dst[112];
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  sub_1001923C0(a2, (uint64_t)v10);
  v3 = v11;
  v4 = v12;
  sub_100163928(v10, v11);
  KeyPath = swift_getKeyPath(&unk_100234FF8);
  memcpy(__dst, a1, sizeof(__dst));
  v6 = sub_1001BD484();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, __dst, &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork, v6, v3, v4);
  swift_release(KeyPath);
  sub_1001BD4C0(a1, v7);
  return sub_100161FE0(v10);
}

__n128 sub_1001BB4D0@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  __n128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v13[0] = v1;
  KeyPath = swift_getKeyPath(&unk_100234FF8);
  sub_1001BD454((uint64_t)&unk_100316D88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v13, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_100234FF8);
  sub_1001BD454((uint64_t)&unk_100316BF0);
  sub_1001BD080();
  PersistentModel.getValue<A>(forKey:)(v5);
  swift_release(v5);
  v6 = v13[1];
  result = v14;
  v8 = v15;
  v9 = v16;
  v10 = v17;
  v11 = v18;
  v12 = v19;
  *(_QWORD *)a1 = v13[0];
  *(_QWORD *)(a1 + 8) = v6;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 96) = v12;
  return result;
}

void *sub_1001BB5D8@<X0>(void *a1@<X8>)
{
  _BYTE v3[112];

  sub_1001BB4D0((uint64_t)v3);
  return memcpy(a1, v3, 0x70uLL);
}

uint64_t sub_1001BB618()
{
  return sub_1001BB6CC((uint64_t)&unk_100235020);
}

uint64_t sub_1001BB624(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  sub_1001923C0(a2, (uint64_t)v8);
  v3 = v9;
  v4 = v10;
  sub_100163928(v8, v9);
  v5 = sub_100194CA4();
  v7 = a1;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v5, &v7, &type metadata for Bool, &protocol witness table for Bool, v3, v4);
  sub_100176CDC();
  return sub_100161FE0(v8);
}

uint64_t sub_1001BB6C0()
{
  return sub_1001BB6CC((uint64_t)&unk_100235048);
}

uint64_t sub_1001BB6CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v1;
  KeyPath = swift_getKeyPath(a1);
  sub_1001BDDEC((uint64_t)&unk_100316D88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v3);
  swift_release(KeyPath);
  sub_100194CA4();
  sub_1001BDDEC((uint64_t)&unk_100316BF0);
  sub_1001BDE64();
  sub_100176CDC();
  return v5;
}

uint64_t sub_1001BB788(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  sub_1001923C0(a2, (uint64_t)v11);
  v3 = v12;
  v4 = v13;
  sub_100163928(v11, v12);
  KeyPath = swift_getKeyPath(&unk_100235070);
  v10 = a1;
  v6 = sub_100161BD0(&qword_1003159A0);
  sub_1001BD6B8((uint64_t)&unk_100316E08);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v10, v6, v7, v3, v4);
  swift_bridgeObjectRelease(a1, v8);
  swift_release(KeyPath);
  return sub_100161FE0(v11);
}

uint64_t sub_1001BB864()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v0;
  KeyPath = swift_getKeyPath(&unk_100235070);
  sub_1001BD454((uint64_t)&unk_100316D88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_100235070);
  sub_1001BD454((uint64_t)&unk_100316BF0);
  sub_1001BD6B8((uint64_t)&unk_100316DC0);
  PersistentModel.getValue<A>(forKey:)(v3);
  swift_release(v3);
  return v5;
}

uint64_t sub_1001BB96C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  sub_1001923C0(a2, (uint64_t)v9);
  v3 = v10;
  v4 = v11;
  sub_100163928(v9, v10);
  KeyPath = swift_getKeyPath(&unk_100235098);
  v6 = type metadata accessor for Date(0);
  sub_1001BD454((uint64_t)&qword_100315C30);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, a1, v6, v7, v3, v4);
  swift_release(KeyPath);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return sub_100161FE0(v9);
}

uint64_t sub_1001BBA40()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v0;
  KeyPath = swift_getKeyPath(&unk_1002350C0);
  sub_1001BD454((uint64_t)&unk_100316D88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1002350C0);
  sub_1001BD454((uint64_t)&unk_100316BF0);
  sub_1001BD3D0((uint64_t)&unk_100316DB8);
  PersistentModel.getValue<A>(forKey:)(v3);
  return swift_release(v3);
}

void sub_1001BBB48(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  KeyPath = swift_getKeyPath(&unk_1002350C0);
  v6 = v1;
  v7 = a1;
  sub_1001BD454((uint64_t)&unk_100316D88);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1001BD3B8, &v5, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  sub_10016CBEC(a1, &qword_100314C18);
}

uint64_t sub_1001BBC00(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1002350C0);
  sub_1001BD454((uint64_t)&unk_100316BF0);
  v5 = v4;
  v6 = sub_1001BD3D0((uint64_t)&unk_100316E00);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, a2, v5, v6);
  return swift_release(KeyPath);
}

uint64_t sub_1001BBCB0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v0;
  KeyPath = swift_getKeyPath(&unk_1002350E8);
  sub_1001BD454((uint64_t)&unk_100316D88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1002350E8);
  sub_1001BD454((uint64_t)&unk_100316BF0);
  sub_1001BD6B8((uint64_t)&unk_100316DB0);
  PersistentModel.getValue<A>(forKey:)(v3);
  swift_release(v3);
  return v5;
}

uint64_t sub_1001BBDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  KeyPath = swift_getKeyPath(&unk_1002350E8);
  v10 = v2;
  v11 = a1;
  v12 = a2;
  sub_1001BD454((uint64_t)&unk_100316D88);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, sub_1001BD39C, &v9, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(a2, v7);
}

uint64_t sub_1001BBE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  KeyPath = swift_getKeyPath(&unk_1002350E8);
  v10[0] = a2;
  v10[1] = a3;
  sub_1001BD454((uint64_t)&unk_100316BF0);
  v7 = v6;
  sub_1001BD6B8((uint64_t)&unk_100316DF8);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v10, v7, v8);
  return swift_release(KeyPath);
}

_QWORD *sub_1001BBF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, unsigned __int8 a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[5];

  v17 = v16;
  v42 = a8;
  v40 = a7;
  v37 = a5;
  v38 = a6;
  v35 = a3;
  v36 = a4;
  v47 = a15;
  v48 = a16;
  v45 = a13;
  v46 = a14;
  v44 = a12;
  v43 = a11;
  v41 = a10;
  v39 = a9;
  v20 = *v16;
  v21 = sub_100161BD0(&qword_100314C18);
  __chkstk_darwin(v21);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v34 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[6] = sub_100161BD0(&qword_100316DD8);
  sub_1001BD454((uint64_t)&unk_100316BF0);
  v29 = v28;
  v49[0] = v20;
  v49[1] = v20;
  v49[2] = v28;
  v49[3] = v28;
  v17[7] = swift_getOpaqueTypeConformance2(v49, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10016CA34(v17 + 3);
  v30 = static PersistentModel.createBackingData<A>()(v20, v20, v29, v29);
  *((_WORD *)v17 + 8) = 257;
  ObservationRegistrar.init()(v30);
  sub_1001BB370(a1, a2, (uint64_t)(v17 + 3));
  sub_1001BB370(v35, v36, (uint64_t)(v17 + 3));
  sub_1001BB370(v37, v38, (uint64_t)(v17 + 3));
  sub_1001BB370(v40, v42, (uint64_t)(v17 + 3));
  sub_1001BB41C(v39, (uint64_t)(v17 + 3));
  sub_1001BB624(v41, (uint64_t)(v17 + 3));
  sub_1001BB624(v43, (uint64_t)(v17 + 3));
  sub_1001BB788(v44, (uint64_t)(v17 + 3));
  v31 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, v45, v24);
  sub_1001BB96C((uint64_t)v27, (uint64_t)(v17 + 3));
  v32 = v46;
  sub_1001BD354(v46, (uint64_t)v23);
  sub_1001BBB48((uint64_t)v23);
  sub_1001BBDB8(v47, v48);
  sub_10016CBEC(v32, &qword_100314C18);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v31, v24);
  return v17;
}

uint64_t sub_1001BC1FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 24;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1001923C0(v3, a1);
}

uint64_t sub_1001BC244(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + 24);
  swift_beginAccess(v3, v5, 33, 0);
  sub_100161FE0(v3);
  sub_10016C8B0(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t sub_1001BC29C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;

  v0 = sub_100161BD0(&qword_100315990);
  v1 = type metadata accessor for Schema.PropertyMetadata(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ 11 * *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100234BF0;
  KeyPath = swift_getKeyPath(&unk_100234F58);
  v24 = 0u;
  v25 = 0u;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x4449656C646E7562, 0xE800000000000000, KeyPath, &v24, &v21);
  v4 = swift_getKeyPath(&unk_100234F80);
  v24 = 0u;
  v25 = 0u;
  v5 = sub_100161BD0(&qword_100316DA0);
  v6 = type metadata accessor for Schema.Attribute.Option(0);
  v7 = swift_allocObject(v5, ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100232EF0;
  static Schema.Attribute.Option.unique.getter();
  v8 = type metadata accessor for Schema.Attribute(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = Schema.Attribute.init(_:originalName:hashModifier:)(v7, 0, 0, 0, 0);
  *((_QWORD *)&v22 + 1) = v8;
  sub_1001BD454((uint64_t)&unk_100316DA8);
  v23 = v10;
  *(_QWORD *)&v21 = v9;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x44496D616461, 0xE600000000000000, v4, &v24, &v21);
  v11 = swift_getKeyPath(&unk_100234FA8);
  v24 = 0u;
  v25 = 0u;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1701667182, 0xE400000000000000, v11, &v24, &v21);
  v12 = swift_getKeyPath(&unk_100234FD0);
  v24 = 0u;
  v25 = 0u;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6D614E74726F6873, 0xE900000000000065, v12, &v24, &v21);
  v13 = swift_getKeyPath(&unk_100234FF8);
  v24 = 0u;
  v25 = 0u;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6B726F77747261, 0xE700000000000000, v13, &v24, &v21);
  v14 = swift_getKeyPath(&unk_100235020);
  v24 = 0u;
  v25 = 0u;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x7374726F70707573, 0xEE00656461637241, v14, &v24, &v21);
  v15 = swift_getKeyPath(&unk_100235048);
  v24 = 0u;
  v25 = 0u;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000016, 0x8000000100297870, v15, &v24, &v21);
  v16 = swift_getKeyPath(&unk_100235070);
  v24 = 0u;
  v25 = 0u;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6146656369766564, 0xEE007365696C696DLL, v16, &v24, &v21);
  v17 = swift_getKeyPath(&unk_100235098);
  v24 = 0u;
  v25 = 0u;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x69646F4D7473616CLL, 0xEC00000064656966, v17, &v24, &v21);
  v18 = swift_getKeyPath(&unk_1002350C0);
  v24 = 0u;
  v25 = 0u;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000018, 0x800000010029B0B0, v18, &v24, &v21);
  v19 = swift_getKeyPath(&unk_1002350E8);
  v24 = 0u;
  v25 = 0u;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0xD000000000000010, 0x80000001002978B0, v19, &v24, &v21);
  return v2;
}

_QWORD *sub_1001BC73C(_QWORD *a1)
{
  uint64_t v1;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return sub_1001BC774(a1);
}

_QWORD *sub_1001BC774(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = *v1;
  v2[6] = sub_100161BD0(&qword_100316DD8);
  sub_1001BD454((uint64_t)&unk_100316BF0);
  v6 = v5;
  *(_QWORD *)&v10 = v4;
  *((_QWORD *)&v10 + 1) = v4;
  v11 = v5;
  v12 = v5;
  v2[7] = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10016CA34(v2 + 3);
  v7 = static PersistentModel.createBackingData<A>()(v4, v4, v6, v6);
  *((_WORD *)v2 + 8) = 257;
  ObservationRegistrar.init()(v7);
  *((_WORD *)v2 + 8) = 0;
  sub_1001923C0((uint64_t)a1, (uint64_t)&v10);
  swift_beginAccess(v2 + 3, v9, 33, 0);
  sub_100161FE0(v2 + 3);
  sub_10016C8B0(&v10, (uint64_t)(v2 + 3));
  swift_endAccess(v9);
  sub_100161FE0(a1);
  return v2;
}

uint64_t sub_1001BC88C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100161FE0(v0 + 3);
  v1 = (char *)v0
     + OBJC_IVAR____TtCV14GameDaemonCoreP33_9DC203CAEB983F42B18FE72770C1F80719AppMetadataSchemaV111AppMetadata___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

Swift::Int sub_1001BC8E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  sub_1001BD454((uint64_t)&unk_100316D90);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

void (*sub_1001BC96C(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_1001BC1FC((uint64_t)v3);
  return sub_1001BC9B8;
}

void sub_1001BC9B8(uint64_t *a1, char a2)
{
  uint64_t v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_1001923C0(*a1, v2 + 40);
    sub_1001BC244((__int128 *)(v2 + 40));
    sub_100161FE0((_QWORD *)v2);
  }
  else
  {
    sub_1001BC244((__int128 *)*a1);
  }
  free((void *)v2);
}

Swift::Int sub_1001BCA1C()
{
  return sub_1001BC8E8();
}

uint64_t sub_1001BCA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1001BD454((uint64_t)&unk_100316BF0);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_1001BCA98(uint64_t a1)
{
  uint64_t v2;

  sub_1001BD454((uint64_t)&unk_100316BF0);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_1001BCAF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *a2;
  sub_1001BD454((uint64_t)&unk_100316BF0);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

id sub_1001BCB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19;
  NSString v20;
  uint64_t v21;
  NSString v22;
  uint64_t v23;
  NSString v24;
  uint64_t v25;
  NSArray v26;
  uint64_t v27;
  uint64_t v28;
  Class isa;
  NSString v30;
  uint64_t v31;
  id v32;
  uint64_t v34;
  NSString v35;
  void *v36;

  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v19);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4, v21);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6, v23);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a8, v25);
  v26.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a12, v27);
  v28 = type metadata accessor for Date(0);
  isa = 0;
  if (sub_10016445C(a13, 1, v28) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(a13, v28);
  }
  if (a15)
  {
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a15, v31);
  }
  else
  {
    v30 = 0;
  }
  LOBYTE(v34) = a11 & 1;
  v32 = objc_msgSend(v36, "initWithBundleID:adamID:name:shortName:artwork:supportsArcade:supportsGameController:deviceFamilies:latestVersionReleaseDate:genreDisplayName:", v35, v20, v22, v24, a9, a10 & 1, v34, v26.super.isa, isa, v30);

  return v32;
}

void sub_1001BCD08(uint64_t a1)
{
  uint64_t v2;

  sub_1001BD454((uint64_t)&unk_100316C28);
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_1001BCD44()
{
  sub_1001BD454((uint64_t)&unk_100316C28);
}

uint64_t sub_1001BCD70()
{
  return type metadata accessor for AppMetadataSchemaV1.AppMetadata(0);
}

uint64_t sub_1001BCD78(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = (char *)&value witness table for () + 64;
  v4[7] = (char *)&value witness table for () + 64;
  v4[8] = (char *)&value witness table for () + 64;
  v4[9] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[10] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[11] = "(";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[12] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1.AppMetadata._SwiftDataNoType()
{
  return &type metadata for AppMetadataSchemaV1.AppMetadata._SwiftDataNoType;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1()
{
  return &type metadata for AppMetadataSchemaV1;
}

ValueMetadata *type metadata accessor for AppMetadataMigrationPlan()
{
  return &type metadata for AppMetadataMigrationPlan;
}

void sub_1001BCE4C()
{
  sub_1001BD454((uint64_t)&unk_100316D78);
}

void sub_1001BCE7C()
{
  sub_1001BD454((uint64_t)&unk_100316D80);
}

void sub_1001BCEAC()
{
  sub_1001BD454((uint64_t)&unk_100316D88);
}

void sub_1001BCEDC()
{
  sub_1001BD454((uint64_t)&unk_100316D90);
}

void sub_1001BCF0C()
{
  sub_1001BD454((uint64_t)&unk_100316D98);
}

void sub_1001BCF3C()
{
  uint64_t *v0;
  uint64_t v1;

  sub_1001BDDF8();
  *v0 = sub_1001B9690();
  v0[1] = v1;
  sub_10016219C();
}

void sub_1001BCF5C()
{
  uint64_t *v0;
  uint64_t v1;

  sub_1001BDDF8();
  *v0 = sub_1001B969C();
  v0[1] = v1;
  sub_10016219C();
}

void sub_1001BCF7C()
{
  uint64_t *v0;
  uint64_t v1;

  sub_1001BDDF8();
  *v0 = sub_1001BB364();
  v0[1] = v1;
  sub_10016219C();
}

void sub_1001BCF9C()
{
  uint64_t *v0;
  uint64_t v1;

  sub_1001BDDF8();
  *v0 = sub_1001BB410();
  v0[1] = v1;
  sub_10016219C();
}

void sub_1001BCFC0()
{
  _BYTE *v0;

  sub_1001BDDF8();
  *v0 = sub_1001BB618() & 1;
  sub_10016219C();
}

void sub_1001BCFE4()
{
  _BYTE *v0;

  sub_1001BDDF8();
  *v0 = sub_1001BB6C0() & 1;
  sub_10016219C();
}

void sub_1001BD008()
{
  uint64_t *v0;

  sub_1001BDDF8();
  *v0 = sub_1001BB864();
  sub_10016219C();
}

void sub_1001BD028()
{
  sub_1001B99D8();
  sub_10016219C();
}

void sub_1001BD044()
{
  sub_1001BBA40();
  sub_10016219C();
}

void sub_1001BD060()
{
  uint64_t *v0;
  uint64_t v1;

  sub_1001BDDF8();
  *v0 = sub_1001BBCB0();
  v0[1] = v1;
  sub_10016219C();
}

unint64_t sub_1001BD080()
{
  unint64_t result;

  result = qword_100316DC8;
  if (!qword_100316DC8)
  {
    result = swift_getWitnessTable(&unk_100235200, &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork);
    atomic_store(result, (unint64_t *)&qword_100316DC8);
  }
  return result;
}

unint64_t sub_1001BD0BC()
{
  unint64_t result;

  result = qword_100316DD0;
  if (!qword_100316DD0)
  {
    result = swift_getWitnessTable(&unk_100234DDC, &type metadata for AppMetadataSchemaV1);
    atomic_store(result, (unint64_t *)&qword_100316DD0);
  }
  return result;
}

uint64_t sub_1001BD0F8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001BD124()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_100316DE4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1001A2094;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_100316DE0 + dword_100316DE0))(v2, v3);
}

id sub_1001BD188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  NSString v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  id v19;

  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v14);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4, v16);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6, v18);
  v19 = objc_msgSend(a8, "gameCenterCacheDatabaseURLForPlayerID:language:name:fileManager:", v13, v15, v17, a7);

  return v19;
}

unint64_t sub_1001BD250()
{
  unint64_t result;

  result = qword_100316DF0;
  if (!qword_100316DF0)
  {
    result = swift_getWitnessTable(&unk_1002351C0, &type metadata for AppMetadataCache.AppMetadataCacheError);
    atomic_store(result, (unint64_t *)&qword_100316DF0);
  }
  return result;
}

uint64_t sub_1001BD28C(void *a1, SEL *a2)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(a1, *a2);

  if (!v3)
    return 0;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

uint64_t sub_1001BD2F4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "genreDisplayName");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_1001BD354(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100161BD0(&qword_100314C18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BD39C()
{
  uint64_t *v0;

  return sub_1001BBE78(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001BD3B8()
{
  uint64_t v0;

  return sub_1001BBC00(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1001BD3D0(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1001BDE70(a1);
  if (!result)
  {
    v5 = v4;
    v6 = v3;
    v7 = sub_100161C54(&qword_100314C18);
    sub_1001BD454(v6);
    result = swift_getWitnessTable(v5, v7);
    atomic_store(result, v1);
  }
  return result;
}

void sub_1001BD454(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  if (!sub_1001BDE70(a1))
  {
    v4 = v3(v2);
    atomic_store(sub_100194C44(v4), v1);
  }
  sub_10016219C();
}

unint64_t sub_1001BD484()
{
  unint64_t result;

  result = qword_100316E10;
  if (!qword_100316E10)
  {
    result = swift_getWitnessTable(&unk_100235198, &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork);
    atomic_store(result, (unint64_t *)&qword_100316E10);
  }
  return result;
}

_QWORD *sub_1001BD4C0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  swift_bridgeObjectRelease(a1[1], a2);
  swift_bridgeObjectRelease(v3, v8);
  swift_bridgeObjectRelease(v4, v9);
  swift_bridgeObjectRelease(v5, v10);
  swift_bridgeObjectRelease(v6, v11);
  swift_bridgeObjectRelease(v7, v12);
  return a1;
}

unint64_t sub_1001BD534()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316E68;
  if (!qword_100316E68)
  {
    v1 = sub_100161C54(&qword_100316E60);
    sub_1001BD598();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Disjunction<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316E68);
  }
  return result;
}

unint64_t sub_1001BD598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316E70;
  if (!qword_100316E70)
  {
    v1 = sub_100161C54(&qword_100316E30);
    sub_1001BD604();
    sub_1001BD704();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.SequenceContains<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316E70);
  }
  return result;
}

unint64_t sub_1001BD604()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316E78;
  if (!qword_100316E78)
  {
    v1 = sub_100161C54(&qword_100316E28);
    sub_1001BD6B8((uint64_t)&unk_100316E80);
    sub_1001BD6B8((uint64_t)&unk_100316E88);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100316E78);
  }
  return result;
}

void sub_1001BD6B8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!sub_1001BDE70(a1))
  {
    v4 = v3;
    v5 = sub_100161C54(v2);
    atomic_store(swift_getWitnessTable(v4, v5), v1);
  }
  sub_100162698();
}

unint64_t sub_1001BD704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316E90;
  if (!qword_100316E90)
  {
    v1 = sub_100161C54(&qword_100316E20);
    sub_1001BD780((uint64_t)&unk_100316E98);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316E90);
  }
  return result;
}

void sub_1001BD780(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  if (!sub_1001BDE70(a1))
  {
    v3 = sub_100161C54(v2);
    atomic_store(sub_100194C44(v3), v1);
  }
  sub_10016219C();
}

uint64_t storeEnumTagSinglePayload for AppMetadataCache.AppMetadataCacheError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001BD7F0 + 4 * byte_100234C08[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001BD810 + 4 * byte_100234C0D[v4]))();
}

_BYTE *sub_1001BD7F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001BD810(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001BD818(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001BD820(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001BD828(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001BD830(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataCache.AppMetadataCacheError()
{
  return &type metadata for AppMetadataCache.AppMetadataCacheError;
}

uint64_t destroy for AppMetadataSchemaV1.AppMetadata.Artwork(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[1], a2);
  swift_bridgeObjectRelease(a1[5], v3);
  swift_bridgeObjectRelease(a1[7], v4);
  swift_bridgeObjectRelease(a1[9], v5);
  swift_bridgeObjectRelease(a1[11], v6);
  return swift_bridgeObjectRelease(a1[13], v7);
}

uint64_t initializeWithCopy for AppMetadataSchemaV1.AppMetadata.Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

_QWORD *assignWithCopy for AppMetadataSchemaV1.AppMetadata.Artwork(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v7 = a2[5];
  v8 = a1[5];
  a1[5] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8, v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11, v12);
  a1[8] = a2[8];
  v13 = a2[9];
  v14 = a1[9];
  a1[9] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14, v15);
  a1[10] = a2[10];
  v16 = a2[11];
  v17 = a1[11];
  a1[11] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17, v18);
  a1[12] = a2[12];
  v19 = a2[13];
  v20 = a1[13];
  a1[13] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20, v21);
  return a1;
}

uint64_t assignWithTake for AppMetadataSchemaV1.AppMetadata.Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5, a2);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7, v8);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRelease(v10, v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13, v14);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v15;
  swift_bridgeObjectRelease(v16, v17);
  v18 = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v18;
  swift_bridgeObjectRelease(v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1.AppMetadata.Artwork()
{
  return &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork;
}

unint64_t sub_1001BDB60()
{
  unint64_t result;

  result = qword_100316EA8;
  if (!qword_100316EA8)
  {
    result = swift_getWitnessTable(&unk_100235170, &type metadata for AppMetadataCache.AppMetadataCacheError);
    atomic_store(result, (unint64_t *)&qword_100316EA8);
  }
  return result;
}

unint64_t sub_1001BDB9C()
{
  unint64_t result;

  result = qword_100316EB8;
  if (!qword_100316EB8)
  {
    result = swift_getWitnessTable(&unk_1002352EC, &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316EB8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 7) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v5 = v6 - 8;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1001BDCAC + 4 * byte_100234C17[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1001BDCE0 + 4 * byte_100234C12[v4]))();
}

uint64_t sub_1001BDCE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BDCE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001BDCF0);
  return result;
}

uint64_t sub_1001BDCFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001BDD04);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1001BDD08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BDD10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys()
{
  return &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys;
}

unint64_t sub_1001BDD30()
{
  unint64_t result;

  result = qword_100316EC8;
  if (!qword_100316EC8)
  {
    result = swift_getWitnessTable(&unk_1002352C4, &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316EC8);
  }
  return result;
}

unint64_t sub_1001BDD70()
{
  unint64_t result;

  result = qword_100316ED0;
  if (!qword_100316ED0)
  {
    result = swift_getWitnessTable("e1\t", &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316ED0);
  }
  return result;
}

unint64_t sub_1001BDDB0()
{
  unint64_t result;

  result = qword_100316ED8;
  if (!qword_100316ED8)
  {
    result = swift_getWitnessTable(&unk_10023525C, &type metadata for AppMetadataSchemaV1.AppMetadata.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100316ED8);
  }
  return result;
}

void sub_1001BDDEC(uint64_t a1)
{
  sub_1001BD454(a1);
}

uint64_t sub_1001BDE24()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1001BDE2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v1, v0);
}

uint64_t sub_1001BDE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, 31, a3, 6, 0);
}

uint64_t sub_1001BDE50(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1001BDE58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100161B54(a1, a2, 1, v2);
}

uint64_t sub_1001BDE64()
{
  uint64_t v0;

  return PersistentModel.getValue<A>(forKey:)(v0);
}

uint64_t sub_1001BDE70(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_1001BDE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t sub_1001BDE88()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_1001BDE90(uint64_t a1, uint64_t a2)
{
  return swift_deallocPartialClassInstance(a1, a2, 40, 7);
}

void sub_1001BDE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[4];

  v4 = sub_1001C14D4();
  v5 = sub_1001C15A0(v4);
  if (v6)
  {
    sub_10016FF88(v1, &qword_100314CE8);
    v7 = 7168;
  }
  else
  {
    TaskPriority.rawValue.getter(v5);
    sub_1001C148C();
    v7 = v3 | 0x1C00;
  }
  if (*(_QWORD *)(v0 + 16))
  {
    sub_10016D600();
    sub_10016D5F4();
    sub_10016D418();
    sub_10016D470();
  }
  else
  {
    v1 = 0;
    v3 = 0;
  }
  v8 = sub_100163AE8((uint64_t)&unk_1002C84A0, 32);
  *(_QWORD *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v0;
  if (v3 | v1)
  {
    v10[0] = 0;
    v10[1] = 0;
    v9 = v10;
    v10[2] = v1;
    v10[3] = v3;
  }
  else
  {
    v9 = 0;
  }
  swift_task_create(v7, v9, (char *)&type metadata for () + 8, &unk_100315228, v8);
  sub_1001C14B0();
}

void sub_1001BDF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[4];

  v4 = sub_1001C14D4();
  v5 = sub_1001C15A0(v4);
  if (v6)
  {
    sub_10016FF88(v1, &qword_100314CE8);
    v7 = 7168;
  }
  else
  {
    TaskPriority.rawValue.getter(v5);
    sub_1001C148C();
    v7 = v3 | 0x1C00;
  }
  if (*(_QWORD *)(v0 + 16))
  {
    sub_10016D600();
    sub_10016D5F4();
    sub_10016D418();
    sub_10016D470();
  }
  else
  {
    v1 = 0;
    v3 = 0;
  }
  v8 = sub_100163AE8((uint64_t)&unk_1002C84C8, 32);
  *(_QWORD *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v0;
  v9 = sub_100161BD0(&qword_100316F60);
  if (v3 | v1)
  {
    v11[0] = 0;
    v11[1] = 0;
    v10 = v11;
    v11[2] = v1;
    v11[3] = v3;
  }
  else
  {
    v10 = 0;
  }
  swift_task_create(v7, v10, v9, &unk_100316F58, v8);
  sub_1001C14B0();
}

void sub_1001BE03C(uint64_t a1, uint64_t a2)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
  sub_1001C14A4(isa);
}

void sub_1001BE080(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100161BD0(&qword_100316F08);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v33 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v32 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v8 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v21 = *v19;
    v20 = v19[1];
    sub_1001631F4(*(_QWORD *)(a1 + 56) + 40 * v10, (uint64_t)v50);
    v48 = v21;
    v49 = v20;
    v45 = v50[0];
    v46 = v50[1];
    v47 = v51;
    v36[0] = v21;
    v36[1] = v20;
    swift_bridgeObjectRetain(v20);
    swift_dynamicCast(&v37, v36, &type metadata for String, &type metadata for AnyHashable, 7);
    v34[0] = v45;
    v34[1] = v46;
    v35 = v47;
    swift_dynamicCast(v40, v34, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 7);
    v41 = v37;
    v42 = v38;
    v43 = v39;
    sub_100161F60(v40, v44);
    v37 = v41;
    v38 = v42;
    v39 = v43;
    sub_100161F60(v44, v34);
    sub_100161F60(v34, &v41);
    v22 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v23 = -1 << *((_BYTE *)v3 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)]) == 0)
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        v29 = v25 == v28;
        if (v25 == v28)
          v25 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v7[8 * v25];
        if (v30 != -1)
        {
          v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_38:
    *(_QWORD *)&v7[(v26 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v26;
    v31 = v3[6] + 40 * v26;
    *(_OWORD *)v31 = v37;
    *(_OWORD *)(v31 + 16) = v38;
    *(_QWORD *)(v31 + 32) = v39;
    sub_100161F60(&v41, (_OWORD *)(v3[7] + 32 * v26));
    ++v3[2];
    if (v6)
      goto LABEL_8;
LABEL_9:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_42;
    if (v11 >= v32)
      goto LABEL_40;
    v12 = *(_QWORD *)(v33 + 8 * v11);
    v13 = v8 + 1;
    if (!v12)
    {
      sub_1001C1588();
      if (v14 == v15)
        goto LABEL_40;
      sub_10016D670();
      if (!v12)
      {
        sub_1001C1588();
        if (v14 == v15)
          goto LABEL_40;
        sub_10016D670();
        if (!v12)
        {
          sub_1001C1588();
          if (v14 == v15)
            goto LABEL_40;
          sub_10016D670();
          if (!v12)
            break;
        }
      }
    }
LABEL_28:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v8 = v13;
  }
  v17 = v16 + 4;
  if (v17 >= v32)
  {
LABEL_40:
    swift_release(v3);
    sub_10016CA2C(a1);
    return;
  }
  v12 = *(_QWORD *)(v33 + 8 * v17);
  if (v12)
  {
    v13 = v17;
    goto LABEL_28;
  }
  while (!__OFADD__(v17, 1))
  {
    sub_1001C1588();
    if (v14 == v15)
      goto LABEL_40;
    sub_10016D670();
    v17 = v18 + 1;
    if (v12)
      goto LABEL_28;
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_1001BE440(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100161BD0(&qword_100316F08);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v18 = *v16;
    v17 = v16[1];
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v11);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)&v42[0] = v18;
    *((_QWORD *)&v42[0] + 1) = v17;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7);
    v33[0] = v21;
    v33[1] = v20;
    swift_dynamicCast(v37, v33, &type metadata for String, (char *)&type metadata for Any + 8, 7);
    v38 = v34;
    v39 = v35;
    v40 = v36;
    sub_100161F60(v37, v41);
    v34 = v38;
    v35 = v39;
    v36 = v40;
    sub_100161F60(v41, v42);
    sub_100161F60(v42, &v38);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v22 = -1 << *((_BYTE *)v3 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)]) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)&v7[8 * v24];
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)&v7[(v25 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v25;
    v30 = v3[6] + 40 * v25;
    *(_OWORD *)v30 = v34;
    *(_OWORD *)(v30 + 16) = v35;
    *(_QWORD *)(v30 + 32) = v36;
    result = (uint64_t)sub_100161F60(&v38, (_OWORD *)(v3[7] + 32 * v25));
    ++v3[2];
    if (v6)
      goto LABEL_8;
LABEL_9:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_38;
    if (v12 >= v31)
      goto LABEL_36;
    v13 = *(_QWORD *)(v32 + 8 * v12);
    v14 = v9 + 1;
    if (!v13)
    {
      v14 = v9 + 2;
      if (v9 + 2 >= v31)
        goto LABEL_36;
      v13 = *(_QWORD *)(v32 + 8 * v14);
      if (!v13)
      {
        v14 = v9 + 3;
        if (v9 + 3 >= v31)
          goto LABEL_36;
        v13 = *(_QWORD *)(v32 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 4;
          if (v9 + 4 >= v31)
            goto LABEL_36;
          v13 = *(_QWORD *)(v32 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v9 = v14;
  }
  v15 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_36:
    swift_release(v3);
    sub_10016CA2C(a1);
    return (uint64_t)v3;
  }
  v13 = *(_QWORD *)(v32 + 8 * v15);
  if (v13)
  {
    v14 = v9 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v31)
      goto LABEL_36;
    v13 = *(_QWORD *)(v32 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_24;
  }
LABEL_39:
  __break(1u);
  return result;
}

const char *sub_1001BE7F4()
{
  return "gseui";
}

const char *sub_1001BE808()
{
  return "de7bbd8e";
}

id sub_1001BE82C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v26;
  NSURL *v27;
  void *v28;
  void *v29;
  void *v30;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100162164();
  v6 = v5 - v4;
  v7 = sub_100161BD0(&qword_100315B00);
  __chkstk_darwin(v7);
  sub_100162164();
  v10 = v9 - v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100162164();
  v15 = v14 - v13;
  result = objc_msgSend(v1, "defaultAction");
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = (id)sub_1001C0C28(result);
  if (!v17)
    return result;
  v18 = v17;
  URL.init(string:)(result);
  swift_bridgeObjectRelease(v18, v19);
  sub_1001C13A4(v10);
  if (v20)
    return (id)sub_10016FF88(v10, &qword_100315B00);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15, v10, v11);
  v22 = static GKLog.daemon.getter(v21);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "LeaderboardChallengeBulletin Notification handle default action", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  result = objc_msgSend((id)objc_opt_self(GKApplicationWorkspace), "defaultWorkspace");
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v28 = result;
  URL._bridgeToObjectiveC()(v27);
  v30 = v29;
  objc_msgSend(v28, "openURL:", v29);

  return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_1001BEA98()
{
  uint64_t v0;
  char v1;
  _QWORD v3[5];
  objc_super v4;

  v4.receiver = (id)swift_getObjCClassFromMetadata(v0);
  v4.super_class = (Class)&OBJC_METACLASS___GKLeaderboardChallengeBulletin;
  if (objc_msgSendSuper2(&v4, "shouldProcessNotification"))
  {
    v3[3] = &type metadata for GKFeatureFlags;
    v3[4] = sub_1001C1048();
    v1 = isFeatureEnabled(_:)(v3);
    sub_100161FE0(v3);
  }
  else
  {
    v1 = 0;
  }
  return v1 & 1;
}

void sub_1001BEB3C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _Block_copy(a3);
  v11 = static GKLog.daemon.getter(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "LeaderboardChallengeBulletin loadBulletinsForPushNotification:", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_1001BEC7C(a1);
  _Block_copy(a3);
  sub_1001BF1DC(a1, a2, (void (**)(_QWORD, _QWORD))a3);
  _Block_release(a3);
  _Block_release(a3);
}

uint64_t sub_1001BEC7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29[5];
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35[14];
  _OWORD v36[7];
  _BYTE __dst[112];
  _BYTE v38[16];
  _QWORD v39[3];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = swift_allocObject(&unk_1002C8400, 24, 7);
  *(_QWORD *)(v6 + 16) = &_swiftEmptyDictionarySingleton;
  v35[0] = 116;
  v35[1] = 0xE100000000000000;
  AnyHashable.init<A>(_:)(v35);
  sub_100166D80(a1, v36);
  sub_1001638F4((uint64_t)__dst);
  if (*((_QWORD *)&v36[1] + 1))
  {
    if ((swift_dynamicCast(v35, v36, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      sub_1001C0B64();
  }
  else
  {
    sub_10016FF88((uint64_t)v36, &qword_1003159B0);
  }
  sub_1001A2110(a1, v35);
  sub_100183EDC((uint64_t)v35, (uint64_t)v36, &qword_100315260);
  if (*((_QWORD *)&v36[0] + 1) != 1)
  {
    memcpy(__dst, v36, sizeof(__dst));
    sub_100183EDC((uint64_t)&__dst[96], (uint64_t)v38, &qword_1003163F8);
    sub_100183EDC((uint64_t)v38, (uint64_t)v39, &qword_1003163F8);
    if (v39[1])
    {
      sub_1001767E8((uint64_t)v38);
      sub_100183D70(v35);
LABEL_11:
      v7 = sub_1001C0B64();
      goto LABEL_13;
    }
    sub_100183D70(v35);
  }
  v31 = 0x676E656C6C616863;
  v32 = 0xEB00000000644965;
  AnyHashable.init<A>(_:)(&v31);
  sub_100166D80(a1, &v33);
  sub_1001638F4((uint64_t)v29);
  if (v34)
  {
    v7 = swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if ((v7 & 1) == 0)
      goto LABEL_13;
    goto LABEL_11;
  }
  v7 = sub_10016FF88((uint64_t)&v33, &qword_1003159B0);
LABEL_13:
  static GKLog.daemon.getter(v7);
  v8 = swift_retain_n(v6, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = v5;
  v11 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v11))
  {
    v28 = v10;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v27 = v2;
    v14 = v13;
    v29[0] = v13;
    v26 = v3;
    *(_DWORD *)v12 = 136315138;
    v25[1] = v12 + 4;
    swift_beginAccess(v6 + 16, &v33, 0, 0);
    v15 = *(_QWORD *)(v6 + 16);
    v16 = swift_bridgeObjectRetain(v15);
    v17 = Dictionary.description.getter(v16, &type metadata for String, &type metadata for String);
    v19 = v18;
    swift_bridgeObjectRelease(v15, v18);
    v31 = sub_10016FE60(v17, v19, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_release_n(v6, 2);
    swift_bridgeObjectRelease(v19, v20);
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "LeaderboardChallengeBulletin notifyUIUpdate with userInfo:%s", v12, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {

    swift_release_n(v6, 2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  }
  v21 = (void *)objc_opt_self(GKClientProxy);
  v29[4] = (uint64_t)sub_1001C0CB8;
  v30 = v6;
  v29[0] = (uint64_t)_NSConcreteStackBlock;
  v29[1] = 1107296256;
  v29[2] = (uint64_t)sub_1001C07E4;
  v29[3] = (uint64_t)&unk_1002C8418;
  v22 = _Block_copy(v29);
  v23 = v30;
  swift_retain(v6);
  swift_release(v23);
  objc_msgSend(v21, "enumerateClientsUsingBlock:", v22);
  _Block_release(v22);
  return swift_release(v6);
}

void sub_1001BF1DC(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  objc_class *v28;
  objc_class *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  Class v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  Class v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67[14];
  _QWORD v68[14];
  _BYTE __dst[96];

  v5 = sub_100161BD0(&qword_100314CE8);
  __chkstk_darwin(v5);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v57 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v57 - v16;
  v18 = swift_allocObject(&unk_1002C8450, 24, 7);
  *(_QWORD *)(v18 + 16) = a3;
  _Block_copy(a3);
  sub_1001A2110(a1, v67);
  v19 = sub_100183EDC((uint64_t)v67, (uint64_t)v68, &qword_100315260);
  if (v68[1] == 1)
  {
    v20 = v18;
    v21 = static GKLog.daemon.getter(v19);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "LeaderboardChallengeBulletin parseLeaderboardChallengeBulletin failed to decode relationships", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class))a3)[2](a3, isa);

    v26 = v20;
    goto LABEL_24;
  }
  v60 = v18;
  memcpy(__dst, v68, sizeof(__dst));
  v58 = (void *)v68[13];
  v59 = v68[12];
  type metadata accessor for LeaderboardChallengeBulletin();
  v27 = swift_bridgeObjectRetain(a1);
  v28 = sub_1001BF85C(v27);
  if (!v28)
  {
    v45 = sub_100183D70(v67);
    v46 = static GKLog.daemon.getter(v45);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.info.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "LeaderboardChallengeBulletin parseLeaderboardChallengeBulletin failed to create bulletin", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    v50 = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class))a3)[2](a3, v50);

    goto LABEL_23;
  }
  v29 = v28;
  v61 = 0x656C746974;
  v62 = 0xE500000000000000;
  AnyHashable.init<A>(_:)(&v61);
  sub_100166D80(a1, &v65);
  sub_1001638F4((uint64_t)&v63);
  if (!v66)
    goto LABEL_17;
  if ((swift_dynamicCast(&v61, &v65, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_19:
    v51 = (uint64_t)sub_100183D70(v67);
    goto LABEL_20;
  }
  v30 = v62;
  v57 = v61;
  v61 = 0x6567617373656DLL;
  v62 = 0xE700000000000000;
  AnyHashable.init<A>(_:)(&v61);
  sub_100166D80(a1, &v65);
  sub_1001638F4((uint64_t)&v63);
  if (!v66)
  {
    swift_bridgeObjectRelease(v30, v31);
LABEL_17:
    sub_100183D70(v67);
    v51 = sub_10016FF88((uint64_t)&v65, &qword_1003159B0);
LABEL_20:
    v52 = static GKLog.daemon.getter(v51);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.info.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "LeaderboardChallengeBulletin parseLeaderboardChallengeBulletin failed to get title or message", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v56 = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class))a3)[2](a3, v56);

LABEL_23:
    v26 = v60;
    goto LABEL_24;
  }
  if ((swift_dynamicCast(&v61, &v65, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v30, v32);
    goto LABEL_19;
  }
  v33 = v61;
  v34 = v62;
  -[objc_class setBulletinType:](v29, "setBulletinType:", 1600);
  sub_1001C0D14(v57, v30, v29, (SEL *)&selRef_setTitle_);
  sub_1001C0D14(v33, v34, v29, (SEL *)&selRef_setMessage_);
  v36 = v58;
  v35 = v59;
  if (v58)
  {
    v37 = objc_allocWithZone((Class)GKBulletinAction);
    swift_bridgeObjectRetain(v36);
    v38 = objc_msgSend(v37, "init");
    objc_msgSend(v38, "setType:", 0);
    v63 = 0;
    v64 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(v64, v39);
    v63 = 0xD00000000000001DLL;
    v64 = 0x800000010029B160;
    v40._countAndFlagsBits = v35;
    v40._object = v36;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v36, v41);
    sub_1001C0D14(v63, v64, v38, (SEL *)&selRef_setInfo_);
    -[objc_class setDefaultAction:](v29, "setDefaultAction:", v38);

  }
  v42 = type metadata accessor for TaskPriority(0);
  sub_100161B54((uint64_t)v7, 1, 1, v42);
  v43 = (_QWORD *)swift_allocObject(&unk_1002C8478, 168, 7);
  v43[2] = 0;
  v43[3] = 0;
  memcpy(v43 + 4, __dst, 0x60uLL);
  v43[16] = v35;
  v43[17] = v36;
  v43[18] = v29;
  v43[19] = sub_100183D68;
  v26 = v60;
  v43[20] = v60;
  swift_retain(v26);
  sub_1001BDE9C();
  swift_release(v44);
LABEL_24:
  swift_release(v26);
  _Block_release(a3);
}

objc_class *sub_1001BF85C(uint64_t a1)
{
  uint64_t v1;
  objc_class *v2;
  NSDictionary v3;
  uint64_t v4;

  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_1001C1568((uint64_t)v3.super.isa, v4);
  }
  else
  {
    v1 = 0;
  }
  objc_msgSend(objc_allocWithZone(v2), "initWithPushNotification:", v1);
  sub_100184198();
  return v2;
}

uint64_t sub_1001BF8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v7[249] = a7;
  v7[243] = a6;
  v7[237] = a5;
  v7[231] = a4;
  v8 = type metadata accessor for URL(0);
  v7[250] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[251] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[252] = swift_task_alloc(v10);
  v7[253] = swift_task_alloc(v10);
  v11 = sub_100161BD0(&qword_100315B00);
  v7[254] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[255] = swift_task_alloc(v12);
  v7[256] = swift_task_alloc(v12);
  v7[257] = swift_task_alloc(v12);
  v7[258] = swift_task_alloc(v12);
  v7[259] = swift_task_alloc(v12);
  v7[260] = swift_task_alloc(v12);
  v7[261] = swift_task_alloc(v12);
  v7[262] = swift_task_alloc(v12);
  return swift_task_switch(sub_1001BF9CC, 0, 0);
}

#error "1001BFD58: call analysis failed (funcsize=263)"

uint64_t sub_1001BFE24()
{
  uint64_t *v0;

  sub_100183FDC(v0[259], v0[258]);
  return swift_asyncLet_get(v0 + 2, v0[260], sub_1001BFE70, v0 + 238);
}

uint64_t sub_1001BFE70()
{
  return sub_10016CFC8((uint64_t)sub_1001BFE7C);
}

uint64_t sub_1001BFE7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[262];
  v2 = v0[261];
  v3 = v0[260];
  v4 = v0[258];
  sub_10016FF88(v2, &qword_100315B00);
  sub_10016FF88(v1, &qword_100315B00);
  sub_100183EDC(v4, v1, &qword_100315B00);
  sub_100183FDC(v3, v2);
  return swift_asyncLet_finish(v0 + 82, v0[259], sub_1001BFF20, v0 + 244);
}

uint64_t sub_1001BFF20()
{
  return sub_10016CFC8((uint64_t)sub_1001BFF2C);
}

uint64_t sub_1001BFF2C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 2112));
  return swift_asyncLet_finish(v0 + 16, *(_QWORD *)(v0 + 2080), sub_1001BFF74, v0 + 1296);
}

uint64_t sub_1001BFF74()
{
  return sub_10016CFC8((uint64_t)sub_1001BFF80);
}

#error "1001BFFFC: call analysis failed (funcsize=78)"

uint64_t sub_1001C00C8()
{
  sub_100165E44();
  sub_100165DBC();
  return sub_10016D26C((uint64_t)sub_1001C0100, 0, 0);
}

#error "1001C0190: call analysis failed (funcsize=82)"

uint64_t sub_1001C025C()
{
  sub_100165E44();
  sub_100165DBC();
  return sub_10016D26C((uint64_t)sub_1001C02CC, 0, 0);
}

uint64_t sub_1001C0294()
{
  sub_100165E44();
  sub_100165DBC();
  return sub_10016D26C((uint64_t)sub_1001C02CC, 0, 0);
}

#error "1001C035C: call analysis failed (funcsize=82)"

uint64_t sub_1001C0428(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = a2[4];
  v5 = a2[5];
  v6 = a2[2];
  v7 = a2[3];
  v8 = (_QWORD *)swift_task_alloc(dword_100316324);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1001C04A0;
  return sub_1001A47A0(a1, v4, v5, v6, v7);
}

uint64_t sub_1001C04A0()
{
  uint64_t (*v0)(void);

  sub_100165DBC();
  v0 = (uint64_t (*)(void))sub_1001814D8();
  return sub_10016CF2C(v0);
}

uint64_t sub_1001C04D4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  sub_100183EDC((uint64_t)(a2 + 4), (uint64_t)(v2 + 4), &qword_100314D20);
  sub_100183EDC((uint64_t)(v2 + 4), (uint64_t)(v2 + 2), &qword_100314D20);
  v5 = v2[3];
  if (v5)
  {
    v6 = v2[2];
    v8 = *a2;
    v7 = a2[1];
    v9 = (_QWORD *)swift_task_alloc(dword_10031633C);
    v2[6] = v9;
    *v9 = v2;
    v9[1] = sub_1001C05D4;
    return sub_1001A57C8(a1, v6, v5, v8, v7);
  }
  else
  {
    v12 = *a2;
    v11 = a2[1];
    v13 = (_QWORD *)swift_task_alloc(dword_10031634C);
    v2[7] = v13;
    *v13 = v2;
    v13[1] = sub_1001C0600;
    return sub_1001A5C2C(a1, v12, v11);
  }
}

uint64_t sub_1001C05D4()
{
  uint64_t (*v0)(void);

  sub_100165E44();
  sub_100165DBC();
  v0 = (uint64_t (*)(void))sub_1001814D8();
  return sub_10016CF2C(v0);
}

uint64_t sub_1001C0600()
{
  uint64_t (*v0)(void);

  sub_100165E44();
  sub_100165DBC();
  v0 = (uint64_t (*)(void))sub_1001814D8();
  return sub_10016CF2C(v0);
}

void sub_1001C062C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];

  if (a1)
  {
    sub_1001C0DEC(a1);
    if (v5)
    {
      v6 = v5;
      v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6, v8);
      v9 = objc_msgSend(v7, "_gkSHA256Hash");

      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      if (v10 == 0xD00000000000002CLL && v12 == 0x800000010029B130)
      {
        swift_bridgeObjectRelease(0x800000010029B130, v13);
      }
      else
      {
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, 0xD00000000000002CLL, 0x800000010029B130, 0);
        swift_bridgeObjectRelease(v12, v15);
        if ((v14 & 1) == 0)
          return;
      }
      v16 = (uint64_t *)(a3 + 16);
      swift_beginAccess(v16, v21, 0, 0);
      v17 = *v16;
      v18 = swift_bridgeObjectRetain(v17);
      v19 = sub_1001BE440(v18);
      swift_bridgeObjectRelease(v17, v20);
      sub_1001C0D6C(19, v19, a1);
    }
  }
}

void *sub_1001C075C(uint64_t a1)
{
  void *v1;
  NSDictionary v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  objc_super v12;

  if (a1)
  {
    v2.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_1001C1568((uint64_t)v2.super.isa, v3);
  }
  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  v10 = sub_100184180((uint64_t)v12.super_class, "initWithPushNotification:", v4, v5, v6, v7, v8, v9, v12);
  sub_100184198();
  if (v1)

  return v1;
}

void sub_1001C07E4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(void *, uint64_t);
  id v7;

  v6 = *(void (**)(void *, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a2;
  v6(a2, a3);
  swift_release(v5);

}

id sub_1001C0898()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  return objc_msgSendSuper2(&v2, "init");
}

void *sub_1001C08E8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  sub_100184180((uint64_t)v8.super_class, "initWithCoder:", v1, v2, v3, v4, v5, v6, v8);
  sub_100184198();
  return v0;
}

id sub_1001C094C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LeaderboardChallengeBulletin();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LeaderboardChallengeBulletin()
{
  return objc_opt_self(GKLeaderboardChallengeBulletin);
}

uint64_t sub_1001C099C(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = swift_task_alloc(a2[1]);
  v5 = (_QWORD *)sub_10016D35C(v4);
  *v5 = v2;
  v5[1] = sub_1001C1280;
  return v7(a1);
}

uint64_t sub_1001C09FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  sub_1001C1464();
  v0 = sub_1001C1440();
  v3 = sub_100166420(v0, v1, v2);
  v11 = sub_1001C13C0(v3, v4, v5, v6, v7, v8, v9, v10, v14, v15);
  return sub_1001C1424(v11, v12);
}

uint64_t sub_1001C0A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  sub_1001C1464();
  v0 = sub_1001C13D8();
  v4 = sub_100166510(v0, v1, v2, v3);
  v12 = sub_1001C13C0(v4, v5, v6, v7, v8, v9, v10, v11, v15, v16);
  return sub_1001C133C(v12, v13);
}

uint64_t sub_1001C0A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_1001C1464();
  sub_1001C1440();
  sub_10016671C();
  v8 = sub_1001C13C0(v0, v1, v2, v3, v4, v5, v6, v7, v11, v12);
  return sub_1001C1424(v8, v9);
}

uint64_t sub_1001C0AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_1001C1464();
  sub_1001C1550();
  sub_100166828();
  v8 = sub_1001C13C0(v0, v1, v2, v3, v4, v5, v6, v7, v11, v12);
  return swift_bridgeObjectRelease(v8, v9);
}

uint64_t sub_1001C0B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  sub_1001C1464();
  v0 = sub_1001C13D8();
  v4 = sub_100166930(v0, v1, v2, v3);
  v12 = sub_1001C13C0(v4, v5, v6, v7, v8, v9, v10, v11, v15, v16);
  return sub_1001C133C(v12, v13);
}

uint64_t sub_1001C0B64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_1001C1464();
  sub_1001C1550();
  sub_100166B18();
  v8 = sub_1001C13C0(v0, v1, v2, v3, v4, v5, v6, v7, v11, v12);
  return sub_1001C133C(v8, v9);
}

void sub_1001C0BBC(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1001C0D14(a1, a2, a3, (SEL *)&selRef_setTitle_);
}

void sub_1001C0BC8(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1001C0D14(a1, a2, a3, (SEL *)&selRef_setMessage_);
}

void sub_1001C0BD4(uint64_t a1, void *a2)
{
  uint64_t v4;
  Class isa;

  sub_1001B0690();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1, v4);
  objc_msgSend(a2, "setAttachments:", isa);
  sub_1001C14A4(isa);
}

uint64_t sub_1001C0C28(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "info");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_1001C0C94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16), a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_1001C0CB8(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001C062C(a1, a2, v2);
}

uint64_t sub_1001C0CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C0CD0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001C0CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2, a2);
    swift_bridgeObjectRelease(a4, v8);
    return swift_bridgeObjectRelease(a6, v9);
  }
  return result;
}

void sub_1001C0D14(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  uint64_t v7;
  id v8;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v7);
  objc_msgSend(a3, *a4, v8);

}

void sub_1001C0D6C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  Class isa;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2, v6);
  objc_msgSend(a3, "refreshContentsForDataType:userInfo:", a1, isa);

}

uint64_t sub_1001C0DEC(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "originalBundleIdentifier");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_1001C0E4C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C0E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v2 = *(_QWORD *)(v0 + 40);
  if (v2)
  {
    swift_bridgeObjectRelease(v2, v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56), v3);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72), v4);
  }
  v5 = *(_QWORD *)(v0 + 88);
  if (v5)
  {
    swift_bridgeObjectRelease(v5, v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104), v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120), v7);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136), v1);

  swift_release(*(_QWORD *)(v0 + 160));
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_1001C0EE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v7 = v1[18];
  v8 = v1[19];
  v9 = v1[20];
  v10 = swift_task_alloc(dword_100316F14);
  v11 = (_QWORD *)sub_10016D35C(v10);
  *v11 = v2;
  v11[1] = sub_100180BF0;
  return sub_1001BF8D0(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1001C0F70()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v0 = swift_task_alloc(dword_100316F24);
  v1 = (_QWORD *)sub_10016D35C(v0);
  v2 = sub_1001C146C(v1);
  return sub_1001883C4(v2, v3, v4, v5);
}

uint64_t sub_1001C0FB8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v0 = swift_task_alloc(dword_100316F2C);
  v1 = (_QWORD *)sub_10016D35C(v0);
  v2 = sub_1001C1574(v1);
  return sub_1001C0428(v2, v3);
}

uint64_t sub_1001C1000()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;

  v0 = swift_task_alloc(dword_100316F3C);
  v1 = (_QWORD *)sub_10016D35C(v0);
  v2 = sub_1001C1574(v1);
  return sub_1001C04D4(v2, v3);
}

unint64_t sub_1001C1048()
{
  unint64_t result;

  result = qword_100316F48;
  if (!qword_100316F48)
  {
    result = swift_getWitnessTable(&unk_1002353F4, &type metadata for GKFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100316F48);
  }
  return result;
}

uint64_t sub_1001C1084(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1001C10EC;
  return v5(v2 + 32);
}

uint64_t sub_1001C10EC()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t (*v3)(void);

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  v3 = (uint64_t (*)(void))sub_1001814D8();
  return v3();
}

uint64_t sub_1001C1138()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C115C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v0 = swift_task_alloc(dword_100316F54);
  v1 = (_QWORD *)sub_10016D35C(v0);
  v2 = sub_1001C146C(v1);
  return sub_1001883C4(v2, v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for GKFeatureFlags(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001C11E4 + 4 * byte_100235340[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001C1204 + 4 * byte_100235345[v4]))();
}

_BYTE *sub_1001C11E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001C1204(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001C120C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001C1214(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001C121C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001C1224(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GKFeatureFlags()
{
  return &type metadata for GKFeatureFlags;
}

unint64_t sub_1001C1244()
{
  unint64_t result;

  result = qword_100316F68;
  if (!qword_100316F68)
  {
    result = swift_getWitnessTable(&unk_1002353CC, &type metadata for GKFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100316F68);
  }
  return result;
}

id sub_1001C12CC()
{
  uint64_t v0;

  return sub_1001AFDFC(0x656D686361747461, 0xEC000000315F746ELL, v0, 1);
}

uint64_t sub_1001C12FC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v1[251] + 32))(v1[253], a1, v1[250]);
}

uint64_t sub_1001C1324(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  a1[1] = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
}

uint64_t sub_1001C133C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a1, a2);
}

uint64_t sub_1001C1350(uint64_t a1)
{
  uint64_t v1;

  return sub_100183FDC(a1, v1);
}

void sub_1001C135C(NSURL *retstr@<X8>)
{
  URL._bridgeToObjectiveC()(retstr);
}

uint64_t sub_1001C1370()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10016445C(v1, 1, v0);
}

uint64_t sub_1001C1394(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return specialized Array._endMutation()(a1);
}

uint64_t sub_1001C13A4(uint64_t a1)
{
  uint64_t v1;

  return sub_10016445C(a1, 1, v1);
}

uint64_t sub_1001C13C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t sub_1001C13D0(uint64_t a1)
{
  uint64_t *v1;

  return sub_10016FF88(a1, v1);
}

uint64_t sub_1001C13D8()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

void sub_1001C1400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  sub_1001C0BD4(a15, v15);
}

uint64_t sub_1001C140C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  return v1(v0);
}

id sub_1001C1418(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1001C1424(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a1, a2);
}

id sub_1001C1434(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return v1;
}

uint64_t sub_1001C1440()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_1001C1464()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_1001C146C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1001C148C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void sub_1001C14A4(id a1)
{

}

uint64_t sub_1001C14C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  return sub_100183EDC(a1, v1, v2);
}

uint64_t sub_1001C14D4()
{
  return type metadata accessor for TaskPriority(0);
}

uint64_t sub_1001C14E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_100183EDC(a1, a2, v2);
}

uint64_t sub_1001C14F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_task_dealloc(a14);
}

uint64_t sub_1001C14F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

uint64_t sub_1001C1500(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for LeaderboardChallengeBulletin();
}

uint64_t sub_1001C1508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_task_dealloc(a13);
}

uint64_t sub_1001C1510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_task_dealloc(a12);
}

uint64_t sub_1001C1518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_task_dealloc(a11);
}

uint64_t sub_1001C1520(uint64_t a1)
{
  uint64_t v1;

  return sub_100161B54(a1, 1, 1, v1);
}

uint64_t sub_1001C1530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

uint64_t sub_1001C1538()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1001C1540()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1001C1548@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10016FF88(a2, a1);
}

void sub_1001C1550()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_1001C1568(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_bridgeObjectRelease(v2, a2);
}

uint64_t sub_1001C1574(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1001C1594()
{
  uint64_t v0;
  uint64_t *v1;

  return sub_10016FF88(v0, v1);
}

uint64_t sub_1001C15A0(uint64_t a1)
{
  uint64_t v1;

  return sub_10016445C(v1, 1, a1);
}

void sub_1001C15C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  sub_100161BD0(&qword_100314CE8);
  sub_1001C2FB0();
  __chkstk_darwin(v4);
  sub_100162164();
  v7 = v6 - v5;
  v8 = type metadata accessor for TaskPriority(0);
  sub_100161B54(v7, 1, 1, v8);
  v9 = (_QWORD *)sub_1001C2FE4((uint64_t)&unk_1002C85F8);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  v10 = (_QWORD *)sub_1001C2FE4((uint64_t)&unk_1002C8620);
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = &unk_100317128;
  v10[5] = v9;
  v11 = sub_1001C2C14(v7, (uint64_t)&unk_100317138, (uint64_t)v10);
  swift_release(v11);
  sub_1000BA184();
}

uint64_t sub_1001C1678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  v6 = v5;
  if (v4)
  {
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
    sub_1001C2E78(a1 + ((v7 + 32) & ~v7), a2);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  return sub_100161B54(a2, v8, 1, v6);
}

uint64_t sub_1001C16E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = sub_100161BD0(&qword_100317150);
  result = __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (!*(_QWORD *)(*v1 + 16))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  sub_1001C1678(*v1, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  result = sub_10016445C((uint64_t)v6, 1, v8);
  if ((_DWORD)result != 1)
  {
    result = sub_1001C2F6C((uint64_t)v6, a1);
    if (*(_QWORD *)(v7 + 16))
      return sub_10019A89C(0, 1);
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1001C17AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;

  v22 = &type metadata for String;
  v20 = 0;
  v21 = 0xE000000000000000;
  sub_10016BF84(a1, *(_QWORD *)(a1 + 24));
  v3 = sub_1001C2FC0((uint64_t)&v20, 0x65676175676E616CLL, 0xE800000000000000);
  result = sub_1001C2FD0(v3, v4, v5, v6, v7, v8, v9, v10, v20);
  if (!v1)
  {
    v22 = &type metadata for String;
    v20 = 0;
    v21 = 0xE000000000000000;
    sub_10016BF84(a1, *(_QWORD *)(a1 + 24));
    v12 = sub_1001C2FC0((uint64_t)&v20, 0x6F724665726F7473, 0xEA0000000000746ELL);
    return sub_1001C2FD0(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  }
  return result;
}

uint64_t sub_1001C1878()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for MetricsFieldsProviderCategory(0);
  sub_100180CE4(v1);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001C18B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(async function pointer to MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)[1]);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10016CEBC;
  return MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)(a1, a2, a3, a4);
}

uint64_t sub_1001C1930@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC14GameDaemonCore33MultiplayerActivityFieldsProvider_category;
  v4 = type metadata accessor for MetricsFieldsProviderCategory(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1001C1978(uint64_t a1)
{
  return sub_1001C17AC(a1);
}

uint64_t sub_1001C198C()
{
  uint64_t v0;

  v0 = type metadata accessor for MetricsFieldInclusionRequest(0);
  sub_1001AEE54(v0, qword_10031B988);
  sub_1001AEE94(v0, (uint64_t)qword_10031B988);
  return MetricsFieldInclusionRequest.init(rawValue:)(0xD000000000000013, 0x800000010029B2B0);
}

uint64_t MultiplayerActivityEventFilter.trackedSessions.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions);
  sub_100180CCC(v0 + OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions, (uint64_t)v3, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t MultiplayerActivityEventFilter.trackedSessions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions);
  sub_100180CCC((uint64_t)v3, (uint64_t)v7, 1);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4, v5);
}

uint64_t (*MultiplayerActivityEventFilter.trackedSessions.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  sub_100180CCC(v1 + OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions, a1, 33);
  return j__swift_endAccess;
}

id MultiplayerActivityEventFilter.__allocating_init()()
{
  return objc_msgSend(sub_1001C2FDC(), "init");
}

id MultiplayerActivityEventFilter.init()()
{
  uint64_t v0;
  uint64_t v1;
  id result;
  void *v3;
  double v4;
  double v5;
  id v6;
  uint64_t ObjectType;

  v1 = v0;
  sub_10016D668();
  result = objc_msgSend((id)objc_opt_self(GKPreferences), "shared");
  if (result)
  {
    v3 = result;
    objc_msgSend(result, "multiplayerActivityFeedMaxSessionDuration");
    v5 = v4;

    sub_1001C2FDC();
    v6 = MultiplayerActivityEventFilter.init(maxSessionDuration:maxTrackedSessionsCount:)(128, v5);
    ObjectType = swift_getObjectType(v1);
    swift_deallocPartialClassInstance(v1, ObjectType, 40, 7);
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id MultiplayerActivityEventFilter.__allocating_init(maxSessionDuration:maxTrackedSessionsCount:)(uint64_t a1, double a2)
{
  sub_1001C2FDC();
  return MultiplayerActivityEventFilter.init(maxSessionDuration:maxTrackedSessionsCount:)(a1, a2);
}

id MultiplayerActivityEventFilter.init(maxSessionDuration:maxTrackedSessionsCount:)(uint64_t a1, double a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  objc_class *v26;
  objc_super v27;
  _QWORD *v28;

  v3 = v2;
  v26 = (objc_class *)sub_10016D668();
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100162164();
  v9 = v8 - v7;
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  sub_1001C2FB0();
  __chkstk_darwin(v11);
  sub_100162164();
  v14 = v13 - v12;
  type metadata accessor for DispatchQoS(0);
  sub_1001C2FB0();
  __chkstk_darwin(v15);
  sub_100162164();
  v18 = v17 - v16;
  v24 = OBJC_IVAR___GKMultiplayerActivityEventFilter_serialQueue;
  sub_100162B54();
  v19 = v3;
  static DispatchQoS.default.getter();
  v28 = _swiftEmptyArrayStorage;
  v20 = sub_100162B90();
  v21 = sub_100161BD0(&qword_100314970);
  v22 = sub_100161C10();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v21, v22, v10, v20);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v5);
  *(_QWORD *)&v3[v24] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003FLL, 0x8000000100297060, v18, v14, v9, 0);
  *(double *)&v19[OBJC_IVAR___GKMultiplayerActivityEventFilter_maxSessionDuration] = a2;
  *(_QWORD *)&v19[OBJC_IVAR___GKMultiplayerActivityEventFilter_maxTrackedSessionsCount] = a1;
  *(_QWORD *)&v19[OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions] = _swiftEmptyArrayStorage;

  v27.receiver = v19;
  v27.super_class = v26;
  return objc_msgSendSuper2(&v27, "init");
}

uint64_t MultiplayerActivityEventFilter.filterEvent(metricsFields:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_1001C1DDC, 0, 0);
}

uint64_t sub_1001C1DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for MultiplayerActivityReporter(0);
  v2 = static MultiplayerActivityReporter.extractSessionID(fields:)(v1);
  if (v3)
  {
    v4 = v2;
    v5 = v3;
    v7 = *(_QWORD *)(v0 + 24);
    v6 = *(_QWORD *)(v0 + 32);
    v8 = (_QWORD *)swift_task_alloc(48);
    v8[2] = v6;
    v8[3] = v4;
    v8[4] = v5;
    v8[5] = v7;
    v9 = sub_100161BD0(&qword_100316F98);
    OS_dispatch_queue.sync<A>(execute:)(sub_1001C229C, v8, v9);
    swift_bridgeObjectRelease(v5, v10);
    swift_task_dealloc(v8);
    v11 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v11 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

uint64_t sub_1001C1EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  _BYTE v59[24];
  char v60[24];
  uint64_t v61;

  v57 = a5;
  v9 = type metadata accessor for Date(0);
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  v10 = __chkstk_darwin(v9);
  v53 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v52 = (char *)&v48 - v12;
  v13 = sub_100161BD0(&qword_100317150);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  v16 = *(_QWORD *)(v58 - 8);
  v17 = __chkstk_darwin(v58);
  v56 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (uint64_t *)((char *)&v48 - v20);
  __chkstk_darwin(v19);
  v51 = (uint64_t)&v48 - v22;
  v61 = a1;
  v23 = (_QWORD *)(a1 + OBJC_IVAR___GKMultiplayerActivityEventFilter_trackedSessions);
  swift_beginAccess(v23, v60, 0, 0);
  v24 = *v23;
  v25 = *(_QWORD *)(*v23 + 16);
  if (v25)
  {
    v49 = v16;
    v50 = a4;
    v26 = v24 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v27 = *(_QWORD *)(v16 + 72);
    swift_bridgeObjectRetain(v24);
    while (1)
    {
      sub_1001C2E78(v26, (uint64_t)v21);
      v28 = v21[1];
      v29 = *v21 == a2 && v28 == a3;
      if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v28, a2, a3, 0) & 1) != 0)
        break;
      sub_1001C2EBC((uint64_t)v21);
      v26 += v27;
      if (!--v25)
      {
        v30 = 1;
        goto LABEL_11;
      }
    }
    sub_1001C2F6C((uint64_t)v21, (uint64_t)v15);
    v30 = 0;
LABEL_11:
    v31 = v49;
    a4 = v50;
  }
  else
  {
    swift_bridgeObjectRetain(*v23);
    v30 = 1;
    v31 = v16;
  }
  v32 = v58;
  sub_100161B54((uint64_t)v15, v30, 1, v58);
  swift_bridgeObjectRelease(v24, v33);
  if (sub_10016445C((uint64_t)v15, 1, v32) == 1)
  {
    sub_1001C2EF8((uint64_t)v15, &qword_100317150);
    v34 = v56;
    v35 = swift_bridgeObjectRetain(a3);
    static Date.now.getter(v35);
    *v34 = a2;
    v34[1] = a3;
    swift_beginAccess(v23, v59, 33, 0);
    sub_1001C2F24();
    v36 = *(_QWORD *)(*v23 + 16);
    sub_100185DE0(v36);
    v37 = *v23;
    *(_QWORD *)(v37 + 16) = v36 + 1;
    sub_1001C2F6C((uint64_t)v34, v37+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v36);
    v38 = *v23;
    swift_endAccess(v59);
    if (*(_QWORD *)(v61 + OBJC_IVAR___GKMultiplayerActivityEventFilter_maxTrackedSessionsCount) < *(_QWORD *)(v38 + 16))
    {
      swift_beginAccess(v23, v59, 33, 0);
      sub_1001C16E8((uint64_t)v34);
      swift_endAccess(v59);
      sub_1001C2EBC((uint64_t)v34);
    }
    *v57 = a4;
    return swift_bridgeObjectRetain(a4);
  }
  else
  {
    v40 = v51;
    sub_1001C2F6C((uint64_t)v15, v51);
    v41 = v52;
    v42 = static Date.+ infix(_:_:)(v40 + *(int *)(v32 + 20), *(double *)(v61 + OBJC_IVAR___GKMultiplayerActivityEventFilter_maxSessionDuration));
    v43 = v53;
    static Date.now.getter(v42);
    v44 = static Date.> infix(_:_:)(v41, v43);
    v45 = *(void (**)(char *, uint64_t))(v54 + 8);
    v46 = v43;
    v47 = v55;
    v45(v46, v55);
    v45(v41, v47);
    result = sub_1001C2EBC(v40);
    if ((v44 & 1) != 0)
      result = swift_bridgeObjectRetain(a4);
    else
      a4 = 0;
    *v57 = a4;
  }
  return result;
}

uint64_t sub_1001C229C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_1001C1EB0(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_1001C2320(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v3[4] = v6;
  v7 = dword_100316F94;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v7);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1001C23C0;
  return MultiplayerActivityEventFilter.filterEvent(metricsFields:)(v6);
}

uint64_t sub_1001C23C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSDictionary v9;
  uint64_t v10;
  void (**v11)(_QWORD, _QWORD);

  v3 = *v1;
  v5 = *(_QWORD *)(*v1 + 32);
  v4 = *(_QWORD *)(*v1 + 40);
  v6 = *(void **)(*v1 + 16);
  v7 = *v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5, v8);

  if (a1)
  {
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1, v10);
  }
  else
  {
    v9.super.isa = 0;
  }
  v11 = *(void (***)(_QWORD, _QWORD))(v3 + 24);
  ((void (**)(_QWORD, Class))v11)[2](v11, v9.super.isa);

  _Block_release(v11);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1001C247C()
{
  return type metadata accessor for MultiplayerActivityFieldsProvider(0);
}

uint64_t type metadata accessor for MultiplayerActivityFieldsProvider(uint64_t a1)
{
  return sub_1001C28F8(a1, qword_100316FC8, (uint64_t)&nominal type descriptor for MultiplayerActivityFieldsProvider);
}

uint64_t sub_1001C2498(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for MetricsFieldsProviderCategory(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for MultiplayerActivityEventFilter()
{
  return objc_opt_self(GKMultiplayerActivityEventFilter);
}

uint64_t *initializeBufferWithCopyOfBuffer for MultiplayerActivityEventFilter.TrackedSession(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for MultiplayerActivityEventFilter.TrackedSession(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8), a2);
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for MultiplayerActivityEventFilter.TrackedSession(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for MultiplayerActivityEventFilter.TrackedSession(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7, v8);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

_OWORD *initializeWithTake for MultiplayerActivityEventFilter.TrackedSession(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for MultiplayerActivityEventFilter.TrackedSession(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7, a2);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiplayerActivityEventFilter.TrackedSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C2800);
}

uint64_t sub_1001C2800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return sub_10016445C(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MultiplayerActivityEventFilter.TrackedSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C2880);
}

void sub_1001C2880(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_1000BA184();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    sub_100161B54(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(uint64_t a1)
{
  return sub_1001C28F8(a1, qword_1003170D0, (uint64_t)&nominal type descriptor for MultiplayerActivityEventFilter.TrackedSession);
}

uint64_t sub_1001C28F8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_1001C2928(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1002354B0;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001C299C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001C29D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100317114);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10016C73C;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100317110 + dword_100317110))(v2, v3, v4);
}

uint64_t sub_1001C2A3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_10016CEF0;
  return v6();
}

uint64_t sub_1001C2A94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_100317124);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10016CEF0;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100317120 + dword_100317120))(v2, v3, v4);
}

uint64_t sub_1001C2B0C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_10016CEF0;
  return v7();
}

uint64_t sub_1001C2B64()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001C2B90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100317134);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10016CEF0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100317130 + dword_100317130))(a1, v4, v5, v6);
}

uint64_t sub_1001C2C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = sub_10016445C(a1, 1, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_1001C2EF8(a1, &qword_100314CE8);
    v8 = 7168;
  }
  else
  {
    v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v8 = v9 | 0x1C00;
  }
  if (*(_QWORD *)(a3 + 16))
  {
    v10 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain();
    v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    v14 = v13;
    swift_unknownObjectRelease();
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = swift_allocObject(&unk_1002C8648, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0;
    v18[1] = 0;
    v16 = v18;
    v18[2] = v12;
    v18[3] = v14;
  }
  else
  {
    v16 = 0;
  }
  return swift_task_create(v8, v16, (char *)&type metadata for () + 8, &unk_100317148, v15);
}

uint64_t sub_1001C2D58(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1001C2DBC;
  return v6(a1);
}

uint64_t sub_1001C2DBC()
{
  uint64_t v0;

  sub_10016CF58();
  return sub_10016CF2C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001C2DE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C2E08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100317144);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10016CEBC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100317140 + dword_100317140))(a1, v4);
}

uint64_t sub_1001C2E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C2EBC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001C2EF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100161BD0(a2);
  sub_100180CE4(v3);
  return a1;
}

uint64_t sub_1001C2F24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!(_DWORD)result)
  {
    result = sub_1001726B4(result, *(_QWORD *)(v1 + 16) + 1, 1, v1);
    *v0 = result;
  }
  return result;
}

uint64_t sub_1001C2F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultiplayerActivityEventFilter.TrackedSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C2FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)(a1, a2, a3, v3, v4);
}

uint64_t sub_1001C2FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100161FE0(&a9);
}

id sub_1001C2FDC()
{
  objc_class *v0;

  return objc_allocWithZone(v0);
}

uint64_t sub_1001C2FE4(uint64_t a1)
{
  return swift_allocObject(a1, 48, 7);
}

char *GKGameModeListener.__allocating_init(handler:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return GKGameModeListener.init(handler:)(a1, a2);
}

char *GKGameModeListener.init(handler:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  uint32_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  int v49;
  _QWORD v51[2];
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  objc_class *ObjectType;
  uint64_t v57;
  uint64_t v58;
  _QWORD aBlock[5];
  uint64_t v60;
  int out_token;
  objc_super v62;

  v3 = v2;
  v58 = a2;
  v55 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  v57 = type metadata accessor for Logger(0);
  v54 = *(_QWORD *)(v57 - 8);
  v4 = __chkstk_darwin(v57);
  v51[0] = (char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v53 = (char *)v51 - v6;
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100162164();
  v11 = v10 - v9;
  v12 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v12);
  sub_100162164();
  v15 = v14 - v13;
  v16 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v16);
  sub_100162164();
  v19 = v18 - v17;
  *(_DWORD *)&v3[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken] = -1;
  v52 = OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationQueue;
  v51[1] = sub_100162B54();
  v20 = v3;
  static DispatchQoS.default.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_100162B90();
  v22 = sub_100161BD0(&qword_100314970);
  v23 = sub_100161C10();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v12, v21);
  v24 = v7;
  v25 = v53;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v24);
  v26 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000029, 0x80000001002970A0, v19, v15, v11, 0);
  *(_QWORD *)&v3[v52] = v26;
  v27 = static GKLog.daemon.getter(v26);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.info.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)sub_100165DA4(2);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "GKGameModeListener: Initializing", v30, 2u);
    sub_100165D98((uint64_t)v30);
  }

  v31 = *(void (**)(char *, uint64_t))(v54 + 8);
  v32 = v57;
  v31(v25, v57);
  v33 = &v20[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeChangedHandler];
  v34 = v58;
  *(_QWORD *)v33 = v55;
  *((_QWORD *)v33 + 1) = v34;
  swift_retain(v34);

  v62.receiver = v20;
  v62.super_class = ObjectType;
  v35 = (char *)objc_msgSendSuper2(&v62, "init");
  out_token = -1;
  v36 = *(void **)&v35[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationQueue];
  v37 = swift_allocObject(&unk_1002C8698, 24, 7);
  swift_unknownObjectWeakInit(v37 + 16, v35);
  aBlock[4] = sub_1001C36D0;
  v60 = v37;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001C3A44;
  aBlock[3] = &unk_1002C86B0;
  v38 = _Block_copy(aBlock);
  v39 = v60;
  v40 = v35;
  v41 = v36;
  swift_release(v39);
  v42 = notify_register_dispatch("com.apple.system.console_mode_changed", &out_token, v41, v38);
  _Block_release(v38);

  if (v42 || (v49 = out_token, out_token == -1))
  {
    v44 = (char *)v51[0];
    v45 = static GKLog.daemon.getter(v43);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)sub_100165DA4(8);
      *(_DWORD *)v48 = 67109120;
      LODWORD(aBlock[0]) = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "GKGameModeListener: Failed to register for game mode changed notification, status: %u", v48, 8u);
      sub_100165D98((uint64_t)v48);
    }
    swift_release(v34);

    v31(v44, v32);
  }
  else
  {

    swift_release(v34);
    *(_DWORD *)&v40[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken] = v49;
  }
  return v40;
}

uint64_t sub_1001C34D8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001C34FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _BYTE v21[24];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v21[-v8 - 8];
  a2 += 16;
  swift_beginAccess(a2, v21, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v11 = (void *)Strong;
    v12 = static GKLog.daemon.getter(Strong);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "GKGameModeListener: Received game mode changed notification", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_1001C36D8();

  }
  else
  {
    v16 = static GKLog.daemon.getter(0);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "GKGameModeListener: Received game mode changed notification after event stream was deallocated name", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
}

void sub_1001C36D0(uint64_t a1)
{
  uint64_t v1;

  sub_1001C34FC(a1, v1);
}

uint64_t sub_1001C36D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BOOL8 is_valid_token;
  uint64_t state;
  int v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  void (*v30)(BOOL);
  uint64_t v31;
  _BYTE v32[12];
  _BOOL4 v33;
  uint64_t v34;
  uint64_t state64;
  int v36;
  int v37;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v4);
  v9 = &v32[-v8];
  __chkstk_darwin(v7);
  v11 = &v32[-v10];
  v12 = OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken;
  is_valid_token = notify_is_valid_token(*(_DWORD *)(v1
                                                   + OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken));
  if (is_valid_token)
  {
    state64 = 0;
    state = notify_get_state(*(_DWORD *)(v1 + v12), &state64);
    if ((_DWORD)state)
    {
      v15 = state;
      v16 = static GKLog.daemon.getter(state);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v19 = 67109120;
        v36 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "GKGameModeListener: notify_get_state() failed with error %u", v19, 8u);
        swift_slowDealloc(v19, -1, -1);
      }

      return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v9, v2);
    }
    else
    {
      v25 = state64;
      v26 = static GKLog.daemon.getter(state);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v33 = v25 != 0;
        v29 = swift_slowAlloc(18, -1);
        *(_DWORD *)v29 = 134218240;
        swift_beginAccess(&state64, &v36, 0, 0);
        v34 = state64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &state64);
        *(_WORD *)(v29 + 12) = 1024;
        LODWORD(v34) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 4);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "GKGameModeListener: Game Mode Status is now %lld, calling game mode changed handler with isActive=%{BOOL}d", (uint8_t *)v29, 0x12u);
        swift_slowDealloc(v29, -1, -1);
      }

      (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v11, v2);
      v30 = *(void (**)(BOOL))(v1
                                        + OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeChangedHandler);
      v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeChangedHandler + 8);
      swift_retain(v31);
      v30(v25 != 0);
      return swift_release(v31);
    }
  }
  else
  {
    v21 = static GKLog.daemon.getter(is_valid_token);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "GKGameModeListener: Invalid game mode changed notify token", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_1001C3A44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_1001C3A80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C3A90(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id GKGameModeListener.__deallocating_deinit()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  objc_super v16;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100162164();
  v7 = v6 - v5;
  v9 = static GKLog.daemon.getter(v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)sub_100165DA4(2);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "GKGameModeListener: Deallocating", v12, 2u);
    sub_100165D98((uint64_t)v12);
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  v13 = OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken;
  v14 = *(_DWORD *)&v1[OBJC_IVAR____TtC14GameDaemonCore18GKGameModeListener_gameModeNotificationToken];
  if (v14 != -1)
  {
    notify_cancel(v14);
    *(_DWORD *)&v1[v13] = -1;
  }
  v16.receiver = v1;
  v16.super_class = ObjectType;
  return objc_msgSendSuper2(&v16, "dealloc");
}

void GKGameModeListener.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("GameDaemonCore.GKGameModeListener", 33, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1001C3CA4(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2);
}

uint64_t type metadata accessor for GKGameModeListener()
{
  return objc_opt_self(_TtC14GameDaemonCore18GKGameModeListener);
}

uint64_t sub_1001C3CE8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C3D0C(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

_QWORD *sub_1001C3D20(_QWORD *result)
{
  *result = ++qword_10031B900;
  return result;
}

uint64_t sub_1001C3D3C(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, _QWORD *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v17;
  mach_port_t reply_port;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  mach_msg_header_t msg;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  NDR_record_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  int v50;

  v30 = 1;
  v31 = a4;
  v32 = 16777472;
  v33 = a5;
  v34 = NDR_record;
  v17 = *a3;
  v35 = a2;
  v36 = v17;
  v37 = a5;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B000000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            v21 = v33;
            if (v33 == v47)
            {
              v20 = 0;
              v22 = *(_DWORD *)&v34.mig_vers;
              *a3 = v38;
              v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port)
              v20 = 4294966996;
            else
              v20 = HIDWORD(v31);
          }
        }
        else
        {
          v20 = 4294966996;
        }
      }
      else
      {
        v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t sub_1001C3F94(mach_port_t a1, unsigned int a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  mach_port_t reply_port;
  uint64_t v9;
  uint64_t v10;
  mach_msg_header_t msg;
  NDR_record_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = a3[5];
  v19 = a3[4];
  v20 = v4;
  v5 = a3[7];
  v21 = a3[6];
  v22 = v5;
  v6 = a3[1];
  v15 = *a3;
  v16 = v6;
  v7 = a3[3];
  v17 = a3[2];
  v13 = NDR_record;
  v14 = a2;
  v18 = v7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B100000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    v10 = 4294966995;
    goto LABEL_17;
  }
  v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0)
    goto LABEL_17;
  if (msg.msgh_size != 36)
    goto LABEL_17;
  if (msg.msgh_remote_port)
    goto LABEL_17;
  v10 = v14;
  if (v14)
    goto LABEL_17;
  return v10;
}

uint64_t sub_1001C4120(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, _QWORD *a9, _DWORD *a10)
{
  mach_port_t reply_port;
  uint64_t v13;
  uint64_t v14;
  int v15;
  mach_msg_header_t msg;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  NDR_record_t v22;
  _BYTE v23[28];
  int v24;

  v18 = 1;
  v19 = a6;
  v20 = 16777472;
  v21 = a7;
  v22 = NDR_record;
  *(_DWORD *)v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  v24 = a7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B200000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port)
              v14 = 4294966996;
            else
              v14 = HIDWORD(v19);
          }
        }
        else
        {
          v14 = 4294966996;
        }
      }
      else
      {
        v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t sub_1001C430C(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v15;
  int v16;
  mach_msg_header_t msg;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B300000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            v12 = v18;
            if (!v18)
            {
              v15 = v20;
              *a2 = v19;
              *a3 = v15;
              v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port)
            v13 = 1;
          else
            v13 = v18 == 0;
          if (v13)
            v12 = 4294966996;
          else
            v12 = v18;
          goto LABEL_23;
        }
      }
      v12 = 4294966996;
    }
    else
    {
      v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

void sub_1001C4484(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) - 1224239923 * ((-2 - ((a1 | 0xAACC30C4) + (~(_DWORD)a1 | 0x5533CF3B))) ^ 0xA78032EC);
  __asm { BR              X10 }
}

void sub_1001C45A0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a1 + a2) = 517884438;
}

void sub_1001C5548(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) ^ (1225351577 * ((-2 - ((a1 | 0x21ABC784) + (~(_DWORD)a1 | 0xDE54387B))) ^ 0xFDCEE06D));
  __asm { BR              X10 }
}

uint64_t sub_1001C561C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v12 = 1755732067 * (&a4 ^ 0xDEC6BDDB);
  a7 = &STACK[0x509D13A7D8C2F400];
  a8 = v12 ^ 0x1F8BFA88;
  a4 = &STACK[0x3F8123127DDA1A64];
  a5 = v11;
  a6 = (v10 - 194) ^ v12;
  v13 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v10 - 375)) - 4))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * (((*(_DWORD *)(v11 - 0x31BC703A95C2A144) == v8)
                                                        * ((v10 + 779) ^ 0x36F)) ^ v10))
                                          - 8))(v13);
}

uint64_t sub_1001C56E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * (((a11 != v11) * ((v13 ^ 0x50B) + 30)) ^ v13)) - 8))();
}

uint64_t sub_1001C5728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = (v13 + v12);
  *(_BYTE *)(v11 + v17) = *(_BYTE *)(a9 + v17) ^ 0xC1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((446 * ((int)v17 + 1 < (a11 ^ v14))) ^ v16)) - 8))();
}

void sub_1001C5770(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(*(_QWORD *)(v3 + 24) - 0x8DE5192BDC53166) = v1;
  *(_DWORD *)(v4 - 0x18D77CDD39E8CCF6) = v2;
  *(_DWORD *)v3 = *a1;
}

void sub_1001C57D8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) - 3804331 * (((a1 | 0x51A664) - (a1 & 0x51A664)) ^ 0x7E848392);
  __asm { BR              X9 }
}

uint64_t sub_1001C58A8@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v17;

  v14 = 1759421093
      * ((2 * ((&a5 ^ 0x852F369) & 0x163ED650) - (&a5 ^ 0x852F369) + 1774266795) ^ 0xD2EE6A96);
  v17 = *a1 - v12 + *(_DWORD *)(v8 - 0x31BC703A95C2A14CLL) - 681732506;
  a8 = v13 - v14 + 840;
  a5 = v17 - v14 + 891494473;
  a6 = v14 + 1045653964;
  a7 = v8;
  v15 = ((uint64_t (*)(int *))(*(_QWORD *)(a2 + 8 * (v13 ^ 0x1BF)) - 8))(&a5);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v11
                                                      + 8 * (((*v9 == v10) * (((v13 - 124) | 0xC8) ^ 0x421)) ^ v13))
                                          - 8))(v15);
}

uint64_t sub_1001C59A4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((*(_QWORD *)(v0 + 8) == 0x248771FDFB9E9BA5) ^ (v1 + 56)) & 1)
                                * (v1 + 505)) ^ v1)))();
}

uint64_t sub_1001C59F0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;

  *(_QWORD *)(v1 - 0x248771FDFB9E9BA5) = (*v2 + a1) + *(_QWORD *)(v4 - 0x31BC703A95C2A15CLL) + 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((1516 * (*v5 == v6)) ^ (v3 - 76))) - 8))();
}

void sub_1001C5A50(int a1@<W8>)
{
  int v1;
  _DWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(v3 - 0x31BC703A95C2A15CLL);
  v6 = *v2 + a1;
  *(_BYTE *)(v5 + v6) = (HIBYTE(v1) ^ 0x3B) - ((2 * (HIBYTE(v1) ^ 0x3B)) & 0x83) - 63;
  *(_BYTE *)(v5 + v6 + 1) = (BYTE2(v1) ^ 0x74) - 2 * ((BYTE2(v1) ^ 0x74) & 0xC3 ^ BYTE2(v1) & 2) - 63;
  *(_BYTE *)(v5 + v6 + 2) = (BYTE1(v1) ^ 0x8D) - 2 * ((BYTE1(v1) ^ 0x8D) & 0xC3 ^ BYTE1(v1) & 2) - 63;
  *(_BYTE *)(v5 + v6 + 3) = v1 ^ 0xC0;
  v7 = *(_QWORD *)(v3 - 0x31BC703A95C2A15CLL);
  v8 = v4 - ((2 * v4 + 112929980) & 0x426471E) - 646923795;
  v9 = ((2 * (a1 + *v2 + 4)) & 0x6E37B6EC) + ((a1 + *v2 + 4) ^ 0x371BDB76) - 924572534;
  *(_BYTE *)(v7 + v9) = (HIBYTE(v8) ^ 2) - ((v8 >> 23) & 0x82) - 63;
  *(_BYTE *)(v7 + v9 + 1) = (BYTE2(v8) ^ 0x13) - ((2 * (BYTE2(v8) ^ 0x13)) & 0x83) - 63;
  *(_BYTE *)(v7 + v9 + 2) = (BYTE1(v8) ^ 0x23) - ((2 * (BYTE1(v8) ^ 0x23)) & 0x83) - 63;
  *(_BYTE *)(v7 + v9 + 3) = (v4 - ((2 * v4 - 68) & 0x1E) - 19) ^ 0x4E;
  *v2 = v10;
}

uint64_t sub_1001C5CB0(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;
  int v6;

  v1 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x63F19B7CB7021DA0);
  v2 = (*(_DWORD *)a1 - 235795823 * ((a1 + 1658036232 - 2 * (a1 & 0x62D3A008)) ^ 0x167EE951) - 511646474) & 0x1E7F195D;
  v4 = v1 - 517884438;
  v3 = v1 - 517884438 < 0;
  v5 = 517884438 - v1;
  if (v3)
    v4 = v5;
  v6 = ((v2 + 428) ^ 0xDF3FE504) + (v4 ^ 0x6EC23A6F) - 1308762668 + ((v2 ^ 0xDD8475D2) & (2 * v4)) < v2 + 2147483379;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_1002CCD00 + (v2 ^ 0x17D))
                                        + 8 * (((2 * v6) | (v6 << 6)) ^ v2)
                                        - 12)
                            - 12))();
}

uint64_t sub_1001C5DE0(uint64_t a1, unsigned int a2, int a3, unint64_t a4, int a5, unsigned int a6)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((*(_DWORD *)(*v8 + 4 * a6) != v6) * a3) ^ a5))
                            - ((a5 - 428) ^ a2 ^ a4)))();
}

void sub_1001C5E10()
{
  JUMPOUT(0x1001C5DA4);
}

uint64_t sub_1001C5E18(uint64_t result)
{
  *(_DWORD *)(result + 4) = 2137033667;
  return result;
}

uint64_t sub_1001C5E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  int v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((1495 * (((((v8 + 52) ^ 0x10D) << 31) & (a6 ^ v6)) != 0)) ^ v8))
                            - 12))();
}

uint64_t sub_1001C5E68()
{
  int v0;
  uint64_t v1;
  char v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((((v3 << (v2 + 31)) & v0) != 0) * v4) ^ v5)) - 12))();
}

uint64_t sub_1001C5E90@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  char v2;
  int v3;

  *(_DWORD *)(result + 4) = (a2 << ((4 * (v2 ^ 0xA2)) ^ 0xBD)) + v3 + 1734181732;
  return result;
}

void sub_1001C5EBC(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;

  v1 = 1178560073 * ((-2 - ((a1 | 0x5A50E64C) + (~(_DWORD)a1 | 0xA5AF19B3))) ^ 0x1F3B61D1);
  v2 = *(_DWORD *)(a1 + 40) ^ v1;
  if (*(_QWORD *)(a1 + 48) | *(_QWORD *)(a1 + 64))
    v3 = *(_DWORD *)(a1 + 24) + v1 == 632307271;
  else
    v3 = 1;
  v4 = !v3;
  __asm { BR              X9 }
}

uint64_t sub_1001C6014@<X0>(int a1@<W8>)
{
  _QWORD *v1;
  uint64_t v2;
  _BOOL4 v4;

  v4 = v1[1] != 0x237357D135FF68D5 && (v1[7] | v1[4]) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v4 * (a1 - 110)) ^ a1)) - 8))();
}

uint64_t sub_1001C6060@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *(_QWORD *)(v24 + 72);
  *(_DWORD *)(v23 - 0x237357D135FF68D5) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, char *, char *, char *))(v25
                                                                                             + 8
                                                                                             * ((16
                                                                                               * (v26 != 0x63F19B7CB7021DA4)) | ((v26 != 0x63F19B7CB7021DA4) << 6) | (a1 + 674))))(0x48247A308694277ELL, 0x63F19B7CB7021DA4, &a11, &a23, &a18, &a14, &a20);
}

uint64_t sub_1001C60F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 + 8 * (int)((((v10 + 1720738611) & 0x996F9FEF ^ 0x3B7) * (v8 == 0)) ^ (v10 - 36))) - (((v10 + 756) | 0x2Fu) ^ 0x3ABLL)))(a4 + a2, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1001C6250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;

  v26 = 13 * (v16 ^ 0x3BE);
  v27 = ((((v25 - 144) | 0x314D4C0E) - ((v25 - 144) & 0x314D4C0E)) ^ 0x8BD9346C) * v19;
  *(_QWORD *)(v25 - 136) = v22;
  *(_QWORD *)(v25 - 128) = a1;
  *(_DWORD *)(v25 - 144) = v27 + v16 - 381;
  *(_DWORD *)(v25 - 116) = v27 + v20 + (v26 ^ 0x1A72949A);
  v28 = v17;
  v29 = v18 != 0;
  ((void (*)(uint64_t))(*(_QWORD *)(v17 + 8 * (v16 - 822)) - 12))(v25 - 144);
  *(_DWORD *)(v25 - 128) = (v26 + 355) ^ (628203409 * ((v25 + 69161144 - 2 * ((v25 - 144) & 0x41F5148)) ^ 0x86975D7B));
  *(_QWORD *)(v25 - 144) = v21;
  *(_QWORD *)(v25 - 136) = v24;
  ((void (*)(uint64_t))(*(_QWORD *)(v28 + 8 * (v26 - 212)) - 4))(v25 - 144);
  *(_QWORD *)(v25 - 104) = v21;
  *(_DWORD *)(v25 - 128) = v26
                         + 1374699841 * ((((v25 - 144) | 0xD1E85911) - ((v25 - 144) & 0xD1E85911)) ^ 0xBC1C4118)
                         + 905;
  *(_QWORD *)(v25 - 144) = a16;
  *(_QWORD *)(v25 - 136) = v24;
  *(_QWORD *)(v25 - 120) = a15;
  *(_QWORD *)(v25 - 112) = a14;
  v30 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v28 + 8 * (v26 - 190)) - 12))(v25 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23 + 8 * (v26 ^ (496 * v29)))
                                          - (((v26 - 220) | 0x682u) ^ 0x68FLL)))(v30);
}

uint64_t sub_1001C6440()
{
  _DWORD *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  _DWORD *v10;

  v6 = 535753261 * (((((v5 - 144) | 0x615B03DC) ^ 0xFFFFFFFE) - (~(v5 - 144) | 0x9EA4FC23)) ^ 0x9450F20C);
  *(_DWORD *)(v5 - 120) = v1 + v6 + 609433000 + (v4 ^ 0x60F);
  *(_DWORD *)(v5 - 136) = (v4 - 383) ^ v6;
  *(_QWORD *)(v5 - 128) = v3;
  *(_QWORD *)(v5 - 144) = v8;
  result = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * (v4 - 1539)) - 8))(v5 - 144);
  *v10 = v9;
  *v0 = 1810546658;
  return result;
}

uint64_t sub_1001C6574(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  _BOOL4 v7;

  v1 = 1224239923 * (((a1 | 0x8C9528F6) - (_DWORD)a1 + (a1 & 0x736AD709)) ^ 0x7E26D521);
  v2 = a1[4] - v1;
  v3 = *a1 ^ v1;
  v5 = v3 - 1824165969;
  v4 = v3 - 1824165969 < 0;
  LODWORD(v6) = 1824165969 - v3;
  if (v4)
    v6 = v6;
  else
    v6 = v5;
  v7 = v6 != ((2 * (_DWORD)v6) & 0x9941EEA6);
  return (*(uint64_t (**)(void))((char *)*(&off_1002CCD00 + (int)(v2 - 281)) + 8 * (int)(((4 * v7) | (16 * v7)) ^ v2)
                                                                            - 12))();
}

void sub_1001C6624(int a1@<W8>)
{
  uint64_t v1;
  int v2;

  **(_DWORD **)(v1 - 0x63F19B7CB7021D9CLL) = (v2 + 1285617491) ^ 0x6A66B725;
  *(_DWORD *)(v1 - 0x63F19B7CB7021DA0) = a1 + 1;
}

void sub_1001C667C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __asm { BR              X8 }
}

uint64_t sub_1001C66F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  uint64_t v16;
  uint64_t v17;

  a16 = 108757529 * ((&a15 + 70320331 - 2 * (&a15 & 0x43100CB)) ^ 0xE4AD62E0) - 504207030;
  v17 = sub_10020807C(&a15);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((1959 * (a15 == 1810546658)) ^ 0x26Bu)))(v17);
}

uint64_t sub_1001C6784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, int a16, unsigned int a17)
{
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  a17 = 915 - 460628867 * ((((2 * &a15) | 0xF5C7D9FC) - &a15 + 85725954) ^ 0xB6756E83);
  a15 = &STACK[0x1706FB9DE6F6FC7C];
  sub_1001E0B18((uint64_t)&a15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8 * ((371 * (a16 == 1810546658)) ^ v17)))(v19, v20, v21, v22, v23, v24, v25, v26);
}

uint64_t sub_1001C6818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, unsigned int a18, uint64_t a19)
{
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v28 = (v19 + 1513451004) & 0x2FB;
  v29 = 1178560073 * ((((2 * &a15) | 0x52165FC6) - &a15 - 688599011) ^ 0x939F5781);
  a18 = v29 ^ 0x40C;
  a16 = v29 + 1160082353 * v26 + 359058754;
  a17 = a13;
  sub_1001DAAB8((uint64_t)&a15);
  v30 = 1178560073 * ((&a15 & 0x147230E4 | ~(&a15 | 0x147230E4)) ^ 0x5119B779);
  a18 = v30 ^ 0x40C;
  a17 = a13;
  a16 = v30 + 1160082353 * v25 + 359058754;
  sub_1001DAAB8((uint64_t)&a15);
  v31 = 1178560073 * (&a15 ^ 0xBA947862);
  a16 = v31 + 232;
  a19 = v23;
  a18 = ((v24 ^ 0xDB3BBBB9) + 1876872960 + ((v28 ^ 0xB6777518) & (2 * v24))) ^ v31;
  a17 = a13;
  sub_1001F2044((uint64_t)&a15);
  v32 = 1178560073 * ((&a15 - 1989463651 - 2 * (&a15 & 0x896B319D)) ^ 0x33FF49FF);
  a17 = a13;
  a19 = v21;
  a16 = v32 + 232;
  a18 = v32 ^ ((v22 ^ 0x5BBFCBBD) - 279265540 + ((2 * v22) & 0xB77F977A));
  sub_1001F2044((uint64_t)&a15);
  v33 = *v20;
  a17 = a13;
  a16 = v31 + 1160082353 * v33 + 359058754;
  a18 = v31 ^ 0x40C;
  sub_1001DAAB8((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 + 8 * ((1770 * (a15 == 1810546658)) ^ 0x173u)) - 8))(v34, v35, v36, v37, v38, v39, v40, v41, v27, a10);
}

uint64_t sub_1001C6A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, uint64_t a16, unsigned int a17, unsigned int a18, unsigned int a19, int a20)
{
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v22 = 460628867 * (((&a15 | 0x444BEFE9) + (~&a15 | 0xBBB41016)) ^ 0x8DD6D95);
  a15 = &STACK[0x5640F59D98E42E5B];
  a16 = a13;
  a18 = v22 - 2024873083;
  a19 = 2066553870 - v22;
  a17 = v22 + 666425997;
  v23 = sub_1002084F0((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((7 * (a20 == v20)) ^ 0x173)) - 8))(v23);
}

uint64_t sub_1001C6B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, unsigned int a15, unint64_t *a16, unint64_t *a17, unint64_t *a18, unsigned int a19)
{
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v21 = v19 ^ 0x98;
  a19 = ((v19 ^ 0x98) - 75) ^ (1225351577
                             * ((&a15 & 0x700A8397 | ~(&a15 | 0x700A8397)) ^ 0xAC6FA47E));
  a16 = a14;
  a17 = &STACK[0x18D77CDD39E8CD0A];
  a18 = &STACK[0x8DE5192BDC5317E];
  ((void (*)(unsigned int *))((char *)*(&off_1002CCD00 + (v19 ^ 0x147u)) - 4))(&a15);
  a15 = (v21 - 103) ^ (1374699841 * (&a15 ^ 0x6DF41809));
  a16 = &STACK[0x2DEB3A05C2E48BCD];
  a17 = a14;
  ((void (*)(unsigned int *))((char *)*(&off_1002CCD00 + (v21 ^ 0x15Du)) - 12))(&a15);
  a16 = a14;
  a15 = (v21 - 173) ^ (1755732067
                     * ((((2 * (&a15 ^ 0x1D0430E2)) | 0x9439548E)
                       - (&a15 ^ 0x1D0430E2)
                       + 904091065) ^ 0x9DE277E));
  v22 = sub_1001DC224((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8
                                                      * ((1988 * ((_DWORD)a17 == v21 + 1810546167)) ^ v21))
                                          - ((v21 - 120) ^ 0x177)))(v22);
}

uint64_t sub_1001C6D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  int v11;
  int v12;
  uint64_t v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8
                                        * ((57
                                          * (((v12 - 95) ^ (a11 == ((v12 + 1597965819) & 0xA0C0FBF7 ^ (v11 - 955)))) & 1)) ^ v12))
                            - 4))();
}

uint64_t sub_1001C6D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  int v12;
  int v13;
  uint64_t v14;
  int v15;

  v15 = (a12 ^ v13) + 1089336479 + (~((a12 ^ v13) << ((v12 ^ 0x2E) + 22)) | 0x7E2416C3);
  return ((uint64_t (*)(void))(*(_QWORD *)(v14
                                        + 8
                                        * ((31
                                          * (((2 * v15) & 0xFFDEFEFE ^ 0x81DAE83C) + (v15 ^ 0x3F028BE1) - 1744834572 != 401567603)) ^ v12))
                            - 12))();
}

uint64_t sub_1001C6DF0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((485
                                          * (v5 + v4 + (((a4 + 1073745493) | 0x10566329) ^ 0xD046F3E8) < ((a4 + 1073745493) ^ 0x40001048u))) ^ (a4 + 778)))
                            - 4))();
}

uint64_t sub_1001C6E70(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (int)((((a4 + 1526133657) & 0xF55F7BFB ^ (v4 + 1474))
                                               * ((unint64_t)(v5 - v6) > 0x1F)) ^ a4))
                            - 12))();
}

uint64_t sub_1001C6EB4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v6
                                                     + 8
                                                     * ((((((a4 + 482) ^ (v5 < 0x20)) & 1) == 0)
                                                       * (v4 + ((a4 + 1079266637) | 0x10022248) + 771)) ^ (a4 + 543)))
                                         - 8))(0);
}

uint64_t sub_1001C6F08(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v10 = (v4 + v7 + 491);
  v11 = *(_OWORD *)(v3 + v10 - 15);
  v12 = *(_OWORD *)(v3 + v10 - 31);
  v13 = v8 + v10;
  *(_OWORD *)(v13 - 15) = v11;
  *(_OWORD *)(v13 - 31) = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * ((15 * ((a2 ^ (v2 + 1485) ^ 0x638) != (v6 & 0xFFFFFFE0))) ^ (v5 + a2 + 928)))
                            - 12))();
}

uint64_t sub_1001C6F74(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;

  return (*(uint64_t (**)(void))(v6 + 8 * (((((a5 - 1078) ^ 9) + ((a5 - 1078) | 0x411) - 1954) * (v5 == a1)) ^ a5)))();
}

uint64_t sub_1001C6FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  char v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v9 + 8 * (a6 ^ (1015 * ((v7 & 0x18) == 0))))
                                                  - ((2 * (a6 ^ (v6 + 1782) ^ (v6 + 526))) ^ 0x5BELL)))(a1, (v8 - a1));
}

uint64_t sub_1001C6FE8(int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 - 7 + (v7 + v6 - a1 - 2146402176)) = *(_QWORD *)(v4
                                                                              - 7
                                                                              + (v7 + v6 - a1 - 2146402176));
  return ((uint64_t (*)(_QWORD, _QWORD))(*(_QWORD *)(v10
                                                             + 8
                                                             * (((a1 - (v5 & 0xFFFFFFF8) == -8) * (a4 - 651)) ^ a4))
                                                 - 4))((v7 + v6 - a1 - 2146402184), v8 - (v5 & 0xFFFFFFF8));
}

uint64_t sub_1001C7044(unsigned int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a3 + a1) = *(_QWORD *)(v7 + a1);
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v8 + 8 * (((a6 == 0) * v6) ^ a4)) - 4))(a1 - 8);
}

uint64_t sub_1001C7074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((v8 + v5 + v6) * (v7 != a5)) ^ v8))
                            - (((v8 - 773) | 0x12Bu) ^ 0x1E7)))();
}

uint64_t sub_1001C70AC(uint64_t a1, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v8 + (a3 - v4 - 474 + v6 + a2)) = *(_BYTE *)(v5 + (a3 - v4 - 474 + v6 + a2));
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((1892 * (a2 - 1 != v3)) ^ (v7 + a3 + 948))) - 12))();
}

uint64_t sub_1001C70F0@<X0>(int a1@<W3>, int a2@<W8>)
{
  int v2;
  void (*v3)(_BYTE *);
  _DWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[4];
  unsigned int v10;
  uint64_t v11;

  v5 = 7 * (a1 ^ 0x1DE);
  *v4 = a2;
  v11 = v8;
  v10 = v5
      + (((v9 | 0x3211D2A2) - v9 + (v9 & 0xCDEE2D58)) ^ 0x38E5DC8D) * v2
      + 889;
  v3(v9);
  v10 = (v5 ^ 0x318) + ((v9 + 581886662 - 2 * (v9 & 0x22AEE2C6)) ^ 0x285AECE9) * v2 + 641;
  v11 = v7;
  v3(v9);
  return 0;
}

uint64_t sub_1001C71F0(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v1 = 1374699841 * ((((2 * a1) | 0x4FD35BAC) - a1 + 1477857834) ^ 0xCA1DB5DF);
  v2 = *(_DWORD *)a1 ^ v1;
  v3 = *(_DWORD *)(a1 + 16) + v1;
  if (v3 < 0)
    v3 = -v3;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x63F19B7CB7021DA0);
  v6 = v4 - 517884438;
  v5 = v4 - 517884438 < 0;
  v7 = 517884438 - v4;
  if (!v5)
    v7 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)((char *)*(&off_1002CCD00 + (v2 ^ 0xBB))
                                        + 8
                                        * (v2 | (16 * (((v2 - 1) ^ (v3 >> 5 < v7)) & 1)))
                                        - 12)
                            - 8))();
}

uint64_t sub_1001C72B4@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t sub_1001C72BC@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  uint64_t v2;
  char v3;
  unsigned int v4;
  char v5;

  *(_DWORD *)(result + 4) = ((*(_DWORD *)(*(_QWORD *)(v2 - 0x63F19B7CB7021D9CLL) + 4 * v4) ^ 0x26C64076u) >> ((((v5 + 52) & 0xDB) + 69) & v3)) & 1 | a2;
  return result;
}

void sub_1001C7314(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = 1374699841 * (((_DWORD)a1 - 1542394297 - 2 * (a1 & 0xA410EE47)) ^ 0xC9E4F64E);
  v2 = *a1 + v1;
  __asm { BR              X14 }
}

uint64_t sub_1001C73E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD v8[2];
  uint64_t v9;

  v5 = v2 - (((((v3 - 13) | 0x102) ^ 0x1707F631) + v4) & 0x6FDA7728) - 1015990969;
  v6 = 1755732067 * ((-432722614 - (v8 | 0xE6352D4A) + (v8 | 0x19CAD2B5)) ^ 0xC70C6F6E);
  v9 = v1;
  v8[0] = v5 ^ v6;
  v8[1] = (v3 - 306) ^ v6;
  return ((uint64_t (*)(_DWORD *))(*(_QWORD *)(a1 + 8 * (v3 - 1047)) - 4))(v8);
}

void sub_1001C755C(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_1001C75E4()
{
  int v0;
  unsigned int v1;

  return v0 ^ v1;
}

void sub_1001C8230(uint64_t a1)
{
  int v1;
  _BOOL4 v2;

  v1 = *(_DWORD *)(a1 + 44) - 1224239923 * (((a1 | 0x1FD8AEE4) - a1 + (a1 & 0xE027511B)) ^ 0xED6B5333);
  v2 = *(_QWORD *)(a1 + 32) > *(_QWORD *)a1;
  __asm { BR              X9 }
}

uint64_t sub_1001C833C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v0 ^ (2039 * (v1 != 0x5D4801E5)))) - 12))();
}

uint64_t sub_1001C8398()
{
  unsigned int v0;
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;

  v11 = v0 > v5;
  *(_BYTE *)(v10 + (v7 - 704230031)) = *(_BYTE *)(*(_QWORD *)(v8 + 8 * (v2 ^ 0x117))
                                                              + (((_BYTE)v7 + 113) & 0xF)) ^ *(_BYTE *)(v1 + (v7 - 704230031)) ^ (((v7 + 113) & 0xF) * ((v2 + 80) ^ 0xE8)) ^ *(_BYTE *)(*(_QWORD *)(v8 + 8 * (v2 ^ 0x1E1)) + (((_BYTE)v7 + 113) & 0xF) - 4) ^ *(_BYTE *)(*(_QWORD *)(v8 + 8 * (v2 ^ 0x1FE)) + (((_BYTE)v7 + 113) & 0xF) - 7);
  if (v11 == v7 + 1878700902 < v3)
    v11 = v7 + 1878700902 < v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((v11 * v6) ^ v2)) - 12))();
}

uint64_t sub_1001C844C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((99
                                          * (((v1 << (v0 + 96)) & 0xE7FAD8CE ^ 0xA29000CA)
                                           + (v1 ^ 0xAEB56D82)
                                           + 2139551317 != 1938055868)) ^ v0))
                            - 4))();
}

uint64_t sub_1001C84C8@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v4
                                                               + 8
                                                               * ((7
                                                                 * (a2 + v3 + ((v2 - 808) ^ 0x75Bu) + 201495448 - 1032 > 7)) ^ v2))
                                                   - 4))(a1, 201495448);
}

uint64_t sub_1001C852C(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1923 * ((a2 + a5 - 16) > 0xFFFFFFEF)) ^ a4)) - 12))();
}

uint64_t sub_1001C8564@<X0>(int a1@<W1>, int a2@<W3>, int a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BOOL4 v20;

  v10 = (a3 + v7 + a1);
  v11 = v10 + v9;
  v12 = ((577 * (a2 ^ 0x351)) ^ 0x6CC) & v10;
  v13 = v5 - v11;
  v14 = (v12 | v6) - v11;
  v15 = (v12 | v4) - v11;
  v16 = v13 + v12;
  v20 = v3 - v9 >= ((a2 + 183) ^ 0x419uLL) && v16 > 0xF && (unint64_t)(v14 + 1) > 0xF && v15 > 0xF;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (a2 ^ (4 * v20))) - 12))();
}

uint64_t sub_1001C85E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 + 8 * (v3 ^ (37 * (v4 > 0xF))))
                                                                    - ((v3 - 1330) ^ 0x195)))(a1, a2, a3, 0);
}

uint64_t sub_1001C861C@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W7>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int8x16_t v60;
  uint64_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16x4_t v65;
  int8x16x4_t v66;

  *(_DWORD *)(v59 - 128) = a2 + 4;
  *(_DWORD *)(v59 - 132) = a2 + 3;
  v65.val[1].i64[0] = ((_BYTE)a2 + 10) & 0xF;
  v65.val[1].i64[1] = ((_BYTE)a2 + 9) & 0xF;
  v65.val[2].i64[0] = ((_BYTE)a2 + 8) & 0xF;
  v65.val[2].i64[1] = ((_BYTE)a2 + 7) & 0xF;
  v65.val[3].i64[0] = ((_BYTE)a2 + 6) & 0xF;
  v65.val[3].i64[1] = ((_BYTE)a2 + 5) & 0xF;
  v60.i64[0] = 0x8787878787878787;
  v60.i64[1] = 0x8787878787878787;
  v61 = a1 + a4 + v58 - 431 + (a3 ^ 0x204u);
  v65.val[0].i64[0] = ((_BYTE)a1 + (_BYTE)a4 + (_BYTE)v58 + 81 + (a3 ^ 4)) & 0xF;
  v65.val[0].i64[1] = ((_BYTE)a2 + 11) & 0xF;
  v62.i64[0] = vqtbl4q_s8(v65, (int8x16_t)xmmword_100235560).u64[0];
  v66.val[0].i64[1] = *(_DWORD *)(v59 - 132) & 0xF;
  v66.val[1].i64[1] = ((_BYTE)a2 + 1) & 0xF;
  v66.val[2].i64[1] = ((_BYTE)a2 - 1) & 0xF;
  v66.val[3].i64[1] = ((_BYTE)a2 + 13) & 0xF;
  v66.val[0].i64[0] = *(_DWORD *)(v59 - 128) & 0xF;
  v66.val[1].i64[0] = ((_BYTE)a2 + 2) & 0xF;
  v66.val[2].i64[0] = a2 & 0xF;
  v66.val[3].i64[0] = ((_BYTE)a2 + 14) & 0xF;
  v62.i64[1] = vqtbl4q_s8(v66, (int8x16_t)xmmword_100235560).u64[0];
  v63 = vrev64q_s8(vmulq_s8(v62, v60));
  *(int8x16_t *)(*(_QWORD *)(v59 - 120) - 15 + v61) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v55 + (v61 & 0xF) - 15), *(int8x16_t *)(v53 - 15 + v61)), veorq_s8(*(int8x16_t *)((v61 & 0xF) + v56 - 14), *(int8x16_t *)(v54 + (v61 & 0xF) - 15))), vextq_s8(v63, v63, 8uLL));
  return (*(uint64_t (**)(uint64_t))(a53
                                            + 8
                                            * ((217 * (((a3 ^ 0xFFFFFC5B) & v57) != 16)) ^ a3 ^ 0xD9)))(v57);
}

void sub_1001C87A0()
{
  JUMPOUT(0x1001C8728);
}

uint64_t sub_1001C87A8(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  int v23;
  uint64_t v24;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24
                                                      + 8
                                                      * (int)(((((a1 == a4) ^ (v23 + 80)) & 1)
                                                             * ((v23 + 890670664) & 0xCAE975FD ^ 0x59B)) ^ v23))
                                          - 12))(a23);
}

uint64_t sub_1001C8800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  _BOOL4 v10;

  v10 = ((((a8 - 1141) | 0x11) ^ 0x199) & v8) == ((a8 - 1141) ^ 0x180);
  return (*(uint64_t (**)(void))(v9 + 8 * ((v10 | (8 * v10)) ^ a8)))();
}

uint64_t sub_1001C8840@<X0>(int a1@<W1>, int a2@<W3>, int a3@<W4>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  int8x16x4_t v66;

  *(_DWORD *)(v60 - 136) = v57;
  *(_QWORD *)(v60 - 128) = v61 - 7;
  *(_DWORD *)(v60 - 140) = v57 & 0xFFFFFFF8;
  *(_DWORD *)(v60 - 132) = -(v57 & 0xFFFFFFF8);
  v62 = -8 - a2;
  v63 = a4 + v59 + v58;
  v64 = (a4 + v59 + a1 + v62 + 8);
  v66.val[0].i64[0] = ((_BYTE)a4 + (_BYTE)v59 + (_BYTE)a1 + (_BYTE)v62 + 8) & 0xF;
  v66.val[0].i64[1] = (v63 - 78 + (_BYTE)v62 + 8) & 0xF;
  v66.val[1].i64[0] = (v63 - 79 + (_BYTE)v62 + 8) & 0xF;
  v66.val[1].i64[1] = (v63 - 80 + (_BYTE)v62 + 8) & 0xF;
  v66.val[2].i64[0] = (v63 + (_BYTE)v62 + (a3 ^ 0x3E) + 8) & 0xF;
  v66.val[2].i64[1] = (v63 - 82 + (_BYTE)v62 + 8) & 0xF;
  v66.val[3].i64[0] = (v63 - 83 + (_BYTE)v62 + 8) & 0xF;
  v66.val[3].i64[1] = (v63 - 84 + (_BYTE)v62 + 8) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v60 - 128) + v64) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v55 + (v64 & 0xF) - 7), *(int8x8_t *)(v53 - 7 + v64)), veor_s8(*(int8x8_t *)((v64 & 0xF) + v56 - 6), *(int8x8_t *)(v54 + (v64 & 0xF) - 7))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v66, (int8x16_t)xmmword_100235570), (int8x8_t)0x8787878787878787)));
  return (*(uint64_t (**)(__n128))(a53 + 8 * ((1414 * (*(_DWORD *)(v60 - 132) == v62)) ^ a3)))((__n128)xmmword_100235570);
}

void sub_1001C8998()
{
  JUMPOUT(0x1001C88A0);
}

uint64_t sub_1001C89A0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23
                                                      + 8
                                                      * ((765
                                                        * (((*(_DWORD *)(v24 - 136) == *(_DWORD *)(v24 - 140)) ^ (a2 - 114)) & 1)) ^ a2))
                                          - 12))(a23);
}

uint64_t sub_1001C89F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v14 = (a7 + 1589662710) & 0xA13FA9FF;
  *(_BYTE *)(v13 + (v14 ^ 0x8C7B9A63) + a6) = *(_BYTE *)(v10 + (((v14 ^ 0x8C7B9A63) + a6) & 0xFLL)) ^ *(_BYTE *)(v7 + (v14 ^ 0x8C7B9A63) + a6) ^ *(_BYTE *)(((((a7 - 10) ^ 0x63) + (_BYTE)a6) & 0xF) + v11 + 1) ^ *(_BYTE *)(v9 + ((((a7 - 10) ^ 0x63) + (_BYTE)a6) & 0xF)) ^ (-121 * (((v14 ^ 0x63) + a6) & 0xF));
  return (*(uint64_t (**)(void))(v12 + 8 * ((973 * (a6 - 1 != v8)) ^ (a7 + 497))))();
}

uint64_t sub_1001C8A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;

  v52 = *(_QWORD *)(a1 + 24);
  *(int8x16_t *)(v50 - 112) = veorq_s8(*(int8x16_t *)(*(_QWORD *)(a1 + 16) - 0x6AF2A8617E594F5), (int8x16_t)xmmword_100235580);
  if (v51)
    v53 = v52 == 0x6F16120776D4F6DCLL;
  else
    v53 = 1;
  v54 = v53;
  LODWORD(a24) = 2 * v49;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 + 8 * (int)(((((a5 ^ 0x4C7 ^ v54) & 1) == 0) * ((a5 - 11) ^ 0x54D)) ^ a5)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48);
}

uint64_t sub_1001C8B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  int v48;
  uint64_t v49;
  int v50;
  _BOOL4 v52;

  v52 = (((a24 & 0xF6) + (v50 ^ 0x7Bu) + 5) & 0xF) != 0
     || (a24 & 0x76FDCEF6) + (v50 ^ 0xBB7EE77B) == -1149311109;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 + 8 * (((v48 ^ 0x1FF) * v52) | v48)) - ((v48 + 836) ^ 0x53CLL)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48);
}

uint64_t sub_1001C8B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57)
{
  uint64_t v57;

  return ((uint64_t (*)(void))(*(_QWORD *)(v57
                                        + 8
                                        * ((148
                                          * (((2 * (a23 - (a25 & 0xE9F5A82A) + (a57 ^ 0x8ABFADEE))) & 0xE76FE9FE ^ 0xE165A82A)
                                           + (a57 ^ 0x874D25D2 ^ (a23 - (a25 & 0xE9F5A82A) + (a57 ^ 0x8ABFADEE)))
                                           - 1627598849 == 313836798)) ^ a57))
                            - 8))();
}

uint64_t sub_1001C8C20(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((1492 * (a1 + v2 - 1941435647 >= (v1 ^ 0x729u) - 521)) ^ v1 ^ 0x729)))();
}

uint64_t sub_1001C8C88(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4 + 8 * ((58 * (((((a3 - 520) | 0x400) - 1049) & v3) == 1941435648)) ^ a3)))();
}

uint64_t sub_1001C8CC0(int a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL4 v20;
  int v23;

  v9 = (a1 + v6 + a2);
  v10 = v8 + v9 + ((183 * (a3 ^ 0x216) + 1714579224) & 0x99CD97EF ^ 0x408);
  v11 = (a1 + v6) & 0xF;
  v12 = v11 - v9;
  v13 = v5 + v12;
  ++v11;
  v14 = v5 + v11;
  v15 = v4 + v12;
  v16 = v4 + v11;
  v17 = v3 + v12;
  v18 = v3 + v11;
  v20 = v14 > v8 && v13 < v10;
  if (v16 > v8 && v15 < v10)
    v20 = 1;
  v23 = v18 > v8 && v17 < v10 || v20;
  return (*(uint64_t (**)(void))(v7 + 8 * ((1432 * (v23 ^ 1)) ^ a3)))();
}

uint64_t sub_1001C8D64(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4
                                                                       + 8
                                                                       * ((30
                                                                         * (((v3 < 0x10) ^ (v2 - 18)) & 1)) | v2))
                                                           - ((v2 - 745) | 5u)
                                                           + 537))(a1, a2, 0);
}

uint64_t sub_1001C8DAC(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  uint64_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16x4_t v72;
  int8x16x4_t v73;

  v72.val[1].i64[0] = ((_BYTE)v60 - 1) & 0xF;
  v72.val[1].i64[1] = ((_BYTE)v60 + 14) & 0xF;
  v72.val[2].i64[0] = ((_BYTE)v60 + 13) & 0xF;
  v72.val[2].i64[1] = ((_BYTE)v60 + 12) & 0xF;
  v72.val[3].i64[0] = ((_BYTE)v60 + 11) & 0xF;
  v72.val[3].i64[1] = ((_BYTE)v60 + 10) & 0xF;
  v73.val[0].i64[0] = ((_BYTE)v60 + 9) & 0xF;
  v73.val[0].i64[1] = ((_BYTE)v60 + 8) & 0xF;
  v73.val[1].i64[0] = ((_BYTE)v60 + 7) & 0xF;
  v73.val[1].i64[1] = ((_BYTE)v60 + 6) & 0xF;
  v73.val[2].i64[0] = ((_BYTE)v60 + 5) & 0xF;
  v73.val[2].i64[1] = ((_BYTE)v60 + 4) & 0xF;
  v73.val[3].i64[0] = (v60 + 3) & 0xF;
  v73.val[3].i64[1] = (v60 + 2) & 0xF;
  v65.i64[0] = 0x505050505050505;
  v65.i64[1] = 0x505050505050505;
  v66.i64[0] = 0xC1C1C1C1C1C1C1C1;
  v66.i64[1] = 0xC1C1C1C1C1C1C1C1;
  v67 = a2 + v63 + a1 - 1292 + (v62 & 0xA52A13FF ^ 0x6E3);
  v72.val[0].i64[0] = ((_BYTE)a2 + (_BYTE)v63 + (_BYTE)a1 - 12 + (v62 ^ 0xE3)) & 0xF;
  v72.val[0].i64[1] = v60 & 0xF;
  v68.i64[0] = vqtbl4q_s8(v72, (int8x16_t)xmmword_100235560).u64[0];
  v68.i64[1] = vqtbl4q_s8(v73, (int8x16_t)xmmword_100235560).u64[0];
  v69 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v64 - 15 + v67), *(int8x16_t *)(v59 + (v67 & 0xF) - 15)), veorq_s8(*(int8x16_t *)(v58 + (v67 & 0xF) - 15), *(int8x16_t *)(v57 + (v67 & 0xF) - 15))));
  v70 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v69, v69, 8uLL), v66), vmulq_s8(v68, v65)));
  *(int8x16_t *)(v64 - 15 + v67) = vextq_s8(v70, v70, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(a57 + 8 * (int)((1662 * ((v61 & 0xFFFFFFF0) == 16)) ^ v62 & 0xA52A13FF))
                            - 8))();
}

void sub_1001C8F1C()
{
  JUMPOUT(0x1001C8E9CLL);
}

uint64_t sub_1001C8F28@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  char *v127;
  int v128;
  uint64_t v129;
  int v130;
  char *v131;
  unsigned int v132;
  char *v133;
  unsigned int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  unsigned int v182;
  unsigned __int8 *v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  int v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  uint64_t v206;
  unsigned int v207;
  int v208;
  char *v209;
  unsigned int v210;
  char *v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  char *v215;
  int v216;
  int v217;
  unint64_t v218;
  char *v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  unsigned int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  int v242;
  int v243;
  int v244;
  unsigned int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  unsigned int v253;
  int v254;
  unsigned int v255;
  int v256;
  int v257;
  unsigned int v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  int v271;
  int v272;
  unsigned int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  unsigned int v305;
  unsigned int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  unsigned int v312;
  int v313;
  int v314;
  unsigned int v315;
  unsigned int v316;
  int v317;
  int v318;
  int v319;
  unsigned int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  unsigned int v327;
  char *v328;
  char *v329;
  int v330;
  int v331;
  uint64_t v332;
  char *v333;
  int v334;
  int v335;
  char *v336;
  int v337;
  int v338;
  uint64_t v339;
  int v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  unsigned int v361;
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  int v365;
  int v366;
  uint64_t v367;
  int v368;
  int v369;
  __int16 v370;
  uint64_t v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  int v376;
  uint64_t v377;
  int v378;
  int v379;
  unsigned int v380;
  int v381;
  uint64_t v382;
  unsigned __int8 v383;
  int v384;
  int v385;
  __int16 v386;
  int v387;
  uint64_t v388;
  int v389;
  int v390;
  int v391;
  int v392;
  uint64_t v393;
  int v394;
  unsigned int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  uint64_t v400;
  __int16 v401;
  int v402;
  unsigned int v403;
  int v404;
  uint64_t v405;
  int v406;
  unsigned int v407;
  unsigned int v408;
  int v409;
  int v410;
  uint64_t v411;
  int v412;
  int v413;
  int v414;
  int v415;
  uint64_t v416;
  unsigned int v417;
  int v418;
  int v419;
  int v420;
  unsigned int v421;
  uint64_t v422;
  unsigned int v423;
  int v424;
  int v425;
  int v426;
  uint64_t v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  uint64_t v433;
  int v434;
  int v435;
  int v436;
  int v437;
  uint64_t v438;
  int v439;
  int v440;
  unsigned int v441;
  int v442;
  uint64_t v443;
  int v444;
  unsigned int v445;
  unsigned int v446;
  int v447;
  uint64_t v448;
  int v449;
  int v450;
  int v451;
  uint64_t v452;
  unsigned int v453;
  int v454;
  unsigned int v455;
  uint64_t v456;
  int v457;
  unsigned int v458;
  unsigned int v459;
  int v460;
  uint64_t v461;
  int v462;
  int v463;
  int v464;
  uint64_t v465;
  int v466;
  int v467;
  unsigned int v468;
  uint64_t v469;
  unsigned int v470;
  unsigned int v471;
  int v472;
  int v473;
  uint64_t v474;
  int v475;
  int v476;
  int v477;
  int v478;
  uint64_t v479;
  int v480;
  int v481;
  unsigned int v482;
  char *v483;
  int v484;
  char *v485;
  int v486;
  char *v487;
  int v488;
  char *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unsigned int v494;
  int v495;
  unsigned int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  unsigned int v504;
  unsigned int v505;
  int v506;
  unsigned int v507;
  int v508;
  int v509;
  int v510;
  unsigned int v511;
  int v512;

  v55 = v50 ^ 0x17B;
  v56 = ((v50 ^ 0x17B) + 842774236) & 0xCDC44C9D;
  *(_DWORD *)(v54 - 128) = v56;
  v57 = *(_QWORD *)(v53 + 8 * (v50 ^ 0x137)) - 4;
  v58 = *(unsigned __int8 *)(v57 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6DALL) ^ 0xD7));
  *(_DWORD *)(v54 - 200) = a1;
  v59 = (v58 ^ 0xCE) << 8;
  v60 = *(_QWORD *)(v53 + 8 * (v55 + 56));
  v61 = *(_QWORD *)(v53 + 8 * (v55 ^ 0xA1)) - 8;
  HIDWORD(v63) = *(unsigned __int8 *)(v61 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6CFLL) ^ 0x49));
  LODWORD(v63) = (HIDWORD(v63) ^ 0xD0) << 24;
  v62 = v63 >> 26;
  v64 = v59 | ((*(unsigned __int8 *)(v60 + (*v52 ^ 0xB1)) ^ (v56 + 23)) << 24);
  v65 = *(_QWORD *)(v53 + 8 * (v55 - 16)) - 12;
  v66 = *(unsigned __int8 *)(v60 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6D0) ^ 0xB8));
  HIDWORD(v63) = *(unsigned __int8 *)(v61 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6D3) ^ 0x6BLL));
  LODWORD(v63) = (HIDWORD(v63) ^ 0xD0) << 24;
  LOBYTE(v59) = *(_BYTE *)(v57 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6CELL) ^ 0x2ELL));
  v67 = ((v63 >> 26) ^ 0x53) << 16;
  HIDWORD(v63) = *(unsigned __int8 *)(v61 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6DBLL) ^ 0x47));
  LODWORD(v63) = (HIDWORD(v63) ^ 0xD0) << 24;
  v68 = v64 & 0xFF00FF00 | (*(_BYTE *)(v65 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6D9) ^ 0xECLL))
                                           - 73) ^ 9 | (((v63 >> 26) ^ 0x1E) << 16);
  v69 = v67 | ((*(unsigned __int8 *)(v57 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6D2) ^ 0x77)) ^ 1) << 8);
  v70 = ((v62 ^ 0xFB) << 16) | ((v66 ^ 0x98) << 24) | ((v59 ^ 0xB) << 8);
  HIDWORD(v63) = *(unsigned __int8 *)(v61 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6D7) ^ 0xCBLL));
  LODWORD(v63) = (HIDWORD(v63) ^ 0xD0) << 24;
  LODWORD(v61) = *(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6CDLL) ^ 0x36));
  LOBYTE(v56) = *(_BYTE *)(v65 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6D1) ^ 0xB5));
  v71 = ((*(_BYTE *)(v65 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6D5) ^ 0xA9)) - 73) | ((*(unsigned __int8 *)(v57 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6D6) ^ 0x30)) ^ 0xFB) << 8)) & 0xFF00FFFF | (((v63 >> 26) ^ 0xBA) << 16) | ((*(unsigned __int8 *)(v60 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6D8) ^ 0x35)) ^ 0xFFFFFFEF) << 24);
  v72 = v69 | ((*(unsigned __int8 *)(v60 + (*(unsigned __int8 *)(v51 - 0x6F16120776D4F6D4) ^ 0xBFLL)) ^ 0xF6) << 24);
  v73 = *(_QWORD *)(v53 + 8 * (v55 ^ 0x17));
  v74 = *(_QWORD *)(v53 + 8 * (v55 ^ 0x87)) - 12;
  v75 = *(_DWORD *)(v74 + 4 * (v62 ^ 0x61u)) ^ *(_DWORD *)(v73 + 4 * ((v61 - 73) ^ 0xFDu));
  v76 = v66 ^ 0xDu;
  v77 = *(_QWORD *)(v53 + 8 * (v55 + 76)) - 4;
  v78 = ((v75 ^ 0x3C6D31A4) - 2087995964 - 2 * ((v75 ^ 0x3C6D31A4) & 0x38BB5DF ^ v75 & 0x1B)) ^ *(_DWORD *)(v77 + 4 * v76);
  LODWORD(v76) = v78 - ((2 * v78) & 0x4B1590FA);
  v79 = *(_QWORD *)(v53 + 8 * (v55 - 84));
  LODWORD(v493) = v68;
  HIDWORD(v492) = v70 & 0xFFFFFF00 | (v61 - 73) ^ 0x2A;
  LOBYTE(v56) = (v56 - 73) ^ 0xA8;
  v80 = v72 & 0xFFFFFF00 | v56;
  LODWORD(v492) = v71;
  v389 = *(_DWORD *)(v79 + 4 * (v59 ^ 0x33u)) ^ v68 ^ (v76 + 629852285);
  LODWORD(v57) = v389 ^ v71 ^ 0x4D;
  *(_DWORD *)(v54 - 184) = v389 ^ v71;
  *(_DWORD *)(v54 - 156) = v57 ^ v80;
  v81 = v57;
  v383 = v389 ^ v71 ^ 0x4D;
  LODWORD(v57) = v57 ^ v80 ^ (HIDWORD(v492) - 2 * (HIDWORD(v492) & 0x5187B81F ^ ((v61 - 73) ^ 0x2A) & 0x12) + 1367848973);
  v406 = BYTE1(v57);
  v414 = BYTE2(v57);
  LODWORD(v76) = *(_DWORD *)(v74 + 4 * (BYTE2(v57) ^ 0x39u)) ^ *(_DWORD *)(v79 + 4 * (BYTE1(v57) ^ 0x42u));
  v82 = v57 ^ 0xEB7095A4;
  v420 = v57;
  LODWORD(v57) = ((v76 ^ 0x5AC67AE8) - 2 * ((v76 ^ 0x5AC67AE8) & 0x43218333 ^ v76 & 2) + 1126269745) ^ *(_DWORD *)(v73 + 4 * (v57 ^ 0x24u));
  *(_DWORD *)(v54 - 208) = HIBYTE(v82);
  LODWORD(v60) = v389 ^ *(_DWORD *)(v77 + 4 * (HIBYTE(v82) ^ 0x65)) ^ (v57 - ((2 * v57) & 0x7176B88) - 2087995964);
  HIDWORD(v491) = v80;
  LODWORD(v76) = v60 ^ 0x568E88F3;
  *(_DWORD *)(v54 - 152) = v60;
  LODWORD(v57) = v60 ^ 0x568E88F3 ^ (v80 - 2 * (v80 & 0x568E88FF ^ v56 & 0xC) + 1452181747);
  LOWORD(v61) = v60 ^ 0x88F3 ^ (v80 - 2 * (v80 & 0x88FF ^ v56 & 0xC) - 30477);
  *(_DWORD *)(v54 - 132) = v57;
  v434 = ((v57 ^ v82) >> 16);
  v430 = (BYTE1(v61) ^ BYTE1(v82));
  v83 = *(_DWORD *)(v74 + 4 * (v434 ^ 0x2Eu)) ^ *(_DWORD *)(v79
                                                            + 4
                                                            * (((unsigned __int16)(v61 ^ v82) >> 8) ^ 0x9Bu)) ^ 0x5AC67AE8;
  v509 = v60 ^ 0xF3 ^ (v80 - 2 * (v80 ^ v56 & 0xC) - 13) ^ v82;
  v84 = (v83 - ((2 * v83) & 0x86430662) + 1126269745) ^ *(_DWORD *)(v73 + 4 * (v509 ^ 0xD2u));
  v85 = v84 - ((2 * v84) & 0x7176B88);
  v86 = v57 ^ v82 ^ 0x6C6427AA;
  *(_DWORD *)(v54 - 216) = (v57 ^ v82) >> 24;
  v87 = (v85 - 2087995964) ^ *(_DWORD *)(v77 + 4 * (((v57 ^ v82) >> 24) ^ 0x69));
  v88 = v87 ^ v81 ^ 0x8E0E0FA7;
  v463 = v87 ^ v81;
  v466 = v88 ^ v57;
  v89 = ((v466 ^ 0x1488024D) - 2 * ((v466 ^ 0x1488024D) & 0x18C386F3 ^ v466 & 0x10) + 415467235) ^ v86 ^ 0x9547167F;
  v472 = BYTE2(v89);
  v481 = ((unsigned __int16)(((v88 ^ v61 ^ 0x24D)
                                             - 2 * ((v88 ^ v61 ^ 0x24D) & 0x86F3 ^ (v88 ^ v61) & 0x10)
                                             - 31005) ^ v86 ^ 0x167F) >> 8);
  v90 = *(_DWORD *)(v79 + 4 * (v481 ^ 0x3Au)) ^ *(_DWORD *)(v74 + 4 * (BYTE2(v89) ^ 0x89u));
  v477 = (((v88 ^ v61 ^ 0x4D) - 2 * ((v88 ^ v61 ^ 0x4D) & 0xF3 ^ (v88 ^ v61) & 0x10) - 29) ^ v86);
  v91 = ((v90 ^ 0x5AC67AE8) - 2 * ((v90 ^ 0x5AC67AE8) & 0x43218337 ^ v90 & 6) + 1126269745) ^ *(_DWORD *)(v73 + 4 * (v477 ^ 0xE4u));
  HIDWORD(v493) = HIBYTE(v89);
  v92 = (v91 - ((2 * v91) & 0x7176B88) - 2087995964) ^ *(_DWORD *)(v77 + 4 * (HIBYTE(v89) ^ 0x1D));
  v445 = v87 ^ v60;
  v498 = (v92 - ((2 * v92) & 0x2D306C6) - 2123791517) ^ v87 ^ v60;
  *(_DWORD *)(v54 - 248) = v498 ^ 0x81698363;
  v511 = v498 ^ 0x81698363 ^ v463;
  v93 = ((v511 ^ 0xFE25CD6D) - ((2 * (v511 ^ 0xFE25CD6D)) & 0x31870DC6) + 415467235) ^ v86;
  v94 = ((unsigned __int16)(((v511 ^ 0xCD6D) - ((2 * (v511 ^ 0xCD6D)) & 0xDC6) - 31005) ^ v86) >> 8);
  *(_DWORD *)(v54 - 224) = v94;
  v95 = *(_DWORD *)(v79 + 4 * (v94 ^ 0x6Fu));
  *(_DWORD *)(v54 - 232) = BYTE2(v93);
  v96 = v95 ^ *(_DWORD *)(v74 + 4 * (BYTE2(v93) ^ 0xA8u)) ^ 0x5AC67AE8;
  v496 = HIBYTE(v93);
  v97 = (v96 - ((2 * v96) & 0x7176B88) - 2087995964) ^ *(_DWORD *)(v77 + 4 * (HIBYTE(v93) ^ 0x85));
  v495 = v93;
  v98 = v93;
  v99 = (v97 - ((2 * v97) & 0x86430662) + 1126269745) ^ *(_DWORD *)(v73 + 4 * (v93 ^ 0x25u));
  v507 = v511 ^ v88 ^ v57;
  v100 = v507 ^ (v99 - ((2 * v99) & 0x69F2441C) + 888742414) ^ v88;
  v101 = (v99 - ((2 * v99) & 0x69F2441C) + 888742414) ^ v88;
  *(_DWORD *)(v54 - 136) = v100;
  v102 = v100 ^ 0x98D78BCB;
  v103 = v98 ^ v100 ^ 0x98D78BCB;
  v370 = v100 ^ 0x8BCB;
  *(_DWORD *)(v54 - 256) = v98;
  v408 = (v103 ^ 0x9B2B3E85) >> 24;
  v394 = ((v103 ^ 0x9B2B3E85) >> 16);
  v104 = *(_DWORD *)(v74 + 4 * (v394 ^ 0x89u)) ^ *(_DWORD *)(v77 + 4 * (v408 ^ 0x1D));
  v397 = ((unsigned __int16)(v103 ^ 0x3E85) >> 8);
  v105 = ((v104 ^ 0xFCC70751) - 2 * ((v104 ^ 0xFCC70751) & 0x258AC87F ^ v104 & 2) + 629852285) ^ *(_DWORD *)(v79 + 4 * (v397 ^ 0x3Au));
  v502 = v103;
  v106 = *(_DWORD *)(v73 + 4 * (v103 ^ 0x1Eu));
  *(_DWORD *)(v54 - 168) = v498 ^ 0x81698363 ^ v99;
  v107 = v498 ^ 0x81698363 ^ v99 ^ v106 ^ (v105 - ((2 * v105) & 0x86430662) + 1126269745);
  v108 = v107 ^ v101 ^ 0x7C166C11;
  v468 = v107;
  v109 = (v108 ^ v98) >> 24;
  *(_DWORD *)(v54 - 240) = v109;
  v475 = (v108 ^ v98);
  v110 = *(_DWORD *)(v73 + 4 * (v475 ^ 0x31u)) ^ *(_DWORD *)(v77 + 4 * (v109 ^ 0x9B));
  v111 = ((v110 ^ 0xC0AA36F5) - 2 * ((v110 ^ 0xC0AA36F5) & 0x258AC87F ^ v110 & 2) + 629852285) ^ *(_DWORD *)(v79 + 4 * (((unsigned __int16)(v108 ^ v98) >> 8) ^ 0xA0u));
  v112 = v108 ^ v98 ^ 0xBFCD0E9E;
  v457 = ((v108 ^ v98) >> 16);
  v113 = (v111 - ((2 * v111) & 0xFE99652A) + 2135732885) ^ *(_DWORD *)(v74 + 4 * (v457 ^ 0xAu));
  v114 = (v113 - ((2 * v113) & 0x2C17120E) + 369854727) ^ v107;
  *(_DWORD *)(v54 - 140) = v114;
  LODWORD(v60) = v114 ^ 0xEB8813AD;
  v417 = v114 ^ 0xEB8813AD ^ v108;
  v401 = (v113 - ((2 * v113) & 0x120E) - 30457) ^ v107 ^ 0x13AD;
  v453 = v108 ^ v102;
  v505 = v108 ^ v102 ^ 0xBC93A834;
  v115 = ((v417 ^ 0x5A137D54) - ((2 * (v417 ^ 0x5A137D54)) & 0x1F7D7FE) + 16509951) ^ v505;
  *(_DWORD *)(v54 - 144) = v115;
  v116 = ((v115 ^ 0x648DA654) - ((2 * (v115 ^ 0x648DA654)) & 0x729D2868) + 961451060) ^ v112 ^ 0x479AB031;
  v500 = ((unsigned __int16)(((v115 ^ 0xA654) - ((2 * (v115 ^ 0xA654)) & 0x2868) - 27596) ^ v112 ^ 0xB031) >> 8);
  v486 = (((v115 ^ 0x54) - ((2 * (v115 ^ 0x54)) & 0x68) + 52) ^ v112);
  v117 = *(_DWORD *)(v73 + 4 * (v486 ^ 0xAAu)) ^ *(_DWORD *)(v79 + 4 * (v500 ^ 0x3Au));
  v118 = ((v117 ^ 0x66AB4B4C) - 2 * ((v117 ^ 0x66AB4B4C) & 0x7F4CB2B5 ^ v117 & 0x20) + 2135732885) ^ *(_DWORD *)(v74 + 4 * (BYTE2(v116) ^ 0x89u));
  LODWORD(v61) = (v118 - ((2 * v118) & 0x7176B88) - 2087995964) ^ *(_DWORD *)(v77 + 4 * (HIBYTE(v116) ^ 0x1D));
  v119 = v61 ^ v108;
  v120 = ((v119 ^ 0xA6C48CD5) - 2 * ((v119 ^ 0xA6C48CD5) & 0x394E9436 ^ v119 & 2) + 961451060) ^ v112;
  v121 = HIBYTE(v120);
  v122 = BYTE1(v120);
  v123 = v76 ^ ((v389 ^ v71 ^ 0xBAF72DE4) - ((2 * (v389 ^ v71 ^ 0xBAF72DE4)) & 0xAD1D11E6) + 1452181747);
  LODWORD(v76) = *(_DWORD *)(v79 + 4 * (BYTE1(v120) ^ 0x6Fu)) ^ *(_DWORD *)(v77 + 4 * (HIBYTE(v120) ^ 5));
  v462 = v120;
  v124 = ((v76 ^ 0xA6017DB9) - 2 * ((v76 ^ 0xA6017DB9) & 0x43218335 ^ v76 & 4) + 1126269745) ^ *(_DWORD *)(v73 + 4 * (v120 ^ 0x25u));
  v125 = v60 ^ v61;
  LODWORD(v61) = v60 ^ v61 ^ *(_DWORD *)(v74 + 4 * (BYTE2(v120) ^ 0xA8u)) ^ (v124
                                                                             - ((2 * v124) & 0xFE99652A)
                                                                             + 2135732885);
  v126 = v115 ^ 0xE3127E54 ^ v61;
  *(_DWORD *)(v54 - 192) = v126;
  v488 = ((unsigned __int16)(v126 ^ v120) >> 8);
  v372 = (v126 ^ v120) >> 24;
  LODWORD(v77) = *(_DWORD *)(v79 + 4 * (v488 ^ 0x44u)) ^ *(_DWORD *)(v77 + 4 * (v372 ^ 0x47)) ^ 0xA6017DB9;
  v378 = (v126 ^ v120);
  LODWORD(v60) = (v77 - ((2 * v77) & 0x86430662) + 1126269745) ^ *(_DWORD *)(v73 + 4 * (v378 ^ 0xD5u));
  v365 = ((v126 ^ v120) >> 16);
  LODWORD(v60) = (v60 - ((2 * v60) & 0xFE99652A) + 2135732885) ^ *(_DWORD *)(v74 + 4 * (v365 ^ 0xCBu));
  *(_DWORD *)(v54 - 176) = v61;
  LODWORD(v60) = (v60 - ((2 * v60) & 0xDFD18FA8) - 269957164) ^ v61;
  LODWORD(v491) = v60 ^ 0x6F1FEA7D;
  v368 = v61 ^ v119;
  HIDWORD(v490) = v61 ^ v119 ^ 0x80C600CE ^ ((v60 ^ 0x6F1FEA7D)
                                           - 1536897061
                                           + ((2 * ((v60 ^ 0x6F1FEA7D) & 0x2464CFDE ^ v60 & 4)) ^ 0xFFFFFFF7));
  LODWORD(v490) = v126 ^ 0x4018996 ^ HIDWORD(v490);
  HIDWORD(a43) = (v490 - ((2 * v490) & 0x2755D914) - 1817514870) ^ v126 ^ v120;
  v127 = (char *)*(&off_1002CCD00 + v55 - 111) - 4;
  LODWORD(v60) = (((v125 ^ 0x1B9155BDu) >> 16)
                - ((2 * ((v125 ^ 0x1B9155BDu) >> 16) + 160207960) & 0x80C129E)
                - 755665029) ^ *(_DWORD *)&v127[4 * (((v125 ^ 0x1B9155BDu) >> 16) ^ 0x2D)];
  v128 = ((BYTE2(v120) ^ 0x89) - ((2 * (BYTE2(v120) ^ 0x89) + 160207960) & 0x80C129E) - 755665029) ^ *(_DWORD *)&v127[4 * (BYTE2(v120) ^ 0xA4)];
  v129 = (uint64_t)*(&off_1002CCD00 + (v55 ^ 0x5E));
  v130 = (v60 - ((2 * v60) & 0xA8BA898C) + 1415398598) ^ *(_DWORD *)(v129 + 4 * (BYTE1(v125) ^ 0x47u));
  v484 = v55;
  v131 = (char *)*(&off_1002CCD00 + v55 + 37) - 12;
  v132 = (v128 - ((2 * v128) & 0xD8DCA4D0) + 1819169384) ^ *(_DWORD *)&v131[4 * (v121 ^ 0xCC)];
  v133 = (char *)*(&off_1002CCD00 + v55 - 64) - 8;
  LODWORD(v76) = *(_DWORD *)&v133[4
                                * (((-(v417 ^ 0x54) - 1) ^ v505) ^ 0x54 ^ v119 ^ 0x53)];
  v361 = v115 ^ 0xE3127E54 ^ v119;
  LODWORD(v60) = *(_DWORD *)&v127[4 * (BYTE2(v361) ^ 0xAA)] ^ *(_DWORD *)&v131[4 * (HIBYTE(v361) ^ 0x3E)] ^ ((BYTE2(v361) ^ 0x87) - 755665028 + ((2 * (BYTE2(v361) ^ 0x87) + 88) & 0x29E ^ 0xF7F3EFFF)) ^ (181304767 * v76 - ((362609534 * v76 + 1294299612) & 0xD8DCA4D0) + 318835542);
  LODWORD(v74) = *(_DWORD *)&v133[4 * (v119 ^ 0x74)];
  LODWORD(v74) = (181304767 * v74 - ((362609534 * v74 + 1294299612) & 0xA8BA898C) - 84935244) ^ *(_DWORD *)(v129 + 4 * (BYTE1(v119) ^ 0x5Au));
  v480 = v74 - ((2 * v74) & 0xD8DCA4D0);
  v470 = HIBYTE(v119) ^ 0xB2;
  v439 = BYTE2(v119);
  v436 = (BYTE2(v119) ^ 0x4C) - ((2 * (BYTE2(v119) ^ 0x4C) + 160207960) & 0x80C129E);
  v441 = v122 ^ 0xB0;
  v459 = v132 - ((2 * v132) & 0xA8BA898C);
  v449 = v60 - ((2 * v60) & 0xA8BA898C);
  v494 = (v130 - ((2 * v130) & 0xD8DCA4D0) + 1819169384) ^ *(_DWORD *)&v131[4 * ((v125 ^ 0x1B9155BDu) >> 24)] ^ (181304767 * *(_DWORD *)&v133[4 * (v125 ^ 0x7D)] - 1500333842);
  LODWORD(v74) = *(_DWORD *)&v127[4 * (((v123 ^ 0xE9B45E6C) >> 16) ^ 0xF5)] ^ ((((v123 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                              - ((2
                                                                                                * (((v123 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                                + 160207960) & 0x80C129E)
                                                                                              - 755665029);
  LODWORD(v79) = *(_DWORD *)(v54 - 132) ^ 0x31676F78;
  v134 = *(_DWORD *)&v127[4 * (BYTE2(v79) ^ 0x7B)] ^ ((BYTE2(v79) ^ 0x56)
                                                    - 755665028
                                                    + ((2 * (BYTE2(v79) ^ 0x56) + 88) & 0x29E ^ 0xF7F3EFFF));
  LODWORD(v79) = (v134 + 1819169384 + (~(2 * v134) | 0x27235B2F) + 1) ^ *(_DWORD *)&v131[4 * BYTE3(v79)];
  v135 = *(_DWORD *)&v127[4 * (v434 ^ 0x34)] ^ ((v434 ^ 0x19) - ((2 * (v434 ^ 0x19) + 160207960) & 0x80C129E) - 755665029);
  LODWORD(v77) = (v135 - ((2 * v135) & 0xA8BA898C) + 1415398598) ^ *(_DWORD *)(v129 + 4 * (v430 ^ 5u));
  v431 = v79 - ((2 * v79) & 0xA8BA898C);
  v435 = v77 - ((2 * v77) & 0xD8DCA4D0);
  LODWORD(v77) = *(_DWORD *)&v133[4 * (*(_DWORD *)(v54 - 152) ^ 0xDF)];
  LODWORD(v79) = *(_DWORD *)(v54 - 152) ^ 0x5A18571F;
  LODWORD(v77) = *(_DWORD *)&v131[4 * BYTE3(v79)] ^ ((BYTE2(v79) ^ 0xC1)
                                                   - ((2 * (BYTE2(v79) ^ 0xC1) + 160207960) & 0x80C129E)
                                                   - 755665029) ^ *(_DWORD *)&v127[4 * (BYTE2(v79) ^ 0xEC)] ^ ((~(362609534 * v77 + 1294299612) | 0x27235B2F) + 181304767 * v77 + 318835543);
  v428 = v77 - ((2 * v77) & 0xA8BA898C);
  LODWORD(v60) = *(_DWORD *)&v131[4 * ((v123 ^ 0xE9B45E6C) >> 24)] ^ (v74 - ((2 * v74) & 0xD8DCA4D0) + 1819169384);
  v373 = v123 ^ 0xAC;
  v423 = BYTE1(v123) ^ 0xB4;
  v425 = v60 - ((2 * v60) & 0xA8BA898C);
  v386 = v417 ^ 0x8EA4;
  LODWORD(v74) = v417 ^ 0x35C48CD5;
  LODWORD(v60) = *(_DWORD *)&v127[4 * (BYTE2(v116) ^ 0xDE)] ^ ((BYTE2(v116) ^ 0xF3)
                                                             - ((2 * (BYTE2(v116) ^ 0xF3) + 160207960) & 0x80C129E)
                                                             - 755665029);
  LODWORD(v77) = *(_DWORD *)&v127[4 * (((v417 ^ 0x35C48CD5) >> 16) ^ 0xFE)] ^ ((((v417 ^ 0x35C48CD5) >> 16) ^ 0xD3)
                                                                                              - 755665028
                                                                                              + ((2
                                                                                                * (((v417 ^ 0x35C48CD5) >> 16) ^ 0xD3)
                                                                                                + 88) & 0x29E ^ 0xF7F3EFFF));
  v136 = *(_DWORD *)&v133[4 * (((-(v417 ^ 0x54) - 1) ^ v505) ^ 0x91)];
  LODWORD(v79) = (v60 - ((2 * v60) & 0xD8DCA4D0) + 1819169384) ^ *(_DWORD *)&v131[4 * (HIBYTE(v116) ^ 0x36)];
  LODWORD(v60) = BYTE2(*(_DWORD *)(v54 - 140));
  LODWORD(v60) = *(_DWORD *)&v127[4 * (v60 ^ 0xA4)] ^ ((v60 ^ 0x89)
                                                                   - ((2 * (v60 ^ 0x89) + 160207960) & 0x80C129E)
                                                                   - 755665029);
  v137 = (v60 - ((2 * v60) & 0xA8BA898C) + 1415398598) ^ *(_DWORD *)(v129 + 4 * (HIBYTE(v401) ^ 0x8Bu));
  v412 = v79 - ((2 * v79) & 0xA8BA898C);
  v418 = v137 - ((2 * v137) & 0xD8DCA4D0);
  LODWORD(v79) = *(_DWORD *)(v54 - 144) ^ 0x818DA654;
  LODWORD(v79) = *(_DWORD *)(v129 + 4 * (BYTE1(v79) ^ 0x20u)) ^ ((BYTE2(v79) ^ 0xD7)
                                                                 - ((2 * (BYTE2(v79) ^ 0xD7) + 160207960) & 0x80C129E)
                                                                 - 755665029) ^ *(_DWORD *)&v127[4 * (BYTE2(v79) ^ 0xFA)] ^ (181304767 * v136 - ((362609534 * v136 + 1294299612) & 0xA8BA898C) - 84935244);
  LODWORD(v74) = (v77 - ((2 * v77) & 0xD8DCA4D0) + 1819169384) ^ *(_DWORD *)&v131[4 * BYTE3(v74)] ^ (181304767 * *(_DWORD *)&v133[4 * (v386 ^ 0x99)] - 1500333842);
  v363 = v401 ^ 0xA3;
  v391 = v74 - ((2 * v74) & 0xA8BA898C);
  v402 = v79 - ((2 * v79) & 0xD8DCA4D0);
  LODWORD(v74) = v406 ^ 0x28;
  v138 = *(_DWORD *)(v54 - 156);
  v374 = BYTE1(v138) ^ 0xF5;
  v380 = v389 ^ 0x2BEAE26B;
  LODWORD(v77) = *(_DWORD *)&v127[4 * (((v389 ^ 0x2BEAE26Bu) >> 16) ^ 0xEC)] ^ ((((v389 ^ 0x2BEAE26Bu) >> 16) ^ 0xC1)
                                                                                               - 755665028
                                                                                               + ((2
                                                                                                 * (((v389 ^ 0x2BEAE26Bu) >> 16) ^ 0xC1)
                                                                                                 + 88) & 0x29E ^ 0xF7F3EFFF)) ^ (181304767 * *(_DWORD *)&v133[4 * (v389 ^ 0x1E)] - 1500333842);
  LODWORD(v77) = (v77 - ((2 * v77) & 0xA8BA898C) + 1415398598) ^ *(_DWORD *)(v129 + 4 * (BYTE1(v389) ^ 8u));
  LODWORD(v79) = *(_DWORD *)&v127[4 * (v414 ^ 0xA7)] ^ ((v414 ^ 0x8A)
                                                      - ((2 * (v414 ^ 0x8A) + 160207960) & 0x80C129E)
                                                      - 755665029);
  v139 = *(_DWORD *)&v133[4 * (v383 ^ 0x55)];
  v415 = v77 - ((2 * v77) & 0xD8DCA4D0);
  v366 = BYTE2(v138);
  v407 = (BYTE2(v138) ^ 0xA7) - 755665028 + ((2 * (BYTE2(v138) ^ 0xA7) + 88) & 0x29E ^ 0xF7F3EFFF);
  LODWORD(v74) = (v79 - ((2 * v79) & 0xA8BA898C) + 1415398598) ^ *(_DWORD *)(v129 + 4 * v74) ^ (181304767 * *(_DWORD *)&v133[4 * (v420 ^ 0x57)] - 1500333842);
  v140 = *(_DWORD *)(v54 - 184);
  v390 = v74 - ((2 * v74) & 0xD8DCA4D0);
  LODWORD(v77) = (181304767 * v139 - ((362609534 * v139 + 1294299612) & 0xD8DCA4D0) + 318835542) ^ ((BYTE2(v140) ^ 0xBA)
                                                                                                  - ((2 * (BYTE2(v140) ^ 0xBA) + 160207960) & 0x80C129E)
                                                                                                  - 755665029) ^ *(_DWORD *)&v131[4 * (HIBYTE(v140) ^ 0x2F)] ^ *(_DWORD *)&v127[4 * (BYTE2(v140) ^ 0x97)];
  v384 = v77 - ((2 * v77) & 0xA8BA898C);
  LODWORD(v77) = BYTE2(*(_DWORD *)(v54 - 136));
  LODWORD(v77) = *(_DWORD *)&v127[4 * (v77 ^ 0xB)] ^ ((v77 ^ 0x26)
                                                                  - ((2 * (v77 ^ 0x26) + 160207960) & 0x80C129E)
                                                                  - 755665029);
  LODWORD(v79) = *(_DWORD *)&v127[4 * (BYTE2(*(_DWORD *)(v54 - 168)) ^ 0x56)] ^ ((BYTE2(*(_DWORD *)(v54 - 168)) ^ 0x7B)
                                                                                                - 755665028
                                                                                                + ((2 * (BYTE2(*(_DWORD *)(v54 - 168)) ^ 0x7B)
                                                                                                  + 88) & 0x29E ^ 0xF7F3EFFF));
  LODWORD(v77) = (v77 - ((2 * v77) & 0xA8BA898C) + 1415398598) ^ *(_DWORD *)(v129 + 4 * (HIBYTE(v370) ^ 0x7Eu)) ^ (181304767 * *(_DWORD *)&v133[4 * (v370 ^ 0xF6)] - 1500333842);
  v141 = *(_DWORD *)&v133[4 * (v101 ^ 0xFB)];
  v142 = (181304767 * v141 - ((362609534 * v141 + 1294299612) & 0xA8BA898C) - 84935244) ^ *(_DWORD *)(v129 + 4 * (BYTE1(v101) ^ 0xEFu));
  LODWORD(v371) = v77 - ((2 * v77) & 0xD8DCA4D0);
  LODWORD(v364) = v142 - ((2 * v142) & 0xD8DCA4D0);
  LODWORD(v77) = (v79 - ((2 * v79) & 0xD8DCA4D0) + 1819169384) ^ *(_DWORD *)&v131[4
                                                                                * (HIBYTE(*(_DWORD *)(v54 - 168)) ^ 0xD9)] ^ (181304767 * *(_DWORD *)&v133[4 * (*(_DWORD *)(v54 - 168) ^ 0x79)] - 1500333842);
  LODWORD(v79) = *(_DWORD *)&v127[4 * (v394 ^ 0x86)] ^ ((v394 ^ 0xAB)
                                                      - 755665028
                                                      + ((2 * (v394 ^ 0xAB) + 88) & 0x29E ^ 0xF7F3EFFF));
  LODWORD(v79) = (v79 - ((2 * v79) & 0xD8DCA4D0) + 1819169384) ^ *(_DWORD *)&v131[4 * v408];
  v395 = v397 ^ 0xEE;
  v409 = v79 - ((2 * v79) & 0xA8BA898C);
  v398 = v77 - ((2 * v77) & 0xA8BA898C);
  v360 = BYTE2(v101) ^ 0x16;
  v421 = (BYTE2(v101) ^ 0x73) - 755665028 + ((2 * (BYTE2(v101) ^ 0x73) + 88) & 0x29E ^ 0xF7F3EFFF);
  LODWORD(v60) = *(_DWORD *)&v127[4 * (v365 ^ 0x8B)] ^ ((v365 ^ 0xA6)
                                                      - ((2 * (v365 ^ 0xA6) + 160207960) & 0x80C129E)
                                                      - 755665029);
  HIDWORD(v364) = BYTE2(*(_DWORD *)(v54 - 192));
  LODWORD(v77) = v372 ^ 0x22;
  v403 = HIBYTE(v101) ^ 0xE8;
  v143 = *(_DWORD *)&v127[4 * (BYTE2(*(_DWORD *)(v54 - 176)) ^ 0xE8)] ^ ((BYTE2(*(_DWORD *)(v54 - 176)) ^ 0xC5)
                                                                                        - 755665028
                                                                                        + ((2
                                                                                          * (BYTE2(*(_DWORD *)(v54 - 176)) ^ 0xC5)
                                                                                          + 88) & 0x29E ^ 0xF7F3EFFF));
  v144 = (181304767 * *(_DWORD *)&v133[4 * (*(_DWORD *)(v54 - 176) ^ 0xCA)] - 1500333842) ^ *(_DWORD *)&v131[4 * (HIBYTE(*(_DWORD *)(v54 - 176)) ^ 0x8E)] ^ (v143 - ((2 * v143) & 0xD8DCA4D0) + 1819169384);
  v375 = v368 ^ 0x44039AAA;
  LODWORD(v79) = (181304767 * *(_DWORD *)&v133[4 * (v368 ^ 0xDB)] - 1500333842) ^ (((v368 ^ 0x44039AAAu) >> 16)
                                                                                                  - 755665028
                                                                                                  + ((2 * ((v368 ^ 0x44039AAAu) >> 16) + 88) & 0x29E ^ 0xF7F3EFFF)) ^ *(_DWORD *)&v127[4 * (((v368 ^ 0x44039AAAu) >> 16) ^ 0x2D)];
  HIDWORD(v371) = v144 - ((2 * v144) & 0xA8BA898C);
  LODWORD(v79) = (v79 - ((2 * v79) & 0xA8BA898C) + 1415398598) ^ *(_DWORD *)(v129 + 4 * (BYTE1(v368) ^ 0xC0u));
  LODWORD(v60) = *(_DWORD *)&v131[4 * v77] ^ (181304767 * *(_DWORD *)&v133[4 * (v378 ^ 0xFE)] - 1500333842) ^ (v60 - ((2 * v60) & 0xD8DCA4D0) + 1819169384);
  v379 = v79 - ((2 * v79) & 0xD8DCA4D0);
  v369 = v60 - ((2 * v60) & 0xA8BA898C);
  LODWORD(v60) = *(_DWORD *)&v133[4 * (v445 ^ 0xEC)];
  v145 = *(_DWORD *)&v133[4 * (v463 ^ 0xE6)];
  LODWORD(v77) = *(_DWORD *)&v127[4 * (v472 ^ 0x32)] ^ ((v472 ^ 0x1F)
                                                      - ((2 * (v472 ^ 0x1F) + 160207960) & 0x80C129E)
                                                      - 755665029);
  LODWORD(v60) = *(_DWORD *)&v131[4 * (HIBYTE(v445) ^ 0xCA)] ^ ((BYTE2(v445) ^ 0x2F)
                                                              - 755665028
                                                              + ((2 * (BYTE2(v445) ^ 0x2F) + 88) & 0x29E ^ 0xF7F3EFFF)) ^ *(_DWORD *)&v127[4 * (BYTE2(v445) ^ 2)] ^ (181304767 * v60 - ((362609534 * v60 + 1294299612) & 0xD8DCA4D0) + 318835542);
  LODWORD(v74) = (v77 - ((2 * v77) & 0xA8BA898C) + 1415398598) ^ *(_DWORD *)(v129 + 4 * (v481 ^ 0x8Cu)) ^ (181304767 * *(_DWORD *)&v133[4 * (v477 ^ 0xD9)] - 1500333842);
  LODWORD(v77) = *(_DWORD *)&v131[4 * ((v463 ^ 0x49A657C7u) >> 24)] ^ ((((v463 ^ 0x49A657C7u) >> 16) ^ 0x35)
                                                                     - 755665028
                                                                     + ((2
                                                                       * (((v463 ^ 0x49A657C7u) >> 16) ^ 0x35)
                                                                       + 88) & 0x29E ^ 0xF7F3EFFF)) ^ *(_DWORD *)&v127[4 * (((v463 ^ 0x49A657C7u) >> 16) ^ 0x18)] ^ (181304767 * v145 - ((362609534 * v145 + 1294299612) & 0xD8DCA4D0) + 318835542);
  v146 = *(_DWORD *)&v127[4 * (((v466 ^ 0x2A751432u) >> 16) ^ 0x2D)] ^ (((v466 ^ 0x2A751432u) >> 16)
                                                                                       - 755665028
                                                                                       + ((2
                                                                                         * ((v466 ^ 0x2A751432u) >> 16)
                                                                                         + 88) & 0x29E ^ 0xF7F3EFFF));
  v482 = HIDWORD(v493) ^ 0xAA;
  HIDWORD(v493) = (v60 - ((2 * v60) & 0xA8BA898C) + 1415398598) ^ *(_DWORD *)(v129 + 4 * (BYTE1(v445) ^ 0x2Eu));
  v478 = v74 - ((2 * v74) & 0xD8DCA4D0);
  LODWORD(v60) = (v146 - ((2 * v146) & 0xD8DCA4D0) + 1819169384) ^ *(_DWORD *)&v131[4 * ((v466 ^ 0x2A751432u) >> 24)] ^ (181304767 * *(_DWORD *)&v133[4 * (v466 ^ 0xA2)] - 1500333842);
  v446 = BYTE1(v466) ^ 0x94;
  v473 = v77 - ((2 * v77) & 0xA8BA898C);
  v467 = v60 - ((2 * v60) & 0xA8BA898C);
  LODWORD(v74) = *(_DWORD *)&v127[4 * (v457 ^ 0xC1)] ^ ((v457 ^ 0xEC)
                                                      - 755665028
                                                      + ((2 * (v457 ^ 0xEC) + 88) & 0x29E ^ 0xF7F3EFFF));
  LODWORD(v60) = (v74 - ((2 * v74) & 0xA8BA898C) + 1415398598) ^ *(_DWORD *)(v129
                                                                           + 4
                                                                           * (((((unsigned __int16)(v108 ^ v98) >> 8) ^ 0x9A)
                                                                             - ((2 * (((v108 ^ v98) >> 8) ^ 0x86839A)) & 0x166)
                                                                             + 179) ^ 0x54)) ^ (181304767
                                                                                              * *(_DWORD *)&v133[4 * (v475 ^ 0xE2)]
                                                                                              - 1500333842);
  LODWORD(v74) = *(_DWORD *)&v133[4 * (v453 ^ 0xCB)];
  LODWORD(v74) = (181304767 * v74 - ((362609534 * v74 + 1294299612) & 0xD8DCA4D0) + 318835542) ^ *(_DWORD *)&v131[4 * (HIBYTE(v453) ^ 0xC8)];
  v476 = v60 - ((2 * v60) & 0xD8DCA4D0);
  v357 = v74 - ((2 * v74) & 0xA8BA898C);
  LODWORD(v60) = *(_DWORD *)&v127[4 * (BYTE2(v108) ^ 0x24)] ^ ((BYTE2(v108) ^ 9)
                                                             - ((2 * (BYTE2(v108) ^ 9) + 160207960) & 0x80C129E)
                                                             - 755665029);
  LODWORD(v60) = (181304767 * *(_DWORD *)&v133[4 * (v108 ^ 0x68)] - 1500333842) ^ *(_DWORD *)(v129 + 4 * (BYTE1(v108) ^ 0x55u)) ^ (v60 - ((2 * v60) & 0xA8BA898C) + 1415398598);
  v355 = ((v468 ^ 0x231B9DB5) >> 16);
  v458 = (v355 ^ 0xC1) - 755665028 + ((2 * (v355 ^ 0xC1) + 88) & 0x29E ^ 0xF7F3EFFF);
  HIDWORD(v356) = v60 - ((2 * v60) & 0xD8DCA4D0);
  v147 = BYTE2(v453);
  v455 = (BYTE2(v453) ^ 0x6F) - 755665028 + ((2 * (BYTE2(v453) ^ 0x6F) + 88) & 0x29E ^ 0xF7F3EFFF);
  v148 = v498 ^ 0x10CB4C77;
  v353 = v496 ^ 0x7B;
  v149 = *(_DWORD *)&v133[4 * (v462 ^ 0x60)];
  v150 = *(_DWORD *)&v133[4 * (v509 ^ 0xFB)];
  v151 = *(_DWORD *)&v133[4 * (*(_DWORD *)(v54 - 132) ^ 0xB8)];
  LODWORD(v79) = *(_DWORD *)&v133[4 * (v495 ^ 0x74)];
  v152 = *(_DWORD *)&v133[4 * v373];
  v153 = *(_DWORD *)&v133[4 * v363];
  v154 = *(_DWORD *)&v133[4 * (v486 ^ 0xF0)];
  v155 = *(_DWORD *)(v54 - 156);
  LODWORD(v73) = *(_DWORD *)&v133[4 * (v155 ^ 0x57)];
  v156 = *(_DWORD *)&v133[4 * (v502 ^ 0xB8)];
  v157 = *(_DWORD *)(v54 - 192);
  v158 = *(_DWORD *)&v133[4 * (v157 ^ 0x78)];
  LODWORD(v60) = *(_DWORD *)&v133[4 * (v468 ^ 0x75)];
  v159 = *(_DWORD *)&v133[4 * (v507 ^ 0xF)];
  LODWORD(v77) = *(_DWORD *)&v133[4 * (v498 ^ 0x63 ^ v463 ^ 0x2A)];
  LODWORD(v133) = *(_DWORD *)&v133[4 * (v498 ^ 0x4E)];
  v503 = 181304767 * v150 - 1500333842;
  v497 = 181304767 * v151 - 1500333842;
  v499 = 181304767 * v152 - 1500333842;
  HIDWORD(v362) = 181304767 * v154 - 1500333842;
  v510 = 181304767 * v73 - 1500333842;
  LODWORD(v356) = 181304767 * v158 - 1500333842;
  v454 = 181304767 * v60 - 1500333842;
  v160 = 181304767 * v77 - 1500333842;
  LODWORD(a15) = 181304767 * (_DWORD)v133 - 1500333842;
  LODWORD(v77) = (181304767 * v79 - ((362609534 * v79 + 1294299612) & 0xD8DCA4D0) + 318835542) ^ *(_DWORD *)&v131[4 * v353];
  LODWORD(v60) = *(_DWORD *)&v127[4 * (BYTE2(v507) ^ 0x55)] ^ ((BYTE2(v507) ^ 0x78)
                                                             - ((2 * (BYTE2(v507) ^ 0x78) + 160207960) & 0x80C129E)
                                                             - 755665029) ^ (181304767 * v159 - 1500333842);
  LODWORD(v79) = (v60 - ((2 * v60) & 0xA8BA898C) + 1415398598) ^ *(_DWORD *)(v129 + 4 * (BYTE1(v507) ^ 0xA6u));
  LODWORD(v133) = *(_DWORD *)&v127[4 * (BYTE2(v148) ^ 0x3C)] ^ ((BYTE2(v148) ^ 0x11)
                                                              - 755665028
                                                              + ((2 * (BYTE2(v148) ^ 0x11) + 88) & 0x29E ^ 0xF7F3EFFF));
  v437 = v436 - 755665029;
  LODWORD(v359) = (HIDWORD(v364) ^ 0x8F) - ((2 * (HIDWORD(v364) ^ 0x8F) + 160207960) & 0x80C129E) - 755665029;
  LODWORD(v60) = v160 ^ ((BYTE2(v511) ^ 0x37) - ((2 * (BYTE2(v511) ^ 0x37) + 160207960) & 0x80C129E) - 755665029) ^ *(_DWORD *)&v127[4 * (BYTE2(v511) ^ 0x1A)];
  LODWORD(v74) = v77 - ((2 * v77) & 0xA8BA898C);
  LODWORD(v77) = (v60 - ((2 * v60) & 0xD8DCA4D0) + 1819169384) ^ *(_DWORD *)&v131[4 * (HIBYTE(v511) ^ 0xF9)];
  LODWORD(v354) = *(_DWORD *)&v127[4 * (v439 ^ 0x61)];
  LODWORD(v367) = *(_DWORD *)&v127[4 * (v366 ^ 0x8A)];
  v440 = *(_DWORD *)&v127[4 * (v360 ^ 0x48)];
  HIDWORD(v352) = *(_DWORD *)&v127[4 * (HIDWORD(v364) ^ 0xA2)];
  HIDWORD(v354) = *(_DWORD *)&v127[4 * (v355 ^ 0xEC)];
  HIDWORD(v359) = *(_DWORD *)&v127[4 * (v147 ^ 0x42)];
  LODWORD(v60) = v500 ^ 0x1A;
  v161 = *(_DWORD *)(v54 - 232);
  HIDWORD(v364) = *(_DWORD *)&v127[4 * (v161 ^ 0x1A)];
  LODWORD(v352) = *(_DWORD *)(v129 + 4 * v441);
  v442 = *(_DWORD *)(v129 + 4 * (BYTE1(v361) ^ 0x8Eu));
  v501 = *(_DWORD *)(v129 + 4 * (BYTE1(*(_DWORD *)(v54 - 132)) ^ 0x85u));
  *(_DWORD *)(v54 - 152) = *(_DWORD *)(v129 + 4 * (BYTE1(*(_DWORD *)(v54 - 152)) ^ 0xBDu));
  *(_DWORD *)(v54 - 232) = *(_DWORD *)(v129 + 4 * v423);
  v162 = ((*(_DWORD *)(v54 - 256) >> 15) & 0x58 ^ 0x48) + (v161 ^ 0x4C64A1B);
  LODWORD(v362) = *(_DWORD *)(v129 + 4 * v60);
  v387 = *(_DWORD *)(v129 + 4 * (HIBYTE(v386) ^ 0x14u));
  *(_DWORD *)(v54 - 256) = *(_DWORD *)(v129 + 4 * v374);
  *(_DWORD *)(v54 - 184) = *(_DWORD *)(v129 + 4 * (BYTE1(*(_DWORD *)(v54 - 184)) ^ 0xD6u));
  v424 = *(_DWORD *)(v129 + 4 * v395);
  *(_DWORD *)(v54 - 168) = *(_DWORD *)(v129 + 4 * (BYTE1(*(_DWORD *)(v54 - 168)) ^ 0xD7u));
  HIDWORD(v351) = *(_DWORD *)(v129 + 4 * (BYTE1(v157) ^ 0x76u));
  v163 = *(_DWORD *)(v129 + 4 * (BYTE1(*(_DWORD *)(v54 - 176)) ^ 0x16u));
  *(_DWORD *)(v54 - 176) = v162 - 835769008 + ((2 * v162) & 0x29E ^ 0xF7F3EFFF);
  LODWORD(v351) = *(_DWORD *)(v129 + 4 * (v488 ^ 0xBEu));
  *(_DWORD *)(v54 - 192) = *(_DWORD *)(v129 + 4 * (BYTE1(v463) ^ 0xB9u));
  v396 = *(_DWORD *)(v129 + 4 * v446);
  v447 = *(_DWORD *)(v129 + 4 * (BYTE1(v468) ^ 0x77u));
  HIDWORD(v358) = *(_DWORD *)(v129 + 4 * (BYTE1(v505) ^ 0x41u));
  *(_DWORD *)(v54 - 224) = *(_DWORD *)(v129 + 4 * (*(_DWORD *)(v54 - 224) ^ 0x84u));
  v512 = *(_DWORD *)(v129 + 4 * (BYTE1(v511) ^ 0x2Eu));
  v164 = *(_DWORD *)(v129 + 4 * (BYTE1(*(_DWORD *)(v54 - 248)) ^ 0xC8u));
  v464 = *(_DWORD *)&v131[4 * v470];
  v471 = v459 + 1415398598;
  v460 = v449 + 1415398598;
  *(_DWORD *)(v54 - 216) = *(_DWORD *)&v131[4 * (*(_DWORD *)(v54 - 216) ^ 7)];
  *(_DWORD *)(v54 - 248) = v431 + 1415398598;
  HIDWORD(a17) = v428 + 1415398598;
  v506 = v425 + 1415398598;
  v450 = *(_DWORD *)&v131[4 * (HIBYTE(*(_DWORD *)(v54 - 140)) ^ 7)];
  LODWORD(v350) = v412 + 1415398598;
  LODWORD(v349) = v391 + 1415398598;
  HIDWORD(v350) = *(_DWORD *)&v131[4 * (HIBYTE(*(_DWORD *)(v54 - 144)) ^ 0xF6)];
  v392 = *(_DWORD *)&v131[4 * (HIBYTE(v155) ^ 0xB8)];
  *(_DWORD *)(v54 - 156) = *(_DWORD *)&v131[4 * HIBYTE(v380)];
  *(_DWORD *)(v54 - 208) = *(_DWORD *)&v131[4 * (*(_DWORD *)(v54 - 208) ^ 0x4B)];
  v385 = v384 + 1415398598;
  v404 = *(_DWORD *)&v131[4 * v403];
  v429 = v409 + 1415398598;
  v432 = *(_DWORD *)&v131[4 * (HIBYTE(*(_DWORD *)(v54 - 136)) ^ 0x4C)];
  HIDWORD(v349) = v398 + 1415398598;
  v165 = HIDWORD(v371) + 1415398598;
  v166 = v369 + 1415398598;
  v426 = v473 + 1415398598;
  v413 = v467 + 1415398598;
  HIDWORD(v371) = v357 + 1415398598;
  v410 = v74 + 1415398598;
  v399 = v77 - ((2 * v77) & 0xA8BA898C) + 1415398598;
  v167 = *(_DWORD *)&v131[4 * (HIBYTE(v157) ^ 0xA6)];
  v168 = *(_DWORD *)&v131[4 * HIBYTE(v375)];
  LODWORD(v74) = v164 ^ ((_DWORD)v133 - ((2 * (_DWORD)v133) & 0xA8BA898C) + 1415398598);
  v381 = *(_DWORD *)&v131[4 * v482];
  HIDWORD(a2) = *(_DWORD *)&v131[4 * ((v468 ^ 0x231B9DB5) >> 24)];
  v451 = *(_DWORD *)&v131[4 * (*(_DWORD *)(v54 - 240) ^ 0x38)];
  v444 = *(_DWORD *)&v131[4 * ((v108 ^ 0xEEA2BFA8) >> 24)];
  HIDWORD(v367) = *(_DWORD *)&v131[4 * (HIBYTE(v507) ^ 0xBE)];
  LODWORD(v358) = *(_DWORD *)&v131[4 * HIBYTE(v148)];
  v169 = v480 + 1819169384;
  v376 = v435 + 1819169384;
  v170 = v418 + 1819169384;
  v171 = v402 + 1819169384;
  v508 = v415 + 1819169384;
  *(_DWORD *)(v54 - 240) = v371 + 1819169384;
  v172 = v379 + 1819169384;
  v419 = v478 + 1819169384;
  v173 = v476 + 1819169384;
  v174 = v79 - ((2 * v79) & 0xD8DCA4D0) + 1819169384;
  v175 = v74 - ((2 * v74) & 0xD8DCA4D0) + 1819169384;
  v176 = v494 ^ HIDWORD(v493) ^ 0x6285F181;
  v177 = v165 ^ v163 ^ v176;
  v178 = (char *)*(&off_1002CCD00 + (v484 ^ 0x9D)) - 8;
  v179 = (char *)*(&off_1002CCD00 + (v484 & 0x56A47065)) - 4;
  v180 = (char *)*(&off_1002CCD00 + v484 - 85) - 4;
  v181 = (char *)*(&off_1002CCD00 + v484 + 23) - 8;
  v182 = (v181[*(unsigned __int8 *)(v54 - 109) ^ 0x41] ^ 0xB3) & 0xFF00FFFF | (((v179[*(unsigned __int8 *)(v54 - 111) ^ 0x40] - 120) ^ 0x5A) << 16) | ((v180[*(unsigned __int8 *)(v54 - 110) ^ 0xBBLL] ^ 0x2E) << 8) | ((v178[*(unsigned __int8 *)(v54 - 112) ^ 0x1ELL] ^ (*(unsigned __int8 *)(v54 - 112) - ((2 * *(unsigned __int8 *)(v54 - 112)) & 0xEC) + 118) ^ 0x84) << 24);
  v489 = v178;
  v483 = v181;
  v485 = v180;
  v183 = *(unsigned __int8 **)(v54 - 120);
  v184 = (v181[*(unsigned __int8 *)(v54 - 105) ^ 0xE4] ^ 0x85) & 0xFF00FFFF | ((v178[*(unsigned __int8 *)(v54 - 108) ^ 0x3ELL] ^ (*(unsigned __int8 *)(v54 - 108) - ((2 * *(unsigned __int8 *)(v54 - 108)) & 0xEC) + 118) ^ 0xFFFFFFE1) << 24) | (((v179[*(unsigned __int8 *)(v54 - 107) ^ 0x27] - 120) ^ 0x96) << 16) | ((v180[*(unsigned __int8 *)(v54 - 106) ^ 9] ^ 0x2B) << 8);
  v487 = v179;
  v185 = (v181[*(unsigned __int8 *)(v54 - 101) ^ 0xF2] ^ 0x3C) & 0xFF00FFFF | ((v178[*(unsigned __int8 *)(v54 - 104) ^ 0xD3] ^ (*(unsigned __int8 *)(v54 - 104) - ((2 * *(unsigned __int8 *)(v54 - 104)) & 0xEC) + 118) ^ 0xE0) << 24) | ((v180[*(unsigned __int8 *)(v54 - 102) ^ 0xBELL] ^ 0x8C) << 8) & 0xFF00FFFF | (((v179[*(unsigned __int8 *)(v54 - 103) ^ 0xE9] - 120) ^ 0x8A) << 16);
  v186 = v177 ^ 0x2497E332;
  if ((v177 & 0x80) != 0)
    v187 = -128;
  else
    v187 = 128;
  *(_DWORD *)(v54 - 132) = (v181[*(unsigned __int8 *)(v54 - 97) ^ 0x74] ^ 0x14 | (((v179[*(unsigned __int8 *)(v54 - 99) ^ 0xF3] ^ 2) - 120) << 16) | ((v180[*(unsigned __int8 *)(v54 - 98) ^ 0x20] ^ 0xC4) << 8) | ((v178[*(unsigned __int8 *)(v54 - 100) ^ 0xF3] ^ (*(unsigned __int8 *)(v54 - 100) - ((2 * *(unsigned __int8 *)(v54 - 100)) & 0xEC) + 118) ^ 0x85) << 24)) ^ 0x28FB1854;
  *(_DWORD *)(v54 - 136) = v182 ^ 0x1B4518F5;
  *(_DWORD *)(v54 - 140) = v184 ^ 0xC0805DC1;
  *(_DWORD *)(v54 - 144) = v185 ^ 0x27210476;
  HIDWORD(v479) = v166 ^ v351;
  LODWORD(v479) = v167 ^ v359 ^ HIDWORD(v351) ^ HIDWORD(v352) ^ v356;
  HIDWORD(v474) = v172 ^ v168;
  LODWORD(v474) = (181304767 * v149 - 1500333842) ^ v352 ^ v471;
  HIDWORD(v469) = v460 ^ v442;
  LODWORD(v469) = v464 ^ v437 ^ v354 ^ v169;
  HIDWORD(v465) = v349 ^ v387;
  LODWORD(v465) = v350 ^ v362 ^ HIDWORD(v362);
  HIDWORD(v461) = v170 ^ v450 ^ (181304767 * v153 - 1500333842);
  LODWORD(v461) = v171 ^ HIDWORD(v350);
  HIDWORD(v456) = v447 ^ HIDWORD(a2) ^ v458 ^ HIDWORD(v354) ^ v454;
  LODWORD(v456) = HIDWORD(v358) ^ v455 ^ HIDWORD(v359) ^ HIDWORD(v371);
  HIDWORD(v452) = (HIDWORD(v356) + 1819169384) ^ v444;
  LODWORD(v452) = v173 ^ v451;
  HIDWORD(v448) = HIDWORD(v349) ^ *(_DWORD *)(v54 - 168);
  LODWORD(v448) = v404 ^ v421 ^ v440 ^ (v364 + 1819169384);
  HIDWORD(v443) = *(_DWORD *)(v54 - 240) ^ v432;
  LODWORD(v443) = (181304767 * v156 - 1500333842) ^ v424 ^ v429;
  HIDWORD(v438) = a15 ^ v358 ^ v175;
  LODWORD(v438) = v399 ^ v512;
  HIDWORD(v433) = v174 ^ HIDWORD(v367);
  LODWORD(v433) = *(_DWORD *)(v54 - 224) ^ *(_DWORD *)(v54 - 176) ^ HIDWORD(v364) ^ v410;
  HIDWORD(v427) = v419 ^ v381;
  LODWORD(v427) = *(_DWORD *)(v54 - 192) ^ v426;
  HIDWORD(v422) = v413 ^ v396;
  LODWORD(v422) = HIDWORD(a17) ^ *(_DWORD *)(v54 - 152);
  HIDWORD(v416) = *(_DWORD *)(v54 - 248) ^ v501 ^ v497;
  LODWORD(v416) = v499 ^ *(_DWORD *)(v54 - 232) ^ v506;
  HIDWORD(v411) = v503 ^ *(_DWORD *)(v54 - 216) ^ v376;
  LODWORD(v411) = v385 ^ *(_DWORD *)(v54 - 184);
  HIDWORD(v405) = *(_DWORD *)(v54 - 256) ^ v407 ^ v392 ^ v367 ^ v510;
  LODWORD(v405) = (v390 + 1819169384) ^ *(_DWORD *)(v54 - 208);
  HIDWORD(v400) = v508 ^ *(_DWORD *)(v54 - 156);
  LODWORD(v400) = *(_DWORD *)(v54 - 200) + 1149311109;
  HIDWORD(v393) = (v187 + v186) ^ v176;
  v188 = *(_DWORD *)(v54 - 128);
  LODWORD(v393) = v188 ^ 0x4D9;
  HIDWORD(v388) = v188 ^ 0x4AD;
  LODWORD(v388) = v188 ^ 0x47F;
  HIDWORD(v382) = v188 ^ 0x4C2;
  LODWORD(v382) = v188 ^ 0x4B6;
  HIDWORD(v377) = v188 ^ 0x49B;
  LODWORD(v377) = v188 ^ 0x41A;
  HIDWORD(a17) = v188 ^ 0x449;
  v189 = v188;
  v190 = ((v188 - 1017) | 0x528) ^ 0x535u;
  *(_QWORD *)(v54 - 176) = v190;
  v191 = v179[v183[v190] ^ 0xF3];
  *(_QWORD *)(v54 - 152) = 1;
  v192 = v183[1] ^ 0x57;
  *(_QWORD *)(v54 - 168) = 10;
  v193 = v183[10] ^ 0xB6;
  v194 = ((v487[v192] - 120) ^ 0xF6) << 16;
  *(_QWORD *)(v54 - 192) = 4;
  v195 = (v485[v193] ^ 0xA1) << 8;
  v196 = v183[4];
  v197 = v489[v196 ^ 0x9A];
  *(_QWORD *)(v54 - 232) = 7;
  LODWORD(v196) = v197 ^ (v196 - ((2 * v196) & 0xEC) + 118) ^ 0xFFFFFFCF;
  v198 = v183[7] ^ 0xD6;
  *(_QWORD *)(v54 - 224) = 2;
  LODWORD(v196) = v181[v198] ^ 0xD6 | ((_DWORD)v196 << 24);
  LODWORD(v198) = v485[v183[2]] ^ 0xB3;
  *(_QWORD *)(v54 - 200) = 3;
  v199 = v194 | ((_DWORD)v198 << 8);
  LODWORD(v198) = v181[v183[3] ^ 0x74];
  *(_DWORD *)(v54 - 156) = 1040486381;
  *(_QWORD *)(v54 - 184) = 12;
  v200 = v199 | v198 ^ 0x14;
  LODWORD(v198) = v489[v183[12] ^ 0x6ELL] ^ (v183[12] + (~(2 * v183[12]) | 0x13) + 119) ^ 0x51;
  *(_QWORD *)(v54 - 216) = 0;
  v201 = v200 | ((v489[*v183 ^ 0x15] ^ (*v183 - ((2 * *v183) & 0xEC) + 118) ^ 0xAE) << 24);
  v202 = v195 | ((v489[v183[8] ^ 0x46] ^ (v183[8] - ((2 * v183[8]) & 0xEC) + 118) ^ 0xFFFFFFE7) << 24);
  *(_QWORD *)(v54 - 208) = 14;
  v203 = v485[v183[14] ^ 0xD5] ^ 0x3B;
  *(_QWORD *)(v54 - 240) = 5;
  v204 = (((v191 ^ 2) - 120) << 16) | ((_DWORD)v198 << 24) | (v203 << 8);
  LOBYTE(v203) = v487[v183[5] ^ 0x9DLL];
  *(_QWORD *)(v54 - 256) = 11;
  v205 = v181[v183[11] ^ 0xC2] ^ 0x31 | v202;
  LOBYTE(v192) = v487[v183[9] ^ 0x3ELL] - 120;
  v206 = v183[6] ^ 0xA4;
  *(_QWORD *)(v54 - 248) = 15;
  v207 = v196 & 0xFF00FFFF | (((v203 - 120) ^ 0xF7) << 16) | ((v485[v206] ^ 0x6B) << 8);
  v208 = v483[v183[15] ^ 0x47] ^ 0x14 | v204;
  v209 = (char *)*(&off_1002CCD00 + v189 - 817) - 12;
  v210 = *(_DWORD *)&v209[4 * (((unsigned __int16)(v207 ^ WORD2(v490)) >> 8) ^ 0x21)] ^ ((((unsigned __int16)(v207 ^ WORD2(v490)) >> 8) ^ 0x4C) - 1457789965 - ((2 * (((v207 ^ HIDWORD(v490)) >> 8) ^ 0xB71C4C)) & 0x1E6));
  v211 = (char *)*(&off_1002CCD00 + (int)v393) - 8;
  LODWORD(v198) = v201 ^ v491 ^ 0x730032AA;
  v212 = (v210 + 1926287901 - ((2 * v210) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4 * ((v201 ^ v491) ^ 0xAA)];
  v213 = HIDWORD(a43) ^ v208;
  v214 = *(_DWORD *)&v209[4 * (((unsigned __int16)(WORD2(a43) ^ v208) >> 8) ^ 0xE0)] ^ ((((unsigned __int16)(WORD2(a43) ^ v208) >> 8) ^ 0x8D) - 1457789965 - ((2 * (((HIDWORD(a43) ^ v208) >> 8) ^ 0xC55A8D)) & 0x1E6));
  v504 = v205 & 0xFF00FFFF | ((v192 ^ 0xDF) << 16);
  v215 = (char *)*(&off_1002CCD00 + v189 - 822) - 12;
  v216 = *(_DWORD *)&v215[4 * (((v504 ^ v490) >> 16) ^ 0x68)];
  HIDWORD(v218) = v216 ^ 0xA11;
  LODWORD(v218) = v216 ^ 0x41E92000;
  v217 = v218 >> 12;
  LODWORD(v206) = *(_DWORD *)&v215[4 * (BYTE2(v201) ^ BYTE2(v491))];
  HIDWORD(v218) = v206 ^ 0xA11;
  LODWORD(v218) = v206 ^ 0x41E92000;
  v219 = (char *)*(&off_1002CCD00 + SHIDWORD(v388)) - 12;
  v220 = *(_DWORD *)&v219[4 * (((v207 ^ HIDWORD(v490)) >> 24) ^ 0xB7)] ^ (v218 >> 12);
  v221 = *(_DWORD *)&v215[4 * (BYTE2(v213) ^ 0x5A)];
  HIDWORD(v218) = v221 ^ 0xA11;
  LODWORD(v218) = v221 ^ 0x41E92000;
  v222 = (v214 - 2023942063 - ((2 * v214) & 0xEBA30A2)) ^ v220;
  LODWORD(v192) = *(_DWORD *)&v215[4 * (((v207 ^ HIDWORD(v490)) >> 16) ^ 0x1C)];
  v223 = *(_DWORD *)&v211[4 * ((v207 ^ BYTE4(v490)) ^ 0xFB)] ^ (BYTE1(v205) ^ BYTE1(v490)) ^ *(_DWORD *)&v209[4 * ((BYTE1(v205) ^ BYTE1(v490)) ^ 0x23)] ^ 0xDBCB31A0 ^ (v218 >> 12);
  HIDWORD(v218) = v192 ^ 0xA11;
  LODWORD(v218) = v192 ^ 0x41E92000;
  LODWORD(v192) = *(_DWORD *)&v219[4 * (((v504 ^ v490) >> 24) ^ 0xF6)] ^ (BYTE1(v198)
                                                                                      - 1457789965
                                                                                      - ((v198 >> 7) & 0x1E6)) ^ *(_DWORD *)&v209[4 * (BYTE1(v198) ^ 0x6D)] ^ ((v218 >> 12) - 2023942063 - ((2 * (v218 >> 12)) & 0xEBA30A2));
  v224 = HIDWORD(v479) ^ v217 ^ *(_DWORD *)&v219[4 * (HIBYTE(v213) ^ 0xC5)] ^ (v212
                                                                             - 2023942063
                                                                             - ((2 * v212) & 0xEBA30A2));
  v225 = v479 ^ *(_DWORD *)&v211[4 * (v213 ^ 0xC5)] ^ (v192 + 1926287901 - ((2 * v192) & 0xE5A1A43A));
  LODWORD(v192) = v224 ^ 0xF9388C2F;
  v226 = *(_DWORD *)&v215[4 * ((v224 ^ 0xF9388C2F) >> 16)];
  HIDWORD(v218) = v226 ^ 0xA11;
  LODWORD(v218) = v226 ^ 0x41E92000;
  v227 = v218 >> 12;
  v228 = *(_DWORD *)&v215[4 * (BYTE2(v225) ^ 0x4B)];
  HIDWORD(v218) = v228 ^ 0xA11;
  LODWORD(v218) = v228 ^ 0x41E92000;
  v229 = v218 >> 12;
  v230 = v172 ^ v168 ^ *(_DWORD *)&v211[4 * ((v504 ^ v490) ^ 0x5F)] ^ (v222
                                                                                      + 1926287901
                                                                                      - ((2 * v222) & 0xE5A1A43A));
  v231 = *(_DWORD *)&v215[4 * (BYTE2(v230) ^ 0x66)];
  v232 = HIDWORD(v393) ^ *(_DWORD *)&v219[4 * BYTE3(v198)] ^ (v223 - 2023942063 - ((2 * v223) & 0xEBA30A2));
  HIDWORD(v218) = v231 ^ 0xA11;
  LODWORD(v218) = v231 ^ 0x41E92000;
  LODWORD(v198) = (v218 >> 12) ^ *(_DWORD *)&v209[4 * (BYTE1(v232) ^ 5)] ^ ((BYTE1(v232) ^ 0x68)
                                                                          - 1457789965
                                                                          - ((2 * ((v232 >> 8) ^ 0x42BD68)) & 0x1E6));
  v233 = (v227 + 1926287901 - ((2 * v227) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4
                                                                          * ((v172 ^ v168 ^ v211[4 * ((v504 ^ v490) ^ 0x5F)] ^ (v222 + 29 - ((2 * v222) & 0x3A))) ^ 0xB6)];
  LODWORD(v198) = (v198 + 1926287901 - ((2 * v198) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4 * (v224 ^ 0x61)];
  v234 = (((unsigned __int16)(v224 ^ 0x8C2F) >> 8) - 1457789965 - (((v224 ^ 0xF9388C2F) >> 7) & 0x1E6)) ^ 0xD678EAEF ^ *(_DWORD *)&v209[4 * (((unsigned __int16)(v224 ^ 0x8C2F) >> 8) ^ 0x6D)];
  v235 = *(_DWORD *)&v219[4 * (HIBYTE(v230) ^ 0x43)] ^ 0x254743EF;
  v236 = v234 + v235 - 2 * (v234 & v235);
  v237 = *(_DWORD *)&v215[4 * (BYTE2(v232) ^ 0xBD)];
  HIDWORD(v218) = v237 ^ 0xA11;
  LODWORD(v218) = v237 ^ 0x41E92000;
  LODWORD(v192) = *(_DWORD *)&v219[4 * BYTE3(v192)] ^ (v229 - 2023942063 - ((2 * v229) & 0xEBA30A2));
  LODWORD(v192) = (v192 + 1926287901 - ((2 * v192) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4 * (v232 ^ 0xAB)];
  v238 = v198 - 2023942063 - ((2 * v198) & 0xEBA30A2);
  LODWORD(v198) = *(_DWORD *)&v219[4 * (HIBYTE(v232) ^ 0x42)] ^ v494 ^ *(_DWORD *)&v209[4 * (BYTE1(v225) ^ 0xE0)] ^ ((BYTE1(v225) ^ 0x8D) - 1457789965 - ((2 * ((v225 >> 8) ^ 0xED4B8D)) & 0x1E6)) ^ (v233 - 2023942063 - ((2 * v233) & 0xEBA30A2));
  LOBYTE(v237) = BYTE1(v230) ^ 0x54;
  v239 = v474 ^ *(_DWORD *)&v209[4 * (BYTE1(v230) ^ 0x39)] ^ (v192 - 1457789965 - ((2 * v192) & 0x5237C7E6));
  v240 = HIDWORD(v469) ^ *(_DWORD *)&v219[4 * (HIBYTE(v225) ^ 0xED)] ^ v238;
  v241 = v469 ^ *(_DWORD *)&v211[4 * (v225 ^ 0xC6)] ^ ((v236 ^ (v218 >> 12))
                                                                      + 1926287901
                                                                      - ((2 * (v236 ^ (v218 >> 12))) & 0xE5A1A43A));
  v242 = *(_DWORD *)&v215[4 * (BYTE2(v241) ^ 0x79)];
  HIDWORD(v218) = v242 ^ 0xA11;
  LODWORD(v218) = v242 ^ 0x41E92000;
  BYTE1(v192) = BYTE1(v240) ^ 0x68;
  v243 = ((v218 >> 12) - 2023942063 - ((2 * (v218 >> 12)) & 0xEBA30A2)) ^ *(_DWORD *)&v219[4
                                                                                         * ((v240 ^ 0x2261685Eu) >> 24)];
  v244 = ((BYTE1(v241) ^ 0xD0) - 1457789965 - 2 * (((v241 >> 8) ^ 0x679D0) & 0xFB ^ (v241 >> 8) & 8)) ^ *(_DWORD *)&v209[4 * (BYTE1(v241) ^ 0xBD)];
  v245 = (v244 + 1926287901 - ((2 * v244) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4 * (v198 ^ 0x76)];
  v246 = ((BYTE1(v239) ^ 0xEC) - 1457789965 - ((2 * ((v239 >> 8) ^ 0xE5FEC)) & 0x1E6)) ^ *(_DWORD *)&v209[4 * (BYTE1(v239) ^ 0x81)];
  v247 = *(_DWORD *)&v215[4 * (BYTE2(v239) ^ 0x5F)];
  HIDWORD(v218) = v247 ^ 0xA11;
  LODWORD(v218) = v247 ^ 0x41E92000;
  v248 = v218 >> 12;
  HIDWORD(v218) = *(_DWORD *)&v211[4 * (v240 ^ 0x5E)] ^ 0x9BC7F595;
  LODWORD(v218) = HIDWORD(v218);
  v249 = (v218 >> 28) ^ __ROR4__(*(_DWORD *)&v219[4 * (HIBYTE(v241) ^ 6)] ^ 0x7462B151 ^ (v246- 2023942063- ((2 * v246) & 0xEBA30A2)), 28);
  v250 = (v248 - 2023942063 - ((2 * v248) & 0xEBA30A2)) ^ *(_DWORD *)&v219[4 * (BYTE3(v198) ^ 0xD2)];
  v251 = *(_DWORD *)&v215[4 * (BYTE2(v240) ^ 0x1B)];
  HIDWORD(v218) = v251 ^ 0xA11;
  LODWORD(v218) = v251 ^ 0x41E92000;
  v252 = v218 >> 12;
  v253 = (v250 + 1926287901 - ((2 * v250) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4 * (v241 ^ 0x4C)];
  v254 = BYTE1(v198) ^ 0xC0;
  v255 = v254 - 1457789965 - 2 * (((v198 >> 8) ^ 0xD2CCC0) & 0xFB ^ (v198 >> 8) & 8);
  LODWORD(v198) = *(_DWORD *)&v215[4 * (BYTE2(v198) ^ 0xCC)];
  HIDWORD(v218) = v198 ^ 0xA11;
  LODWORD(v218) = v198 ^ 0x41E92000;
  LOBYTE(v237) = v239 ^ v237;
  v256 = *(_DWORD *)&v219[4 * (HIBYTE(v239) ^ 0xE)];
  v257 = HIDWORD(v465) ^ (v218 >> 12) ^ __ROR4__(v249 ^ 0x78071371, 4);
  v258 = v465 ^ v256 ^ v252 ^ (v245 - 2023942063 - ((2 * v245) & 0xEBA30A2));
  v259 = BYTE1(v192);
  v260 = HIDWORD(v461) ^ *(_DWORD *)&v209[4 * (BYTE1(v192) ^ 0x6D)] ^ (v253 - 1457789965 - ((2 * v253) & 0x5237C7E6));
  LODWORD(v192) = v171 ^ HIDWORD(v350) ^ v255 ^ *(_DWORD *)&v211[4 * (v237 ^ 0xCA)] ^ *(_DWORD *)&v209[4 * (v254 ^ 0x6D)] ^ (v243 + 1926287901 - ((2 * v243) & 0xE5A1A43A));
  v261 = v259 ^ 0x4552953C ^ v260;
  v262 = *(_DWORD *)&v215[4 * BYTE2(v261)];
  HIDWORD(v218) = v262 ^ 0xA11;
  LODWORD(v218) = v262 ^ 0x41E92000;
  v263 = v218 >> 12;
  BYTE1(v198) = BYTE1(v257) ^ 0xE7;
  v264 = *(_DWORD *)&v215[4 * ((v257 ^ 0x99FEE750) >> 16)];
  HIDWORD(v218) = v264 ^ 0xA11;
  LODWORD(v218) = v264 ^ 0x41E92000;
  v265 = (v218 >> 12) + 1926287901 - ((2 * (v218 >> 12)) & 0xE5A1A43A);
  v266 = *(_DWORD *)&v215[4 * (BYTE2(v192) ^ 2)];
  HIDWORD(v218) = v266 ^ 0xA11;
  LODWORD(v218) = v266 ^ 0x41E92000;
  LODWORD(v190) = (BYTE1(v261) - 1457789965 - ((v261 >> 7) & 0x1E6)) ^ *(_DWORD *)&v211[4
                                                                                      * (v258 ^ 0x72)] ^ *(_DWORD *)&v209[4 * (BYTE1(v261) ^ 0x6D)] ^ v265;
  v267 = *(_DWORD *)&v211[4 * v261] ^ *(_DWORD *)&v219[4 * (HIBYTE(v258) ^ 0xA7)] ^ (v218 >> 12) ^ 0xF58DCA4C;
  v268 = *(_DWORD *)&v215[4 * (BYTE2(v258) ^ 0x3B)];
  HIDWORD(v218) = v268 ^ 0xA11;
  LODWORD(v218) = v268 ^ 0x41E92000;
  v269 = HIDWORD(v456) ^ ((BYTE1(v192) ^ 0xD9) - 1457789965 - ((2 * ((v192 >> 8) ^ 0x9802D9)) & 0x1E6)) ^ *(_DWORD *)&v211[4 * (v257 ^ 0x1E)] ^ *(_DWORD *)&v209[4 * (BYTE1(v192) ^ 0xB4)] ^ (v218 >> 12) ^ *(_DWORD *)&v219[4 * (HIBYTE(v260) ^ 0x61)];
  v270 = v456 ^ *(_DWORD *)&v219[4 * (BYTE3(v192) ^ 0x98)] ^ (v190 - 2023942063 - ((2 * v190) & 0xEBA30A2));
  LODWORD(v190) = v267 - 1457789965 - ((2 * v267) & 0x5237C7E6);
  v271 = HIDWORD(v452) ^ *(_DWORD *)&v211[4 * (v192 ^ 0x3D)] ^ ((BYTE1(v258) ^ 0x29)
                                                                               - 1457789965
                                                                               - ((2 * ((v258 >> 8) ^ 0xA73B29)) & 0x1E6)) ^ *(_DWORD *)&v219[4 * ((v257 ^ 0x99FEE750) >> 24)] ^ *(_DWORD *)&v209[4 * (BYTE1(v258) ^ 0x44)];
  LODWORD(v192) = *(_DWORD *)&v215[4 * (BYTE2(v269) ^ 0x58)];
  HIDWORD(v218) = v192 ^ 0xA11;
  LODWORD(v218) = v192 ^ 0x41E92000;
  v272 = v218 >> 12;
  v273 = v271 ^ v263;
  LODWORD(v192) = v452 ^ *(_DWORD *)&v209[4 * (BYTE1(v198) ^ 0x6D)] ^ v190;
  LODWORD(v190) = *(_DWORD *)&v215[4 * (((v271 ^ v263) >> 16) ^ 0x65)];
  HIDWORD(v218) = v190 ^ 0xA11;
  LODWORD(v218) = v190 ^ 0x41E92000;
  v274 = ((unsigned __int16)(v271 ^ v263) >> 8) ^ 0x35;
  v275 = v274 - 1457789965 - ((2 * ((v273 >> 8) ^ 0x206535)) & 0x1E6);
  v269 ^= 0x5B224442u;
  LODWORD(v190) = *(_DWORD *)&v211[4 * ((v192 ^ BYTE1(v198)) ^ 0x41)] ^ (BYTE1(v269)
                                                                                        - 1457789965
                                                                                        - ((v269 >> 7) & 0x1E6)) ^ *(_DWORD *)&v209[4 * (BYTE1(v269) ^ 0x6D)] ^ ((v218 >> 12) + 1926287901 - ((2 * (v218 >> 12)) & 0xE5A1A43A));
  v276 = *(_DWORD *)&v215[4 * (BYTE2(v192) ^ 0x81)];
  HIDWORD(v218) = v276 ^ 0xA11;
  LODWORD(v218) = v276 ^ 0x41E92000;
  v277 = ((v218 >> 12) - 2023942063 - ((2 * (v218 >> 12)) & 0xEBA30A2)) ^ *(_DWORD *)&v219[4 * HIBYTE(v269)];
  v278 = (v277 + 1926287901 - ((2 * v277) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4 * (v273 ^ 0x49)];
  v279 = *(_DWORD *)&v215[4 * (BYTE2(v270) ^ 0xC6)];
  LODWORD(v198) = ((BYTE1(v192) ^ 0xA0)
                 - 1457789965
                 - 2 * (((v192 >> 8) ^ 0x6881A0) & 0xF7 ^ (v192 >> 8) & 4)) ^ (v272 + 1926287901 - ((2 * v272) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4 * (v270 ^ 0xFC)] ^ *(_DWORD *)&v209[4 * (BYTE1(v192) ^ 0xCD)];
  LODWORD(v218) = __ROR4__((v279 >> 12) ^ 0x269C3B0, 17) ^ 0xEE910136;
  HIDWORD(v218) = v218;
  v280 = v198 - 2023942063 - ((2 * v198) & 0xEBA30A2);
  LODWORD(v198) = HIDWORD(v448) ^ *(_DWORD *)&v209[4 * (BYTE1(v270) ^ 0x75)] ^ (v278
                                                                              - 1457789965
                                                                              - ((2 * v278) & 0x5237C7E6));
  v281 = v448 ^ *(_DWORD *)&v219[4 * (HIBYTE(v273) ^ 0x20)] ^ v280;
  v282 = HIDWORD(v443) ^ *(_DWORD *)&v219[4 * (HIBYTE(v270) ^ 0x5A)] ^ (v190 - 2023942063 - ((2 * v190) & 0xEBA30A2));
  LODWORD(v192) = v443 ^ v275 ^ *(_DWORD *)&v211[4 * v269] ^ *(_DWORD *)&v219[4 * (BYTE3(v192) ^ 0x68)] ^ *(_DWORD *)&v209[4 * (v274 ^ 0x6D)] ^ ((v218 >> 15) + (v279 << 20));
  LODWORD(v190) = ((BYTE1(v198) ^ 0x9D) - 1457789965 - ((2 * ((v198 >> 8) ^ 0xC2489D)) & 0x1E6)) ^ *(_DWORD *)&v209[4 * (BYTE1(v198) ^ 0xF0)];
  v283 = *(_DWORD *)&v215[4 * (BYTE2(v281) ^ 0x8F)];
  LODWORD(v190) = *(_DWORD *)&v211[4 * (v192 ^ 0xC6)] ^ (v283 << 20) ^ (v283 >> 12) ^ 0xA1141E92 ^ (v190 + 1926287901 - ((2 * v190) & 0xE5A1A43A));
  v284 = v282 ^ 0xCFB8D782;
  v285 = *(_DWORD *)&v215[4 * ((v282 ^ 0xCFB8D782) >> 16)];
  HIDWORD(v218) = v285 ^ 0xA11;
  LODWORD(v218) = v285 ^ 0x41E92000;
  v286 = ((v218 >> 12) + 1926287901 - ((2 * (v218 >> 12)) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4
                                                                                          * ((v198 ^ BYTE1(v270)) ^ 0x3F)];
  v287 = BYTE1(v281) ^ 0xD9;
  v288 = v287 - 1457789965 - ((2 * ((v281 >> 8) ^ 0xC78FD9)) & 0x1E6);
  v289 = *(_DWORD *)&v215[4 * (BYTE2(v198) ^ 0x48)];
  HIDWORD(v218) = v289 ^ 0xA11;
  LODWORD(v218) = v289 ^ 0x41E92000;
  v290 = ((BYTE1(v192) ^ 0xAA) - 1457789965 - ((2 * ((v192 >> 8) ^ 0x7216AA)) & 0x1E6)) ^ *(_DWORD *)&v211[4 * (v282 ^ 0xCC)] ^ *(_DWORD *)&v209[4 * (BYTE1(v192) ^ 0xC7)] ^ ((v218 >> 12) + 1926287901 - ((2 * (v218 >> 12)) & 0xE5A1A43A));
  v291 = *(_DWORD *)&v215[4 * (BYTE2(v192) ^ 0x16)];
  HIDWORD(v218) = v291 ^ 0xA11;
  LODWORD(v218) = v291 ^ 0x41E92000;
  LODWORD(v198) = HIDWORD(v438) ^ (BYTE1(v284) - 1457789965 - ((v284 >> 7) & 0x1E6)) ^ *(_DWORD *)&v211[4 * (v281 ^ 0x50)] ^ *(_DWORD *)&v209[4 * (BYTE1(v284) ^ 0x6D)] ^ *(_DWORD *)&v219[4 * (BYTE3(v198) ^ 0xC2)] ^ (v218 >> 12);
  v292 = v438 ^ *(_DWORD *)&v219[4 * (HIBYTE(v281) ^ 0xC7)] ^ (v290 - 2023942063 - ((2 * v290) & 0xEBA30A2));
  v293 = HIDWORD(v433) ^ *(_DWORD *)&v219[4 * HIBYTE(v284)] ^ (v190 - 2023942063 - ((2 * v190) & 0xEBA30A2));
  LODWORD(v192) = v433 ^ v288 ^ *(_DWORD *)&v209[4 * (v287 ^ 0x6D)] ^ *(_DWORD *)&v219[4 * (BYTE3(v192) ^ 0x72)] ^ (v286 - 2023942063 - ((2 * v286) & 0xEBA30A2));
  v294 = *(_DWORD *)&v215[4 * (BYTE2(v292) ^ 0xE6)];
  HIDWORD(v218) = v294 ^ 0xA11;
  LODWORD(v218) = v294 ^ 0x41E92000;
  v295 = v218 >> 12;
  v296 = *(_DWORD *)&v215[4 * (BYTE2(v293) ^ 0x1C)];
  HIDWORD(v218) = v296 ^ 0xA11;
  LODWORD(v218) = v296 ^ 0x41E92000;
  v297 = (((unsigned __int16)(v192 ^ 0xCCA2) >> 8)
        - 1457789965
        - (((v192 ^ 0x33C8CCA2) >> 7) & 0x1E6)) ^ *(_DWORD *)&v209[4
                                                                               * (((unsigned __int16)(v192 ^ 0xCCA2) >> 8) ^ 0x6D)];
  LODWORD(v190) = (v218 >> 12) ^ *(_DWORD *)&v209[4 * (BYTE1(v292) ^ 0xD9)] ^ ((BYTE1(v292) ^ 0xB4)
                                                                             - 1457789965
                                                                             - ((2 * ((v292 >> 8) ^ 0x4FE6B4)) & 0x1E6));
  LODWORD(v190) = (v190 + 1926287901 - ((2 * v190) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4 * (v198 ^ 0xA6)];
  v298 = (v297 + 1926287901 - ((2 * v297) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4 * (v293 ^ 0x3A)];
  v299 = *(_DWORD *)&v211[4 * (v292 ^ 0x96)];
  HIDWORD(v218) = v299 ^ 0x12D0D21D;
  LODWORD(v218) = v299 ^ 0x60000000;
  v300 = *(_DWORD *)&v211[4 * (v192 ^ 0xA2)] ^ (((unsigned __int16)(v198 ^ 0xDEA6) >> 8)
                                                               - 1457789965
                                                               - (((v198 ^ 0xECBEDEA6) >> 7) & 0x1E6)) ^ *(_DWORD *)&v209[4 * (((unsigned __int16)(v198 ^ 0xDEA6) >> 8) ^ 0x6D)] ^ (v295 + 1926287901 - ((2 * v295) & 0xE5A1A43A));
  HIDWORD(v218) = (v218 >> 29) ^ 0x6615DA09;
  LODWORD(v218) = HIDWORD(v218);
  v301 = (v218 >> 3) - 1457789965 - ((2 * (v218 >> 3)) & 0x5237C7E6);
  v302 = *(_DWORD *)&v215[4 * ((v198 ^ 0xECBEDEA6) >> 16)];
  HIDWORD(v218) = v302 ^ 0xA11;
  LODWORD(v218) = v302 ^ 0x41E92000;
  v303 = v218 >> 12;
  v304 = *(_DWORD *)&v215[4 * ((v192 ^ 0x33C8CCA2) >> 16)];
  HIDWORD(v218) = v304 ^ 0xA11;
  LODWORD(v218) = v304 ^ 0x41E92000;
  v305 = HIDWORD(v427) ^ *(_DWORD *)&v219[4 * (BYTE3(v192) ^ 0x17)] ^ (v190 - 2023942063 - ((2 * v190) & 0xEBA30A2));
  LODWORD(v190) = v301 ^ *(_DWORD *)&v209[4 * (BYTE1(v293) ^ 0xD1)] ^ (v218 >> 12);
  v306 = *(_DWORD *)&v219[4 * (BYTE3(v198) ^ 0xC8)] ^ HIDWORD(v493) ^ (v190 - 2023942063 - ((2 * v190) & 0xEBA30A2));
  LODWORD(v192) = v427 ^ *(_DWORD *)&v219[4 * (HIBYTE(v292) ^ 0x4F)] ^ v303 ^ (v298
                                                                             - 2023942063
                                                                             - ((2 * v298) & 0xEBA30A2));
  LODWORD(v198) = HIDWORD(v422) ^ *(_DWORD *)&v219[4 * (HIBYTE(v293) ^ 0x1B)] ^ (v300
                                                                               - 2023942063
                                                                               - ((2 * v300) & 0xEBA30A2));
  LODWORD(v190) = *(_DWORD *)&v215[4 * (BYTE2(v198) ^ 0x7E)];
  HIDWORD(v218) = v190 ^ 0xA11;
  LODWORD(v218) = v190 ^ 0x41E92000;
  v307 = v218 >> 12;
  LODWORD(v190) = *(_DWORD *)&v215[4 * (BYTE2(v192) ^ 1)];
  HIDWORD(v218) = v190 ^ 0xA11;
  LODWORD(v218) = v190 ^ 0x41E92000;
  LODWORD(v190) = ((v218 >> 12) + 1926287901 - ((2 * (v218 >> 12)) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4 * (v305 ^ 0xC6)];
  v308 = ((BYTE1(v305) ^ 0x71) - 1457789965 - 2 * (BYTE1(v305) ^ 0x71 ^ (v305 >> 8) & 0xC)) ^ *(_DWORD *)&v209[4 * (BYTE1(v305) ^ 0x1C)];
  v309 = (v308 - 2023942063 - ((2 * v308) & 0xEBA30A2)) ^ *(_DWORD *)&v219[4 * (BYTE3(v192) ^ 0x1F)];
  v310 = *(_DWORD *)&v215[4 * (BYTE2(v305) ^ 0x5B)];
  HIDWORD(v218) = v310 ^ 0xA11;
  LODWORD(v218) = v310 ^ 0x41E92000;
  v311 = v218 >> 12;
  v312 = BYTE1(v293) ^ 0x73F4E0AF ^ v306;
  v313 = *(_DWORD *)&v215[4 * BYTE2(v312)];
  HIDWORD(v218) = v313 ^ 0xA11;
  LODWORD(v218) = v313 ^ 0x41E92000;
  v314 = v218 >> 12;
  HIDWORD(v218) = v307 ^ ((BYTE1(v192) ^ 0x81)
                        - 1457789965
                        - 2 * (((v192 >> 8) ^ 0x1F0181) & 0xF7 ^ (v192 >> 8) & 4)) ^ 0xD678EAEF ^ *(_DWORD *)&v209[4 * (BYTE1(v192) ^ 0xEC)];
  LODWORD(v218) = HIDWORD(v218);
  LODWORD(v218) = (v218 >> 11) ^ __ROR4__(*(_DWORD *)&v219[4 * (HIBYTE(v305) ^ 0xF2)] ^ 0x254743EF, 11) ^ 0xD490839A;
  HIDWORD(v218) = v218;
  LODWORD(v192) = v422 ^ *(_DWORD *)&v211[4 * (v192 ^ 0xB8)] ^ ((BYTE1(v198) ^ 0xAA)
                                                                               - 1457789965
                                                                               - ((2
                                                                                 * ((v198 >> 8) ^ 0x967EAA)) & 0x1E6)) ^ *(_DWORD *)&v219[4 * (HIBYTE(v306) ^ 0x57)] ^ v311 ^ *(_DWORD *)&v209[4 * (BYTE1(v198) ^ 0xC7)];
  v315 = HIDWORD(v416) ^ *(_DWORD *)&v219[4 * (BYTE3(v198) ^ 0x96)] ^ (BYTE1(v312) - 1457789965 - ((v312 >> 7) & 0x1E6)) ^ *(_DWORD *)&v209[4 * (BYTE1(v312) ^ 0x6D)] ^ (v190 - 2023942063 - ((2 * v190) & 0xEBA30A2));
  LODWORD(v190) = v416 ^ *(_DWORD *)&v211[4 * (v198 ^ 0x88)] ^ v314 ^ (v309
                                                                                      + 1926287901
                                                                                      - ((2 * v309) & 0xE5A1A43A));
  v316 = HIDWORD(v411) ^ *(_DWORD *)&v211[4 * v312] ^ ((v218 >> 21)
                                                                      + 1926287901
                                                                      - ((2 * (v218 >> 21)) & 0xE5A1A43A));
  BYTE2(v307) = BYTE2(v190) ^ 0x4A;
  v317 = *(_DWORD *)&v215[4 * (BYTE2(v192) ^ 0x66)];
  HIDWORD(v218) = v317 ^ 0xA11;
  LODWORD(v218) = v317 ^ 0x41E92000;
  v318 = v218 >> 12;
  v319 = *(_DWORD *)&v209[4 * (BYTE1(v315) ^ 0x96)] ^ ((BYTE1(v315) ^ 0xFB)
                                                     - 1457789965
                                                     - ((2 * ((v315 >> 8) ^ 0x3EA2FB)) & 0x1E6));
  v320 = (v319 + 1926287901 - ((2 * v319) & 0xE5A1A43A)) ^ *(_DWORD *)&v211[4 * (v190 ^ 0x75)];
  v321 = *(_DWORD *)&v215[4 * (BYTE2(v315) ^ 0xA2)];
  HIDWORD(v218) = v321 ^ 0xA11;
  LODWORD(v218) = v321 ^ 0x41E92000;
  LODWORD(v198) = (((unsigned __int16)(v190 ^ 0xF075) >> 8)
                 - 1457789965
                 - (((v190 ^ 0xB54AF075) >> 7) & 0x1E6)) ^ (v218 >> 12) ^ *(_DWORD *)&v209[4 * (((unsigned __int16)(v190 ^ 0xF075) >> 8) ^ 0x6D)];
  LODWORD(v198) = (v198 - 2023942063 - ((2 * v198) & 0xEBA30A2)) ^ *(_DWORD *)&v219[4 * (HIBYTE(v316) ^ 0xED)];
  LODWORD(v190) = *(_DWORD *)&v219[4 * (BYTE3(v190) ^ 0x91)];
  v322 = *(_DWORD *)&v219[4 * (HIBYTE(v315) ^ 0x3E)];
  v323 = *(_DWORD *)&v219[4 * (BYTE3(v192) ^ 0x32)];
  v316 ^= 0xC9AF1D8F;
  v324 = *(_DWORD *)&v211[4 * v316];
  LODWORD(v219) = *(_DWORD *)&v211[4 * (v315 ^ 0x9A)];
  v325 = *(_DWORD *)&v211[4 * (v192 ^ 0x23)];
  LODWORD(v211) = BYTE1(v316);
  v326 = BYTE1(v316) - 1457789965 - ((v316 >> 7) & 0x1E6);
  v327 = *(_DWORD *)&v215[4 * BYTE2(v316)];
  LODWORD(v215) = *(_DWORD *)&v215[4 * BYTE2(v307)];
  HIDWORD(v218) = v215 ^ 0xA11;
  LODWORD(v218) = v215 ^ 0x41E92000;
  LODWORD(v219) = v411 ^ v219 ^ v318 ^ v190 ^ v326 ^ *(_DWORD *)&v209[4 * (v211 ^ 0x6D)];
  LODWORD(v190) = HIDWORD(v405) ^ ((BYTE1(v192) ^ 0xA)
                                 - 1457789965
                                 - ((2 * ((v192 >> 8) ^ 0x32660A)) & 0x1E6)) ^ v322 ^ *(_DWORD *)&v209[4 * (BYTE1(v192) ^ 0x67)] ^ (v218 >> 12);
  LODWORD(v198) = v405 ^ v325 ^ (v198 + 1926287901 - ((2 * v198) & 0xE5A1A43A));
  LODWORD(v192) = HIDWORD(v400) ^ v323 ^ (v327 >> 12) ^ (v327 << 20) ^ (v320 - 2023942063 - ((2 * v320) & 0xEBA30A2));
  v328 = (char *)*(&off_1002CCD00 + (int)v388) - 12;
  v329 = (char *)*(&off_1002CCD00 + SHIDWORD(v382)) - 12;
  LODWORD(v211) = v190 ^ v324;
  LODWORD(v190) = *(_DWORD *)&v329[4 * (BYTE1(v192) ^ 0x3D)] ^ *(_DWORD *)&v328[4 * (v198 ^ 7)];
  LODWORD(v215) = *(_DWORD *)&v329[4 * (BYTE1(v219) ^ 0xBB)];
  v330 = *(_DWORD *)&v329[4 * ((unsigned __int16)(v198 ^ 0x6F07) >> 8)];
  v331 = *(_DWORD *)&v329[4 * (BYTE1(v211) ^ 0x99)];
  v332 = *(unsigned int *)(v54 - 128);
  v333 = (char *)*(&off_1002CCD00 + (int)v332 - 840) - 8;
  LODWORD(v209) = *(_DWORD *)&v333[4 * (BYTE3(v198) ^ 0xEF)];
  v334 = *(_DWORD *)&v333[4 * ((v211 >> 24) ^ 0x33)];
  v335 = *(_DWORD *)&v333[4 * (BYTE3(v192) ^ 0x3C)];
  LODWORD(v329) = *(_DWORD *)&v333[4 * ((v219 >> 24) ^ 0xC4)];
  v336 = (char *)*(&off_1002CCD00 + (int)v382) - 12;
  v337 = *(_DWORD *)&v336[4 * (BYTE2(v192) ^ 0xA8)];
  v338 = *(_DWORD *)&v336[4 * (BYTE2(v198) ^ 0x2A)];
  LODWORD(v190) = ((v190 ^ 0xD3CDDCEE) + 1120374283 - 2 * ((v190 ^ 0xD3CDDCEE) & 0x42C78E1B ^ v190 & 0x10)) ^ v334;
  v339 = *(unsigned int *)&v336[4 * (BYTE2(v211) ^ 0x34)];
  LODWORD(v190) = *(_DWORD *)&v336[4 * (BYTE2(v219) ^ 6)] ^ (v190 + 124387817 + (~(2 * v190) | 0xF12BFC2D) + 1);
  v340 = *(_DWORD *)&v328[4 * (v219 ^ 0x90)];
  LODWORD(v219) = *(_DWORD *)&v328[4 * (v211 ^ 0xC5)];
  LODWORD(v211) = *(_DWORD *)&v328[4 * (v192 ^ 0x49)];
  LODWORD(v328) = *(_DWORD *)(v54 - 144) ^ HIDWORD(v491) ^ (v190 - ((2 * v190) & 0x4B470DE8) - 1516009740);
  v341 = (char *)*(&off_1002CCD00 + SHIDWORD(v377)) - 4;
  *(_BYTE *)(*(_QWORD *)(v54 - 120) + 8) = v341[(v328 >> 24) ^ 0xD7] ^ 0x37;
  LODWORD(v190) = ((v330 ^ v337 ^ 0x759D9EA5)
                 + 1120374283
                 - 2 * ((v330 ^ v337 ^ 0x759D9EA5) & 0x42C78E1B ^ (v330 ^ v337) & 0x10)) ^ v329;
  LODWORD(v190) = (v190 - 1590017118 - ((2 * v190) & 0x42748744)) ^ v219;
  LODWORD(v190) = *(_DWORD *)(v54 - 140) ^ v492 ^ (v190 - ((2 * v190) & 0x8405BE86) + 1107484483);
  v342 = (char *)*(&off_1002CCD00 + (int)v332 - 957) - 8;
  *(_BYTE *)(*(_QWORD *)(v54 - 120) + *(_QWORD *)(v54 - 232)) = (v342[v190 ^ 0xC7] - 111) ^ 0x5F;
  v343 = (uint64_t)*(&off_1002CCD00 + (int)v377);
  LODWORD(v329) = *(unsigned __int8 *)(v343 + (BYTE1(v190) ^ 0x13));
  HIDWORD(v218) = v329 ^ 0xD;
  LODWORD(v218) = (_DWORD)v329 << 24;
  *(_BYTE *)(*(_QWORD *)(v54 - 120) + 6) = (v218 >> 30) ^ 0x40;
  LODWORD(v329) = v340 ^ 0xA650424B;
  v344 = *(_QWORD *)(v54 - 120);
  LODWORD(v329) = ((v329 ^ v338) + 1120374283 - ((2 * (v329 ^ v338)) & 0x858F1C16)) ^ v335;
  LODWORD(v329) = ((_DWORD)v329 - ((2 * (_DWORD)v329) & 0xE5EF3E98) + 1928830796) ^ v331;
  v345 = *(_DWORD *)(v54 - 136) ^ v493 ^ ((_DWORD)v329 - ((2 * (_DWORD)v329) & 0x338F34EE) - 1714972041);
  LODWORD(v329) = *(unsigned __int8 *)(v343 + BYTE1(v345));
  HIDWORD(v218) = v329 ^ 0xD;
  LODWORD(v218) = (_DWORD)v329 << 24;
  *(_BYTE *)(v344 + *(_QWORD *)(v54 - 224)) = (v218 >> 30) ^ 0x7E;
  v346 = (char *)*(&off_1002CCD00 + SHIDWORD(a17)) - 12;
  *(_BYTE *)(v344 + 9) = v346[BYTE2(v328) ^ 0xFBLL] ^ 0xCE;
  LODWORD(v329) = ((v209 ^ v215 ^ 0x30301147)
                 + 124387817
                 - 2
                 * ((v209 ^ v215 ^ 0x30301147) & 0x76A01F9 ^ (v209 ^ v215) & 0x10)) ^ v339;
  LODWORD(v329) = ((_DWORD)v329 - 1590017118 - ((2 * (_DWORD)v329) & 0x42748744)) ^ v211;
  LODWORD(v329) = *(_DWORD *)(v54 - 132) ^ HIDWORD(v492) ^ ((_DWORD)v329 - ((2 * (_DWORD)v329) & 0x54F334EA) - 1434871179);
  *(_BYTE *)(v344 + *(_QWORD *)(v54 - 176)) = v346[BYTE2(v329) ^ 0xB8] ^ 0x1D;
  *(_BYTE *)(v344 + *(_QWORD *)(v54 - 256)) = (v342[v328 ^ 0x1BLL] - 111) ^ 0x7D;
  *(_BYTE *)(v344 + *(_QWORD *)(v54 - 240)) = v346[BYTE2(v190) ^ 3] ^ 0x63;
  *(_BYTE *)(v344 + *(_QWORD *)(v54 - 192)) = v341[BYTE3(v190) ^ 0x6DLL] ^ 0xCF;
  LODWORD(v190) = *(unsigned __int8 *)(v343 + (BYTE1(v328) ^ 0x92));
  HIDWORD(v218) = v190 ^ 0xD;
  LODWORD(v218) = (_DWORD)v190 << 24;
  *(_BYTE *)(v344 + *(_QWORD *)(v54 - 168)) = (v218 >> 30) ^ 0xD2;
  v347 = *(_QWORD *)(v54 - 216);
  *(_BYTE *)(v344 + v347) = v341[BYTE3(v345) ^ 0x53] ^ 0x23;
  *(_BYTE *)(v344 + *(_QWORD *)(v54 - 200)) = (v342[v345 ^ 0x95] - 111) ^ 0xAF;
  *(_BYTE *)(v344 + *(_QWORD *)(v54 - 248)) = (v342[v329 ^ 0x64] - 111) ^ 0x27;
  *(_BYTE *)(v344 + *(_QWORD *)(v54 - 184)) = v341[(v329 >> 24) ^ 0x6ELL] ^ 0xB5;
  LODWORD(v190) = *(unsigned __int8 *)(v343 + (BYTE1(v329) ^ 0x1FLL));
  HIDWORD(v218) = v190 ^ 0xD;
  LODWORD(v218) = (_DWORD)v190 << 24;
  *(_BYTE *)(v344 + *(_QWORD *)(v54 - 208)) = (v218 >> 30) ^ 0x58;
  *(_BYTE *)(v344 + *(_QWORD *)(v54 - 152)) = v346[BYTE2(v345) ^ 0xC8] ^ 0x4C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a50 + 8 * ((1626 * ((((_DWORD)v347 + 1040486385 - 2 * (((_DWORD)v347 + 16) & *(_DWORD *)(v54 - 156))) ^ 0x3E048FE1u) < v400)) ^ ((int)v332 - 522))) - 4))(v332, 1105797120, v339, v345, 13, v342, 109, 1120374283, a2, v349, v350, v351, v352, v354, v356, v358, v359, v362, v364,
           v367,
           v371,
           a15,
           a16,
           a17,
           v377,
           v382,
           v388,
           v393,
           v400,
           v405,
           v411,
           v416,
           v422,
           v427,
           v433,
           v438,
           v443,
           v448,
           v452,
           v456,
           v461,
           v465,
           v469,
           v474,
           v479,
           v483,
           v485,
           v487,
           v489,
           a43,
           v490,
           v491,
           v492,
           v493);
}

void sub_1001CD65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59,int a60,int a61)
{
  uint64_t v61;

  *(_DWORD *)(v61 - 132) = a58 ^ 0x714BC159;
  *(_DWORD *)(v61 - 144) = a60 ^ 0x1EFAE75B;
  *(_DWORD *)(v61 - 136) = a61 ^ 0xEDD1538F;
  *(_DWORD *)(v61 - 140) = a59 ^ 0xBB5E405F;
  JUMPOUT(0x1001CB9DCLL);
}

uint64_t sub_1001CD6B0(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (v3 | (v4 == a3) | (32 * (v4 == a3))))
                            - (v3 - 763)
                            - (((v3 - 1284) | 0x401u) ^ 0xFFFFFFFFFFFFF9FALL)))();
}

uint64_t sub_1001CD6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v10
                                                                              + 8
                                                                              * ((193
                                                                                * ((((v9 + 504) ^ a7) & v8) != v9 - 529)) ^ v9)))(a1, a2, a3, (v7 - a3), (v9 + 12));
}

uint64_t sub_1001CD71C(int a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  char v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  int8x16x4_t v76;

  *(_DWORD *)(v64 - 132) = v61 & 0xFFFFFFF8;
  *(_DWORD *)(v64 - 128) = v61;
  v66 = -8 - a3;
  v67 = v63 + a1;
  v68 = v62 + v63 + a1;
  v69 = v68 + 11;
  v70 = v68 + 12;
  v71 = v68 + 13;
  v72 = v68 + 14;
  v73 = v68 + 15;
  v74 = (v67 + a2 + v66 + 8);
  v76.val[0].i64[0] = ((_BYTE)v67 + (_BYTE)a2 + (_BYTE)v66 + 8) & 0xF;
  v76.val[0].i64[1] = (v60 + (_BYTE)v66 + 8) & 0xF;
  v76.val[1].i64[0] = (v73 + (_BYTE)v66 + 8) & 0xF;
  v76.val[1].i64[1] = (v72 + (_BYTE)v66 + 8) & 0xF;
  v76.val[2].i64[0] = (v71 + (_BYTE)v66 + 8) & 0xF;
  v76.val[2].i64[1] = (v70 + (_BYTE)v66 + 8) & 0xF;
  v76.val[3].i64[0] = (v69 + (_BYTE)v66 + 8) & 0xF;
  v76.val[3].i64[1] = (v60 + (_BYTE)v66 + 8 + ((a5 - 12) ^ 0xFB)) & 0xF;
  *(int8x8_t *)(v65 - 7 + v74) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(v65 - 7 + v74), *(int8x8_t *)(v59 + (v74 & 0xF) - 7)), veor_s8(*(int8x8_t *)(v58 + (v74 & 0xF) - 7), *(int8x8_t *)(v57 + (v74 & 0xF) - 7)))), (int8x8_t)0xC1C1C1C1C1C1C1C1), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v76, (int8x16_t)xmmword_100235570), (int8x8_t)0x505050505050505)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a57 + 8 * ((37 * (-(v61 & 0xFFFFFFF8) == v66)) ^ a5)) - 12))((__n128)xmmword_100235570);
}

void sub_1001CD860()
{
  JUMPOUT(0x1001CD770);
}

uint64_t sub_1001CD868(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v2
                              + 8 * (((a2 + a2 + 504 - 1503) * (*(_DWORD *)(v3 - 128) == *(_DWORD *)(v3 - 132))) ^ a2)))();
}

uint64_t sub_1001CD894(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = (a4 - 313836799);
  *(_BYTE *)(v11 + v12) ^= *(_BYTE *)(v8 + (v12 & 0xF)) ^ *(_BYTE *)(v7 + (v12 & 0xF)) ^ *(_BYTE *)(v6 + (v12 & 0xF)) ^ (5 * (v12 & 0xF)) ^ 0xC1;
  return (*(uint64_t (**)(void))(v10 + 8 * ((7 * (a4 - 1 != v9)) ^ (a6 - 479))))();
}

void sub_1001CD8F4()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 2087569631)
    v1 = 1810546658;
  else
    v1 = -1810504646;
  *(_DWORD *)(v2 + 40) = v1;
}

void sub_1001CD958(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 + 1755732067 * (((a1 | 0xFD508F6) - (_DWORD)a1 + (a1 & 0xF02AF709)) ^ 0xD113B52D);
  __asm { BR              X12 }
}

uint64_t sub_1001CDA54(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _BOOL4 v7;
  int v8;
  int v9;
  _BOOL4 v10;

  v6 = v2 ^ 0x1A4;
  v7 = v5 > (v2 ^ 0x217A9FA9u);
  v8 = v3 + ((v6 + 92) ^ 0x3FA7162C);
  v9 = v7 ^ (v8 < -561684147);
  v10 = v8 < (int)(v5 + 1585799501);
  if (!v9)
    v7 = v10;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4 + 8 * ((109 * v7) ^ v6)) - 12))(0x45099F22C12449, a2, (a2 + 644258774));
}

uint64_t sub_1001CDB7C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X6>, unsigned int a5@<W7>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL4 v21;

  v18 = (v14 + 1597298268) & 0xA0CB29FF;
  v19 = a1
      - 0x45099F22C12449
      + ((v18 + 339) ^ (v10 + 418) ^ *(_DWORD *)(v7 + 4 * v9))
      + a5 * (unint64_t)(*(_DWORD *)(*a4 + 4 * (int)(v13 + ((v18 - 92) ^ v16))) ^ v10);
  *(_DWORD *)(v7 + 4 * v9) = v19 + v10 - ((2 * v19) & 0x4D8C80EC);
  v20 = (v17 ^ HIDWORD(v19)) + (a6 & (v19 >> 31)) + v11;
  if (a2 > 0x59996429 != v12 < v8)
    v21 = a2 > 0x59996429;
  else
    v21 = v12 < a3;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v6 + 8 * (int)(v18 ^ (!v21 * v15))) - 4))(v20);
}

void sub_1001CDC58()
{
  JUMPOUT(0x1001CDB10);
}

uint64_t sub_1001CDC64(uint64_t a1)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((1610 * (a1 != ((v1 - 387089387) & 0x171283FD) + 0x45099F22C121C8)) ^ v1))
                            - (v1 + 572)
                            + 1190))();
}

uint64_t sub_1001CDCC0@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _BOOL4 v7;

  v4 = a1 - 32;
  v5 = v3 + a1 - 32 - 278289134;
  v7 = v1 - 796172963 < 1869195123 && v1 - 796172963 >= v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((229 * v7) ^ v4))
                            - ((v4 + 35)
                             + ((v4 + 13) ^ 0xFFFFFFFFFFFFFFEALL))))();
}

uint64_t sub_1001CDD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  v14 = a1 - 0x45099F22C12449 + ((v11 + v12 + 572 - 1194) ^ 0x26C64076u);
  *(_DWORD *)(v8 + 4 * v10) = v14 + v11 - ((2 * v14) & 0x4D8C80EC);
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8 * ((((a5 ^ HIDWORD(v14)) + (a6 & (v14 >> 31)) + a7 != v13) * a8) ^ v12))
                            - 4))();
}

void sub_1001CDDFC()
{
  JUMPOUT(0x1001CDD30);
}

uint64_t sub_1001CDE04(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  _BOOL4 v7;
  int v8;
  _BOOL4 v9;

  v6 = *v5 + 817282092;
  v7 = v3 + 817282092 < (int)((a3 - 572) ^ 0xCF95042C);
  v8 = v7 ^ (v6 < -812317118);
  v9 = v3 + 817282092 > v6;
  if (!v8)
    v7 = v9;
  return (*(uint64_t (**)(void))(v4 + 8 * ((!v7 * (a3 - 1178)) ^ a3)))();
}

void sub_1001CDE68()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_1001CDE8C(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_1001CDF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  a13 = 108757529
      * (((&a12 | 0x7488BE6A) - &a12 + (&a12 & 0x8B774190)) ^ 0x9414DC41)
      - 504207030;
  v16 = sub_10020807C(&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15 + 8 * ((1687 * (a12 == v13)) ^ v14)) - 4))(v16);
}

uint64_t sub_1001CDF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, int a13, unsigned int a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  a14 = 915
      - 460628867
      * ((((2 * (&a12 ^ 0x326B2B15)) | 0xB22CC208) - (&a12 ^ 0x326B2B15) + 652844796) ^ 0xA7EBC86C);
  a12 = &STACK[0x1706FB9DE6F6FC6C];
  sub_1001E0B18((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14
                                                                                          + 8
                                                                                          * (((a13 == 1810546658) | (8 * (a13 == 1810546658))) ^ 0x2B5u))
                                                                              - 4))(v15, v16, v17, v18, v19);
}

uint64_t sub_1001CE014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v18 = 1178560073 * (&a12 ^ 0xBA947862);
  a14 = a11;
  a13 = v18 + 1160082353 * v15 + 359058754;
  a15 = v18 ^ 0x40C;
  sub_1001DAAB8((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17
                                                                                          + 8
                                                                                          * ((4 * (a12 == v16)) | 0x142u))
                                                                              - 12))(v19, v20, v21, v22, v23);
}

