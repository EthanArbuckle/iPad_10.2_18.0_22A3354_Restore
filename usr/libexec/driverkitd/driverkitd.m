void sub_100004A18(void *a1)
{
  id v1;
  void *v2;

  v1 = objc_retainBlock(a1);
  v2 = (void *)qword_10015CA60;
  qword_10015CA60 = (uint64_t)v1;

}

uint64_t sub_100004A38()
{
  if (!qword_10015CA60)
    return 3758097112;
  (*(void (**)(void))(qword_10015CA60 + 16))();
  return 0;
}

uint64_t sub_100004A78(void *a1, _DWORD *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v11;

  v3 = a1;
  v4 = objc_alloc((Class)OSLaunchdJob);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[OSLaunchdDomain systemDomain](OSLaunchdDomain, "systemDomain"));
  v6 = objc_msgSend(v4, "initWithPlist:domain:", v3, v5);

  v11 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "submitAndStart:", &v11));
  v8 = v11;
  if (v7)
  {
    if (objc_msgSend(v7, "state") == (id)2)
    {
      v9 = 0;
      if (a2)
        *a2 = objc_msgSend(v7, "pid");
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_10010CB7C(v7);
      v9 = 8;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10010CAE8(v8);
    v9 = 72;
  }

  return v9;
}

_DWORD *(*sub_100004BCC(uint64_t a1))(_DWORD *result, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) == 77000)
    return sub_100004BE8;
  else
    return 0;
}

_DWORD *sub_100004BE8(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)sub_100004A38();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t sub_100004C40(_DWORD *a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_QWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (a1[5] == 77000)
  {
    if ((*a1 & 0x80000000) != 0 || a1[1] != 24)
    {
      *(_DWORD *)(a2 + 32) = -304;
      *(NDR_record_t *)(a2 + 24) = NDR_record;
    }
    else
    {
      *(_DWORD *)(a2 + 32) = sub_100004A38();
    }
    return 1;
  }
  else
  {
    result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void sub_100004CF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  void *v8;
  _QWORD aBlock[5];
  uint64_t v10;
  __int128 v11[2];

  v2 = a1[3];
  v3 = a1[4];
  sub_100004DE4(a1, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  sub_100005C44((uint64_t)a1, (uint64_t)v11);
  v7 = swift_allocObject(&unk_100145C98, 56, 7);
  sub_100004E2C(v11, v7 + 16);
  aBlock[4] = sub_100004E44;
  v10 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005224;
  aBlock[3] = &unk_100145CB0;
  v8 = _Block_copy(aBlock);
  swift_release(v10);
  AnalyticsSendEventLazy(v6, v8);
  _Block_release(v8);

}

_QWORD *sub_100004DE4(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100004E08()
{
  uint64_t v0;

  sub_100005D08((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100004E2C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100004E44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[5];
  v2 = v0[6];
  sub_100004DE4(v0 + 2, v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  sub_100004EA0(v3);
  v5 = v4;
  swift_bridgeObjectRelease(v3);
  return v5;
}

void sub_100004EA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  int64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  int64_t v40;
  id v41;
  _BYTE v42[32];
  _QWORD v43[2];
  uint64_t v44;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100005C88(&qword_100157C58);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v37 = v1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v1 + 64);
  v7 = &v44;
  v36 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain(v1);
  v8 = 0;
  v9 = (unint64_t *)&unk_100157C50;
  v10 = NSObject_ptr;
  v11 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v6)
    {
      v39 = (v6 - 1) & v6;
      v40 = v8;
      v19 = __clz(__rbit64(v6)) | (v8 << 6);
    }
    else
    {
      v20 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_36;
      if (v20 >= v36)
      {
LABEL_33:
        sub_100005DE0(v1);
        return;
      }
      v21 = *(_QWORD *)(v37 + 8 * v20);
      v22 = v8 + 1;
      if (!v21)
      {
        v22 = v8 + 2;
        if (v8 + 2 >= v36)
          goto LABEL_33;
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          v22 = v8 + 3;
          if (v8 + 3 >= v36)
            goto LABEL_33;
          v21 = *(_QWORD *)(v37 + 8 * v22);
          if (!v21)
          {
            v22 = v8 + 4;
            if (v8 + 4 >= v36)
              goto LABEL_33;
            v21 = *(_QWORD *)(v37 + 8 * v22);
            if (!v21)
            {
              v23 = v8 + 5;
              if (v8 + 5 >= v36)
                goto LABEL_33;
              v21 = *(_QWORD *)(v37 + 8 * v23);
              if (!v21)
              {
                while (1)
                {
                  v22 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_37;
                  if (v22 >= v36)
                    goto LABEL_33;
                  v21 = *(_QWORD *)(v37 + 8 * v22);
                  ++v23;
                  if (v21)
                    goto LABEL_26;
                }
              }
              v22 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      v39 = (v21 - 1) & v21;
      v40 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v26 = *v24;
    v25 = v24[1];
    sub_100005D28(*(_QWORD *)(v1 + 56) + 32 * v19, (uint64_t)v7);
    v43[0] = v26;
    v43[1] = v25;
    sub_100005D28((uint64_t)v7, (uint64_t)v42);
    swift_bridgeObjectRetain_n(v25, 2);
    sub_100005DA0((uint64_t)v43);
    v27 = sub_100005D68(0, v9, v10);
    if (!swift_dynamicCast(&v41, v42, v11, v27, 6))
    {
      v41 = 0;
      swift_bridgeObjectRelease(v25);

      sub_100005DE0(v1);
      swift_release(v3);
      return;
    }
    v28 = v41;
    v29 = sub_100005DE8(v26, v25);
    v30 = v29;
    if ((v31 & 1) != 0)
    {
      v38 = v28;
      v12 = v11;
      v13 = v10;
      v14 = v7;
      v15 = v1;
      v16 = v9;
      v17 = (uint64_t *)(v3[6] + 16 * v29);
      swift_bridgeObjectRelease(v17[1]);
      *v17 = v26;
      v17[1] = v25;
      v9 = v16;
      v1 = v15;
      v7 = v14;
      v10 = v13;
      v11 = v12;
      v18 = v3[7];

      *(_QWORD *)(v18 + 8 * v30) = v38;
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v29;
    v32 = (uint64_t *)(v3[6] + 16 * v29);
    *v32 = v26;
    v32[1] = v25;
    *(_QWORD *)(v3[7] + 8 * v29) = v28;
    v33 = v3[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_35;
    v3[2] = v35;
LABEL_8:
    v6 = v39;
    v8 = v40;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

Class sub_100005224(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_100005D68(0, &qword_100157C50, NSObject_ptr);
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t sub_1000052A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000052B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000052C0()
{
  uint64_t v0;

  return swift_allocObject(v0, 16, 7);
}

void sub_1000052D0()
{
  os_log_type_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  uint64_t v3;
  NSObject *log;
  uint64_t v5;
  uint64_t v6;

  v0 = static os_log_type_t.error.getter();
  sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v1 = v0;
  log = static OS_os_log.default.getter();
  if (os_log_type_enabled(log, v0))
  {
    v2 = (uint8_t *)swift_slowAlloc(12, -1);
    v3 = swift_slowAlloc(32, -1);
    v6 = v3;
    *(_DWORD *)v2 = 136315138;
    v5 = sub_1000055A0(0x65766528646E6573, 0xEC000000293A746ELL, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v5, &v6, v2 + 4, v2 + 12);
    _os_log_impl((void *)&_mh_execute_header, log, v1, "Unexpected call to %s", v2, 0xCu);
    swift_arrayDestroy(v3, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v3, -1, -1);
    swift_slowDealloc(v2, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100005438()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_100005448()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t sub_100005470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_1000054E8(v10, v7, v8);
}

uint64_t sub_1000054E8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_100157B00);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_100005554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100157B00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t sub_1000055A0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100005670(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100005D28((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100005D28((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100005D08(v12);
  return v7;
}

uint64_t sub_100005670(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100005828(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100005828(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000058BC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_100005A94(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100005A94(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000058BC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100005A30(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100005A30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100005C88(&qword_100157C48);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100005A94(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_100157C48);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_100005BE0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100005C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100005C44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100005C88(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for RealCoreAnalyticsClient()
{
  return objc_opt_self(_TtC10driverkitd23RealCoreAnalyticsClient);
}

uint64_t type metadata accessor for NullCoreAnalyticsClient()
{
  return objc_opt_self(_TtC10driverkitd23NullCoreAnalyticsClient);
}

uint64_t sub_100005D08(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100005D28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100005D68(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100005DA0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005C88(&qword_100157C60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100005DE0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100005DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100005E4C(a1, a2, v5);
}

unint64_t sub_100005E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void sub_100005F34(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  os_unfair_lock_s *v5;

  v4 = a3 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)a3 + 16);
  v5 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(_QWORD *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(v4);
  os_unfair_lock_unlock(v5);
}

BOOL static KMAllocatedUnfairLock.Ownership.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void KMAllocatedUnfairLock.Ownership.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int KMAllocatedUnfairLock.Ownership.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_100006038(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static KMAllocatedUnfairLock.Ownership.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100006044()
{
  char *v0;

  return KMAllocatedUnfairLock.Ownership.hashValue.getter(*v0);
}

void sub_10000604C(uint64_t a1)
{
  char *v1;

  KMAllocatedUnfairLock.Ownership.hash(into:)(a1, *v1);
}

Swift::Int sub_100006054(uint64_t a1)
{
  char *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  KMAllocatedUnfairLock.Ownership.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_100006090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000060D8(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t sub_1000060D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[4];

  type metadata accessor for os_unfair_lock_s();
  type metadata accessor for ManagedBuffer(0, a2, v4);
  v6[2] = a1;
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)(1, sub_100006344, v6);
}

uint64_t sub_100006144(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for KMAllocatedUnfairLock<A>.Ownership, a1);
}

uint64_t sub_100006154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for KMAllocatedUnfairLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000639C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KMAllocatedUnfairLock);
}

uint64_t sub_100006168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

_BYTE *initializeBufferWithCopyOfBuffer for KextsOutOfOSImageFeatureFlags(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for KextsOutOfOSImageFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_100006210(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10000625C + 4 * byte_10010ED35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100006290 + 4 * asc_10010ED30[v4]))();
}

uint64_t sub_100006290(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000062A0);
  return result;
}

uint64_t sub_1000062AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000062B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000062B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000062C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000062CC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000062D8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for KMAllocatedUnfairLock.Ownership(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000639C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KMAllocatedUnfairLock.Ownership);
}

void type metadata accessor for os_unfair_lock_s()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_100157C68)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_100145DF8);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_100157C68);
  }
}

uint64_t sub_100006344@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4
                                                                             + class metadata base offset for ManagedBuffer)
                                                                 - 8)
                                                     + 16))(a2, v3);
}

uint64_t sub_10000639C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_1000063C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 64;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100006410(v3, a1);
}

uint64_t sub_100006410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100157C70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100006458(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 64;
  swift_beginAccess(v3, v5, 33, 0);
  sub_1000064A8(a1, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1000064A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100157C70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *sub_1000064F0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 64, a1, 33, 0);
  return &j_j__swift_endAccess;
}

id sub_10000652C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 104, v2, 0, 0);
  return *(id *)(v0 + 104);
}

void sub_10000655C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 104, v4, 1, 0);
  v3 = *(void **)(v1 + 104);
  *(_QWORD *)(v1 + 104) = a1;

}

void *sub_1000065A0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 104, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_1000065DC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 112, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 112));
}

uint64_t sub_100006610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 112, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = a1;
  return swift_release(v3);
}

void *sub_100006654(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 112, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100006690()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 120, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 120));
}

uint64_t sub_1000066C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 120, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 120) = a1;
  return swift_release(v3);
}

void *sub_100006708(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 120, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100006744()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 128, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 128));
}

uint64_t sub_100006778(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 128, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = a1;
  return swift_release(v3);
}

void *sub_1000067BC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 128, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_1000067F8()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 136, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 136));
}

uint64_t sub_10000682C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 136, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = a1;
  return swift_release(v3);
}

void *sub_100006870(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 136, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_1000068AC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 144, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 144));
}

uint64_t sub_1000068E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 144, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 144) = a1;
  return swift_release(v3);
}

void *sub_100006924(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 144, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_100006964()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 152, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 152));
}

uint64_t sub_100006998(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 152, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 152) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *sub_1000069DC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 152, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100006A18(_QWORD *a1, _QWORD *a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;

  swift_allocObject(v3, 160, 7);
  v7 = sub_100010A70((uint64_t)a1, a2, a3);

  sub_100010B40(a1);
  return v7;
}

uint64_t sub_100006A7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 216);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for ApprovalManager(0);
    sub_1000CD228(v1, (uint64_t)&off_100145E78, v7, (uint64_t)&off_10014B320);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100006AE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 240);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 232))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for DriverBinManager(0);
    sub_1000CD228(v1, (uint64_t)&off_100145E78, v7, (uint64_t)&off_100147550);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100006B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 264);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 256))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for ApplicationManager();
    sub_1000CD228(v1, (uint64_t)&off_100145E78, v7, (uint64_t)&off_1001463D8);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100006BC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t active;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 288);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 280))(v4);
  if (result)
  {
    v6 = result;
    active = type metadata accessor for ActiveDriversStateManager();
    sub_1000CD228(v1, (uint64_t)&off_100145E78, active, (uint64_t)&off_100146760);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100006C2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 312);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 304))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for ActivationStateManager();
    sub_1000CD228(v1, (uint64_t)&off_100145E78, v7, (uint64_t)&off_10014B650);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100006C98(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[40];

  sub_100005C44(a1, (uint64_t)v3);
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 168))(v3);
}

_QWORD *sub_100006CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *KeyPath;
  uint64_t v17;
  uint64_t v19[7];

  v1 = v0;
  v2 = type metadata accessor for LookupSpec(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 232))(v3);
  if (result)
  {
    v7 = result;
    v8 = (*(uint64_t (**)(_QWORD *))(*result + 360))(result);
    v10 = v9;
    v11 = swift_release(v7);
    v12 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v1 + 56) + 144))(v11);
    sub_1000547A8(v12, (uint64_t)v19);
    swift_release(v12);
    swift_storeEnumTagMultiPayload(v5, v2, 4);
    sub_1000533F4((uint64_t)v5);
    v14 = v13;
    sub_100010C68(v19);
    sub_100012490((uint64_t)v5, type metadata accessor for LookupSpec);
    if (v14)
    {
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v10);
      swift_retain(v1);
      v15 = sub_1000116E0(v14, v8, (_QWORD *)v1);
      swift_bridgeObjectRelease_n(v10, 2);
      swift_bridgeObjectRelease_n(v8, 2);
      swift_release(v1);
      KeyPath = (_QWORD *)swift_getKeyPath(&unk_10010EE40);
      v17 = sub_1000D2080(KeyPath, (uint64_t (*)(char *, char *))sub_1000071C4, 0, (uint64_t)v15, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease(v15);
      swift_release(KeyPath);
    }
    else
    {
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v8);
      return _swiftEmptyArrayStorage;
    }
    return (_QWORD *)v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100006E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a3;
  v5 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005C88((uint64_t *)&unk_10015ABF0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  v15 = (char *)&v24 + *(int *)(v12 + 48) - v13;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v14, a1, v16);
  sub_100012408(a2, (uint64_t)v15, type metadata accessor for DriverBinEntry);
  v19 = (uint64_t)&v11[*(int *)(v8 + 48)];
  v18(v11, (uint64_t)v14, v16);
  sub_100012408((uint64_t)v15, v19, type metadata accessor for DriverBinEntry);
  v20 = type metadata accessor for DriverBinEntry(0);
  v22 = v25;
  v21 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v7, v19 + *(int *)(v20 + 28), v26);
  sub_100012490(v19, type metadata accessor for DriverBinEntry);
  LOBYTE(v18) = static URL.== infix(_:_:)(v7, v27);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v21);
  sub_1000124F8((uint64_t)v14, (uint64_t *)&unk_10015ABF0);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v16);
  return v18 & 1;
}

uint64_t sub_10000703C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100005C88((uint64_t *)&unk_10015ABF0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1000109E8(a1);
  if ((v10 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v9)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v11 = (uint64_t)&v7[*(int *)(v4 + 48)];
  sub_100010918((uint64_t)v7, v11, result, v9, 0, a1);
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a2, v7, v12);
  sub_100012408(v11, a2 + *(int *)(v4 + 48), type metadata accessor for DriverBinEntry);
  sub_1000124F8((uint64_t)v7, (uint64_t *)&unk_10015ABF0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t sub_100007194@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

BOOL sub_1000071C4(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = *a2;
  type metadata accessor for RealizedInfo(0);
  return sub_1000343E4(v2, v3);
}

void sub_100007204()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t active;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t (*v66)();
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  int v80;
  _BOOL4 v81;
  uint8_t *v82;
  int64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_QWORD, _QWORD);
  uint64_t v88;
  Swift::String v89;
  void *object;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  char **v96;
  uint64_t (*v97)(uint64_t);
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t (*v131)(uint64_t);
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t i;
  _QWORD **v138;
  void *v139;
  char v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  NSObject *v159;
  os_log_type_t v160;
  uint8_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  void *v168;
  void *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t (*v188)(uint64_t);
  uint64_t v189;
  uint64_t v190;
  char **v191;
  uint64_t v192;
  uint64_t (*v193)(uint64_t);
  uint64_t v194;
  uint8_t *v195;
  __int128 v196;
  char *v197;
  char **v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  _QWORD *v209;
  uint64_t aBlock;
  _QWORD v211[2];
  void *v212;
  uint64_t (*v213)();
  uint64_t (*v214)(uint64_t);
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;

  v1 = v0;
  v185 = type metadata accessor for DispatchWorkItemFlags(0);
  v184 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v183 = (char **)((char *)&v180 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v182 = type metadata accessor for DispatchQoS(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v180 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  active = type metadata accessor for ActiveDriverInfo(0);
  v186 = *(_QWORD *)(active - 8);
  v5 = __chkstk_darwin(active);
  v200 = (uint64_t)&v180 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v201 = (uint64_t)&v180 - v8;
  __chkstk_darwin(v7);
  v198 = (char **)((char *)&v180 - v9);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v180 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v180 - v16;
  __chkstk_darwin(v15);
  v188 = (uint64_t (*)(uint64_t))((char *)&v180 - v18);
  v19 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v19);
  v21 = (char *)&v180 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for URL(0);
  v23 = *(uint64_t (**)(uint64_t))(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v208 = (char *)&v180 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v205 = (char *)&v180 - v26;
  v203 = type metadata accessor for LookupSpec(0);
  v27 = __chkstk_darwin(v203);
  v206 = (char *)&v180 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 232))(v27);
  if (!v29)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v30 = v29;
  v207 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 360))(v29);
  *(_QWORD *)&v196 = v31;
  v197 = (char *)v32;
  v33 = swift_release(v30);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v33);
  if (!v34)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v35 = v34;
  v204 = v17;
  v202 = active;
  v187 = v14;
  v189 = v11;
  v199 = v10;
  v195 = (uint8_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 344))(v34);
  v194 = v36;
  v37 = swift_release(v35);
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 256))(v37);
  if (!v38)
  {
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v39 = v38;
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 216))(v38);
  swift_release(v39);
  v41 = 0;
  v42 = sub_1000086E0(v40);
  swift_bridgeObjectRelease(v40);
  v43 = sub_100011BAC(v42);
  v190 = v43;
  v44 = swift_bridgeObjectRelease(v42);
  v192 = *((_QWORD *)v1 + 7);
  v193 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v192 + 144);
  v45 = v1;
  v46 = v193(v44);
  v191 = &v180;
  __chkstk_darwin(v46);
  v47 = (char *)v196;
  *(&v180 - 8) = (char *)v207;
  *(&v180 - 7) = v47;
  v48 = (uint64_t)v197;
  v49 = (char *)v195;
  *(&v180 - 6) = v197;
  *(&v180 - 5) = v49;
  *(&v180 - 4) = (char *)v194;
  *(&v180 - 3) = (char *)v43;
  *(&v180 - 2) = v45;
  v194 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  sub_100005F34((void (*)(uint64_t))sub_100011C44, (uint64_t)(&v180 - 10), v46);
  v50 = v45;
  swift_release(v46);
  swift_bridgeObjectRelease(v190);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v48);
  v51 = swift_bridgeObjectRelease(v207);
  v52 = v193(v51);
  sub_1000547A8(v52, (uint64_t)&v217);
  swift_release(v52);
  v53 = (uint64_t)v206;
  swift_storeEnumTagMultiPayload(v206, v203, 4);
  sub_1000533F4(v53);
  v55 = v54;
  sub_100010C68(&v217);
  v56 = sub_100012490(v53, type metadata accessor for LookupSpec);
  v203 = (uint64_t)v50;
  if (!v55)
  {
    v71 = v50;
    goto LABEL_52;
  }
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 280))(v56);
  if (!v57)
  {
LABEL_95:
    __break(1u);
    return;
  }
  v58 = v57;
  v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 176))(v57);
  swift_release(v58);
  if ((unint64_t)v55 >> 62)
  {
    if (v55 >= 0)
      v179 = v55 & 0xFFFFFFFFFFFFFF8;
    else
      v179 = v55;
    swift_bridgeObjectRetain(v55);
    v60 = _CocoaArrayWrapper.endIndex.getter(v179);
  }
  else
  {
    v60 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v55);
  }
  *(_QWORD *)&v196 = 0;
  v197 = (char *)v59;
  if (v60)
  {
    if (v60 >= 1)
    {
      v61 = 0;
      v206 = (char *)(v55 & 0xC000000000000001);
      v207 = v60;
      v62 = (char *)_swiftEmptyArrayStorage;
      v63 = v55;
      do
      {
        if (v206)
        {
          v64 = specialized _ArrayBuffer._getElementSlowPath(_:)(v61, v55);
        }
        else
        {
          v64 = *(_QWORD *)(v55 + 8 * v61 + 32);
          swift_retain(v64);
        }
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v64 + 24) + 112))(&aBlock);
        v65 = v212;
        if (v212)
        {
          v66 = v213;
          sub_100004DE4(&aBlock, (uint64_t)v212);
          (*((void (**)(void *, uint64_t (*)()))v66 + 8))(v65, v66);
          (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v23 + 7))(v21, 0, 1, v22);
          sub_100005D08(&aBlock);
        }
        else
        {
          sub_1000124F8((uint64_t)&aBlock, &qword_100157C78);
          (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v23 + 7))(v21, 1, 1, v22);
        }
        swift_release(v64);
        v55 = v63;
        if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v23 + 6))(v21, 1, v22) == 1)
        {
          sub_1000124F8((uint64_t)v21, (uint64_t *)&unk_10015BA60);
        }
        else
        {
          v67 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v23 + 4);
          v68 = v205;
          v67(v205, v21, v22);
          v67(v208, v68, v22);
          if ((swift_isUniquelyReferenced_nonNull_native(v62) & 1) == 0)
            v62 = (char *)sub_10000C60C(0, *((_QWORD *)v62 + 2) + 1, 1, (unint64_t)v62);
          v70 = *((_QWORD *)v62 + 2);
          v69 = *((_QWORD *)v62 + 3);
          if (v70 >= v69 >> 1)
            v62 = (char *)sub_10000C60C(v69 > 1, v70 + 1, 1, (unint64_t)v62);
          *((_QWORD *)v62 + 2) = v70 + 1;
          v67(&v62[((*((unsigned __int8 *)v23 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v23 + 80))+ *((_QWORD *)v23 + 9) * v70], v208, v22);
        }
        ++v61;
      }
      while (v207 != v61);
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_91;
  }
  v62 = (char *)_swiftEmptyArrayStorage;
LABEL_27:
  swift_bridgeObjectRelease_n(v55, 2);
  v72 = sub_100011D28((uint64_t)v62);
  swift_bridgeObjectRelease(v62);
  v73 = (uint64_t)v197;
  v41 = (_QWORD *)v196;
  v74 = (uint64_t (*)(uint64_t))sub_100011894((uint64_t)v197, v72);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v72);
  if (sub_1000D2610())
  {
    v56 = swift_bridgeObjectRelease(v74);
    v71 = (_QWORD *)v203;
  }
  else
  {
    v75 = sub_1000D316C();
    v76 = v189;
    v23 = v188;
    v77 = v199;
    v205 = *(char **)(v189 + 16);
    ((void (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v205)(v188, v75, v199);
    v78 = swift_bridgeObjectRetain_n(v74, 2);
    v79 = Logger.logObject.getter(v78);
    v80 = static os_log_type_t.default.getter(v79);
    v81 = os_log_type_enabled(v79, (os_log_type_t)v80);
    v71 = (_QWORD *)v203;
    v206 = (char *)v75;
    v193 = v74;
    if (v81)
    {
      LODWORD(v208) = v80;
      v82 = (uint8_t *)swift_slowAlloc(12, -1);
      v207 = swift_slowAlloc(32, -1);
      v215 = (_QWORD *)v207;
      *(_DWORD *)v82 = 136315138;
      v83 = *((_QWORD *)v74 + 2);
      v84 = _swiftEmptyArrayStorage;
      if (v83)
      {
        v195 = v82;
        v197 = (char *)v79;
        *(_QWORD *)&v196 = v41;
        v209 = _swiftEmptyArrayStorage;
        sub_10000C958(0, v83, 0);
        v85 = (uint64_t)v74
            + ((*(unsigned __int8 *)(v186 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80));
        v86 = *(_QWORD *)(v186 + 72);
        do
        {
          v87 = (void (*)(_QWORD, _QWORD))v198;
          v88 = sub_100012408(v85, (uint64_t)v198, type metadata accessor for ActiveDriverInfo);
          aBlock = 8224;
          v211[0] = 0xE200000000000000;
          v89._countAndFlagsBits = URL.path.getter(v88);
          object = v89._object;
          String.append(_:)(v89);
          swift_bridgeObjectRelease(object);
          v91 = aBlock;
          v92 = v211[0];
          sub_100012490((uint64_t)v87, type metadata accessor for ActiveDriverInfo);
          v84 = v209;
          if ((swift_isUniquelyReferenced_nonNull_native(v209) & 1) == 0)
          {
            sub_10000C958(0, v84[2] + 1, 1);
            v84 = v209;
          }
          v94 = v84[2];
          v93 = v84[3];
          if (v94 >= v93 >> 1)
          {
            sub_10000C958(v93 > 1, v94 + 1, 1);
            v84 = v209;
          }
          v84[2] = v94 + 1;
          v95 = &v84[2 * v94];
          v95[4] = v91;
          v95[5] = v92;
          v85 += v86;
          --v83;
        }
        while (v83);
        v71 = (_QWORD *)v203;
        v41 = (_QWORD *)v196;
        v23 = v188;
        v79 = v197;
        v82 = v195;
      }
      aBlock = (uint64_t)v84;
      v98 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
      v99 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v194, v98);
      v101 = v100;
      swift_bridgeObjectRelease(v84);
      aBlock = sub_1000055A0(v99, v101, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v211, v82 + 4, v82 + 12);
      v74 = v193;
      swift_bridgeObjectRelease_n(v193, 2);
      swift_bridgeObjectRelease(v101);
      _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v208, "Drivers that should be unloaded:\n%s", v82, 0xCu);
      v102 = v207;
      swift_arrayDestroy(v207, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v82, -1, -1);

      v96 = *(char ***)(v189 + 8);
      v97 = v23;
      v77 = v199;
    }
    else
    {

      swift_bridgeObjectRelease_n(v74, 2);
      v96 = *(char ***)(v76 + 8);
      v97 = v23;
    }
    v198 = v96;
    ((void (*)(uint64_t (*)(uint64_t), uint64_t))v96)(v97, v77);
    v104 = v201;
    v105 = *((_QWORD *)v74 + 2);
    v106 = v202;
    if (v105)
    {
      v208 = (char *)(v71 + 2);
      v107 = (uint64_t)v74
           + ((*(unsigned __int8 *)(v186 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80));
      v207 = *(_QWORD *)(v186 + 72);
      v23 = type metadata accessor for ActiveDriverInfo;
      *(_QWORD *)&v103 = 136315394;
      v196 = v103;
      v195 = (uint8_t *)&type metadata for Any + 8;
      do
      {
        sub_100012408(v107, v104, type metadata accessor for ActiveDriverInfo);
        v108 = (uint64_t *)(v104 + *(int *)(v106 + 20));
        v110 = *v108;
        v109 = v108[1];
        swift_bridgeObjectRetain(v109);
        v215 = (_QWORD *)sub_10006BF20(v110, v109);
        v112 = v71[5];
        v111 = v71[6];
        sub_100004DE4(v208, v112);
        sub_100071700(v112, v111);
        sub_10006AFEC(&aBlock, (uint64_t)&type metadata for KernelRequests.UnloadExtension, (uint64_t)&off_1001598F8, v113);
        if (v41)
        {
          sub_100005D08(&aBlock);
          swift_bridgeObjectRelease(v215);
          v114 = v204;
          ((void (*)(char *, char *, uint64_t))v205)(v204, v206, v77);
          v115 = v200;
          sub_100012408(v104, v200, type metadata accessor for ActiveDriverInfo);
          swift_errorRetain(v41);
          v116 = swift_errorRetain(v41);
          v117 = Logger.logObject.getter(v116);
          v118 = static os_log_type_t.error.getter(v117);
          if (os_log_type_enabled(v117, v118))
          {
            v119 = swift_slowAlloc(22, -1);
            v120 = v41;
            v197 = (char *)swift_slowAlloc(64, -1);
            aBlock = (uint64_t)v197;
            *(_DWORD *)v119 = v196;
            v121 = (uint64_t *)(v115 + *(int *)(v202 + 20));
            v122 = *v121;
            v123 = v121[1];
            swift_bridgeObjectRetain(v123);
            *(_QWORD *)(v119 + 4) = sub_1000055A0(v122, v123, &aBlock);
            swift_bridgeObjectRelease(v123);
            sub_100012490(v115, type metadata accessor for ActiveDriverInfo);
            *(_WORD *)(v119 + 12) = 2080;
            v215 = v120;
            swift_errorRetain(v120);
            v124 = sub_100005C88(&qword_10015AB50);
            v125 = String.init<A>(describing:)(&v215, v124);
            v127 = v126;
            *(_QWORD *)(v119 + 14) = sub_1000055A0(v125, v126, &aBlock);
            swift_bridgeObjectRelease(v127);
            swift_errorRelease(v120);
            swift_errorRelease(v120);
            _os_log_impl((void *)&_mh_execute_header, v117, v118, "Failed to unload driver %s: %s", (uint8_t *)v119, 0x16u);
            v128 = (uint64_t)v197;
            swift_arrayDestroy(v197, 2, v195);
            v106 = v202;
            swift_slowDealloc(v128, -1, -1);
            v129 = v119;
            v77 = v199;
            swift_slowDealloc(v129, -1, -1);

            swift_errorRelease(v120);
            v130 = v204;
          }
          else
          {

            swift_errorRelease(v41);
            swift_errorRelease(v41);
            sub_100012490(v115, type metadata accessor for ActiveDriverInfo);
            swift_errorRelease(v41);
            v130 = v114;
          }
          ((void (*)(char *, uint64_t))v198)(v130, v77);
          v104 = v201;
          sub_100012490(v201, type metadata accessor for ActiveDriverInfo);
          v41 = 0;
          v71 = (_QWORD *)v203;
        }
        else
        {
          sub_100005D08(&aBlock);
          swift_bridgeObjectRelease(v215);
          sub_100012490(v104, type metadata accessor for ActiveDriverInfo);
        }
        v107 += v207;
        --v105;
      }
      while (v105);
      v131 = v193;
    }
    else
    {
      v131 = v74;
    }
    v56 = swift_bridgeObjectRelease(v131);
  }
LABEL_52:
  v132 = v71;
  v133 = (*(uint64_t (**)(uint64_t))(*v71 + 408))(v56);
  v134 = v133;
  if ((unint64_t)v133 >> 62)
  {
    if (v133 < 0)
      v178 = v133;
    else
      v178 = v133 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v133);
    v135 = _CocoaArrayWrapper.endIndex.getter(v178);
  }
  else
  {
    v135 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v133);
  }
  v136 = _swiftEmptyArrayStorage;
  if (v135)
  {
    if (v135 < 1)
    {
      __break(1u);
      goto LABEL_89;
    }
    for (i = 0; i != v135; ++i)
    {
      if ((v134 & 0xC000000000000001) != 0)
      {
        v138 = (_QWORD **)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v134);
      }
      else
      {
        v138 = *(_QWORD ***)(v134 + 8 * i + 32);
        swift_retain(v138);
      }
      (*(void (**)(uint64_t *__return_ptr))(*v138[3] + 112))(&aBlock);
      v139 = v212;
      sub_1000124F8((uint64_t)&aBlock, &qword_100157C78);
      if (v139)
      {
        v140 = sub_1000268C0();
        v141 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))(*v138)[36])(0, 0, v140 & 1);
        if ((swift_isUniquelyReferenced_nonNull_native(v136) & 1) == 0)
          v136 = sub_10000C814(0, v136[2] + 1, 1, v136);
        v143 = v136[2];
        v142 = v136[3];
        if (v143 >= v142 >> 1)
          v136 = sub_10000C814((_QWORD *)(v142 > 1), v143 + 1, 1, v136);
        v136[2] = v143 + 1;
        v136[v143 + 4] = v141;
      }
      swift_release(v138);
    }
  }
  v144 = swift_bridgeObjectRelease_n(v134, 2);
  v23 = (uint64_t (*)(uint64_t))v203;
  v145 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v203 + 304))(v144);
  if (!v145)
    goto LABEL_94;
  v146 = v145;
  v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 160))(v145);
  swift_release(v146);
  v132 = v216;
  v135 = v199;
  if ((v147 & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v216) & 1) != 0)
    {
LABEL_70:
      v149 = v132[2];
      v148 = v132[3];
      if (v149 >= v148 >> 1)
        v132 = sub_10000C500((_QWORD *)(v148 > 1), v149 + 1, 1, v132);
      v132[2] = v149 + 1;
      v150 = &v132[2 * v149];
      v150[4] = 0xD00000000000001BLL;
      v150[5] = 0x8000000100121A20;
      v216 = v132;
      goto LABEL_73;
    }
LABEL_89:
    v132 = sub_10000C500(0, v132[2] + 1, 1, v132);
    goto LABEL_70;
  }
LABEL_73:
  swift_bridgeObjectRetain(v132);
  v151 = sub_1000D2610();
  swift_bridgeObjectRelease(v132);
  if (v151)
  {
    swift_bridgeObjectRelease(v136);
    swift_bridgeObjectRelease(v132);
  }
  else
  {
    v215 = (_QWORD *)sub_10006C0A8(0, 0, 0, 0, (uint64_t)v136);
    v152 = *((_QWORD *)v23 + 5);
    v153 = *((_QWORD *)v23 + 6);
    sub_100004DE4((_QWORD *)v23 + 2, v152);
    sub_100071700(v152, v153);
    sub_10006AFEC(&aBlock, (uint64_t)&type metadata for KernelRequests.LoadFileset, (uint64_t)&off_100159928, v154);
    if (v41)
    {
      sub_100005D08(&aBlock);
      swift_bridgeObjectRelease(v215);
      v155 = sub_1000D316C();
      v156 = v189;
      v157 = v187;
      (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v187, v155, v135);
      swift_errorRetain(v41);
      v158 = swift_errorRetain(v41);
      v159 = Logger.logObject.getter(v158);
      v160 = static os_log_type_t.error.getter(v159);
      if (os_log_type_enabled(v159, v160))
      {
        v161 = (uint8_t *)swift_slowAlloc(12, -1);
        v162 = swift_slowAlloc(32, -1);
        aBlock = v162;
        *(_DWORD *)v161 = 136315138;
        v215 = v41;
        swift_errorRetain(v41);
        v163 = sub_100005C88(&qword_10015AB50);
        v164 = String.init<A>(describing:)(&v215, v163);
        v166 = v165;
        v215 = (_QWORD *)sub_1000055A0(v164, v165, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, &v216, v161 + 4, v161 + 12);
        swift_bridgeObjectRelease(v166);
        swift_errorRelease(v41);
        swift_errorRelease(v41);
        _os_log_impl((void *)&_mh_execute_header, v159, v160, "An error occurred while loading dext personalities: %s", v161, 0xCu);
        swift_arrayDestroy(v162, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v162, -1, -1);
        swift_slowDealloc(v161, -1, -1);

        swift_errorRelease(v41);
        (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v199);
      }
      else
      {
        swift_errorRelease(v41);
        swift_errorRelease(v41);
        swift_errorRelease(v41);

        (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v135);
      }
    }
    else
    {
      sub_100005D08(&aBlock);
      v167 = swift_bridgeObjectRelease(v215);
      v168 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 184))(v167);
      v213 = sub_100011C68;
      v214 = v23;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v211[0] = 1107296256;
      v211[1] = sub_10000B424;
      v212 = &unk_100145E50;
      v169 = _Block_copy(&aBlock);
      v170 = swift_retain(v23);
      v171 = v180;
      static DispatchQoS.unspecified.getter(v170);
      v215 = _swiftEmptyArrayStorage;
      v172 = sub_100012534((unint64_t *)&qword_10015ABD0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v173 = sub_100005C88((uint64_t *)&unk_100159EB0);
      v174 = sub_10001284C((unint64_t *)&qword_10015ABE0, (uint64_t *)&unk_100159EB0, (uint64_t)&protocol conformance descriptor for [A]);
      v175 = v183;
      v176 = v173;
      v177 = v185;
      dispatch thunk of SetAlgebra.init<A>(_:)(v183, &v215, v176, v174, v185, v172);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v171, v175, v169);
      _Block_release(v169);

      (*(void (**)(_QWORD *, uint64_t))(v184 + 8))(v175, v177);
      (*(void (**)(char *, uint64_t))(v181 + 8))(v171, v182);
      swift_release(v214);
    }
  }
}

uint64_t sub_1000086E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v3 = type metadata accessor for ApplicationRecord(0);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  v4 = __chkstk_darwin(v3);
  v38 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v37 = (uint64_t)&v31 - v6;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (!v7)
    return (uint64_t)v8;
  v31 = v1;
  v41 = _swiftEmptyArrayStorage;
  sub_10000C93C(0, v7, 0);
  result = sub_1000109E8(a1);
  v11 = result;
  v12 = 0;
  v13 = a1 + 64;
  v32 = a1 + 80;
  v33 = v7;
  v35 = a1 + 64;
  v36 = a1;
  v34 = v10;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(_BYTE *)(a1 + 32))
  {
    v16 = (unint64_t)v11 >> 6;
    if ((*(_QWORD *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
      goto LABEL_26;
    v17 = v37;
    sub_100012408(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v39 + 72) * v11, v37, type metadata accessor for ApplicationRecord);
    v18 = v17;
    v19 = v38;
    sub_10001244C(v18, v38, type metadata accessor for ApplicationRecord);
    v20 = (uint64_t *)(v19 + *(int *)(v40 + 28));
    v21 = *v20;
    v22 = v20[1];
    sub_1000122B4(*v20, v22);
    sub_100012490(v19, type metadata accessor for ApplicationRecord);
    v8 = v41;
    result = swift_isUniquelyReferenced_nonNull_native(v41);
    if ((result & 1) == 0)
    {
      result = sub_10000C93C(0, v8[2] + 1, 1);
      v8 = v41;
    }
    v24 = v8[2];
    v23 = v8[3];
    if (v24 >= v23 >> 1)
    {
      result = sub_10000C93C(v23 > 1, v24 + 1, 1);
      v8 = v41;
    }
    v8[2] = v24 + 1;
    v25 = &v8[2 * v24];
    v25[4] = v21;
    v25[5] = v22;
    a1 = v36;
    v14 = 1 << *(_BYTE *)(v36 + 32);
    if (v11 >= v14)
      goto LABEL_27;
    v13 = v35;
    v26 = *(_QWORD *)(v35 + 8 * v16);
    if ((v26 & (1 << v11)) == 0)
      goto LABEL_28;
    LODWORD(v10) = v34;
    if (*(_DWORD *)(v36 + 36) != (_DWORD)v34)
      goto LABEL_29;
    v27 = v26 & (-2 << (v11 & 0x3F));
    if (v27)
    {
      v14 = __clz(__rbit64(v27)) | v11 & 0xFFFFFFFFFFFFFFC0;
      v15 = v33;
    }
    else
    {
      v28 = v16 + 1;
      v29 = (unint64_t)(v14 + 63) >> 6;
      v15 = v33;
      if (v16 + 1 < v29)
      {
        v30 = *(_QWORD *)(v35 + 8 * v28);
        if (v30)
        {
LABEL_22:
          v14 = __clz(__rbit64(v30)) + (v28 << 6);
        }
        else
        {
          while (v29 - 2 != v16)
          {
            v30 = *(_QWORD *)(v32 + 8 * v16++);
            if (v30)
            {
              v28 = v16 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v12;
    v11 = v14;
    if (v12 == v15)
      return (uint64_t)v8;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000089C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  unint64_t v59;
  BOOL v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  Swift::String v109;
  uint64_t v110;
  Swift::String v111;
  uint64_t v112;
  uint64_t v113;
  Swift::String v114;
  uint64_t v115;
  Swift::String v116;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t, uint64_t);
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  uint64_t v132;
  os_log_type_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  void (*v142)(char *, uint64_t);
  uint64_t v143;
  char *v144;
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  _BOOL4 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t);
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  char v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  char *v190;
  uint64_t v191;
  void (*v192)(char *, char *, uint64_t);
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  NSObject *v198;
  os_log_type_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  Swift::String v210;
  void *object;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  Swift::String v217;
  void *v218;
  Swift::String v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void (*v233)(uint64_t *__return_ptr, uint64_t);
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  NSObject *v241;
  os_log_type_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t *v249;
  char *v250;
  void (*v251)(char *, uint64_t);
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  void (*v256)(char *, uint64_t, uint64_t);
  void (*v257)(char *, uint64_t);
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  Swift::String v261;
  Swift::String v262;
  uint64_t v263;
  Swift::String v264;
  void *v265;
  Swift::String v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  _QWORD *v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t result;
  uint64_t v301;
  char v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  uint64_t v306;
  char v307;
  void (*v308)(uint64_t, uint64_t);
  Swift::String v309;
  uint64_t v310;
  Swift::String v311;
  void *v312;
  Swift::String v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  void *v323;
  void *v324;
  unint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  char *v330;
  void *v331;
  char *v332;
  unint64_t v333;
  char *v334;
  _QWORD *v335;
  __n128 v336;
  unint64_t *v337;
  char *v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  _QWORD *v349;
  uint64_t v350;
  char *v351;
  char *v352;
  char *v353;
  uint64_t v354;
  int64_t v355;
  uint64_t v356;
  __n128 v357;
  void (*v358)(char *, uint64_t, uint64_t);
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void (*v369)(char *, uint64_t);
  void (*v370)(char *, uint64_t);
  uint64_t v371;
  __int128 *v372;
  uint64_t v373;
  void (*v374)(char *, uint64_t, uint64_t);
  int *v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  char v380;
  char v381;
  __int128 v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  uint64_t v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  uint64_t v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  uint64_t v399;
  uint64_t v400;

  v346 = a6;
  v356 = a7;
  v345 = a5;
  v327 = a3;
  v328 = a4;
  v372 = (__int128 *)a1;
  v326 = a9;
  v11 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v12 = __chkstk_darwin(v11);
  v340 = (char *)&v322 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v334 = (char *)&v322 - v14;
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v351 = (char *)&v322 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v348 = (char *)&v322 - v20;
  v21 = __chkstk_darwin(v19);
  v353 = (char *)&v322 - v22;
  v23 = __chkstk_darwin(v21);
  v359 = (char *)&v322 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v322 - v25;
  v364 = type metadata accessor for LookupSpec(0);
  __chkstk_darwin(v364);
  v365 = (char *)&v322 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for URL(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v341 = (char *)&v322 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v332 = (char *)&v322 - v33;
  v34 = __chkstk_darwin(v32);
  v338 = (char *)&v322 - v35;
  v36 = __chkstk_darwin(v34);
  v330 = (char *)&v322 - v37;
  v38 = __chkstk_darwin(v36);
  v352 = (char *)&v322 - v39;
  v40 = __chkstk_darwin(v38);
  v339 = (char *)&v322 - v41;
  __chkstk_darwin(v40);
  v379 = (char *)&v322 - v42;
  v375 = (int *)type metadata accessor for DriverBinEntry(0);
  v363 = *((_QWORD *)v375 - 1);
  v43 = __chkstk_darwin(v375);
  v343 = (uint64_t)&v322 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v43);
  __chkstk_darwin(v45);
  v362 = (uint64_t)&v322 - v47;
  v48 = *(_QWORD *)(a2 + 64);
  v354 = a2 + 64;
  v49 = 1 << *(_BYTE *)(a2 + 32);
  v50 = -1;
  if (v49 < 64)
    v50 = ~(-1 << v49);
  v51 = v50 & v48;
  v349 = a8;
  v344 = a8 + 2;
  v355 = (unint64_t)(v49 + 63) >> 6;
  v337 = &v385;
  v366 = a2;
  v52 = a2;
  v53 = v46;
  v54 = swift_bridgeObjectRetain(v52);
  v55 = 0;
  v335 = _swiftEmptyArrayStorage;
  v342 = (char *)&type metadata for Any + 8;
  v54.n128_u64[0] = 136315138;
  v357 = v54;
  v333 = 0x8000000100121CB0;
  v54.n128_u64[0] = 136315394;
  v336 = v54;
  v331 = (void *)0x8000000100121CD0;
  v329 = 0x8000000100121D30;
  v322 = 0x8000000100121D50;
  v323 = (void *)0x8000000100121DA0;
  v56 = 0x8000000100121D70;
  v324 = (void *)0x8000000100121D70;
  v325 = 0x8000000100121D00;
  v400 = v28;
  v368 = v29;
  v378 = v15;
  v360 = v26;
  v361 = v16;
  v371 = v53;
  while (v51)
  {
    v376 = (v51 - 1) & v51;
    v377 = v55;
    v59 = __clz(__rbit64(v51)) | (v55 << 6);
LABEL_21:
    v63 = v362;
    sub_100012408(*(_QWORD *)(v366 + 56) + *(_QWORD *)(v363 + 72) * v59, v362, type metadata accessor for DriverBinEntry);
    sub_10001244C(v63, v53, type metadata accessor for DriverBinEntry);
    v64 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    v65 = v379;
    v66 = v400;
    v64(v379, v53 + v375[7], v400);
    v67 = v372[1];
    v392 = *v372;
    v393 = v67;
    v394 = v372[2];
    v395 = *((_QWORD *)v372 + 6);
    v68 = (uint64_t)v365;
    v64(v365, (uint64_t)v65, v66);
    swift_storeEnumTagMultiPayload(v68, v364, 1);
    sub_1000533F4(v68);
    v70 = v69;
    sub_100012490(v68, type metadata accessor for LookupSpec);
    if (v70)
    {
      if (!((unint64_t)v70 >> 62))
      {
        v71 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v70);
        if (v71)
          goto LABEL_24;
LABEL_53:
        swift_bridgeObjectRelease_n(v70, 2);
        goto LABEL_54;
      }
      if (v70 < 0)
        v122 = v70;
      else
        v122 = v70 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v70);
      if (!_CocoaArrayWrapper.endIndex.getter(v122))
        goto LABEL_53;
LABEL_24:
      if ((v70 & 0xC000000000000001) == 0)
      {
        v72 = v70 & 0xFFFFFFFFFFFFFF8;
        v56 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v56)
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
          goto LABEL_130;
        }
        v73 = *(_QWORD *)(v70 + 32);
        swift_retain(v73);
        swift_bridgeObjectRelease(v70);
        goto LABEL_27;
      }
      v73 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v70);
      swift_bridgeObjectRelease(v70);
      if (!((unint64_t)v70 >> 62))
      {
        v72 = v70 & 0xFFFFFFFFFFFFFF8;
LABEL_27:
        v74 = *(_QWORD *)(v72 + 16);
        goto LABEL_28;
      }
      if (v70 < 0)
        v280 = v70;
      else
        v280 = v70 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v70);
      v74 = _CocoaArrayWrapper.endIndex.getter(v280);
      swift_bridgeObjectRelease(v70);
LABEL_28:
      v75 = v29;
      v76 = swift_bridgeObjectRelease(v70);
      if (v74 == 1)
      {
        v77 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v73 + 24) + 144))(v76);
        v79 = v78;
        v80 = v371 + v375[5];
        v81 = (uint64_t *)(v80 + *(int *)(type metadata accessor for ApplicationRecord(0) + 28));
        v82 = *v81;
        v83 = v81[1];
        sub_1000122B4(*v81, v83);
        v84 = sub_10005E2B8(v77, v79, v82, v83, v345);
        sub_100011F40(v82, v83);
        swift_bridgeObjectRelease(v79);
        sub_1000122B4(v82, v83);
        LOBYTE(v79) = sub_10000A8D8(v82, v83, v356);
        sub_100011F40(v82, v83);
        if ((v79 & 1) != 0)
        {
          if (v84 == 3)
            v85 = 0;
          else
            v85 = v84;
          LOBYTE(v396) = v85;
          LOBYTE(v384) = 1;
          v86 = sub_100012380();
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v396, &v384, &type metadata for ApprovalState, v86) & 1) != 0)
          {
            swift_release(v73);
            v29 = v75;
            (*(void (**)(char *, uint64_t))(v75 + 8))(v379, v400);
            v53 = v371;
            sub_100012490(v371, type metadata accessor for DriverBinEntry);
LABEL_83:
            v16 = v361;
LABEL_84:
            v26 = v360;
            goto LABEL_5;
          }
          sub_100052BB8(v73);
          *(_QWORD *)&v396 = 0;
          *((_QWORD *)&v396 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          v114._countAndFlagsBits = 0x20726576697244;
          v114._object = (void *)0xE700000000000000;
          String.append(_:)(v114);
          v384 = v73;
          v115 = type metadata accessor for RealizedInfo(0);
          _print_unlocked<A, B>(_:_:)(&v384, &v396, v115, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          v116._countAndFlagsBits = 0xD000000000000025;
          v116._object = v323;
          String.append(_:)(v116);
          v113 = *((_QWORD *)&v396 + 1);
          v112 = v396;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v335);
          v16 = v361;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v335 = sub_10000C500(0, v335[2] + 1, 1, v335);
        }
        else
        {
          sub_100052BB8(v73);
          *(_QWORD *)&v396 = 0;
          *((_QWORD *)&v396 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(47);
          v109._countAndFlagsBits = 0x20726576697244;
          v109._object = (void *)0xE700000000000000;
          String.append(_:)(v109);
          v384 = v73;
          v110 = type metadata accessor for RealizedInfo(0);
          _print_unlocked<A, B>(_:_:)(&v384, &v396, v110, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          v111._countAndFlagsBits = 0xD000000000000026;
          v111._object = v324;
          String.append(_:)(v111);
          v113 = *((_QWORD *)&v396 + 1);
          v112 = v396;
          if ((swift_isUniquelyReferenced_nonNull_native(v335) & 1) == 0)
            v335 = sub_10000C500(0, v335[2] + 1, 1, v335);
          v16 = v361;
        }
        v119 = v335[2];
        v118 = v335[3];
        if (v119 >= v118 >> 1)
          v335 = sub_10000C500((_QWORD *)(v118 > 1), v119 + 1, 1, v335);
        v120 = v335;
        v335[2] = v119 + 1;
        v121 = &v120[2 * v119];
        v121[4] = v112;
        v121[5] = v113;
        swift_release(v73);
        v29 = v75;
        (*(void (**)(char *, uint64_t))(v75 + 8))(v379, v400);
        v53 = v371;
        sub_100012490(v371, type metadata accessor for DriverBinEntry);
        goto LABEL_84;
      }
      v87 = sub_1000D316C();
      v88 = v378;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v26, v87, v378);
      v89 = v339;
      v90 = (uint64_t (*)(char *, char *, uint64_t))v64;
      v91 = v400;
      v92 = v90(v339, v379, v400);
      v93 = Logger.logObject.getter(v92);
      v94 = static os_log_type_t.error.getter(v93);
      if (os_log_type_enabled(v93, v94))
      {
        v95 = v89;
        v96 = swift_slowAlloc(12, -1);
        v97 = swift_slowAlloc(32, -1);
        v374 = (void (*)(char *, uint64_t, uint64_t))v73;
        v98 = v97;
        *(_QWORD *)&v396 = v97;
        *(_DWORD *)v96 = v357.n128_u32[0];
        v99 = URL.path.getter(v97);
        v101 = v100;
        *(_QWORD *)(v96 + 4) = sub_1000055A0(v99, v100, (uint64_t *)&v396);
        swift_bridgeObjectRelease(v101);
        v102 = *(void (**)(char *, uint64_t))(v368 + 8);
        v103 = v95;
        v104 = v371;
        v102(v103, v91);
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "Internal error: found multiple realized infos for %s in manager", (uint8_t *)v96, 0xCu);
        swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
        v105 = v368;
        swift_slowDealloc(v98, -1, -1);
        v106 = v96;
        v53 = v104;
        swift_slowDealloc(v106, -1, -1);
        swift_release(v374);

        v26 = v360;
        v107 = v361;
        v108 = v88;
        v29 = v105;
        (*(void (**)(char *, uint64_t))(v361 + 8))(v360, v108);
        v102(v379, v91);
        sub_100012490(v104, type metadata accessor for DriverBinEntry);
        v16 = v107;
      }
      else
      {
        swift_release(v73);

        v57 = *(void (**)(char *, uint64_t))(v75 + 8);
        v57(v89, v91);
        v26 = v360;
        v16 = v361;
        v58 = v88;
        v29 = v75;
        (*(void (**)(char *, uint64_t))(v361 + 8))(v360, v58);
        v57(v379, v91);
        v53 = v371;
        sub_100012490(v371, type metadata accessor for DriverBinEntry);
      }
LABEL_5:
      v51 = v376;
      v55 = v377;
    }
    else
    {
LABEL_54:
      v123 = v29;
      v124 = sub_1000D316C();
      v125 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
      v126 = v359;
      v373 = v124;
      v374 = v125;
      v127 = v378;
      ((void (*)(char *))v125)(v359);
      v128 = v352;
      v129 = v400;
      v358 = v64;
      v130 = ((uint64_t (*)(char *, char *, uint64_t))v64)(v352, v379, v400);
      v131 = Logger.logObject.getter(v130);
      v132 = v16;
      v133 = static os_log_type_t.default.getter(v131);
      if (os_log_type_enabled(v131, v133))
      {
        v134 = v128;
        v135 = swift_slowAlloc(12, -1);
        v136 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v396 = v136;
        *(_DWORD *)v135 = v357.n128_u32[0];
        v137 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v138 = dispatch thunk of CustomStringConvertible.description.getter(v400, v137);
        v140 = v139;
        *(_QWORD *)(v135 + 4) = sub_1000055A0(v138, v139, (uint64_t *)&v396);
        swift_bridgeObjectRelease(v140);
        v141 = v134;
        v127 = v378;
        v369 = *(void (**)(char *, uint64_t))(v123 + 8);
        v369(v141, v400);
        _os_log_impl((void *)&_mh_execute_header, v131, v133, "Bundle at %s not in manager", (uint8_t *)v135, 0xCu);
        swift_arrayDestroy(v136, 1, v342);
        swift_slowDealloc(v136, -1, -1);
        swift_slowDealloc(v135, -1, -1);

        v142 = *(void (**)(char *, uint64_t))(v132 + 8);
        v142(v359, v127);
      }
      else
      {
        v369 = *(void (**)(char *, uint64_t))(v123 + 8);
        v369(v128, v129);

        v142 = *(void (**)(char *, uint64_t))(v132 + 8);
        v142(v126, v127);
      }
      v143 = *((_QWORD *)v372 + 5);
      v144 = v353;
      v374(v353, v373, v127);
      v145 = swift_bridgeObjectRetain_n(v143, 3);
      v146 = Logger.logObject.getter(v145);
      v147 = static os_log_type_t.default.getter(v146);
      v148 = os_log_type_enabled(v146, v147);
      v367 = v143;
      v370 = v142;
      if (v148)
      {
        v149 = swift_slowAlloc(12, -1);
        v350 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v396 = v350;
        *(_DWORD *)v149 = v357.n128_u32[0];
        swift_bridgeObjectRetain(v143);
        v150 = sub_100005C88(&qword_100157EC8);
        v151 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v152 = Dictionary.Keys.description.getter(v143, v400, v150, v151);
        v154 = v153;
        swift_bridgeObjectRelease(v143);
        v155 = v152;
        v156 = v370;
        v157 = v378;
        *(_QWORD *)(v149 + 4) = sub_1000055A0(v155, v154, (uint64_t *)&v396);
        swift_bridgeObjectRelease_n(v143, 2);
        v158 = v154;
        v127 = v157;
        v142 = v156;
        swift_bridgeObjectRelease(v158);
        _os_log_impl((void *)&_mh_execute_header, v146, v147, "Available URLs: %s", (uint8_t *)v149, 0xCu);
        v159 = v350;
        swift_arrayDestroy(v350, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v159, -1, -1);
        swift_slowDealloc(v149, -1, -1);

        v156(v144, v127);
      }
      else
      {

        swift_bridgeObjectRelease_n(v143, 2);
        v142(v144, v127);
      }
      v160 = v371;
      v161 = v371 + v375[5];
      v162 = (uint64_t *)(v161 + *(int *)(type metadata accessor for ApplicationRecord(0) + 28));
      v163 = *v162;
      v164 = v162[1];
      sub_1000122B4(*v162, v164);
      v165 = sub_10000A8D8(v163, v164, v356);
      sub_100011F40(v163, v164);
      if ((v165 & 1) != 0)
      {
        v166 = v349[5];
        v167 = v349[6];
        sub_100004DE4(v344, v166);
        sub_10009C20C(v166, v167);
        v168 = v386;
        v169 = v387;
        sub_100004DE4(&v384, v386);
        (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v169 + 24))(&v382, v379, v168, v169);
        if (!v383)
        {
          sub_1000124F8((uint64_t)&v382, &qword_100157C78);
          sub_100005D08(&v384);
          *(_QWORD *)&v396 = 0;
          *((_QWORD *)&v396 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          v209 = swift_bridgeObjectRelease(*((_QWORD *)&v396 + 1));
          *(_QWORD *)&v396 = 0xD00000000000001CLL;
          *((_QWORD *)&v396 + 1) = v333;
          v210._countAndFlagsBits = URL.path.getter(v209);
          object = v210._object;
          String.append(_:)(v210);
          swift_bridgeObjectRelease(object);
          v213 = *((_QWORD *)&v396 + 1);
          v212 = v396;
          v214 = sub_1000122F8();
          v191 = swift_allocError(&type metadata for KMError, v214, 0, 0);
          *(_OWORD *)v215 = __PAIR128__(v213, v212);
          *(_OWORD *)(v215 + 16) = 0u;
          *(_OWORD *)(v215 + 32) = 0u;
          *(_OWORD *)(v215 + 48) = 0u;
          *(_QWORD *)(v215 + 64) = 0;
          *(_BYTE *)(v215 + 72) = 19;
          swift_willThrow(v191);
          v347 = 0;
          v190 = v351;
          v192 = (void (*)(char *, char *, uint64_t))v358;
          v174 = v400;
          goto LABEL_79;
        }
        sub_100004E2C(&v382, (uint64_t)&v396);
        sub_100005D08(&v384);
        v170 = *((_QWORD *)&v397 + 1);
        v171 = v398;
        sub_100004DE4(&v396, *((uint64_t *)&v397 + 1));
        v172 = (*(uint64_t (**)(uint64_t, uint64_t))(v171 + 24))(v170, v171);
        v174 = v400;
        if (!v173)
        {
          v384 = 0;
          v385 = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          v216 = swift_bridgeObjectRelease(v385);
          v384 = 0x20656C646E7542;
          v385 = 0xE700000000000000;
          v217._countAndFlagsBits = URL.path.getter(v216);
          v218 = v217._object;
          String.append(_:)(v217);
          swift_bridgeObjectRelease(v218);
          v219._countAndFlagsBits = 0xD000000000000025;
          v219._object = v331;
          String.append(_:)(v219);
          v220 = v384;
          v221 = v385;
          v222 = sub_1000122F8();
          v223 = swift_allocError(&type metadata for KMError, v222, 0, 0);
          v191 = v223;
          *(_QWORD *)v224 = v220;
          *(_QWORD *)(v224 + 8) = v221;
          *(_OWORD *)(v224 + 16) = 0u;
          *(_OWORD *)(v224 + 32) = 0u;
          *(_OWORD *)(v224 + 48) = 0u;
          *(_QWORD *)(v224 + 64) = 0;
          v225 = 9;
LABEL_75:
          *(_BYTE *)(v224 + 72) = v225;
          swift_willThrow(v223);
          sub_100005D08(&v396);
          v347 = 0;
          v190 = v351;
          v192 = (void (*)(char *, char *, uint64_t))v358;
          goto LABEL_79;
        }
        v175 = v173;
        v176 = *v162;
        v177 = v162[1];
        v178 = v172;
        sub_1000122B4(*v162, v177);
        v179 = v178;
        v180 = sub_10005E2B8(v178, (uint64_t)v175, v176, v177, v345);
        sub_100011F40(v176, v177);
        if (v180 == 3)
          v181 = 0;
        else
          v181 = v180;
        v381 = v181;
        v380 = 1;
        sub_10001233C();
        dispatch thunk of RawRepresentable.rawValue.getter(&v384, &type metadata for ApprovalState);
        dispatch thunk of RawRepresentable.rawValue.getter(&v382, &type metadata for ApprovalState);
        if (v384 == (_QWORD)v382)
        {
          v182 = v349[7];
          v183 = (uint64_t)v334;
          v174 = v400;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v368 + 56))(v334, 1, 1, v400);
          v184 = sub_1000268C0();
          v185 = sub_1000268C0();
          v186 = v184 & 1;
          v187 = (uint64_t)v372;
          v188 = v347;
          v189 = sub_10009E620(&v396, v183, v186, v185 & 1, (uint64_t)v372);
          v350 = v188;
          if (v188)
          {
            sub_1000124F8(v183, (uint64_t *)&unk_10015BA60);
            swift_bridgeObjectRelease(v175);
            sub_100005D08(&v396);
            v347 = 0;
            v191 = v350;
            v190 = v351;
            v192 = (void (*)(char *, char *, uint64_t))v358;
LABEL_79:
            v238 = v378;
            v374(v190, v373, v378);
            v239 = v341;
            v192(v341, v379, v174);
            swift_errorRetain(v191);
            v240 = swift_errorRetain(v191);
            v241 = Logger.logObject.getter(v240);
            v242 = static os_log_type_t.error.getter(v241);
            if (os_log_type_enabled(v241, v242))
            {
              v243 = v191;
              v244 = swift_slowAlloc(22, -1);
              v245 = swift_slowAlloc(64, -1);
              v374 = (void (*)(char *, uint64_t, uint64_t))v245;
              *(_QWORD *)&v396 = v245;
              *(_DWORD *)v244 = v336.n128_u32[0];
              v246 = URL.path.getter(v245);
              v248 = v247;
              v384 = sub_1000055A0(v246, v247, (uint64_t *)&v396);
              v249 = v337;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v384, v337, v244 + 4, v244 + 12);
              swift_bridgeObjectRelease(v248);
              v250 = v239;
              v251 = v369;
              v369(v250, v400);
              *(_WORD *)(v244 + 12) = 2080;
              v384 = v243;
              swift_errorRetain(v243);
              v252 = sub_100005C88(&qword_10015AB50);
              v253 = String.init<A>(describing:)(&v384, v252);
              v255 = v254;
              v384 = sub_1000055A0(v253, v254, (uint64_t *)&v396);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v384, v249, v244 + 14, v244 + 22);
              swift_bridgeObjectRelease(v255);
              swift_errorRelease(v243);
              swift_errorRelease(v243);
              _os_log_impl((void *)&_mh_execute_header, v241, v242, "Could not insert bundle at %s into manager: %s", (uint8_t *)v244, 0x16u);
              v256 = v374;
              swift_arrayDestroy(v374, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v256, -1, -1);
              swift_slowDealloc(v244, -1, -1);

              swift_errorRelease(v243);
              swift_bridgeObjectRelease(v367);
              v370(v351, v378);
              v251(v379, v400);
            }
            else
            {

              swift_errorRelease(v191);
              swift_errorRelease(v191);
              v257 = v369;
              v369(v239, v174);
              swift_errorRelease(v191);
              swift_bridgeObjectRelease(v367);
              v142(v351, v238);
              v257(v379, v174);
            }
            v53 = v371;
            sub_100012490(v371, type metadata accessor for DriverBinEntry);
            v29 = v368;
            goto LABEL_83;
          }
          v347 = v182;
          swift_release(v189);
          sub_1000124F8(v183, (uint64_t *)&unk_10015BA60);
          v226 = *(_OWORD *)(v187 + 16);
          v388 = *(_OWORD *)v187;
          v389 = v226;
          v390 = *(_OWORD *)(v187 + 32);
          v391 = *(_QWORD *)(v187 + 48);
          v227 = *((_QWORD *)&v397 + 1);
          v228 = v398;
          sub_100004DE4(&v396, *((uint64_t *)&v397 + 1));
          v229 = (uint64_t)v330;
          (*(void (**)(uint64_t, uint64_t))(v228 + 64))(v227, v228);
          v230 = sub_100053224(v229);
          v231 = v229;
          v174 = v400;
          v369((char *)v231, v400);
          if (!v230)
          {
            swift_bridgeObjectRelease(v175);
            v258 = sub_1000122F8();
            v223 = swift_allocError(&type metadata for KMError, v258, 0, 0);
            v191 = v223;
            v259 = v325;
            *(_QWORD *)v224 = 0xD000000000000028;
            *(_QWORD *)(v224 + 8) = v259;
            *(_OWORD *)(v224 + 16) = 0u;
            *(_OWORD *)(v224 + 32) = 0u;
            *(_OWORD *)(v224 + 48) = 0u;
            *(_QWORD *)(v224 + 64) = 0;
            v225 = 50;
            goto LABEL_75;
          }
          v232 = *(_QWORD *)(v230 + 24);
          v233 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v232 + 112);
          v234 = swift_retain(v232);
          v233(&v384, v234);
          swift_release(v232);
          v190 = v351;
          v192 = (void (*)(char *, char *, uint64_t))v358;
          if (!v386)
          {
            swift_bridgeObjectRelease(v175);
            sub_1000124F8((uint64_t)&v384, &qword_100157C78);
            v235 = sub_1000122F8();
            v191 = swift_allocError(&type metadata for KMError, v235, 0, 0);
            v236 = v329;
            *(_QWORD *)v237 = 0xD00000000000001BLL;
            *(_QWORD *)(v237 + 8) = v236;
            *(_OWORD *)(v237 + 16) = 0u;
            *(_OWORD *)(v237 + 32) = 0u;
            *(_OWORD *)(v237 + 48) = 0u;
            *(_QWORD *)(v237 + 64) = 0;
            *(_BYTE *)(v237 + 72) = 50;
            swift_willThrow(v191);
            swift_release(v230);
            sub_100005D08(&v396);
            v347 = 0;
            goto LABEL_79;
          }
          v260 = v230;
          sub_1000124F8((uint64_t)&v384, &qword_100157C78);
          v384 = 0;
          v385 = 0xE000000000000000;
          _StringGuts.grow(_:)(41);
          swift_bridgeObjectRelease(v385);
          v384 = 0xD000000000000014;
          v385 = v322;
          v261._countAndFlagsBits = v179;
          v261._object = v175;
          String.append(_:)(v261);
          swift_bridgeObjectRelease(v175);
          v262._countAndFlagsBits = 544497952;
          v262._object = (void *)0xE400000000000000;
          String.append(_:)(v262);
          v264._countAndFlagsBits = URL.path.getter(v263);
          v265 = v264._object;
          String.append(_:)(v264);
          swift_bridgeObjectRelease(v265);
          v266._countAndFlagsBits = 0x616D206F746E6920;
          v266._object = (void *)0xED0000726567616ELL;
          String.append(_:)(v266);
          v267 = v384;
          v268 = v385;
          if ((swift_isUniquelyReferenced_nonNull_native(v335) & 1) == 0)
            v335 = sub_10000C500(0, v335[2] + 1, 1, v335);
          v16 = v361;
          v269 = v367;
          v271 = v335[2];
          v270 = v335[3];
          if (v271 >= v270 >> 1)
            v335 = sub_10000C500((_QWORD *)(v270 > 1), v271 + 1, 1, v335);
          v272 = v335;
          v335[2] = v271 + 1;
          v273 = &v272[2 * v271];
          v273[4] = v267;
          v273[5] = v268;
          v274 = v349[5];
          v275 = v349[6];
          sub_100004DE4(v344, v274);
          sub_100005554(v274, v275);
          v276 = v386;
          v277 = v387;
          sub_100004DE4(&v384, v386);
          v278 = *(_QWORD *)(v347 + 160);
          v279 = *(_QWORD *)(v347 + 168);
          swift_bridgeObjectRetain(v279);
          sub_100016800(v260, v278, v279, v276, v277);
          swift_bridgeObjectRelease(v269);
          swift_release(v260);
          swift_bridgeObjectRelease(v279);
          v369(v379, v400);
          v53 = v371;
          sub_100012490(v371, type metadata accessor for DriverBinEntry);
          sub_100005D08(&v384);
          v347 = v350;
        }
        else
        {
          swift_bridgeObjectRelease(v367);
          swift_bridgeObjectRelease(v175);
          v369(v379, v400);
          v53 = v371;
          sub_100012490(v371, type metadata accessor for DriverBinEntry);
          v16 = v361;
        }
        v51 = v376;
        sub_100005D08(&v396);
        v29 = v368;
        v26 = v360;
        v55 = v377;
      }
      else
      {
        v193 = v379;
        v194 = v348;
        v374(v348, v373, v127);
        v195 = v343;
        v196 = sub_100012408(v160, v343, type metadata accessor for DriverBinEntry);
        v197 = v127;
        v198 = Logger.logObject.getter(v196);
        v199 = static os_log_type_t.info.getter(v198);
        if (os_log_type_enabled(v198, v199))
        {
          v200 = v195;
          v201 = swift_slowAlloc(12, -1);
          v202 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v396 = v202;
          *(_DWORD *)v201 = v357.n128_u32[0];
          v203 = sub_100012534(&qword_100157EB8, type metadata accessor for DriverBinEntry, (uint64_t)&unk_1001105E8);
          v204 = dispatch thunk of CustomStringConvertible.description.getter(v375, v203);
          v206 = v205;
          *(_QWORD *)(v201 + 4) = sub_1000055A0(v204, v205, (uint64_t *)&v396);
          swift_bridgeObjectRelease(v206);
          sub_100012490(v200, type metadata accessor for DriverBinEntry);
          _os_log_impl((void *)&_mh_execute_header, v198, v199, "Found stale staged driver %s belonging to an uninstalled app", (uint8_t *)v201, 0xCu);
          swift_arrayDestroy(v202, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v202, -1, -1);
          swift_slowDealloc(v201, -1, -1);
          swift_bridgeObjectRelease(v367);

          v207 = v379;
          v370(v348, v378);
          v208 = v207;
        }
        else
        {

          sub_100012490(v195, type metadata accessor for DriverBinEntry);
          swift_bridgeObjectRelease(v367);
          v370(v194, v197);
          v208 = v193;
        }
        v369(v208, v400);
        sub_100012490(v160, type metadata accessor for DriverBinEntry);
        v29 = v368;
        v26 = v360;
        v16 = v361;
        v51 = v376;
        v55 = v377;
        v53 = v160;
      }
    }
  }
  v60 = __OFADD__(v55, 1);
  v61 = v55 + 1;
  if (v60)
    goto LABEL_127;
  if (v61 < v355)
  {
    v56 = *(_QWORD *)(v354 + 8 * v61);
    if (!v56)
    {
      v62 = v61 + 1;
      if (v61 + 1 >= v355)
        goto LABEL_99;
      v56 = *(_QWORD *)(v354 + 8 * v62);
      if (!v56)
      {
        v62 = v61 + 2;
        if (v61 + 2 >= v355)
          goto LABEL_99;
        v56 = *(_QWORD *)(v354 + 8 * v62);
        if (!v56)
        {
          v62 = v61 + 3;
          if (v61 + 3 >= v355)
            goto LABEL_99;
          v56 = *(_QWORD *)(v354 + 8 * v62);
          if (!v56)
          {
            v62 = v61 + 4;
            if (v61 + 4 >= v355)
              goto LABEL_99;
            v56 = *(_QWORD *)(v354 + 8 * v62);
            if (!v56)
            {
              while (1)
              {
                v61 = v62 + 1;
                if (__OFADD__(v62, 1))
                  goto LABEL_129;
                if (v61 >= v355)
                  goto LABEL_99;
                v56 = *(_QWORD *)(v354 + 8 * v61);
                ++v62;
                if (v56)
                  goto LABEL_20;
              }
            }
          }
        }
      }
      v61 = v62;
    }
LABEL_20:
    v376 = (v56 - 1) & v56;
    v377 = v61;
    v59 = __clz(__rbit64(v56)) + (v61 << 6);
    goto LABEL_21;
  }
LABEL_99:
  v281 = v366;
  swift_release(v366);
  v282 = sub_10003ACAC(v281);
  v29 = sub_100011D28(v282);
  swift_bridgeObjectRelease(v282);
  v283 = v372[1];
  v396 = *v372;
  v397 = v283;
  v398 = v372[2];
  v399 = *((_QWORD *)v372 + 6);
  v284 = (uint64_t)v365;
  swift_storeEnumTagMultiPayload(v365, v364, 4);
  sub_1000533F4(v284);
  v16 = v285;
  sub_100012490(v284, type metadata accessor for LookupSpec);
  if (!v16)
  {
    v320 = v29;
    goto LABEL_136;
  }
  v56 = v16 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)v16 >> 62))
  {
    v286 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v286)
      goto LABEL_102;
LABEL_134:
    v319 = v29;
LABEL_135:
    swift_bridgeObjectRelease(v319);
    v320 = v16;
LABEL_136:
    result = swift_bridgeObjectRelease(v320);
    *v326 = v335;
    return result;
  }
LABEL_130:
  if (v16 >= 0)
    v321 = v56;
  else
    v321 = v16;
  swift_bridgeObjectRetain(v16);
  v286 = _CocoaArrayWrapper.endIndex.getter(v321);
  swift_bridgeObjectRelease(v16);
  if (!v286)
    goto LABEL_134;
LABEL_102:
  v378 = v286;
  v379 = (char *)(v16 & 0xC000000000000001);
  v287 = 4;
  v375 = (int *)0x8000000100121DD0;
  v376 = v29;
  v377 = v16;
  while (2)
  {
    v289 = v287 - 4;
    if (v379)
    {
      v290 = specialized _ArrayBuffer._getElementSlowPath(_:)(v287 - 4, v16);
      v291 = v287 - 3;
      if (__OFADD__(v289, 1))
        goto LABEL_128;
    }
    else
    {
      v290 = *(_QWORD *)(v16 + 8 * v287);
      swift_retain(v290);
      v291 = v287 - 3;
      if (__OFADD__(v289, 1))
        goto LABEL_128;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v290 + 24) + 112))(&v384);
    v292 = v386;
    if (!v386)
    {
      sub_1000124F8((uint64_t)&v384, &qword_100157C78);
      v288 = (uint64_t)v340;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v368 + 56))(v340, 1, 1, v400);
LABEL_104:
      swift_release(v290);
      sub_1000124F8(v288, (uint64_t *)&unk_10015BA60);
      goto LABEL_105;
    }
    v293 = v387;
    sub_100004DE4(&v384, v386);
    v294 = v340;
    v295 = v292;
    v296 = v400;
    (*(void (**)(uint64_t, uint64_t))(v293 + 64))(v295, v293);
    v288 = (uint64_t)v294;
    v16 = v377;
    v29 = v368;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v368 + 56))(v288, 0, 1, v296);
    sub_100005D08(&v384);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v288, 1, v296) == 1)
      goto LABEL_104;
    v29 = v368;
    v297 = v338;
    v298 = v400;
    v299 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v368 + 32))(v338, v288, v400);
    result = (*(uint64_t (**)(uint64_t))(*v349 + 232))(v299);
    if (result)
    {
      v301 = result;
      v302 = (*(uint64_t (**)(char *))(*(_QWORD *)result + 392))(v297);
      swift_release(v301);
      v303 = (uint64_t)v332;
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v332, v297, v298);
      v304 = v298;
      if ((v302 & 1) != 0)
      {
        v305 = sub_10000B2A0(v303, v376);
        v306 = v303;
        v307 = v305;
        v308 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
        v308(v306, v304);
        if ((v307 & 1) != 0)
        {
          swift_release(v290);
        }
        else
        {
          sub_100052BB8(v290);
          v384 = 0;
          v385 = 0xE000000000000000;
          _StringGuts.grow(_:)(76);
          v309._countAndFlagsBits = 0x6120726576697244;
          v309._object = (void *)0xEE00204C52552074;
          String.append(_:)(v309);
          v310 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v311._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v304, v310);
          v312 = v311._object;
          String.append(_:)(v311);
          swift_bridgeObjectRelease(v312);
          v313._countAndFlagsBits = 0xD00000000000003CLL;
          v313._object = v375;
          String.append(_:)(v313);
          v29 = v384;
          v314 = v385;
          if ((swift_isUniquelyReferenced_nonNull_native(v335) & 1) == 0)
            v335 = sub_10000C500(0, v335[2] + 1, 1, v335);
          v316 = v335[2];
          v315 = v335[3];
          if (v316 >= v315 >> 1)
            v335 = sub_10000C500((_QWORD *)(v315 > 1), v316 + 1, 1, v335);
          v317 = v335;
          v335[2] = v316 + 1;
          v318 = &v317[2 * v316];
          v318[4] = v29;
          v318[5] = v314;
          swift_release(v290);
          v304 = v400;
        }
      }
      else
      {
        swift_release(v290);
        v308 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
        v308(v303, v304);
      }
      v308((uint64_t)v338, v304);
      v16 = v377;
LABEL_105:
      ++v287;
      if (v291 == v378)
      {
        v319 = v376;
        goto LABEL_135;
      }
      continue;
    }
    break;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000A8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD __s1[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(__s1, *(_QWORD *)(a3 + 40));
    Data.hash(into:)(__s1, a1, a2);
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a3 + 32));
    if (((*(_QWORD *)(a3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X8 }
  }
  return 0;
}

uint64_t sub_10000B2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100012534(&qword_100157E98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_10000B424(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

unint64_t sub_10000B450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t object;
  Swift::String v17;
  void *v18;
  unint64_t v19;
  unint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::Int v50;
  uint64_t v51;
  void *v52;
  void *v53;
  Swift::String v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  Swift::String v60;
  void *v61;
  Swift::String v62;
  Swift::String v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t result;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  Swift::String v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  unint64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::String v85;
  void *v86;
  Swift::String v87;
  void *v88;
  uint64_t v89;
  _QWORD *countAndFlagsBits;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  Swift::String v101;
  uint64_t v102;
  Swift::String v103;
  void *v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  Swift::Int v111;
  uint64_t v112;
  void *v113;
  void *v114;
  Swift::String v115;
  uint64_t v116;
  Swift::String v117;
  Swift::String v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  Swift::String v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  Swift::String v136;
  Swift::String v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  int64_t v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  int64_t v145;
  void *v146;
  int64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  Swift::String v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160[4];
  int64_t v161;
  uint64_t v162;

  v1 = type metadata accessor for URL(0);
  v155 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v141 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005C88(&qword_100157C80);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v141 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v141 - v9;
  v142 = v0;
  v11 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 56) + 144))(v8);
  sub_1000547A8(v11, (uint64_t)v160);
  swift_release(v11);
  v158 = 0xD000000000000024;
  v159 = 0x8000000100121A40;
  v12 = *(_QWORD *)(v161 + 64);
  v145 = v161 + 64;
  v13 = 1 << *(_BYTE *)(v161 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v146 = (void *)((unint64_t)(v13 + 63) >> 6);
  v147 = v161;
  swift_bridgeObjectRetain(v161);
  object = 0;
  v143 = (unint64_t)"ions by identifier:\n";
  v144 = (_QWORD *)0x8000000100121A70;
  v150 = v3;
  v151 = v1;
  v148 = v7;
  v149 = v10;
  if (v15)
    goto LABEL_6;
LABEL_12:
  v23 = object + 1;
  if (__OFADD__(object, 1))
    goto LABEL_119;
  if (v23 >= (uint64_t)v146)
    goto LABEL_52;
  v24 = *(_QWORD *)(v145 + 8 * v23);
  ++object;
  if (v24)
    goto LABEL_25;
  object = v23 + 1;
  if (v23 + 1 >= (uint64_t)v146)
    goto LABEL_52;
  v24 = *(_QWORD *)(v145 + 8 * object);
  if (v24)
    goto LABEL_25;
  object = v23 + 2;
  if (v23 + 2 >= (uint64_t)v146)
  {
LABEL_52:
    swift_release(v147);
    v62._countAndFlagsBits = 10;
    v62._object = (void *)0xE100000000000000;
    String.append(_:)(v62);
    v63._countAndFlagsBits = 0xD00000000000001DLL;
    v63._object = (void *)0x8000000100121A90;
    String.append(_:)(v63);
    v64 = (_QWORD *)v162;
    object = *(_QWORD *)(v162 + 64);
    v145 = v162 + 64;
    v65 = 1 << *(_BYTE *)(v162 + 32);
    swift_bridgeObjectRetain(v162);
    result = (unint64_t)sub_100010C68(v160);
    v153 = 0;
    v67 = -1;
    if (v65 < 64)
      v67 = ~(-1 << v65);
    v68 = v67 & object;
    v147 = (unint64_t)(v65 + 63) >> 6;
    v141 = v147 - 1;
    v146 = (void *)(v143 | 0x8000000000000000);
    v144 = v64;
    while (!v68)
    {
      v78 = v153 + 1;
      if (__OFADD__(v153, 1))
        goto LABEL_120;
      if (v78 < v147)
      {
        v79 = *(_QWORD *)(v145 + 8 * v78);
        if (v79)
          goto LABEL_63;
        v80 = v153 + 2;
        ++v153;
        if (v78 + 1 < v147)
        {
          v79 = *(_QWORD *)(v145 + 8 * v80);
          if (v79)
            goto LABEL_66;
          v153 = v78 + 1;
          if (v78 + 2 < v147)
          {
            v79 = *(_QWORD *)(v145 + 8 * (v78 + 2));
            if (v79)
            {
              v78 += 2;
LABEL_63:
              v73 = (v79 - 1) & v79;
              v74 = __clz(__rbit64(v79)) + (v78 << 6);
              v153 = v78;
LABEL_59:
              (*(void (**)(char *, unint64_t, uint64_t))(v155 + 16))(v7, v64[6] + *(_QWORD *)(v155 + 72) * v74, v1);
              v75 = v64[7];
              v76 = sub_100005C88(&qword_100157C88);
              v77 = *(_QWORD *)(v75 + 8 * v74);
              *(_QWORD *)&v7[*(int *)(v76 + 48)] = v77;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v7, 0, 1, v76);
              swift_bridgeObjectRetain(v77);
              goto LABEL_78;
            }
            v80 = v78 + 3;
            v153 = v78 + 2;
            if (v78 + 3 < v147)
            {
              v79 = *(_QWORD *)(v145 + 8 * v80);
              if (v79)
              {
LABEL_66:
                v78 = v80;
                goto LABEL_63;
              }
              while (1)
              {
                v78 = v80 + 1;
                if (__OFADD__(v80, 1))
                  goto LABEL_130;
                if (v78 >= v147)
                  break;
                v79 = *(_QWORD *)(v145 + 8 * v78);
                ++v80;
                if (v79)
                  goto LABEL_63;
              }
              v153 = v141;
            }
          }
        }
      }
      v81 = sub_100005C88(&qword_100157C88);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v7, 1, 1, v81);
      v73 = 0;
LABEL_78:
      sub_100011EF8((uint64_t)v7, (uint64_t)v10);
      v82 = sub_100005C88(&qword_100157C88);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 48))(v10, 1, v82) == 1)
      {
        swift_release(v64);
        v117._countAndFlagsBits = 10;
        v117._object = (void *)0xE100000000000000;
        String.append(_:)(v117);
        v118._countAndFlagsBits = 0xD000000000000010;
        v118._object = (void *)0x8000000100121AB0;
        String.append(_:)(v118);
        result = (*(uint64_t (**)(void))(*(_QWORD *)v142 + 408))();
        object = result;
        if (result >> 62)
          goto LABEL_124;
        v155 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v155)
          goto LABEL_111;
LABEL_128:
        swift_bridgeObjectRelease(object);
        return v158;
      }
      v154 = v73;
      v83 = *(_QWORD *)&v10[*(int *)(v82 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v3, v10, v1);
      if ((unint64_t)v83 >> 62)
      {
        if (v83 < 0)
          v116 = v83;
        else
          v116 = v83 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v83);
        object = _CocoaArrayWrapper.endIndex.getter(v116);
        if (!object)
        {
LABEL_55:
          swift_bridgeObjectRelease_n(v83, 2);
          v69 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v157._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v69);
          v157._object = v70;
          v71._countAndFlagsBits = 0x3E7974706D653C20;
          v71._object = (void *)0xE90000000000000ALL;
          String.append(_:)(v71);
          object = (uint64_t)v157._object;
          String.append(_:)(v157);
          swift_bridgeObjectRelease(object);
          goto LABEL_56;
        }
      }
      else
      {
        object = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v83);
        if (!object)
          goto LABEL_55;
      }
      if ((v83 & 0xC000000000000001) != 0)
      {
        v152 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v83);
      }
      else
      {
        if (!*(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_118;
        v152 = *(_QWORD *)(v83 + 32);
        swift_retain(v152);
      }
      swift_bridgeObjectRelease(v83);
      if ((unint64_t)v83 >> 62)
      {
        if (v83 < 0)
          v98 = v83;
        else
          v98 = v83 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v83);
        object = _CocoaArrayWrapper.endIndex.getter(v98);
        swift_bridgeObjectRelease(v83);
        if (object == 1)
        {
LABEL_100:
          swift_bridgeObjectRelease(v83);
          v99 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v157._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v99);
          v157._object = v100;
          v101._countAndFlagsBits = 8250;
          v101._object = (void *)0xE200000000000000;
          String.append(_:)(v101);
          v102 = v152;
          v103._countAndFlagsBits = sub_100034E60();
          v104 = v103._object;
          String.append(_:)(v103);
          swift_bridgeObjectRelease(v104);
          v105._countAndFlagsBits = 10;
          v105._object = (void *)0xE100000000000000;
          String.append(_:)(v105);
          object = (uint64_t)v157._object;
          String.append(_:)(v157);
          swift_release(v102);
          swift_bridgeObjectRelease(object);
          v7 = v148;
          goto LABEL_56;
        }
      }
      else
      {
        object = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (object == 1)
          goto LABEL_100;
      }
      v157._countAndFlagsBits = 0;
      v157._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease(v157._object);
      v157._countAndFlagsBits = 0xD00000000000001ELL;
      v157._object = v146;
      v84 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v85._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v84);
      v86 = v85._object;
      String.append(_:)(v85);
      swift_bridgeObjectRelease(v86);
      v87._countAndFlagsBits = 2618;
      v87._object = (void *)0xE200000000000000;
      String.append(_:)(v87);
      v88 = v157._object;
      String.append(_:)(v157);
      swift_bridgeObjectRelease(v88);
      if (object)
      {
        v157._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
        sub_10000C958(0, object & ~(object >> 63), 0);
        if (object < 0)
          goto LABEL_122;
        v89 = 0;
        countAndFlagsBits = (_QWORD *)v157._countAndFlagsBits;
        do
        {
          if ((v83 & 0xC000000000000001) != 0)
          {
            v91 = specialized _ArrayBuffer._getElementSlowPath(_:)(v89, v83);
          }
          else
          {
            v91 = *(_QWORD *)(v83 + 8 * v89 + 32);
            swift_retain(v91);
          }
          v92 = sub_100034E60();
          v94 = v93;
          swift_release(v91);
          v157._countAndFlagsBits = (uint64_t)countAndFlagsBits;
          v96 = countAndFlagsBits[2];
          v95 = countAndFlagsBits[3];
          if (v96 >= v95 >> 1)
          {
            sub_10000C958(v95 > 1, v96 + 1, 1);
            countAndFlagsBits = (_QWORD *)v157._countAndFlagsBits;
          }
          ++v89;
          countAndFlagsBits[2] = v96 + 1;
          v97 = &countAndFlagsBits[2 * v96];
          v97[4] = v92;
          v97[5] = v94;
        }
        while (object != v89);
        swift_bridgeObjectRelease(v83);
        v3 = v150;
        v1 = v151;
        v10 = v149;
        v64 = v144;
      }
      else
      {
        swift_bridgeObjectRelease(v83);
        countAndFlagsBits = _swiftEmptyArrayStorage;
      }
      v157._countAndFlagsBits = (uint64_t)countAndFlagsBits;
      v106 = sub_100005C88((uint64_t *)&unk_10015A5D0);
      v107 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
      v108 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v106, v107);
      v110 = v109;
      swift_bridgeObjectRelease(countAndFlagsBits);
      v111 = sub_1000268B8();
      v112 = sub_1000D17DC(v111, v108, v110);
      v114 = v113;
      swift_bridgeObjectRelease(v110);
      v157._countAndFlagsBits = v112;
      v157._object = v114;
      swift_bridgeObjectRetain(v114);
      v115._countAndFlagsBits = 10;
      v115._object = (void *)0xE100000000000000;
      String.append(_:)(v115);
      swift_bridgeObjectRelease(v114);
      object = (uint64_t)v157._object;
      String.append(_:)(v157);
      swift_bridgeObjectRelease(object);
      swift_release(v152);
      v7 = v148;
LABEL_56:
      v68 = v154;
      result = (*(uint64_t (**)(char *, uint64_t))(v155 + 8))(v3, v1);
    }
    v72 = __clz(__rbit64(v68));
    v73 = (v68 - 1) & v68;
    v74 = v72 | (v153 << 6);
    goto LABEL_59;
  }
  v24 = *(_QWORD *)(v145 + 8 * object);
  if (!v24)
  {
    v25 = v23 + 3;
    if (v25 < (uint64_t)v146)
    {
      v24 = *(_QWORD *)(v145 + 8 * v25);
      if (v24)
      {
        object = v25;
        goto LABEL_25;
      }
      while (1)
      {
        object = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_123;
        if (object >= (uint64_t)v146)
          break;
        v24 = *(_QWORD *)(v145 + 8 * object);
        ++v25;
        if (v24)
          goto LABEL_25;
      }
    }
    goto LABEL_52;
  }
LABEL_25:
  v15 = (v24 - 1) & v24;
  for (i = __clz(__rbit64(v24)) + (object << 6); ; i = v19 | (object << 6))
  {
    v26 = (uint64_t *)(*(_QWORD *)(v147 + 48) + 16 * i);
    v27 = *v26;
    v28 = (void *)v26[1];
    v29 = *(_QWORD *)(*(_QWORD *)(v147 + 56) + 8 * i);
    v30 = (unint64_t)v29 >> 62;
    if ((unint64_t)v29 >> 62)
    {
      if (v29 < 0)
        v21 = *(_QWORD *)(*(_QWORD *)(v147 + 56) + 8 * i);
      else
        v21 = v29 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v29, 2);
      swift_bridgeObjectRetain(v28);
      v22 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v29);
      if (!v22)
      {
LABEL_5:
        swift_bridgeObjectRelease(v29);
        v157._countAndFlagsBits = v27;
        v157._object = v28;
        v17._countAndFlagsBits = 0x3E7974706D653C20;
        v17._object = (void *)0xE90000000000000ALL;
        String.append(_:)(v17);
        v18 = v157._object;
        String.append(_:)(v157);
        swift_bridgeObjectRelease(v18);
        v3 = v150;
        v1 = v151;
        v10 = v149;
        if (!v15)
          goto LABEL_12;
        goto LABEL_6;
      }
    }
    else
    {
      v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v28);
      if (!v31)
        goto LABEL_5;
    }
    v153 = v15;
    v154 = object;
    if ((v29 & 0xC000000000000001) == 0)
      break;
    v152 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v29);
    if (!v30)
    {
LABEL_31:
      v32 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v32 == 1)
        goto LABEL_49;
      goto LABEL_32;
    }
LABEL_45:
    if (v29 < 0)
      v57 = v29;
    else
      v57 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v29);
    v32 = _CocoaArrayWrapper.endIndex.getter(v57);
    swift_bridgeObjectRelease(v29);
    if (v32 == 1)
    {
LABEL_49:
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v28);
      v58 = v152;
      v157._countAndFlagsBits = sub_100034E60();
      v157._object = v59;
      v60._countAndFlagsBits = 10;
      v60._object = (void *)0xE100000000000000;
      String.append(_:)(v60);
      v61 = v157._object;
      String.append(_:)(v157);
      swift_bridgeObjectRelease(v61);
      v56 = v58;
      goto LABEL_50;
    }
LABEL_32:
    v157._countAndFlagsBits = 0;
    v157._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(v157._object);
    v157._countAndFlagsBits = 0xD00000000000001ELL;
    v157._object = v144;
    v33._countAndFlagsBits = v27;
    v33._object = v28;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v28);
    v34._countAndFlagsBits = 2618;
    v34._object = (void *)0xE200000000000000;
    String.append(_:)(v34);
    v35 = v157._object;
    String.append(_:)(v157);
    swift_bridgeObjectRelease(v35);
    if (v32)
    {
      v157._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      sub_10000C958(0, v32 & ~(v32 >> 63), 0);
      if (v32 < 0)
        goto LABEL_121;
      v36 = 0;
      v37 = (_QWORD *)v157._countAndFlagsBits;
      do
      {
        if ((v29 & 0xC000000000000001) != 0)
        {
          v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v29);
        }
        else
        {
          v38 = *(_QWORD *)(v29 + 8 * v36 + 32);
          swift_retain(v38);
        }
        v39 = sub_100034E60();
        v41 = v40;
        swift_release(v38);
        v157._countAndFlagsBits = (uint64_t)v37;
        v43 = v37[2];
        v42 = v37[3];
        if (v43 >= v42 >> 1)
        {
          sub_10000C958(v42 > 1, v43 + 1, 1);
          v37 = (_QWORD *)v157._countAndFlagsBits;
        }
        ++v36;
        v37[2] = v43 + 1;
        v44 = &v37[2 * v43];
        v44[4] = v39;
        v44[5] = v41;
      }
      while (v32 != v36);
      swift_bridgeObjectRelease(v29);
    }
    else
    {
      swift_bridgeObjectRelease(v29);
      v37 = _swiftEmptyArrayStorage;
    }
    v157._countAndFlagsBits = (uint64_t)v37;
    v45 = sub_100005C88((uint64_t *)&unk_10015A5D0);
    v46 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
    v47 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v45, v46);
    v49 = v48;
    swift_bridgeObjectRelease(v37);
    v50 = sub_1000268B8();
    v51 = sub_1000D17DC(v50, v47, v49);
    v53 = v52;
    swift_bridgeObjectRelease(v49);
    v157._countAndFlagsBits = v51;
    v157._object = v53;
    swift_bridgeObjectRetain(v53);
    v54._countAndFlagsBits = 10;
    v54._object = (void *)0xE100000000000000;
    String.append(_:)(v54);
    swift_bridgeObjectRelease(v53);
    v55 = v157._object;
    String.append(_:)(v157);
    swift_bridgeObjectRelease(v55);
    v56 = v152;
LABEL_50:
    swift_release(v56);
    v3 = v150;
    v1 = v151;
    v7 = v148;
    v10 = v149;
    v15 = v153;
    object = v154;
    if (!v153)
      goto LABEL_12;
LABEL_6:
    v19 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
  }
  if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v152 = *(_QWORD *)(v29 + 32);
    swift_retain(v152);
    if (!v30)
      goto LABEL_31;
    goto LABEL_45;
  }
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  if (object < 0)
    v139 = object;
  else
    v139 = object & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(object);
  v140 = _CocoaArrayWrapper.endIndex.getter(v139);
  result = swift_bridgeObjectRelease(object);
  v155 = v140;
  if (!v140)
    goto LABEL_128;
LABEL_111:
  if (v155 >= 1)
  {
    v119 = 0;
    v154 = object & 0xC000000000000001;
    v120 = object;
    do
    {
      if (v154)
      {
        v121 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v119, object);
      }
      else
      {
        v121 = *(_QWORD **)(object + 8 * v119 + 32);
        swift_retain(v121);
      }
      ++v119;
      v157._countAndFlagsBits = 0;
      v157._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(25);
      v122 = v157._object;
      v156 = v121[3];
      v123 = v156;
      v124 = type metadata accessor for OSExtension(0);
      v125 = sub_100012534((unint64_t *)&qword_100157C90, type metadata accessor for OSExtension, (uint64_t)&unk_10011B468);
      swift_retain(v123);
      v126 = dispatch thunk of CustomStringConvertible.description.getter(v124, v125);
      v128 = v127;
      swift_release(v123);
      swift_bridgeObjectRelease(v122);
      v157._countAndFlagsBits = v126;
      v157._object = v128;
      v129._countAndFlagsBits = 0xD000000000000014;
      v129._object = (void *)0x8000000100121AD0;
      String.append(_:)(v129);
      v130 = (*(uint64_t (**)(void))(*v121 + 296))();
      v132 = v131;
      v133 = sub_100013834(v130, v131);
      v135 = v134;
      sub_100011F40(v130, v132);
      v136._countAndFlagsBits = v133;
      v136._object = v135;
      String.append(_:)(v136);
      swift_bridgeObjectRelease(v135);
      v137._countAndFlagsBits = 10;
      v137._object = (void *)0xE100000000000000;
      String.append(_:)(v137);
      v138 = v157._object;
      String.append(_:)(v157);
      swift_release(v121);
      swift_bridgeObjectRelease(v138);
      object = v120;
    }
    while (v155 != v119);
    goto LABEL_128;
  }
  __break(1u);
LABEL_130:
  __break(1u);
  return result;
}

uint64_t sub_10000C3C0()
{
  uint64_t v0;

  sub_100005D08((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  sub_1000124F8(v0 + 64, &qword_100157C70);

  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  return v0;
}

uint64_t sub_10000C42C()
{
  uint64_t v0;

  sub_10000C3C0();
  return swift_deallocClassInstance(v0, 160, 7);
}

uint64_t sub_10000C44C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t sub_10000C458()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t sub_10000C464()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

void (*sub_10000C470(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 344))();
  return sub_10000C4BC;
}

void sub_10000C4BC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_10000C4E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t sub_10000C4F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

_QWORD *sub_10000C500(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005C88((uint64_t *)&unk_100159E60);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000121C4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000C60C(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005C88(&qword_10015BB40);
  v11 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100011FA4(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

_QWORD *sub_10000C814(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005C88(&qword_100157EB0);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000120BC(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000C920(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10000C974(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10000C93C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10000CB54(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10000C958(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10000CCBC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10000C974(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t active;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005C88(&qword_100157EA0);
  v11 = *(_QWORD *)(type metadata accessor for ActiveDriverInfo(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  active = type metadata accessor for ActiveDriverInfo(0);
  v19 = *(_QWORD *)(active - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, active);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000CB54(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_100157EE8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000CCBC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88((uint64_t *)&unk_100159E60);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000CE24(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v6)(char *, uint64_t);
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v6 = (uint64_t (*)(char *, uint64_t))isStackAllocationSafe;
  v7 = *(_BYTE *)(a3 + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    v12 = sub_10000D980((unint64_t *)((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0)), v10, a3, v6);
    if (v3)
      swift_willThrow(v12);
    else
      return v12;
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v11, -1);
    bzero(v13, v11);
    a2 = sub_10000D980((unint64_t *)v13, v10, a3, v6);
    swift_slowDealloc(v13, -1, -1);
  }
  return a2;
}

uint64_t sub_10000CF94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  Data.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10000CFF8(a1, a2, v5);
}

uint64_t sub_10000CFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

uint64_t sub_10000D980(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t);
  _QWORD *v38;
  int64_t v39;
  uint64_t v40;

  v37 = a4;
  v28 = a2;
  v29 = a1;
  v5 = type metadata accessor for DriverBinEntry(0);
  v36 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v34 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v35 - 8);
  result = __chkstk_darwin(v35);
  v33 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v38 = (_QWORD *)a3;
  v11 = *(_QWORD *)(a3 + 64);
  v30 = 0;
  v31 = a3 + 64;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v32 = (unint64_t)(v12 + 63) >> 6;
  v15 = (uint64_t)v34;
  while (v14)
  {
    v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v39 = v10;
    v17 = v16 | (v10 << 6);
LABEL_17:
    v22 = v35;
    v23 = v33;
    v24 = v38;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v33, v38[6] + *(_QWORD *)(v7 + 72) * v17, v35);
    sub_100012408(v24[7] + *(_QWORD *)(v36 + 72) * v17, v15, type metadata accessor for DriverBinEntry);
    v25 = v40;
    v26 = v37(v23, v15);
    v40 = v25;
    if (v25)
    {
      sub_100012490(v15, type metadata accessor for DriverBinEntry);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v23, v22);
    }
    v27 = v26;
    sub_100012490(v15, type metadata accessor for DriverBinEntry);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v23, v22);
    v10 = v39;
    if ((v27 & 1) != 0)
    {
      *(unint64_t *)((char *)v29 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = __OFADD__(v30++, 1);
      if (v18)
        goto LABEL_31;
    }
  }
  v18 = __OFADD__(v10, 1);
  v19 = v10 + 1;
  if (v18)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v19 >= v32)
    return sub_10000DC74(v29, v28, v30, v38);
  v20 = *(_QWORD *)(v31 + 8 * v19);
  if (v20)
  {
LABEL_16:
    v14 = (v20 - 1) & v20;
    v39 = v19;
    v17 = __clz(__rbit64(v20)) + (v19 << 6);
    goto LABEL_17;
  }
  v21 = v19 + 1;
  if (v19 + 1 >= v32)
    return sub_10000DC74(v29, v28, v30, v38);
  v20 = *(_QWORD *)(v31 + 8 * v21);
  if (v20)
    goto LABEL_15;
  v21 = v19 + 2;
  if (v19 + 2 >= v32)
    return sub_10000DC74(v29, v28, v30, v38);
  v20 = *(_QWORD *)(v31 + 8 * v21);
  if (v20)
    goto LABEL_15;
  v21 = v19 + 3;
  if (v19 + 3 >= v32)
    return sub_10000DC74(v29, v28, v30, v38);
  v20 = *(_QWORD *)(v31 + 8 * v21);
  if (v20)
  {
LABEL_15:
    v19 = v21;
    goto LABEL_16;
  }
  while (1)
  {
    v19 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v19 >= v32)
      return sub_10000DC74(v29, v28, v30, v38);
    v20 = *(_QWORD *)(v31 + 8 * v19);
    ++v21;
    if (v20)
      goto LABEL_16;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10000DC74(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  v8 = type metadata accessor for DriverBinEntry(0);
  v52 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v56 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v51 = (uint64_t)&v45 - v11;
  v12 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v55 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v49 = (char *)&v45 - v15;
  if (!a3)
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (uint64_t)a4;
  }
  sub_100005C88(&qword_100157F08);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v17 = result;
  v45 = a1;
  v46 = a2;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  v20 = result + 64;
  v47 = a4;
  v48 = result;
  v21 = v49;
  while (1)
  {
    if (v18)
    {
      v53 = (v18 - 1) & v18;
      v54 = v19;
      v22 = __clz(__rbit64(v18)) | (v19 << 6);
    }
    else
    {
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_40;
      if (v23 >= v46)
        return v17;
      v24 = v45[v23];
      v25 = v19 + 1;
      if (!v24)
      {
        v25 = v19 + 2;
        if (v19 + 2 >= v46)
          return v17;
        v24 = v45[v25];
        if (!v24)
        {
          v25 = v19 + 3;
          if (v19 + 3 >= v46)
            return v17;
          v24 = v45[v25];
          if (!v24)
          {
            v26 = v19 + 4;
            if (v19 + 4 >= v46)
              return v17;
            v24 = v45[v26];
            if (!v24)
            {
              while (1)
              {
                v25 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_41;
                if (v25 >= v46)
                  return v17;
                v24 = v45[v25];
                ++v26;
                if (v24)
                  goto LABEL_24;
              }
            }
            v25 = v19 + 4;
          }
        }
      }
LABEL_24:
      v53 = (v24 - 1) & v24;
      v54 = v25;
      v22 = __clz(__rbit64(v24)) + (v25 << 6);
    }
    v27 = v50;
    v28 = *(_QWORD *)(v50 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v21, a4[6] + v28 * v22, v12);
    v29 = a4[7];
    v30 = *(_QWORD *)(v52 + 72);
    v31 = v29 + v30 * v22;
    v32 = v51;
    sub_100012408(v31, v51, type metadata accessor for DriverBinEntry);
    v33 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v33(v55, v21, v12);
    sub_10001244C(v32, v56, type metadata accessor for DriverBinEntry);
    v17 = v48;
    v34 = *(_QWORD *)(v48 + 40);
    v35 = sub_100012534(&qword_100157F10, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v12, v35);
    v36 = -1 << *(_BYTE *)(v17 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v20 + 8 * (v37 >> 6))) != 0)
    {
      v39 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v20 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v42 = v38 == v41;
        if (v38 == v41)
          v38 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v20 + 8 * v38);
      }
      while (v43 == -1);
      v39 = __clz(__rbit64(~v43)) + (v38 << 6);
    }
    *(_QWORD *)(v20 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
    v33((char *)(*(_QWORD *)(v17 + 48) + v39 * v28), v55, v12);
    result = sub_10001244C(v56, *(_QWORD *)(v17 + 56) + v39 * v30, type metadata accessor for DriverBinEntry);
    ++*(_QWORD *)(v17 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v47;
    v18 = v53;
    v19 = v54;
    if (!a3)
      return v17;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10000E064(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100012534(&qword_100157E90, v12, (uint64_t)&protocol conformance descriptor for URL);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100012534(&qword_100157E98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_10000F32C((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_10000E2C0(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  _QWORD *v11;
  uint64_t __s1;

  v6 = *v3;
  Hasher.init(_seed:)(&__s1, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v6);
  Data.hash(into:)(&__s1, a2, a3);
  v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v6 + 32));
  if (((*(_QWORD *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  __s1 = *v11;
  *v11 = 0x8000000000000000;
  sub_1000122B4(a2, a3);
  sub_10000F530(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  v9 = *v11;
  *v11 = __s1;
  swift_bridgeObjectRelease(v9);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10000ECE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100157EA8);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v2;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v38)
      goto LABEL_35;
    v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_35;
      v21 = v39[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v7 + 48);
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v26(v6, v24 + v25 * v19, v4);
    v27 = *(_QWORD *)(v9 + 40);
    v28 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v23;
  }
  v22 = v20 + 3;
  if (v22 < v38)
  {
    v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v37;
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 > 63)
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

Swift::Int sub_10000F050(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_100157EE0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      Data.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_10000F32C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10000ECE4(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_10000FF6C();
      goto LABEL_12;
    }
    sub_100010340(v12);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100012534(&qword_100157E98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

Swift::Int sub_10000F530(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  Swift::Int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t __s1;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    v10 = v8 + 1;
    if ((a4 & 1) != 0)
    {
      sub_10000F050(v10);
    }
    else
    {
      if (v9 > v8)
      {
        result = (Swift::Int)sub_100010190();
        goto LABEL_10;
      }
      sub_100010668(v10);
    }
    v11 = *v4;
    Hasher.init(_seed:)(&__s1, *(_QWORD *)(*v4 + 40));
    Data.hash(into:)(&__s1, v7, a2);
    result = Hasher._finalize()();
    a3 = result & ~(-1 << *(_BYTE *)(v11 + 32));
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v12 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v13 = (Swift::Int *)(*(_QWORD *)(v12 + 48) + 16 * a3);
  *v13 = v7;
  v13[1] = a2;
  v14 = *(_QWORD *)(v12 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x10000FE90);
  }
  *(_QWORD *)(v12 + 16) = v16;
  return result;
}

void *sub_10000FF6C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005C88(&qword_100157EA8);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_100010190()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100005C88(&qword_100157EE0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_1000122B4(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100010340(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100157EA8);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_37:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v35 = v2;
  v36 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_35;
      v22 = *(_QWORD *)(v36 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v37)
          goto LABEL_35;
        v22 = *(_QWORD *)(v36 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v24 * v20, v4);
    v25 = *(_QWORD *)(v10 + 40);
    v26 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v18 * v24, v7, v4);
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_35:
    result = swift_release_n(v8, 2);
    v2 = v35;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v36 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_100010668(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_100157EE0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    sub_1000122B4(v22, v23);
    Data.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100010918(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 < 0 || 1 << *(_BYTE *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a6 + 36) == a4)
  {
    v9 = result;
    v10 = *(_QWORD *)(a6 + 48);
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a3, v11);
    v12 = *(_QWORD *)(a6 + 56);
    v13 = type metadata accessor for DriverBinEntry(0);
    return sub_100012408(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a3, a2, type metadata accessor for DriverBinEntry);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000109E8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100010A70(uint64_t a1, _QWORD *a2, void *a3)
{
  uint64_t v3;
  id v6;
  uint64_t v8;

  *(_QWORD *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = _swiftEmptyArrayStorage;
  sub_100005C44((uint64_t)a2, v3 + 16);
  *(_QWORD *)(v3 + 104) = a3;
  type metadata accessor for ExtensionManager();
  v6 = a3;
  sub_1000BC904((uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/KernelStateManager.swift", 102, 2, 36, (uint64_t)a2, 0xD000000000000025, 0x8000000100121E80, (void (*)(__n128))sub_100012574);
  sub_100005D08(a2);
  *(_QWORD *)(v3 + 56) = v8;
  return v3;
}

_QWORD *sub_100010B40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a1[2];
  v12 = a1[7];
  v2 = a1[9];
  v3 = a1[11];
  v4 = a1[13];
  v5 = a1[14];
  v6 = a1[15];
  v7 = a1[16];
  v8 = a1[17];
  v9 = a1[19];
  v10 = a1[21];
  v13 = a1[25];
  v14 = a1[5];
  v15 = a1[27];
  v16 = a1[3];
  v17 = a1[29];
  v18 = a1[30];
  swift_bridgeObjectRelease(a1[23]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t *sub_100010C68(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100010CE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t result;
  uint64_t v50;
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  os_log_t v94;
  uint64_t v95;
  uint64_t v96;
  os_log_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108[3];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v98 = a3;
  v102 = a2;
  v4 = sub_100005C88(&qword_100157EF0);
  __chkstk_darwin(v4);
  v96 = (uint64_t)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005C88(&qword_100157EF8);
  __chkstk_darwin(v6);
  v8 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = (os_log_t)sub_100005C88(&qword_100157F00);
  __chkstk_darwin(v97);
  v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for DriverBinEntry(0);
  v11 = __chkstk_darwin(v99);
  v95 = (uint64_t)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v101 = (uint64_t)&v95 - v13;
  v14 = type metadata accessor for Logger(0);
  v107 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v100 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v95 - v17;
  v19 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v19);
  v21 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v103 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = *a1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(v104 + 24) + 112))(v108, v24);
  v26 = v109;
  v106 = v14;
  if (!v109)
  {
    sub_1000124F8((uint64_t)v108, &qword_100157C78);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
    goto LABEL_6;
  }
  v27 = v110;
  sub_100004DE4(v108, v109);
  v28 = *(void (**)(uint64_t, uint64_t))(v27 + 64);
  v29 = v27;
  v14 = v106;
  v28(v26, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
  sub_100005D08(v108);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
LABEL_6:
    sub_1000124F8((uint64_t)v21, (uint64_t *)&unk_10015BA60);
    v36 = sub_1000D316C();
    v37 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v18, v36, v14);
    v38 = v104;
    v39 = swift_retain_n(v104, 2);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v108[0] = v43;
      *(_DWORD *)v42 = 136315138;
      v103 = (char *)(v42 + 4);
      v111 = *(_QWORD *)(v38 + 24);
      v44 = type metadata accessor for OSExtension(0);
      v45 = sub_100012534((unint64_t *)&qword_100157C90, type metadata accessor for OSExtension, (uint64_t)&unk_10011B468);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
      v48 = v47;
      v111 = sub_1000055A0(v46, v47, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v103, v42 + 12);
      swift_release_n(v38, 2);
      swift_bridgeObjectRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Omitting driver %s: does not have a bundle", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

      (*(void (**)(char *, uint64_t))(v107 + 8))(v18, v106);
    }
    else
    {

      swift_release_n(v38, 2);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v14);
    }
    return 0;
  }
  v30 = v22;
  v31 = (uint64_t)v103;
  v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v103, v21, v30);
  __chkstk_darwin(v32);
  *(&v95 - 2) = v31;
  v33 = v102;
  swift_bridgeObjectRetain(v102);
  v34 = sub_10000CE24((uint64_t)sub_1000124CC, (uint64_t)(&v95 - 4), v33);
  swift_bridgeObjectRelease(v33);
  sub_10000703C(v34, (uint64_t)v8);
  swift_release(v34);
  v35 = sub_100005C88((uint64_t *)&unk_10015ABF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v8, 1, v35) == 1)
  {
    sub_1000124F8((uint64_t)v8, &qword_100157EF8);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v31, v30);
    return 1;
  }
  v105 = v23;
  v102 = v30;
  v50 = (uint64_t)&v8[*(int *)(v35 + 48)];
  v51 = v97;
  v52 = (uint64_t)&v10[SLODWORD(v97[6].isa)];
  v53 = type metadata accessor for UUID(0);
  v54 = *(_QWORD *)(v53 - 8);
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v10, v8, v53);
  sub_10001244C(v50, v52, type metadata accessor for DriverBinEntry);
  v55 = v101;
  sub_10001244C((uint64_t)&v10[SLODWORD(v51[6].isa)], v101, type metadata accessor for DriverBinEntry);
  v56 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v10, v53);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 256))(v56);
  if (result)
  {
    v57 = result;
    v58 = (*(uint64_t (**)(void))(*(_QWORD *)result + 216))();
    swift_release(v57);
    v59 = *(int *)(v99 + 20);
    v60 = type metadata accessor for ApplicationRecord(0);
    v61 = v60;
    v62 = (uint64_t *)(v55 + v59 + *(int *)(v60 + 32));
    v63 = *v62;
    v64 = v62[1];
    v65 = v100;
    if (*(_QWORD *)(v58 + 16))
    {
      sub_1000122B4(v63, v64);
      v66 = sub_10000CF94(v63, v64);
      v68 = *(_QWORD *)(v61 - 8);
      v69 = v96;
      if ((v67 & 1) != 0)
      {
        sub_100012408(*(_QWORD *)(v58 + 56) + *(_QWORD *)(v68 + 72) * v66, v96, type metadata accessor for ApplicationRecord);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 56))(v69, 0, 1, v61);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v96, 1, 1, v61);
      }
    }
    else
    {
      v68 = *(_QWORD *)(v60 - 8);
      v69 = v96;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v96, 1, 1, v60);
      sub_1000122B4(v63, v64);
    }
    swift_bridgeObjectRelease(v58);
    sub_100011F40(v63, v64);
    v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v69, 1, v61);
    sub_1000124F8(v69, &qword_100157EF0);
    if (v70 != 1)
    {
      sub_100012490(v55, type metadata accessor for DriverBinEntry);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v102);
      return 1;
    }
    v71 = sub_1000D316C();
    v73 = v106;
    v72 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v65, v71, v106);
    v74 = v95;
    sub_100012408(v55, v95, type metadata accessor for DriverBinEntry);
    v75 = v104;
    v76 = swift_retain_n(v104, 2);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.default.getter();
    v79 = v78;
    if (os_log_type_enabled(v77, v78))
    {
      v80 = swift_slowAlloc(22, -1);
      v81 = swift_slowAlloc(64, -1);
      v108[0] = v81;
      *(_DWORD *)v80 = 136315394;
      v111 = *(_QWORD *)(v75 + 24);
      v82 = type metadata accessor for OSExtension(0);
      LODWORD(v98) = v79;
      v83 = v82;
      v84 = sub_100012534((unint64_t *)&qword_100157C90, type metadata accessor for OSExtension, (uint64_t)&unk_10011B468);
      v97 = v77;
      v85 = dispatch thunk of CustomStringConvertible.description.getter(v83, v84);
      v87 = v86;
      v111 = sub_1000055A0(v85, v86, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v80 + 4, v80 + 12);
      swift_release_n(v75, 2);
      swift_bridgeObjectRelease(v87);
      *(_WORD *)(v80 + 12) = 2080;
      v88 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v89 = v102;
      v90 = dispatch thunk of CustomStringConvertible.description.getter(v102, v88);
      v92 = v91;
      v111 = sub_1000055A0(v90, v91, v108);
      v93 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v80 + 14, v80 + 22);
      swift_bridgeObjectRelease(v92);
      sub_100012490(v74, type metadata accessor for DriverBinEntry);
      v94 = v97;
      _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v98, "Omitting third party driver %s at %s: app is not installed", (uint8_t *)v80, 0x16u);
      swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v80, -1, -1);

      (*(void (**)(char *, uint64_t))(v107 + 8))(v100, v106);
      sub_100012490(v101, type metadata accessor for DriverBinEntry);
    }
    else
    {

      sub_100012490(v74, type metadata accessor for DriverBinEntry);
      swift_release_n(v75, 2);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v65, v73);
      sub_100012490(v55, type metadata accessor for DriverBinEntry);
      v89 = v102;
      v93 = v103;
    }
    (*(void (**)(char *, uint64_t))(v105 + 8))(v93, v89);
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1000116E0(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v6 = a1;
  v23 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    v8 = 0;
    v9 = v6 & 0xC000000000000001;
    v20 = v6;
    v21 = v6 & 0xFFFFFFFFFFFFFF8;
    v19 = i;
    while (1)
    {
      if (v9)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_14:
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease(v6);
          swift_release(v10);
          swift_release(v23);
          return a3;
        }
        goto LABEL_9;
      }
      if (v8 >= *(_QWORD *)(v21 + 16))
        break;
      v10 = *(_QWORD *)(v6 + 8 * v8 + 32);
      swift_retain(v10);
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_14;
LABEL_9:
      v22 = v10;
      v12 = sub_100010CE4(&v22, a2, (uint64_t)a3);
      if (v3)
        goto LABEL_15;
      if ((v12 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v13 = v9;
        v14 = v23[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = v14;
        v9 = v13;
        v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v10);
        specialized ContiguousArray._endMutation()(v16);
        i = v19;
        v6 = v20;
      }
      else
      {
        swift_release(v10);
      }
      ++v8;
      if (v11 == i)
      {
        a3 = v23;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_18:
    if (v6 < 0)
      v17 = v6;
    else
      v17 = v6 & 0xFFFFFFFFFFFFFF8;
  }
  a3 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v6);
  return a3;
}

_QWORD *sub_100011894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t active;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  char v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v32[2];
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v5 = type metadata accessor for URL(0);
  v39 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  active = type metadata accessor for ActiveDriverInfo(0);
  v9 = __chkstk_darwin(active);
  v36 = (uint64_t)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v32 - v12;
  result = _swiftEmptyArrayStorage;
  v41 = _swiftEmptyArrayStorage;
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    v15 = 0;
    v16 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v37 = *(_QWORD *)(v11 + 72);
    v32[1] = v2;
    v33 = v16;
    v34 = a1 + v16;
    v40 = a2 + 56;
    v17 = a2;
    do
    {
      v38 = v15;
      sub_100012408(v34 + v37 * v15, (uint64_t)v13, type metadata accessor for ActiveDriverInfo);
      if (*(_QWORD *)(a2 + 16)
        && (v18 = *(_QWORD *)(v17 + 40),
            v19 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL), v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v5, v19), v21 = -1 << *(_BYTE *)(v17 + 32), v22 = v20 & ~v21, ((*(_QWORD *)(v40 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0))
      {
        v23 = v17;
        v24 = ~v21;
        v25 = *(_QWORD *)(v39 + 72);
        v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
        while (1)
        {
          v26(v7, *(_QWORD *)(v23 + 48) + v25 * v22, v5);
          v27 = sub_100012534(&qword_100157E98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v28 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v13, v5, v27);
          (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v5);
          if ((v28 & 1) != 0)
            break;
          v22 = (v22 + 1) & v24;
          v23 = v17;
          if (((*(_QWORD *)(v40 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
            goto LABEL_10;
        }
        sub_100012490((uint64_t)v13, type metadata accessor for ActiveDriverInfo);
      }
      else
      {
LABEL_10:
        sub_10001244C((uint64_t)v13, v36, type metadata accessor for ActiveDriverInfo);
        v29 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
        {
          sub_10000C920(0, v29[2] + 1, 1);
          v29 = v41;
        }
        v31 = v29[2];
        v30 = v29[3];
        if (v31 >= v30 >> 1)
        {
          sub_10000C920(v30 > 1, v31 + 1, 1);
          v29 = v41;
        }
        v29[2] = v31 + 1;
        sub_10001244C(v36, (uint64_t)v29 + v33 + v31 * v37, type metadata accessor for ActiveDriverInfo);
      }
      v15 = v38 + 1;
      a2 = v17;
    }
    while (v38 + 1 != v35);
    return v41;
  }
  return result;
}

uint64_t sub_100011BAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[2];
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_1000123C4();
  result = Set.init(minimumCapacity:)(v2, &type metadata for Data, v3);
  v9 = result;
  if (v2)
  {
    v5 = (unint64_t *)(a1 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      sub_1000122B4(v6, *v5);
      sub_10000E2C0(v8, v6, v7);
      sub_100011F40(v8[0], v8[1]);
      v5 += 2;
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

uint64_t sub_100011C44@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1000089C0(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD **)(v2 + 64), a2);
}

uint64_t sub_100011C68()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void (*active)(char *, uint64_t, uint64_t);

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
  if (result)
  {
    v2 = result;
    active = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ActiveDriversStateManager();
    sub_1000CDD6C(0xD000000000000010, (char *)0x8000000100121C90, active, (uint64_t)&off_100146760);
    return swift_release(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100011CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100011CDC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100011CE4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100011D28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v18 - v7;
  v9 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_10000E064((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1, 1, v2);
  }
  return v19;
}

uint64_t sub_100011EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100157C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100011F40(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t type metadata accessor for KernelStateManager()
{
  return objc_opt_self(_TtC10driverkitd18KernelStateManager);
}

uint64_t sub_100011FA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000120BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100005C88((uint64_t *)&unk_10015BA80);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000121C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000122B4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_1000122F8()
{
  unint64_t result;

  result = qword_10015BA50;
  if (!qword_10015BA50)
  {
    result = swift_getWitnessTable(&unk_1001148F8, &type metadata for KMError);
    atomic_store(result, (unint64_t *)&qword_10015BA50);
  }
  return result;
}

unint64_t sub_10001233C()
{
  unint64_t result;

  result = qword_100157EC0;
  if (!qword_100157EC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalState, &type metadata for ApprovalState);
    atomic_store(result, (unint64_t *)&qword_100157EC0);
  }
  return result;
}

unint64_t sub_100012380()
{
  unint64_t result;

  result = qword_100157ED0;
  if (!qword_100157ED0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalState, &type metadata for ApprovalState);
    atomic_store(result, (unint64_t *)&qword_100157ED0);
  }
  return result;
}

unint64_t sub_1000123C4()
{
  unint64_t result;

  result = qword_100157ED8;
  if (!qword_100157ED8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100157ED8);
  }
  return result;
}

uint64_t sub_100012408(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001244C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100012490(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000124CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100006E80(a1, a2, *(_QWORD *)(v2 + 16)) & 1;
}

uint64_t sub_1000124F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100005C88(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100012534(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100012574@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[5];
  _QWORD v14[5];
  _DWORD v15[148];

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD **)(v1 + 24);
  type metadata accessor for ExtensionManager();
  sub_100005C44(v5, (uint64_t)v14);
  sub_100005C44(v5, (uint64_t)v13 + 4);
  v6 = sub_100005C88(&qword_100157F18);
  v7 = swift_allocObject(v6, 60, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10010EE30;
  sub_1000126EC(v4);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)sub_1000A43F4();
  *(_DWORD *)(v7 + 36) = *sub_1000A4534();
  *(_DWORD *)(v7 + 40) = *sub_1000A4584();
  *(_DWORD *)(v7 + 44) = *(_DWORD *)sub_1000A47B4();
  *(_DWORD *)(v7 + 48) = *(_DWORD *)sub_1000A4854();
  *(_DWORD *)(v7 + 52) = *sub_1000A4804();
  *(_DWORD *)(v7 + 56) = *(_DWORD *)sub_1000A49B8();
  v12 = v7;
  v8 = sub_100012808();
  v9 = sub_100005C88(&qword_100157F20);
  v10 = sub_10001284C(&qword_100159D40, &qword_100157F20, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v13, &v12, v9, v10, &type metadata for ExtensionManager.Settings.Flags, v8);
  sub_100074C2C((_QWORD *)((char *)v13 + 4), (uint64_t)v4, v13[0], v15);
  result = sub_1000A5A10(v14, v15);
  if (!v2)
    *a1 = result;
  return result;
}

_QWORD *sub_1000126EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[13];
  v9 = a1[14];
  v10 = a1[15];
  v12 = a1[16];
  v13 = a1[17];
  v14 = a1[19];
  v15 = a1[21];
  v16 = a1[23];
  v17 = a1[25];
  v18 = a1[27];
  v19 = a1[29];
  swift_bridgeObjectRetain(a1[30]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  return a1;
}

unint64_t sub_100012808()
{
  unint64_t result;

  result = qword_100159D30;
  if (!qword_100159D30)
  {
    result = swift_getWitnessTable(&unk_100114210, &type metadata for ExtensionManager.Settings.Flags);
    atomic_store(result, (unint64_t *)&qword_100159D30);
  }
  return result;
}

uint64_t sub_10001284C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100011CE4(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100012890(uint64_t a1, uint64_t a2)
{
  return sub_100012F48(a1, a2, (SEL *)&selRef__overrideExecutablePath);
}

void sub_10001289C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100012FB4(a1, a2, a3, a4, (SEL *)&selRef__setOverrideExecutablePath_);
}

void (*sub_1000128A8(uint64_t **a1))(_QWORD *)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_1000128F4(v2);
  return sub_1000128F0;
}

void (*sub_1000128F4(uint64_t *a1))(uint64_t a1, char a2)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[2] = (uint64_t)v1;
  v3 = objc_msgSend(v1, "_overrideExecutablePath");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  return sub_100012968;
}

void sub_100012968(uint64_t a1, char a2)
{
  sub_1000130E0(a1, a2, (SEL *)&selRef__setOverrideExecutablePath_);
}

id sub_100012974()
{
  id *v0;

  return objc_msgSend(*v0, "executionOptions");
}

id sub_100012984(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, "setExecutionOptions:", a1);
}

id (*sub_100012998(_QWORD *a1))(uint64_t a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  a1[1] = *v1;
  *a1 = objc_msgSend(v3, "executionOptions");
  return sub_1000129D8;
}

id sub_1000129D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "setExecutionOptions:", *(_QWORD *)a1);
}

uint64_t sub_1000129EC()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "arguments");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);

  return v3;
}

void sub_100012A44(uint64_t a1)
{
  void **v1;
  void *v2;
  Class isa;

  v2 = *v1;
  if (a1)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    isa = 0;
  }
  objc_msgSend(v2, "setArguments:", isa);

}

void (*sub_100012AB0(uint64_t **a1))(_QWORD *)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_100012AF8(v2);
  return sub_1000128F0;
}

void (*sub_100012AF8(uint64_t *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;

  a1[1] = (uint64_t)v1;
  v3 = objc_msgSend(v1, "arguments");
  if (v3)
  {
    v4 = v3;
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for String);

  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  return sub_100012B6C;
}

void sub_100012B6C(uint64_t *a1, char a2)
{
  uint64_t v3;
  Class isa;

  v3 = *a1;
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      swift_bridgeObjectRetain(*a1);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v3);
    }
    else
    {
      isa = 0;
    }
    objc_msgSend((id)a1[1], "setArguments:", isa);
    swift_bridgeObjectRelease(v3);
  }
  else if (v3)
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
    objc_msgSend((id)a1[1], "setArguments:", isa);
  }
  else
  {
    isa = 0;
    objc_msgSend((id)a1[1], "setArguments:", 0);
  }

}

uint64_t sub_100012C24()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "_additionalEnvironment");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  return v3;
}

void sub_100012C90(uint64_t a1)
{
  void **v1;
  void *v2;
  Class isa;

  v2 = *v1;
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    isa = 0;
  }
  objc_msgSend(v2, "_setAdditionalEnvironment:", isa);

}

void (*sub_100012D10(uint64_t **a1))(_QWORD *)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_100012D58(v2);
  return sub_1000128F0;
}

void (*sub_100012D58(uint64_t *a1))(uint64_t *a1, char a2)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;

  a1[1] = (uint64_t)v1;
  v3 = objc_msgSend(v1, "_additionalEnvironment");
  if (v3)
  {
    v4 = v3;
    v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  return sub_100012DE0;
}

void sub_100012DE0(uint64_t *a1, char a2)
{
  uint64_t v3;
  Class isa;

  v3 = *a1;
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      swift_bridgeObjectRetain(*a1);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v3);
    }
    else
    {
      isa = 0;
    }
    objc_msgSend((id)a1[1], "_setAdditionalEnvironment:", isa);
    swift_bridgeObjectRelease(v3);
  }
  else if (v3)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
    objc_msgSend((id)a1[1], "_setAdditionalEnvironment:", isa);
  }
  else
  {
    isa = 0;
    objc_msgSend((id)a1[1], "_setAdditionalEnvironment:", 0);
  }

}

id sub_100012EC0()
{
  id *v0;

  return objc_msgSend(*v0, "dextCheckInPort");
}

id sub_100012ED0(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, "setDextCheckInPort:", a1);
}

id (*sub_100012EE4(uint64_t a1))(uint64_t a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  *(_QWORD *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = objc_msgSend(v3, "dextCheckInPort");
  return sub_100012F24;
}

id sub_100012F24(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, "setDextCheckInPort:", *(unsigned int *)(a1 + 8));
}

uint64_t sub_100012F3C(uint64_t a1, uint64_t a2)
{
  return sub_100012F48(a1, a2, (SEL *)&selRef_bundleIdentifier);
}

uint64_t sub_100012F48(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v4 = objc_msgSend(*v3, *a3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void sub_100012FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100012FB4(a1, a2, a3, a4, (SEL *)&selRef_setBundleIdentifier_);
}

void sub_100012FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void **v5;
  void *v7;
  NSString v9;

  v7 = *v5;
  if (a2)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v9 = 0;
  }
  objc_msgSend(v7, *a5, v9);

}

void (*sub_100013018(uint64_t **a1))(_QWORD *)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_100013060(v2);
  return sub_1000128F0;
}

void (*sub_100013060(uint64_t *a1))(uint64_t a1, char a2)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[2] = (uint64_t)v1;
  v3 = objc_msgSend(v1, "bundleIdentifier");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  return sub_1000130D4;
}

void sub_1000130D4(uint64_t a1, char a2)
{
  sub_1000130E0(a1, a2, (SEL *)&selRef_setBundleIdentifier_);
}

void sub_1000130E0(uint64_t a1, char a2, SEL *a3)
{
  uint64_t v5;
  NSString v6;

  v5 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    if (v5)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
      v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v5);
    }
    else
    {
      v6 = 0;
    }
    objc_msgSend(*(id *)(a1 + 16), *a3, v6);
    swift_bridgeObjectRelease(v5);
  }
  else if (v5)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    objc_msgSend(*(id *)(a1 + 16), *a3, v6);
  }
  else
  {
    v6 = 0;
    objc_msgSend(*(id *)(a1 + 16), *a3, 0);
  }

}

id sub_10001319C()
{
  return sub_1000131BC();
}

id sub_1000131BC()
{
  void *v0;
  unsigned int v1;
  id v2;
  id v4;
  id v5;

  v5 = 0;
  v1 = objc_msgSend(v0, "execute:", &v5);
  v2 = v5;
  if (v1)
    return v5;
  v4 = v5;
  _convertNSErrorToError(_:)(v2);

  return (id)swift_willThrow();
}

uint64_t sub_100013260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100157F28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t sub_1000132AC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_100157F28);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_100013318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_1000132AC(v10, v7, v8);
}

uint64_t sub_100013390@<X0>(_QWORD *a1@<X8>)
{
  void **v1;
  void *v3;
  NSString v4;
  NSString v5;
  NSString v6;
  id v7;
  uint64_t result;

  v3 = *v1;
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v3, "identityForDextWithServerName:tagString:containingAppBundleID:", v4, v5, v6);

  result = sub_100005D68(0, &qword_100157F30, RBSProcessIdentity_ptr);
  a1[3] = result;
  a1[4] = &off_100145EB8;
  *a1 = v7;
  return result;
}

uint64_t sub_100013464@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t result;
  _BYTE v8[40];
  void *v9;

  sub_100005C44(a1, (uint64_t)v8);
  v3 = sub_100005C88(&qword_100157F38);
  v4 = sub_100005D68(0, &qword_100157F30, RBSProcessIdentity_ptr);
  swift_dynamicCast(&v9, v8, v3, v4, 7);
  v5 = v9;
  v6 = objc_msgSend((id)objc_opt_self(RBSLaunchContext), "contextWithIdentity:", v9);

  result = sub_100005D68(0, &qword_100157F40, RBSLaunchContext_ptr);
  a2[3] = result;
  a2[4] = &off_100145EC0;
  *a2 = v6;
  return result;
}

uint64_t sub_100013540@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t result;
  _BYTE v8[40];
  void *v9;

  sub_100005C44(a1, (uint64_t)v8);
  v3 = sub_100005C88(&qword_100157F48);
  v4 = sub_100005D68(0, &qword_100157F40, RBSLaunchContext_ptr);
  swift_dynamicCast(&v9, v8, v3, v4, 7);
  v5 = v9;
  v6 = objc_msgSend(objc_allocWithZone((Class)RBSLaunchRequest), "initWithContext:", v9);

  result = sub_100005D68(0, &qword_100157F50, RBSLaunchRequest_ptr);
  a2[3] = result;
  a2[4] = &off_100145F58;
  *a2 = v6;
  return result;
}

uint64_t sub_100013614()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = sub_1000122F8();
  v1 = swift_allocError(&type metadata for KMError, v0, 0, 0);
  *(_QWORD *)v2 = 0xD00000000000004ELL;
  *(_QWORD *)(v2 + 8) = 0x8000000100121EB0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0;
  *(_BYTE *)(v2 + 72) = 50;
  return swift_willThrow(v1);
}

uint64_t sub_1000136B0(uint64_t a1)
{
  return sub_100013708(a1, 0xD000000000000031, 0x8000000100121F00);
}

uint64_t sub_1000136DC(uint64_t a1)
{
  return sub_100013708(a1, 0xD000000000000030, 0x8000000100121F40);
}

uint64_t sub_100013708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(0xE000000000000000);
  v5 = sub_1000122F8();
  v6 = swift_allocError(&type metadata for KMError, v5, 0, 0);
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_QWORD *)(v7 + 64) = 0;
  *(_BYTE *)(v7 + 72) = 50;
  return swift_willThrow(v6);
}

uint64_t sub_10001379C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t sub_1000137C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t sub_1000137EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t type metadata accessor for NullRunningBoardSupport()
{
  return objc_opt_self(_TtC10driverkitd23NullRunningBoardSupport);
}

uint64_t sub_100013834(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  sub_1000138B4(a1, a2);
  v3 = v2;
  v4 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v5 = sub_100013C48();
  v6 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v4, v5);
  swift_bridgeObjectRelease(v3);
  return v6;
}

void sub_1000138B4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_10001390C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = BYTE6(v24);
  if (BYTE6(v24))
  {
    *(_QWORD *)(v3 - 104) = v2;
    v5 = BYTE6(v24);
    v6 = sub_10000C958(0, BYTE6(v24), 0);
    v2 = *(_QWORD *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1)
        v7 = (int)a1;
      else
        v7 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(v3 - 136) = v24 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          if (v7 < (int)a1 || v7 >= a1 >> 32)
            goto LABEL_29;
          v8 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v8)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }
          v9 = v8;
          v10 = __DataStorage._offset.getter();
          v11 = v7 - v10;
          if (__OFSUB__(v7, v10))
            goto LABEL_32;
        }
        else
        {
          if (v7 < *(_QWORD *)(a1 + 16))
            goto LABEL_31;
          if (v7 >= *(_QWORD *)(a1 + 24))
            goto LABEL_33;
          v13 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v13)
            goto LABEL_36;
          v9 = v13;
          v14 = __DataStorage._offset.getter();
          v11 = v7 - v14;
          if (__OFSUB__(v7, v14))
            goto LABEL_34;
        }
        v12 = *(_BYTE *)(v9 + v11);
      }
      else
      {
        if (v7 >= BYTE6(v24))
          goto LABEL_30;
        *(_QWORD *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v24;
        *(_BYTE *)(v3 - 108) = BYTE2(v24);
        *(_BYTE *)(v3 - 107) = BYTE3(v24);
        *(_BYTE *)(v3 - 106) = BYTE4(v24);
        *(_BYTE *)(v3 - 105) = BYTE5(v24);
        v12 = *(_BYTE *)(v3 - 118 + v7);
      }
      v15 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v16 = swift_allocObject(v15, 72, 7);
      *(_OWORD *)(v16 + 16) = xmmword_10010F050;
      *(_QWORD *)(v16 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v16 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v16 + 32) = v12;
      v6 = String.init(format:_:)(2016555045, 0xE400000000000000, v16);
      v17 = v6;
      v19 = v18;
      *(_QWORD *)(v3 - 104) = v2;
      v21 = *(_QWORD *)(v2 + 16);
      v20 = *(_QWORD *)(v2 + 24);
      if (v21 >= v20 >> 1)
      {
        v6 = sub_10000C958(v20 > 1, v21 + 1, 1);
        v2 = *(_QWORD *)(v3 - 104);
      }
      *(_QWORD *)(v2 + 16) = v21 + 1;
      v22 = v2 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v17;
      *(_QWORD *)(v22 + 40) = v19;
      ++v7;
      --v5;
      --v4;
      v1 = *(_QWORD *)(v3 - 128);
      if (!v4)
        return v2;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x100013C20);
  }
  return v2;
}

unint64_t sub_100013C48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BA90;
  if (!qword_10015BA90)
  {
    v1 = sub_100011CE4((uint64_t *)&unk_10015A5D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015BA90);
  }
  return result;
}

uint64_t sub_100013C94(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = a2;
  result = swift_bridgeObjectRetain(a2);
  if ((v2 & 0x1000000000000000) != 0)
  {
    a1 = sub_100013FE8(a1, v2);
    v25 = v24;
    result = swift_bridgeObjectRelease(v2);
    v2 = v25;
    if ((v25 & 0x2000000000000000) == 0)
    {
LABEL_3:
      if ((a1 & 0x1000000000000000) != 0)
      {
        v5 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v6 = a1 & 0xFFFFFFFFFFFFLL;
        if ((a1 & 1) != 0)
          goto LABEL_62;
      }
      else
      {
        result = _StringObject.sharedUTF8.getter(a1, v2);
        v5 = result;
        v6 = v35;
        if ((v35 & 1) != 0)
          goto LABEL_62;
      }
      if (v6 >= 0)
        v7 = v6;
      else
        v7 = v6 + 1;
      if ((unint64_t)v6 >= 2)
      {
        v9 = v7 >> 1;
        if (v6 > 29)
        {
          v10 = type metadata accessor for __DataStorage(0);
          swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
          v11 = __DataStorage.init(length:)(v9);
          if ((unint64_t)v6 >= 0xFFFFFFFE)
          {
            v15 = type metadata accessor for Data.RangeReference(0);
            v12 = swift_allocObject(v15, 32, 7);
            *(_QWORD *)(v12 + 16) = 0;
            *(_QWORD *)(v12 + 24) = v9;
            v13 = 0x8000000000000000;
          }
          else
          {
            v12 = v9 << 32;
            v13 = 0x4000000000000000;
          }
          v38 = v12;
          v39 = v13 | v11;
          goto LABEL_19;
        }
        if (v6 < -1)
        {
          __break(1u);
          return result;
        }
        v8 = (unint64_t)(v7 >> 1) << 48;
      }
      else
      {
        v8 = 0xC000000000000000;
      }
      v38 = 0;
      v39 = v8;
      if (v6 <= 0)
      {
        v14 = 0;
        goto LABEL_63;
      }
LABEL_19:
      v16 = 0;
      while (1)
      {
        if (__OFADD__(v16, 2))
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16 + 2;
        v19 = *(unsigned __int8 *)(v5 + v16);
        if ((v19 - 58) >= 0xF6u)
        {
          v20 = 208;
        }
        else if ((v19 - 103) > 0xF9u)
        {
          v20 = 169;
        }
        else
        {
          if ((v19 - 71) < 0xFAu)
            goto LABEL_37;
          v20 = 201;
        }
        v21 = *(unsigned __int8 *)(v16 + v5 + 1);
        if ((v21 - 58) > 0xF5u)
        {
          v17 = 208;
        }
        else if ((v21 - 103) > 0xF9u)
        {
          v17 = 169;
        }
        else
        {
          if ((v21 - 71) < 0xFAu)
          {
LABEL_37:
            v22 = v38;
            v23 = v39;
            goto LABEL_61;
          }
          v17 = 201;
        }
        Data._Representation.subscript.setter((v17 + v21) | (16 * (v20 + v19)), v16 / 2);
        v16 = v18;
        if (v18 >= v6)
        {
          v14 = v38;
          goto LABEL_63;
        }
      }
    }
  }
  else if ((v2 & 0x2000000000000000) == 0)
  {
    goto LABEL_3;
  }
  v38 = a1;
  v39 = v2 & 0xFFFFFFFFFFFFFFLL;
  if ((v2 & 0x100000000000000) != 0)
    goto LABEL_62;
  v26 = HIBYTE(v2) & 0xF;
  v27 = sub_10001451C((unint64_t)v26 >> 1);
  v36 = v27;
  v37 = v28;
  if (!v26)
  {
    v14 = v27;
    goto LABEL_63;
  }
  v29 = 0;
  while (1)
  {
    v31 = __OFADD__(v29, 2) ? 0x7FFFFFFFFFFFFFFFLL : v29 + 2;
    v32 = *((unsigned __int8 *)&v38 + v29);
    if ((v32 - 58) >= 0xF6u)
    {
      v33 = 208;
    }
    else if ((v32 - 103) > 0xF9u)
    {
      v33 = 169;
    }
    else
    {
      if ((v32 - 71) < 0xFAu)
        goto LABEL_60;
      v33 = 201;
    }
    v34 = *((unsigned __int8 *)&v38 + v29 + 1);
    if ((v34 - 58) <= 0xF5u)
      break;
    v30 = 208;
LABEL_43:
    Data._Representation.subscript.setter((v34 + v30) | (16 * (v32 + v33)), v29 / 2);
    v29 = v31;
    if (v31 >= v26)
    {
      v14 = v36;
      goto LABEL_63;
    }
  }
  if ((v34 - 103) > 0xF9u)
  {
    v30 = 169;
    goto LABEL_43;
  }
  if ((v34 - 71) >= 0xFAu)
  {
    v30 = 201;
    goto LABEL_43;
  }
LABEL_60:
  v22 = v36;
  v23 = v37;
LABEL_61:
  sub_100011F40(v22, v23);
LABEL_62:
  v14 = 0;
LABEL_63:
  swift_bridgeObjectRelease(v2);
  return v14;
}

uint64_t sub_100013FE8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_100014064(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_100014064(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1000141A8(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100005A30(v12, 0);
      v5 = sub_100014294((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_1000141A8(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1000144A4(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1000144A4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_100014294(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1000144A4(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1000144A4(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1000144A4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_10001451C(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for TelemetryReportExtension(uint64_t a1)
{
  return sub_100017D70(a1, (uint64_t *)&unk_10015D100, (uint64_t)&nominal type descriptor for TelemetryReportExtension);
}

uint64_t sub_1000145CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100014604 + 4 * byte_10010F060[a1]))(0xD00000000000001ALL, 0x8000000100121FB0);
}

uint64_t sub_100014604(uint64_t a1)
{
  return a1 - 1;
}

uint64_t sub_1000146EC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100014724 + 4 * byte_10010F070[a1]))(0xD00000000000001ALL, 0x8000000100121FB0);
}

uint64_t sub_100014724(uint64_t a1)
{
  return a1 - 1;
}

uint64_t sub_10001480C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_1000145CC(*a1);
  v5 = v4;
  v6 = sub_1000145CC(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100014894()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_1000145CC(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000148F4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000145CC(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100014934(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_1000145CC(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100014990@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000173C0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000149BC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000145CC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000149E4()
{
  unsigned __int8 *v0;

  return sub_1000146EC(*v0);
}

unint64_t sub_1000149EC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000173C0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100014A10()
{
  return 0;
}

void sub_100014A1C(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_100014A28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017B60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100014A50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100017B60();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100014A78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[5];
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;

  v72[2] = a2;
  v72[3] = a3;
  v6 = sub_100005C88(&qword_100158008);
  __chkstk_darwin(v6);
  v8 = (char *)v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 144);
  v15 = swift_retain(v13);
  v16 = v14(v15);
  v18 = v17;
  swift_release(v13);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v18;
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 184);
  v21 = swift_retain(v19);
  v22 = v20(v21);
  v24 = v23;
  v25 = swift_release(v19);
  *(_QWORD *)(a4 + 16) = v22;
  *(_QWORD *)(a4 + 24) = v24;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(a1 + 24) + 112))(v73, v25);
  v26 = v74;
  if (v74)
  {
    v27 = v75;
    sub_100004DE4(v73, v74);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 64))(v26, v27);
    v29 = URL.lastPathComponent.getter(v28);
    v26 = v30;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v31 = sub_100005D08(v73);
  }
  else
  {
    v31 = sub_1000124F8((uint64_t)v73, &qword_100157C78);
    v29 = 0;
  }
  *(_QWORD *)(a4 + 32) = v29;
  *(_QWORD *)(a4 + 40) = v26;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(a1 + 24) + 112))(v73, v31);
  v32 = v74;
  if (v74)
  {
    v33 = v75;
    sub_100004DE4(v73, v74);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 64))(v32, v33);
    v35 = URL.path.getter(v34);
    v32 = v36;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v37 = sub_100005D08(v73);
  }
  else
  {
    v37 = sub_1000124F8((uint64_t)v73, &qword_100157C78);
    v35 = 0;
  }
  *(_QWORD *)(a4 + 48) = v35;
  *(_QWORD *)(a4 + 56) = v32;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(a1 + 24) + 112))(v73, v37);
  v38 = v74;
  if (v74)
  {
    v39 = v75;
    sub_100004DE4(v73, v74);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 56))(v38, v39);
    v38 = v41;
    sub_100005D08(v73);
  }
  else
  {
    sub_1000124F8((uint64_t)v73, &qword_100157C78);
    v40 = 0;
  }
  *(_QWORD *)(a4 + 64) = v40;
  *(_QWORD *)(a4 + 72) = v38;
  v42 = *(_QWORD *)(a1 + 24);
  v43 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 216);
  v44 = swift_retain(v42);
  v45 = v43(v44);
  swift_release(v42);
  *(_BYTE *)(a4 + 80) = v45 & 1;
  sub_100019E1C(a1 + 32, (uint64_t)v73, &qword_100158010);
  v46 = v74;
  v72[1] = v10;
  if (v74)
  {
    v47 = v75;
    sub_100004DE4(v73, v74);
    v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 32))(v46, v47);
    v50 = v49;
    v51 = sub_1000DBB8C();
    v46 = v52;
    sub_100011F40(v48, v50);
    sub_100005D08(v73);
  }
  else
  {
    sub_1000124F8((uint64_t)v73, &qword_100158010);
    v51 = 0;
  }
  *(_QWORD *)(a4 + 88) = v51;
  *(_QWORD *)(a4 + 96) = v46;
  sub_100019E1C(a1 + 32, (uint64_t)v73, &qword_100158010);
  v53 = v74;
  if (v74)
  {
    v54 = v75;
    sub_100004DE4(v73, v74);
    v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 24))(v53, v54);
    v57 = v56;
    v58 = sub_1000DB168(v55, v56);
    v53 = v59;
    sub_100017450(v55, v57);
    sub_100005D08(v73);
  }
  else
  {
    sub_1000124F8((uint64_t)v73, &qword_100158010);
    v58 = 0;
  }
  *(_QWORD *)(a4 + 104) = v58;
  *(_QWORD *)(a4 + 112) = v53;
  sub_100019E1C(a1 + 32, (uint64_t)v73, &qword_100158010);
  v60 = v74;
  if (v74)
  {
    v61 = v75;
    sub_100004DE4(v73, v74);
    v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 48))(v60, v61);
    v60 = v63;
    sub_100005D08(v73);
  }
  else
  {
    sub_1000124F8((uint64_t)v73, &qword_100158010);
    v62 = 0;
  }
  *(_QWORD *)(a4 + 120) = v62;
  *(_QWORD *)(a4 + 128) = v60;
  sub_100019E1C(a1 + 32, (uint64_t)v73, &qword_100158010);
  v64 = v74;
  if (v74)
  {
    v65 = v75;
    sub_100004DE4(v73, v74);
    v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 56))(v64, v65);
    v64 = v67;
    sub_100005D08(v73);
  }
  else
  {
    sub_1000124F8((uint64_t)v73, &qword_100158010);
    v66 = 0;
  }
  *(_QWORD *)(a4 + 136) = v66;
  *(_QWORD *)(a4 + 144) = v64;
  sub_100019E1C(a1 + 32, (uint64_t)v73, &qword_100158010);
  v68 = v74;
  if (v74)
  {
    v69 = v75;
    sub_100004DE4(v73, v74);
    (*(void (**)(uint64_t, uint64_t))(v69 + 64))(v68, v69);
    sub_100005D08(v73);
  }
  else
  {
    sub_1000124F8((uint64_t)v73, &qword_100158010);
    v70 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v8, 1, 1, v70);
  }
  v71 = type metadata accessor for TelemetryReportExtension(0);
  sub_100017408((uint64_t)v8, a4 + *(int *)(v71 + 56));
  __asm { BR              X10 }
}

uint64_t sub_100014FBC()
{
  uint64_t v0;
  _QWORD **v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t *v31;

  v7 = (_QWORD *)(v0 + v4[15]);
  *v7 = 0;
  v7[1] = 0;
  v8 = *(uint64_t *)((char *)v1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches);
  if (v8)
  {
    *(_BYTE *)(v0 + v4[16]) = *(_QWORD *)(v8 + 16) > 1uLL;
    *(_QWORD *)(v6 - 120) = v8;
    swift_bridgeObjectRetain(v8);
    v9 = sub_100005C88((uint64_t *)&unk_10015A5D0);
    v10 = sub_100013C48();
    v11 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t, unint64_t))BidirectionalCollection<>.joined(separator:))(32, 0xE100000000000000, v9, v10);
    v13 = v12;
    swift_bridgeObjectRelease(v8);
    v14 = (uint64_t *)(v0 + v4[17]);
    *v14 = v11;
    v14[1] = v13;
  }
  else
  {
    *(_BYTE *)(v0 + v4[16]) = 2;
    v15 = (_QWORD *)(v0 + v4[17]);
    *v15 = 0;
    v15[1] = 0;
  }
  v16 = *(_QWORD *)(v6 - 136);
  v17 = (uint64_t *)sub_10008F358();
  v18 = *v17;
  v19 = v17[1];
  v20 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*v1)[39];
  swift_bridgeObjectRetain(v19);
  v20(v5, v16, v18, v19);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v19);
  if (*(_QWORD *)(v6 - 96))
  {
    v21 = sub_100005C88((uint64_t *)&unk_10015BA80);
    v22 = swift_dynamicCast(v6 - 128, v6 - 120, (char *)&type metadata for Any + 8, v21, 6);
    if ((v22 & 1) != 0)
    {
      v23 = *(_QWORD *)(v6 - 128);
      if (*(_QWORD *)(v23 + 16) >= 2uLL)
      {
        v24 = sub_1000172DC(*(_QWORD *)(v6 - 128));
        v22 = swift_bridgeObjectRelease(v23);
        goto LABEL_11;
      }
      v22 = swift_bridgeObjectRelease(*(_QWORD *)(v6 - 128));
    }
  }
  else
  {
    v22 = sub_1000124F8(v6 - 120, &qword_100158018);
  }
  v24 = 0;
LABEL_11:
  *(_QWORD *)(v0 + v4[18]) = v24;
  (*(void (**)(uint64_t))(*v1[3] + 112))(v22);
  v25 = *(_QWORD *)(v6 - 96);
  if (v25)
  {
    v26 = *(_QWORD *)(v6 - 88);
    sub_100004DE4((_QWORD *)(v6 - 120), *(_QWORD *)(v6 - 96));
    v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 64))(v25, v26);
    v28 = ((uint64_t (*)(uint64_t))URL.path.getter)(v27);
    v25 = v29;
    swift_release(v1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 152) + 8))(v3, v2);
    result = sub_100005D08((_QWORD *)(v6 - 120));
  }
  else
  {
    swift_release(v1);
    result = sub_1000124F8(v6 - 120, &qword_100157C78);
    v28 = 0;
  }
  v31 = (uint64_t *)(v0 + v4[19]);
  *v31 = v28;
  v31[1] = v25;
  return result;
}

unint64_t sub_100015290()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int *v40;
  _QWORD *v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v56;
  unint64_t v57;
  _OWORD v58[2];
  __int128 v59;
  void *v60;

  v1 = v0;
  v2 = sub_100005C88(&qword_100158008);
  __chkstk_darwin(v2);
  v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000159E8((uint64_t)_swiftEmptyArrayStorage);
  v10 = *v1;
  v11 = v1[1];
  v60 = &type metadata for String;
  *(_QWORD *)&v59 = v10;
  *((_QWORD *)&v59 + 1) = v11;
  sub_100017464(&v59, v58);
  swift_bridgeObjectRetain(v11);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  v57 = v9;
  sub_100016D64(v58, 0xD00000000000001ALL, 0x8000000100121FB0, isUniquelyReferenced_nonNull_native);
  v13 = v57;
  swift_bridgeObjectRelease(0x8000000000000000);
  v14 = v1[3];
  if (v14)
  {
    v15 = v1[2];
    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v15;
    *((_QWORD *)&v59 + 1) = v14;
    sub_100017464(&v59, v58);
    swift_bridgeObjectRetain(v14);
    v16 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD000000000000019, 0x8000000100121FD0, v16);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v17 = v1[5];
  if (v17)
  {
    v18 = v1[4];
    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v18;
    *((_QWORD *)&v59 + 1) = v17;
    sub_100017464(&v59, v58);
    swift_bridgeObjectRetain(v17);
    v19 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD00000000000001ALL, 0x8000000100121FF0, v19);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v20 = v1[7];
  if (v20)
  {
    v21 = v1[6];
    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v21;
    *((_QWORD *)&v59 + 1) = v20;
    sub_100017464(&v59, v58);
    swift_bridgeObjectRetain(v20);
    v22 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD00000000000001ALL, 0x8000000100122010, v22);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v23 = v1[9];
  if (v23)
  {
    v24 = v1[8];
    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v24;
    *((_QWORD *)&v59 + 1) = v23;
    sub_100017464(&v59, v58);
    swift_bridgeObjectRetain(v23);
    v25 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD00000000000001ELL, 0x8000000100122030, v25);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v26 = *((unsigned __int8 *)v1 + 80);
  if (v26 != 2)
  {
    v60 = &type metadata for Bool;
    LOBYTE(v59) = v26 & 1;
    sub_100017464(&v59, v58);
    v27 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD00000000000001ALL, 0x8000000100122050, v27);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v28 = v1[12];
  if (v28)
  {
    v29 = v1[11];
    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v29;
    *((_QWORD *)&v59 + 1) = v28;
    sub_100017464(&v59, v58);
    swift_bridgeObjectRetain(v28);
    v30 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD000000000000016, 0x8000000100122070, v30);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v31 = v1[14];
  if (v31)
  {
    v32 = v1[13];
    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v32;
    *((_QWORD *)&v59 + 1) = v31;
    sub_100017464(&v59, v58);
    swift_bridgeObjectRetain(v31);
    v33 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD000000000000018, 0x8000000100122090, v33);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v34 = v1[16];
  if (v34)
  {
    v35 = v1[15];
    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v35;
    *((_QWORD *)&v59 + 1) = v34;
    sub_100017464(&v59, v58);
    swift_bridgeObjectRetain(v34);
    v36 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD00000000000001BLL, 0x80000001001220B0, v36);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v37 = v1[18];
  if (v37)
  {
    v38 = v1[17];
    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v38;
    *((_QWORD *)&v59 + 1) = v37;
    sub_100017464(&v59, v58);
    swift_bridgeObjectRetain(v37);
    v39 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD00000000000001ALL, 0x80000001001220D0, v39);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v40 = (int *)type metadata accessor for TelemetryReportExtension(0);
  sub_100019E1C((uint64_t)v1 + v40[14], (uint64_t)v4, &qword_100158008);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000124F8((uint64_t)v4, &qword_100158008);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v60 = (void *)v5;
    v41 = sub_100005BE0(&v59);
    (*(void (**)(_QWORD *, char *, uint64_t))(v6 + 16))(v41, v8, v5);
    sub_100017464(&v59, v58);
    v42 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD00000000000001DLL, 0x80000001001220F0, v42);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v43 = (uint64_t *)((char *)v1 + v40[15]);
  v44 = v43[1];
  if (v44)
  {
    v45 = *v43;
    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v45;
    *((_QWORD *)&v59 + 1) = v44;
    sub_100017464(&v59, v58);
    swift_bridgeObjectRetain(v44);
    v46 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD00000000000001FLL, 0x8000000100122110, v46);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v47 = *((unsigned __int8 *)v1 + v40[16]);
  if (v47 != 2)
  {
    v60 = &type metadata for Bool;
    LOBYTE(v59) = v47 & 1;
    sub_100017464(&v59, v58);
    v48 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD000000000000015, 0x8000000100122130, v48);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v49 = (uint64_t *)((char *)v1 + v40[17]);
  v50 = v49[1];
  if (v50)
  {
    v51 = *v49;
    v60 = &type metadata for String;
    *(_QWORD *)&v59 = v51;
    *((_QWORD *)&v59 + 1) = v50;
    sub_100017464(&v59, v58);
    swift_bridgeObjectRetain(v50);
    v52 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD00000000000001ELL, 0x8000000100122150, v52);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v53 = *(uint64_t *)((char *)v1 + v40[18]);
  if (v53)
  {
    v60 = (void *)sub_100005C88((uint64_t *)&unk_10015A5D0);
    *(_QWORD *)&v59 = v53;
    sub_100017464(&v59, v58);
    swift_bridgeObjectRetain(v53);
    v54 = swift_isUniquelyReferenced_nonNull_native(v13);
    v57 = v13;
    sub_100016D64(v58, 0xD000000000000022, 0x8000000100122170, v54);
    v13 = v57;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  return v13;
}

unint64_t sub_1000159E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_100158248);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100019E1C(v7, (uint64_t)&v16, (uint64_t *)&unk_100159E70);
    v8 = v16;
    v9 = v17;
    result = sub_100005DE8(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100017464(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100015B20(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;

  v3 = v1;
  v5 = sub_100005C88(&qword_100158020);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_100017B60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TelemetryReportExtension.CodingKeys, &type metadata for TelemetryReportExtension.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v49) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v49, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v49) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v49, v5);
    v16 = v3[4];
    v17 = v3[5];
    LOBYTE(v49) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v49, v5);
    v18 = v3[6];
    v19 = v3[7];
    LOBYTE(v49) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v49, v5);
    v20 = v3[8];
    v21 = v3[9];
    LOBYTE(v49) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v49, v5);
    v22 = *((unsigned __int8 *)v3 + 80);
    LOBYTE(v49) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, &v49, v5);
    v23 = v3[11];
    v24 = v3[12];
    LOBYTE(v49) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v49, v5);
    v25 = v3[13];
    v26 = v3[14];
    LOBYTE(v49) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v49, v5);
    v27 = v3[15];
    v28 = v3[16];
    LOBYTE(v49) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v49, v5);
    v29 = v3[17];
    v30 = v3[18];
    LOBYTE(v49) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v49, v5);
    v31 = (int *)type metadata accessor for TelemetryReportExtension(0);
    v32 = (uint64_t)v3 + v31[14];
    LOBYTE(v49) = 10;
    v33 = type metadata accessor for Date(0);
    v34 = sub_100019DDC(&qword_100158030, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, &v49, v5, v33, v34);
    v35 = (uint64_t *)((char *)v3 + v31[15]);
    v36 = *v35;
    v37 = v35[1];
    LOBYTE(v49) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v49, v5);
    v38 = *((unsigned __int8 *)v3 + v31[16]);
    LOBYTE(v49) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, &v49, v5);
    v39 = (uint64_t *)((char *)v3 + v31[17]);
    v40 = *v39;
    v41 = v39[1];
    LOBYTE(v49) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v40, v41, &v49, v5);
    v49 = *(uint64_t *)((char *)v3 + v31[18]);
    HIBYTE(v48) = 14;
    v42 = sub_100005C88((uint64_t *)&unk_10015A5D0);
    v43 = sub_100017BA4(&qword_100158038, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v49, (char *)&v48 + 7, v5, v42, v43);
    v44 = (uint64_t *)((char *)v3 + v31[19]);
    v45 = *v44;
    v46 = v44[1];
    LOBYTE(v49) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, v46, &v49, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100015EFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int *v48;
  _QWORD *v49;
  char v50;
  uint64_t v51;

  v5 = sub_100005C88(&qword_100158008);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100005C88(&qword_100158040);
  v8 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = (int *)type metadata accessor for TelemetryReportExtension(0);
  __chkstk_darwin(v48);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v49 = a1;
  sub_100004DE4(a1, v14);
  v15 = sub_100017B60();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TelemetryReportExtension.CodingKeys, &type metadata for TelemetryReportExtension.CodingKeys, v15, v14, v13);
  if (v2)
    return sub_100005D08(v49);
  v45 = a2;
  v46 = v7;
  v16 = v8;
  LOBYTE(v51) = 0;
  v17 = v47;
  *(_QWORD *)v12 = KeyedDecodingContainer.decode(_:forKey:)(&v51, v47);
  *((_QWORD *)v12 + 1) = v18;
  LOBYTE(v51) = 1;
  *((_QWORD *)v12 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((_QWORD *)v12 + 3) = v19;
  LOBYTE(v51) = 2;
  *((_QWORD *)v12 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((_QWORD *)v12 + 5) = v20;
  LOBYTE(v51) = 3;
  *((_QWORD *)v12 + 6) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((_QWORD *)v12 + 7) = v21;
  LOBYTE(v51) = 4;
  *((_QWORD *)v12 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((_QWORD *)v12 + 9) = v22;
  LOBYTE(v51) = 5;
  v12[80] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  LOBYTE(v51) = 6;
  *((_QWORD *)v12 + 11) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((_QWORD *)v12 + 12) = v23;
  LOBYTE(v51) = 7;
  *((_QWORD *)v12 + 13) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((_QWORD *)v12 + 14) = v24;
  LOBYTE(v51) = 8;
  *((_QWORD *)v12 + 15) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((_QWORD *)v12 + 16) = v25;
  LOBYTE(v51) = 9;
  *((_QWORD *)v12 + 17) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v17);
  *((_QWORD *)v12 + 18) = v26;
  v27 = type metadata accessor for Date(0);
  LOBYTE(v51) = 10;
  v28 = sub_100019DDC(&qword_100158048, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v51, v47, v27, v28);
  sub_100017408((uint64_t)v46, (uint64_t)&v12[v48[14]]);
  LOBYTE(v51) = 11;
  v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v47);
  v30 = (uint64_t *)&v12[v48[15]];
  *v30 = v29;
  v30[1] = v31;
  LOBYTE(v51) = 12;
  v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v47);
  v33 = v47;
  v12[v48[16]] = v32;
  LOBYTE(v51) = 13;
  v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v33);
  v35 = (uint64_t *)&v12[v48[17]];
  *v35 = v34;
  v35[1] = v36;
  v37 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v50 = 14;
  v38 = sub_100017BA4((unint64_t *)&qword_100158050, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, &v50, v47, v37, v38);
  v39 = v47;
  *(_QWORD *)&v12[v48[18]] = v51;
  LOBYTE(v51) = 15;
  v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v39);
  v42 = v41;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v47);
  v43 = (uint64_t *)&v12[v48[19]];
  *v43 = v40;
  v43[1] = v42;
  sub_100017C04((uint64_t)v12, v45);
  sub_100005D08(v49);
  return sub_100017C48((uint64_t)v12);
}

uint64_t sub_100016694@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100015EFC(a1, a2);
}

uint64_t sub_1000166A8(_QWORD *a1)
{
  return sub_100015B20(a1);
}

uint64_t ApprovalSettingsStateEntry.usageText.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

unint64_t sub_1000166EC()
{
  uint64_t *v0;

  return sub_100017C84(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_1000166FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 20));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_100016734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  void (*v13)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v14;
  _QWORD v16[5];

  v16[3] = &type metadata for DriverInstallEvent;
  v16[4] = &off_100146170;
  v12 = (_QWORD *)swift_allocObject(&unk_100146158, 64, 7);
  v16[0] = v12;
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  v12[5] = a4;
  v12[6] = 0xD00000000000001ELL;
  v12[7] = 0x8000000100122260;
  v13 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(a6 + 8);
  swift_bridgeObjectRetain(a2);
  v14 = swift_bridgeObjectRetain(a4);
  v13(v16, a5, a6, v14);
  return sub_100005D08(v16);
}

uint64_t sub_100016800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100016890(a1, a2, a3, a4, a5, type metadata accessor for DriverApprovalEvent, (uint64_t)&off_100146188, 0xD00000000000001FLL, 0x8000000100122280);
}

uint64_t sub_100016848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100016890(a1, a2, a3, a4, a5, type metadata accessor for DriverLaunchEvent, (uint64_t)&off_1001461A0, 0xD00000000000001DLL, 0x80000001001222A0);
}

uint64_t sub_100016890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  _QWORD v24[5];

  v23 = a4;
  v16 = type metadata accessor for TelemetryReportExtension(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v24[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a1);
  swift_bridgeObjectRetain(a3);
  sub_100014A78(a1, a2, a3, (uint64_t)v18);
  v19 = a6(0);
  v24[3] = v19;
  v24[4] = a7;
  v20 = sub_100005BE0(v24);
  sub_100017C04((uint64_t)v18, (uint64_t)v20);
  v21 = (_QWORD *)((char *)v20 + *(int *)(v19 + 20));
  *v21 = a8;
  v21[1] = a9;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a5 + 8))(v24, v23, a5);
  sub_100017C48((uint64_t)v18);
  return sub_100005D08(v24);
}

uint64_t sub_1000169A4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_100016A68(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100158248);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_100017464(v25, v38);
      }
      else
      {
        sub_100005D28((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_100017464(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

_OWORD *sub_100016D64(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100005DE8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_100005D08(v19);
        return sub_100017464(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100016EFC();
      goto LABEL_7;
    }
    sub_100016A68(v15, a4 & 1);
    v21 = sub_100005DE8(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100016E94(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_100016E94(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100017464(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void *sub_100016EFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100005C88(&qword_100158248);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_100005D28(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_100017464(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000170E0(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_1000172DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100005C88((uint64_t *)&unk_100159E60);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1000170E0((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100005DE0(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

unint64_t sub_1000173C0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100145FA8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0x10)
    return 16;
  else
    return v3;
}

uint64_t sub_100017408(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100158008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100017450(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease(a2);
  return result;
}

_OWORD *sub_100017464(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

BOOL sub_100017474(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BOOL8 result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  char v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  int v79;
  int v80;
  _BOOL4 v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005C88(&qword_100158238);
  __chkstk_darwin(v8);
  v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005C88(&qword_100158008);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v96 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v96 - v18;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v20 == v21
    || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)a1, v20, *(_QWORD *)a2, v21, 0),
        result = 0,
        (v22 & 1) != 0))
  {
    v24 = *(_QWORD *)(a1 + 24);
    v25 = *(_QWORD *)(a2 + 24);
    if (v24)
    {
      if (!v25)
        return 0;
      v26 = *(_QWORD *)(a1 + 16);
      v27 = *(_QWORD *)(a2 + 16);
      if (v26 != v27 || v24 != v25)
      {
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v24, v27, v25, 0);
        result = 0;
        if ((v28 & 1) == 0)
          return result;
      }
    }
    else if (v25)
    {
      return 0;
    }
    v29 = *(_QWORD *)(a1 + 40);
    v30 = *(_QWORD *)(a2 + 40);
    if (v29)
    {
      if (!v30)
        return 0;
      v31 = *(_QWORD *)(a1 + 32);
      v32 = *(_QWORD *)(a2 + 32);
      if (v31 != v32 || v29 != v30)
      {
        v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v29, v32, v30, 0);
        result = 0;
        if ((v33 & 1) == 0)
          return result;
      }
    }
    else if (v30)
    {
      return 0;
    }
    v34 = *(_QWORD *)(a1 + 56);
    v35 = *(_QWORD *)(a2 + 56);
    if (v34)
    {
      if (!v35)
        return 0;
      v36 = *(_QWORD *)(a1 + 48);
      v37 = *(_QWORD *)(a2 + 48);
      if (v36 != v37 || v34 != v35)
      {
        v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v34, v37, v35, 0);
        result = 0;
        if ((v38 & 1) == 0)
          return result;
      }
    }
    else if (v35)
    {
      return 0;
    }
    v39 = *(_QWORD *)(a1 + 72);
    v40 = *(_QWORD *)(a2 + 72);
    if (v39)
    {
      if (!v40)
        return 0;
      v41 = *(_QWORD *)(a1 + 64);
      v42 = *(_QWORD *)(a2 + 64);
      if (v41 != v42 || v39 != v40)
      {
        v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v39, v42, v40, 0);
        result = 0;
        if ((v43 & 1) == 0)
          return result;
      }
    }
    else if (v40)
    {
      return 0;
    }
    v44 = *(unsigned __int8 *)(a1 + 80);
    v45 = *(unsigned __int8 *)(a2 + 80);
    if (v44 == 2)
    {
      if (v45 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v46 = (v44 & 1) == 0;
      if (v45 == 2 || ((v46 ^ v45) & 1) == 0)
        return result;
    }
    v47 = *(_QWORD *)(a1 + 96);
    v48 = *(_QWORD *)(a2 + 96);
    if (v47)
    {
      if (!v48)
        return 0;
      v49 = *(_QWORD *)(a1 + 88);
      v50 = *(_QWORD *)(a2 + 88);
      if (v49 != v50 || v47 != v48)
      {
        v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v47, v50, v48, 0);
        result = 0;
        if ((v51 & 1) == 0)
          return result;
      }
    }
    else if (v48)
    {
      return 0;
    }
    v52 = *(_QWORD *)(a1 + 112);
    v53 = *(_QWORD *)(a2 + 112);
    if (v52)
    {
      if (!v53)
        return 0;
      v54 = *(_QWORD *)(a1 + 104);
      v55 = *(_QWORD *)(a2 + 104);
      if (v54 != v55 || v52 != v53)
      {
        v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v52, v55, v53, 0);
        result = 0;
        if ((v56 & 1) == 0)
          return result;
      }
    }
    else if (v53)
    {
      return 0;
    }
    v57 = *(_QWORD *)(a1 + 128);
    v58 = *(_QWORD *)(a2 + 128);
    if (v57)
    {
      if (!v58)
        return 0;
      v59 = *(_QWORD *)(a1 + 120);
      v60 = *(_QWORD *)(a2 + 120);
      if (v59 != v60 || v57 != v58)
      {
        v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v57, v60, v58, 0);
        result = 0;
        if ((v61 & 1) == 0)
          return result;
      }
    }
    else if (v58)
    {
      return 0;
    }
    v62 = *(_QWORD *)(a1 + 144);
    v63 = *(_QWORD *)(a2 + 144);
    if (v62)
    {
      if (!v63)
        return 0;
      v64 = *(_QWORD *)(a1 + 136);
      v65 = *(_QWORD *)(a2 + 136);
      if (v64 != v65 || v62 != v63)
      {
        v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v62, v65, v63, 0);
        result = 0;
        if ((v66 & 1) == 0)
          return result;
      }
    }
    else if (v63)
    {
      return 0;
    }
    v97 = (int *)type metadata accessor for TelemetryReportExtension(0);
    sub_100019E1C(a1 + v97[14], (uint64_t)v19, &qword_100158008);
    sub_100019E1C(a2 + v97[14], (uint64_t)v17, &qword_100158008);
    v67 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_100019E1C((uint64_t)v19, (uint64_t)v10, &qword_100158008);
    v96 = v67;
    sub_100019E1C((uint64_t)v17, v67, &qword_100158008);
    v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v68((uint64_t)v10, 1, v4) == 1)
    {
      sub_1000124F8((uint64_t)v17, &qword_100158008);
      sub_1000124F8((uint64_t)v19, &qword_100158008);
      if (v68(v96, 1, v4) == 1)
      {
        sub_1000124F8((uint64_t)v10, &qword_100158008);
LABEL_72:
        v72 = v97[15];
        v73 = (_QWORD *)(a1 + v72);
        v74 = *(_QWORD *)(a1 + v72 + 8);
        v75 = (_QWORD *)(a2 + v72);
        v76 = v75[1];
        if (v74)
        {
          if (!v76)
            return 0;
          if (*v73 != *v75 || v74 != v76)
          {
            v77 = _stringCompareWithSmolCheck(_:_:expecting:)(*v73, v74, *v75, v76, 0);
            result = 0;
            if ((v77 & 1) == 0)
              return result;
          }
        }
        else if (v76)
        {
          return 0;
        }
        v78 = v97[16];
        v79 = *(unsigned __int8 *)(a1 + v78);
        v80 = *(unsigned __int8 *)(a2 + v78);
        if (v79 == 2)
        {
          if (v80 != 2)
            return 0;
        }
        else
        {
          result = 0;
          v81 = (v79 & 1) == 0;
          if (v80 == 2 || ((v81 ^ v80) & 1) == 0)
            return result;
        }
        v82 = v97[17];
        v83 = (_QWORD *)(a1 + v82);
        v84 = *(_QWORD *)(a1 + v82 + 8);
        v85 = (_QWORD *)(a2 + v82);
        v86 = v85[1];
        if (v84)
        {
          if (!v86)
            return 0;
          if (*v83 != *v85 || v84 != v86)
          {
            v87 = _stringCompareWithSmolCheck(_:_:expecting:)(*v83, v84, *v85, v86, 0);
            result = 0;
            if ((v87 & 1) == 0)
              return result;
          }
        }
        else if (v86)
        {
          return 0;
        }
        v88 = v97[18];
        v89 = *(_QWORD **)(a1 + v88);
        v90 = *(_QWORD **)(a2 + v88);
        if (v89)
        {
          if (!v90 || (sub_1000169A4(v89, v90) & 1) == 0)
            return 0;
        }
        else if (v90)
        {
          return 0;
        }
        v91 = v97[19];
        v92 = (_QWORD *)(a1 + v91);
        v93 = *(_QWORD *)(a1 + v91 + 8);
        v94 = (_QWORD *)(a2 + v91);
        v95 = v94[1];
        if (v93)
          return v95
              && (*v92 == *v94 && v93 == v95
               || (_stringCompareWithSmolCheck(_:_:expecting:)(*v92, v93, *v94, v95, 0) & 1) != 0);
        return !v95;
      }
    }
    else
    {
      sub_100019E1C((uint64_t)v10, (uint64_t)v14, &qword_100158008);
      if (v68(v96, 1, v4) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v96, v4);
        v69 = sub_100019DDC(&qword_100158240, (uint64_t)&protocol conformance descriptor for Date);
        v70 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v69);
        v71 = *(void (**)(char *, uint64_t))(v5 + 8);
        v71(v7, v4);
        sub_1000124F8((uint64_t)v17, &qword_100158008);
        sub_1000124F8((uint64_t)v19, &qword_100158008);
        v71(v14, v4);
        sub_1000124F8((uint64_t)v10, &qword_100158008);
        if ((v70 & 1) == 0)
          return 0;
        goto LABEL_72;
      }
      sub_1000124F8((uint64_t)v17, &qword_100158008);
      sub_1000124F8((uint64_t)v19, &qword_100158008);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    }
    sub_1000124F8((uint64_t)v10, &qword_100158238);
    return 0;
  }
  return result;
}

unint64_t sub_100017B60()
{
  unint64_t result;

  result = qword_100158028;
  if (!qword_100158028)
  {
    result = swift_getWitnessTable(&unk_10010F130, &type metadata for TelemetryReportExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100158028);
  }
  return result;
}

uint64_t sub_100017BA4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100011CE4((uint64_t *)&unk_10015A5D0);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100017C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TelemetryReportExtension(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100017C48(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TelemetryReportExtension(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100017C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t inited;
  uint64_t v11;

  v8 = sub_100005C88(&qword_100158230);
  inited = swift_initStackObject(v8, &v11);
  *(_OWORD *)(inited + 16) = xmmword_10010F380;
  *(_QWORD *)(inited + 32) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 40) = 0x8000000100121FB0;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = a2;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 88) = 0x8000000100122010;
  *(_QWORD *)(inited + 96) = a3;
  *(_QWORD *)(inited + 104) = a4;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  return sub_1000159E8(inited);
}

uint64_t type metadata accessor for DriverApprovalEvent(uint64_t a1)
{
  return sub_100017D70(a1, (uint64_t *)&unk_10015D110, (uint64_t)&nominal type descriptor for DriverApprovalEvent);
}

uint64_t type metadata accessor for DriverLaunchEvent(uint64_t a1)
{
  return sub_100017D70(a1, (uint64_t *)&unk_10015D120, (uint64_t)&nominal type descriptor for DriverLaunchEvent);
}

uint64_t sub_100017D70(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100017DA4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

unint64_t sub_100017DDC()
{
  unint64_t result;

  result = qword_100158058;
  if (!qword_100158058)
  {
    result = swift_getWitnessTable(&unk_10010F090, &type metadata for TelemetryReportExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100158058);
  }
  return result;
}

unint64_t sub_100017E24()
{
  unint64_t result;

  result = qword_100158060;
  if (!qword_100158060)
  {
    result = swift_getWitnessTable(&unk_10010F1A8, &type metadata for TelemetryReportExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100158060);
  }
  return result;
}

unint64_t sub_100017E6C()
{
  unint64_t result;

  result = qword_100158068;
  if (!qword_100158068)
  {
    result = swift_getWitnessTable(&unk_10010F180, &type metadata for TelemetryReportExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100158068);
  }
  return result;
}

_QWORD *sub_100017EB0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  unsigned int (*v36)(const void *, uint64_t, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v39 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v39;
    v38 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v38;
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v8;
    v37 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v37;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v9 = a2[12];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v9;
    v10 = a2[14];
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = v10;
    v11 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v11;
    v12 = a2[18];
    v13 = a3[14];
    __dst = (void *)(a1 + v13);
    v35 = (char *)a2 + v13;
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = v12;
    v14 = type metadata accessor for Date(0);
    v34 = *(_QWORD *)(v14 - 8);
    v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v34 + 48);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    v15 = swift_bridgeObjectRetain(v12);
    if (v36(v35, 1, v14, v15))
    {
      v16 = sub_100005C88(&qword_100158008);
      memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v34 + 16))(__dst, v35, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v14);
    }
    v18 = a3[15];
    v19 = a3[16];
    v20 = (_QWORD *)((char *)v4 + v18);
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    *((_BYTE *)v4 + v19) = *((_BYTE *)a2 + v19);
    v23 = a3[17];
    v24 = a3[18];
    v25 = (_QWORD *)((char *)v4 + v23);
    v26 = (uint64_t *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = *(uint64_t *)((char *)a2 + v24);
    *(_QWORD *)((char *)v4 + v24) = v28;
    v29 = a3[19];
    v30 = (_QWORD *)((char *)v4 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v32);
  }
  return v4;
}

uint64_t sub_1000180DC(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[18]);
  v4 = (char *)a1 + a2[14];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[15] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[18]));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[19] + 8));
}

uint64_t sub_1000181CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  const void *v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t, __n128);
  uint64_t v35;
  uint64_t v36;
  void *__dst;

  v36 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v36;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v35 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v35;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  v11 = *(_QWORD *)(a2 + 144);
  v12 = a3[14];
  __dst = (void *)(a1 + v12);
  v33 = (const void *)(a2 + v12);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  v13 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v13 - 8);
  v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v32 + 48);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  v14 = swift_bridgeObjectRetain(v11);
  if (v34(v33, 1, v13, v14))
  {
    v15 = sub_100005C88(&qword_100158008);
    memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(__dst, v33, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v13);
  }
  v16 = a3[15];
  v17 = a3[16];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v21 = a3[17];
  v22 = a3[18];
  v23 = (_QWORD *)(a1 + v21);
  v24 = (_QWORD *)(a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v26;
  v27 = a3[19];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t sub_1000183C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a3[14];
  v25 = (void *)(a1 + v24);
  v26 = (void *)(a2 + v24);
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 24))(v25, v26, v27);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_6;
  }
  if (v31)
  {
LABEL_6:
    v32 = sub_100005C88(&qword_100158008);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v25, v26, v27);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_7:
  v33 = a3[15];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  *v34 = *v35;
  v36 = v35[1];
  v37 = v34[1];
  v34[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  v38 = a3[17];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  *v39 = *v40;
  v41 = v40[1];
  v42 = v39[1];
  v39[1] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  v43 = a3[18];
  v44 = *(_QWORD *)(a1 + v43);
  v45 = *(_QWORD *)(a2 + v43);
  *(_QWORD *)(a1 + v43) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v44);
  v46 = a3[19];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (_QWORD *)(a2 + v46);
  *v47 = *v48;
  v49 = v48[1];
  v50 = v47[1];
  v47[1] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  return a1;
}

uint64_t sub_1000186AC(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v8 = a3[14];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100005C88(&qword_100158008);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v15 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  return a1;
}

uint64_t sub_1000187E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = a3[14];
  v25 = (void *)(a1 + v24);
  v26 = (void *)(a2 + v24);
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v25, v26, v27);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_6;
  }
  if (v31)
  {
LABEL_6:
    v32 = sub_100005C88(&qword_100158008);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v25, v26, v27);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_7:
  v33 = a3[15];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (uint64_t *)(a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  v38 = v34[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease(v38);
  v39 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  v40 = (_QWORD *)(a1 + v39);
  v41 = (uint64_t *)(a2 + v39);
  v43 = *v41;
  v42 = v41[1];
  v44 = v40[1];
  *v40 = v43;
  v40[1] = v42;
  swift_bridgeObjectRelease(v44);
  v45 = a3[18];
  v46 = *(_QWORD *)(a1 + v45);
  *(_QWORD *)(a1 + v45) = *(_QWORD *)(a2 + v45);
  swift_bridgeObjectRelease(v46);
  v47 = a3[19];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (uint64_t *)(a2 + v47);
  v51 = *v49;
  v50 = v49[1];
  v52 = v48[1];
  *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease(v52);
  return a1;
}

uint64_t sub_1000189FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100018A08);
}

uint64_t sub_100018A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100005C88(&qword_100158008);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 56), a2, v8);
  }
}

uint64_t sub_100018A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100018A94);
}

uint64_t sub_100018A94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100005C88(&qword_100158008);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 56), a2, a2, v7);
  }
  return result;
}

void sub_100018B0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[16];

  v4[0] = &unk_10010F2A0;
  v4[1] = &unk_10010F2B8;
  v4[2] = &unk_10010F2B8;
  v4[3] = &unk_10010F2B8;
  v4[4] = &unk_10010F2B8;
  v4[5] = &unk_10010F2D0;
  v4[6] = &unk_10010F2B8;
  v4[7] = &unk_10010F2B8;
  v4[8] = &unk_10010F2B8;
  v4[9] = &unk_10010F2B8;
  sub_100018BB8(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(v2 - 8) + 64;
    v4[11] = &unk_10010F2B8;
    v4[12] = &unk_10010F2D0;
    v4[13] = &unk_10010F2B8;
    v4[14] = &unk_10010F2E8;
    v4[15] = &unk_10010F2B8;
    swift_initStructMetadata(a1, 256, 16, v4, a1 + 16);
  }
}

void sub_100018BB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001580C8)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001580C8);
  }
}

uint64_t getEnumTagSinglePayload for TelemetryReportExtension.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TelemetryReportExtension.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_100018CE8 + 4 * byte_10010F08B[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_100018D1C + 4 * byte_10010F086[v4]))();
}

uint64_t sub_100018D1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018D24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100018D2CLL);
  return result;
}

uint64_t sub_100018D38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100018D40);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_100018D44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018D4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100018D58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TelemetryReportExtension.CodingKeys()
{
  return &type metadata for TelemetryReportExtension.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for KernelManagementConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for DriverInstallEvent(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for DriverInstallEvent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for DriverInstallEvent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for DriverInstallEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for DriverInstallEvent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverInstallEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverInstallEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverInstallEvent()
{
  return &type metadata for DriverInstallEvent;
}

uint64_t sub_100018FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100018FE0);
}

uint64_t sub_100018FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100018FF0);
}

_QWORD *sub_100018FF8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t, __n128);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v42 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v42;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v41 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v41;
    v40 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v40;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v8 = a2[12];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v8;
    v9 = a2[14];
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = v9;
    v10 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v10;
    v11 = a2[18];
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = v11;
    v12 = (int *)type metadata accessor for TelemetryReportExtension(0);
    v13 = v12[14];
    __dst = (char *)v4 + v13;
    v38 = (char *)a2 + v13;
    v14 = type metadata accessor for Date(0);
    v37 = *(_QWORD *)(v14 - 8);
    v39 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v37 + 48);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v15 = swift_bridgeObjectRetain(v11);
    if (v39(v38, 1, v14, v15))
    {
      v16 = sub_100005C88(&qword_100158008);
      memcpy(__dst, v38, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(__dst, v38, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v14);
    }
    v18 = v12[15];
    v19 = (_QWORD *)((char *)v4 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *((_BYTE *)v4 + v12[16]) = *((_BYTE *)a2 + v12[16]);
    v22 = v12[17];
    v23 = (_QWORD *)((char *)v4 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = v12[18];
    v27 = *(uint64_t *)((char *)a2 + v26);
    *(_QWORD *)((char *)v4 + v26) = v27;
    v28 = v12[19];
    v29 = (_QWORD *)((char *)v4 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = *(int *)(a3 + 20);
    v33 = (_QWORD *)((char *)v4 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v35);
  }
  return v4;
}

uint64_t sub_100019258(_QWORD *a1, uint64_t a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[18]);
  v4 = (int *)type metadata accessor for TelemetryReportExtension(0);
  v5 = (char *)a1 + v4[14];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[15] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[18]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v4[19] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100019364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  const void *v36;
  unsigned int (*v37)(const void *, uint64_t, uint64_t, __n128);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__dst;

  v40 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v40;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v39 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v39;
  v38 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v38;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  v11 = (int *)type metadata accessor for TelemetryReportExtension(0);
  v12 = v11[14];
  __dst = (void *)(a1 + v12);
  v36 = (const void *)(a2 + v12);
  v13 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v13 - 8);
  v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v35 + 48);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v14 = swift_bridgeObjectRetain(v10);
  if (v37(v36, 1, v13, v14))
  {
    v15 = sub_100005C88(&qword_100158008);
    memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(__dst, v36, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v13);
  }
  v16 = v11[15];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *(_BYTE *)(a1 + v11[16]) = *(_BYTE *)(a2 + v11[16]);
  v20 = v11[17];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = v11[18];
  v25 = *(_QWORD *)(a2 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  v26 = v11[19];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = *(int *)(a3 + 20);
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v33);
  return a1;
}

uint64_t sub_100019598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = (int *)type metadata accessor for TelemetryReportExtension(0);
  v25 = v24[14];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 24))(v26, v27, v28);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v26, v28);
    goto LABEL_6;
  }
  if (v32)
  {
LABEL_6:
    v33 = sub_100005C88(&qword_100158008);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v29 + 16))(v26, v27, v28);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_7:
  v34 = v24[15];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v37 = v36[1];
  v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  *(_BYTE *)(a1 + v24[16]) = *(_BYTE *)(a2 + v24[16]);
  v39 = v24[17];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = v24[18];
  v45 = *(_QWORD *)(a1 + v44);
  v46 = *(_QWORD *)(a2 + v44);
  *(_QWORD *)(a1 + v44) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v45);
  v47 = v24[19];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (_QWORD *)(a2 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  v52 = *(int *)(a3 + 20);
  v53 = (_QWORD *)(a1 + v52);
  v54 = (_QWORD *)(a2 + v52);
  *v53 = *v54;
  v55 = v54[1];
  v56 = v53[1];
  v53[1] = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  return a1;
}

uint64_t sub_1000198B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v8 = (int *)type metadata accessor for TelemetryReportExtension(0);
  v9 = v8[14];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_100005C88(&qword_100158008);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_OWORD *)(a1 + v8[15]) = *(_OWORD *)(a2 + v8[15]);
  *(_BYTE *)(a1 + v8[16]) = *(_BYTE *)(a2 + v8[16]);
  *(_OWORD *)(a1 + v8[17]) = *(_OWORD *)(a2 + v8[17]);
  *(_QWORD *)(a1 + v8[18]) = *(_QWORD *)(a2 + v8[18]);
  *(_OWORD *)(a1 + v8[19]) = *(_OWORD *)(a2 + v8[19]);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100019A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = (int *)type metadata accessor for TelemetryReportExtension(0);
  v25 = v24[14];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 40))(v26, v27, v28);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v26, v28);
    goto LABEL_6;
  }
  if (v32)
  {
LABEL_6:
    v33 = sub_100005C88(&qword_100158008);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v29 + 32))(v26, v27, v28);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_7:
  v34 = v24[15];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v38 = *v36;
  v37 = v36[1];
  v39 = v35[1];
  *v35 = v38;
  v35[1] = v37;
  swift_bridgeObjectRelease(v39);
  *(_BYTE *)(a1 + v24[16]) = *(_BYTE *)(a2 + v24[16]);
  v40 = v24[17];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  v44 = *v42;
  v43 = v42[1];
  v45 = v41[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease(v45);
  v46 = v24[18];
  v47 = *(_QWORD *)(a1 + v46);
  *(_QWORD *)(a1 + v46) = *(_QWORD *)(a2 + v46);
  swift_bridgeObjectRelease(v47);
  v48 = v24[19];
  v49 = (_QWORD *)(a1 + v48);
  v50 = (uint64_t *)(a2 + v48);
  v52 = *v50;
  v51 = v50[1];
  v53 = v49[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease(v53);
  v54 = *(int *)(a3 + 20);
  v55 = (_QWORD *)(a1 + v54);
  v56 = (uint64_t *)(a2 + v54);
  v58 = *v56;
  v57 = v56[1];
  v59 = v55[1];
  *v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease(v59);
  return a1;
}

uint64_t sub_100019C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100019C5C);
}

uint64_t sub_100019C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for TelemetryReportExtension(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100019CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100019CEC);
}

uint64_t sub_100019CF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for TelemetryReportExtension(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100019D6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for TelemetryReportExtension(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10010F2A0;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100019DDC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100019E1C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005C88(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ApplicationRecord(uint64_t a1)
{
  return sub_100017D70(a1, (uint64_t *)&unk_10015D4D0, (uint64_t)&nominal type descriptor for ApplicationRecord);
}

uint64_t sub_100019E78(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100019EB0 + 4 * byte_10010F390[a1]))(0xD000000000000010, 0x80000001001225A0);
}

uint64_t sub_100019EB0()
{
  return 7107189;
}

uint64_t sub_100019EC0(uint64_t a1)
{
  return a1 + 4;
}

BOOL sub_100019EF8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100019F0C()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100019F50()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100019F78(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100019FB8()
{
  unsigned __int8 *v0;

  return sub_100019E78(*v0);
}

uint64_t sub_100019FC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100020F00(a1, a2);
  *a3 = result;
  return result;
}

void sub_100019FE4(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100019FF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001A6F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001A018(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001A6F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001A040()
{
  uint64_t *v0;
  Swift::String v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  Swift::String v25;
  uint64_t v27;

  v27 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  v1._countAndFlagsBits = 10;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2 = (int *)type metadata accessor for ApplicationRecord(0);
  v3 = type metadata accessor for URL(0);
  v4 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 10;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x3A4C525520202020;
  v8._object = (void *)0xE900000000000020;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(0xE900000000000020);
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9._object = (void *)0x80000001001222E0;
  v9._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v9);
  v10 = v2[6];
  v11 = *(uint64_t *)((char *)v0 + v10);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain(*(uint64_t *)((char *)v0 + v10));
    v13 = (_QWORD *)(v11 + 40);
    do
    {
      v14 = *(v13 - 1);
      v15 = (void *)*v13;
      swift_bridgeObjectRetain(*v13);
      v16._countAndFlagsBits = v14;
      v16._object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(v15);
      v17._countAndFlagsBits = 10;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      v18._countAndFlagsBits = 0x2020202020202020;
      v18._object = (void *)0xE800000000000000;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(0xE800000000000000);
      v13 += 2;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease(v11);
  }
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(0xE000000000000000);
  v19._countAndFlagsBits = sub_100013834(*(uint64_t *)((char *)v0 + v2[7]), *(uint64_t *)((char *)v0 + v2[7] + 8));
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v21._countAndFlagsBits = 10;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0xD000000000000020;
  v22._object = (void *)0x8000000100122300;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(0x8000000100122300);
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(0xE000000000000000);
  v23._countAndFlagsBits = sub_100013834(*(uint64_t *)((char *)v0 + v2[8]), *(uint64_t *)((char *)v0 + v2[8] + 8));
  v24 = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v24);
  v25._countAndFlagsBits = 0xD000000000000017;
  v25._object = (void *)0x8000000100122330;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(0x8000000100122330);
  return v27;
}

uint64_t sub_10001A308()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  uint64_t v19;

  _StringGuts.grow(_:)(24);
  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  swift_bridgeObjectRelease(0xE000000000000000);
  v19 = v1;
  v2._countAndFlagsBits = 2108704;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  v3 = type metadata accessor for ApplicationRecord(0);
  v4 = type metadata accessor for URL(0);
  v5 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 10272;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9 = (uint64_t *)((char *)v0 + *(int *)(v3 + 28));
  v10 = *v9;
  v11 = v9[1];
  sub_1000122B4(*v9, v11);
  v12._countAndFlagsBits = Data.description.getter(v10, v11);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  sub_100011F40(v10, v11);
  v14._countAndFlagsBits = 2112041;
  v14._object = (void *)0xE300000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  v17._countAndFlagsBits = 0x7372657669726420;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  return v19;
}

uint64_t sub_10001A4B0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v22;
  char v23;

  v3 = v1;
  v5 = sub_100005C88(&qword_100158250);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_10001A6F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ApplicationRecord.CodingKeys, &type metadata for ApplicationRecord.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v22) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for ApplicationRecord(0);
    v15 = (char *)v3 + v14[5];
    LOBYTE(v22) = 1;
    v16 = type metadata accessor for URL(0);
    v17 = sub_100012534(&qword_100158258, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v22, v5, v16, v17);
    *(_QWORD *)&v22 = *(uint64_t *)((char *)v3 + v14[6]);
    v23 = 2;
    v18 = sub_100005C88((uint64_t *)&unk_10015A5D0);
    v19 = sub_100017BA4(&qword_100158038, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, v18, v19);
    v22 = *(_OWORD *)((char *)v3 + v14[7]);
    v23 = 3;
    v20 = sub_10001A73C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for Data, v20);
    v22 = *(_OWORD *)((char *)v3 + v14[8]);
    v23 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for Data, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10001A6F8()
{
  unint64_t result;

  result = qword_10015D130;
  if (!qword_10015D130)
  {
    result = swift_getWitnessTable(&unk_10010F7D4, &type metadata for ApplicationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015D130);
  }
  return result;
}

unint64_t sub_10001A73C()
{
  unint64_t result;

  result = qword_100158260;
  if (!qword_100158260)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100158260);
  }
  return result;
}

uint64_t sub_10001A780@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  __int128 v34;
  char v35;

  v28 = a2;
  v3 = type metadata accessor for URL(0);
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100005C88(&qword_100158268);
  v6 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for ApplicationRecord(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_100004DE4(a1, v13);
  v14 = sub_10001A6F8();
  v32 = v8;
  v15 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ApplicationRecord.CodingKeys, &type metadata for ApplicationRecord.CodingKeys, v14, v13, v12);
  if (v15)
    return sub_100005D08(a1);
  v27 = v6;
  v33 = a1;
  v17 = v29;
  v16 = v30;
  LOBYTE(v34) = 0;
  v18 = v31;
  v19 = (uint64_t)v11;
  *(_QWORD *)v11 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v31);
  *((_QWORD *)v11 + 1) = v20;
  LOBYTE(v34) = 1;
  v21 = sub_100012534(&qword_100158270, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v34, v18, v16, v21);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v11[v9[5]], v5, v16);
  v22 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v35 = 2;
  v23 = sub_100017BA4((unint64_t *)&qword_100158050, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, &v35, v18, v22, v23);
  v26 = 0;
  *(_QWORD *)&v11[v9[6]] = v34;
  v35 = 3;
  v24 = sub_10001AB98();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v35, v18, &type metadata for Data, v24);
  *(_OWORD *)(v19 + v9[7]) = v34;
  v35 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v35, v18, &type metadata for Data, v24);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v18);
  *(_OWORD *)(v19 + v9[8]) = v34;
  sub_10001ABDC(v19, v28);
  sub_100005D08(v33);
  return sub_10001AC20(v19);
}

unint64_t sub_10001AB98()
{
  unint64_t result;

  result = qword_100158278;
  if (!qword_100158278)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100158278);
  }
  return result;
}

uint64_t sub_10001ABDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ApplicationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001AC20(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ApplicationRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001AC5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001A780(a1, a2);
}

uint64_t sub_10001AC70(_QWORD *a1)
{
  return sub_10001A4B0(a1);
}

uint64_t sub_10001AC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = (*(uint64_t (**)(void))(a2 + 8))();
  if (!v7)
  {
    v19 = sub_1000122F8();
    v15 = swift_allocError(&type metadata for KMError, v19, 0, 0);
    *(_QWORD *)v16 = 0xD000000000000028;
    *(_QWORD *)(v16 + 8) = 0x8000000100122350;
LABEL_8:
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_QWORD *)(v16 + 64) = 0;
    *(_BYTE *)(v16 + 72) = 10;
    return swift_willThrow(v15);
  }
  v8 = v6;
  v9 = v7;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  if (!v10)
  {
    swift_bridgeObjectRelease(v9);
    v20 = sub_1000122F8();
    v15 = swift_allocError(&type metadata for KMError, v20, 0, 0);
    v17 = "Application record is missing driver extension paths";
    v18 = 0xD000000000000034;
    goto LABEL_7;
  }
  v11 = v10;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (v13 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v9);
    v14 = sub_1000122F8();
    v15 = swift_allocError(&type metadata for KMError, v14, 0, 0);
    v17 = "Application record is missing install session identifier";
    v18 = 0xD000000000000038;
LABEL_7:
    *(_QWORD *)v16 = v18;
    *(_QWORD *)(v16 + 8) = (unint64_t)(v17 - 32) | 0x8000000000000000;
    goto LABEL_8;
  }
  v22 = v13;
  v35 = v12;
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  if (v24 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v9);
    v25 = sub_1000122F8();
    v26 = swift_allocError(&type metadata for KMError, v25, 0, 0);
    *(_QWORD *)v27 = 0xD000000000000037;
    *(_QWORD *)(v27 + 8) = 0x8000000100122400;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_QWORD *)(v27 + 64) = 0;
    *(_BYTE *)(v27 + 72) = 10;
    swift_willThrow(v26);
    return sub_100021610(v35, v22);
  }
  else
  {
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
    v33 = v24;
    v34 = v23;
    v32 = v22;
    v28 = (int *)type metadata accessor for ApplicationRecord(0);
    result = v31(a1, a2);
    *a3 = v8;
    a3[1] = v9;
    *(uint64_t *)((char *)a3 + v28[6]) = v11;
    v29 = (uint64_t *)((char *)a3 + v28[7]);
    *v29 = v35;
    v29[1] = v32;
    v30 = (uint64_t *)((char *)a3 + v28[8]);
    *v30 = v34;
    v30[1] = v33;
  }
  return result;
}

uint64_t sub_10001AF1C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 64, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
}

uint64_t sub_10001AF50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 64, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10001AF94()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 72, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 72));
}

uint64_t sub_10001AFC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 72, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = a1;
  return swift_release(v3);
}

void *sub_10001B00C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 72, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_10001B048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 88);
  }
  else
  {
    v2 = sub_10001B64C();
    v3 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 88) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease(v3);
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_10001B0A0()
{
  uint64_t v0;
  int v1;
  char v2;

  v1 = *(unsigned __int8 *)(v0 + 96);
  if (v1 == 2)
  {
    v2 = sub_10001B0D8((_QWORD *)v0);
    *(_BYTE *)(v0 + 96) = v2 & 1;
  }
  else
  {
    v2 = v1 & 1;
  }
  return v2 & 1;
}

BOOL sub_10001B0D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  uint64_t v32[3];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + 2;
  v8 = a1[5];
  v7 = a1[6];
  sub_100004DE4(v6, v8);
  sub_100104EE4(v8, v7);
  v9 = v33;
  v10 = v34;
  sub_100004DE4(v32, v33);
  v11 = sub_1000DFB74();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v31[2] = &type metadata for SupportsThirdPartyDriversDeviceProperty;
  v31[3] = &off_10014F3B8;
  v18 = (_QWORD *)swift_allocObject(&unk_1001465C0, 48, 7);
  v30 = (uint64_t)v18;
  v18[2] = v11;
  v18[3] = v13;
  v18[4] = v15;
  v18[5] = v17;
  (*(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t, uint64_t))(v10 + 8))(&v35, &v30, v9, v10);
  sub_100005D08(&v30);
  sub_100005D08(v32);
  v19 = *((_QWORD *)&v36 + 1) != 0;
  sub_1000124F8((uint64_t)&v35, &qword_100158018);
  v20 = sub_1000D3124();
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v20, v2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    *(_DWORD *)v24 = 136315138;
    v32[0] = v25;
    if (v19)
      v26 = 0x7374726F70707573;
    else
      v26 = 0xD000000000000010;
    if (v19)
      v27 = 0xE800000000000000;
    else
      v27 = 0x8000000100122620;
    v29 = v2;
    v30 = sub_1000055A0(v26, v27, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Hardware %s third party drivers", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v29);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v19;
}

uint64_t sub_10001B3B8()
{
  uint64_t v0;
  int v1;
  char v2;

  v1 = *(unsigned __int8 *)(v0 + 97);
  if (v1 == 2)
  {
    v2 = sub_10001B3F0((_QWORD *)v0);
    *(_BYTE *)(v0 + 97) = v2 & 1;
  }
  else
  {
    v2 = v1 & 1;
  }
  return v2 & 1;
}

BOOL sub_10001B3F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + 2;
  v8 = a1[5];
  v7 = a1[6];
  sub_100004DE4(v6, v8);
  sub_100071700(v8, v7);
  v9 = v31;
  v10 = v32;
  sub_100004DE4(v30, v31);
  v11 = (uint64_t *)sub_1000DFB68();
  v12 = *v11;
  v13 = v11[1];
  swift_bridgeObjectRetain(v13);
  v14 = sub_10006D930(v12, v13, v9, v10);
  LOBYTE(v10) = v15;
  swift_bridgeObjectRelease(v13);
  v17 = (v10 & 1) == 0 && v14 == 1;
  sub_100005D08(v30);
  v18 = sub_1000D3124();
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v18, v2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v28 = v2;
    *(_DWORD *)v22 = 136315138;
    v30[0] = v23;
    if (v17)
      v24 = 29545;
    else
      v24 = 0x746F6E207369;
    if (v17)
      v25 = 0xE200000000000000;
    else
      v25 = 0xE600000000000000;
    v29 = sub_1000055A0(v24, v25, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Third party driver boot arg %s enabled", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v28);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v17;
}

uint64_t sub_10001B64C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  void (*v38)(__n128);
  __n128 v39;
  _BYTE v40[16];
  _QWORD v41[5];
  unint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v40[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v4);
  v9 = &v40[-v8];
  v10 = __chkstk_darwin(v7);
  v12 = &v40[-v11];
  result = (*(uint64_t (**)(uint64_t))(*v0 + 168))(v10);
  if (result)
  {
    v14 = result;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
    swift_release(v14);
    if ((v15 & 1) != 0)
    {
      v42 = sub_10001BB10((uint64_t)_swiftEmptyArrayStorage);
      if ((sub_10001B0A0() & 1) != 0 || (sub_10001B3B8() & 1) != 0)
      {
        v16 = sub_1000D3124();
        v17 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v12, v16, v2);
        v18 = Logger.logObject.getter(v17);
        v19 = static os_log_type_t.default.getter(v18);
        if (os_log_type_enabled(v18, v19))
        {
          v20 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Retrieving applications from LaunchServices", v20, 2u);
          swift_slowDealloc(v20, -1, -1);
        }

        (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v12, v2);
        v21 = v1[5];
        v22 = v1[6];
        sub_100004DE4(v1 + 2, v21);
        sub_10003A440(v21, v22);
        v23 = v41[4];
        v24 = sub_100004DE4(v41, v41[3]);
        __chkstk_darwin(v24);
        *(_QWORD *)&v40[-16] = &v42;
        (*(void (**)(uint64_t (*)(_QWORD *)))(v23 + 16))(sub_1000227A8);
        sub_100005D08(v41);
      }
      else
      {
        v32 = sub_1000D3124();
        v33 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v9, v32, v2);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.info.getter(v34);
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Third party drivers are disabled", v36, 2u);
          swift_slowDealloc(v36, -1, -1);
        }

        (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v9, v2);
      }
      v37 = v1[10];
      v31 = v42;
      v38 = *(void (**)(__n128))(*(_QWORD *)v37 + 136);
      v39 = swift_bridgeObjectRetain(v42);
      v38(v39);
    }
    else
    {
      v25 = sub_1000D3124();
      v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v6, v25, v2);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.default.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Using cached application list", v29, 2u);
        swift_slowDealloc(v29, -1, -1);
      }

      v30 = (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1[10] + 128))(v30);
    }
    return v31;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10001B9E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_1001585A8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100019E1C(v7, (uint64_t)&v14, &qword_1001585B0);
    v8 = v14;
    result = sub_10001FDF0(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_100017464(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001BB10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100005C88(&qword_1001585C0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100005C88(&qword_1001585C8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100019E1C(v13, (uint64_t)v5, &qword_1001585C0);
    v15 = *v5;
    v16 = v5[1];
    result = sub_10000CF94(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for ApplicationRecord(0);
    result = sub_100021680(v10, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10001BCA8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v82 = a2;
  v3 = type metadata accessor for Logger(0);
  v78 = *(_QWORD *)(v3 - 8);
  v79 = v3;
  __chkstk_darwin(v3);
  v77 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005C88(&qword_100157EF0);
  v6 = __chkstk_darwin(v5);
  v80 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v81 = (uint64_t)&v73 - v9;
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v73 - v10);
  v85 = type metadata accessor for ApplicationRecord(0);
  v83 = *(_QWORD *)(v85 - 8);
  v12 = __chkstk_darwin(v85);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v73 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v73 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v73 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v73 - v24;
  v27 = a1[3];
  v26 = a1[4];
  sub_100004DE4(a1, v27);
  v28 = v84;
  sub_10001AC88(v27, v26, v11);
  if (v28)
  {
    swift_errorRelease(v28);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v11, 1, 1, v85);
    return sub_1000124F8((uint64_t)v11, &qword_100157EF0);
  }
  v84 = (uint64_t)v20;
  v75 = v23;
  v76 = v17;
  v74 = v14;
  v30 = v83;
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56);
  v32 = v85;
  v31((uint64_t)v11, 0, 1, v85);
  sub_100021680((uint64_t)v11, (uint64_t)v25);
  v33 = *(_QWORD *)&v25[*(int *)(v32 + 24)];
  swift_bridgeObjectRetain(v33);
  v34 = sub_1000D2610();
  swift_bridgeObjectRelease(v33);
  if (!v34)
  {
    v36 = (uint64_t *)&v25[*(int *)(v32 + 32)];
    v37 = *v82;
    v38 = *(_QWORD *)(*v82 + 16);
    v73 = v25;
    if (v38)
    {
      v40 = *v36;
      v39 = v36[1];
      sub_1000122B4(*v36, v39);
      v41 = sub_10000CF94(v40, v39);
      v42 = v31;
      if ((v43 & 1) != 0)
      {
        v44 = v81;
        sub_10001ABDC(*(_QWORD *)(v37 + 56) + *(_QWORD *)(v30 + 72) * v41, v81);
        v45 = 0;
        v46 = v84;
      }
      else
      {
        v45 = 1;
        v46 = v84;
        v44 = v81;
      }
      v42(v44, v45, 1, v32);
      sub_100011F40(v40, v39);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v44, 1, v32) != 1)
      {
        v51 = (uint64_t)v75;
        sub_100021680(v44, (uint64_t)v75);
        v52 = sub_1000D3124();
        v54 = v77;
        v53 = v78;
        (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v52, v79);
        v25 = v73;
        sub_10001ABDC((uint64_t)v73, v46);
        sub_10001ABDC((uint64_t)v25, (uint64_t)v76);
        v55 = (uint64_t)v74;
        v56 = sub_10001ABDC(v51, (uint64_t)v74);
        v57 = v46;
        v58 = Logger.logObject.getter(v56);
        v59 = static os_log_type_t.error.getter(v58);
        v60 = v59;
        if (os_log_type_enabled(v58, v59))
        {
          v61 = swift_slowAlloc(32, -1);
          v84 = swift_slowAlloc(96, -1);
          v88 = v84;
          *(_DWORD *)v61 = 136315650;
          v62 = sub_100013834(*(_QWORD *)(v57 + *(int *)(v85 + 32)), *(_QWORD *)(v57 + *(int *)(v85 + 32) + 8));
          LODWORD(v85) = v60;
          v64 = v63;
          v86 = sub_1000055A0(v62, v63, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v61 + 4, v61 + 12);
          swift_bridgeObjectRelease(v64);
          sub_10001AC20(v57);
          *(_WORD *)(v61 + 12) = 2080;
          v65 = (uint64_t)v76;
          v66 = sub_10001A308();
          v68 = v67;
          v86 = sub_1000055A0(v66, v67, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v61 + 14, v61 + 22);
          swift_bridgeObjectRelease(v68);
          sub_10001AC20(v65);
          *(_WORD *)(v61 + 22) = 2080;
          v69 = sub_10001A308();
          v71 = v70;
          v86 = sub_1000055A0(v69, v70, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v61 + 24, v61 + 32);
          swift_bridgeObjectRelease(v71);
          sub_10001AC20(v55);
          _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v85, "Found two applications with the same unique identifier %s:\n%s\n%s", (uint8_t *)v61, 0x20u);
          v72 = v84;
          swift_arrayDestroy(v84, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v72, -1, -1);
          swift_slowDealloc(v61, -1, -1);

          (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
          sub_10001AC20((uint64_t)v75);
          v35 = (uint64_t)v73;
          return sub_10001AC20(v35);
        }

        sub_10001AC20(v55);
        sub_10001AC20((uint64_t)v76);
        sub_10001AC20(v57);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v79);
        sub_10001AC20(v51);
        goto LABEL_4;
      }
    }
    else
    {
      v42 = v31;
      v44 = v81;
      v42(v81, 1, 1, v32);
    }
    sub_1000124F8(v44, &qword_100157EF0);
    v47 = *v36;
    v48 = v36[1];
    v49 = (uint64_t)v73;
    v50 = v80;
    sub_10001ABDC((uint64_t)v73, v80);
    v42(v50, 0, 1, v32);
    sub_1000122B4(v47, v48);
    sub_10001C2B4(v50, v47, v48);
    v35 = v49;
    return sub_10001AC20(v35);
  }
LABEL_4:
  v35 = (uint64_t)v25;
  return sub_10001AC20(v35);
}

uint64_t sub_10001C2B4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = sub_100005C88(&qword_100157EF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ApplicationRecord(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_1000124F8(a1, &qword_100157EF0);
    sub_100020470(a2, a3, (uint64_t)v10);
    sub_100011F40(a2, a3);
    return sub_1000124F8((uint64_t)v10, &qword_100157EF0);
  }
  else
  {
    sub_100021680(a1, (uint64_t)v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v19 = *v4;
    *v4 = 0x8000000000000000;
    sub_100020B10((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    v17 = *v4;
    *v4 = v19;
    swift_bridgeObjectRelease(v17);
    return sub_100011F40(a2, a3);
  }
}

uint64_t sub_10001C418(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 98, 7);
  sub_10001C46C(a1, a2, a3);
  return v7;
}

uint64_t sub_10001C46C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + 64) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_WORD *)(v3 + 96) = 514;
  *(_QWORD *)(v3 + 56) = a1;
  sub_100005C44((uint64_t)a3, v3 + 16);
  v6 = type metadata accessor for ApplicationCache(0);
  v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)(v7 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached) = 0;
  v8 = v7 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
  v9 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a2, v9);
  sub_100004E2C(a3, v7 + 16);
  *(_QWORD *)(v3 + 80) = v7;
  return v3;
}

uint64_t sub_10001C528(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v5 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached) = 0;
  v6 = v5 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
  v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a1, v7);
  sub_100004E2C(a2, v5 + 16);
  return v5;
}

uint64_t sub_10001C5AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 168))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for ActivationStateManager();
    sub_1000CD228(v1, (uint64_t)&off_1001463D8, v7, (uint64_t)&off_10014B650);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_UNKNOWN **sub_10001C618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _UNKNOWN **v5;
  uint64_t v6;

  v1 = sub_10001B64C();
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 88);
  if (!v3)
  {
    v6 = 0;
LABEL_6:
    *(_QWORD *)(v0 + 88) = v2;
    v5 = &off_1001463A8;
    v2 = v6;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v3);
  v4 = sub_10001E2F4(v2, v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  if ((v4 & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + 88);
    goto LABEL_6;
  }
  v5 = 0;
LABEL_7:
  swift_bridgeObjectRelease(v2);
  return v5;
}

uint64_t sub_10001C6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  Swift::String v18;
  void *object;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  unint64_t v40;
  unint64_t v41;

  v1 = type metadata accessor for ApplicationRecord(0);
  v37 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005C88(&qword_100158280);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v33 - v9;
  v40 = 0xD000000000000017;
  v41 = 0x8000000100122440;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 216))(v8);
  v12 = 0;
  v13 = *(_QWORD *)(result + 64);
  v35 = result + 64;
  v38 = result;
  v14 = 1 << *(_BYTE *)(result + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v36 = (unint64_t)(v14 + 63) >> 6;
  v34 = v36 - 1;
  if ((v15 & v13) == 0)
    goto LABEL_8;
LABEL_6:
  v20 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v21 = v20 | (v12 << 6);
  while (2)
  {
    v22 = *(_QWORD *)(v38 + 56);
    v23 = (uint64_t *)(*(_QWORD *)(v38 + 48) + 16 * v21);
    v24 = *v23;
    v25 = v23[1];
    *v7 = *v23;
    v7[1] = v25;
    v26 = v22 + *(_QWORD *)(v37 + 72) * v21;
    v27 = sub_100005C88(&qword_100158288);
    sub_10001ABDC(v26, (uint64_t)v7 + *(int *)(v27 + 48));
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v7, 0, 1, v27);
    sub_1000122B4(v24, v25);
    while (1)
    {
      sub_100021638((uint64_t)v7, (uint64_t)v10);
      v32 = sub_100005C88(&qword_100158288);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v10, 1, v32) == 1)
      {
        swift_release(v38);
        return v40;
      }
      sub_100011F40(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      sub_100021680((uint64_t)&v10[*(int *)(v32 + 48)], (uint64_t)v3);
      v39._countAndFlagsBits = sub_10001A040();
      v39._object = v17;
      v18._countAndFlagsBits = 10;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      object = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(object);
      result = sub_10001AC20((uint64_t)v3);
      if (v16)
        goto LABEL_6;
LABEL_8:
      v28 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v28 < v36)
      {
        v29 = *(_QWORD *)(v35 + 8 * v28);
        if (v29)
          goto LABEL_11;
        v30 = v12 + 2;
        ++v12;
        if (v28 + 1 < v36)
        {
          v29 = *(_QWORD *)(v35 + 8 * v30);
          if (v29)
            goto LABEL_14;
          v12 = v28 + 1;
          if (v28 + 2 < v36)
          {
            v29 = *(_QWORD *)(v35 + 8 * (v28 + 2));
            if (v29)
            {
              v28 += 2;
              goto LABEL_11;
            }
            v30 = v28 + 3;
            v12 = v28 + 2;
            if (v28 + 3 < v36)
              break;
          }
        }
      }
LABEL_25:
      v31 = sub_100005C88(&qword_100158288);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v7, 1, 1, v31);
      v16 = 0;
    }
    v29 = *(_QWORD *)(v35 + 8 * v30);
    if (v29)
    {
LABEL_14:
      v28 = v30;
LABEL_11:
      v16 = (v29 - 1) & v29;
      v21 = __clz(__rbit64(v29)) + (v28 << 6);
      v12 = v28;
      continue;
    }
    break;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v36)
    {
      v12 = v34;
      goto LABEL_25;
    }
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v30;
    if (v29)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10001CA18()
{
  uint64_t v0;

  sub_100005D08((_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  return swift_deallocClassInstance(v0, 98, 7);
}

id sub_10001CA64()
{
  uint64_t v0;

  return *(id *)(v0 + 56);
}

uint64_t sub_10001CA6C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t sub_10001CA78()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

void (*sub_10001CA84(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 160))();
  return sub_10000C4BC;
}

uint64_t sub_10001CAD0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t sub_10001CADC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t sub_10001CAE8(char a1)
{
  if ((a1 & 1) != 0)
    return 1635017060;
  else
    return 0x6E6F6973726576;
}

BOOL sub_10001CB18(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10001CB30()
{
  char *v0;

  return sub_10001CAE8(*v0);
}

uint64_t sub_10001CB38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002178C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001CB5C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10001CB68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000216C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001CB90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000216C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001CBB8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_100005C88(&qword_100158290);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100004DE4(a1, v12);
  v14 = sub_1000216C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SerializedApplicationCache.CodingKeys, &type metadata for SerializedApplicationCache.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v19 = v18;
    v20 = 1;
    v15 = sub_100005C88(&qword_100158298);
    v16 = sub_100021708();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10001CD04@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100021864(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10001CD30(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10001CBB8(a1, *v1, v1[1], v1[2]);
}

char *sub_10001CD4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached);
  if (v2)
  {
    v3 = *(char **)(v0 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached);
  }
  else
  {
    v3 = sub_10001D718();
    v4 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v4);
    v2 = 0;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

char *sub_10001CDAC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  Swift::String v65;
  void *object;
  Swift::String v67;
  Swift::String v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  uint64_t (*v95)(char *, uint64_t, uint64_t);
  char *v96;
  _QWORD *v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v106 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v107 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v104 = (char *)&v92 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v92 - v13;
  v15 = OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached;
  v16 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached);
  if (v16)
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v16);
    v17 = sub_10001E2F4(a1, v16);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v16);
    if ((v17 & 1) != 0)
      return (char *)swift_bridgeObjectRelease(a1);
  }
  v102 = v4;
  v19 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = PropertyListEncoder.init()();
  v108 = 0xD000000000000020;
  v109 = 0x8000000100122460;
  v110 = a1;
  v21 = sub_100021A2C();
  v22 = swift_bridgeObjectRetain(a1);
  v23 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v108, &type metadata for SerializedApplicationCache, v21, v22);
  v92 = v15;
  v100 = v23;
  v101 = v24;
  v99 = v10;
  swift_release(v20);
  swift_bridgeObjectRelease(a1);
  v25 = sub_1000D331C();
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v94 = v25;
  v95 = v26;
  v27 = ((uint64_t (*)(char *))v26)(v14);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, (os_log_type_t)v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v29, "Writing new application cache contents", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  v103 = v7;
  v93 = *(void (**)(char *, uint64_t))(v7 + 8);
  v93(v14, v6);
  v96 = (char *)v2 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
  URL.appendingPathExtension(_:)(7824750, 0xE300000000000000);
  v31 = v2[5];
  v32 = v2[6];
  v97 = v2 + 2;
  v98 = v2;
  sub_100004DE4(v2 + 2, v31);
  sub_10010731C(v31, v32);
  v33 = v111;
  v34 = v112;
  v35 = sub_100004DE4(&v108, v111);
  v36 = URL.path.getter(v35);
  v105 = v6;
  v38 = v37;
  v40 = v100;
  v39 = v101;
  sub_1000122B4(v100, v101);
  v41 = sub_10001B9E4((uint64_t)_swiftEmptyArrayStorage);
  LOBYTE(v36) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v34 + 40))(v36, v38, v40, v39, v41, v33, v34);
  swift_bridgeObjectRelease(v41);
  sub_100011F40(v40, v39);
  swift_bridgeObjectRelease(v38);
  sub_100005D08(&v108);
  if ((v36 & 1) != 0)
  {
    v43 = v104;
    v42 = v105;
    v44 = v95(v104, v94, v105);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.info.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Replacing old application cache contents", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    v93(v43, v42);
    v48 = v97;
    v49 = v98;
    v50 = v98[5];
    v51 = v98[6];
    sub_100004DE4(v97, v50);
    sub_10010731C(v50, v51);
    v52 = v111;
    v53 = v112;
    sub_100004DE4(&v108, v111);
    v54 = v107;
    (*(void (**)(char *, char *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v53 + 88))(v96, v107, 0, 0, 0, 0, v52, v53);
    sub_100005D08(&v108);
    v87 = v49[5];
    v88 = v49[6];
    sub_100004DE4(v48, v87);
    sub_10010731C(v87, v88);
    v89 = v111;
    v90 = v112;
    sub_100004DE4(&v108, v111);
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 104))(v54, v89, v90);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v54, v102);
    sub_100011F40(v100, v101);
    sub_100005D08(&v108);
    v91 = *(_QWORD *)((char *)v49 + v92);
    *(_QWORD *)((char *)v49 + v92) = a1;
    return (char *)swift_bridgeObjectRelease(v91);
  }
  else
  {
    v55 = v105;
    v56 = swift_bridgeObjectRelease(a1);
    v57 = errno.getter(v56);
    result = strerror(v57);
    v58 = v99;
    if (result)
    {
      v59 = String.init(cString:)(result);
      v61 = v60;
      v108 = 0;
      v109 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease(v109);
      v108 = 0x6946657461657263;
      v109 = 0xEB0000000020656CLL;
      v62 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v63 = v107;
      v64 = v102;
      v65._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v102, v62);
      object = v65._object;
      String.append(_:)(v65);
      swift_bridgeObjectRelease(object);
      v67._countAndFlagsBits = 0x3A64656C69616620;
      v67._object = (void *)0xEF206F6E72726520;
      String.append(_:)(v67);
      v68._countAndFlagsBits = v59;
      v68._object = v61;
      String.append(_:)(v68);
      swift_bridgeObjectRelease(v61);
      v69 = v108;
      v70 = v109;
      v71 = sub_1000122F8();
      v72 = swift_allocError(&type metadata for KMError, v71, 0, 0);
      *(_QWORD *)v73 = v69;
      *(_QWORD *)(v73 + 8) = v70;
      *(_OWORD *)(v73 + 16) = 0u;
      *(_OWORD *)(v73 + 32) = 0u;
      *(_OWORD *)(v73 + 48) = 0u;
      *(_QWORD *)(v73 + 64) = 0;
      *(_BYTE *)(v73 + 72) = 19;
      swift_willThrow(v72);
      sub_100011F40(v100, v101);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v63, v64);
      v74 = v55;
      v75 = v103;
      v76 = sub_1000D331C();
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v58, v76, v74);
      swift_errorRetain(v72);
      v77 = swift_errorRetain(v72);
      v78 = Logger.logObject.getter(v77);
      v79 = static os_log_type_t.error.getter(v78);
      if (os_log_type_enabled(v78, v79))
      {
        v105 = v74;
        v103 = v75;
        v80 = (uint8_t *)swift_slowAlloc(12, -1);
        v81 = v58;
        v82 = swift_slowAlloc(32, -1);
        v108 = v82;
        *(_DWORD *)v80 = 136315138;
        v113 = v72;
        swift_errorRetain(v72);
        v83 = sub_100005C88(&qword_10015AB50);
        v84 = String.init<A>(describing:)(&v113, v83);
        v86 = v85;
        v113 = sub_1000055A0(v84, v85, &v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v80 + 4, v80 + 12);
        swift_bridgeObjectRelease(v86);
        swift_errorRelease(v72);
        swift_errorRelease(v72);
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "Failed to write application cache: %s", v80, 0xCu);
        swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1, -1);
        swift_slowDealloc(v80, -1, -1);

        swift_errorRelease(v72);
        return (char *)(*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v81, v105);
      }
      else
      {
        swift_errorRelease(v72);
        swift_errorRelease(v72);
        swift_errorRelease(v72);

        return (char *)(*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v58, v74);
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

char *(*sub_10001D654(char **a1))(uint64_t *a1, char a2)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  a1[1] = v1;
  v3 = OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached];
  if (v4)
  {
    v5 = *(char **)&v1[OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached];
  }
  else
  {
    v5 = sub_10001D718();
    v6 = *(_QWORD *)&v1[v3];
    *(_QWORD *)&v1[v3] = v5;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRelease(v6);
    v4 = 0;
  }
  *a1 = v5;
  swift_bridgeObjectRetain(v4);
  return sub_10001D6D4;
}

char *sub_10001D6D4(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if ((a2 & 1) == 0)
    return sub_10001CDAC(*a1);
  swift_bridgeObjectRetain(*a1);
  sub_10001CDAC(v3);
  return (char *)swift_bridgeObjectRelease(v2);
}

char *sub_10001D718()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  char *result;
  void (*v38)(char *);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *);
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  void (*v80)(char *);
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v75 - v8;
  v10 = __chkstk_darwin(v7);
  v79 = (char *)&v75 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v75 - v12;
  v14 = sub_1000D331C();
  v80 = *(void (**)(char *))(v3 + 16);
  v81 = (void (*)(char *, uint64_t))v14;
  v80(v13);
  v15 = swift_retain_n(v0, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v77 = v6;
  v78 = v9;
  if (v18)
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v83 = v20;
    v76 = v2;
    *(_DWORD *)v19 = 136315138;
    v21 = URL.path.getter(v20);
    v23 = v22;
    v82 = sub_1000055A0(v21, v22, &v83);
    v2 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v19 + 4, v19 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Loading application cache from %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_release_n(v0, 2);
  }
  v24 = *(void (**)(char *, uint64_t))(v3 + 8);
  v24(v13, v2);
  v25 = v1[5];
  v26 = v1[6];
  sub_100004DE4(v1 + 2, v25);
  sub_10010731C(v25, v26);
  v27 = v87;
  v28 = sub_100004DE4(&v83, v86);
  v29 = URL.path.getter(v28);
  v31 = v30;
  v32 = (*(uint64_t (**)(uint64_t))(v27 + 16))(v29);
  v34 = v33;
  swift_bridgeObjectRelease(v31);
  v35 = sub_100005D08(&v83);
  if (v34 >> 60 != 15)
  {
    v49 = v79;
    v50 = v80;
    v51 = ((uint64_t (*)(char *, void (*)(char *, uint64_t), uint64_t))v80)(v79, v81, v2);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.default.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Loading application cache, decoding data", v54, 2u);
      v55 = v54;
      v49 = v79;
      swift_slowDealloc(v55, -1, -1);
    }

    v24(v49, v2);
    v56 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
    v57 = PropertyListDecoder.init()();
    v58 = sub_1000226E0();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v83, &type metadata for SerializedApplicationCache, v32, v34, &type metadata for SerializedApplicationCache, v58);
    swift_release(v57);
    v71 = v84;
    v70 = v85;
    if (v83 == 0xD000000000000020 && v84 == 0x8000000100122460)
    {
      sub_100021610(v32, v34);
      swift_bridgeObjectRelease(0x8000000100122460);
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v83, v84, 0xD000000000000020, 0x8000000100122460, 0) & 1) != 0)
    {
      sub_100021610(v32, v34);
      swift_bridgeObjectRelease(v71);
    }
    else
    {
      swift_bridgeObjectRelease(v70);
      swift_bridgeObjectRelease(v71);
      v72 = sub_1000122F8();
      v73 = swift_allocError(&type metadata for KMError, v72, 0, 0);
      *(_QWORD *)v74 = 0xD000000000000023;
      *(_QWORD *)(v74 + 8) = 0x8000000100122640;
      *(_OWORD *)(v74 + 16) = 0u;
      *(_OWORD *)(v74 + 32) = 0u;
      *(_OWORD *)(v74 + 48) = 0u;
      *(_QWORD *)(v74 + 64) = 0;
      *(_BYTE *)(v74 + 72) = 9;
      swift_willThrow(v73);
      v59 = v77;
      ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v50)(v77, v81, v2);
      swift_errorRetain(v73);
      v60 = swift_errorRetain(v73);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.error.getter(v61);
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc(12, -1);
        v64 = swift_slowAlloc(32, -1);
        v81 = v24;
        v65 = v64;
        v82 = v73;
        v83 = v64;
        *(_DWORD *)v63 = 136315138;
        swift_errorRetain(v73);
        v66 = sub_100005C88(&qword_10015AB50);
        v67 = String.init<A>(describing:)(&v82, v66);
        v76 = v2;
        v69 = v68;
        v82 = sub_1000055A0(v67, v68, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v63 + 4, v63 + 12);
        swift_bridgeObjectRelease(v69);
        swift_errorRelease(v73);
        swift_errorRelease(v73);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "invalid application cache, failed to read plist: %s", v63, 0xCu);
        swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v63, -1, -1);

        v81(v77, v76);
      }
      else
      {
        swift_errorRelease(v73);
        swift_errorRelease(v73);

        v24(v59, v2);
      }
      v70 = sub_10001BB10((uint64_t)_swiftEmptyArrayStorage);
      swift_errorRelease(v73);
      sub_100021610(v32, v34);
    }
    return (char *)v70;
  }
  v36 = errno.getter(v35);
  result = strerror(v36);
  v38 = v80;
  if (result)
  {
    v39 = String.init(cString:)(result);
    v41 = v40;
    v42 = v78;
    ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v38)(v78, v81, v2);
    swift_bridgeObjectRetain(v41);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      v83 = v47;
      *(_DWORD *)v46 = 136315138;
      swift_bridgeObjectRetain(v41);
      v82 = sub_1000055A0(v39, v41, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease_n(v41, 3);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "contentsOfFile failed to read application cache: %s", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);

      v48 = v78;
    }
    else
    {

      swift_bridgeObjectRelease_n(v41, 2);
      v48 = v42;
    }
    v24(v48, v2);
    return (char *)sub_10001BB10((uint64_t)_swiftEmptyArrayStorage);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001DEE0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100005D08(v0 + 2);
  v1 = (char *)v0 + OBJC_IVAR____TtC10driverkitd16ApplicationCache_applicationCachePath;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC10driverkitd16ApplicationCache__cached));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10001DF48(uint64_t a1, uint64_t a2)
{
  return sub_10001E090(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10001DF54(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10001DFC8(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10001E044@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_10001E084(uint64_t a1, uint64_t a2)
{
  return sub_10001E090(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10001E090(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10001E0CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10001E10C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_10001E17C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10001E204@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10001E248@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10001E270(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100012534(&qword_100158608, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10011BF48);
  v3 = sub_100012534(&qword_100158610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10010F8CC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001E2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  int64_t v99;
  uint64_t v100;
  int64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  _BOOL4 v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;

  v4 = type metadata accessor for ApplicationRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v98 - v10;
  v12 = __chkstk_darwin(v9);
  v118 = (uint64_t)&v98 - v13;
  v14 = __chkstk_darwin(v12);
  v117 = (uint64_t)&v98 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v98 - v17;
  v19 = __chkstk_darwin(v16);
  v120 = (uint64_t)&v98 - v20;
  v21 = __chkstk_darwin(v19);
  v112 = (uint64_t)&v98 - v22;
  v23 = __chkstk_darwin(v21);
  v111 = (uint64_t)&v98 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v98 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v98 - v28;
  v30 = sub_100005C88(&qword_100158280);
  v31 = __chkstk_darwin(v30);
  __chkstk_darwin(v31);
  v34 = (uint64_t *)((char *)&v98 - v33);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v105 = v18;
  v106 = v32;
  v108 = v5;
  v115 = v4;
  v110 = 0;
  v35 = *(_QWORD *)(a1 + 64);
  v100 = a1 + 64;
  v36 = 1 << *(_BYTE *)(a1 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & v35;
  v101 = (unint64_t)(v36 + 63) >> 6;
  v99 = v101 - 1;
  v102 = v8;
  v114 = v11;
  v107 = v34;
  v119 = v27;
  v116 = v29;
  v103 = a2;
  v104 = a1;
  if (v38)
  {
    v40 = (uint64_t)v8;
    v113 = (v38 - 1) & v38;
    v41 = __clz(__rbit64(v38)) | (v110 << 6);
    v42 = v108;
LABEL_9:
    v43 = *(_QWORD *)(a1 + 56);
    v44 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v41);
    v45 = *v44;
    v46 = v44[1];
    v47 = (uint64_t)v106;
    *v106 = *v44;
    *(_QWORD *)(v47 + 8) = v46;
    v48 = v43 + *(_QWORD *)(v42 + 72) * v41;
    v49 = sub_100005C88(&qword_100158288);
    sub_10001ABDC(v48, v47 + *(int *)(v49 + 48));
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v47, 0, 1, v49);
    sub_1000122B4(v45, v46);
    goto LABEL_33;
  }
  v50 = v110 + 1;
  v42 = v108;
  if (__OFADD__(v110, 1))
  {
    __break(1u);
    JUMPOUT(0x10001FC50);
  }
  if (v50 < v101)
  {
    v51 = *(_QWORD *)(v100 + 8 * v50);
    if (v51)
    {
      v40 = (uint64_t)v8;
LABEL_14:
      v113 = (v51 - 1) & v51;
      v41 = __clz(__rbit64(v51)) + (v50 << 6);
      v110 = v50;
      goto LABEL_9;
    }
    v52 = v110 + 2;
    ++v110;
    if (v50 + 1 < v101)
    {
      v51 = *(_QWORD *)(v100 + 8 * v52);
      if (v51)
      {
LABEL_17:
        v40 = (uint64_t)v8;
        v50 = v52;
        goto LABEL_14;
      }
      v110 = v50 + 1;
      if (v50 + 2 < v101)
      {
        v51 = *(_QWORD *)(v100 + 8 * (v50 + 2));
        if (v51)
        {
          v40 = (uint64_t)v8;
          v50 += 2;
          goto LABEL_14;
        }
        v110 = v50 + 2;
        if (v50 + 3 < v101)
        {
          v51 = *(_QWORD *)(v100 + 8 * (v50 + 3));
          if (v51)
          {
            v40 = (uint64_t)v8;
            v50 += 3;
            goto LABEL_14;
          }
          v52 = v50 + 4;
          v110 = v50 + 3;
          if (v50 + 4 < v101)
          {
            v51 = *(_QWORD *)(v100 + 8 * v52);
            if (v51)
              goto LABEL_17;
            v40 = (uint64_t)v8;
            while (1)
            {
              v50 = v52 + 1;
              if (__OFADD__(v52, 1))
              {
                __break(1u);
                JUMPOUT(0x10001FD10);
              }
              if (v50 >= v101)
                break;
              v51 = *(_QWORD *)(v100 + 8 * v50);
              ++v52;
              if (v51)
                goto LABEL_14;
            }
            v110 = v99;
          }
        }
      }
    }
  }
  v40 = (uint64_t)v8;
  v53 = sub_100005C88(&qword_100158288);
  v47 = (uint64_t)v106;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v106, 1, 1, v53);
  v113 = 0;
LABEL_33:
  v54 = v107;
  sub_100021638(v47, (uint64_t)v107);
  v55 = sub_100005C88(&qword_100158288);
  v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v54, 1, v55);
  v39 = v56 == 1;
  if (v56 != 1)
  {
    v57 = *v54;
    v58 = v54[1];
    v59 = v116;
    sub_100021680((uint64_t)v54 + *(int *)(v55 + 48), (uint64_t)v116);
    v60 = sub_10000CF94(v57, v58);
    v62 = v61;
    sub_100011F40(v57, v58);
    if ((v62 & 1) == 0)
    {
LABEL_62:
      sub_10001AC20((uint64_t)v59);
      return 0;
    }
    v109 = v39;
    v63 = *(_QWORD *)(a2 + 56) + *(_QWORD *)(v42 + 72) * v60;
    v64 = v119;
    sub_10001ABDC(v63, (uint64_t)v119);
    v65 = v64[1];
    v66 = v59[1];
    if (*v64 == *v59 && v65 == v66)
    {
      v67 = (uint64_t)v119;
      v68 = v111;
      sub_10001ABDC((uint64_t)v119, v111);
      v59 = v116;
      v69 = v112;
      sub_10001ABDC((uint64_t)v116, v112);
      v70 = v115;
      v71 = (uint64_t)v105;
    }
    else
    {
      v72 = _stringCompareWithSmolCheck(_:_:expecting:)(*v64, v65, *v59, v66, 0);
      v67 = (uint64_t)v119;
      v68 = v111;
      sub_10001ABDC((uint64_t)v119, v111);
      v59 = v116;
      v69 = v112;
      sub_10001ABDC((uint64_t)v116, v112);
      v70 = v115;
      v71 = (uint64_t)v105;
      if ((v72 & 1) == 0)
      {
        sub_10001AC20(v69);
        sub_10001AC20(v68);
        sub_10001ABDC(v67, v120);
        sub_10001ABDC((uint64_t)v59, v71);
LABEL_61:
        sub_10001AC20(v120);
        sub_10001AC20(v71);
        sub_10001ABDC(v67, v117);
        sub_10001ABDC((uint64_t)v59, v118);
        v95 = (uint64_t)v114;
        sub_10001AC20(v117);
        sub_10001AC20(v118);
        v96 = (uint64_t)v119;
        sub_10001ABDC((uint64_t)v119, v95);
        sub_10001ABDC((uint64_t)v59, v40);
        sub_10001AC20(v95);
        sub_10001AC20(v40);
        sub_10001AC20(v96);
        goto LABEL_62;
      }
    }
    v73 = static URL.== infix(_:_:)(v68 + *(int *)(v70 + 20), v69 + *(int *)(v70 + 20));
    sub_10001AC20(v69);
    sub_10001AC20(v68);
    sub_10001ABDC(v67, v120);
    sub_10001ABDC((uint64_t)v59, v71);
    if ((v73 & 1) != 0)
    {
      v74 = *(int *)(v70 + 24);
      v75 = *(_QWORD **)(v120 + v74);
      v76 = *(_QWORD **)(v71 + v74);
      v77 = v75[2];
      if (v77 == v76[2])
      {
        if (!v77 || v75 == v76)
        {
LABEL_51:
          sub_10001AC20(v120);
          sub_10001AC20(v71);
          v87 = v117;
          sub_10001ABDC(v67, v117);
          sub_10001ABDC((uint64_t)v59, v118);
          __asm { BR              X10 }
        }
        v78 = v75[4];
        v79 = v75[5];
        v80 = v76[4];
        v81 = v76[5];
        if (v78 == v80 && v79 == v81 || (_stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, v80, v81, 0) & 1) != 0)
        {
          if (v77 == 1)
            goto LABEL_51;
          if ((v82 = v75[6], v83 = v75[7], v84 = v76[6], v85 = v76[7], v82 == v84) && v83 == v85
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, v84, v85, 0) & 1) != 0)
          {
            v86 = v77 - 2;
            if (!v86)
              goto LABEL_51;
            v88 = v75 + 9;
            v89 = v76 + 9;
            while (1)
            {
              v90 = *(v88 - 1);
              v91 = *v88;
              v92 = *(v89 - 1);
              v93 = *v89;
              v94 = v90 == v92 && v91 == v93;
              if (!v94 && (_stringCompareWithSmolCheck(_:_:expecting:)(v90, v91, v92, v93, 0) & 1) == 0)
                break;
              v88 += 2;
              v89 += 2;
              if (!--v86)
                goto LABEL_51;
            }
          }
        }
      }
    }
    goto LABEL_61;
  }
  return v39;
}

unint64_t sub_10001FDF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_10001FE70(a1, v7);
}

unint64_t sub_10001FE70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void sub_10001FFE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_100020044(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100020228);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_10002024C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000202A8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  sub_10001FFE4((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_100011F40(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_100020470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10000CF94(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v19 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100020CD0();
      v12 = v19;
    }
    sub_100011F40(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    v13 = *(_QWORD *)(v12 + 56);
    v14 = type metadata accessor for ApplicationRecord(0);
    v15 = *(_QWORD *)(v14 - 8);
    sub_100021680(v13 + *(_QWORD *)(v15 + 72) * v9, a3);
    sub_100020904(v9, v12);
    v16 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a3, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for ApplicationRecord(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a3, 1, 1, v18);
  }
}

Swift::Int sub_100020598(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int result;
  int64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  __int128 v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for ApplicationRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100005C88(&qword_1001585C8);
  v43 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v42 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v40 = v3;
  v41 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_24;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = v42;
    v26 = v42[v24];
    ++v19;
    if (!v26)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = v42[v19];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v10);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            v19 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v19 >= v41)
              goto LABEL_36;
            v26 = v42[v19];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v19 = v27;
      }
    }
LABEL_23:
    v16 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v10 + 48);
    v29 = *(_QWORD *)(v7 + 72);
    v30 = *(_QWORD *)(v10 + 56) + v29 * v23;
    v31 = *(_QWORD *)(v28 + 16 * v23 + 8);
    v44 = *(_OWORD *)(v28 + 16 * v23);
    if ((v43 & 1) != 0)
    {
      sub_100021680(v30, (uint64_t)v9);
    }
    else
    {
      sub_10001ABDC(v30, (uint64_t)v9);
      sub_1000122B4(v44, v31);
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v12 + 40));
    Data.hash(into:)(v45, v44, v31);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      v21 = v44;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      v21 = v44;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_OWORD *)(*(_QWORD *)(v12 + 48) + 16 * v20) = v21;
    result = sub_100021680((uint64_t)v9, *(_QWORD *)(v12 + 56) + v29 * v20);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v40;
  v25 = v42;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

unint64_t sub_100020904(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD v31[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v31, *(_QWORD *)(a2 + 40));
        sub_1000122B4(v10, v11);
        Data.hash(into:)(v31, v10, v11);
        v12 = Hasher._finalize()();
        result = sub_100011F40(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v13 < v8)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_OWORD *)(v14 + 16 * v3);
        v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = type metadata accessor for ApplicationRecord(0);
        v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72);
        v20 = v19 * v3;
        result = v17 + v19 * v3;
        v21 = v19 * v6;
        v22 = v17 + v19 * v6;
        v23 = v22 + v19;
        if (v20 < v21 || result >= v23)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v22, 1, v18);
        }
        else
        {
          v3 = v6;
          if (v20 == v21)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100020B10(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10000CF94(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for ApplicationRecord(0) - 8) + 72) * v12;
        return sub_1000227C0(a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100020CD0();
      goto LABEL_7;
    }
    sub_100020598(v15, a4 & 1);
    v22 = sub_10000CF94(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100020C48(v12, a2, a3, a1, v18);
      return sub_1000122B4(a2, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

uint64_t sub_100020C48(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for ApplicationRecord(0);
  result = sub_100021680(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

void *sub_100020CD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for ApplicationRecord(0);
  v30 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005C88(&qword_1001585C8);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v28 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v29 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v20 = *v19;
    v21 = v19[1];
    v22 = *(_QWORD *)(v30 + 72) * v17;
    sub_10001ABDC(*(_QWORD *)(v5 + 56) + v22, (uint64_t)v4);
    v23 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v18);
    *v23 = v20;
    v23[1] = v21;
    sub_100021680((uint64_t)v4, *(_QWORD *)(v7 + 56) + v22);
    result = (void *)sub_1000122B4(v20, v21);
  }
  v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    result = (void *)swift_release(v5);
    v1 = v28;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100020F00(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000001001225A0;
    if (a2 == 0x80000001001225A0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001225A0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 7107189 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001001225C0)
  {
    v6 = 0x80000001001225C0;
LABEL_15:
    swift_bridgeObjectRelease(v6);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001001225C0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_15;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000001001225E0)
  {
    v7 = 0x80000001001225E0;
LABEL_21:
    swift_bridgeObjectRelease(v7);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001001225E0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_21;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100122600)
  {
    swift_bridgeObjectRelease(0x8000000100122600);
    return 4;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100122600, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1000210E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_10001FFE4(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_100021198(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1000211DC()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_100021210 + *((int *)qword_1000212D0 + (v0 >> 62))))();
}

uint64_t sub_100021220@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      v5 = 1;
    }
    else
    {
      sub_1000122B4(v2, v1);
      sub_10002024C(v4, v3);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_1000212E0(uint64_t *a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;

  v4 = (int *)type metadata accessor for ApplicationRecord(0);
  v5 = __chkstk_darwin(v4);
  v6 = __chkstk_darwin(v5);
  v43 = (uint64_t)&v43 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v43 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v43 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v43 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v43 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v43 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v43 - v23;
  v25 = *a1;
  v26 = a1[1];
  v27 = *a2;
  v28 = a2[1];
  v29 = *a1 == *a2;
  v44 = v30;
  if (v29 && v26 == v28)
  {
    sub_10001ABDC((uint64_t)a1, (uint64_t)&v43 - v23);
    sub_10001ABDC((uint64_t)a2, (uint64_t)v22);
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v27, v28, 0);
    sub_10001ABDC((uint64_t)a1, (uint64_t)v24);
    sub_10001ABDC((uint64_t)a2, (uint64_t)v22);
    if ((v31 & 1) == 0)
    {
      sub_10001AC20((uint64_t)v22);
      sub_10001AC20((uint64_t)v24);
      sub_10001ABDC((uint64_t)a1, (uint64_t)v19);
      sub_10001ABDC((uint64_t)a2, (uint64_t)v16);
      goto LABEL_11;
    }
  }
  v32 = static URL.== infix(_:_:)(&v24[v4[5]], &v22[v4[5]]);
  sub_10001AC20((uint64_t)v22);
  sub_10001AC20((uint64_t)v24);
  sub_10001ABDC((uint64_t)a1, (uint64_t)v19);
  sub_10001ABDC((uint64_t)a2, (uint64_t)v16);
  if ((v32 & 1) == 0)
  {
LABEL_11:
    sub_10001AC20((uint64_t)v19);
    sub_10001AC20((uint64_t)v16);
    sub_10001ABDC((uint64_t)a1, (uint64_t)v13);
    sub_10001ABDC((uint64_t)a2, (uint64_t)v10);
    goto LABEL_12;
  }
  v33 = sub_1000169A4(*(_QWORD **)&v19[v4[6]], *(_QWORD **)&v16[v4[6]]);
  sub_10001AC20((uint64_t)v19);
  sub_10001AC20((uint64_t)v16);
  sub_10001ABDC((uint64_t)a1, (uint64_t)v13);
  sub_10001ABDC((uint64_t)a2, (uint64_t)v10);
  if ((v33 & 1) == 0)
  {
LABEL_12:
    sub_10001AC20((uint64_t)v13);
    sub_10001AC20((uint64_t)v10);
    v41 = (uint64_t)a1;
    v37 = v43;
    sub_10001ABDC(v41, v43);
    v38 = v44;
    sub_10001ABDC((uint64_t)a2, v44);
    goto LABEL_13;
  }
  sub_100021198(*(_QWORD *)&v13[v4[7]], *(_QWORD *)&v13[v4[7] + 8]);
  v35 = v34;
  sub_10001AC20((uint64_t)v13);
  sub_10001AC20((uint64_t)v10);
  v36 = (uint64_t)a1;
  v37 = v43;
  sub_10001ABDC(v36, v43);
  v38 = v44;
  sub_10001ABDC((uint64_t)a2, v44);
  if ((v35 & 1) == 0)
  {
LABEL_13:
    v40 = 0;
    goto LABEL_14;
  }
  sub_100021198(*(_QWORD *)(v37 + v4[8]), *(_QWORD *)(v37 + v4[8] + 8));
  v40 = v39;
LABEL_14:
  sub_10001AC20(v37);
  sub_10001AC20(v38);
  return v40 & 1;
}

uint64_t sub_100021610(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100011F40(result, a2);
  return result;
}

uint64_t type metadata accessor for ApplicationCache(uint64_t a1)
{
  return sub_100017D70(a1, qword_10015D4E0, (uint64_t)&nominal type descriptor for ApplicationCache);
}

uint64_t sub_100021638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100158280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100021680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ApplicationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000216C4()
{
  unint64_t result;

  result = qword_10015D148[0];
  if (!qword_10015D148[0])
  {
    result = swift_getWitnessTable(&unk_10010F784, &type metadata for SerializedApplicationCache.CodingKeys);
    atomic_store(result, qword_10015D148);
  }
  return result;
}

unint64_t sub_100021708()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001582A0;
  if (!qword_1001582A0)
  {
    v1 = sub_100011CE4(&qword_100158298);
    sub_10001A73C();
    sub_100012534(&qword_1001582A8, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F424);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001582A0);
  }
  return result;
}

uint64_t sub_10002178C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100021864(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v3 = sub_100005C88(&qword_1001585D0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100004DE4(a1, v7);
  v9 = sub_1000216C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SerializedApplicationCache.CodingKeys, &type metadata for SerializedApplicationCache.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100005D08(a1);
  }
  else
  {
    v19 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
    v12 = v11;
    v13 = sub_100005C88(&qword_100158298);
    v17 = 1;
    v14 = sub_100022724();
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v13, &v17, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v15 = v18;
    swift_bridgeObjectRetain(v18);
    sub_100005D08(a1);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

unint64_t sub_100021A2C()
{
  unint64_t result;

  result = qword_1001582B0;
  if (!qword_1001582B0)
  {
    result = swift_getWitnessTable(&unk_10010F4AC, &type metadata for SerializedApplicationCache);
    atomic_store(result, (unint64_t *)&qword_1001582B0);
  }
  return result;
}

uint64_t *sub_100021A70(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v25);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11, v13);
    v14 = a3[6];
    v15 = a3[7];
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = v16;
    v17 = (uint64_t *)((char *)v4 + v15);
    v18 = *(uint64_t *)((char *)a2 + v15);
    v19 = *(uint64_t *)((char *)a2 + v15 + 8);
    swift_bridgeObjectRetain(v16);
    sub_1000122B4(v18, v19);
    *v17 = v18;
    v17[1] = v19;
    v20 = a3[8];
    v21 = (uint64_t *)((char *)v4 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = *v22;
    v24 = v22[1];
    sub_1000122B4(*v22, v24);
    *v21 = v23;
    v21[1] = v24;
  }
  return v4;
}

uint64_t sub_100021B68(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  sub_100011F40(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  return sub_100011F40(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
}

_QWORD *sub_100021BE4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v12 = swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10, v12);
  v13 = a3[6];
  v14 = a3[7];
  v15 = *(_QWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + v13) = v15;
  v16 = (_QWORD *)((char *)a1 + v14);
  v17 = *(_QWORD *)((char *)a2 + v14);
  v18 = *(_QWORD *)((char *)a2 + v14 + 8);
  swift_bridgeObjectRetain(v15);
  sub_1000122B4(v17, v18);
  *v16 = v17;
  v16[1] = v18;
  v19 = a3[8];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = *v21;
  v23 = v21[1];
  sub_1000122B4(*v21, v23);
  *v20 = v22;
  v20[1] = v23;
  return a1;
}

_QWORD *sub_100021CB0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = *(_QWORD *)((char *)a2 + v12);
  v14 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = *v17;
  v19 = v17[1];
  sub_1000122B4(*v17, v19);
  v20 = *v16;
  v21 = v16[1];
  *v16 = v18;
  v16[1] = v19;
  sub_100011F40(v20, v21);
  v22 = a3[8];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_1000122B4(*v24, v26);
  v27 = *v23;
  v28 = v23[1];
  *v23 = v25;
  v23[1] = v26;
  sub_100011F40(v27, v28);
  return a1;
}

_OWORD *sub_100021DA0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_100021E2C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = *(_QWORD *)((char *)a1 + v14);
  v16 = *(_QWORD *)((char *)a1 + v14 + 8);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  sub_100011F40(v15, v16);
  v17 = a3[8];
  v18 = *(_QWORD *)((char *)a1 + v17);
  v19 = *(_QWORD *)((char *)a1 + v17 + 8);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  sub_100011F40(v18, v19);
  return a1;
}

uint64_t sub_100021EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100021EF0);
}

uint64_t sub_100021EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100021F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021F78);
}

uint64_t sub_100021F78(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100021FEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_10010F4F8;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_10010F510;
    v4[4] = &unk_10010F510;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ApplicationManager()
{
  return objc_opt_self(_TtC10driverkitd18ApplicationManager);
}

uint64_t destroy for SerializedApplicationCache(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s10driverkitd26SerializedApplicationCacheVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for SerializedApplicationCache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for RealizedInfo.LoadInfo(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for SerializedApplicationCache(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExceptionList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExceptionList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SerializedApplicationCache()
{
  return &type metadata for SerializedApplicationCache;
}

uint64_t sub_100022254()
{
  return type metadata accessor for ApplicationCache(0);
}

uint64_t sub_10002225C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10010F5F0;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SerializedApplicationCache.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100022328 + 4 * byte_10010F39A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002235C + 4 * byte_10010F395[v4]))();
}

uint64_t sub_10002235C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022364(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002236CLL);
  return result;
}

uint64_t sub_100022378(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100022380);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100022384(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002238C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SerializedApplicationCache.CodingKeys()
{
  return &type metadata for SerializedApplicationCache.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ApplicationRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplicationRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100022484 + 4 * byte_10010F3A4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000224B8 + 4 * byte_10010F39F[v4]))();
}

uint64_t sub_1000224B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000224C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000224C8);
  return result;
}

uint64_t sub_1000224D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000224DCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000224E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000224E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApplicationRecord.CodingKeys()
{
  return &type metadata for ApplicationRecord.CodingKeys;
}

unint64_t sub_100022508()
{
  unint64_t result;

  result = qword_10015D5F0;
  if (!qword_10015D5F0)
  {
    result = swift_getWitnessTable(&unk_10010F6A4, &type metadata for ApplicationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015D5F0);
  }
  return result;
}

unint64_t sub_100022550()
{
  unint64_t result;

  result = qword_10015D800[0];
  if (!qword_10015D800[0])
  {
    result = swift_getWitnessTable(&unk_10010F75C, &type metadata for SerializedApplicationCache.CodingKeys);
    atomic_store(result, qword_10015D800);
  }
  return result;
}

unint64_t sub_100022598()
{
  unint64_t result;

  result = qword_10015D910;
  if (!qword_10015D910)
  {
    result = swift_getWitnessTable(&unk_10010F6CC, &type metadata for SerializedApplicationCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015D910);
  }
  return result;
}

unint64_t sub_1000225E0()
{
  unint64_t result;

  result = qword_10015D918[0];
  if (!qword_10015D918[0])
  {
    result = swift_getWitnessTable(&unk_10010F6F4, &type metadata for SerializedApplicationCache.CodingKeys);
    atomic_store(result, qword_10015D918);
  }
  return result;
}

unint64_t sub_100022628()
{
  unint64_t result;

  result = qword_10015D9A0;
  if (!qword_10015D9A0)
  {
    result = swift_getWitnessTable(&unk_10010F614, &type metadata for ApplicationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015D9A0);
  }
  return result;
}

unint64_t sub_100022670()
{
  unint64_t result;

  result = qword_10015D9A8[0];
  if (!qword_10015D9A8[0])
  {
    result = swift_getWitnessTable(&unk_10010F63C, &type metadata for ApplicationRecord.CodingKeys);
    atomic_store(result, qword_10015D9A8);
  }
  return result;
}

uint64_t sub_1000226B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1000226E0()
{
  unint64_t result;

  result = qword_1001585B8;
  if (!qword_1001585B8)
  {
    result = swift_getWitnessTable(&unk_10010F484, &type metadata for SerializedApplicationCache);
    atomic_store(result, (unint64_t *)&qword_1001585B8);
  }
  return result;
}

unint64_t sub_100022724()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001585D8;
  if (!qword_1001585D8)
  {
    v1 = sub_100011CE4(&qword_100158298);
    sub_10001AB98();
    sub_100012534(&qword_1001585E0, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F3FC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001585D8);
  }
  return result;
}

uint64_t sub_1000227A8(_QWORD *a1)
{
  uint64_t v1;

  return sub_10001BCA8(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1000227C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ApplicationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for FileAttributeKey()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1001585E8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_1001465E8);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1001585E8);
  }
}

uint64_t sub_100022858()
{
  return sub_100012534(&qword_1001585F0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10010F890);
}

uint64_t sub_100022884()
{
  return sub_100012534(&qword_1001585F8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10010F864);
}

uint64_t sub_1000228B0()
{
  return sub_100012534(&qword_100158600, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10010F900);
}

uint64_t type metadata accessor for ActiveDriverInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_10015DDB0;
  if (!qword_10015DDB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActiveDriverInfo);
  return result;
}

uint64_t sub_100022918()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  _QWORD v10[2];

  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v10, "Active Driver ");
  HIBYTE(v10[1]) = -18;
  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ActiveDriverInfo(0) + 20));
  v2 = *v1;
  v3 = (void *)v1[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 544497952;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  v7._countAndFlagsBits = URL.path.getter(v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  return v10[0];
}

uint64_t sub_1000229F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if ((static URL.== infix(_:_:)() & 1) == 0)
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  if (v7 == *v9 && v8 == v10)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0);
}

uint64_t sub_100022A64()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100022A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *sub_100022ADC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j__swift_endAccess;
}

_QWORD *sub_100022B18(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_allocObject(v2, 80, 7);
  v5[2] = _swiftEmptyArrayStorage;
  v5[8] = a1;
  v5[9] = 0;
  sub_100004E2C(a2, (uint64_t)(v5 + 3));
  return v5;
}

uint64_t sub_100022B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = type metadata accessor for Logger(0);
  __chkstk_darwin(v1);
  v2 = *(_QWORD *)(v0 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 72);
LABEL_5:
    swift_bridgeObjectRetain(v2);
    return v3;
  }
  v4 = sub_100022FA4();
  v5 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 72) = v4;
  result = swift_bridgeObjectRelease(v5);
  v3 = *(_QWORD *)(v0 + 72);
  if (v3)
  {
    swift_bridgeObjectRetain(v3);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

unint64_t sub_100022DC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t active;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100005C88(&qword_1001587B8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100005C88(&qword_1001587C0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100026064(v13, (uint64_t)v5);
    v15 = *v5;
    v16 = v5[1];
    result = sub_100024B68(*v5, v16, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10000CFF8);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    active = type metadata accessor for ActiveDriverInfo(0);
    result = sub_100025930(v10, v21 + *(_QWORD *)(*(_QWORD *)(active - 8) + 72) * v19);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

_QWORD *sub_100022F68()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
  v2 = sub_1000257D4(v1);
  swift_bridgeObjectRelease(v1);
  return v2;
}

uint64_t sub_100022FA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD v41[5];
  uint64_t v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = sub_100005C88(&qword_1001587C8);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_100005C88(&qword_1001587B8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v40 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - v8;
  v10 = v0 + 3;
  v12 = v0[6];
  v11 = v0[7];
  sub_100004DE4(v10, v12);
  sub_100071700(v12, v11);
  v13 = v43;
  v38 = v44;
  sub_100004DE4(v42, v43);
  v14 = (uint64_t *)sub_10008F784();
  v16 = *v14;
  v15 = v14[1];
  v17 = sub_100005C88((uint64_t *)&unk_100159E60);
  v18 = swift_allocObject(v17, 48, 7);
  *(_OWORD *)(v18 + 16) = xmmword_10010F050;
  swift_bridgeObjectRetain(v15);
  v19 = (uint64_t *)sub_10008F598();
  v21 = *v19;
  v20 = v19[1];
  *(_QWORD *)(v18 + 32) = v21;
  *(_QWORD *)(v18 + 40) = v20;
  swift_bridgeObjectRetain(v20);
  v22 = sub_10006C9F8(v16, v15, (_QWORD *)v18);
  v41[3] = &type metadata for KernelRequests.GetDrivers;
  v41[4] = &off_100148838;
  v41[0] = v22;
  v23 = sub_100005C88(&qword_1001587D0);
  v24 = (uint64_t)v39;
  sub_10006B0B8(v41, v23, v13, v23, v38, (uint64_t)&v45);
  v25 = v24;
  sub_100005D08(v41);
  if (v24)
    return sub_100005D08(v42);
  v39 = v9;
  v27 = v45;
  sub_100005D08(v42);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v37 = 0;
    swift_bridgeObjectRetain(v27);
    v29 = 0;
    v30 = _swiftEmptyArrayStorage;
    v38 = v4;
    v31 = v40;
    do
    {
      v42[0] = *(_QWORD *)(v27 + 8 * v29 + 32);
      sub_10002333C(v42, v3);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
      {
        sub_1000124F8((uint64_t)v3, &qword_1001587C8);
      }
      else
      {
        v32 = (uint64_t)v39;
        sub_1000260AC((uint64_t)v3, (uint64_t)v39, &qword_1001587B8);
        sub_1000260AC(v32, v31, &qword_1001587B8);
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
          v30 = (_QWORD *)sub_100024BE0(0, v30[2] + 1, 1, (unint64_t)v30);
        v34 = v30[2];
        v33 = v30[3];
        if (v34 >= v33 >> 1)
          v30 = (_QWORD *)sub_100024BE0(v33 > 1, v34 + 1, 1, (unint64_t)v30);
        v30[2] = v34 + 1;
        v31 = v40;
        sub_1000260AC(v40, (uint64_t)v30+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v34, &qword_1001587B8);
        v4 = v38;
      }
      ++v29;
    }
    while (v28 != v29);
    swift_bridgeObjectRelease(v27);
    v25 = v37;
  }
  else
  {
    v30 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v27);
  v35 = v30[2];
  if (v35)
  {
    sub_100005C88(&qword_1001587C0);
    v36 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v35);
  }
  else
  {
    v36 = &_swiftEmptyDictionarySingleton;
  }
  v42[0] = (uint64_t)v36;
  sub_100024DF0((uint64_t)v30, 1, (uint64_t)v42);
  if (!v25)
    return v42[0];
  result = swift_release(v42[0]);
  __break(1u);
  return result;
}

uint64_t sub_10002333C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;

  v94 = a2;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v89 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v89 - v11;
  v13 = *a1;
  v14 = (uint64_t *)sub_10008F4E4();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    v97 = 0u;
    v98 = 0u;
    goto LABEL_10;
  }
  v16 = *v14;
  v17 = v14[1];
  swift_bridgeObjectRetain(v17);
  v18 = sub_100024B68(v16, v17, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100005E4C);
  if ((v19 & 1) == 0)
  {
    v97 = 0u;
    v98 = 0u;
    swift_bridgeObjectRelease(v17);
    goto LABEL_10;
  }
  sub_100005D28(*(_QWORD *)(v13 + 56) + 32 * v18, (uint64_t)&v97);
  swift_bridgeObjectRelease(v17);
  if (!*((_QWORD *)&v98 + 1))
  {
LABEL_10:
    sub_1000124F8((uint64_t)&v97, &qword_100158018);
    goto LABEL_11;
  }
  v20 = v13;
  if ((swift_dynamicCast(&v95, &v97, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
  {
    v21 = v96;
    v92 = v95;
    v22 = (uint64_t *)sub_10008F598();
    v23 = v22;
    if (*(_QWORD *)(v13 + 16))
    {
      v24 = *v22;
      v25 = v22[1];
      swift_bridgeObjectRetain(v25);
      v26 = sub_100024B68(v24, v25, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100005E4C);
      if ((v27 & 1) != 0)
      {
        sub_100005D28(*(_QWORD *)(v20 + 56) + 32 * v26, (uint64_t)&v97);
      }
      else
      {
        v97 = 0u;
        v98 = 0u;
      }
      swift_bridgeObjectRelease(v25);
      if (*((_QWORD *)&v98 + 1))
      {
        if ((swift_dynamicCast(&v95, &v97, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
        {
          v44 = v95;
          v45 = v96;
          v46 = sub_10008F1F8();
          v47 = v46;
          if (*(_QWORD *)(v20 + 16))
          {
            v93 = v44;
            v48 = v21;
            v49 = *v46;
            v50 = v46[1];
            swift_bridgeObjectRetain(v50);
            v51 = sub_100024B68(v49, v50, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100005E4C);
            if ((v52 & 1) != 0)
            {
              sub_100005D28(*(_QWORD *)(v20 + 56) + 32 * v51, (uint64_t)&v97);
            }
            else
            {
              v97 = 0u;
              v98 = 0u;
            }
            swift_bridgeObjectRelease(v50);
            v21 = v48;
            if (*((_QWORD *)&v98 + 1))
            {
              if ((swift_dynamicCast(&v95, &v97, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
              {
                v68 = v95;
                v69 = v96;
                v70 = sub_100005C88(&qword_1001587B8);
                v71 = v94;
                v72 = (char *)v94 + *(int *)(v70 + 48);
                URL.init(fileURLWithPath:isDirectory:)(v93, v45, 1);
                swift_bridgeObjectRelease(v45);
                *v71 = v92;
                v71[1] = v48;
                v73 = (uint64_t *)&v72[*(int *)(type metadata accessor for ActiveDriverInfo(0) + 20)];
                *v73 = v68;
                v73[1] = v69;
                return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v71, 0, 1, v70);
              }
              swift_bridgeObjectRelease(v45);
              goto LABEL_36;
            }
          }
          else
          {
            v97 = 0u;
            v98 = 0u;
          }
          swift_bridgeObjectRelease(v45);
          sub_1000124F8((uint64_t)&v97, &qword_100158018);
LABEL_36:
          v74 = sub_1000D328C();
          (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v74, v3);
          v75 = v20;
          v76 = swift_bridgeObjectRetain_n(v20, 2);
          v77 = Logger.logObject.getter(v76);
          v78 = static os_log_type_t.error.getter(v77);
          if (os_log_type_enabled(v77, v78))
          {
            v79 = swift_slowAlloc(22, -1);
            v93 = v4;
            v80 = v79;
            v91 = (char *)swift_slowAlloc(64, -1);
            *(_QWORD *)&v97 = v91;
            *(_DWORD *)v80 = 136315394;
            v89 = v80 + 4;
            v81 = swift_bridgeObjectRetain(v75);
            v82 = Dictionary.description.getter(v81);
            v90 = v21;
            v84 = v83;
            swift_bridgeObjectRelease(v75);
            v95 = sub_1000055A0(v82, v84, (uint64_t *)&v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v89, v80 + 12);
            swift_bridgeObjectRelease_n(v75, 2);
            swift_bridgeObjectRelease(v84);
            *(_WORD *)(v80 + 12) = 2080;
            v85 = v3;
            v86 = *v47;
            v87 = v47[1];
            swift_bridgeObjectRetain(v87);
            v95 = sub_1000055A0(v86, v87, (uint64_t *)&v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v80 + 14, v80 + 22);
            swift_bridgeObjectRelease(v87);
            _os_log_impl((void *)&_mh_execute_header, v77, v78, "Codeless info %s did not contain identifier for key %s", (uint8_t *)v80, 0x16u);
            v88 = v91;
            swift_arrayDestroy(v91, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v88, -1, -1);
            swift_slowDealloc(v80, -1, -1);
            sub_100011F40(v92, v90);

            (*(void (**)(char *, uint64_t))(v93 + 8))(v7, v85);
            goto LABEL_15;
          }
          swift_bridgeObjectRelease_n(v75, 2);
          sub_100011F40(v92, v21);

          v40 = *(void (**)(char *, uint64_t))(v4 + 8);
          v41 = v7;
          goto LABEL_14;
        }
LABEL_26:
        v53 = sub_1000D328C();
        (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v10, v53, v3);
        v54 = v20;
        v55 = swift_bridgeObjectRetain_n(v20, 2);
        v56 = Logger.logObject.getter(v55);
        v57 = static os_log_type_t.error.getter(v56);
        if (os_log_type_enabled(v56, v57))
        {
          v58 = swift_slowAlloc(22, -1);
          v91 = (char *)swift_slowAlloc(64, -1);
          *(_QWORD *)&v97 = v91;
          *(_DWORD *)v58 = 136315394;
          v89 = v58 + 4;
          v59 = swift_bridgeObjectRetain(v54);
          v90 = (unint64_t)&type metadata for Any + 8;
          v60 = Dictionary.description.getter(v59);
          v93 = v4;
          v61 = v21;
          v63 = v62;
          swift_bridgeObjectRelease(v54);
          v95 = sub_1000055A0(v60, v63, (uint64_t *)&v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v89, v58 + 12);
          swift_bridgeObjectRelease_n(v54, 2);
          swift_bridgeObjectRelease(v63);
          *(_WORD *)(v58 + 12) = 2080;
          v64 = v3;
          v65 = *v23;
          v66 = v23[1];
          swift_bridgeObjectRetain(v66);
          v95 = sub_1000055A0(v65, v66, (uint64_t *)&v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v58 + 14, v58 + 22);
          swift_bridgeObjectRelease(v66);
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Codeless info %s did not contain path for key %s", (uint8_t *)v58, 0x16u);
          v67 = v91;
          swift_arrayDestroy(v91, 2, v90);
          swift_slowDealloc(v67, -1, -1);
          swift_slowDealloc(v58, -1, -1);
          sub_100011F40(v92, v61);

          (*(void (**)(char *, uint64_t))(v93 + 8))(v10, v64);
          goto LABEL_15;
        }
        swift_bridgeObjectRelease_n(v54, 2);
        sub_100011F40(v92, v21);

        v40 = *(void (**)(char *, uint64_t))(v4 + 8);
        v41 = v10;
        goto LABEL_14;
      }
    }
    else
    {
      v97 = 0u;
      v98 = 0u;
    }
    sub_1000124F8((uint64_t)&v97, &qword_100158018);
    goto LABEL_26;
  }
LABEL_11:
  v28 = sub_1000D328C();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v12, v28, v3);
  v29 = swift_bridgeObjectRetain_n(v13, 2);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter(v30);
  if (!os_log_type_enabled(v30, v31))
  {

    swift_bridgeObjectRelease_n(v13, 2);
    v40 = *(void (**)(char *, uint64_t))(v4 + 8);
    v41 = v12;
LABEL_14:
    v40(v41, v3);
    goto LABEL_15;
  }
  v32 = swift_slowAlloc(22, -1);
  v33 = swift_slowAlloc(64, -1);
  *(_QWORD *)&v97 = v33;
  *(_DWORD *)v32 = 136315394;
  v34 = swift_bridgeObjectRetain(v13);
  v93 = v4;
  v91 = (char *)&type metadata for Any + 8;
  v35 = Dictionary.description.getter(v34);
  v92 = v3;
  v37 = v36;
  swift_bridgeObjectRelease(v13);
  v95 = sub_1000055A0(v35, v37, (uint64_t *)&v97);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v32 + 4, v32 + 12);
  swift_bridgeObjectRelease_n(v13, 2);
  swift_bridgeObjectRelease(v37);
  *(_WORD *)(v32 + 12) = 2080;
  v38 = *v15;
  v39 = v15[1];
  swift_bridgeObjectRetain(v39);
  v95 = sub_1000055A0(v38, v39, (uint64_t *)&v97);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v32 + 14, v32 + 22);
  swift_bridgeObjectRelease(v39);
  _os_log_impl((void *)&_mh_execute_header, v30, v31, "Codeless info %s did not contain data for key %s", (uint8_t *)v32, 0x16u);
  swift_arrayDestroy(v33, 2, v91);
  swift_slowDealloc(v33, -1, -1);
  swift_slowDealloc(v32, -1, -1);

  (*(void (**)(char *, uint64_t))(v93 + 8))(v12, v92);
LABEL_15:
  v42 = sub_100005C88(&qword_1001587B8);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v94, 1, 1, v42);
}

uint64_t sub_100023CAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  os_log_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t active;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v6 = sub_100005C88(&qword_1001587E0);
  __chkstk_darwin(v6);
  v65 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  active = type metadata accessor for ActiveDriverInfo(0);
  v8 = __chkstk_darwin(active);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v57 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v57 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v57 - v17;
  v19 = type metadata accessor for Logger(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000D328C();
  v63 = v20;
  v64 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v23, v19);
  sub_1000258EC(a1, (uint64_t)v18);
  v66 = a1;
  sub_1000258EC(a1, (uint64_t)v16);
  sub_1000258EC(a2, (uint64_t)v13);
  v24 = sub_1000258EC(a2, (uint64_t)v10);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  v27 = v26;
  if (os_log_type_enabled(v25, v26))
  {
    v28 = swift_slowAlloc(42, -1);
    v61 = a3;
    v29 = v28;
    v59 = swift_slowAlloc(128, -1);
    v69 = v59;
    *(_DWORD *)v29 = 136315906;
    v58 = v27;
    v30 = active;
    v31 = (uint64_t *)&v18[*(int *)(active + 20)];
    v60 = a2;
    v57 = v25;
    v33 = *v31;
    v32 = v31[1];
    swift_bridgeObjectRetain(v32);
    v67 = sub_1000055A0(v33, v32, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v32);
    v34 = sub_100025974((uint64_t)v18);
    *(_WORD *)(v29 + 12) = 2080;
    v35 = URL.path.getter(v34);
    v37 = v36;
    v67 = sub_1000055A0(v35, v36, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease(v37);
    sub_100025974((uint64_t)v16);
    *(_WORD *)(v29 + 22) = 2080;
    v38 = (uint64_t *)&v13[*(int *)(v30 + 20)];
    v39 = *v38;
    v40 = v38[1];
    swift_bridgeObjectRetain(v40);
    v67 = sub_1000055A0(v39, v40, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v29 + 24, v29 + 32);
    swift_bridgeObjectRelease(v40);
    v41 = sub_100025974((uint64_t)v13);
    *(_WORD *)(v29 + 32) = 2080;
    v42 = URL.path.getter(v41);
    v44 = v43;
    v67 = sub_1000055A0(v42, v43, &v69);
    a2 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v29 + 34, v29 + 42);
    swift_bridgeObjectRelease(v44);
    sub_100025974((uint64_t)v10);
    v25 = v57;
    _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v58, "Drivers with identifiers %s (%s), %s (%s) have the same unique identifier", (uint8_t *)v29, 0x2Au);
    v45 = v59;
    swift_arrayDestroy(v59, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    v46 = v29;
    a3 = v61;
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {
    sub_100025974((uint64_t)v18);
    sub_100025974((uint64_t)v16);
    sub_100025974((uint64_t)v13);
    sub_100025974((uint64_t)v10);
  }

  v47 = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v22, v64);
  v48 = v66;
  v69 = URL.path.getter(v47);
  v70 = v49;
  v67 = URL.path.getter(v69);
  v68 = v50;
  v51 = type metadata accessor for Locale(0);
  v52 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v65, 1, 1, v51);
  v53 = sub_100026250();
  v54 = StringProtocol.compare<A>(_:options:range:locale:)(&v67, 0, 0, 0, 1, v52, &type metadata for String, &type metadata for String, v53, v53);
  sub_1000124F8(v52, &qword_1001587E0);
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v70);
  if (v54 == -1)
    v55 = v48;
  else
    v55 = a2;
  return sub_1000258EC(v55, a3);
}

_UNKNOWN **sub_10002413C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _UNKNOWN **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100022FA4();
  v4 = v1;
  v5 = *(_QWORD *)(v0 + 72);
  if (!v5)
  {
    v6 = 0;
LABEL_7:
    *(_QWORD *)(v0 + 72) = v4;
    v3 = &off_100146730;
    v4 = v6;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v5);
  v2 = sub_10002472C(v4, v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  if ((v2 & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + 72);
    goto LABEL_7;
  }
  v3 = 0;
LABEL_8:
  swift_bridgeObjectRelease(v4);
  return v3;
}

uint64_t sub_100024200()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  void *v27;
  void *v28;
  Swift::String v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t active;
  int64_t v51;
  Swift::String v52;
  Swift::String v53;
  unint64_t v54;
  unint64_t v55;

  active = type metadata accessor for ActiveDriverInfo(0);
  v48 = *(_QWORD *)(active - 8);
  __chkstk_darwin(active);
  v2 = (char *)&v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005C88(&qword_100158618);
  v4 = __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __chkstk_darwin(v4);
  v9 = (uint64_t *)((char *)&v44 - v8);
  v54 = 0xD000000000000010;
  v55 = 0x8000000100122690;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 168))(v7);
  v51 = 0;
  v11 = *(_QWORD *)(result + 64);
  v46 = result + 64;
  v49 = result;
  v12 = 1 << *(_BYTE *)(result + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v47 = (unint64_t)(v12 + 63) >> 6;
  v45 = v47 - 1;
  if ((v13 & v11) == 0)
    goto LABEL_8;
LABEL_6:
  v31 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  v32 = v31 | (v51 << 6);
  while (2)
  {
    v33 = *(_QWORD *)(v49 + 56);
    v34 = (uint64_t *)(*(_QWORD *)(v49 + 48) + 16 * v32);
    v35 = *v34;
    v36 = v34[1];
    *v6 = *v34;
    v6[1] = v36;
    v37 = v33 + *(_QWORD *)(v48 + 72) * v32;
    v38 = sub_100005C88(&qword_100158620);
    sub_1000258EC(v37, (uint64_t)v6 + *(int *)(v38 + 48));
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v6, 0, 1, v38);
    sub_1000122B4(v35, v36);
    while (1)
    {
      sub_1000260AC((uint64_t)v6, (uint64_t)v9, &qword_100158618);
      v43 = sub_100005C88(&qword_100158620);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v9, 1, v43) == 1)
      {
        swift_release(v49);
        return v54;
      }
      v15 = *v9;
      v16 = v9[1];
      sub_100025930((uint64_t)v9 + *(int *)(v43 + 48), (uint64_t)v2);
      v53._countAndFlagsBits = 538976288;
      v53._object = (void *)0xE400000000000000;
      v17._countAndFlagsBits = sub_100013834(v15, v16);
      object = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      v19._countAndFlagsBits = 8250;
      v19._object = (void *)0xE200000000000000;
      String.append(_:)(v19);
      v52._countAndFlagsBits = 0;
      v52._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease(v52._object);
      strcpy((char *)&v52, "Active Driver ");
      HIBYTE(v52._object) = -18;
      v20 = (uint64_t *)&v2[*(int *)(active + 20)];
      v22 = *v20;
      v21 = (void *)v20[1];
      swift_bridgeObjectRetain(v21);
      v23._countAndFlagsBits = v22;
      v23._object = v21;
      String.append(_:)(v23);
      swift_bridgeObjectRelease(v21);
      v24._countAndFlagsBits = 544497952;
      v24._object = (void *)0xE400000000000000;
      String.append(_:)(v24);
      v26._countAndFlagsBits = URL.path.getter(v25);
      v27 = v26._object;
      String.append(_:)(v26);
      swift_bridgeObjectRelease(v27);
      v28 = v52._object;
      String.append(_:)(v52);
      swift_bridgeObjectRelease(v28);
      v29._countAndFlagsBits = 10;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      v30 = v53._object;
      String.append(_:)(v53);
      swift_bridgeObjectRelease(v30);
      sub_100011F40(v15, v16);
      result = sub_100025974((uint64_t)v2);
      if (v14)
        goto LABEL_6;
LABEL_8:
      v39 = v51 + 1;
      if (__OFADD__(v51, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v39 < v47)
      {
        v40 = *(_QWORD *)(v46 + 8 * v39);
        if (v40)
          goto LABEL_11;
        v41 = v51 + 2;
        ++v51;
        if (v39 + 1 < v47)
        {
          v40 = *(_QWORD *)(v46 + 8 * v41);
          if (v40)
            goto LABEL_14;
          v51 = v39 + 1;
          if (v39 + 2 < v47)
          {
            v40 = *(_QWORD *)(v46 + 8 * (v39 + 2));
            if (v40)
            {
              v39 += 2;
              goto LABEL_11;
            }
            v41 = v39 + 3;
            v51 = v39 + 2;
            if (v39 + 3 < v47)
              break;
          }
        }
      }
LABEL_25:
      v42 = sub_100005C88(&qword_100158620);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v6, 1, 1, v42);
      v14 = 0;
    }
    v40 = *(_QWORD *)(v46 + 8 * v41);
    if (v40)
    {
LABEL_14:
      v39 = v41;
LABEL_11:
      v14 = (v40 - 1) & v40;
      v32 = __clz(__rbit64(v40)) + (v39 << 6);
      v51 = v39;
      continue;
    }
    break;
  }
  while (1)
  {
    v39 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v39 >= v47)
    {
      v51 = v45;
      goto LABEL_25;
    }
    v40 = *(_QWORD *)(v46 + 8 * v39);
    ++v41;
    if (v40)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10002466C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100005D08((_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  return swift_deallocClassInstance(v0, 80, 7);
}

id sub_1000246A8()
{
  uint64_t v0;

  return *(id *)(v0 + 64);
}

uint64_t sub_1000246B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t sub_1000246BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

void (*sub_1000246C8(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 128))();
  return sub_10000C4BC;
}

uint64_t sub_100024714()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t sub_100024720()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t sub_10002472C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t active;
  int64_t v52;

  active = type metadata accessor for ActiveDriverInfo(0);
  v4 = *(_QWORD *)(active - 8);
  v5 = __chkstk_darwin(active);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v45 - v8;
  v10 = sub_100005C88(&qword_100158618);
  v11 = __chkstk_darwin(v10);
  v13 = (int64_t *)((char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = __chkstk_darwin(v11);
  v16 = (int64_t *)((char *)&v45 - v15);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v52 = 0;
  v49 = a1;
  v50 = v4;
  v17 = *(_QWORD *)(a1 + 64);
  v46 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v47 = (unint64_t)(v18 + 63) >> 6;
  v48 = v7;
  v45 = v47 - 1;
  while (1)
  {
    if (v20)
    {
      v21 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v22 = v21 | (v52 << 6);
LABEL_10:
      v23 = *(_QWORD *)(v49 + 56);
      v24 = (uint64_t *)(*(_QWORD *)(v49 + 48) + 16 * v22);
      v25 = *v24;
      v26 = v24[1];
      *v13 = *v24;
      v13[1] = v26;
      v27 = v23 + *(_QWORD *)(v4 + 72) * v22;
      v28 = sub_100005C88(&qword_100158620);
      sub_1000258EC(v27, (uint64_t)v13 + *(int *)(v28 + 48));
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v13, 0, 1, v28);
      sub_1000122B4(v25, v26);
      v7 = v48;
      goto LABEL_32;
    }
    v29 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v29 < v47)
    {
      v30 = *(_QWORD *)(v46 + 8 * v29);
      if (v30)
        goto LABEL_14;
      v31 = v52 + 2;
      ++v52;
      if (v29 + 1 < v47)
      {
        v30 = *(_QWORD *)(v46 + 8 * v31);
        if (v30)
          goto LABEL_17;
        v52 = v29 + 1;
        if (v29 + 2 < v47)
        {
          v30 = *(_QWORD *)(v46 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2;
            goto LABEL_14;
          }
          v52 = v29 + 2;
          if (v29 + 3 < v47)
          {
            v30 = *(_QWORD *)(v46 + 8 * (v29 + 3));
            if (v30)
            {
              v29 += 3;
              goto LABEL_14;
            }
            v31 = v29 + 4;
            v52 = v29 + 3;
            if (v29 + 4 < v47)
              break;
          }
        }
      }
    }
LABEL_31:
    v32 = sub_100005C88(&qword_100158620);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v13, 1, 1, v32);
    v20 = 0;
LABEL_32:
    sub_1000260AC((uint64_t)v13, (uint64_t)v16, &qword_100158618);
    v33 = sub_100005C88(&qword_100158620);
    v34 = 1;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v16, 1, v33) == 1)
      return v34;
    v35 = *v16;
    v36 = v16[1];
    sub_100025930((uint64_t)v16 + *(int *)(v33 + 48), (uint64_t)v9);
    v37 = sub_100024B68(v35, v36, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10000CFF8);
    v39 = v38;
    sub_100011F40(v35, v36);
    if ((v39 & 1) == 0)
      goto LABEL_40;
    v4 = v50;
    sub_1000258EC(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v50 + 72) * v37, (uint64_t)v7);
    if ((static URL.== infix(_:_:)(v7, v9) & 1) == 0
      || ((v40 = *(int *)(active + 20),
           v41 = *(_QWORD *)&v7[v40],
           v42 = *(_QWORD *)&v7[v40 + 8],
           v43 = &v9[v40],
           v44 = *((_QWORD *)v43 + 1),
           v41 != *(_QWORD *)v43)
       || v42 != v44)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, *(_QWORD *)v43, v44, 0) & 1) == 0)
    {
      sub_100025974((uint64_t)v7);
LABEL_40:
      sub_100025974((uint64_t)v9);
      return 0;
    }
    sub_100025974((uint64_t)v7);
    result = sub_100025974((uint64_t)v9);
  }
  v30 = *(_QWORD *)(v46 + 8 * v31);
  if (v30)
  {
LABEL_17:
    v29 = v31;
LABEL_14:
    v20 = (v30 - 1) & v30;
    v22 = __clz(__rbit64(v30)) + (v29 << 6);
    v52 = v29;
    goto LABEL_10;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v47)
    {
      v52 = v45;
      goto LABEL_31;
    }
    v30 = *(_QWORD *)(v46 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_14;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_100024B68(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  uint64_t v4;
  Swift::Int v8;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, *(_QWORD *)(v4 + 40));
  a3(v11, a1, a2);
  v8 = Hasher._finalize()();
  return a4(a1, a2, v8);
}

uint64_t sub_100024BE0(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005C88(&qword_1001587D8);
  v11 = *(_QWORD *)(sub_100005C88(&qword_1001587B8) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100005C88(&qword_1001587B8);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000260F0(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_100024DF0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t active;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD v59[2];
  uint64_t v60;

  v56 = a3;
  active = type metadata accessor for ActiveDriverInfo(0);
  v54 = *(_QWORD *)(active - 8);
  v6 = __chkstk_darwin(active);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v47 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v47 - v12;
  v14 = sub_100005C88(&qword_1001587B8);
  v15 = __chkstk_darwin(v14);
  v18 = (uint64_t *)((char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
    return swift_bridgeObjectRelease(a1);
  v53 = (uint64_t)v18 + *(int *)(v15 + 48);
  v20 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v51 = *(_QWORD *)(v16 + 72);
  v48 = a1;
  swift_bridgeObjectRetain(a1);
  v52 = v18;
  v49 = v11;
  while (1)
  {
    v55 = v19;
    v25 = (uint64_t)v8;
    sub_100026064(v20, (uint64_t)v18);
    v26 = v18[1];
    v59[0] = *v18;
    v27 = v59[0];
    v59[1] = v26;
    v28 = (uint64_t)v13;
    sub_100025930(v53, (uint64_t)v13);
    v29 = *(_QWORD **)v56;
    v31 = sub_100024B68(v27, v26, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10000CFF8);
    v32 = v29[2];
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
      __break(1u);
      goto LABEL_22;
    }
    v35 = v30;
    if (v29[3] >= v34)
    {
      if ((a2 & 1) == 0)
        sub_100025238();
    }
    else
    {
      sub_100025468(v34, a2 & 1);
      v36 = sub_100024B68(v27, v26, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10000CFF8);
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_21;
      v31 = v36;
    }
    v38 = *(_QWORD **)v56;
    if ((v35 & 1) != 0)
      break;
    v38[(v31 >> 6) + 8] |= 1 << v31;
    v21 = (uint64_t *)(v38[6] + 16 * v31);
    *v21 = v27;
    v21[1] = v26;
    v13 = (char *)v28;
    sub_100025930(v28, v38[7] + *(_QWORD *)(v54 + 72) * v31);
    v22 = v38[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_20;
    v38[2] = v24;
    v8 = (char *)v25;
LABEL_5:
    v18 = v52;
    v20 += v51;
    a2 = 1;
    v19 = v55 - 1;
    if (v55 == 1)
      return swift_bridgeObjectRelease_n(v48, 2);
  }
  v39 = v38[7];
  v40 = *(_QWORD *)(v54 + 72) * v31;
  v8 = (char *)v25;
  sub_1000258EC(v39 + v40, v25);
  v41 = (uint64_t)v49;
  v13 = (char *)v28;
  sub_100023CAC((uint64_t)v8, v28, (uint64_t)v49);
  if (!v50)
  {
    sub_100025974((uint64_t)v8);
    sub_100025974(v28);
    sub_100011F40(v27, v26);
    sub_10002620C(v41, *(_QWORD *)(*(_QWORD *)v56 + 56) + v40);
    goto LABEL_5;
  }
  sub_100025974((uint64_t)v8);
  v60 = v50;
  swift_errorRetain(v50);
  v43 = sub_100005C88(&qword_10015AB50);
  if ((swift_dynamicCast(v43, &v60, v43, &type metadata for _MergeError, 0) & 1) == 0)
  {
    v44 = v48;
    swift_bridgeObjectRelease(v48);
    sub_100025974(v28);
    sub_100011F40(v27, v26);
    swift_bridgeObjectRelease(v44);
    return swift_errorRelease(v60);
  }
LABEL_22:
  v57 = 0;
  v58 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v45._object = (void *)0x8000000100122710;
  v45._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  _print_unlocked<A, B>(_:_:)(v59, &v57, &type metadata for Data, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v46._countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v57, v58, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

void *sub_100025238()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t active;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  active = type metadata accessor for ActiveDriverInfo(0);
  v30 = *(_QWORD *)(active - 8);
  __chkstk_darwin(active);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005C88(&qword_1001587C0);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v28 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v29 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v20 = *v19;
    v21 = v19[1];
    v22 = *(_QWORD *)(v30 + 72) * v17;
    sub_1000258EC(*(_QWORD *)(v5 + 56) + v22, (uint64_t)v4);
    v23 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v18);
    *v23 = v20;
    v23[1] = v21;
    sub_100025930((uint64_t)v4, *(_QWORD *)(v7 + 56) + v22);
    result = (void *)sub_1000122B4(v20, v21);
  }
  v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    result = (void *)swift_release(v5);
    v1 = v28;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_100025468(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t active;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int result;
  int64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  __int128 v44;
  _QWORD v45[9];

  v3 = v2;
  active = type metadata accessor for ActiveDriverInfo(0);
  v7 = *(_QWORD *)(active - 8);
  __chkstk_darwin(active);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100005C88(&qword_1001587C0);
  v43 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v42 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v40 = v3;
  v41 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_24;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = v42;
    v26 = v42[v24];
    ++v19;
    if (!v26)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = v42[v19];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v10);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            v19 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v19 >= v41)
              goto LABEL_36;
            v26 = v42[v19];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v19 = v27;
      }
    }
LABEL_23:
    v16 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v10 + 48);
    v29 = *(_QWORD *)(v7 + 72);
    v30 = *(_QWORD *)(v10 + 56) + v29 * v23;
    v31 = *(_QWORD *)(v28 + 16 * v23 + 8);
    v44 = *(_OWORD *)(v28 + 16 * v23);
    if ((v43 & 1) != 0)
    {
      sub_100025930(v30, (uint64_t)v9);
    }
    else
    {
      sub_1000258EC(v30, (uint64_t)v9);
      sub_1000122B4(v44, v31);
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v12 + 40));
    Data.hash(into:)(v45, v44, v31);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      v21 = v44;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      v21 = v44;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_OWORD *)(*(_QWORD *)(v12 + 48) + 16 * v20) = v21;
    result = sub_100025930((uint64_t)v9, *(_QWORD *)(v12 + 56) + v29 * v20);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v40;
  v25 = v42;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

_QWORD *sub_1000257D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100005C88(&qword_100157EA0);
  v4 = *(_QWORD *)(type metadata accessor for ActiveDriverInfo(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_100025DDC(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_100005DE0(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000258EC(uint64_t a1, uint64_t a2)
{
  uint64_t active;

  active = type metadata accessor for ActiveDriverInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(active - 8) + 16))(a2, a1, active);
  return a2;
}

uint64_t sub_100025930(uint64_t a1, uint64_t a2)
{
  uint64_t active;

  active = type metadata accessor for ActiveDriverInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(active - 8) + 32))(a2, a1, active);
  return a2;
}

uint64_t sub_100025974(uint64_t a1)
{
  uint64_t active;

  active = type metadata accessor for ActiveDriverInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(active - 8) + 8))(a1, active);
  return a1;
}

uint64_t *sub_1000259B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_100025A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100025A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_100025AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_100025B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100025BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100025C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100025C44);
}

uint64_t sub_100025C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100025CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100025CD0);
}

uint64_t sub_100025CD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100025D4C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10010FA08;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ActiveDriversStateManager()
{
  return objc_opt_self(_TtC10driverkitd25ActiveDriversStateManager);
}

uint64_t sub_100025DDC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t active;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;

  active = type metadata accessor for ActiveDriverInfo(0);
  v9 = *(_QWORD *)(active - 8);
  v10 = __chkstk_darwin(active);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v30 - v14;
  v35 = a4;
  v18 = *(_QWORD *)(a4 + 64);
  v17 = a4 + 64;
  v16 = v18;
  v19 = -1 << *(_BYTE *)(v17 - 32);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 32);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    sub_1000258EC(*(_QWORD *)(v35 + 56) + v29 * v25, (uint64_t)v12);
    sub_100025930((uint64_t)v12, (uint64_t)v15);
    result = sub_100025930((uint64_t)v15, a2);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v17 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v17 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100026064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_1001587B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000260AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005C88(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000260F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_100005C88(&qword_1001587B8) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002620C(uint64_t a1, uint64_t a2)
{
  uint64_t active;

  active = type metadata accessor for ActiveDriverInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(active - 8) + 40))(a2, a1, active);
  return a2;
}

unint64_t sub_100026250()
{
  unint64_t result;

  result = qword_10015BA10;
  if (!qword_10015BA10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10015BA10);
  }
  return result;
}

BOOL sub_100026294(char a1, char a2)
{
  return a1 == a2;
}

unint64_t sub_1000262B0()
{
  unint64_t result;

  result = qword_10015BAA0;
  if (!qword_10015BAA0)
  {
    result = swift_getWitnessTable(&unk_10010FA70, &type metadata for CollectionKind);
    atomic_store(result, (unint64_t *)&qword_10015BAA0);
  }
  return result;
}

unint64_t sub_1000262F8()
{
  unint64_t result;

  result = qword_1001587E8;
  if (!qword_1001587E8)
  {
    result = swift_getWitnessTable(&unk_10010FAD8, &type metadata for StripMode);
    atomic_store(result, (unint64_t *)&qword_1001587E8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CollectionKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CollectionKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100026418 + 4 * byte_10010FA61[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10002644C + 4 * asc_10010FA5C[v4]))();
}

uint64_t sub_10002644C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100026454(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002645CLL);
  return result;
}

uint64_t sub_100026468(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100026470);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100026474(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002647C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionKind()
{
  return &type metadata for CollectionKind;
}

uint64_t getEnumTagSinglePayload for ExceptionList.ExceptionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StripMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100026574 + 4 * byte_10010FA6B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000265A8 + 4 * byte_10010FA66[v4]))();
}

uint64_t sub_1000265A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000265B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000265B8);
  return result;
}

uint64_t sub_1000265C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000265CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000265D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000265D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StripMode()
{
  return &type metadata for StripMode;
}

uint64_t sub_100026604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4) & 1) == 0)
    return 1;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 32))(a1, a2, a3, a4);
  if ((v8 & 1) != 0)
  {
    v10 = (uint64_t *)sub_1000900E0();
    v11 = *v10;
    v12 = v10[1];
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(a4 + 40);
    v14 = swift_bridgeObjectRetain(v12);
    v15 = v13(a1, a2, v11, v12, a3, a4, v14);
    swift_bridgeObjectRelease(v12);
    return v15 & 1;
  }
  else
  {
    v16 = static os_log_type_t.error.getter(v8);
    v17 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_10010F050;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = sub_100026838();
    *(_QWORD *)(v18 + 32) = a1;
    *(_QWORD *)(v18 + 40) = a2;
    sub_10002687C();
    swift_bridgeObjectRetain(a2);
    v20 = (void *)static OS_os_log.default.getter(v19);
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v20, "Volume at path: %{public}s is not protected", 43, 2, v18);
    swift_bridgeObjectRelease(v18);

    return 0;
  }
}

unint64_t sub_100026838()
{
  unint64_t result;

  result = qword_10015BA30;
  if (!qword_10015BA30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10015BA30);
  }
  return result;
}

unint64_t sub_10002687C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001596F0;
  if (!qword_1001596F0)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001596F0);
  }
  return result;
}

uint64_t sub_1000268B8()
{
  return 1;
}

uint64_t sub_1000268C0()
{
  return 0;
}

uint64_t sub_1000268C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))() & 1;
}

uint64_t sub_1000268F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))() & 1;
}

uint64_t sub_100026920()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))() & 1;
}

uint64_t sub_10002694C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))() & 1;
}

uint64_t sub_10002697C(uint64_t a1, uint64_t a2)
{
  return sub_100026988(a1, a2, (uint64_t)&off_100146918);
}

uint64_t sub_100026988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_100026A00(v10, v7, v8);
}

uint64_t sub_100026A00(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_1001587F0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_100026A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_1001587F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t type metadata accessor for EmbeddedSIPStatus()
{
  return objc_opt_self(_TtC10driverkitd17EmbeddedSIPStatus);
}

void sub_100026AD8()
{
  qword_100175280 = (uint64_t)&off_100146988;
}

uint64_t *sub_100026AEC()
{
  if (qword_10015DFC0 != -1)
    swift_once(&qword_10015DFC0, sub_100026AD8);
  return &qword_100175280;
}

void *sub_100026B2C()
{
  return &unk_100146968;
}

void *sub_100026B38()
{
  return &unk_100146978;
}

_UNKNOWN **sub_100026B44()
{
  return &off_100146A40;
}

unint64_t sub_100026B50(char a1)
{
  unint64_t result;

  result = 0xD000000000000011;
  if (a1)
  {
    if (a1 == 1)
      return 0xD00000000000001ALL;
    else
      return 0xD00000000000001DLL;
  }
  return result;
}

uint64_t sub_100026BB0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100026CFC(*a1, *a2);
}

void sub_100026BBC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100026BFC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100026C54 + 4 * byte_10010FBBA[a2]))(21580);
}

uint64_t sub_100026C54(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 21580 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 21580, 0xE200000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v2 & 1;
}

uint64_t sub_100026CFC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000011;
  v3 = 0x8000000100122930;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD00000000000001ALL;
    else
      v5 = 0xD00000000000001DLL;
    if (v4 == 1)
      v6 = 0x8000000100122950;
    else
      v6 = 0x8000000100122970;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000011;
  v6 = 0x8000000100122930;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD00000000000001ALL;
    else
      v2 = 0xD00000000000001DLL;
    if (v7 == 1)
      v3 = 0x8000000100122950;
    else
      v3 = 0x8000000100122970;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

Swift::Int sub_100026DF8()
{
  char *v0;

  return sub_100026E00(*v0);
}

Swift::Int sub_100026E00(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = 0xD000000000000011;
  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD00000000000001ALL;
    else
      v2 = 0xD00000000000001DLL;
    if (a1 == 1)
      v3 = 0x8000000100122950;
    else
      v3 = 0x8000000100122970;
  }
  else
  {
    v3 = 0x8000000100122930;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_100026EA8(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_100026EF0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 21580, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100026F54(uint64_t a1)
{
  char *v1;

  return sub_100026F5C(a1, *v1);
}

uint64_t sub_100026F5C(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 0xD000000000000011;
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD00000000000001ALL;
    else
      v3 = 0xD00000000000001DLL;
    if (a2 == 1)
      v4 = 0x8000000100122950;
    else
      v4 = 0x8000000100122970;
  }
  else
  {
    v4 = 0x8000000100122930;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_100026FDC(uint64_t a1)
{
  char *v1;

  return sub_100026FE4(a1, *v1);
}

Swift::Int sub_100026FE4(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD000000000000011;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD00000000000001ALL;
    else
      v3 = 0xD00000000000001DLL;
    if (a2 == 1)
      v4 = 0x8000000100122950;
    else
      v4 = 0x8000000100122970;
  }
  else
  {
    v4 = 0x8000000100122930;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_100027088(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000270CC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 21580, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100027130@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10002B1F4(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10002715C@<X0>(unint64_t *a1@<X8>)
{
  char *v1;
  unint64_t result;
  unint64_t v4;

  result = sub_100026B50(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100027184(_QWORD *a1@<X8>)
{
  *a1 = &off_100146A68;
}

void sub_100027194(char *a1)
{
  sub_100026BBC(*a1);
}

void sub_1000271A0()
{
  char *v0;

  sub_100026EA8(*v0);
}

void sub_1000271A8()
{
  __asm { BR              X10 }
}

uint64_t sub_1000271DC(uint64_t a1)
{
  String.hash(into:)(a1, 21580, 0xE200000000000000);
  return swift_bridgeObjectRelease(0xE200000000000000);
}

void sub_10002722C(uint64_t a1)
{
  char *v1;

  sub_100027088(a1, *v1);
}

unint64_t sub_100027234@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10002B250(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100027260()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100027288 + 4 * byte_10010FBD2[*v0]))();
}

void sub_100027288(_QWORD *a1@<X8>)
{
  *a1 = 21580;
  a1[1] = 0xE200000000000000;
}

void sub_100027298(_QWORD *a1@<X8>)
{
  *a1 = 17740;
  a1[1] = 0xE200000000000000;
}

void sub_1000272A8(_QWORD *a1@<X8>)
{
  *a1 = 20805;
  a1[1] = 0xE200000000000000;
}

void sub_1000272B8(_QWORD *a1@<X8>)
{
  *a1 = 21575;
  a1[1] = 0xE200000000000000;
}

void sub_1000272C8(_QWORD *a1@<X8>)
{
  *a1 = 17735;
  a1[1] = 0xE200000000000000;
}

void sub_1000272D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = v1[1];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  __asm { BR              X10 }
}

void sub_10002733C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  String.hash(into:)(v0, 21580, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  if (*(_QWORD *)(v1 + 32) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    v2 = sub_10002B298();
    ((void (*)(uint64_t, ValueMetadata *, unint64_t))dispatch thunk of Hashable.hash(into:))(v0, &type metadata for CodeSigningHash, v2);
  }
}

Swift::Int sub_1000273F0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000272D8((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100027430(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000272D8((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_100027468(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_1000273EC(v5, v7) & 1;
}

uint64_t sub_1000274B0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  char v34;
  uint64_t v35;
  unint64_t v36;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 144))();
  v9 = v8;
  if (!*(_QWORD *)(a3 + 16) || (v10 = sub_100005DE8(v7, v8), (v11 & 1) == 0))
  {
    v23 = v9;
LABEL_9:
    swift_bridgeObjectRelease(v23);
    return 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v10);
  swift_bridgeObjectRetain(v12);
  v13 = swift_bridgeObjectRelease(v9);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 184))(v13);
  if (!v14)
  {
    v23 = v12;
    goto LABEL_9;
  }
  v15 = v14;
  if (!a2)
  {
    v24 = *(_QWORD *)(v12 + 56);
    v25 = 1 << *(_BYTE *)(v12 + 32);
    v26 = -1;
    if (v25 < 64)
      v26 = ~(-1 << v25);
    v31 = (unint64_t)(v25 + 63) >> 6;
    if ((v26 & v24) != 0)
    {
      v27 = __clz(__rbit64(v26 & v24));
      goto LABEL_30;
    }
    if ((unint64_t)(v25 + 63) >> 6 > 1)
    {
      v28 = *(_QWORD *)(v12 + 64);
      v29 = 1;
      if (v28)
        goto LABEL_29;
      v29 = 2;
      if (v31 <= 2)
        goto LABEL_32;
      v28 = *(_QWORD *)(v12 + 72);
      if (v28)
        goto LABEL_29;
      v29 = 3;
      if (v31 <= 3)
        goto LABEL_32;
      v28 = *(_QWORD *)(v12 + 80);
      if (v28)
      {
LABEL_29:
        v27 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_30:
        __asm { BR              X9 }
      }
      v30 = 4;
      if (v31 > 4)
      {
        v28 = *(_QWORD *)(v12 + 88);
        if (v28)
        {
          v29 = 4;
          goto LABEL_29;
        }
        while (1)
        {
          v29 = v30 + 1;
          if (__OFADD__(v30, 1))
          {
            __break(1u);
            JUMPOUT(0x100027A04);
          }
          if (v29 >= v31)
            break;
          v28 = *(_QWORD *)(v12 + 56 + 8 * v29);
          ++v30;
          if (v28)
            goto LABEL_29;
        }
      }
    }
LABEL_32:
    swift_bridgeObjectRelease(v14);
    swift_release(v12);
    return 0;
  }
  sub_10002B42C(a1 + 32, (uint64_t)v33);
  v16 = v35;
  if (v35)
  {
    v17 = v36;
    sub_100004DE4(v33, v35);
    v18 = (*(uint64_t (**)(uint64_t, unint64_t))(v17 + 32))(v16, v17);
    v20 = v19;
    sub_100005D08(v33);
    v33[0] = v32;
    v33[1] = v15;
    v34 = 3;
    v35 = v18;
    v36 = v20;
    sub_1000122B4(v18, v20);
    v21 = sub_100027A1C(v33, v12);
    swift_bridgeObjectRelease(v12);
    sub_100011F40(v18, v20);
    swift_bridgeObjectRelease(v15);
    sub_100021610(v18, v20);
    if ((v21 & 1) != 0)
      return 1;
  }
  else
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v15);
    sub_1000124F8((uint64_t)v33, &qword_100158010);
  }
  return 0;
}

uint64_t sub_100027A1C(uint64_t *a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(&v14, *(_QWORD *)(a2 + 40));
    sub_1000272D8((uint64_t)&v14);
    v4 = Hasher._finalize()();
    v5 = -1 << *(_BYTE *)(a2 + 32);
    v6 = v4 & ~v5;
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
    {
      v7 = *a1;
      v8 = a1[1];
      v13 = ~v5;
      do
      {
        v9 = *(_QWORD *)(a2 + 48) + 40 * v6;
        v10 = *(unsigned __int8 *)(v9 + 16);
        v11 = *(_QWORD *)v9 == v7 && *(_QWORD *)(v9 + 8) == v8;
        if (v11
          || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), v7, v8, 0) & 1) != 0)
        {
          __asm { BR              X8 }
        }
        v6 = (v6 + 1) & v13;
      }
      while (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
  }
  return 0;
}

_QWORD *sub_100027DB0(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10000C958(0, v1, 0);
    v3 = (_QWORD *)(a1 + 56);
    do
    {
      v4 = *(v3 - 3);
      v5 = *(v3 - 2);
      v6 = *(v3 - 1);
      v7 = *v3;
      swift_bridgeObjectRetain(*v3);
      v8 = static String._fromSubstring(_:)(v4, v5, v6, v7);
      v10 = v9;
      swift_bridgeObjectRelease(v7);
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_10000C958(v11 > 1, v12 + 1, 1);
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      v3 += 4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100027EAC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  unint64_t i;
  BOOL v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void (*v62)(_QWORD *);
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  Swift::String v70;
  unint64_t v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  int64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  Swift::String v119;
  Swift::Int v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  void (*v124)(_QWORD *);
  _QWORD *v125;
  char v126;
  Swift::String v127;
  void *v128;
  Swift::String v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[6];
  int64_t v136;
  uint64_t v137;
  __int128 v138;
  void *v139;
  int64_t v140;
  unint64_t v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  void *v146;
  unint64_t v147;
  _QWORD v148[2];
  char v149;
  __int128 v150;
  char v151[16];
  unint64_t *v152;
  _QWORD v153[4];
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  __int128 v158;
  __int128 v159;
  unint64_t v160;

  v3 = v2;
  v142 = a2;
  v5 = sub_10008F3C4();
  if (!*(_QWORD *)(a1 + 16))
  {
    v158 = 0u;
    v159 = 0u;
    goto LABEL_12;
  }
  v7 = *v5;
  v6 = v5[1];
  swift_bridgeObjectRetain(v6);
  v8 = sub_100005DE8(v7, v6);
  if ((v9 & 1) == 0)
  {
    v158 = 0u;
    v159 = 0u;
    swift_bridgeObjectRelease(v6);
    goto LABEL_12;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v158);
  swift_bridgeObjectRelease(v6);
  if (!*((_QWORD *)&v159 + 1))
  {
LABEL_12:
    sub_1000124F8((uint64_t)&v158, &qword_100158018);
    v12 = 0;
    v13 = 0;
    goto LABEL_13;
  }
  v10 = swift_dynamicCast(&v154, &v158, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  v11 = v10 == 0;
  if (v10)
    v12 = v154;
  else
    v12 = 0;
  if (v11)
    v13 = 0;
  else
    v13 = v155;
LABEL_13:
  v14 = sub_1000D4D90(v12, v13);
  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)&v158 = 0;
    *((_QWORD *)&v158 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    if ((_BYTE)v142)
    {
      if (v142 == 1)
        v20 = 0xD00000000000001ALL;
      else
        v20 = 0xD00000000000001DLL;
      if (v142 == 1)
        v21 = 0x8000000100122950;
      else
        v21 = 0x8000000100122970;
    }
    else
    {
      v20 = 0xD000000000000011;
      v21 = 0x8000000100122930;
    }
    v67 = v21;
    String.append(_:)(*(Swift::String *)&v20);
    swift_bridgeObjectRelease(v21);
    v68 = 0xD000000000000023;
    v69 = " has an invalid or missing version.";
    goto LABEL_83;
  }
  v16 = v14;
  v17 = 0xD000000000000011;
  if ((_BYTE)v142)
  {
    if (v142 == 1)
      v18 = 0xD00000000000001ALL;
    else
      v18 = 0xD00000000000001DLL;
    if (v142 == 1)
      v19 = 0x8000000100122950;
    else
      v19 = 0x8000000100122970;
  }
  else
  {
    v19 = 0x8000000100122930;
    v18 = 0xD000000000000011;
  }
  v135[5] = v16;
  if (*(_QWORD *)(a1 + 16) && (v22 = sub_100005DE8(v18, v19), (v23 & 1) != 0))
  {
    sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v22, (uint64_t)&v158);
  }
  else
  {
    v158 = 0u;
    v159 = 0u;
  }
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(a1);
  if (!*((_QWORD *)&v159 + 1))
  {
    sub_1000124F8((uint64_t)&v158, &qword_100158018);
    goto LABEL_72;
  }
  v24 = sub_100005C88(&qword_1001588B8);
  if (!swift_dynamicCast(&v154, &v158, (char *)&type metadata for Any + 8, v24, 6))
  {
LABEL_72:
    *(_QWORD *)&v158 = 0;
    *((_QWORD *)&v158 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    if ((_BYTE)v142)
    {
      if (v142 == 1)
        v17 = 0xD00000000000001ALL;
      else
        v17 = 0xD00000000000001DLL;
      if (v142 == 1)
        v66 = (void *)0x8000000100122950;
      else
        v66 = (void *)0x8000000100122970;
    }
    else
    {
      v66 = (void *)0x8000000100122930;
    }
    v70._countAndFlagsBits = v17;
    v70._object = v66;
    String.append(_:)(v70);
    swift_bridgeObjectRelease(v66);
    v68 = 0xD000000000000017;
    v69 = " has an invalid format.";
LABEL_83:
    v71 = (unint64_t)(v69 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v68);
    v72 = v158;
    v73 = sub_1000122F8();
    v74 = swift_allocError(&type metadata for KMError, v73, 0, 0);
    *(_OWORD *)v75 = v72;
    *(_OWORD *)(v75 + 16) = 0u;
    *(_OWORD *)(v75 + 32) = 0u;
    *(_OWORD *)(v75 + 48) = 0u;
    *(_QWORD *)(v75 + 64) = 0;
    *(_BYTE *)(v75 + 72) = 44;
    return swift_willThrow(v74);
  }
  v25 = v154;
  v26 = sub_100028EBC((uint64_t)_swiftEmptyArrayStorage);
  v141 = v25 + 64;
  v144 = v25;
  if ((_BYTE)v142)
  {
    v147 = v26;
    v27 = 1 << *(_BYTE *)(v25 + 32);
    v28 = -1;
    if (v27 < 64)
      v28 = ~(-1 << v27);
    v29 = v28 & *(_QWORD *)(v25 + 64);
    v140 = (unint64_t)(v27 + 63) >> 6;
    swift_bridgeObjectRetain(v25);
    v30 = 0;
    v137 = 0x8000000100122A40;
    *(_QWORD *)&v138 = 0x8000000100122A20;
    if (!v29)
      goto LABEL_40;
LABEL_39:
    v145 = (v29 - 1) & v29;
    v146 = v30;
    for (i = __clz(__rbit64(v29)) | ((_QWORD)v30 << 6); ; i = __clz(__rbit64(v34)) + (v33 << 6))
    {
      v36 = 16 * i;
      v37 = (uint64_t *)(*(_QWORD *)(v25 + 48) + v36);
      v38 = *v37;
      v39 = (void *)v37[1];
      v40 = (uint64_t *)(*(_QWORD *)(v25 + 56) + v36);
      v41 = *v40;
      v42 = (void *)v40[1];
      swift_bridgeObjectRetain(v39);
      v43 = swift_bridgeObjectRetain(v42);
      v154 = 9;
      v155 = 0xE100000000000000;
      v152 = &v154;
      swift_bridgeObjectRetain_n(v43, 2);
      v44 = sub_100029078(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002B474, (uint64_t)v151, v41, (unint64_t)v42);
      swift_bridgeObjectRelease(v42);
      v45 = sub_100027DB0((uint64_t)v44);
      swift_bridgeObjectRelease(v44);
      if (v45[2] != 2)
        break;
      v143 = v3;
      v47 = v45[4];
      v46 = (void *)v45[5];
      v48 = v45[7];
      v139 = (void *)v45[6];
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRetain(v39);
      v49 = sub_1000DBB40(v38, (unint64_t)v39);
      if (v50 >> 60 == 15)
      {
        swift_bridgeObjectRelease(v48);
        v154 = 0;
        v155 = 0xE000000000000000;
        _StringGuts.grow(_:)(32);
        swift_bridgeObjectRelease(v155);
        v154 = 0xD000000000000016;
        v155 = v137;
        v51._countAndFlagsBits = v38;
        v51._object = v39;
        String.append(_:)(v51);
        v52._countAndFlagsBits = 0x20726F662027;
        v52._object = (void *)0xE600000000000000;
        String.append(_:)(v52);
        v53._countAndFlagsBits = v47;
        v53._object = v46;
        String.append(_:)(v53);
        swift_bridgeObjectRelease(v46);
        goto LABEL_59;
      }
      v59 = v49;
      v60 = v50;
      v154 = v47;
      v155 = (unint64_t)v46;
      v61 = sub_10002B48C();
      sub_1000D5658((uint64_t)&v154, (uint64_t)&v147, (uint64_t)&type metadata for String, (uint64_t)&type metadata for ExceptionList.ExceptionMatch, (uint64_t)&protocol witness table for String, v61);
      v62 = sub_100028FD4(v153, v47, (uint64_t)v46);
      if (*v63)
      {
        *(_QWORD *)&v158 = v139;
        *((_QWORD *)&v158 + 1) = v48;
        LOBYTE(v159) = 3;
        *((_QWORD *)&v159 + 1) = v59;
        v160 = v60;
        sub_1000122B4(v59, v60);
        sub_10002977C((uint64_t)&v154, (uint64_t)&v158);
        ((void (*)(_QWORD *, _QWORD))v62)(v153, 0);
        sub_100021610(v59, v60);
        swift_bridgeObjectRelease(v46);
        v64 = v156;
        v65 = v157;
        swift_bridgeObjectRelease(v155);
        sub_100021610(v64, v65);
      }
      else
      {
        swift_bridgeObjectRelease(v48);
        ((void (*)(_QWORD *, _QWORD))v62)(v153, 0);
        sub_100021610(v59, v60);
        swift_bridgeObjectRelease(v46);
      }
      v25 = v144;
      v3 = v143;
      if (v143)
      {
LABEL_84:
        v77 = v147;
        swift_release(v25);
        swift_bridgeObjectRelease(v25);
        v78 = v42;
        goto LABEL_135;
      }
LABEL_65:
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v39);
      v30 = v146;
      v29 = v145;
      if (v145)
        goto LABEL_39;
LABEL_40:
      v32 = __OFADD__(v30, 1);
      v33 = (int64_t)v30 + 1;
      if (v32)
      {
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
        JUMPOUT(0x100028EA4);
      }
      if (v33 >= v140)
        goto LABEL_130;
      v34 = *(_QWORD *)(v141 + 8 * v33);
      if (!v34)
      {
        v35 = v33 + 1;
        if (v33 + 1 >= v140)
          goto LABEL_130;
        v34 = *(_QWORD *)(v141 + 8 * v35);
        if (!v34)
        {
          v35 = v33 + 2;
          if (v33 + 2 >= v140)
            goto LABEL_130;
          v34 = *(_QWORD *)(v141 + 8 * v35);
          if (!v34)
          {
            v35 = v33 + 3;
            if (v33 + 3 >= v140)
              goto LABEL_130;
            v34 = *(_QWORD *)(v141 + 8 * v35);
            if (!v34)
            {
              v35 = v33 + 4;
              if (v33 + 4 >= v140)
                goto LABEL_130;
              v34 = *(_QWORD *)(v141 + 8 * v35);
              if (!v34)
              {
                v35 = v33 + 5;
                if (v33 + 5 >= v140)
                {
LABEL_130:
                  swift_release(v25);
                  swift_bridgeObjectRelease(v25);
                  return v142;
                }
                v34 = *(_QWORD *)(v141 + 8 * v35);
                if (!v34)
                {
                  while (1)
                  {
                    v33 = v35 + 1;
                    if (__OFADD__(v35, 1))
                      goto LABEL_139;
                    if (v33 >= v140)
                      goto LABEL_130;
                    v34 = *(_QWORD *)(v141 + 8 * v33);
                    ++v35;
                    if (v34)
                      goto LABEL_54;
                  }
                }
              }
            }
          }
        }
        v33 = v35;
      }
LABEL_54:
      v145 = (v34 - 1) & v34;
      v146 = (void *)v33;
    }
    swift_bridgeObjectRelease(v45);
    v154 = 0;
    v155 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(v155);
    v154 = 0xD00000000000001FLL;
    v155 = v138;
    v54._countAndFlagsBits = v41;
    v54._object = v42;
    String.append(_:)(v54);
LABEL_59:
    v56 = v154;
    v55 = v155;
    v57 = sub_1000122F8();
    v3 = swift_allocError(&type metadata for KMError, v57, 0, 0);
    *(_QWORD *)v58 = v56;
    *(_QWORD *)(v58 + 8) = v55;
    *(_OWORD *)(v58 + 16) = 0u;
    *(_OWORD *)(v58 + 32) = 0u;
    *(_OWORD *)(v58 + 48) = 0u;
    *(_QWORD *)(v58 + 64) = 0;
    *(_BYTE *)(v58 + 72) = 44;
    swift_willThrow(v3);
    v25 = v144;
    if (v3)
      goto LABEL_84;
    goto LABEL_65;
  }
  v153[0] = v26;
  v79 = 1 << *(_BYTE *)(v25 + 32);
  v80 = -1;
  if (v79 < 64)
    v80 = ~(-1 << v79);
  v81 = v80 & *(_QWORD *)(v25 + 64);
  v136 = (unint64_t)(v79 + 63) >> 6;
  v82 = swift_bridgeObjectRetain(v25);
  v83 = 0;
  v138 = xmmword_10010FE40;
  while (1)
  {
    if (v81)
    {
      v145 = (v81 - 1) & v81;
      v90 = __clz(__rbit64(v81)) | (v83 << 6);
      goto LABEL_107;
    }
    v32 = __OFADD__(v83++, 1);
    if (v32)
      goto LABEL_138;
    if (v83 >= v136)
      goto LABEL_131;
    v91 = *(_QWORD *)(v141 + 8 * v83);
    if (!v91)
      break;
LABEL_106:
    v145 = (v91 - 1) & v91;
    v90 = __clz(__rbit64(v91)) + (v83 << 6);
LABEL_107:
    v93 = 16 * v90;
    v94 = *(_QWORD *)(v25 + 56);
    v95 = (uint64_t *)(*(_QWORD *)(v25 + 48) + v93);
    v39 = (void *)v95[1];
    v143 = *v95;
    v96 = (uint64_t *)(v94 + v93);
    v98 = *v96;
    v97 = v96[1];
    *(_QWORD *)&v158 = 32;
    *((_QWORD *)&v158 + 1) = 0xE100000000000000;
    __chkstk_darwin(v82);
    v135[2] = &v158;
    swift_bridgeObjectRetain_n(v97, 4);
    swift_bridgeObjectRetain_n(v39, 2);
    v137 = v98;
    v99 = sub_100029078(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002B474, (uint64_t)v135, v98, v97);
    v146 = (void *)v97;
    swift_bridgeObjectRelease(v97);
    v100 = *((_QWORD *)v99 + 2);
    if (v100)
    {
      v139 = v39;
      v140 = v83;
      v101 = v3;
      *(_QWORD *)&v158 = _swiftEmptyArrayStorage;
      sub_10000C958(0, v100, 0);
      v102 = (_QWORD *)v158;
      v103 = v99 + 56;
      do
      {
        v104 = *(v103 - 3);
        v105 = *(v103 - 2);
        v106 = *(v103 - 1);
        v107 = *v103;
        swift_bridgeObjectRetain(*v103);
        v108 = static String._fromSubstring(_:)(v104, v105, v106, v107);
        v110 = v109;
        swift_bridgeObjectRelease(v107);
        *(_QWORD *)&v158 = v102;
        v112 = v102[2];
        v111 = v102[3];
        if (v112 >= v111 >> 1)
        {
          sub_10000C958(v111 > 1, v112 + 1, 1);
          v102 = (_QWORD *)v158;
        }
        v102[2] = v112 + 1;
        v113 = &v102[2 * v112];
        v113[4] = v108;
        v113[5] = v110;
        v103 += 4;
        --v100;
      }
      while (v100);
      swift_bridgeObjectRelease(v99);
      v3 = v101;
      v83 = v140;
      v39 = v139;
    }
    else
    {
      swift_bridgeObjectRelease(v99);
      v102 = _swiftEmptyArrayStorage;
    }
    v114 = v102[2];
    if (v114 != 1)
    {
      if (v114 == 2)
      {
        v115 = v102[4];
        v116 = (void *)v102[5];
        v117 = v102[6];
        v118 = v102[7];
        swift_bridgeObjectRetain(v116);
        swift_bridgeObjectRetain(v118);
        swift_bridgeObjectRelease(v102);
        v119._countAndFlagsBits = v115;
        v119._object = v116;
        v120 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100146A90, v119);
        swift_bridgeObjectRelease(v116);
        v25 = v144;
        switch(v120)
        {
          case 0:
            swift_bridgeObjectRelease(v146);
            v121 = 0;
            goto LABEL_119;
          case 1:
            swift_bridgeObjectRelease(v146);
            v121 = 1;
            goto LABEL_119;
          case 2:
            swift_bridgeObjectRelease(v146);
            v121 = 2;
            goto LABEL_119;
          case 3:
            swift_bridgeObjectRelease(v146);
            v121 = 3;
            goto LABEL_119;
          case 4:
            swift_bridgeObjectRelease(v146);
            v121 = 4;
            goto LABEL_119;
          case 5:
            swift_bridgeObjectRelease(v146);
            v121 = 5;
            goto LABEL_119;
          default:
            swift_bridgeObjectRelease(v39);
            swift_bridgeObjectRelease(v118);
            goto LABEL_134;
        }
      }
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v102);
      v25 = v144;
LABEL_134:
      *(_QWORD *)&v158 = 0;
      *((_QWORD *)&v158 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease(*((_QWORD *)&v158 + 1));
      *(_QWORD *)&v158 = 0xD00000000000001DLL;
      *((_QWORD *)&v158 + 1) = 0x8000000100122A00;
      v127._countAndFlagsBits = v137;
      v128 = v146;
      v127._object = v146;
      String.append(_:)(v127);
      swift_bridgeObjectRelease(v128);
      v129._countAndFlagsBits = 39;
      v129._object = (void *)0xE100000000000000;
      String.append(_:)(v129);
      v131 = *((_QWORD *)&v158 + 1);
      v130 = v158;
      v132 = sub_1000122F8();
      v133 = swift_allocError(&type metadata for KMError, v132, 0, 0);
      *(_QWORD *)v134 = v130;
      *(_QWORD *)(v134 + 8) = v131;
      *(_OWORD *)(v134 + 16) = 0u;
      *(_OWORD *)(v134 + 32) = 0u;
      *(_OWORD *)(v134 + 48) = 0u;
      *(_QWORD *)(v134 + 64) = 0;
      *(_BYTE *)(v134 + 72) = 44;
      swift_willThrow(v133);
      v77 = v153[0];
      swift_release(v25);
      swift_bridgeObjectRelease(v25);
      v78 = v128;
LABEL_135:
      swift_bridgeObjectRelease(v78);
      swift_bridgeObjectRelease(v39);
      return swift_bridgeObjectRelease(v77);
    }
    v117 = v102[4];
    v118 = v102[5];
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRelease(v146);
    swift_bridgeObjectRelease(v102);
    v121 = 3;
    v25 = v144;
LABEL_119:
    v148[0] = v117;
    v148[1] = v118;
    v149 = v121;
    v150 = v138;
    v122 = v143;
    *(_QWORD *)&v158 = v143;
    *((_QWORD *)&v158 + 1) = v39;
    v123 = sub_10002B48C();
    sub_1000D5658((uint64_t)&v158, (uint64_t)v153, (uint64_t)&type metadata for String, (uint64_t)&type metadata for ExceptionList.ExceptionMatch, (uint64_t)&protocol witness table for String, v123);
    v124 = sub_100028FD4(&v154, v122, (uint64_t)v39);
    if (*v125)
    {
      swift_bridgeObjectRetain(v118);
      sub_10002B23C(0, 0xF000000000000000);
      v126 = sub_10002977C((uint64_t)&v158, (uint64_t)v148);
      ((void (*)(unint64_t *, _QWORD))v124)(&v154, 0);
      swift_bridgeObjectRelease(v118);
      sub_100021610(0, 0xF000000000000000);
      swift_bridgeObjectRelease(v39);
      v86 = *((_QWORD *)&v158 + 1);
      v85 = v158;
      v87 = v159;
      v84 = v126 & 1;
      v88 = *((_QWORD *)&v159 + 1);
      v89 = v160;
    }
    else
    {
      ((void (*)(unint64_t *, _QWORD))v124)(&v154, 0);
      swift_bridgeObjectRelease(v118);
      sub_100021610(0, 0xF000000000000000);
      swift_bridgeObjectRelease(v39);
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
    }
    sub_10002B4D0(v84, v85, v86, v87, v88, v89);
    swift_bridgeObjectRelease(v146);
    v82 = swift_bridgeObjectRelease(v39);
    v81 = v145;
  }
  v92 = v83 + 1;
  if (v83 + 1 >= v136)
    goto LABEL_131;
  v91 = *(_QWORD *)(v141 + 8 * v92);
  if (v91)
    goto LABEL_105;
  v92 = v83 + 2;
  if (v83 + 2 >= v136)
    goto LABEL_131;
  v91 = *(_QWORD *)(v141 + 8 * v92);
  if (v91)
    goto LABEL_105;
  v92 = v83 + 3;
  if (v83 + 3 >= v136)
    goto LABEL_131;
  v91 = *(_QWORD *)(v141 + 8 * v92);
  if (v91)
    goto LABEL_105;
  v92 = v83 + 4;
  if (v83 + 4 >= v136)
    goto LABEL_131;
  v91 = *(_QWORD *)(v141 + 8 * v92);
  if (v91)
    goto LABEL_105;
  v92 = v83 + 5;
  if (v83 + 5 >= v136)
    goto LABEL_131;
  v91 = *(_QWORD *)(v141 + 8 * v92);
  if (v91)
  {
LABEL_105:
    v83 = v92;
    goto LABEL_106;
  }
  while (1)
  {
    v83 = v92 + 1;
    if (__OFADD__(v92, 1))
      goto LABEL_140;
    if (v83 >= v136)
      break;
    v91 = *(_QWORD *)(v141 + 8 * v83);
    ++v92;
    if (v91)
      goto LABEL_106;
  }
LABEL_131:
  swift_release(v25);
  swift_bridgeObjectRelease(v25);
  return v142;
}

unint64_t sub_100028EBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_100158900);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100005DE8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void (*sub_100028FD4(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_10002969C(v6, a2, a3);
  return sub_100029040;
}

void sub_100029040(_QWORD *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

char *sub_100029078(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  _QWORD v52[4];

  v52[3] = a4;
  if (a1 < 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v11 = a5;
  v14 = swift_allocObject(&unk_100146DA0, 24, 7);
  *(_QWORD *)(v14 + 16) = _swiftEmptyArrayStorage;
  v49 = swift_allocObject(&unk_100146DC8, 24, 7);
  *(_QWORD *)(v49 + 16) = 15;
  v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v16 = HIBYTE(a6) & 0xF) : (v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v15 = v11 & 0xFFFFFFFFFFFFLL;
    v33 = 7;
    if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0)
      v33 = 11;
    sub_100029490(v33 | (v15 << 16), v49, a2 & 1, v14, v11, a6);
    swift_bridgeObjectRelease(a6);
    v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain(v10);
    swift_release(v14);
    v34 = v49;
    goto LABEL_40;
  }
  v44 = a1;
  v45 = v14;
  v17 = 7;
  if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0)
    v17 = 11;
  v43 = v17 | (v16 << 16);
  v50 = 4 * v16;
  v10 = (char *)_swiftEmptyArrayStorage;
  v9 = 15;
  v8 = 15;
  v18 = 15;
  while (1)
  {
    v19 = String.subscript.getter(v9, v11, a6);
    v21 = v20;
    v52[0] = v19;
    v52[1] = v20;
    v22 = a3(v52);
    if (v7)
    {
      swift_release(v45);
      swift_release(v49);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(a6);
      return v10;
    }
    v6 = v22;
    swift_bridgeObjectRelease(v21);
    if ((v6 & 1) != 0)
      break;
    v9 = String.index(after:)(v9, v11, a6);
LABEL_11:
    if (v50 == v9 >> 14)
      goto LABEL_31;
  }
  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    v9 = String.index(after:)(v9, v11, a6);
    *(_QWORD *)(v49 + 16) = v9;
    v8 = v9;
    v18 = v9;
    goto LABEL_11;
  }
  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_43;
  }
  v23 = String.subscript.getter(v8, v9, v11, a6);
  v46 = v24;
  v47 = v23;
  v26 = v25;
  v28 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    v10 = sub_10002959C(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
  v30 = *((_QWORD *)v10 + 2);
  v29 = *((_QWORD *)v10 + 3);
  v6 = v30 + 1;
  if (v30 >= v29 >> 1)
    v10 = sub_10002959C((char *)(v29 > 1), v30 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v6;
  v31 = &v10[32 * v30];
  *((_QWORD *)v31 + 4) = v47;
  *((_QWORD *)v31 + 5) = v26;
  *((_QWORD *)v31 + 6) = v28;
  *((_QWORD *)v31 + 7) = v46;
  *(_QWORD *)(v45 + 16) = v10;
  v32 = String.index(after:)(v9, v11, a6);
  v9 = v32;
  *(_QWORD *)(v49 + 16) = v32;
  if (*((_QWORD *)v10 + 2) != v44)
  {
    v8 = v32;
    v18 = v32;
    goto LABEL_11;
  }
  v18 = v32;
  v8 = v32;
LABEL_31:
  if (v50 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    v35 = v45;
    goto LABEL_39;
  }
  if (v50 >= v18 >> 14)
  {
    v6 = String.subscript.getter(v18, v43, v11, a6);
    v8 = v36;
    v9 = v37;
    v11 = v38;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      goto LABEL_45;
    goto LABEL_36;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  v10 = sub_10002959C(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
LABEL_36:
  v40 = *((_QWORD *)v10 + 2);
  v39 = *((_QWORD *)v10 + 3);
  if (v40 >= v39 >> 1)
    v10 = sub_10002959C((char *)(v39 > 1), v40 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v40 + 1;
  v41 = &v10[32 * v40];
  *((_QWORD *)v41 + 4) = v6;
  *((_QWORD *)v41 + 5) = v8;
  *((_QWORD *)v41 + 6) = v9;
  *((_QWORD *)v41 + 7) = v11;
  v35 = v45;
  *(_QWORD *)(v45 + 16) = v10;
LABEL_39:
  swift_bridgeObjectRetain(v10);
  swift_release(v35);
  v34 = v49;
LABEL_40:
  swift_release(v34);
  return v10;
}

uint64_t sub_100029490(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v13 = *(_QWORD *)(a2 + 16);
  v14 = (v13 >> 14 == a1 >> 14) & a3;
  if (v14 == 1)
    return v14 ^ 1u;
  if (a1 >> 14 < v13 >> 14)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = a4;
  v7 = String.subscript.getter(v13, a1, a5, a6);
  v8 = v15;
  v9 = v16;
  v10 = v17;
  v11 = *(char **)(v6 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  *(_QWORD *)(v6 + 16) = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    v11 = sub_10002959C(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    *(_QWORD *)(v6 + 16) = v11;
  }
  v20 = *((_QWORD *)v11 + 2);
  v19 = *((_QWORD *)v11 + 3);
  if (v20 >= v19 >> 1)
  {
    v11 = sub_10002959C((char *)(v19 > 1), v20 + 1, 1, v11);
    *(_QWORD *)(v6 + 16) = v11;
  }
  *((_QWORD *)v11 + 2) = v20 + 1;
  v21 = &v11[32 * v20];
  *((_QWORD *)v21 + 4) = v7;
  *((_QWORD *)v21 + 5) = v8;
  *((_QWORD *)v21 + 6) = v9;
  *((_QWORD *)v21 + 7) = v10;
  return v14 ^ 1u;
}

char *sub_10002959C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_100158908);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void (*sub_10002969C(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_10002AAA4(v7);
  v7[10] = sub_10002A93C(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10002972C;
}

void sub_10002972C(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0);
  free(v1);
}

uint64_t sub_10002977C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)(&v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v6);
  sub_1000272D8((uint64_t)&v22);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v19 = a1;
    v20 = ~v8;
    v21 = a2;
    v11 = *(_QWORD *)a2;
    v10 = *(_QWORD *)(a2 + 8);
    do
    {
      v12 = *(_QWORD *)(v6 + 48) + 40 * v9;
      v13 = *(unsigned __int8 *)(v12 + 16);
      v14 = *(_QWORD *)v12 == v11 && *(_QWORD *)(v12 + 8) == v10;
      if (v14
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), v11, v10, 0) & 1) != 0)
      {
        __asm { BR              X8 }
      }
      v9 = (v9 + 1) & v20;
    }
    while (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    swift_bridgeObjectRelease(v6);
    v3 = v2;
    a1 = v19;
    a2 = v21;
  }
  else
  {
    swift_bridgeObjectRelease(v6);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v22 = *v3;
  *v3 = 0x8000000000000000;
  sub_10002BC50((_QWORD *)a2);
  sub_100029FA8(a2, v9, isUniquelyReferenced_nonNull_native);
  v16 = *v3;
  *v3 = v22;
  swift_bridgeObjectRelease(v16);
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return 1;
}

uint64_t sub_100029BCC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t *v20;
  int64_t v21;
  _QWORD v22[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_1001588F8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v20 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v21 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v9 = __clz(__rbit64(v8));
    goto LABEL_21;
  }
  if (v21 <= 1)
  {
    swift_release(v3);
    v2 = v20;
    v17 = (_QWORD *)(v3 + 56);
    goto LABEL_24;
  }
  v10 = *(_QWORD *)(v3 + 64);
  v11 = 1;
  if (v10)
    goto LABEL_20;
  v11 = 2;
  if (v21 > 2)
  {
    v10 = *(_QWORD *)(v3 + 72);
    if (!v10)
    {
      v12 = 3;
      if (v21 > 3)
      {
        v10 = *(_QWORD *)(v3 + 80);
        if (v10)
        {
          v11 = 3;
          goto LABEL_20;
        }
        while (1)
        {
          v11 = v12 + 1;
          if (__OFADD__(v12, 1))
          {
            __break(1u);
            JUMPOUT(0x100029F90);
          }
          if (v11 >= v21)
            break;
          v10 = *(_QWORD *)(v3 + 56 + 8 * v11);
          ++v12;
          if (v10)
            goto LABEL_20;
        }
      }
      goto LABEL_22;
    }
LABEL_20:
    v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_21:
    v13 = *(_QWORD *)(v3 + 48) + 40 * v9;
    v14 = *(_QWORD *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(unsigned __int8 *)(v13 + 16);
    Hasher.init(_seed:)(v22, *(_QWORD *)(v5 + 40));
    swift_bridgeObjectRetain(v15);
    String.hash(into:)(v22, v14, v15);
    swift_bridgeObjectRelease(v15);
    __asm { BR              X8 }
  }
LABEL_22:
  swift_release(v3);
  v17 = (_QWORD *)(v3 + 56);
  v2 = v20;
LABEL_24:
  v18 = 1 << *(_BYTE *)(v3 + 32);
  if (v18 > 63)
    bzero(v17, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v17 = -1 << v18;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  result = swift_release(v3);
  *v2 = v5;
  return result;
}

uint64_t sub_100029FA8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100029BCC(v8);
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_10002A3D8();
        goto LABEL_17;
      }
      sub_10002A59C(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(&v24, *(_QWORD *)(*v3 + 40));
    sub_1000272D8((uint64_t)&v24);
    result = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v9 + 32);
    a2 = result & ~v10;
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v23 = ~v10;
      v11 = *(_QWORD *)v5;
      v12 = *(_QWORD *)(v5 + 8);
      do
      {
        v13 = *(_QWORD *)(v9 + 48) + 40 * a2;
        v14 = *(unsigned __int8 *)(v13 + 16);
        v15 = *(_QWORD *)v13 == v11 && *(_QWORD *)(v13 + 8) == v12;
        if (v15
          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), v11, v12, 0),
              (result & 1) != 0))
        {
          __asm { BR              X8 }
        }
        a2 = (a2 + 1) & v23;
      }
      while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_17:
  v16 = *v22;
  *(_QWORD *)(*v22 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v17 = *(_QWORD *)(v16 + 48) + 40 * a2;
  v18 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v5;
  *(_OWORD *)(v17 + 16) = v18;
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v5 + 32);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
  {
    __break(1u);
    JUMPOUT(0x10002A384);
  }
  *(_QWORD *)(v16 + 16) = v21;
  return result;
}

void *sub_10002A3D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100005C88(&qword_1001588F8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(_BYTE *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 24);
    v21 = *(_QWORD *)(v17 + 32);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v22 = *(_QWORD *)v17;
    *(_QWORD *)(v22 + 8) = v18;
    *(_BYTE *)(v22 + 16) = v19;
    *(_QWORD *)(v22 + 24) = v20;
    *(_QWORD *)(v22 + 32) = v21;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_10002B23C(v20, v21);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10002A59C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t *v20;
  int64_t v21;
  _QWORD v22[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_1001588F8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
    goto LABEL_23;
  }
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v20 = v2;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v21 = (unint64_t)(v6 + 63) >> 6;
  swift_retain_n(v3, 2);
  if (v8)
  {
    v9 = __clz(__rbit64(v8));
    goto LABEL_20;
  }
  if (v21 > 1)
  {
    v10 = *(_QWORD *)(v3 + 64);
    i = 1;
    if (v10)
      goto LABEL_19;
    i = 2;
    if (v21 > 2)
    {
      v10 = *(_QWORD *)(v3 + 72);
      if (v10)
        goto LABEL_19;
      v12 = 3;
      if (v21 > 3)
      {
        v10 = *(_QWORD *)(v3 + 80);
        for (i = 3; !v10; ++v12)
        {
          i = v12 + 1;
          if (__OFADD__(v12, 1))
          {
            __break(1u);
            JUMPOUT(0x10002A924);
          }
          if (i >= v21)
            goto LABEL_21;
          v10 = *(_QWORD *)(v3 + 56 + 8 * i);
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (i << 6);
LABEL_20:
        v13 = *(_QWORD *)(v3 + 48) + 40 * v9;
        v14 = *(_QWORD *)v13;
        v15 = *(_QWORD *)(v13 + 8);
        v16 = *(unsigned __int8 *)(v13 + 16);
        v17 = *(_QWORD *)(v13 + 24);
        v18 = *(_QWORD *)(v13 + 32);
        Hasher.init(_seed:)(v22, *(_QWORD *)(v5 + 40));
        swift_bridgeObjectRetain_n(v15, 2);
        sub_10002B23C(v17, v18);
        String.hash(into:)(v22, v14, v15);
        swift_bridgeObjectRelease(v15);
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n(v3, 3);
  v2 = v20;
LABEL_23:
  *v2 = v5;
  return result;
}

void (*sub_10002A93C(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_100005DE8(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_10002AA68;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10002AE84();
      goto LABEL_7;
    }
    sub_10002AAD0(v16, a4 & 1);
    v20 = sub_100005DE8(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10002AA68(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_10002ADC0(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

uint64_t (*sub_10002AAA4(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_10002AAC4;
}

uint64_t sub_10002AAC4(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

Swift::Int sub_10002AAD0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100158900);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_24;
    }
    if (__OFADD__(v15++, 1))
      goto LABEL_43;
    if (v15 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v15);
    if (!v25)
    {
      v26 = v15 + 1;
      if (v15 + 1 >= v12)
      {
LABEL_34:
        swift_release(v5);
        v3 = v36;
        if ((v38 & 1) == 0)
          goto LABEL_41;
        goto LABEL_37;
      }
      v25 = *(_QWORD *)(v37 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          v15 = v26 + 1;
          if (__OFADD__(v26, 1))
            break;
          if (v15 >= v12)
            goto LABEL_34;
          v25 = *(_QWORD *)(v37 + 8 * v15);
          ++v26;
          if (v25)
            goto LABEL_23;
        }
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }
      ++v15;
    }
LABEL_23:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_24:
    v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v27[1]);
      swift_bridgeObjectRetain(v30);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v29, v28);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v18 == v32;
        if (v18 == v32)
          v18 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v30;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t *sub_10002ADC0(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v8 = *result;
  if (!*result)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 16 * a4, 1, &type metadata for String);
      sub_10002B020(a4, *a3);
    }
    return (uint64_t *)swift_bridgeObjectRetain(v8);
  }
  v9 = (_QWORD *)*a3;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)(v9[7] + 8 * a4) = v8;
    return (uint64_t *)swift_bridgeObjectRetain(v8);
  }
  v9[(a4 >> 6) + 8] |= 1 << a4;
  v10 = (_QWORD *)(v9[6] + 16 * a4);
  *v10 = a5;
  v10[1] = a6;
  *(_QWORD *)(v9[7] + 8 * a4) = v8;
  v11 = v9[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (!v12)
  {
    v9[2] = v13;
    swift_bridgeObjectRetain(a6);
    return (uint64_t *)swift_bridgeObjectRetain(v8);
  }
  __break(1u);
  return result;
}

void *sub_10002AE84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100005C88(&qword_100158900);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    if (!v23)
      break;
LABEL_23:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v24 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_10002B020(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10002B1F4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001469D8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_10002B23C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000122B4(result, a2);
  return result;
}

unint64_t sub_10002B250(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100146A90, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_10002B298()
{
  unint64_t result;

  result = qword_1001588B0;
  if (!qword_1001588B0)
  {
    result = swift_getWitnessTable(&unk_10011A5E0, &type metadata for CodeSigningHash);
    atomic_store(result, (unint64_t *)&qword_1001588B0);
  }
  return result;
}

BOOL sub_10002B2DC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  _BOOL8 result;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  _QWORD v17[2];
  uint64_t v18;
  unint64_t v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    sub_100026BBC(*((_BYTE *)a1 + 16));
    if ((v10 & 1) != 0)
    {
      v12 = a1[3];
      v11 = a1[4];
      v14 = a2[3];
      v13 = a2[4];
      if (v11 >> 60 == 15)
      {
        if (v13 >> 60 == 15)
          return 1;
      }
      else
      {
        v18 = v12;
        v19 = v11;
        if (v13 >> 60 != 15)
        {
          v17[0] = v14;
          v17[1] = v13;
          sub_1000122B4(v12, v11);
          sub_1000122B4(v12, v11);
          v15 = sub_10002BCD0();
          v16 = dispatch thunk of static Equatable.== infix(_:_:)(&v18, v17, &type metadata for CodeSigningHash, v15);
          sub_100011F40(v18, v19);
          sub_100021610(v12, v11);
          return (v16 & 1) != 0;
        }
        sub_1000122B4(v12, v11);
        sub_1000122B4(v12, v11);
        sub_100011F40(v12, v11);
      }
      sub_10002B23C(v14, v13);
      sub_100021610(v12, v11);
      sub_100021610(v14, v13);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10002B42C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100158010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002B474(uint64_t *a1)
{
  return sub_10002BD14(a1) & 1;
}

unint64_t sub_10002B48C()
{
  unint64_t result;

  result = qword_1001588C0;
  if (!qword_1001588C0)
  {
    result = swift_getWitnessTable(&unk_10010FD84, &type metadata for ExceptionList.ExceptionMatch);
    atomic_store(result, (unint64_t *)&qword_1001588C0);
  }
  return result;
}

uint64_t sub_10002B4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    return sub_100021610(a5, a6);
  }
  return result;
}

unint64_t sub_10002B50C()
{
  unint64_t result;

  result = qword_1001588C8;
  if (!qword_1001588C8)
  {
    result = swift_getWitnessTable(&unk_10010FC0C, &type metadata for ExceptionList.ExceptionType);
    atomic_store(result, (unint64_t *)&qword_1001588C8);
  }
  return result;
}

unint64_t sub_10002B554()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001588D0;
  if (!qword_1001588D0)
  {
    v1 = sub_100011CE4(&qword_1001588D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001588D0);
  }
  return result;
}

unint64_t sub_10002B5A4()
{
  unint64_t result;

  result = qword_1001588E0;
  if (!qword_1001588E0)
  {
    result = swift_getWitnessTable(&unk_10010FCE4, &type metadata for ExceptionList.ExceptionMatch.VersionSpec);
    atomic_store(result, (unint64_t *)&qword_1001588E0);
  }
  return result;
}

unint64_t sub_10002B5EC()
{
  unint64_t result;

  result = qword_1001588E8;
  if (!qword_1001588E8)
  {
    result = swift_getWitnessTable(&unk_10010FDC4, &type metadata for ExceptionList.ExceptionMatch);
    atomic_store(result, (unint64_t *)&qword_1001588E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Exceptions()
{
  return &type metadata for Exceptions;
}

uint64_t destroy for ExceptionList(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t _s10driverkitd13ExceptionListVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ExceptionList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ExceptionList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for ExceptionList()
{
  return &type metadata for ExceptionList;
}

uint64_t storeEnumTagSinglePayload for ExceptionList.ExceptionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10002B774 + 4 * byte_10010FBFB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10002B7A8 + 4 * byte_10010FBF6[v4]))();
}

uint64_t sub_10002B7A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002B7B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002B7B8);
  return result;
}

uint64_t sub_10002B7C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002B7CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10002B7D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002B7D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExceptionList.ExceptionType()
{
  return &type metadata for ExceptionList.ExceptionType;
}

uint64_t destroy for ExceptionList.ExceptionMatch(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_bridgeObjectRelease(a1[1]);
  v3 = a1[4];
  if (v3 >> 60 != 15)
    return sub_100011F40(a1[3], v3);
  return result;
}

uint64_t initializeWithCopy for ExceptionList.ExceptionMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = (_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *v4;
  }
  else
  {
    v6 = *(_QWORD *)v4;
    sub_1000122B4(v6, v5);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v5;
  }
  return a1;
}

uint64_t assignWithCopy for ExceptionList.ExceptionMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (uint64_t *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 != 15)
  {
    if (v7 >> 60 != 15)
    {
      v9 = *v6;
      sub_1000122B4(*v6, v7);
      v10 = *(_QWORD *)(a1 + 24);
      v11 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v7;
      sub_100011F40(v10, v11);
      return a1;
    }
    sub_10002B97C(a1 + 24);
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
    return a1;
  }
  v8 = *v6;
  sub_1000122B4(*v6, v7);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v7;
  return a1;
}

uint64_t sub_10002B97C(uint64_t a1)
{
  destroy for CodeSigningHash(a1);
  return a1;
}

__n128 initializeWithTake for ExtensionManager.Settings.ExtensionFilter(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ExceptionList.ExceptionMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 32);
    if (v8 >> 60 != 15)
    {
      v9 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = *v6;
      *(_QWORD *)(a1 + 32) = v8;
      sub_100011F40(v9, v7);
      return a1;
    }
    sub_10002B97C(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for ExceptionList.ExceptionMatch(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExceptionList.ExceptionMatch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExceptionList.ExceptionMatch()
{
  return &type metadata for ExceptionList.ExceptionMatch;
}

uint64_t getEnumTagSinglePayload for ExceptionList.ExceptionMatch.VersionSpec(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExceptionList.ExceptionMatch.VersionSpec(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10002BBD0 + 4 * byte_10010FC05[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10002BC04 + 4 * byte_10010FC00[v4]))();
}

uint64_t sub_10002BC04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002BC0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002BC14);
  return result;
}

uint64_t sub_10002BC20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002BC28);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10002BC2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002BC34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExceptionList.ExceptionMatch.VersionSpec()
{
  return &type metadata for ExceptionList.ExceptionMatch.VersionSpec;
}

_QWORD *sub_10002BC50(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[3];
  v3 = a1[4];
  swift_bridgeObjectRetain(a1[1]);
  sub_10002B23C(v2, v3);
  return a1;
}

_QWORD *sub_10002BC90(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[3];
  v3 = a1[4];
  swift_bridgeObjectRelease(a1[1]);
  sub_100021610(v2, v3);
  return a1;
}

unint64_t sub_10002BCD0()
{
  unint64_t result;

  result = qword_1001588F0;
  if (!qword_1001588F0)
  {
    result = swift_getWitnessTable(&unk_10011A620, &type metadata for CodeSigningHash);
    atomic_store(result, (unint64_t *)&qword_1001588F0);
  }
  return result;
}

uint64_t sub_10002BD14(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = *a1;
  v5 = a1[1];
  v6 = v3[1];
  if (v4 == *v3 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0) & 1;
}

uint64_t sub_10002BD68()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002BD8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002BD9C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_100175288, 0);
}

uint64_t *sub_10002BDAC()
{
  if (qword_10015E450 != -1)
    swift_once(&qword_10015E450, sub_10002BD9C);
  return &qword_100175288;
}

uint64_t sub_10002BDEC(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_100175290, 1);
}

uint64_t *sub_10002BDFC()
{
  if (qword_10015E458 != -1)
    swift_once(&qword_10015E458, sub_10002BDEC);
  return &qword_100175290;
}

uint64_t sub_10002BE3C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_100175298, 2);
}

uint64_t sub_10002BE4C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752A0, 3);
}

uint64_t sub_10002BE5C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752A8, 4);
}

uint64_t *sub_10002BE6C()
{
  if (qword_10015E470 != -1)
    swift_once(&qword_10015E470, sub_10002BE5C);
  return &qword_1001752A8;
}

uint64_t sub_10002BEAC(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752B0, 5);
}

uint64_t *sub_10002BEBC()
{
  if (qword_10015E478 != -1)
    swift_once(&qword_10015E478, sub_10002BEAC);
  return &qword_1001752B0;
}

uint64_t sub_10002BEFC(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752B8, 6);
}

uint64_t sub_10002BF0C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752C0, 7);
}

uint64_t sub_10002BF1C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752C8, 8);
}

uint64_t *sub_10002BF2C()
{
  if (qword_10015E490 != -1)
    swift_once(&qword_10015E490, sub_10002BF1C);
  return &qword_1001752C8;
}

uint64_t sub_10002BF6C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752D0, 9);
}

uint64_t *sub_10002BF7C()
{
  if (qword_10015E498 != -1)
    swift_once(&qword_10015E498, sub_10002BF6C);
  return &qword_1001752D0;
}

uint64_t sub_10002BFBC(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752D8, 10);
}

uint64_t *sub_10002BFCC()
{
  if (qword_10015E4A0 != -1)
    swift_once(&qword_10015E4A0, sub_10002BFBC);
  return &qword_1001752D8;
}

uint64_t sub_10002C00C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752E0, 11);
}

uint64_t *sub_10002C01C()
{
  if (qword_10015E4A8 != -1)
    swift_once(&qword_10015E4A8, sub_10002C00C);
  return &qword_1001752E0;
}

uint64_t sub_10002C05C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752E8, 12);
}

uint64_t *sub_10002C06C()
{
  if (qword_10015E4B0 != -1)
    swift_once(&qword_10015E4B0, sub_10002C05C);
  return &qword_1001752E8;
}

uint64_t sub_10002C0AC(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752F0, 13);
}

uint64_t *sub_10002C0BC()
{
  if (qword_10015E4B8 != -1)
    swift_once(&qword_10015E4B8, sub_10002C0AC);
  return &qword_1001752F0;
}

uint64_t sub_10002C0FC(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_1001752F8, 14);
}

uint64_t sub_10002C10C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_100175300, 15);
}

uint64_t sub_10002C11C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_100175308, 16);
}

uint64_t sub_10002C12C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_100175310, 17);
}

uint64_t sub_10002C13C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_100175318, 18);
}

uint64_t sub_10002C14C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_100175320, 19);
}

uint64_t sub_10002C15C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_100175328, 20);
}

uint64_t sub_10002C16C(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_100175330, 21);
}

uint64_t *sub_10002C17C()
{
  if (qword_10015E4F8 != -1)
    swift_once(&qword_10015E4F8, sub_10002C16C);
  return &qword_100175330;
}

uint64_t sub_10002C1BC(uint64_t a1)
{
  return sub_10002C1CC(a1, (uint64_t)&qword_100175338, 22);
}

uint64_t sub_10002C1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;

  v5 = sub_100039B14();
  v6 = sub_10003A314();
  return sub_1000D3780(a3, (uint64_t)&type metadata for RealizedInfo.Flags, v5, v6, a2);
}

uint64_t sub_10002C220(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;

  if (qword_10015E450 != -1)
    swift_once(&qword_10015E450, sub_10002BD9C);
  if ((qword_100175288 & ~a1) != 0)
  {
    v2 = _swiftEmptyArrayStorage;
  }
  else
  {
    v2 = sub_10000C500(0, 1, 1, _swiftEmptyArrayStorage);
    v4 = v2[2];
    v3 = v2[3];
    if (v4 >= v3 >> 1)
      v2 = sub_10000C500((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v2[2] = v4 + 1;
    v5 = &v2[2 * v4];
    v5[4] = 0x64696C6176;
    v5[5] = 0xE500000000000000;
  }
  if (qword_10015E458 != -1)
    swift_once(&qword_10015E458, sub_10002BDEC);
  if ((qword_100175290 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_10000C500((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[2 * v7];
    v8[4] = 0x65746164696C6176;
    v8[5] = 0xE900000000000064;
  }
  if (qword_10015E460 != -1)
    swift_once(&qword_10015E460, sub_10002BE3C);
  if ((qword_100175298 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v10 = v2[2];
    v9 = v2[3];
    if (v10 >= v9 >> 1)
      v2 = sub_10000C500((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
    v2[2] = v10 + 1;
    v11 = &v2[2 * v10];
    v11[4] = 0xD000000000000011;
    v11[5] = 0x8000000100122B80;
  }
  if (qword_10015E468 != -1)
    swift_once(&qword_10015E468, sub_10002BE4C);
  if ((qword_1001752A0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v13 = v2[2];
    v12 = v2[3];
    if (v13 >= v12 >> 1)
      v2 = sub_10000C500((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
    v2[2] = v13 + 1;
    v14 = &v2[2 * v13];
    v14[4] = 0xD000000000000015;
    v14[5] = 0x8000000100122B60;
  }
  if (qword_10015E470 != -1)
    swift_once(&qword_10015E470, sub_10002BE5C);
  if ((qword_1001752A8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v16 = v2[2];
    v15 = v2[3];
    if (v16 >= v15 >> 1)
      v2 = sub_10000C500((_QWORD *)(v15 > 1), v16 + 1, 1, v2);
    v2[2] = v16 + 1;
    v17 = &v2[2 * v16];
    v17[4] = 0x69746E6568747561;
    v17[5] = 0xE900000000000063;
  }
  if (qword_10015E478 != -1)
    swift_once(&qword_10015E478, sub_10002BEAC);
  if ((qword_1001752B0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v19 = v2[2];
    v18 = v2[3];
    if (v19 >= v18 >> 1)
      v2 = sub_10000C500((_QWORD *)(v18 > 1), v19 + 1, 1, v2);
    v2[2] = v19 + 1;
    v20 = (char *)&v2[2 * v19];
    strcpy(v20 + 32, "authenticated");
    *((_WORD *)v20 + 23) = -4864;
  }
  if (qword_10015E480 != -1)
    swift_once(&qword_10015E480, sub_10002BEFC);
  if ((qword_1001752B8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v22 = v2[2];
    v21 = v2[3];
    if (v22 >= v21 >> 1)
      v2 = sub_10000C500((_QWORD *)(v21 > 1), v22 + 1, 1, v2);
    v2[2] = v22 + 1;
    v23 = &v2[2 * v22];
    v23[4] = 0xD000000000000015;
    v23[5] = 0x8000000100122B40;
  }
  if (qword_10015E488 != -1)
    swift_once(&qword_10015E488, sub_10002BF0C);
  if ((qword_1001752C0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v25 = v2[2];
    v24 = v2[3];
    if (v25 >= v24 >> 1)
      v2 = sub_10000C500((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
    v2[2] = v25 + 1;
    v26 = &v2[2 * v25];
    v26[4] = 0xD000000000000019;
    v26[5] = 0x8000000100122B20;
  }
  if (qword_10015E490 != -1)
    swift_once(&qword_10015E490, sub_10002BF1C);
  if ((qword_1001752C8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v28 = v2[2];
    v27 = v2[3];
    if (v28 >= v27 >> 1)
      v2 = sub_10000C500((_QWORD *)(v27 > 1), v28 + 1, 1, v2);
    v2[2] = v28 + 1;
    v29 = &v2[2 * v28];
    v29[4] = 0x6465766F72707061;
    v29[5] = 0xE800000000000000;
  }
  if (qword_10015E498 != -1)
    swift_once(&qword_10015E498, sub_10002BF6C);
  if ((qword_1001752D0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v31 = v2[2];
    v30 = v2[3];
    if (v31 >= v30 >> 1)
      v2 = sub_10000C500((_QWORD *)(v30 > 1), v31 + 1, 1, v2);
    v2[2] = v31 + 1;
    v32 = &v2[2 * v31];
    v32[4] = 0x6C61766F72707061;
    v32[5] = 0xEF64656B63656843;
  }
  if (qword_10015E4A0 != -1)
    swift_once(&qword_10015E4A0, sub_10002BFBC);
  if ((qword_1001752D8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v34 = v2[2];
    v33 = v2[3];
    if (v34 >= v33 >> 1)
      v2 = sub_10000C500((_QWORD *)(v33 > 1), v34 + 1, 1, v2);
    v2[2] = v34 + 1;
    v35 = (char *)&v2[2 * v34];
    strcpy(v35 + 32, "inExcludeList");
    *((_WORD *)v35 + 23) = -4864;
  }
  if (qword_10015E4A8 != -1)
    swift_once(&qword_10015E4A8, sub_10002C00C);
  if ((qword_1001752E0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v37 = v2[2];
    v36 = v2[3];
    if (v37 >= v36 >> 1)
      v2 = sub_10000C500((_QWORD *)(v36 > 1), v37 + 1, 1, v2);
    v2[2] = v37 + 1;
    v38 = &v2[2 * v37];
    v38[4] = 0xD000000000000018;
    v38[5] = 0x8000000100122B00;
  }
  if (qword_10015E4B0 != -1)
    swift_once(&qword_10015E4B0, sub_10002C05C);
  if ((qword_1001752E8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v40 = v2[2];
    v39 = v2[3];
    if (v40 >= v39 >> 1)
      v2 = sub_10000C500((_QWORD *)(v39 > 1), v40 + 1, 1, v2);
    v2[2] = v40 + 1;
    v41 = &v2[2 * v40];
    v41[4] = 0xD00000000000001ELL;
    v41[5] = 0x8000000100122AE0;
  }
  if (qword_10015E4B8 != -1)
    swift_once(&qword_10015E4B8, sub_10002C0AC);
  if ((qword_1001752F0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v43 = v2[2];
    v42 = v2[3];
    if (v43 >= v42 >> 1)
      v2 = sub_10000C500((_QWORD *)(v42 > 1), v43 + 1, 1, v2);
    v2[2] = v43 + 1;
    v44 = &v2[2 * v43];
    v44[4] = 0x656C707061;
    v44[5] = 0xE500000000000000;
  }
  if (qword_10015E4C0 != -1)
    swift_once(&qword_10015E4C0, sub_10002C0FC);
  if ((qword_1001752F8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v46 = v2[2];
    v45 = v2[3];
    if (v46 >= v45 >> 1)
      v2 = sub_10000C500((_QWORD *)(v45 > 1), v46 + 1, 1, v2);
    v2[2] = v46 + 1;
    v47 = (char *)&v2[2 * v46];
    strcpy(v47 + 32, "sipProtected");
    v47[45] = 0;
    *((_WORD *)v47 + 23) = -5120;
  }
  if (qword_10015E4C8 != -1)
    swift_once(&qword_10015E4C8, sub_10002C10C);
  if ((qword_100175300 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v49 = v2[2];
    v48 = v2[3];
    if (v49 >= v48 >> 1)
      v2 = sub_10000C500((_QWORD *)(v48 > 1), v49 + 1, 1, v2);
    v2[2] = v49 + 1;
    v50 = &v2[2 * v49];
    v50[4] = 0x64616F4C72657375;
    v50[5] = 0xEF6465776F6C6C41;
  }
  if (qword_10015E4D0 != -1)
    swift_once(&qword_10015E4D0, sub_10002C11C);
  if ((qword_100175308 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v52 = v2[2];
    v51 = v2[3];
    if (v52 >= v51 >> 1)
      v2 = sub_10000C500((_QWORD *)(v51 > 1), v52 + 1, 1, v2);
    v2[2] = v52 + 1;
    v53 = &v2[2 * v52];
    v53[4] = 0xD000000000000014;
    v53[5] = 0x8000000100122AC0;
  }
  if (qword_10015E4D8 != -1)
    swift_once(&qword_10015E4D8, sub_10002C12C);
  if ((qword_100175310 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v55 = v2[2];
    v54 = v2[3];
    if (v55 >= v54 >> 1)
      v2 = sub_10000C500((_QWORD *)(v54 > 1), v55 + 1, 1, v2);
    v2[2] = v55 + 1;
    v56 = &v2[2 * v55];
    v56[4] = 0xD000000000000014;
    v56[5] = 0x8000000100122AA0;
  }
  if (qword_10015E4E0 != -1)
    swift_once(&qword_10015E4E0, sub_10002C13C);
  if ((qword_100175318 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v58 = v2[2];
    v57 = v2[3];
    if (v58 >= v57 >> 1)
      v2 = sub_10000C500((_QWORD *)(v57 > 1), v58 + 1, 1, v2);
    v2[2] = v58 + 1;
    v59 = &v2[2 * v58];
    v59[4] = 0xD000000000000013;
    v59[5] = 0x8000000100122A80;
  }
  if (qword_10015E4E8 != -1)
    swift_once(&qword_10015E4E8, sub_10002C14C);
  if ((qword_100175320 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v61 = v2[2];
    v60 = v2[3];
    if (v61 >= v60 >> 1)
      v2 = sub_10000C500((_QWORD *)(v60 > 1), v61 + 1, 1, v2);
    v2[2] = v61 + 1;
    v62 = (char *)&v2[2 * v61];
    strcpy(v62 + 32, "appleAuxiliary");
    v62[47] = -18;
  }
  if (qword_10015E4F0 != -1)
    swift_once(&qword_10015E4F0, sub_10002C15C);
  if ((qword_100175328 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v64 = v2[2];
    v63 = v2[3];
    if (v64 >= v63 >> 1)
      v2 = sub_10000C500((_QWORD *)(v63 > 1), v64 + 1, 1, v2);
    v2[2] = v64 + 1;
    v65 = &v2[2 * v64];
    v65[4] = 0xD000000000000011;
    v65[5] = 0x8000000100122A60;
  }
  if (qword_10015E4F8 != -1)
    swift_once(&qword_10015E4F8, sub_10002C16C);
  if ((qword_100175330 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v67 = v2[2];
    v66 = v2[3];
    if (v67 >= v66 >> 1)
      v2 = sub_10000C500((_QWORD *)(v66 > 1), v67 + 1, 1, v2);
    v2[2] = v67 + 1;
    v68 = (char *)&v2[2 * v67];
    strcpy(v68 + 32, "appleExcluded");
    *((_WORD *)v68 + 23) = -4864;
  }
  v69 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v70 = sub_100013C48();
  v71 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v69, v70);
  swift_bridgeObjectRelease(v2);
  return v71;
}

_QWORD *sub_10002D254@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10002D260()
{
  uint64_t *v0;

  return sub_10002C220(*v0);
}

void sub_10002D268(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_10002D270@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_10002D284@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_10002D298@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10002D2AC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_10002D2DC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10002D308@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_10002D32C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_10002D340(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_10002D354(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_10002D368@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10002D37C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10002D390(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_10002D3A4(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_10002D3B8()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_10002D3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_10002D3E0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_10002D3F4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10002D404(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_10002D410(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10002D424@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100036574(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10002D460@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;

  if (!a1 || (v4 = (uint64_t *)sub_10008F46C(), !*(_QWORD *)(a1 + 16)))
  {
    v15 = 0u;
    v16 = 0u;
    goto LABEL_13;
  }
  v6 = *v4;
  v5 = v4[1];
  swift_bridgeObjectRetain(v5);
  v7 = sub_100005DE8(v6, v5);
  if ((v8 & 1) == 0)
  {
    v15 = 0u;
    v16 = 0u;
    swift_bridgeObjectRelease(v5);
    goto LABEL_13;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v15);
  swift_bridgeObjectRelease(v5);
  if (!*((_QWORD *)&v16 + 1))
  {
LABEL_13:
    sub_1000124F8((uint64_t)&v15, &qword_100158018);
    v11 = 0;
    v12 = 0xF000000000000000;
    return sub_1000D2A30(v11, v12, a2);
  }
  v9 = swift_dynamicCast(v14, &v15, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
  v10 = v9 == 0;
  if (v9)
    v11 = v14[0];
  else
    v11 = 0;
  if (v10)
    v12 = 0xF000000000000000;
  else
    v12 = v14[1];
  return sub_1000D2A30(v11, v12, a2);
}

uint64_t sub_10002D554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;

  if (!a3 || (v4 = sub_10008F3C4(), !*(_QWORD *)(a3 + 16)))
  {
    v15 = 0u;
    v16 = 0u;
    goto LABEL_13;
  }
  v6 = *v4;
  v5 = v4[1];
  swift_bridgeObjectRetain(v5);
  v7 = sub_100005DE8(v6, v5);
  if ((v8 & 1) == 0)
  {
    v15 = 0u;
    v16 = 0u;
    swift_bridgeObjectRelease(v5);
    goto LABEL_13;
  }
  sub_100005D28(*(_QWORD *)(a3 + 56) + 32 * v7, (uint64_t)&v15);
  swift_bridgeObjectRelease(v5);
  if (!*((_QWORD *)&v16 + 1))
  {
LABEL_13:
    sub_1000124F8((uint64_t)&v15, &qword_100158018);
    v11 = 0;
    v12 = 0;
    return sub_1000D4D90(v11, v12);
  }
  v9 = swift_dynamicCast(v14, &v15, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  v10 = v9 == 0;
  if (v9)
    v11 = v14[0];
  else
    v11 = 0;
  if (v10)
    v12 = 0;
  else
    v12 = v14[1];
  return sub_1000D4D90(v11, v12);
}

uint64_t sub_10002D640()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_10002D670(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 16, v4, 1, 0);
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

void *sub_10002D6AC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10002D6E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 80;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100019E1C(v3, a1, &qword_100158910);
}

uint64_t sub_10002D738(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 80;
  swift_beginAccess(v3, v5, 33, 0);
  sub_1000392C8(a1, v3, &qword_100158910);
  return swift_endAccess(v5);
}

void *sub_10002D790(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 80, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10002D7CC()
{
  _QWORD *v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 15, v3, 0, 0);
  v1 = v0[15];
  sub_100037068(v1, v0[16], v0[17]);
  return v1;
}

uint64_t sub_10002D82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  swift_beginAccess(v3 + 15, v11, 1, 0);
  v7 = v3[15];
  v8 = v3[16];
  v9 = v3[17];
  v3[15] = a1;
  v3[16] = a2;
  v3[17] = a3;
  sub_100037068(a1, a2, a3);
  sub_10003707C(v7, v8, v9);
  return sub_10003707C(a1, a2, a3);
}

void *sub_10002D8C4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 120, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_10002D900()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_10002D948(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

void *sub_10002D998(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10002D9DC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v28[24];
  _BYTE v29[24];

  v20 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_QWORD *)(v20 + 16) = 0;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_QWORD *)(v20 + 128) = 0;
  *(_QWORD *)(v20 + 136) = 1;
  *(_QWORD *)(v20 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v20 + 24) = a1;
  sub_1000260AC(a2, v20 + 32, &qword_100158010);
  *(_BYTE *)(v20 + 72) = a3;
  swift_beginAccess(v20 + 80, v29, 33, 0);
  sub_1000392C8(a4, v20 + 80, &qword_100158910);
  swift_endAccess(v29);
  swift_beginAccess(v20 + 120, v29, 1, 0);
  v21 = *(_QWORD *)(v20 + 120);
  v22 = *(_QWORD *)(v20 + 128);
  v23 = *(_QWORD *)(v20 + 136);
  *(_QWORD *)(v20 + 120) = a5;
  *(_QWORD *)(v20 + 128) = a6;
  *(_QWORD *)(v20 + 136) = a7;
  sub_10003707C(v21, v22, v23);
  sub_1000260AC(a8, v20 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10015BA60);
  v24 = v20 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
  *(_QWORD *)v24 = a9;
  *(_BYTE *)(v24 + 8) = a10 & 1;
  sub_1000260AC(a11, v20 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_100158918);
  *(_QWORD *)(v20 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = a12;
  swift_beginAccess(v20 + 16, v28, 1, 0);
  *(_QWORD *)(v20 + 16) = a13;
  return v20;
}

BOOL sub_10002DBB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;

  v7 = (uint64_t *)sub_10008F43C();
  v8 = *v7;
  v9 = v7[1];
  v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v3 + 312);
  v11 = swift_bridgeObjectRetain(v9);
  v10(v24, a2, a3, v8, v9, v11);
  swift_bridgeObjectRelease(v9);
  if (!v25)
    goto LABEL_10;
  if ((swift_dynamicCast(&v22, v24, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return 0;
  v12 = sub_1000D4D44(v22, v23);
  if ((v13 & 1) != 0)
    return 0;
  v14 = v12;
  v15 = sub_10008F3C4();
  v16 = *v15;
  v17 = v15[1];
  v18 = swift_bridgeObjectRetain(v17);
  v10(v24, a2, a3, v16, v17, v18);
  swift_bridgeObjectRelease(v17);
  if (!v25)
  {
LABEL_10:
    sub_1000124F8((uint64_t)v24, &qword_100158018);
    return 0;
  }
  if ((swift_dynamicCast(&v22, v24, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return 0;
  v19 = sub_1000D4D44(v22, v23);
  if ((v20 & 1) != 0)
    return 0;
  return v14 <= a1 && v19 >= a1;
}

uint64_t sub_10002DD00(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *);
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void (*v48)(_QWORD *);
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  void (*v56)(_QWORD *);
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(__n128);
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  void (*v68)(_QWORD *);
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(__n128);
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  _QWORD *v85;
  void (*v86)(_QWORD *);
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  _QWORD *v102;
  void (*v103)(_QWORD *);
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(__n128);
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char v114;
  unint64_t v115;
  uint64_t v116;
  _BOOL8 v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  char v121;
  _QWORD *v122;
  void (*v123)(_QWORD *);
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(__n128);
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  char v138;
  unint64_t v139;
  char v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t result;
  uint64_t v153;
  uint64_t v155;
  int64_t v156;
  void (*v157)(__int128 *, _QWORD);
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  int64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  _QWORD *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _QWORD *v170;

  v3 = *a1;
  v155 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  v158 = v3;
  v153 = v2 + 32;
  v156 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(v3);
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v160 = (v6 - 1) & v6;
      v161 = v7;
      v10 = __clz(__rbit64(v6)) | (v7 << 6);
      goto LABEL_24;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_88;
    if (v11 >= v156)
      return swift_release(v158);
    v12 = *(_QWORD *)(v155 + 8 * v11);
    v13 = v7 + 1;
    if (!v12)
    {
      v13 = v7 + 2;
      if (v7 + 2 >= v156)
        return swift_release(v158);
      v12 = *(_QWORD *)(v155 + 8 * v13);
      if (!v12)
      {
        v13 = v7 + 3;
        if (v7 + 3 >= v156)
          return swift_release(v158);
        v12 = *(_QWORD *)(v155 + 8 * v13);
        if (!v12)
          break;
      }
    }
LABEL_23:
    v160 = (v12 - 1) & v12;
    v161 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_24:
    v15 = (uint64_t *)(*(_QWORD *)(v158 + 48) + 16 * v10);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v158 + 56) + 8 * v10);
    v19 = v159[3];
    v20 = type metadata accessor for DriverExtension(0);
    v162 = v19;
    v21 = swift_dynamicCastClass(v19, v20);
    swift_bridgeObjectRetain(v17);
    if (!v21)
    {
      swift_bridgeObjectRetain(v18);
      goto LABEL_56;
    }
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    v22 = sub_10002E87C(&v169, v16, v17);
    if (*v23)
    {
      v24 = v23;
      v157 = (void (*)(__int128 *, _QWORD))v22;
      v25 = (uint64_t *)sub_10008F994();
      v27 = *v25;
      v26 = v25[1];
      sub_100019E1C(v153, (uint64_t)&v163, &qword_100158010);
      v28 = *((_QWORD *)&v164 + 1);
      if (*((_QWORD *)&v164 + 1))
      {
        v29 = v165;
        sub_100004DE4(&v163, *((uint64_t *)&v164 + 1));
        v30 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v29 + 32);
        v31 = swift_bridgeObjectRetain(v26);
        v32 = v30(v28, v29, v31);
        v34 = v33;
        v35 = sub_1000DBB8C();
        v37 = v36;
        sub_100011F40(v32, v34);
        *((_QWORD *)&v168 + 1) = &type metadata for String;
        *(_QWORD *)&v167 = v35;
        *((_QWORD *)&v167 + 1) = v37;
        sub_100005D08(&v163);
        if (*((_QWORD *)&v168 + 1))
        {
          sub_100017464(&v167, &v163);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v24);
          v166 = (_QWORD *)*v24;
          *v24 = 0x8000000000000000;
          sub_100016D64(&v163, v27, v26, isUniquelyReferenced_nonNull_native);
          v39 = *v24;
          *v24 = (uint64_t)v166;
          swift_bridgeObjectRelease(v26);
          swift_bridgeObjectRelease(v39);
          v157(&v169, 0);
          goto LABEL_38;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v26);
        sub_1000124F8((uint64_t)&v163, &qword_100158010);
        v167 = 0u;
        v168 = 0u;
      }
      sub_1000124F8((uint64_t)&v167, &qword_100158018);
      v40 = *v24;
      swift_bridgeObjectRetain(*v24);
      v41 = sub_100005DE8(v27, v26);
      v43 = v42;
      swift_bridgeObjectRelease(v40);
      if ((v43 & 1) != 0)
      {
        v44 = swift_isUniquelyReferenced_nonNull_native(*v24);
        v166 = (_QWORD *)*v24;
        *v24 = 0x8000000000000000;
        if ((v44 & 1) == 0)
          sub_100016EFC();
        v45 = (uint64_t)v166;
        swift_bridgeObjectRelease(*(_QWORD *)(v166[6] + 16 * v41 + 8));
        sub_100017464((_OWORD *)(*(_QWORD *)(v45 + 56) + 32 * v41), &v163);
        sub_100035C5C(v41, v45);
        v46 = *v24;
        *v24 = v45;
        swift_bridgeObjectRelease(v46);
      }
      else
      {
        v163 = 0u;
        v164 = 0u;
      }
      swift_bridgeObjectRelease(v26);
      sub_1000124F8((uint64_t)&v163, &qword_100158018);
      v157(&v169, 0);
    }
    else
    {
      ((void (*)(__int128 *, _QWORD))v22)(&v169, 0);
    }
LABEL_38:
    swift_bridgeObjectRelease(v17);
    if ((a2 & 1) != 0)
    {
      swift_bridgeObjectRetain(v17);
      v48 = sub_10002E87C(&v163, v16, v17);
      if (*v47)
      {
        v49 = v47;
        v50 = (uint64_t *)sub_10008F9A0();
        v51 = *v50;
        v52 = v50[1];
        v170 = &type metadata for Bool;
        LOBYTE(v169) = 1;
        sub_100017464(&v169, &v167);
        swift_bridgeObjectRetain(v52);
        v53 = swift_isUniquelyReferenced_nonNull_native(*v49);
        v166 = (_QWORD *)*v49;
        *v49 = 0x8000000000000000;
        sub_100016D64(&v167, v51, v52, v53);
        v54 = *v49;
        *v49 = v166;
        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease(v54);
      }
      ((void (*)(__int128 *, _QWORD))v48)(&v163, 0);
      swift_bridgeObjectRelease(v17);
    }
    swift_bridgeObjectRetain(v17);
    v56 = sub_10002E87C(&v163, v16, v17);
    if (*v55)
    {
      v57 = v55;
      v58 = (uint64_t *)sub_10008F4E4();
      v59 = *v58;
      v60 = v58[1];
      v61 = *(uint64_t (**)(__n128))(*v159 + 296);
      v62 = swift_bridgeObjectRetain(v60);
      v63 = v61(v62);
      v170 = &type metadata for Data;
      *(_QWORD *)&v169 = v63;
      *((_QWORD *)&v169 + 1) = v64;
      sub_100017464(&v169, &v167);
      v65 = swift_isUniquelyReferenced_nonNull_native(*v57);
      v166 = (_QWORD *)*v57;
      *v57 = 0x8000000000000000;
      sub_100016D64(&v167, v59, v60, v65);
      v66 = *v57;
      *v57 = v166;
      swift_bridgeObjectRelease(v60);
      swift_bridgeObjectRelease(v66);
    }
    ((void (*)(__int128 *, _QWORD))v56)(&v163, 0);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRetain(v17);
    v68 = sub_10002E87C(&v163, v16, v17);
    if (*v67)
    {
      v69 = v67;
      v70 = (uint64_t *)sub_10008F97C();
      v71 = *v70;
      v72 = v70[1];
      v73 = *(uint64_t (**)(__n128))(*(_QWORD *)v162 + 144);
      v74 = swift_bridgeObjectRetain(v72);
      v75 = v73(v74);
      v170 = &type metadata for String;
      *(_QWORD *)&v169 = v75;
      *((_QWORD *)&v169 + 1) = v76;
      sub_100017464(&v169, &v167);
      v77 = swift_isUniquelyReferenced_nonNull_native(*v69);
      v166 = (_QWORD *)*v69;
      *v69 = 0x8000000000000000;
      sub_100016D64(&v167, v71, v72, v77);
      v78 = *v69;
      *v69 = v166;
      swift_bridgeObjectRelease(v72);
      swift_bridgeObjectRelease(v78);
    }
    ((void (*)(__int128 *, _QWORD))v68)(&v163, 0);
    swift_bridgeObjectRelease(v17);
    v79 = (uint64_t *)sub_10008F9AC();
    v80 = v79;
    if (*(_QWORD *)(v18 + 16))
    {
      v81 = *v79;
      v82 = v79[1];
      swift_bridgeObjectRetain(v82);
      v83 = sub_100005DE8(v81, v82);
      if ((v84 & 1) != 0)
      {
        sub_100005D28(*(_QWORD *)(v18 + 56) + 32 * v83, (uint64_t)&v163);
      }
      else
      {
        v163 = 0u;
        v164 = 0u;
      }
      swift_bridgeObjectRelease(v82);
      if (*((_QWORD *)&v164 + 1))
      {
        sub_1000124F8((uint64_t)&v163, &qword_100158018);
        goto LABEL_56;
      }
    }
    else
    {
      v163 = 0u;
      v164 = 0u;
    }
    sub_1000124F8((uint64_t)&v163, &qword_100158018);
    swift_bridgeObjectRetain(v17);
    v86 = sub_10002E87C(&v163, v16, v17);
    if (*v85)
    {
      v87 = v85;
      v89 = *v80;
      v88 = v80[1];
      swift_bridgeObjectRetain(v88);
      v90 = (uint64_t *)sub_10008F9B8();
      v91 = *v90;
      v92 = v90[1];
      v170 = &type metadata for String;
      *(_QWORD *)&v169 = v91;
      *((_QWORD *)&v169 + 1) = v92;
      sub_100017464(&v169, &v167);
      swift_bridgeObjectRetain(v92);
      v93 = swift_isUniquelyReferenced_nonNull_native(*v87);
      v166 = (_QWORD *)*v87;
      *v87 = 0x8000000000000000;
      sub_100016D64(&v167, v89, v88, v93);
      v94 = *v87;
      *v87 = v166;
      swift_bridgeObjectRelease(v88);
      swift_bridgeObjectRelease(v94);
    }
    ((void (*)(__int128 *, _QWORD))v86)(&v163, 0);
    swift_bridgeObjectRelease(v17);
LABEL_56:
    v95 = (uint64_t *)sub_10008F97C();
    v96 = v95;
    if (*(_QWORD *)(v18 + 16))
    {
      v98 = *v95;
      v97 = v95[1];
      swift_bridgeObjectRetain(v97);
      v99 = sub_100005DE8(v98, v97);
      if ((v100 & 1) != 0)
      {
        sub_100005D28(*(_QWORD *)(v18 + 56) + 32 * v99, (uint64_t)&v163);
      }
      else
      {
        v163 = 0u;
        v164 = 0u;
      }
      swift_bridgeObjectRelease(v97);
    }
    else
    {
      v163 = 0u;
      v164 = 0u;
    }
    swift_bridgeObjectRelease(v18);
    v101 = *((_QWORD *)&v164 + 1);
    sub_1000124F8((uint64_t)&v163, &qword_100158018);
    if (v101)
    {
      v103 = sub_10002E87C(&v163, v16, v17);
      if (*v102)
      {
        v104 = v102;
        v105 = (uint64_t *)sub_10008F988();
        v107 = *v105;
        v106 = v105[1];
        v108 = *(uint64_t (**)(__n128))(*(_QWORD *)v162 + 144);
        v109 = swift_bridgeObjectRetain(v106);
        v110 = v108(v109);
        v170 = &type metadata for String;
        *(_QWORD *)&v169 = v110;
        *((_QWORD *)&v169 + 1) = v111;
        sub_100017464(&v169, &v167);
        v112 = swift_isUniquelyReferenced_nonNull_native(*v104);
        v166 = (_QWORD *)*v104;
        v113 = v166;
        *v104 = 0x8000000000000000;
        v115 = sub_100005DE8(v107, v106);
        v116 = v113[2];
        v117 = (v114 & 1) == 0;
        v118 = v116 + v117;
        if (__OFADD__(v116, v117))
        {
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }
        v119 = v114;
        if (v113[3] >= v118)
        {
          if ((v112 & 1) == 0)
            sub_100016EFC();
        }
        else
        {
          sub_100016A68(v118, v112);
          v120 = sub_100005DE8(v107, v106);
          if ((v119 & 1) != (v121 & 1))
            goto LABEL_93;
          v115 = v120;
        }
        v141 = v166;
        if ((v119 & 1) != 0)
        {
          v8 = (_QWORD *)(v166[7] + 32 * v115);
          sub_100005D08(v8);
          sub_100017464(&v167, v8);
        }
        else
        {
          v166[(v115 >> 6) + 8] |= 1 << v115;
          v142 = (uint64_t *)(v141[6] + 16 * v115);
          *v142 = v107;
          v142[1] = v106;
          sub_100017464(&v167, (_OWORD *)(v141[7] + 32 * v115));
          v143 = v141[2];
          v144 = __OFADD__(v143, 1);
          v145 = v143 + 1;
          if (v144)
            goto LABEL_90;
          v141[2] = v145;
          swift_bridgeObjectRetain(v106);
        }
        v9 = *v104;
        *v104 = v141;
        swift_bridgeObjectRelease(v106);
        swift_bridgeObjectRelease(v9);
      }
      ((void (*)(__int128 *, _QWORD))v103)(&v163, 0);
    }
    else
    {
      v123 = sub_10002E87C(&v163, v16, v17);
      if (*v122)
      {
        v124 = v122;
        v126 = *v96;
        v125 = v96[1];
        v127 = *(uint64_t (**)(__n128))(*(_QWORD *)v162 + 144);
        v128 = swift_bridgeObjectRetain(v125);
        v129 = v127(v128);
        v170 = &type metadata for String;
        *(_QWORD *)&v169 = v129;
        *((_QWORD *)&v169 + 1) = v130;
        sub_100017464(&v169, &v167);
        v131 = swift_isUniquelyReferenced_nonNull_native(*v124);
        v166 = (_QWORD *)*v124;
        v132 = v166;
        *v124 = 0x8000000000000000;
        v134 = sub_100005DE8(v126, v125);
        v135 = v132[2];
        v136 = (v133 & 1) == 0;
        v137 = v135 + v136;
        if (__OFADD__(v135, v136))
          goto LABEL_89;
        v138 = v133;
        if (v132[3] >= v137)
        {
          if ((v131 & 1) == 0)
            sub_100016EFC();
        }
        else
        {
          sub_100016A68(v137, v131);
          v139 = sub_100005DE8(v126, v125);
          if ((v138 & 1) != (v140 & 1))
            goto LABEL_93;
          v134 = v139;
        }
        v146 = v166;
        if ((v138 & 1) != 0)
        {
          v147 = (_QWORD *)(v166[7] + 32 * v134);
          sub_100005D08(v147);
          sub_100017464(&v167, v147);
        }
        else
        {
          v166[(v134 >> 6) + 8] |= 1 << v134;
          v148 = (uint64_t *)(v146[6] + 16 * v134);
          *v148 = v126;
          v148[1] = v125;
          sub_100017464(&v167, (_OWORD *)(v146[7] + 32 * v134));
          v149 = v146[2];
          v144 = __OFADD__(v149, 1);
          v150 = v149 + 1;
          if (v144)
            goto LABEL_91;
          v146[2] = v150;
          swift_bridgeObjectRetain(v125);
        }
        v151 = *v124;
        *v124 = v146;
        swift_bridgeObjectRelease(v125);
        swift_bridgeObjectRelease(v151);
      }
      ((void (*)(__int128 *, _QWORD))v123)(&v163, 0);
    }
    v6 = v160;
    v7 = v161;
    swift_bridgeObjectRelease(v17);
  }
  v14 = v7 + 4;
  if (v7 + 4 >= v156)
    return swift_release(v158);
  v12 = *(_QWORD *)(v155 + 8 * v14);
  if (v12)
  {
    v13 = v7 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v156)
      return swift_release(v158);
    v12 = *(_QWORD *)(v155 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_23;
  }
LABEL_92:
  __break(1u);
LABEL_93:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void (*sub_10002E87C(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_1000355A4(v6, a2, a3);
  return sub_100029040;
}

uint64_t sub_10002E8E8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD v95[2];
  __int128 v96;
  void *v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v4 = v3;
  v8 = type metadata accessor for URL(0);
  v92 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v91 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005C88(&qword_100158918);
  __chkstk_darwin(v10);
  v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v90 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)v4[3];
  v17 = v16[2];
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v17);
  swift_retain(v4);
  v18 = sub_100037090(&_swiftEmptyDictionarySingleton, v17, (uint64_t)v4, a1, a2, a3);
  swift_bridgeObjectRelease(v17);
  swift_release(v4);
  swift_bridgeObjectRelease(a2);
  v19 = (uint64_t *)sub_10008F490();
  v20 = v19;
  v21 = *(_QWORD *)(v18 + 16);
  v93 = v8;
  if (v21)
  {
    v22 = *v19;
    v23 = v19[1];
    swift_bridgeObjectRetain(v23);
    v24 = sub_100005DE8(v22, v23);
    if ((v25 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(v18 + 56) + 32 * v24, (uint64_t)&v98);
      swift_bridgeObjectRelease(v23);
      if (*((_QWORD *)&v99 + 1))
      {
        sub_1000124F8((uint64_t)&v98, &qword_100158018);
        goto LABEL_13;
      }
    }
    else
    {
      v98 = 0u;
      v99 = 0u;
      swift_bridgeObjectRelease(v23);
    }
  }
  else
  {
    v98 = 0u;
    v99 = 0u;
  }
  sub_1000124F8((uint64_t)&v98, &qword_100158018);
  v26 = *v20;
  v27 = v20[1];
  v28 = *(uint64_t (**)(uint64_t))(*v16 + 224);
  v29 = swift_bridgeObjectRetain(v27);
  v30 = v28(v29);
  *((_QWORD *)&v99 + 1) = &type metadata for Data;
  if (v31 >> 60 == 15)
    v32 = 0;
  else
    v32 = v30;
  v33 = 0xC000000000000000;
  if (v31 >> 60 != 15)
    v33 = v31;
  *(_QWORD *)&v98 = v32;
  *((_QWORD *)&v98 + 1) = v33;
  sub_100017464(&v98, &v96);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
  *(_QWORD *)&v95[0] = v18;
  sub_100016D64(&v96, v26, v27, isUniquelyReferenced_nonNull_native);
  v18 = *(_QWORD *)&v95[0];
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(0x8000000000000000);
LABEL_13:
  sub_100019E1C((uint64_t)v4 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, (uint64_t)v12, &qword_100158918);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v35 = sub_1000124F8((uint64_t)v12, &qword_100158918);
  }
  else
  {
    v36 = v90;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v90, v12, v13);
    v37 = (uint64_t *)sub_10008F46C();
    v38 = *v37;
    v39 = v37[1];
    swift_bridgeObjectRetain(v39);
    v40 = sub_1000D2B3C();
    *((_QWORD *)&v99 + 1) = &type metadata for Data;
    *(_QWORD *)&v98 = v40;
    *((_QWORD *)&v98 + 1) = v41;
    sub_100017464(&v98, &v96);
    v42 = swift_isUniquelyReferenced_nonNull_native(v18);
    *(_QWORD *)&v95[0] = v18;
    sub_100016D64(&v96, v38, v39, v42);
    v18 = *(_QWORD *)&v95[0];
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(0x8000000000000000);
    v35 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v36, v13);
  }
  v43 = (*(uint64_t (**)(uint64_t))(*v4 + 168))(v35);
  v44 = v43;
  if (qword_10015E4D0 != -1)
    v43 = swift_once(&qword_10015E4D0, sub_10002C11C);
  if ((qword_100175308 & ~v44) == 0)
  {
    v45 = (uint64_t *)sub_10008F484();
    v46 = *v45;
    v47 = v45[1];
    *((_QWORD *)&v99 + 1) = &type metadata for Bool;
    LOBYTE(v98) = 1;
    sub_100017464(&v98, &v96);
    swift_bridgeObjectRetain(v47);
    v48 = swift_isUniquelyReferenced_nonNull_native(v18);
    *(_QWORD *)&v95[0] = v18;
    sub_100016D64(&v96, v46, v47, v48);
    v18 = *(_QWORD *)&v95[0];
    swift_bridgeObjectRelease(v47);
    v43 = swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (((*(uint64_t (**)(uint64_t))(*v16 + 216))(v43) & 1) != 0
    || (v49 = type metadata accessor for DriverExtension(0), swift_dynamicCastClass(v16, v49)))
  {
    (*(void (**)(__int128 *__return_ptr))(*v16 + 112))(&v96);
    if (v97)
    {
      sub_100004E2C(&v96, (uint64_t)&v98);
      v50 = (uint64_t *)sub_10008F73C();
      v51 = *v50;
      v52 = v50[1];
      v53 = *((_QWORD *)&v99 + 1);
      v54 = v100;
      sub_100004DE4(&v98, *((uint64_t *)&v99 + 1));
      v55 = *(uint64_t (**)(uint64_t, uint64_t))(v54 + 64);
      swift_bridgeObjectRetain(v52);
      v56 = v91;
      v57 = v55(v53, v54);
      v58 = URL.path.getter(v57);
      v60 = v59;
      (*(void (**)(char *, uint64_t))(v92 + 8))(v56, v93);
      v97 = &type metadata for String;
      *(_QWORD *)&v96 = v58;
      *((_QWORD *)&v96 + 1) = v60;
      sub_100017464(&v96, v95);
      v61 = swift_isUniquelyReferenced_nonNull_native(v18);
      v94 = v18;
      sub_100016D64(v95, v51, v52, v61);
      v18 = v94;
      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_100005D08(&v98);
    }
    else
    {
      sub_1000124F8((uint64_t)&v96, &qword_100157C78);
    }
    v62 = (uint64_t *)sub_10008F4E4();
    v63 = *v62;
    v64 = v62[1];
    v65 = (uint64_t)(v4 + 4);
    v66 = *(uint64_t (**)(uint64_t))(*v4 + 296);
    v67 = swift_bridgeObjectRetain(v64);
    v68 = v66(v67);
    *((_QWORD *)&v99 + 1) = &type metadata for Data;
    *(_QWORD *)&v98 = v68;
    *((_QWORD *)&v98 + 1) = v69;
    sub_100017464(&v98, &v96);
    v70 = swift_isUniquelyReferenced_nonNull_native(v18);
    *(_QWORD *)&v95[0] = v18;
    sub_100016D64(&v96, v63, v64, v70);
    v71 = *(_QWORD *)&v95[0];
    swift_bridgeObjectRelease(v64);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_100019E1C(v65, (uint64_t)&v98, &qword_100158010);
    v72 = *((_QWORD *)&v99 + 1);
    if (*((_QWORD *)&v99 + 1))
    {
      v73 = v100;
      sub_100004DE4(&v98, *((uint64_t *)&v99 + 1));
      v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 24))(v72, v73);
      v76 = v75;
      sub_100005D08(&v98);
      if (!v76)
      {
        v85 = (uint64_t *)sub_10008F4F0();
        v82 = *v85;
        v83 = v85[1];
        swift_bridgeObjectRetain(v83);
        v84 = sub_10008F508();
        goto LABEL_32;
      }
      if (v76 != 1)
      {
        swift_bridgeObjectRetain(v76);
        v77 = (uint64_t *)sub_10008F4F0();
        v78 = *v77;
        v79 = v77[1];
        *((_QWORD *)&v99 + 1) = &type metadata for String;
        *(_QWORD *)&v98 = v74;
        *((_QWORD *)&v98 + 1) = v76;
        sub_100017464(&v98, &v96);
        swift_bridgeObjectRetain(v79);
        v80 = swift_isUniquelyReferenced_nonNull_native(v71);
        *(_QWORD *)&v95[0] = v71;
        sub_100016D64(&v96, v78, v79, v80);
        v18 = *(_QWORD *)&v95[0];
        swift_bridgeObjectRelease(v79);
        swift_bridgeObjectRelease(0x8000000000000000);
        sub_100017450(v74, v76);
        return v18;
      }
    }
    else
    {
      sub_1000124F8((uint64_t)&v98, &qword_100158010);
    }
    v81 = (uint64_t *)sub_10008F4F0();
    v82 = *v81;
    v83 = v81[1];
    swift_bridgeObjectRetain(v83);
    v84 = sub_10008F4FC();
LABEL_32:
    v86 = *(_QWORD *)v84;
    v87 = *((_QWORD *)v84 + 1);
    *((_QWORD *)&v99 + 1) = &type metadata for String;
    *(_QWORD *)&v98 = v86;
    *((_QWORD *)&v98 + 1) = v87;
    sub_100017464(&v98, &v96);
    swift_bridgeObjectRetain(v87);
    v88 = swift_isUniquelyReferenced_nonNull_native(v71);
    *(_QWORD *)&v95[0] = v71;
    sub_100016D64(&v96, v82, v83, v88);
    v18 = *(_QWORD *)&v95[0];
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  return v18;
}

uint64_t sub_10002EFF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 24);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v6 + 112))(&v19, v3);
  if (v20)
  {
    sub_100004E2C(&v19, (uint64_t)&v21);
    v7 = v23;
    v8 = v24;
    sub_100004DE4(&v21, v23);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
    v10 = URL.path.getter(v9);
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    v13 = sub_1000D18C8(v10, v12);
    swift_bridgeObjectRelease(v12);
    sub_100005D08(&v21);
  }
  else
  {
    v14 = sub_1000124F8((uint64_t)&v19, &qword_100157C78);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 144))(v14);
    v22 = v15;
    v16._countAndFlagsBits = 0x6E7562206F6E2820;
    v16._object = (void *)0xEC00000029656C64;
    String.append(_:)(v16);
    v17 = v22;
    v13 = sub_1000D18C8(v21, v22);
    swift_bridgeObjectRelease(v17);
  }
  return v13;
}

double sub_10002F160@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v13 = (uint64_t *)sub_10008F358();
  v14 = *v13;
  v15 = (void *)v13[1];
  swift_bridgeObjectRetain(v15);
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  LOBYTE(v14) = String.hasPrefix(_:)(v16);
  swift_bridgeObjectRelease(v15);
  if ((v14 & 1) != 0)
  {
    sub_10002F2C8(a1, a2, a3, a4, v6, a5 & 1, &v21);
    if (v22)
    {
      v17 = sub_100005C88(&qword_100158920);
      if ((swift_dynamicCast(&v20, &v21, (char *)&type metadata for Any + 8, v17, 6) & 1) != 0)
      {
        v23 = v20;
        (*(void (**)(uint64_t *, _QWORD))(*v6 + 280))(&v23, a5 & 1);
        v19 = v23;
        *(_QWORD *)(a6 + 24) = v17;
        *(_QWORD *)a6 = v19;
        return result;
      }
    }
    else
    {
      sub_1000124F8((uint64_t)&v21, &qword_100158018);
    }
    result = 0.0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  else
  {
    sub_10002F2C8(a1, a2, a3, a4, v6, a5 & 1, (_OWORD *)a6);
  }
  return result;
}

_OWORD *sub_10002F2C8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X4>, char a6@<W5>, _OWORD *a7@<X8>)
{
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _OWORD *v32;
  char v33;
  Swift::String v34;
  __int128 v35;

  v14 = sub_10002F578((uint64_t)&off_100146E58);
  if (!a2)
    goto LABEL_16;
  swift_bridgeObjectRetain(a2);
  v15._countAndFlagsBits = 20297;
  v15._object = (void *)0xE200000000000000;
  if (String.hasPrefix(_:)(v15)
    || (v16._countAndFlagsBits = 21327, v16._object = (void *)0xE200000000000000, String.hasPrefix(_:)(v16)))
  {
    v33 = a6;
    v34._countAndFlagsBits = 95;
    v34._object = (void *)0xE100000000000000;
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    v18 = v34;
    if (String.hasSuffix(_:)(v34))
    {
      swift_bridgeObjectRelease(v34._object);
      if (!*(_QWORD *)(v14 + 16))
        goto LABEL_15;
    }
    else
    {
      v32 = a7;
      v19 = *(_QWORD *)(a5[3] + 16);
      v34._countAndFlagsBits = a3;
      v34._object = a4;
      swift_bridgeObjectRetain(a4);
      String.append(_:)(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v18._object);
      if (*(_QWORD *)(v19 + 16) && (v20 = sub_100005DE8(v34._countAndFlagsBits, (uint64_t)v34._object), (v21 & 1) != 0))
      {
        sub_100005D28(*(_QWORD *)(v19 + 56) + 32 * v20, (uint64_t)&v34);
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(v19);
        if (*((_QWORD *)&v35 + 1))
        {
          swift_bridgeObjectRelease(a2);
          swift_bridgeObjectRelease(v14);
          return sub_100017464(&v34, v32);
        }
      }
      else
      {
        v34 = (Swift::String)0;
        v35 = 0u;
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(v19);
      }
      sub_1000124F8((uint64_t)&v34, &qword_100158018);
      a7 = v32;
      if (!*(_QWORD *)(v14 + 16))
        goto LABEL_15;
    }
    v23 = sub_100005DE8(a1, (uint64_t)a2);
    if ((v24 & 1) != 0)
    {
      v25 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v23);
      v26 = *v25;
      v27 = v25[1];
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*a5 + 304))(v26, v27, a3, a4, v33 & 1);
      v28 = v27;
      return (_OWORD *)swift_bridgeObjectRelease(v28);
    }
  }
LABEL_15:
  swift_bridgeObjectRelease(a2);
LABEL_16:
  result = (_OWORD *)swift_bridgeObjectRelease(v14);
  v29 = *(_QWORD *)(a5[3] + 16);
  if (!*(_QWORD *)(v29 + 16))
  {
    *a7 = 0u;
    a7[1] = 0u;
    return result;
  }
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v29);
  v30 = sub_100005DE8(a3, (uint64_t)a4);
  if ((v31 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(v29 + 56) + 32 * v30, (uint64_t)a7);
  }
  else
  {
    *a7 = 0u;
    a7[1] = 0u;
  }
  swift_bridgeObjectRelease(a4);
  v28 = v29;
  return (_OWORD *)swift_bridgeObjectRelease(v28);
}

unint64_t sub_10002F578(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_100158C30);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100005DE8(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002F698(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_100158C10);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(v9);
    result = sub_100005DE8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002F7B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 304))(a1, a2, a3, a4, 0);
}

uint64_t sub_10002F7C0()
{
  _QWORD *v0;

  swift_release(v0[3]);
  sub_1000124F8((uint64_t)(v0 + 4), &qword_100158010);
  sub_1000124F8((uint64_t)(v0 + 10), &qword_100158910);
  sub_10003707C(v0[15], v0[16], v0[17]);
  sub_1000124F8((uint64_t)v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_100158918);
  sub_1000124F8((uint64_t)v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10015BA60);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10002F864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)(v11 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection) = a1;
  v12 = v11 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a2, v13);
  sub_1000260AC(a3, v11 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID, &qword_100158918);
  sub_1000260AC(a4, v11 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID, &qword_100158918);
  *(_QWORD *)(v11 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions) = a5;
  return v11;
}

uint64_t sub_10002F934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection));
  sub_1000124F8(v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID, &qword_100158918);
  sub_1000124F8(v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID, &qword_100158918);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10002F9D4()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  uint64_t v8;

  v0 = type metadata accessor for KernelCollection(0);
  v1 = sub_100012534(&qword_100158928, type metadata accessor for KernelCollection, (uint64_t)&unk_100110900);
  v8 = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  v2._countAndFlagsBits = 10272;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  v4._countAndFlagsBits = UUID.uuidString.getter(v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v8;
}

uint64_t sub_10002FA94()
{
  return sub_10002F9D4();
}

uint64_t sub_10002FAB4(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  void *object;
  Swift::String v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  Swift::String v109;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  Swift::String v140;
  Swift::String v141;
  Swift::String v142;
  Swift::String v143;
  void *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v195;
  uint64_t v196;
  _DWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  unint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t (*v238)(uint64_t, uint64_t, uint64_t);
  int v239;
  int v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  uint64_t v248;
  uint64_t *v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  char v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned __int16 v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  _UNKNOWN **v292;
  uint64_t v293;
  char *v294;
  unsigned __int8 *v295;
  uint64_t (*v296)(void);
  int v297;
  int v298;
  uint64_t v299;
  unint64_t v300;
  char v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  char v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t (*v333)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  void (*v339)(__int128 *, _QWORD);
  uint64_t v340;
  char **v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  unint64_t v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t (*v358)(uint64_t);
  uint64_t v359;
  uint64_t v360;
  BOOL v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  BOOL v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  BOOL v372;
  uint64_t v373;
  unint64_t v374;
  char *v375;
  void *v376;
  uint64_t result;
  _DWORD *v378;
  Swift::String v379;
  Swift::String v380;
  void *v381;
  Swift::String v382;
  Swift::String v383;
  void *v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  unint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _UNKNOWN **v403;
  int v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  __int128 v408;
  uint64_t *v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  __int128 v414;
  char *v415;
  uint64_t v416;
  char *v417;
  uint64_t (*v418)(void);
  uint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  _BYTE v422[24];
  _BYTE v423[40];
  uint64_t v424[5];
  __int128 v425;
  uint64_t v426;
  uint64_t v427;
  _QWORD *v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  _OWORD v432[37];
  __int128 v433;
  uint64_t v434;
  uint64_t v435;
  _BYTE v436[32];
  uint64_t v437;
  __int128 v438;
  __int128 v439;
  uint64_t v440;
  uint64_t v441[76];
  char *v442;

  LODWORD(v401) = a6;
  v402 = a5;
  *(_QWORD *)&v414 = a4;
  v412 = a3;
  v404 = a2;
  v7 = type metadata accessor for OSSignpostID(0);
  v406 = *(_QWORD *)(v7 - 8);
  v407 = v7;
  __chkstk_darwin(v7);
  v405 = (char *)&v390 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v398 = (char *)&v390 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v415 = *(char **)(v12 - 8);
  v416 = v12;
  __chkstk_darwin(v12);
  v410 = (char *)&v390 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005C88(&qword_100158918);
  v15 = __chkstk_darwin(v14);
  v403 = (_UNKNOWN **)((char *)&v390 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __chkstk_darwin(v15);
  v409 = (uint64_t *)((char *)&v390 - v18);
  v19 = __chkstk_darwin(v17);
  v397 = (uint64_t)&v390 - v20;
  v21 = __chkstk_darwin(v19);
  v399 = (uint64_t)&v390 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v390 - v23;
  v25 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v26 = __chkstk_darwin(v25);
  *(_QWORD *)&v408 = (char *)&v390 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v400 = (uint64_t)&v390 - v29;
  __chkstk_darwin(v28);
  v418 = (uint64_t (*)(void))((char *)&v390 - v30);
  v31 = a1[3];
  v32 = a1[4];
  sub_100004DE4(a1, v31);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
  v35 = v34;
  LOBYTE(v32) = sub_1000D5460(v33, v34, 0, 1uLL);
  v36 = sub_100037510(v33, v35);
  if ((v32 & 1) != 0)
  {
    LODWORD(v420) = static os_log_type_t.default.getter(v36);
    v37 = sub_1000D2C70();
    v411 = v9;
    v38 = (void *)*v37;
    v39 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v40 = swift_allocObject(v39, 72, 7);
    *(_OWORD *)(v40 + 16) = xmmword_10010F050;
    v413 = v10;
    v42 = a1[3];
    v41 = a1[4];
    sub_100004DE4(a1, v42);
    v43 = a1;
    v44 = v24;
    v45 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 24);
    v46 = v38;
    v47 = v45(v42, v41);
    v24 = v44;
    a1 = v43;
    v48 = v47;
    v50 = v49;
    *(_QWORD *)(v40 + 56) = &type metadata for String;
    *(_QWORD *)(v40 + 64) = sub_100026838();
    if (v50)
      v51 = v48;
    else
      v51 = 0xD000000000000016;
    v52 = 0x8000000100122D80;
    if (v50)
      v52 = v50;
    v10 = v413;
    *(_QWORD *)(v40 + 32) = v51;
    *(_QWORD *)(v40 + 40) = v52;
    os_log(_:dso:log:_:_:)(v420, &_mh_execute_header, v46, "Realize dext %{public}s", 23, 2, v40);

    v9 = v411;
    swift_bridgeObjectRelease(v40);
  }
  v53 = type metadata accessor for OSExtension(0);
  v54 = sub_1000F4600(a1);
  if (!v54)
  {
    *(_QWORD *)&v432[0] = 0;
    *((_QWORD *)&v432[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(*((_QWORD *)&v432[0] + 1));
    *(_QWORD *)&v432[0] = 0xD00000000000002ALL;
    *((_QWORD *)&v432[0] + 1) = 0x8000000100122BA0;
    v82 = a1;
    v83 = a1[3];
    v84 = a1[4];
    sub_100004DE4(v82, v83);
    v85 = v410;
    (*(void (**)(uint64_t, uint64_t))(v84 + 64))(v83, v84);
    v86 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v87 = v416;
    v88._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v416, v86);
    object = v88._object;
    String.append(_:)(v88);
    swift_bridgeObjectRelease(object);
    (*((void (**)(char *, uint64_t))v415 + 1))(v85, v87);
    v90._countAndFlagsBits = 46;
    v90._object = (void *)0xE100000000000000;
    String.append(_:)(v90);
    v92 = *((_QWORD *)&v432[0] + 1);
    v91 = *(_QWORD *)&v432[0];
    v93 = sub_1000122F8();
    v94 = swift_allocError(&type metadata for KMError, v93, 0, 0);
    *(_OWORD *)v95 = __PAIR128__(v92, v91);
    *(_OWORD *)(v95 + 16) = 0u;
    *(_OWORD *)(v95 + 32) = 0u;
    *(_OWORD *)(v95 + 48) = 0u;
    *(_QWORD *)(v95 + 64) = 0;
    *(_BYTE *)(v95 + 72) = 9;
    swift_willThrow(v94);
    return v91;
  }
  v55 = (_QWORD *)v54;
  v393 = v53;
  v417 = v24;
  v56 = v9;
  v57 = (uint64_t)v418;
  sub_100019E1C(v414, (uint64_t)v418, (uint64_t *)&unk_10015BA60);
  (*(void (**)(uint64_t))(*v55 + 168))(v57);
  v58 = a1;
  v59 = a1[3];
  v60 = a1[4];
  sub_100004DE4(v58, v59);
  v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 16))(v59, v60);
  v63 = v62;
  v64 = sub_1000D5460(v61, v62, 0, 1uLL);
  sub_100037510(v61, v63);
  v65 = 168;
  if ((v64 & 1) != 0)
    v65 = 184;
  v66 = 160;
  if ((v64 & 1) != 0)
    v66 = 176;
  v67 = (uint64_t)v442;
  *(_QWORD *)&v414 = *(_QWORD *)&v442[v65];
  v68 = *(_QWORD *)&v442[v66];
  swift_bridgeObjectRetain(v414);
  v69 = *(_DWORD *)(v67 + 640);
  LODWORD(v432[0]) = *(_DWORD *)sub_1000A4674();
  LODWORD(v433) = v69;
  v394 = sub_100012808();
  v70 = dispatch thunk of SetAlgebra.isSuperset(of:)(v432, &type metadata for ExtensionManager.Settings.Flags, v394);
  v420 = v55;
  LODWORD(v396) = v69;
  if ((v70 & 1) != 0)
  {
    v392 = 0;
    v440 = 0;
    v439 = 0u;
    v438 = 0u;
    memset(v436, 0, sizeof(v436));
    v437 = 0;
    v71 = v58;
    v72 = v56;
    v73 = (uint64_t)v417;
    goto LABEL_15;
  }
  v391 = v68;
  v91 = v67;
  v96 = sub_100031CE8(v58);
  if (v419)
  {
    swift_release(v55);
    swift_bridgeObjectRelease(v414);
    return v91;
  }
  v97 = v96;
  v395 = v58;
  if ((v401 & 1) != 0)
  {
    v98 = *(_QWORD *)(v67 + 40);
    v99 = *(_QWORD *)(v67 + 48);
    sub_100004DE4((_QWORD *)(v67 + 16), v98);
    sub_1000DEC88(v98, v99);
    v100 = v434;
    v101 = v435;
    sub_100004DE4(&v433, v434);
    v102 = v419;
    sub_1000DBDFC((uint64_t)v55, v97, v100, v101);
    v91 = v102;
    v72 = v56;
    if (v102)
    {
      sub_100005D08(&v433);
      *(_QWORD *)&v433 = v102;
      swift_errorRetain(v102);
      v103 = sub_100005C88(&qword_10015AB50);
      if (swift_dynamicCast(v432, &v433, v103, &type metadata for KMError, 0))
      {
        if (BYTE8(v432[4]) == 45)
        {
          sub_1000391DC(*(uint64_t *)&v432[0], *((uint64_t *)&v432[0] + 1), *(uint64_t *)&v432[1], *((uint64_t *)&v432[1] + 1), *(unint64_t *)&v432[2], *((uint64_t *)&v432[2] + 1), *(uint64_t *)&v432[3], *((uint64_t *)&v432[3] + 1), *(uint64_t *)&v432[4], 45);
          swift_errorRelease(v102);
          v440 = 0;
          v439 = 0u;
          v438 = 0u;
          swift_errorRelease(v433);
          v419 = 0;
          v104 = v414;
          goto LABEL_46;
        }
        sub_1000391DC(*(uint64_t *)&v432[0], *((uint64_t *)&v432[0] + 1), *(uint64_t *)&v432[1], *((uint64_t *)&v432[1] + 1), *(unint64_t *)&v432[2], *((uint64_t *)&v432[2] + 1), *(uint64_t *)&v432[3], *((uint64_t *)&v432[3] + 1), *(uint64_t *)&v432[4], SBYTE8(v432[4]));
      }
      swift_release(v55);
      swift_bridgeObjectRelease(v414);
      swift_errorRelease(v433);
      return v91;
    }
    v419 = 0;
    sub_1000260AC((uint64_t)v432, (uint64_t)&v438, &qword_100158010);
    sub_100005D08(&v433);
    v104 = v414;
  }
  else
  {
    v148 = *(_QWORD *)(v67 + 40);
    v149 = *(_QWORD *)(v67 + 48);
    sub_100004DE4((_QWORD *)(v67 + 16), v148);
    sub_1000DEC88(v148, v149);
    v150 = *((_QWORD *)&v432[1] + 1);
    v151 = *(_QWORD *)&v432[2];
    v152 = sub_100004DE4(v432, *((uint64_t *)&v432[1] + 1));
    v153 = v414;
    swift_bridgeObjectRetain(v414);
    v154 = v97;
    v155 = v153;
    v156 = v150;
    v91 = (uint64_t)v152;
    v157 = v419;
    sub_1000DBE24((uint64_t)&v433, (uint64_t)v55, v154, v391, v153, v156, v151);
    v419 = v157;
    if (v157)
    {
      swift_release(v55);
      swift_bridgeObjectRelease_n(v153, 2);
      sub_100005D08(v432);
      return v91;
    }
    v72 = v56;
    swift_bridgeObjectRelease(v155);
    sub_1000260AC((uint64_t)&v433, (uint64_t)&v438, &qword_100158010);
    sub_100005D08(v432);
    v104 = v155;
  }
LABEL_46:
  v165 = *(_QWORD *)(v67 + 40);
  v166 = *(_QWORD *)(v67 + 48);
  sub_100004DE4((_QWORD *)(v67 + 16), v165);
  sub_1000DEC88(v165, v166);
  v167 = *((_QWORD *)&v432[1] + 1);
  v168 = *(_QWORD *)&v432[2];
  sub_100004DE4(v432, *((uint64_t *)&v432[1] + 1));
  v392 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 32))(v55, v391, v104, v167, v168);
  v169 = sub_100005D08(v432);
  v170 = (*(uint64_t (**)(uint64_t))(*v55 + 144))(v169);
  v172 = v171;
  v173 = (*(uint64_t (**)(void))(*(_QWORD *)v67 + 192))();
  if (!*(_QWORD *)(v173 + 16))
  {
    swift_bridgeObjectRelease(v172);
    swift_bridgeObjectRelease(v173);
    memset(v432, 0, 40);
    v71 = v395;
    v175 = (uint64_t)v417;
LABEL_162:
    v68 = v391;
    goto LABEL_163;
  }
  v174 = sub_100005DE8(v170, v172);
  v175 = (uint64_t)v417;
  if ((v176 & 1) == 0)
  {
    swift_bridgeObjectRelease(v172);
    swift_bridgeObjectRelease(v173);
    memset(v432, 0, 40);
LABEL_161:
    v71 = v395;
    goto LABEL_162;
  }
  v177 = *(_QWORD *)(*(_QWORD *)(v173 + 56) + 8 * v174);
  swift_bridgeObjectRetain(v177);
  swift_bridgeObjectRelease(v172);
  swift_bridgeObjectRelease(v173);
  v178 = *(_QWORD *)(v177 + 16);
  if (!v178)
  {
LABEL_160:
    memset(v432, 0, 40);
    swift_bridgeObjectRelease(v177);
    v175 = (uint64_t)v417;
    goto LABEL_161;
  }
  v413 = v10;
  v179 = v177 + 32;
  v390 = v177;
  swift_bridgeObjectRetain(v177);
  while (1)
  {
    sub_100005C44(v179, (uint64_t)&v433);
    v180 = v434;
    v181 = v435;
    sub_100004DE4(&v433, v434);
    v182 = (*(uint64_t (**)(uint64_t, uint64_t))(v181 + 32))(v180, v181);
    v184 = v183;
    sub_100019E1C((uint64_t)&v438, (uint64_t)v432, &qword_100158010);
    v185 = *((_QWORD *)&v432[1] + 1);
    if (!*((_QWORD *)&v432[1] + 1))
    {
      sub_1000124F8((uint64_t)v432, &qword_100158010);
      if (!v184)
      {
LABEL_164:
        v388 = v390;
        v389 = v390;
        goto LABEL_166;
      }
LABEL_63:
      v193 = v184;
LABEL_51:
      swift_bridgeObjectRelease(v193);
      goto LABEL_52;
    }
    v401 = v182;
    v186 = v72;
    v187 = *(_QWORD *)&v432[2];
    sub_100004DE4(v432, *((uint64_t *)&v432[1] + 1));
    v188 = (*(uint64_t (**)(uint64_t, uint64_t))(v187 + 32))(v185, v187);
    v190 = v189;
    v191 = sub_1000DBB8C();
    v193 = v192;
    sub_100011F40(v188, v190);
    sub_100005D08(v432);
    v72 = v186;
    if (!v184)
    {
      v67 = (uint64_t)v442;
      if (!v193)
        goto LABEL_164;
      goto LABEL_51;
    }
    v67 = (uint64_t)v442;
    if (!v193)
      goto LABEL_63;
    if (v401 == v191 && v184 == v193)
      break;
    v195 = _stringCompareWithSmolCheck(_:_:expecting:)(v401, v184, v191, v193, 0);
    swift_bridgeObjectRelease(v184);
    swift_bridgeObjectRelease(v193);
    if ((v195 & 1) != 0)
      goto LABEL_164;
LABEL_52:
    sub_100005D08(&v433);
    v179 += 40;
    if (!--v178)
    {
      v177 = v390;
      swift_bridgeObjectRelease(v390);
      v55 = v420;
      v10 = v413;
      goto LABEL_160;
    }
  }
  v388 = v390;
  swift_bridgeObjectRelease(v390);
  swift_bridgeObjectRelease(v184);
  v389 = v193;
LABEL_166:
  swift_bridgeObjectRelease(v389);
  v68 = v391;
  sub_100004E2C(&v433, (uint64_t)v432);
  swift_bridgeObjectRelease(v388);
  v175 = (uint64_t)v417;
  v55 = v420;
  v10 = v413;
  v71 = v395;
LABEL_163:
  sub_1000260AC((uint64_t)v432, (uint64_t)v436, &qword_100158910);
  v73 = v175;
LABEL_15:
  v74 = v68;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v73, 1, 1, v72);
  LODWORD(v401) = sub_100031F4C((uint64_t)v55, v412);
  v75 = v55[2];
  v76 = sub_10008F250();
  v77 = *(_QWORD *)(v75 + 16);
  v411 = v72;
  v413 = v10;
  v395 = v71;
  if (!v77)
  {
    memset(v432, 0, 32);
LABEL_31:
    sub_1000124F8((uint64_t)v432, &qword_100158018);
    sub_100005C44((uint64_t)v71, (uint64_t)&v433);
    sub_100005D08(&v433);
    v107 = v71;
    goto LABEL_32;
  }
  v78 = *v76;
  v79 = v76[1];
  swift_bridgeObjectRetain(v79);
  v80 = sub_100005DE8(v78, v79);
  if ((v81 & 1) != 0)
    sub_100005D28(*(_QWORD *)(v75 + 56) + 32 * v80, (uint64_t)v432);
  else
    memset(v432, 0, 32);
  swift_bridgeObjectRelease(v79);
  if (!*((_QWORD *)&v432[1] + 1))
    goto LABEL_31;
  sub_1000124F8((uint64_t)v432, &qword_100158018);
  sub_100005C44((uint64_t)v71, (uint64_t)&v433);
  v105 = *(_QWORD *)(v67 + 40);
  v106 = *(_QWORD *)(v67 + 48);
  sub_100004DE4((_QWORD *)(v67 + 16), v105);
  sub_10010731C(v105, v106);
  LOBYTE(v105) = sub_1000D58C4(&v433, v432);
  sub_100005D08(v432);
  sub_100005D08(&v433);
  v107 = v71;
  if ((v105 & 1) == 0)
  {
    swift_bridgeObjectRelease(v414);
    *(_QWORD *)&v432[0] = 0;
    *((_QWORD *)&v432[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(*((_QWORD *)&v432[0] + 1));
    *(_QWORD *)&v432[0] = 0x6261747563657845;
    *((_QWORD *)&v432[0] + 1) = 0xEF20726F6620656CLL;
    v428 = v55;
    v108 = sub_100012534((unint64_t *)&qword_100157C90, type metadata accessor for OSExtension, (uint64_t)&unk_10011B468);
    v109._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v393, v108);
    v110 = v109._object;
    String.append(_:)(v109);
    swift_bridgeObjectRelease(v110);
    v111 = 0x756F6620746F6E20;
    v112 = 0xEA0000000000646ELL;
    goto LABEL_39;
  }
LABEL_32:
  v113 = *(_QWORD *)(v67 + 192);
  v114 = *(_QWORD *)(v67 + 40);
  v115 = *(_QWORD *)(v67 + 48);
  sub_100004DE4((_QWORD *)(v67 + 16), v114);
  sub_10010731C(v114, v115);
  v116 = sub_1000D57A0(v113, v107, v432);
  v118 = v117;
  sub_100005D08(v432);
  if (!v118)
  {
    v139 = (uint64_t)v417;
    swift_bridgeObjectRelease(v414);
    *(_QWORD *)&v414 = 0;
    v55 = v420;
LABEL_82:
    LODWORD(v432[0]) = *sub_1000A45D4();
    v225 = v396;
    LODWORD(v428) = v396;
    v226 = v394;
    v227 = dispatch thunk of SetAlgebra.isSuperset(of:)(v432, &type metadata for ExtensionManager.Settings.Flags, v394);
    v228 = v402;
    if ((v227 & 1) != 0
      || (LODWORD(v432[0]) = *sub_1000A4624(),
          LODWORD(v428) = v225,
          (dispatch thunk of SetAlgebra.isSuperset(of:)(v432, &type metadata for ExtensionManager.Settings.Flags, v226) & 1) != 0))
    {
      v229 = (*(uint64_t (**)(void))(*v55 + 144))();
      v231 = v230;
      v232 = (*(uint64_t (**)(void))(*(_QWORD *)v67 + 216))();
      if (*(_QWORD *)(v232 + 16) && (v233 = sub_100005DE8(v229, v231), (v234 & 1) != 0))
      {
        v235 = *(_QWORD *)(*(_QWORD *)(v232 + 56) + 8 * v233);
        swift_bridgeObjectRetain(v235);
      }
      else
      {
        v235 = 0;
      }
      v236 = v139;
      swift_bridgeObjectRelease(v231);
      swift_bridgeObjectRelease(v232);
    }
    else
    {
      v235 = 0;
      v236 = v139;
    }
    v237 = v416;
    v238 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v415 + 6);
    v239 = v238(v228, 1, v416);
    v399 = v235;
    if (v239 == 1)
    {
      v394 = 0;
      v240 = 1;
    }
    else
    {
      v241 = *(_QWORD **)(v67 + 128);
      v242 = v400;
      sub_100019E1C(v228, v400, (uint64_t *)&unk_10015BA60);
      if (v238(v242, 1, v237) == 1)
      {
        swift_bridgeObjectRetain(v241);
        result = swift_bridgeObjectRelease(v414);
        __break(1u);
        return result;
      }
      v243 = swift_bridgeObjectRetain(v241);
      v244 = URL.path.getter(v243);
      v246 = v245;
      (*((void (**)(uint64_t, uint64_t))v415 + 1))(v242, v237);
      v394 = sub_100032348(v244, v246, v241);
      LOBYTE(v244) = v247;
      swift_bridgeObjectRelease(v241);
      swift_bridgeObjectRelease(v246);
      v240 = v244 & 1;
    }
    LODWORD(v393) = v240;
    sub_100019E1C((uint64_t)&v438, (uint64_t)&v428, &qword_100158010);
    sub_100019E1C((uint64_t)v436, (uint64_t)&v425, &qword_100158910);
    v248 = v408;
    sub_100019E1C(v412, v408, (uint64_t *)&unk_10015BA60);
    v249 = v409;
    sub_100019E1C(v236, (uint64_t)v409, &qword_100158918);
    v250 = v442;
    v251 = *((_QWORD *)v442 + 19);
    v412 = *((_QWORD *)v442 + 20);
    v252 = *((_QWORD *)v442 + 22);
    v400 = *((_QWORD *)v442 + 21);
    v402 = v252;
    v397 = *((_QWORD *)v442 + 23);
    v253 = *((_QWORD *)v442 + 28);
    v254 = *(_OWORD *)(v442 + 472);
    v432[25] = *(_OWORD *)(v442 + 456);
    v432[26] = v254;
    *(_QWORD *)&v432[27] = *((_QWORD *)v442 + 61);
    v255 = *(_OWORD *)(v442 + 408);
    v432[21] = *(_OWORD *)(v442 + 392);
    v432[22] = v255;
    v256 = *(_OWORD *)(v442 + 440);
    v432[23] = *(_OWORD *)(v442 + 424);
    v432[24] = v256;
    v257 = *(_OWORD *)(v442 + 344);
    v432[17] = *(_OWORD *)(v442 + 328);
    v432[18] = v257;
    v258 = *(_OWORD *)(v442 + 376);
    v432[19] = *(_OWORD *)(v442 + 360);
    v432[20] = v258;
    v259 = *(_OWORD *)(v442 + 280);
    v432[13] = *(_OWORD *)(v442 + 264);
    v432[14] = v259;
    v260 = *(_OWORD *)(v442 + 312);
    v432[15] = *(_OWORD *)(v442 + 296);
    v432[16] = v260;
    v261 = *(_OWORD *)(v442 + 72);
    v432[0] = *(_OWORD *)(v442 + 56);
    v432[1] = v261;
    v262 = *(_OWORD *)(v442 + 104);
    v432[2] = *(_OWORD *)(v442 + 88);
    v432[3] = v262;
    v263 = *(_OWORD *)(v442 + 136);
    v432[4] = *(_OWORD *)(v442 + 120);
    v432[5] = v263;
    v264 = *((_OWORD *)v442 + 13);
    *(_OWORD *)((char *)&v432[8] + 8) = *((_OWORD *)v442 + 12);
    v265 = *(_OWORD *)(v442 + 248);
    v266 = v442[644];
    *(_QWORD *)&v432[6] = v251;
    *((_QWORD *)&v432[6] + 1) = v412;
    *(_QWORD *)&v432[7] = v400;
    *((_QWORD *)&v432[7] + 1) = v252;
    *(_OWORD *)((char *)&v432[9] + 8) = v264;
    *(_QWORD *)&v432[8] = v397;
    *((_QWORD *)&v432[10] + 1) = v253;
    v432[11] = *(_OWORD *)(v442 + 232);
    v432[12] = v265;
    v267 = *((_OWORD *)v442 + 32);
    *(_OWORD *)((char *)&v432[27] + 8) = *((_OWORD *)v442 + 31);
    *(_OWORD *)((char *)&v432[28] + 8) = v267;
    v268 = *((_OWORD *)v442 + 34);
    *(_OWORD *)((char *)&v432[29] + 8) = *((_OWORD *)v442 + 33);
    *(_OWORD *)((char *)&v432[30] + 8) = v268;
    v269 = *((_OWORD *)v442 + 36);
    *(_OWORD *)((char *)&v432[31] + 8) = *((_OWORD *)v442 + 35);
    *(_OWORD *)((char *)&v432[32] + 8) = v269;
    v270 = *((_OWORD *)v442 + 38);
    *(_OWORD *)((char *)&v432[33] + 8) = *((_OWORD *)v442 + 37);
    *(_OWORD *)((char *)&v432[34] + 8) = v270;
    *(_OWORD *)((char *)&v432[35] + 8) = *((_OWORD *)v442 + 39);
    DWORD2(v432[36]) = v396;
    BYTE12(v432[36]) = v266;
    memcpy(v441, v432, 0x24DuLL);
    sub_100019E1C((uint64_t)&v428, (uint64_t)v424, &qword_100158010);
    sub_100019E1C((uint64_t)&v425, (uint64_t)v423, &qword_100158910);
    v271 = (uint64_t)v249;
    v272 = (uint64_t)v403;
    sub_100019E1C((uint64_t)v249, (uint64_t)v403, &qword_100158918);
    swift_retain_n(v55, 2);
    sub_100037524(v432);
    swift_retain(v55);
    sub_100037524(v432);
    v396 = sub_100036EC4((uint64_t)v55, 0, 1, v399, v272, (uint64_t)v441);
    v399 = v273;
    v275 = v274 & 0xFF01;
    v276 = v248;
    v277 = (uint64_t)v418;
    sub_100019E1C(v276, (uint64_t)v418, (uint64_t *)&unk_10015BA60);
    sub_100019E1C(v271, v272, &qword_100158918);
    v278 = type metadata accessor for RealizedInfo(0);
    v279 = swift_allocObject(v278, *(unsigned int *)(v278 + 48), *(unsigned __int16 *)(v278 + 52));
    *(_QWORD *)(v279 + 16) = 0;
    *(_OWORD *)(v279 + 96) = 0u;
    *(_OWORD *)(v279 + 112) = 0u;
    *(_OWORD *)(v279 + 80) = 0u;
    *(_QWORD *)(v279 + 128) = 0;
    *(_QWORD *)(v279 + 136) = 1;
    *(_QWORD *)(v279 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v279 + 24) = v420;
    sub_1000260AC((uint64_t)v424, v279 + 32, &qword_100158010);
    *(_BYTE *)(v279 + 72) = v392;
    swift_beginAccess(v279 + 80, v422, 33, 0);
    sub_1000392C8((uint64_t)v423, v279 + 80, &qword_100158910);
    swift_endAccess(v422);
    swift_beginAccess(v279 + 120, v422, 1, 0);
    v280 = *(_QWORD *)(v279 + 120);
    v281 = *(_QWORD *)(v279 + 128);
    v282 = *(_QWORD *)(v279 + 136);
    *(_QWORD *)(v279 + 120) = v396;
    *(_QWORD *)(v279 + 128) = v275;
    v283 = (uint64_t)v420;
    *(_QWORD *)(v279 + 136) = v399;
    sub_10003707C(v280, v281, v282);
    sub_1000260AC(v277, v279 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10015BA60);
    v284 = v279 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
    *(_QWORD *)v284 = v394;
    *(_BYTE *)(v284 + 8) = v393;
    sub_1000260AC(v272, v279 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_100158918);
    *(_QWORD *)(v279 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = v414;
    swift_beginAccess(v279 + 16, &v421, 1, 0);
    *(_QWORD *)(v279 + 16) = 0;
    v285 = type metadata accessor for DriverExtension(0);
    v286 = swift_dynamicCastClass(v283, v285);
    if (v286)
      v287 = v397;
    else
      v287 = v400;
    if (v286)
      v288 = v402;
    else
      v288 = v412;
    swift_bridgeObjectRetain(v287);
    swift_retain(v279);
    v289 = sub_10002E8E8(v288, v287, 0);
    swift_bridgeObjectRelease(v287);
    v290 = v408;
    sub_100019E1C(v408, v277, (uint64_t *)&unk_10015BA60);
    v291 = sub_1000378C8(v283, v289, v277, v401 & 1, v441);
    sub_100038E40(v432);
    swift_release(v279);
    swift_release(v283);
    sub_1000124F8((uint64_t)v409, &qword_100158918);
    sub_1000124F8(v290, (uint64_t *)&unk_10015BA60);
    sub_1000124F8((uint64_t)&v425, &qword_100158910);
    sub_1000124F8((uint64_t)&v428, &qword_100158010);
    v409 = (uint64_t *)(v279 + 16);
    *(_QWORD *)(v279 + 16) = v291;
    v424[0] = v279;
    swift_retain(v279);
    v292 = sub_100026B44();
    v293 = (uint64_t)v292;
    v294 = (char *)v292[2];
    if (v294)
    {
      *(_QWORD *)&v414 = v279;
      v403 = v292;
      v295 = (unsigned __int8 *)(v292 + 4);
      v296 = *(uint64_t (**)(void))(*v250 + 168);
      v408 = xmmword_10010F380;
      v418 = v296;
      while (1)
      {
        v298 = *v295++;
        v297 = v298;
        v299 = v296();
        if (*(_QWORD *)(v299 + 16) && (v300 = sub_100035478(v297), (v301 & 1) != 0))
        {
          v302 = *(_QWORD *)(v299 + 56) + 24 * v300;
          v303 = *(_QWORD *)(v302 + 8);
          v304 = *(_BYTE *)v302;
          swift_bridgeObjectRetain(v303);
          swift_bridgeObjectRelease(v299);
          v305 = v304;
          v296 = v418;
          v306 = sub_1000274B0(v414, v305, v303);
          v250 = v442;
          v307 = swift_bridgeObjectRelease(v303);
          if ((v306 & 1) != 0)
          {
            LODWORD(v412) = static os_log_type_t.info.getter(v307);
            v308 = sub_100005C88((uint64_t *)&unk_1001596E0);
            v309 = swift_allocObject(v308, 112, 7);
            *(_OWORD *)(v309 + 16) = v408;
            v310 = (*(uint64_t (**)(void))(*v420 + 200))();
            v312 = v311;
            *(_QWORD *)(v309 + 56) = &type metadata for String;
            v313 = sub_100026838();
            *(_QWORD *)(v309 + 64) = v313;
            *(_QWORD *)(v309 + 32) = v310;
            *(_QWORD *)(v309 + 40) = v312;
            v314 = sub_100026B50(v297);
            *(_QWORD *)(v309 + 96) = &type metadata for String;
            *(_QWORD *)(v309 + 104) = v313;
            *(_QWORD *)(v309 + 72) = v314;
            *(_QWORD *)(v309 + 80) = v315;
            v316 = sub_10002687C();
            v317 = (void *)static OS_os_log.default.getter(v316);
            os_log(_:dso:log:_:_:)(v412, &_mh_execute_header, v317, "%{public}s matches %{public}s.", 30, 2, v309);
            swift_bridgeObjectRelease(v309);

            if (v297)
            {
              if (v297 == 1)
              {
                v250 = v442;
                v296 = v418;
                if (qword_10015E4A8 != -1)
                  swift_once(&qword_10015E4A8, sub_10002C00C);
                v318 = qword_1001752E0;
              }
              else
              {
                v250 = v442;
                v296 = v418;
                if (qword_10015E4B0 != -1)
                  swift_once(&qword_10015E4B0, sub_10002C05C);
                v318 = qword_1001752E8;
              }
              v319 = *v409;
              if ((v318 & ~*v409) == 0)
                goto LABEL_103;
            }
            else
            {
              if (qword_10015E4A0 != -1)
                swift_once(&qword_10015E4A0, sub_10002BFBC);
              v318 = qword_1001752D8;
              v319 = *v409;
              v250 = v442;
              v296 = v418;
              if ((qword_1001752D8 & ~*v409) == 0)
                goto LABEL_103;
            }
            *v409 = v319 | v318;
          }
        }
        else
        {
          swift_bridgeObjectRelease(v299);
        }
LABEL_103:
        if (!--v294)
        {
          swift_release(v414);
          v283 = (uint64_t)v420;
          v293 = (uint64_t)v403;
          goto LABEL_123;
        }
      }
    }
    swift_release(v279);
LABEL_123:
    swift_bridgeObjectRelease(v293);
    sub_10008E4AC(v424);
    sub_100089A0C(v424);
    sub_10008D4A8(v424);
    sub_100005C44((uint64_t)v395, (uint64_t)&v428);
    v320 = v416;
    if ((v404 & 1) != 0)
    {
      sub_100005D08(&v428);
      v321 = v411;
    }
    else
    {
      v322 = v250[5];
      v323 = v250[6];
      sub_100004DE4(v250 + 2, v322);
      sub_100026A6C(v322, v323);
      v324 = v426;
      v325 = v427;
      sub_100004DE4(&v425, v426);
      v326 = v430;
      v327 = v431;
      sub_100004DE4(&v428, v430);
      v328 = v410;
      v329 = (*(uint64_t (**)(uint64_t, uint64_t))(v327 + 64))(v326, v327);
      v330 = URL.path.getter(v329);
      v332 = v331;
      (*((void (**)(char *, uint64_t))v415 + 1))(v328, v320);
      v333 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v325 + 48);
      v334 = v325;
      v283 = (uint64_t)v420;
      LOBYTE(v330) = v333(v330, v332, v324, v334);
      swift_bridgeObjectRelease(v332);
      sub_100005D08(&v425);
      sub_100005D08(&v428);
      v321 = v411;
      if ((v330 & 1) == 0)
        goto LABEL_131;
    }
    v335 = v424[0];
    v336 = qword_10015E4C0;
    swift_retain(v424[0]);
    if (v336 != -1)
      swift_once(&qword_10015E4C0, sub_10002C0FC);
    v337 = qword_1001752F8;
    v339 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *))(*(_QWORD *)v335 + 184))(&v425);
    if ((v337 & ~*v338) != 0)
      *v338 |= v337;
    v339(&v425, 0);
    swift_release(v335);
LABEL_131:
    v340 = sub_10008E1C8(v424);
    LODWORD(v418) = static os_signpost_type_t.event.getter(v340);
    v442 = (char *)(id)*sub_1000D302C();
    v341 = sub_1000901A0();
    v342 = *v341;
    v415 = v341[1];
    v416 = (uint64_t)v342;
    LODWORD(v414) = *((unsigned __int8 *)v341 + 16);
    v343 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v344 = swift_allocObject(v343, 232, 7);
    *(_OWORD *)(v344 + 16) = xmmword_10010FE50;
    v345 = (*(uint64_t (**)(void))(*(_QWORD *)v283 + 200))();
    v347 = v346;
    *(_QWORD *)(v344 + 56) = &type metadata for String;
    v348 = sub_100026838();
    *(_QWORD *)(v344 + 64) = v348;
    *(_QWORD *)(v344 + 32) = v345;
    *(_QWORD *)(v344 + 40) = v347;
    v349 = v413;
    v350 = (uint64_t)v417;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v413 + 48))(v417, 1, v321))
    {
      v351 = (uint64_t *)(v344 + 72);
      *(_QWORD *)(v344 + 96) = &type metadata for String;
      *(_QWORD *)(v344 + 104) = v348;
    }
    else
    {
      v353 = v398;
      v354 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v349 + 16))(v398, v350, v321);
      v355 = UUID.uuidString.getter(v354);
      v352 = v356;
      (*(void (**)(char *, uint64_t))(v349 + 8))(v353, v321);
      v351 = (uint64_t *)(v344 + 72);
      *(_QWORD *)(v344 + 96) = &type metadata for String;
      *(_QWORD *)(v344 + 104) = v348;
      if (v352)
      {
        *v351 = v355;
        goto LABEL_136;
      }
    }
    *v351 = 0x296C696E28;
    v352 = 0xE500000000000000;
LABEL_136:
    *(_QWORD *)(v344 + 80) = v352;
    v357 = v424[0];
    v358 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v424[0] + 168);
    v359 = swift_retain(v424[0]);
    v360 = v358(v359);
    swift_release(v357);
    if (qword_10015E450 != -1)
      swift_once(&qword_10015E450, sub_10002BD9C);
    v361 = (qword_100175288 & v360) == qword_100175288;
    v362 = 28265;
    if ((qword_100175288 & v360) == qword_100175288)
      v362 = 0;
    *(_QWORD *)(v344 + 136) = &type metadata for String;
    *(_QWORD *)(v344 + 144) = v348;
    if (v361)
      v363 = 0xE000000000000000;
    else
      v363 = 0xE200000000000000;
    *(_QWORD *)(v344 + 112) = v362;
    *(_QWORD *)(v344 + 120) = v363;
    v364 = swift_retain(v357);
    v365 = v358(v364);
    swift_release(v357);
    if (qword_10015E470 != -1)
      swift_once(&qword_10015E470, sub_10002BE5C);
    v366 = (qword_1001752A8 & v365) == qword_1001752A8;
    v367 = 28265;
    if ((qword_1001752A8 & v365) == qword_1001752A8)
      v367 = 0;
    *(_QWORD *)(v344 + 176) = &type metadata for String;
    *(_QWORD *)(v344 + 184) = v348;
    if (v366)
      v368 = 0xE000000000000000;
    else
      v368 = 0xE200000000000000;
    *(_QWORD *)(v344 + 152) = v367;
    *(_QWORD *)(v344 + 160) = v368;
    v369 = swift_retain(v357);
    v370 = v358(v369);
    v371 = swift_release(v357);
    if (qword_10015E490 != -1)
      v371 = swift_once(&qword_10015E490, sub_10002BF1C);
    v372 = (qword_1001752C8 & v370) == qword_1001752C8;
    v373 = 28277;
    if ((qword_1001752C8 & v370) == qword_1001752C8)
      v373 = 0;
    v374 = 0xE200000000000000;
    *(_QWORD *)(v344 + 216) = &type metadata for String;
    *(_QWORD *)(v344 + 224) = v348;
    if (v372)
      v374 = 0xE000000000000000;
    *(_QWORD *)(v344 + 192) = v373;
    *(_QWORD *)(v344 + 200) = v374;
    v375 = v405;
    static OSSignpostID.exclusive.getter(v371);
    v376 = v442;
    os_signpost(_:dso:log:name:signpostID:_:_:)(v418, &_mh_execute_header, v442, v416, v415, v414, v375, "%{public}s, uuid %{public}s %{public}svalid %{public}sauthentic %{public}sapproved", 82, 2, v344);
    swift_release(v420);

    swift_bridgeObjectRelease(v344);
    (*(void (**)(char *, uint64_t))(v406 + 8))(v375, v407);
    sub_1000124F8((uint64_t)v436, &qword_100158910);
    sub_1000124F8((uint64_t)&v438, &qword_100158010);
    v91 = v424[0];
    sub_1000124F8((uint64_t)v417, &qword_100158918);
    return v91;
  }
  v119 = *(_QWORD *)(v67 + 40);
  v120 = *(_QWORD *)(v67 + 48);
  sub_100004DE4((_QWORD *)(v67 + 16), v119);
  sub_10010731C(v119, v120);
  v121 = v430;
  v122 = v431;
  sub_100004DE4(&v428, v430);
  (*(void (**)(__int128 *__return_ptr, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v122 + 112))(&v425, v116, v118, 1, v121, v122);
  if (v426)
  {
    swift_bridgeObjectRelease(v118);
    sub_100004E2C(&v425, (uint64_t)v432);
    sub_100005D08(&v428);
    v123 = v395[3];
    v124 = v395[4];
    sub_100004DE4(v395, v123);
    v125 = (*(uint64_t (**)(uint64_t, uint64_t))(v124 + 16))(v123, v124);
    v127 = v126;
    v128 = sub_1000D5460(v125, v126, 0, 1uLL);
    sub_100037510(v125, v127);
    v129 = *((_QWORD *)&v432[1] + 1);
    v130 = *(_QWORD *)&v432[2];
    v131 = sub_100004DE4(v432, *((uint64_t *)&v432[1] + 1));
    if ((v128 & 1) != 0)
    {
      v132 = sub_1000D4090(v74);
      v134 = v133;
      v135 = v399;
      v136 = v129;
      v91 = (uint64_t)v131;
      v137 = v419;
      sub_1000E1E34(v132, v133, v136, v130, v399);
      v138 = v137;
      v55 = v420;
      if (!v137)
      {
LABEL_81:
        swift_bridgeObjectRelease(v134);
        v139 = (uint64_t)v417;
        sub_1000392C8(v135, (uint64_t)v417, &qword_100158918);
        v223 = *((_QWORD *)&v432[1] + 1);
        v224 = *(_QWORD *)&v432[2];
        sub_100004DE4(v432, *((uint64_t *)&v432[1] + 1));
        *(_QWORD *)&v414 = (*(uint64_t (**)(uint64_t, uint64_t))(v224 + 112))(v223, v224);
        v419 = 0;
        sub_100005D08(v432);
        v67 = (uint64_t)v442;
        goto LABEL_82;
      }
LABEL_67:
      swift_bridgeObjectRelease(v134);
    }
    else
    {
      v158 = *((_QWORD *)v442 + 20);
      swift_bridgeObjectRetain(*((_QWORD *)v442 + 21));
      v159 = sub_1000D4090(v158);
      v134 = v160;
      v161 = v129;
      v91 = (uint64_t)v131;
      v162 = v419;
      v164 = sub_1000E1B4C(v159, v160, v163, v161, v130);
      v138 = v162;
      v55 = v420;
      if (v162)
      {
        swift_bridgeObjectRelease(v414);
        goto LABEL_67;
      }
      v196 = v164;
      swift_bridgeObjectRelease(v134);
      if ((v196 & 0x100000000) != 0 || (v197 = sub_10008FFA8(), *v197 == (_DWORD)v196))
      {
        v198 = *((_QWORD *)&v432[1] + 1);
        v419 = *(_QWORD *)&v432[2];
        sub_100004DE4(v432, *((uint64_t *)&v432[1] + 1));
        v199 = sub_1000D4090(v74);
        v134 = v200;
        v201 = v397;
        sub_1000E2470(v199, v200, v202, v198, v419, v397);
        v135 = v201;
        goto LABEL_81;
      }
      v378 = v197;
      swift_bridgeObjectRelease(v414);
      v428 = 0;
      v429 = 0xE000000000000000;
      _StringGuts.grow(_:)(79);
      v379._countAndFlagsBits = 0xD000000000000036;
      v379._object = (void *)0x8000000100122D20;
      String.append(_:)(v379);
      LODWORD(v425) = v196;
      v380._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
      v381 = v380._object;
      String.append(_:)(v380);
      swift_bridgeObjectRelease(v381);
      v382._object = (void *)0x8000000100122D60;
      v382._countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v382);
      LODWORD(v425) = *v378;
      v383._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
      v384 = v383._object;
      String.append(_:)(v383);
      swift_bridgeObjectRelease(v384);
      v91 = (uint64_t)v428;
      v385 = v429;
      v386 = sub_1000122F8();
      v138 = swift_allocError(&type metadata for KMError, v386, 0, 0);
      *(_QWORD *)v387 = v91;
      *(_QWORD *)(v387 + 8) = v385;
      *(_OWORD *)(v387 + 16) = 0u;
      *(_OWORD *)(v387 + 32) = 0u;
      *(_OWORD *)(v387 + 48) = 0u;
      *(_QWORD *)(v387 + 64) = 0;
      *(_BYTE *)(v387 + 72) = 16;
      swift_willThrow(v138);
    }
    sub_100005D08(v432);
  }
  else
  {
    swift_bridgeObjectRelease(v414);
    sub_1000124F8((uint64_t)&v425, &qword_100158930);
    sub_100005D08(&v428);
    *(_QWORD *)&v432[0] = 0;
    *((_QWORD *)&v432[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v140._countAndFlagsBits = 0xD00000000000001ALL;
    v140._object = (void *)0x8000000100122C50;
    String.append(_:)(v140);
    v141._countAndFlagsBits = v116;
    v141._object = v118;
    String.append(_:)(v141);
    swift_bridgeObjectRelease(v118);
    v142._countAndFlagsBits = 0xD000000000000017;
    v142._object = (void *)0x8000000100122C70;
    String.append(_:)(v142);
    v55 = v420;
    v143._countAndFlagsBits = (*(uint64_t (**)(void))(*v420 + 200))();
    v144 = v143._object;
    String.append(_:)(v143);
    swift_bridgeObjectRelease(v144);
    v111 = 46;
    v112 = 0xE100000000000000;
LABEL_39:
    String.append(_:)(*(Swift::String *)&v111);
    v145 = *((_QWORD *)&v432[0] + 1);
    v91 = *(_QWORD *)&v432[0];
    v146 = sub_1000122F8();
    v138 = swift_allocError(&type metadata for KMError, v146, 0, 0);
    *(_OWORD *)v147 = __PAIR128__(v145, v91);
    *(_OWORD *)(v147 + 16) = 0u;
    *(_OWORD *)(v147 + 32) = 0u;
    *(_OWORD *)(v147 + 48) = 0u;
    *(_QWORD *)(v147 + 64) = 0;
    *(_BYTE *)(v147 + 72) = 10;
    swift_willThrow(v138);
  }
  v428 = (_QWORD *)v138;
  swift_errorRetain(v138);
  v203 = sub_100005C88(&qword_10015AB50);
  if (!swift_dynamicCast(v432, &v428, v203, &type metadata for KMError, 0))
    goto LABEL_74;
  v91 = *((_QWORD *)&v432[0] + 1);
  v204 = *(_QWORD *)&v432[0];
  if (BYTE8(v432[4]) != 10)
  {
    sub_1000391DC(*(uint64_t *)&v432[0], *((uint64_t *)&v432[0] + 1), *(uint64_t *)&v432[1], *((uint64_t *)&v432[1] + 1), *(unint64_t *)&v432[2], *((uint64_t *)&v432[2] + 1), *(uint64_t *)&v432[3], *((uint64_t *)&v432[3] + 1), *(uint64_t *)&v432[4], SBYTE8(v432[4]));
LABEL_74:
    v219 = swift_errorRelease(v428);
    swift_willThrow(v219);
    swift_release(v55);
    sub_1000124F8((uint64_t)v436, &qword_100158910);
    sub_1000124F8((uint64_t)&v438, &qword_100158010);
    goto LABEL_75;
  }
  v205 = swift_errorRelease(v138);
  if ((v401 & 1) != 0)
  {
    v419 = 0;
    v139 = (uint64_t)v417;
    v206 = static os_log_type_t.info.getter(v205);
    v207 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v208 = swift_allocObject(v207, 72, 7);
    v414 = xmmword_10010F050;
    *(_OWORD *)(v208 + 16) = xmmword_10010F050;
    *(_QWORD *)(v208 + 56) = &type metadata for String;
    v209 = sub_100026838();
    *(_QWORD *)(v208 + 64) = v209;
    *(_QWORD *)(v208 + 32) = v204;
    *(_QWORD *)(v208 + 40) = v91;
    v210 = sub_10002687C();
    v211 = (void *)static OS_os_log.default.getter(v210);
    os_log(_:dso:log:_:_:)(v206, &_mh_execute_header, v211, "Encountered errors while reading executables: %{public}s", 56, 2, v208);
    swift_bridgeObjectRelease(v208);

    v213 = static os_log_type_t.info.getter(v212);
    v214 = swift_allocObject(v207, 72, 7);
    *(_OWORD *)(v214 + 16) = v414;
    v215 = (*(uint64_t (**)(void))(*v420 + 200))();
    *(_QWORD *)(v214 + 56) = &type metadata for String;
    *(_QWORD *)(v214 + 64) = v209;
    *(_QWORD *)(v214 + 32) = v215;
    *(_QWORD *)(v214 + 40) = v216;
    v217 = (void *)static OS_os_log.default.getter(v215);
    v218 = v213;
    v67 = (uint64_t)v442;
    v55 = v420;
    os_log(_:dso:log:_:_:)(v218, &_mh_execute_header, v217, "realizedInfo for (%{public}s) may not contain info on uuid or bundleArch", 72, 2, v214);
    swift_bridgeObjectRelease(v214);

    swift_errorRelease(v428);
    *(_QWORD *)&v414 = 0;
    goto LABEL_82;
  }
  v220 = sub_1000122F8();
  v221 = swift_allocError(&type metadata for KMError, v220, 0, 0);
  *(_QWORD *)v222 = v204;
  *(_QWORD *)(v222 + 8) = v91;
  *(_OWORD *)(v222 + 16) = 0u;
  *(_OWORD *)(v222 + 32) = 0u;
  *(_OWORD *)(v222 + 48) = 0u;
  *(_QWORD *)(v222 + 64) = 0;
  *(_BYTE *)(v222 + 72) = 10;
  swift_willThrow(v221);
  swift_release(v55);
  sub_1000124F8((uint64_t)v436, &qword_100158910);
  sub_1000124F8((uint64_t)&v438, &qword_100158010);
  swift_errorRelease(v428);
LABEL_75:
  sub_1000124F8((uint64_t)v417, &qword_100158918);
  return v91;
}

uint64_t sub_100031CE8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  int v36;

  v2 = (_QWORD *)v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_DWORD *)(v1 + 640);
  LODWORD(v33[0]) = *(_DWORD *)sub_1000A43F4();
  v36 = v8;
  v9 = sub_100012808();
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v33, &type metadata for ExtensionManager.Settings.Flags, v9) & 1) != 0)
    return 2;
  v11 = a1[3];
  v12 = a1[4];
  sub_100004DE4(a1, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 64))(v11, v12);
  v14 = URL.path.getter(v13);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((sub_1000D7F90() & 1) != 0)
    goto LABEL_7;
  v17 = a1[3];
  v18 = a1[4];
  sub_100004DE4(a1, v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
  v21 = v20;
  LOBYTE(v17) = sub_1000D5460(0, 1, v19, v20);
  sub_100037510(v19, v21);
  if ((v17 & 1) == 0)
    goto LABEL_7;
  v22 = v2 + 2;
  v23 = v2[5];
  v24 = v2[6];
  sub_100004DE4(v22, v23);
  sub_10010731C(v23, v24);
  v25 = v34;
  v26 = v35;
  sub_100004DE4(v33, v34);
  LOBYTE(v23) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 232))(v14, v16, v25, v26);
  v27 = sub_100005D08(v33);
  if ((v23 & 1) != 0)
  {
    v28 = static os_log_type_t.default.getter(v27);
    v29 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v30 = swift_allocObject(v29, 72, 7);
    *(_OWORD *)(v30 + 16) = xmmword_10010F050;
    *(_QWORD *)(v30 + 56) = &type metadata for String;
    *(_QWORD *)(v30 + 64) = sub_100026838();
    *(_QWORD *)(v30 + 32) = v14;
    *(_QWORD *)(v30 + 40) = v16;
    sub_10002687C();
    v31 = (void *)static OS_os_log.default.getter();
    v10 = 2;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v31, "Will skip code sign validation of dext in the ARV at %{public}s", 63, 2, v30);
    swift_bridgeObjectRelease(v30);

  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease(v16);
    return 0;
  }
  return v10;
}

uint64_t sub_100031F4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v6 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v6);
  v8 = (char *)&v40[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019E1C(a2, (uint64_t)v8, (uint64_t *)&unk_10015BA60);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if ((_DWORD)v11 == 1)
  {
    v12 = sub_1000124F8((uint64_t)v8, (uint64_t *)&unk_10015BA60);
    v13 = static os_log_type_t.info.getter(v12);
    v14 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_10010F050;
    v16 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 200))();
    v18 = v17;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_100026838();
    *(_QWORD *)(v15 + 32) = v16;
    *(_QWORD *)(v15 + 40) = v18;
    sub_10002687C();
    v19 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v19, "No unstagedURL found for %{public}s, cannot determine if absent executables are okay", 84, 2, v15);
LABEL_3:
    swift_bridgeObjectRelease(v15);

    goto LABEL_5;
  }
  v20 = URL.path.getter(v11);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  v23 = v3[5];
  v24 = v3[6];
  sub_100004DE4(v3 + 2, v23);
  sub_10010731C(v23, v24);
  v25 = v41;
  v26 = v42;
  sub_100004DE4(v40, v41);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 152))(v20, v22, v25, v26);
  v31 = v30;
  swift_bridgeObjectRelease(v22);
  if (!v31)
  {
    v33 = sub_100005D08(v40);
    v34 = static os_log_type_t.error.getter(v33);
    v35 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v15 = swift_allocObject(v35, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_10010F050;
    v36 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 200))();
    v38 = v37;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_100026838();
    *(_QWORD *)(v15 + 32) = v36;
    *(_QWORD *)(v15 + 40) = v38;
    sub_10002687C();
    v19 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v19, "Could not get unstaged real path for %{public}s, cannot determine if absent executables are okay", 96, 2, v15);
    goto LABEL_3;
  }
  v32 = sub_100005D08(v40);
  if (((*(uint64_t (**)(uint64_t))(*v3 + 440))(v32) & 1) != 0
    && ((*(uint64_t (**)(void))(*(_QWORD *)a1 + 208))() & 1) != 0)
  {
    v27 = sub_100032C6C(0xD00000000000001ALL, 0x8000000100123000, v29, v31);
    swift_bridgeObjectRelease(v31);
    return v27 & 1;
  }
  swift_bridgeObjectRelease(v31);
LABEL_5:
  v27 = 0;
  return v27 & 1;
}

uint64_t sub_100032348(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  v9 = v7 == a1 && v8 == a2;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0) & 1) != 0)
    return 0;
  v11 = 0;
  v12 = a3 + 7;
  v13 = 1;
  while (1)
  {
    if (v3 == v13)
      return 0;
    ++v11;
    v14 = *(v12 - 1);
    v15 = *v12;
    if (v14 == a1 && v15 == a2)
      break;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0);
    result = v13++;
    v12 += 2;
    if ((v17 & 1) != 0)
      return result;
  }
  return v11;
}

void sub_10003242C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int16 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE v113[24];
  _QWORD v114[5];
  _DWORD v115[10];
  _OWORD v116[37];
  _BYTE v117[32];
  uint64_t v118;
  _BYTE v119[32];
  uint64_t v120;
  uint64_t v121[76];

  v12 = sub_100005C88(&qword_100158918);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v100 - v16;
  v18 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  if ((a3 & 1) != 0)
  {
    v39 = sub_1000122F8();
    v40 = swift_allocError(&type metadata for KMError, v39, 0, 0);
    *(_QWORD *)v41 = 0xD000000000000036;
    *(_QWORD *)(v41 + 8) = 0x8000000100122F30;
    *(_OWORD *)(v41 + 16) = 0u;
    *(_OWORD *)(v41 + 32) = 0u;
    *(_OWORD *)(v41 + 48) = 0u;
    *(_QWORD *)(v41 + 64) = 0;
    *(_BYTE *)(v41 + 72) = 24;
    swift_willThrow(v40);
    return;
  }
  if (*(_DWORD *)a1 != -2147483595)
    return;
  v110 = v21;
  v111 = (uint64_t)&v100 - v20;
  v23 = String.init(cString:)(a2 + *(unsigned int *)(a1 + 24));
  v24 = v22;
  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_11;
  swift_bridgeObjectRetain(v22);
  v25 = sub_100005DE8(v23, v24);
  if ((v26 & 1) == 0)
  {
    swift_bridgeObjectRelease(v24);
LABEL_11:
    v42 = sub_100090044();
    v43 = v42[1];
    if (v23 == *v42 && v24 == v43
      || (v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, *v42, v43, 0), (v44 & 1) != 0))
    {
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      v45 = static os_log_type_t.info.getter(v44);
      v46 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v47 = swift_allocObject(v46, 72, 7);
      *(_OWORD *)(v47 + 16) = xmmword_10010F050;
      *(_QWORD *)(v47 + 56) = &type metadata for String;
      *(_QWORD *)(v47 + 64) = sub_100026838();
      *(_QWORD *)(v47 + 32) = v23;
      *(_QWORD *)(v47 + 40) = v24;
      v48 = sub_10002687C();
      v49 = (void *)static OS_os_log.default.getter(v48);
      os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v49, "Fileset entry found for %{public}s, but not included in prelink info", 68, 2, v47);
      swift_bridgeObjectRelease(v47);

    }
    return;
  }
  v108 = (_QWORD *)(a6 + 16);
  v27 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v25);
  swift_retain(v27);
  swift_bridgeObjectRelease_n(v24, 2);
  v120 = 0;
  memset(v119, 0, sizeof(v119));
  v118 = 0;
  memset(v117, 0, sizeof(v117));
  v28 = *(_DWORD *)(a5 + 640);
  LODWORD(v116[0]) = *sub_1000A45D4();
  LODWORD(v103) = v28;
  v115[0] = v28;
  v29 = sub_100012808();
  v30 = dispatch thunk of SetAlgebra.isSuperset(of:)(v116, &type metadata for ExtensionManager.Settings.Flags, v29);
  v31 = 0;
  v109 = v27;
  if ((v30 & 1) != 0)
  {
    v32 = (*(uint64_t (**)(void))(*(_QWORD *)v27 + 144))();
    v34 = v33;
    v35 = (*(uint64_t (**)(void))(*(_QWORD *)a5 + 216))();
    v36 = *(_QWORD *)(v35 + 16);
    v107 = v34;
    if (v36 && (v37 = sub_100005DE8(v32, v34), (v38 & 1) != 0))
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v37);
      swift_bridgeObjectRetain(v31);
    }
    else
    {
      v31 = 0;
    }
    v27 = v109;
    swift_bridgeObjectRelease(v107);
    swift_bridgeObjectRelease(v35);
  }
  v50 = *(_QWORD *)(a1 + 8);
  v100 = v31;
  v101 = v50;
  v51 = type metadata accessor for URL(0);
  v52 = v111;
  v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v111, 1, 1, v51);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 248))(v53);
  v54 = *(_QWORD *)(a5 + 152);
  v55 = *(_QWORD *)(a5 + 160);
  v56 = *(_QWORD *)(a5 + 168);
  v106 = *(_QWORD *)(a5 + 176);
  v107 = v55;
  v104 = *(_QWORD *)(a5 + 184);
  v105 = v56;
  v57 = *(_QWORD *)(a5 + 224);
  v58 = *(_OWORD *)(a5 + 472);
  v116[25] = *(_OWORD *)(a5 + 456);
  v116[26] = v58;
  *(_QWORD *)&v116[27] = *(_QWORD *)(a5 + 488);
  v59 = *(_OWORD *)(a5 + 408);
  v116[21] = *(_OWORD *)(a5 + 392);
  v116[22] = v59;
  v60 = *(_OWORD *)(a5 + 440);
  v116[23] = *(_OWORD *)(a5 + 424);
  v116[24] = v60;
  v61 = *(_OWORD *)(a5 + 344);
  v116[17] = *(_OWORD *)(a5 + 328);
  v116[18] = v61;
  v62 = *(_OWORD *)(a5 + 376);
  v116[19] = *(_OWORD *)(a5 + 360);
  v116[20] = v62;
  v63 = *(_OWORD *)(a5 + 280);
  v116[13] = *(_OWORD *)(a5 + 264);
  v116[14] = v63;
  v64 = *(_OWORD *)(a5 + 312);
  v116[15] = *(_OWORD *)(a5 + 296);
  v116[16] = v64;
  v65 = *(_OWORD *)(a5 + 72);
  v116[0] = *(_OWORD *)(a5 + 56);
  v116[1] = v65;
  v66 = *(_OWORD *)(a5 + 104);
  v116[2] = *(_OWORD *)(a5 + 88);
  v116[3] = v66;
  v67 = *(_OWORD *)(a5 + 136);
  v116[4] = *(_OWORD *)(a5 + 120);
  v116[5] = v67;
  v68 = *(_OWORD *)(a5 + 208);
  *(_OWORD *)((char *)&v116[8] + 8) = *(_OWORD *)(a5 + 192);
  v69 = *(_OWORD *)(a5 + 248);
  v70 = *(_BYTE *)(a5 + 644);
  *(_QWORD *)&v116[6] = v54;
  *((_QWORD *)&v116[6] + 1) = v55;
  v116[7] = __PAIR128__(v106, v56);
  *(_OWORD *)((char *)&v116[9] + 8) = v68;
  *(_QWORD *)&v116[8] = v104;
  *((_QWORD *)&v116[10] + 1) = v57;
  v116[11] = *(_OWORD *)(a5 + 232);
  v116[12] = v69;
  v71 = *(_OWORD *)(a5 + 512);
  *(_OWORD *)((char *)&v116[27] + 8) = *(_OWORD *)(a5 + 496);
  *(_OWORD *)((char *)&v116[28] + 8) = v71;
  v72 = *(_OWORD *)(a5 + 544);
  *(_OWORD *)((char *)&v116[29] + 8) = *(_OWORD *)(a5 + 528);
  *(_OWORD *)((char *)&v116[30] + 8) = v72;
  v73 = *(_OWORD *)(a5 + 576);
  *(_OWORD *)((char *)&v116[31] + 8) = *(_OWORD *)(a5 + 560);
  *(_OWORD *)((char *)&v116[32] + 8) = v73;
  v74 = *(_OWORD *)(a5 + 608);
  *(_OWORD *)((char *)&v116[33] + 8) = *(_OWORD *)(a5 + 592);
  *(_OWORD *)((char *)&v116[34] + 8) = v74;
  *(_OWORD *)((char *)&v116[35] + 8) = *(_OWORD *)(a5 + 624);
  DWORD2(v116[36]) = v103;
  BYTE12(v116[36]) = v70;
  memcpy(v121, v116, 0x24DuLL);
  sub_100019E1C((uint64_t)v119, (uint64_t)v115, &qword_100158010);
  sub_100019E1C((uint64_t)v117, (uint64_t)v114, &qword_100158910);
  v75 = (uint64_t)v17;
  v102 = v17;
  sub_100019E1C((uint64_t)v17, (uint64_t)v15, &qword_100158918);
  swift_retain_n(v27, 2);
  sub_100037524(v116);
  swift_retain(v27);
  sub_100037524(v116);
  v101 = sub_100036EC4(v27, v101, 0, v100, (uint64_t)v15, (uint64_t)v121);
  v103 = v76;
  v78 = v77 & 0xFF01;
  v79 = v110;
  sub_100019E1C(v52, v110, (uint64_t *)&unk_10015BA60);
  sub_100019E1C(v75, (uint64_t)v15, &qword_100158918);
  v80 = type metadata accessor for RealizedInfo(0);
  v81 = swift_allocObject(v80, *(unsigned int *)(v80 + 48), *(unsigned __int16 *)(v80 + 52));
  *(_QWORD *)(v81 + 16) = 0;
  *(_OWORD *)(v81 + 96) = 0u;
  *(_OWORD *)(v81 + 112) = 0u;
  *(_OWORD *)(v81 + 80) = 0u;
  *(_QWORD *)(v81 + 128) = 0;
  *(_QWORD *)(v81 + 136) = 1;
  *(_QWORD *)(v81 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v81 + 24) = v109;
  sub_1000260AC((uint64_t)v115, v81 + 32, &qword_100158010);
  *(_BYTE *)(v81 + 72) = 0;
  swift_beginAccess(v81 + 80, v113, 33, 0);
  sub_1000392C8((uint64_t)v114, v81 + 80, &qword_100158910);
  swift_endAccess(v113);
  swift_beginAccess(v81 + 120, v113, 1, 0);
  v82 = *(_QWORD *)(v81 + 120);
  v83 = *(_QWORD *)(v81 + 128);
  v84 = *(_QWORD *)(v81 + 136);
  *(_QWORD *)(v81 + 120) = v101;
  *(_QWORD *)(v81 + 128) = v78;
  v85 = v109;
  *(_QWORD *)(v81 + 136) = v103;
  sub_10003707C(v82, v83, v84);
  sub_1000260AC(v79, v81 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10015BA60);
  v86 = v81 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
  *(_QWORD *)v86 = 0;
  *(_BYTE *)(v86 + 8) = 1;
  sub_1000260AC((uint64_t)v15, v81 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_100158918);
  *(_QWORD *)(v81 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = 0;
  swift_beginAccess(v81 + 16, &v112, 1, 0);
  *(_QWORD *)(v81 + 16) = 0;
  v87 = type metadata accessor for DriverExtension(0);
  v88 = swift_dynamicCastClass(v85, v87);
  if (v88)
    v89 = v104;
  else
    v89 = v105;
  if (v88)
    v90 = v106;
  else
    v90 = v107;
  swift_bridgeObjectRetain(v89);
  swift_retain(v81);
  v91 = sub_10002E8E8(v90, v89, 0);
  swift_bridgeObjectRelease(v89);
  v92 = v111;
  sub_100019E1C(v111, v79, (uint64_t *)&unk_10015BA60);
  v93 = sub_1000378C8(v85, v91, v79, 0, v121);
  sub_100038E40(v116);
  swift_release(v81);
  swift_release(v85);
  sub_1000124F8((uint64_t)v102, &qword_100158918);
  sub_1000124F8(v92, (uint64_t *)&unk_10015BA60);
  sub_1000124F8((uint64_t)v117, &qword_100158910);
  sub_1000124F8((uint64_t)v119, &qword_100158010);
  *(_QWORD *)(v81 + 16) = v93;
  v114[0] = v81;
  sub_100089A0C(v114);
  sub_10008D4A8(v114);
  v94 = v114[0];
  v95 = v108;
  swift_beginAccess(v108, v115, 33, 0);
  v96 = swift_retain(v94);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v96);
  v98 = *(_QWORD *)((*v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v97 = *(_QWORD *)((*v95 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v98 >= v97 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1);
  v99 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v98, v94);
  specialized Array._endMutation()(v99);
  swift_endAccess(v115);
  swift_release(v94);
  swift_release(v85);
}

uint64_t sub_100032C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v5;
  uint64_t countAndFlagsBits;
  void *object;
  char v8;
  Swift::String_optional v9;
  Swift::String_optional v10;
  void *v11;
  _BOOL8 v12;

  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v5 = String.Iterator.next()();
  if (v5.value._object)
  {
    countAndFlagsBits = v5.value._countAndFlagsBits;
    object = v5.value._object;
    do
    {
      v10 = String.Iterator.next()();
      if (!v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (countAndFlagsBits == v10.value._countAndFlagsBits && object == v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v10.value._countAndFlagsBits, v10.value._object, 0);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
        if ((v8 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          swift_bridgeObjectRelease(a2);
          return 0;
        }
      }
      v9 = String.Iterator.next()();
      countAndFlagsBits = v9.value._countAndFlagsBits;
      object = v9.value._object;
    }
    while (v9.value._object);
  }
  swift_bridgeObjectRelease(a4);
  v11 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  v12 = v11 == 0;
  swift_bridgeObjectRelease(v11);
  return v12;
}

uint64_t sub_100032DD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char **v36;
  char *v37;
  char v38;
  uint64_t v39;
  NSObject *v40;
  char v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint8_t *v44;
  os_signpost_id_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD, _QWORD, _QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v93;
  unint64_t v94;
  uint64_t v95;
  _BOOL8 v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  char v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  Swift::String v112;
  __int128 v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t, _QWORD *, uint64_t (*)(uint64_t, uint64_t, char), _QWORD *, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  void (*v138)(uint64_t, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  __int128 v168;
  __int128 v169;
  char v170;

  v166 = a1;
  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v154 = v1;
  v155 = v2;
  v3 = __chkstk_darwin(v1);
  v149 = (char *)&v145 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v150 = (char *)&v145 - v5;
  v6 = sub_100005C88(&qword_100158918);
  v7 = __chkstk_darwin(v6);
  v148 = (uint64_t)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v147 = (uint64_t)&v145 - v10;
  v11 = __chkstk_darwin(v9);
  v151 = (uint64_t)&v145 - v12;
  v13 = __chkstk_darwin(v11);
  v160 = (uint64_t *)((char *)&v145 - v14);
  v15 = __chkstk_darwin(v13);
  v159 = (uint64_t)&v145 - v16;
  v17 = __chkstk_darwin(v15);
  v158 = (uint64_t)&v145 - v18;
  v19 = __chkstk_darwin(v17);
  v152 = (uint64_t)&v145 - v20;
  v21 = __chkstk_darwin(v19);
  v153 = (uint64_t)&v145 - v22;
  __chkstk_darwin(v21);
  v156 = (uint64_t)&v145 - v23;
  v24 = type metadata accessor for OSSignpostID(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v145 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v145 - v29;
  v31 = type metadata accessor for OSSignposter(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v145 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1000D3480();
  v163 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v35, v31);
  v36 = sub_1000901C4();
  v37 = *v36;
  v38 = *((_BYTE *)v36 + 16);
  v39 = static OSSignpostID.exclusive.getter(v36);
  v162 = v34;
  v40 = OSSignposter.logHandle.getter(v39);
  LODWORD(v161) = static os_signpost_type_t.begin.getter(v40);
  v41 = OS_os_log.signpostsEnabled.getter();
  v164 = (_QWORD *)v31;
  if ((v41 & 1) == 0)
    goto LABEL_5;
  if ((v38 & 1) != 0)
  {
    if ((unint64_t)v37 >> 32)
      goto LABEL_52;
    if (v37 >> 11 == 27)
      goto LABEL_55;
    if (v37 >> 16 > 0x10)
      goto LABEL_53;
    v37 = &v170;
  }
  else if (!v37)
  {
    __break(1u);
LABEL_5:

    v42 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v43 = v25;
    goto LABEL_11;
  }
  v43 = v25;
  v42 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v42(v28, v30, v24);
  v44 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v44 = 0;
  v45 = OSSignpostID.rawValue.getter(v44);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, (os_signpost_type_t)v161, v45, v37, "", v44, 2u);
  swift_slowDealloc(v44, -1, -1);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v28, v24);
LABEL_11:
  v46 = v166;
  v42(v28, v30, v24);
  v47 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
  v48 = OSSignpostIntervalState.init(id:isOpen:)(v28, 1);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v24);
  v49 = (*(uint64_t (**)(char *, _QWORD *))(v163 + 8))(v162, v164);
  v50 = v165;
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 128))(v49);
  if (v50)
  {
LABEL_41:
    sub_100033AD4(v48);
    swift_release(v48);
    return v43;
  }
  v52 = v51;
  type metadata accessor for KernelCollection(0);
  v53 = *(_BYTE *)(v46 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
  v55 = v158;
  v54 = v159;
  v56 = (void (*)(_QWORD, _QWORD, _QWORD))v160;
  sub_10004B0D8(v158, v159, (uint64_t)v160, v52, *(_QWORD *)(v46 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch), *(_QWORD *)(v46 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8), v53);
  v146 = 0;
  v161 = v48;
  v57 = v156;
  sub_1000260AC(v55, v156, &qword_100158918);
  v58 = v54;
  v59 = v153;
  sub_1000260AC(v58, v153, &qword_100158918);
  v60 = v152;
  sub_1000260AC((uint64_t)v56, v152, &qword_100158918);
  v61 = v151;
  sub_100019E1C(v57, v151, &qword_100158918);
  v63 = v154;
  v62 = v155;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))(v61, 1, v154) == 1)
  {
    swift_bridgeObjectRelease(v52);
    sub_1000124F8(v61, &qword_100158918);
    v64 = sub_1000D4214(v53);
    v43 = v65;
    v66 = sub_1000122F8();
    v67 = swift_allocError(&type metadata for KMError, v66, 0, 0);
    *(_QWORD *)v68 = v64;
    *(_QWORD *)(v68 + 8) = v43;
    *(_QWORD *)(v68 + 16) = 0xD000000000000023;
    *(_QWORD *)(v68 + 24) = 0x8000000100122DC0;
    *(_OWORD *)(v68 + 32) = 0u;
    *(_OWORD *)(v68 + 48) = 0u;
    *(_QWORD *)(v68 + 64) = 0;
    *(_BYTE *)(v68 + 72) = 6;
    swift_willThrow(v67);
    sub_1000124F8(v60, &qword_100158918);
    sub_1000124F8(v59, &qword_100158918);
    v69 = v57;
LABEL_40:
    sub_1000124F8(v69, &qword_100158918);
    v48 = v161;
    goto LABEL_41;
  }
  v160 = *(_QWORD **)(v62 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v160)(v150, v61, v63);
  v70 = (uint64_t *)sub_10008F9C4();
  v71 = v70;
  if (*(_QWORD *)(v52 + 16))
  {
    v73 = *v70;
    v72 = v70[1];
    swift_bridgeObjectRetain(v72);
    v74 = sub_100005DE8(v73, v72);
    v75 = v166;
    if ((v76 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(v52 + 56) + 32 * v74, (uint64_t)&v168);
    }
    else
    {
      v168 = 0u;
      v169 = 0u;
    }
    swift_bridgeObjectRelease(v72);
  }
  else
  {
    v168 = 0u;
    v169 = 0u;
    v75 = v166;
  }
  swift_bridgeObjectRelease(v52);
  if (!*((_QWORD *)&v169 + 1))
  {
    sub_1000124F8((uint64_t)&v168, &qword_100158018);
    v79 = v156;
    goto LABEL_39;
  }
  v77 = sub_100005C88(&qword_1001587D0);
  v78 = swift_dynamicCast(&v167, &v168, (char *)&type metadata for Any + 8, v77, 6);
  v79 = v156;
  if ((v78 & 1) == 0)
  {
LABEL_39:
    v107 = sub_1000D4214(v53);
    v109 = v108;
    *(_QWORD *)&v168 = 0;
    *((_QWORD *)&v168 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(*((_QWORD *)&v168 + 1));
    *(_QWORD *)&v168 = 0xD000000000000014;
    *((_QWORD *)&v168 + 1) = 0x8000000100122DF0;
    v111 = *v71;
    v110 = (void *)v71[1];
    swift_bridgeObjectRetain(v110);
    v112._countAndFlagsBits = v111;
    v112._object = v110;
    String.append(_:)(v112);
    swift_bridgeObjectRelease(v110);
    v113 = v168;
    v114 = sub_1000122F8();
    v43 = swift_allocError(&type metadata for KMError, v114, 0, 0);
    *(_QWORD *)v115 = v107;
    *(_QWORD *)(v115 + 8) = v109;
    *(_OWORD *)(v115 + 16) = v113;
    *(_OWORD *)(v115 + 32) = 0u;
    *(_OWORD *)(v115 + 48) = 0u;
    *(_QWORD *)(v115 + 64) = 0;
    *(_BYTE *)(v115 + 72) = 6;
    swift_willThrow(v43);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v150, v63);
    sub_1000124F8(v60, &qword_100158918);
    sub_1000124F8(v59, &qword_100158918);
    v69 = v79;
    goto LABEL_40;
  }
  v80 = v167;
  v81 = sub_10002F698((uint64_t)_swiftEmptyArrayStorage);
  v164 = (_QWORD *)*((_QWORD *)v80 + 2);
  v165 = v81;
  if (!v164)
  {
    v83 = v157;
LABEL_45:
    swift_bridgeObjectRelease(v80);
    v117 = *(_QWORD *)(v83 + 160);
    swift_bridgeObjectRetain(*(_QWORD *)(v83 + 168));
    v118 = sub_1000D4090(v117);
    v120 = v119;
    v122 = v121;
    v123 = *(_DWORD *)(v83 + 640);
    LODWORD(v168) = *sub_1000A4624();
    LODWORD(v167) = v123;
    v124 = sub_100012808();
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v168, &type metadata for ExtensionManager.Settings.Flags, v124) & 1) != 0)
    {
      v125 = swift_allocObject(&unk_100146EC8, 24, 7);
      v164 = v122;
      *(_QWORD *)(v125 + 16) = _swiftEmptyArrayStorage;
      v163 = v118;
      v126 = *(_QWORD *)(v166 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
      v127 = *(_QWORD *)(v166 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 32);
      sub_100004DE4((_QWORD *)(v166 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data), v126);
      v128 = (_QWORD *)swift_allocObject(&unk_100146EF0, 40, 7);
      v129 = v120;
      v130 = v165;
      v128[2] = v165;
      v128[3] = v83;
      v128[4] = v125;
      v131 = *(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t (*)(uint64_t, uint64_t, char), _QWORD *, uint64_t, uint64_t))(v127 + 24);
      swift_bridgeObjectRetain(v130);
      swift_retain(v83);
      swift_retain(v125);
      v43 = v129;
      v132 = v129;
      v133 = v146;
      v131(v163, v132, v164, sub_1000395A4, v128, v126, v127);
      v146 = v133;
      if (v133)
      {
        swift_bridgeObjectRelease(v130);
        swift_release(v125);
        swift_release(v128);
        swift_bridgeObjectRelease(v43);
        (*(void (**)(char *, uint64_t))(v155 + 8))(v150, v154);
        sub_1000124F8(v152, &qword_100158918);
        sub_1000124F8(v153, &qword_100158918);
        sub_1000124F8(v156, &qword_100158918);
        v48 = v161;
        goto LABEL_41;
      }
      swift_release(v128);
      swift_beginAccess(v125 + 16, &v168, 0, 0);
      v164 = *(_QWORD **)(v125 + 16);
      swift_bridgeObjectRetain(v164);
      swift_release(v125);
      sub_1000124F8(v156, &qword_100158918);
      swift_bridgeObjectRelease(v130);
      v136 = v43;
      v59 = v153;
      v63 = v154;
      v60 = v152;
    }
    else
    {
      swift_bridgeObjectRelease(v120);
      v134 = v165;
      v135 = v146;
      v164 = sub_100039314(v165, sub_10003930C);
      v146 = v135;
      sub_1000124F8(v156, &qword_100158918);
      v136 = v134;
    }
    swift_bridgeObjectRelease(v136);
    v137 = v149;
    v138 = (void (*)(uint64_t, char *, uint64_t))v160;
    ((void (*)(char *, char *, uint64_t))v160)(v149, v150, v63);
    v139 = v59;
    v140 = v147;
    sub_1000260AC(v139, v147, &qword_100158918);
    v141 = v148;
    sub_1000260AC(v60, v148, &qword_100158918);
    v142 = type metadata accessor for RealizedKernelCollection(0);
    v43 = swift_allocObject(v142, *(unsigned int *)(v142 + 48), *(unsigned __int16 *)(v142 + 52));
    v143 = v166;
    *(_QWORD *)(v43 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection) = v166;
    v138(v43 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid, v137, v63);
    sub_1000260AC(v140, v43 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID, &qword_100158918);
    sub_1000260AC(v141, v43 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID, &qword_100158918);
    *(_QWORD *)(v43 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions) = v164;
    swift_retain(v143);
    v144 = v161;
    sub_100033AD4(v161);
    swift_release(v144);
    return v43;
  }
  v163 = type metadata accessor for OSExtension(0);
  swift_bridgeObjectRetain(v80);
  v82 = 0;
  v83 = v157;
  v162 = v80;
  while (1)
  {
    v85 = *(_QWORD *)&v80[8 * v82 + 32];
    swift_bridgeObjectRetain(v85);
    v86 = sub_1000F4ABC(v75, v85);
    if (v86)
      break;
    v84 = v85;
LABEL_25:
    swift_bridgeObjectRelease(v84);
    if (v164 == (_QWORD *)++v82)
    {
      swift_bridgeObjectRelease(v80);
      v59 = v153;
      v63 = v154;
      v60 = v152;
      goto LABEL_45;
    }
  }
  v87 = v86;
  v88 = (*(uint64_t (**)(void))(*(_QWORD *)v86 + 144))();
  v90 = v89;
  swift_retain(v87);
  v91 = v165;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v165);
  *(_QWORD *)&v168 = v91;
  v94 = sub_100005DE8(v88, v90);
  v95 = *(_QWORD *)(v91 + 16);
  v96 = (v93 & 1) == 0;
  v97 = v95 + v96;
  if (!__OFADD__(v95, v96))
  {
    v98 = v93;
    if (*(_QWORD *)(v91 + 24) >= v97)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_100035FE4();
    }
    else
    {
      sub_100035948(v97, isUniquelyReferenced_nonNull_native);
      v99 = sub_100005DE8(v88, v90);
      if ((v98 & 1) != (v100 & 1))
        goto LABEL_56;
      v94 = v99;
    }
    v101 = (_QWORD *)v168;
    v165 = v168;
    if ((v98 & 1) != 0)
    {
      v102 = *(_QWORD *)(v168 + 56);
      swift_release(*(_QWORD *)(v102 + 8 * v94));
      *(_QWORD *)(v102 + 8 * v94) = v87;
    }
    else
    {
      *(_QWORD *)(v168 + 8 * (v94 >> 6) + 64) |= 1 << v94;
      v103 = (uint64_t *)(v101[6] + 16 * v94);
      *v103 = v88;
      v103[1] = v90;
      *(_QWORD *)(v101[7] + 8 * v94) = v87;
      v104 = v101[2];
      v105 = __OFADD__(v104, 1);
      v106 = v104 + 1;
      if (v105)
        goto LABEL_54;
      v101[2] = v106;
      swift_bridgeObjectRetain(v90);
    }
    v75 = v166;
    v83 = v157;
    v80 = v162;
    swift_bridgeObjectRelease(v85);
    swift_release(v87);
    swift_bridgeObjectRelease(v90);
    v84 = 0x8000000000000000;
    goto LABEL_25;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100033AD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char **v15;
  char v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  const char *v29;
  uint64_t v30;
  _BYTE *v31;
  uint8_t *v32;
  os_signpost_id_t v33;
  void (*v34)(_BYTE *, uint64_t);
  _BYTE v35[12];
  int v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  char *v41;
  char v42;

  v2 = type metadata accessor for OSSignpostError(0);
  v37 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  __chkstk_darwin(v2);
  v40 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v39 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v9 = &v35[-v8];
  v10 = type metadata accessor for OSSignposter(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_1000D3480();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v15 = sub_1000901C4();
  v41 = *v15;
  v16 = *((_BYTE *)v15 + 16);
  v17 = OSSignposter.logHandle.getter(v15);
  v18 = OSSignpostIntervalState.signpostID.getter();
  v36 = static os_signpost_type_t.end.getter(v18);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v9, v4);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  }
  v20 = v11;
  if ((v16 & 1) != 0)
  {
    v21 = v40;
    if (!((unint64_t)v41 >> 32))
    {
      if (v41 >> 11 == 27)
      {
LABEL_18:
        __break(1u);
        return result;
      }
      if (v41 >> 16 <= 0x10)
      {
        v22 = v5;
        v41 = &v42;
        goto LABEL_10;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v21 = v40;
  if (!v41)
  {
    __break(1u);
    goto LABEL_16;
  }
  v22 = v5;
LABEL_10:
  v23 = swift_retain(a1);
  checkForErrorAndConsumeState(state:)(v23);
  swift_release(a1);
  v24 = v37;
  v25 = v21;
  v26 = v21;
  v27 = v38;
  v28 = (*(uint64_t (**)(_BYTE *, uint64_t))(v37 + 88))(v25, v38);
  v40 = (_BYTE *)v10;
  if (v28 == enum case for OSSignpostError.doubleEnd(_:))
  {
    v29 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v26, v27);
    v29 = "";
  }
  v30 = v20;
  v31 = v39;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16))(v39, v9, v4);
  v32 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v32 = 0;
  v33 = OSSignpostID.rawValue.getter(v32);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, (os_signpost_type_t)v36, v33, v41, v29, v32, 2u);
  swift_slowDealloc(v32, -1, -1);

  v34 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
  v34(v9, v4);
  (*(void (**)(_BYTE *, _BYTE *))(v30 + 8))(v13, v40);
  return ((uint64_t (*)(_BYTE *, uint64_t))v34)(v31, v4);
}

uint64_t sub_100033DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(__n128);
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[24];
  _BYTE v64[40];
  _BYTE v65[40];
  _BYTE v66[32];
  uint64_t v67;
  _QWORD v68[5];
  uint64_t v69[75];

  v8 = sub_100005C88(&qword_100158918);
  v9 = __chkstk_darwin(v8);
  v60 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v56 - v11;
  v13 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v14 = __chkstk_darwin(v13);
  v61 = (uint64_t)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v56 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v56 - v19;
  memset(v68, 0, sizeof(v68));
  v67 = 0;
  memset(v66, 0, sizeof(v66));
  v21 = *(uint64_t (**)(__n128))(*(_QWORD *)a4 + 216);
  v22 = swift_bridgeObjectRetain(a2);
  v23 = v21(v22);
  if (*(_QWORD *)(v23 + 16) && (v24 = sub_100005DE8(a1, a2), (v25 & 1) != 0))
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
    swift_bridgeObjectRetain(v26);
  }
  else
  {
    v26 = 0;
  }
  swift_bridgeObjectRelease(a2);
  v27 = swift_bridgeObjectRelease(v23);
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 256))(v27);
  v28 = type metadata accessor for URL(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v18, 1, v28) == 1)
  {
    sub_1000124F8((uint64_t)v18, (uint64_t *)&unk_10015BA60);
    v30 = 1;
  }
  else
  {
    sub_100086398((uint64_t)v20);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v28);
    v30 = 0;
  }
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v58 = v20;
  v32 = v31(v20, v30, 1, v28);
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 248))(v32);
  memcpy(v69, (const void *)(a4 + 56), 0x24DuLL);
  sub_100019E1C((uint64_t)v68, (uint64_t)v65, &qword_100158010);
  sub_100019E1C((uint64_t)v66, (uint64_t)v64, &qword_100158910);
  v33 = v60;
  sub_100019E1C((uint64_t)v12, v60, &qword_100158918);
  swift_retain_n(a3, 2);
  sub_100037524(v69);
  swift_retain(a3);
  sub_100037524(v69);
  v34 = sub_100036EC4(a3, 0, 1, v26, v33, (uint64_t)v69);
  v56 = v35;
  v59 = a4;
  v37 = v36 & 0xFF01;
  v38 = (uint64_t)v20;
  v39 = v61;
  sub_100019E1C(v38, v61, (uint64_t *)&unk_10015BA60);
  sub_100019E1C((uint64_t)v12, v33, &qword_100158918);
  v40 = type metadata accessor for RealizedInfo(0);
  v41 = swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  *(_QWORD *)(v41 + 16) = 0;
  *(_OWORD *)(v41 + 96) = 0u;
  *(_OWORD *)(v41 + 112) = 0u;
  v57 = v12;
  *(_OWORD *)(v41 + 80) = 0u;
  *(_QWORD *)(v41 + 128) = 0;
  *(_QWORD *)(v41 + 136) = 1;
  *(_QWORD *)(v41 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_validationErrors) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v41 + 24) = a3;
  sub_1000260AC((uint64_t)v65, v41 + 32, &qword_100158010);
  *(_BYTE *)(v41 + 72) = 0;
  swift_beginAccess(v41 + 80, v63, 33, 0);
  sub_1000392C8((uint64_t)v64, v41 + 80, &qword_100158910);
  swift_endAccess(v63);
  swift_beginAccess(v41 + 120, v63, 1, 0);
  v42 = *(_QWORD *)(v41 + 120);
  v43 = *(_QWORD *)(v41 + 128);
  v44 = *(_QWORD *)(v41 + 136);
  *(_QWORD *)(v41 + 120) = v34;
  *(_QWORD *)(v41 + 128) = v37;
  *(_QWORD *)(v41 + 136) = v56;
  sub_10003707C(v42, v43, v44);
  sub_1000260AC(v39, v41 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t *)&unk_10015BA60);
  v45 = v41 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex;
  *(_QWORD *)v45 = 0;
  *(_BYTE *)(v45 + 8) = 1;
  sub_1000260AC(v33, v41 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, &qword_100158918);
  *(_QWORD *)(v41 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches) = 0;
  swift_beginAccess(v41 + 16, &v62, 1, 0);
  *(_QWORD *)(v41 + 16) = 0;
  v46 = type metadata accessor for DriverExtension(0);
  v47 = swift_dynamicCastClass(a3, v46);
  v48 = &v69[15];
  v49 = &v69[16];
  if (!v47)
    v49 = &v69[14];
  v50 = *v49;
  if (!v47)
    v48 = &v69[13];
  v51 = *v48;
  swift_bridgeObjectRetain(*v49);
  swift_retain(v41);
  v52 = sub_10002E8E8(v51, v50, 0);
  swift_bridgeObjectRelease(v50);
  v53 = (uint64_t)v58;
  sub_100019E1C((uint64_t)v58, v39, (uint64_t *)&unk_10015BA60);
  v54 = sub_1000378C8(a3, v52, v39, 0, v69);
  sub_100038E40(v69);
  swift_release(v41);
  swift_release(a3);
  sub_1000124F8((uint64_t)v57, &qword_100158918);
  sub_1000124F8(v53, (uint64_t *)&unk_10015BA60);
  sub_1000124F8((uint64_t)v66, &qword_100158910);
  sub_1000124F8((uint64_t)v68, &qword_100158010);
  *(_QWORD *)(v41 + 16) = v54;
  v68[0] = v41;
  sub_100089A0C(v68);
  sub_10008D4A8(v68);
  return v68[0];
}

uint64_t sub_100034320(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

BOOL sub_1000343E4(_QWORD *a1, _QWORD *a2)
{
  return sub_1000395C8(a1, a2, 1);
}

BOOL sub_1000343EC(_QWORD **a1, _QWORD **a2)
{
  return sub_1000395C8(*a1, *a2, 1);
}

uint64_t sub_100034408(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (_QWORD *)((unint64_t)a1 >> 62);
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = (unint64_t)a2 >> 62;
    if (!((unint64_t)a2 >> 62))
      goto LABEL_3;
LABEL_39:
    if (a2 < 0)
      v21 = a2;
    else
      v21 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a2);
    if (v6 != v22)
      return 0;
    goto LABEL_4;
  }
LABEL_35:
  if (a1 < 0)
    v20 = a1;
  else
    v20 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v6 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease(a1);
  v7 = (unint64_t)a2 >> 62;
  if ((unint64_t)a2 >> 62)
    goto LABEL_39;
LABEL_3:
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v6)
    return 1;
  v8 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 < 0)
    v8 = a1;
  if (!v5)
    v8 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  v9 = a2 & 0xFFFFFFFFFFFFFF8;
  v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0)
    v9 = a2;
  if (v7)
    v10 = v9;
  if (v8 == v10)
    return 1;
  if (v6 < 0)
    goto LABEL_46;
  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v11 = *(_QWORD **)(a1 + 32);
    result = swift_retain(v11);
    v13 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
      goto LABEL_17;
LABEL_48:
    v5 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_19:
    type metadata accessor for RealizedInfo(0);
    v14 = sub_1000369CC(v11, v5);
    swift_release(v11);
    swift_release(v5);
    if (v14)
    {
      v15 = v6 - 1;
      if (v6 == 1)
        return 1;
      v17 = 0;
      v18 = v6 - 2;
      while (1)
      {
        if (v15 == v17)
        {
          __break(1u);
          goto LABEL_35;
        }
        if (v2)
        {
          v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, a1);
          if (v13)
            goto LABEL_26;
        }
        else
        {
          v6 = *(_QWORD *)(a1 + 40 + 8 * v17);
          swift_retain(v6);
          if (v13)
          {
LABEL_26:
            v5 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 + 1, a2);
            goto LABEL_30;
          }
        }
        if ((unint64_t)(v17 + 1) >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        v5 = *(_QWORD **)(a2 + 40 + 8 * v17);
        swift_retain(v5);
LABEL_30:
        v16 = sub_1000369CC((_QWORD *)v6, v5);
        swift_release(v6);
        swift_release(v5);
        if (v16 && v18 != v17++)
          continue;
        return v16;
      }
    }
    return 0;
  }
LABEL_47:
  result = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  v11 = (_QWORD *)result;
  v13 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
    goto LABEL_48;
LABEL_17:
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(_QWORD **)(a2 + 32);
    swift_retain(v5);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_100034688(uint64_t *a1, uint64_t *a2)
{
  return sub_1000365AC(*a1, *a2);
}

void sub_100034694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = *(_QWORD *)(v1 + 24);
  v3 = type metadata accessor for OSExtension(0);
  v4 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  sub_100019E1C(v1 + 32, (uint64_t)&v17, &qword_100158010);
  v5 = v19;
  if (v19)
  {
    v6 = v20;
    sub_100004DE4(&v17, v19);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
    v9 = v8;
    sub_100005D08(&v17);
    v17 = v7;
    v18 = v9;
    Hasher._combine(_:)(1u);
    v10 = sub_10002B298();
    dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CodeSigningHash, v10);
    sub_100011F40(v7, v9);
  }
  else
  {
    sub_1000124F8((uint64_t)&v17, &qword_100158010);
    Hasher._combine(_:)(0);
  }
  sub_100019E1C(v1 + 32, (uint64_t)&v17, &qword_100158010);
  v11 = v19;
  if (v19)
  {
    v12 = v20;
    sub_100004DE4(&v17, v19);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
    v15 = v14;
    sub_100005D08(&v17);
    v17 = v13;
    v18 = v15;
    Hasher._combine(_:)(1u);
    v16 = sub_100039A8C();
    dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CodeSigningTeam, v16);
    sub_100017450(v13, v15);
  }
  else
  {
    sub_1000124F8((uint64_t)&v17, &qword_100158010);
    Hasher._combine(_:)(0);
  }
}

BOOL sub_100034864(_QWORD **a1, _QWORD **a2)
{
  return sub_1000369CC(*a1, *a2);
}

Swift::Int sub_100034870(uint64_t a1, uint64_t a2)
{
  return sub_100034B50(a1, a2, (void (*)(_QWORD *))sub_100034694);
}

void sub_10003487C(uint64_t a1)
{
  sub_100034694(a1);
}

Swift::Int sub_10003489C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100034BC0(a1, a2, a3, (void (*)(_QWORD *))sub_100034694);
}

uint64_t sub_1000348A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005C88(&qword_100158918);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v20 - v12;
  v14 = sub_100012534(&qword_100157F10, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
  sub_100019E1C(v1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID, (uint64_t)v13, &qword_100158918);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v15(v13, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v13, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_100019E1C(v1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID, (uint64_t)v11, &qword_100158918);
  if (v15(v11, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v20[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection);
  v16 = type metadata accessor for KernelCollection(0);
  v17 = sub_100012534(&qword_100158948, type metadata accessor for KernelCollection, (uint64_t)&unk_100110928);
  dispatch thunk of Hashable.hash(into:)(a1, v16, v17);
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions);
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions));
  sub_1000362C4(a1, v18);
  return swift_bridgeObjectRelease(v18);
}

Swift::Int sub_100034B44(uint64_t a1, uint64_t a2)
{
  return sub_100034B50(a1, a2, (void (*)(_QWORD *))sub_1000348A8);
}

Swift::Int sub_100034B50(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *))
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  a3(v5);
  return Hasher._finalize()();
}

uint64_t sub_100034B94(uint64_t a1)
{
  return sub_1000348A8(a1);
}

Swift::Int sub_100034BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100034BC0(a1, a2, a3, (void (*)(_QWORD *))sub_1000348A8);
}

Swift::Int sub_100034BC0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *))
{
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_100034C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  _QWORD v23[2];
  __int128 v24;
  __int128 v25;

  v5 = v4;
  __chkstk_darwin(a1);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  result = swift_dynamicCast(&v24, v10, a3, &type metadata for String, 6);
  if (!(_DWORD)result)
  {
    *a4 = 0u;
    a4[1] = 0u;
    return result;
  }
  v13 = v24;
  if (a2 && (v14 = (uint64_t *)sub_10008FA00(), *(_QWORD *)(a2 + 16)))
  {
    v16 = *v14;
    v15 = v14[1];
    swift_bridgeObjectRetain(v15);
    v17 = sub_100005DE8(v16, v15);
    if ((v18 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(a2 + 56) + 32 * v17, (uint64_t)&v24);
    }
    else
    {
      v24 = 0u;
      v25 = 0u;
    }
    swift_bridgeObjectRelease(v15);
    if (*((_QWORD *)&v25 + 1))
    {
      v21 = swift_dynamicCast(v23, &v24, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      v22 = v21 == 0;
      if (v21)
        v19 = v23[0];
      else
        v19 = 0;
      if (v22)
        v20 = 0;
      else
        v20 = v23[1];
      goto LABEL_17;
    }
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  sub_1000124F8((uint64_t)&v24, &qword_100158018);
  v19 = 0;
  v20 = 0;
LABEL_17:
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 312))(v19, v20, v13, *((_QWORD *)&v13 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)&v13 + 1));
  return swift_bridgeObjectRelease(v20);
}

uint64_t sub_100034D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  swift_bridgeObjectRetain(v9);
  v10 = sub_1000F95F0(a1, a2, v9, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Any + 8, a3, (uint64_t)&protocol witness table for String, a4);
  swift_bridgeObjectRelease(v9);
  return v10;
}

uint64_t sub_100034E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return sub_100034C00(a1, a2, a3, a4);
}

uint64_t sub_100034E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100034D94(a1, a2, a3, a4);
}

uint64_t sub_100034E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  __n128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  Swift::String v35;
  void *object;
  Swift::String v37;
  unint64_t v38;
  __n128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  unint64_t v50;
  __n128 v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  Swift::String v58;
  void *v59;
  unint64_t v60;
  __n128 v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v1 = v0;
  v2 = sub_100005C88(&qword_100158918);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 24);
  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 144))(v3);
  v66 = v7;
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v10 = v65;
  v9 = v66;
  v65 = 118;
  v66 = 0xE100000000000000;
  v11 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 184))();
  if (v12)
  {
    v13 = v12;
  }
  else
  {
    v11 = 0x73726576206F6E3CLL;
    v13 = 0xEC0000003E6E6F69;
  }
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16 = v66;
  v69 = v10;
  v70 = v9;
  v17 = swift_bridgeObjectRetain(v9);
  v69 = String.init<A>(_:)(&v69, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v17);
  v70 = v18;
  String.append<A>(contentsOf:)(&v65, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v16);
  v20 = v69;
  v19 = v70;
  v65 = 40;
  v66 = 0xE100000000000000;
  sub_100019E1C(v0 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid, (uint64_t)v5, &qword_100158918);
  v21 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v5, 1, v21);
  if ((_DWORD)v23 == 1)
  {
    sub_1000124F8((uint64_t)v5, &qword_100158918);
    v24 = (void *)0xE700000000000000;
    v25 = 0x64697575206F6ELL;
  }
  else
  {
    v25 = UUID.uuidString.getter(v23);
    v24 = v26;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v21);
  }
  v27._countAndFlagsBits = v25;
  v27._object = v24;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v24);
  v28._countAndFlagsBits = 8233;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  v29 = v66;
  v69 = v20;
  v70 = v19;
  v30 = swift_bridgeObjectRetain(v19);
  v69 = String.init<A>(_:)(&v69, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v30);
  v70 = v31;
  String.append<A>(contentsOf:)(&v65, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v29);
  v33 = v69;
  v32 = v70;
  v65 = 2125417;
  v66 = 0xE300000000000000;
  v34 = sub_100039AD0();
  v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for OSExtension.Location, v34);
  object = v35._object;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(object);
  v37._countAndFlagsBits = 32;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  v38 = v66;
  v69 = v33;
  v70 = v32;
  v39 = swift_bridgeObjectRetain(v32);
  v69 = String.init<A>(_:)(&v69, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v39);
  v70 = v40;
  String.append<A>(contentsOf:)(&v65, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v38);
  v42 = v69;
  v41 = v70;
  v69 = 0x2064656E676973;
  v70 = 0xE700000000000000;
  sub_100019E1C(v0 + 32, (uint64_t)&v65, &qword_100158010);
  v43 = v67;
  if (v67)
  {
    v44 = v68;
    sub_100004DE4(&v65, v67);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, *(_QWORD *)(v44 + 8));
    v47 = v46;
    sub_100005D08(&v65);
  }
  else
  {
    sub_1000124F8((uint64_t)&v65, &qword_100158010);
    v47 = (void *)0xE600000000000000;
    v45 = 0x3E656E6F6E3CLL;
  }
  v48._countAndFlagsBits = v45;
  v48._object = v47;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v47);
  v49._countAndFlagsBits = 32;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  v50 = v70;
  v65 = v69;
  v66 = v70;
  v69 = v42;
  v70 = v41;
  v51 = swift_bridgeObjectRetain(v41);
  v69 = String.init<A>(_:)(&v69, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v51);
  v70 = v52;
  String.append<A>(contentsOf:)(&v65, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v41);
  v53 = swift_bridgeObjectRelease(v50);
  v55 = v69;
  v54 = v70;
  v65 = 0x207367616C66;
  v66 = 0xE600000000000000;
  v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 168))(v53);
  v56 = sub_100039B14();
  v57 = (_QWORD *)sub_100039B58();
  v58._countAndFlagsBits = sub_1000D3978((uint64_t)&type metadata for RealizedInfo.Flags, v56, v57);
  v59 = v58._object;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v59);
  v60 = v66;
  v69 = v55;
  v70 = v54;
  v61 = swift_bridgeObjectRetain(v54);
  v69 = String.init<A>(_:)(&v69, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v61);
  v70 = v62;
  String.append<A>(contentsOf:)(&v65, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v54);
  swift_bridgeObjectRelease(v60);
  return v69;
}

uint64_t sub_100035360()
{
  return sub_100034E60();
}

char *sub_100035380(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_100158C08);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_100035478(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = sub_10003A28C();
  v5 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, &type metadata for ExceptionList.ExceptionType, v4);
  return sub_1000354E0(a1, v5);
}

unint64_t sub_1000354E0(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;
  char v9;

  v9 = a1;
  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = sub_10002B50C();
    do
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v8, &v9, &type metadata for ExceptionList.ExceptionType, v6) & 1) != 0)break;
      v4 = (v4 + 1) & v5;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void (*sub_1000355A4(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_10002AAA4(v7);
  v7[10] = sub_100036198(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10002972C;
}

Swift::Int sub_100035634(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100158C38);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100035948(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100158C10);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

unint64_t sub_100035C5C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_100035E30()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100005C88(&qword_100158C38);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100035FE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100005C88(&qword_100158C10);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void (*sub_100036198(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_100005DE8(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_10002AA68;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_100035E30();
      goto LABEL_7;
    }
    sub_100035634(v16, a4 & 1);
    v20 = sub_100005DE8(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000362C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a2;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v22 = a2;
    else
      v22 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v23 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v2);
    Hasher._combine(_:)(v23);
    swift_bridgeObjectRetain(v2);
    v4 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v2);
    if (!v4)
      return;
  }
  else
  {
    Hasher._combine(_:)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10));
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return;
  }
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    v5 = 0;
    v24 = v2 & 0xC000000000000001;
    v6 = v2;
    do
    {
      if (v24)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      }
      else
      {
        v7 = *(_QWORD *)(v2 + 8 * v5 + 32);
        swift_retain(v7);
      }
      v25 = *(_QWORD *)(v7 + 24);
      v8 = type metadata accessor for OSExtension(0);
      v9 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
      dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
      sub_100019E1C(v7 + 32, (uint64_t)&v25, &qword_100158010);
      v10 = v27;
      if (v27)
      {
        v11 = v28;
        sub_100004DE4(&v25, v27);
        v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
        v14 = v13;
        sub_100005D08(&v25);
        v25 = v12;
        v26 = v14;
        Hasher._combine(_:)(1u);
        v15 = sub_10002B298();
        dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CodeSigningHash, v15);
        sub_100011F40(v12, v14);
      }
      else
      {
        sub_1000124F8((uint64_t)&v25, &qword_100158010);
        Hasher._combine(_:)(0);
      }
      sub_100019E1C(v7 + 32, (uint64_t)&v25, &qword_100158010);
      v16 = v27;
      if (v27)
      {
        v17 = v28;
        sub_100004DE4(&v25, v27);
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
        v20 = v19;
        sub_100005D08(&v25);
        v25 = v18;
        v26 = v20;
        Hasher._combine(_:)(1u);
        v21 = sub_100039A8C();
        dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CodeSigningTeam, v21);
        sub_100017450(v18, v20);
      }
      else
      {
        sub_1000124F8((uint64_t)&v25, &qword_100158010);
        Hasher._combine(_:)(0);
      }
      swift_release(v7);
      v2 = v6;
      ++v5;
    }
    while (v4 != v5);
  }
}

uint64_t sub_100036574(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1000365AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005C88(&qword_100158918);
  v9 = __chkstk_darwin(v8);
  v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - v11;
  v13 = sub_100005C88(&qword_100158BF0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v37 - v17;
  v39 = a1;
  v40 = a2;
  v19 = a1 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID;
  v20 = a2 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_bootCollectionUUID;
  v21 = (char *)&v37 + *(int *)(v13 + 48) - v17;
  sub_100019E1C(v19, (uint64_t)&v37 - v17, &qword_100158918);
  sub_100019E1C(v20, (uint64_t)v21, &qword_100158918);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v22(v18, 1, v4) == 1)
  {
    if (v22(v21, 1, v4) == 1)
    {
      sub_1000124F8((uint64_t)v18, &qword_100158918);
      goto LABEL_8;
    }
LABEL_6:
    v23 = (uint64_t)v18;
LABEL_14:
    sub_1000124F8(v23, &qword_100158BF0);
    goto LABEL_15;
  }
  sub_100019E1C((uint64_t)v18, (uint64_t)v12, &qword_100158918);
  if (v22(v21, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v21, v4);
  v24 = sub_100012534(&qword_100158BF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v25 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v7, v4, v24);
  v26 = *(void (**)(char *, uint64_t))(v5 + 8);
  v26(v7, v4);
  v26(v12, v4);
  sub_1000124F8((uint64_t)v18, &qword_100158918);
  if ((v25 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v28 = v39;
  v27 = v40;
  v29 = v40 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID;
  v30 = (uint64_t)&v16[*(int *)(v13 + 48)];
  sub_100019E1C(v39 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_pageableCollectionUUID, (uint64_t)v16, &qword_100158918);
  sub_100019E1C(v29, v30, &qword_100158918);
  if (v22(v16, 1, v4) != 1)
  {
    v31 = v38;
    sub_100019E1C((uint64_t)v16, v38, &qword_100158918);
    if (v22((char *)v30, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v30, v4);
      v34 = sub_100012534(&qword_100158BF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v7, v4, v34);
      v36 = *(void (**)(char *, uint64_t))(v5 + 8);
      v36(v7, v4);
      v36((char *)v31, v4);
      sub_1000124F8((uint64_t)v16, &qword_100158918);
      if ((v35 & 1) == 0)
        goto LABEL_15;
      goto LABEL_18;
    }
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v31, v4);
    goto LABEL_13;
  }
  if (v22((char *)v30, 1, v4) != 1)
  {
LABEL_13:
    v23 = (uint64_t)v16;
    goto LABEL_14;
  }
  sub_1000124F8((uint64_t)v16, &qword_100158918);
LABEL_18:
  if ((static UUID.== infix(_:_:)(v28 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid, v27 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid) & 1) != 0)
  {
    type metadata accessor for KernelCollection(0);
    if (sub_10004D888(*(_QWORD *)(v28 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection), *(_QWORD *)(v27 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection)))
    {
      v32 = sub_100034408(*(_QWORD *)(v28 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions), *(_QWORD *)(v27 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions));
      return v32 & 1;
    }
  }
LABEL_15:
  v32 = 0;
  return v32 & 1;
}

BOOL sub_1000369CC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  type metadata accessor for OSExtension(0);
  if ((sub_1000F66F8(a1[3], a2[3]) & 1) != 0)
  {
    sub_100019E1C((uint64_t)(a1 + 4), (uint64_t)&v20, &qword_100158010);
    v4 = v22;
    if (v22)
    {
      v5 = v23;
      sub_100004DE4(&v20, v22);
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
      v8 = v7;
      sub_100005D08(&v20);
    }
    else
    {
      sub_1000124F8((uint64_t)&v20, &qword_100158010);
      v6 = 0;
      v8 = 0xF000000000000000;
    }
    sub_100019E1C((uint64_t)(a2 + 4), (uint64_t)&v20, &qword_100158010);
    v9 = v22;
    if (!v22)
    {
      v14 = sub_1000124F8((uint64_t)&v20, &qword_100158010);
      if (v8 >> 60 != 15)
      {
        v11 = 0;
        v13 = 0xF000000000000000;
        goto LABEL_12;
      }
LABEL_15:
      v18 = (*(uint64_t (**)(uint64_t))(*a1 + 168))(v14);
      return v18 == (*(uint64_t (**)(void))(*a2 + 168))();
    }
    v10 = v23;
    sub_100004DE4(&v20, v22);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
    v13 = v12;
    v14 = sub_100005D08(&v20);
    if (v8 >> 60 == 15)
    {
      if (v13 >> 60 == 15)
        goto LABEL_15;
LABEL_13:
      sub_100021610(v6, v8);
      sub_100021610(v11, v13);
      return 0;
    }
    v20 = v6;
    v21 = v8;
    if (v13 >> 60 == 15)
    {
LABEL_12:
      sub_1000122B4(v6, v8);
      sub_100011F40(v6, v8);
      goto LABEL_13;
    }
    v19[0] = v11;
    v19[1] = v13;
    sub_1000122B4(v6, v8);
    v16 = sub_10002BCD0();
    v17 = dispatch thunk of static Equatable.== infix(_:_:)(&v20, v19, &type metadata for CodeSigningHash, v16);
    sub_100021610(v11, v13);
    sub_100011F40(v20, v21);
    v14 = sub_100021610(v6, v8);
    if ((v17 & 1) != 0)
      goto LABEL_15;
  }
  return 0;
}

uint64_t sub_100036BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005C88(&qword_100158918);
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005C88(&qword_100158BF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 != a1)
  {
    sub_1000124F8(a4, &qword_100158918);
    sub_1000124F8(a2, &qword_100158918);
    return 3;
  }
  v19 = (uint64_t)&v18[*(int *)(v16 + 48)];
  sub_100019E1C(a4, (uint64_t)v18, &qword_100158918);
  sub_100019E1C(a2, v19, &qword_100158918);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v20((uint64_t)v18, 1, v8) != 1)
  {
    sub_100019E1C((uint64_t)v18, (uint64_t)v14, &qword_100158918);
    if (v20(v19, 1, v8) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v11, v19, v8);
      v22 = sub_100012534(&qword_100158BF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v11, v8, v22);
      sub_1000124F8(a4, &qword_100158918);
      sub_1000124F8(a2, &qword_100158918);
      v24 = *(void (**)(char *, uint64_t))(v9 + 8);
      v24(v11, v8);
      v24(v14, v8);
      sub_1000124F8((uint64_t)v18, &qword_100158918);
      if ((v23 & 1) != 0)
        return 0;
      return 2;
    }
    sub_1000124F8(a4, &qword_100158918);
    sub_1000124F8(a2, &qword_100158918);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
LABEL_8:
    sub_1000124F8((uint64_t)v18, &qword_100158BF0);
    return 2;
  }
  sub_1000124F8(a4, &qword_100158918);
  sub_1000124F8(a2, &qword_100158918);
  if (v20(v19, 1, v8) != 1)
    goto LABEL_8;
  sub_1000124F8((uint64_t)v18, &qword_100158918);
  return 0;
}

uint64_t sub_100036EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD v28[3];
  int v29;

  v11 = sub_100005C88(&qword_100158918);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)v28 - v15;
  v17 = *(_DWORD *)(a6 + 584);
  v18 = *sub_1000A4624();
  v28[2] = v17;
  v29 = v18;
  v19 = sub_100012808();
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v29, &type metadata for ExtensionManager.Settings.Flags, v19) & 1) == 0
    || (v20 = swift_bridgeObjectRetain(a4),
        v22 = sub_10002D554(v20, v21, a4),
        v24 = v23,
        v25 = swift_bridgeObjectRelease(a4),
        (v24 & 1) != 0))
  {
    sub_100038E40((_QWORD *)a6);
    swift_release(a1);
  }
  else
  {
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(v25);
    sub_100019E1C(a5, (uint64_t)v16, &qword_100158918);
    swift_bridgeObjectRetain(a4);
    sub_10002D460(a4, (uint64_t)v14);
    swift_bridgeObjectRelease(a4);
    sub_100036BFC(v26, (uint64_t)v16, v22, (uint64_t)v14);
    sub_100038E40((_QWORD *)a6);
    swift_release(a1);
  }
  sub_1000124F8(a5, &qword_100158918);
  return a2;
}

uint64_t sub_100037068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_bridgeObjectRetain(a3);
  return result;
}

uint64_t sub_10003707C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_bridgeObjectRelease(a3);
  return result;
}

uint64_t sub_100037090(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void (*v23)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  int64_t v24;
  uint64_t *v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  int64_t v43;
  unsigned int v44;
  _OWORD v49[2];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  _OWORD v56[2];
  __int128 v57;
  _OWORD v58[3];
  unint64_t v59;

  v42 = a2 + 64;
  v8 = 1 << *(_BYTE *)(a2 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a2 + 64);
  v43 = (unint64_t)(v8 + 63) >> 6;
  v11 = &v54;
  swift_bridgeObjectRetain(a2);
  v12 = 0;
  v44 = a6 & 1;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_25;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_45;
    if (v16 >= v43)
    {
LABEL_43:
      swift_release(a2);
      return (uint64_t)a1;
    }
    v17 = *(_QWORD *)(v42 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v43)
        goto LABEL_43;
      v17 = *(_QWORD *)(v42 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v43)
          goto LABEL_43;
        v17 = *(_QWORD *)(v42 + 8 * v12);
        if (!v17)
        {
          v12 = v16 + 3;
          if (v16 + 3 >= v43)
            goto LABEL_43;
          v17 = *(_QWORD *)(v42 + 8 * v12);
          if (!v17)
            break;
        }
      }
    }
LABEL_24:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_25:
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v15);
    v21 = *v19;
    v20 = v19[1];
    sub_100005D28(*(_QWORD *)(a2 + 56) + 32 * v15, (uint64_t)v58);
    *(_QWORD *)&v57 = v21;
    *((_QWORD *)&v57 + 1) = v20;
    v55 = v57;
    v56[0] = v58[0];
    v56[1] = v58[1];
    v22 = v57;
    v52 = v21;
    v53 = v20;
    sub_100005D28((uint64_t)v56, (uint64_t)v11);
    v23 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a3 + 304);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(*((_QWORD *)&v22 + 1));
    v23(&v50, a4, a5, v22, *((_QWORD *)&v22 + 1), v44);
    if (v51)
    {
      v59 = v10;
      v24 = v12;
      v25 = v11;
      sub_100017464(&v50, v49);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
      v28 = sub_100005DE8(v22, *((uint64_t *)&v22 + 1));
      v29 = a1[2];
      v30 = (v27 & 1) == 0;
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      v32 = v27;
      if (a1[3] < v31)
      {
        sub_100016A68(v31, isUniquelyReferenced_nonNull_native);
        v33 = sub_100005DE8(v22, *((uint64_t *)&v22 + 1));
        if ((v32 & 1) != (v34 & 1))
          goto LABEL_48;
        v28 = v33;
        if ((v32 & 1) == 0)
          goto LABEL_37;
LABEL_4:
        v13 = (_QWORD *)(a1[7] + 32 * v28);
        sub_100005D08(v13);
        sub_100017464(v49, v13);
LABEL_5:
        swift_bridgeObjectRelease(*((_QWORD *)&v22 + 1));
        swift_bridgeObjectRelease(0x8000000000000000);
        v11 = v25;
        v12 = v24;
        v10 = v59;
        goto LABEL_6;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v27 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100016EFC();
        if ((v32 & 1) != 0)
          goto LABEL_4;
      }
LABEL_37:
      a1[(v28 >> 6) + 8] |= 1 << v28;
      *(_OWORD *)(a1[6] + 16 * v28) = v22;
      sub_100017464(v49, (_OWORD *)(a1[7] + 32 * v28));
      v38 = a1[2];
      v39 = __OFADD__(v38, 1);
      v40 = v38 + 1;
      if (v39)
        goto LABEL_46;
      a1[2] = v40;
      swift_bridgeObjectRetain(*((_QWORD *)&v22 + 1));
      goto LABEL_5;
    }
    sub_1000124F8((uint64_t)&v50, &qword_100158018);
    swift_bridgeObjectRetain(a1);
    v35 = sub_100005DE8(v22, *((uint64_t *)&v22 + 1));
    v37 = v36;
    swift_bridgeObjectRelease(a1);
    if ((v37 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) == 0)
        sub_100016EFC();
      swift_bridgeObjectRelease(*(_QWORD *)(a1[6] + 16 * v35 + 8));
      sub_100017464((_OWORD *)(a1[7] + 32 * v35), v49);
      sub_100035C5C(v35, (uint64_t)a1);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      memset(v49, 0, sizeof(v49));
    }
    swift_bridgeObjectRelease(*((_QWORD *)&v22 + 1));
    sub_1000124F8((uint64_t)v49, &qword_100158018);
LABEL_6:
    sub_100005D08(v11);
    sub_1000124F8((uint64_t)&v55, &qword_100157C60);
  }
  v18 = v16 + 4;
  if (v18 >= v43)
    goto LABEL_43;
  v17 = *(_QWORD *)(v42 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_24;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v43)
      goto LABEL_43;
    v17 = *(_QWORD *)(v42 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_24;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100037510(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRelease(a2);
  return result;
}

_QWORD *sub_100037524(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v12 = a1[2];
  v13 = a1[4];
  v2 = a1[8];
  v3 = a1[9];
  v5 = a1[10];
  v4 = a1[11];
  v6 = a1[12];
  v7 = a1[14];
  v9 = a1[16];
  v8 = a1[17];
  v14 = a1[19];
  v15 = a1[20];
  v16 = a1[21];
  v17 = a1[23];
  v18 = a1[26];
  v19 = a1[27];
  v20 = a1[29];
  v21 = a1[31];
  v22 = a1[33];
  v23 = a1[35];
  v24 = a1[37];
  v25 = a1[38];
  v26 = a1[39];
  v27 = a1[40];
  v28 = a1[41];
  v29 = a1[43];
  v30 = a1[45];
  v31 = a1[47];
  v32 = a1[49];
  v34 = a1[51];
  v36 = a1[53];
  v10 = a1[55];
  v44 = a1[57];
  v45 = a1[56];
  v42 = a1[59];
  v43 = a1[58];
  v40 = a1[61];
  v41 = a1[60];
  v39 = a1[62];
  v37 = a1[54];
  v38 = a1[63];
  v35 = a1[64];
  v33 = a1[65];
  v50 = a1[69];
  v51 = a1[68];
  v48 = a1[71];
  v49 = a1[70];
  v46 = a1[67];
  v47 = a1[72];
  swift_bridgeObjectRetain(a1[6]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  sub_1000377C4(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  sub_1000377E4(v45, v44, v43, v42, v41, v40, v39, v38, v35, v33);
  swift_bridgeObjectRetain(v46);
  sub_10003785C(v51, v50, v49, v48, v47);
  return a1;
}

unint64_t sub_1000377C4(unint64_t result)
{
  if (result != 5)
    return sub_1000377D4(result);
  return result;
}

unint64_t sub_1000377D4(unint64_t result)
{
  if (result >= 5)
    return swift_retain(result);
  return result;
}

uint64_t sub_1000377E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a9);
    return swift_bridgeObjectRetain(a10);
  }
  return result;
}

uint64_t sub_10003785C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t type metadata accessor for RealizedInfo(uint64_t a1)
{
  return sub_100017D70(a1, (uint64_t *)&unk_10015EC90, (uint64_t)&nominal type descriptor for RealizedInfo);
}

_QWORD *sub_1000378C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t (*v63)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  void (*v65)(uint64_t);
  unsigned int v66;
  void (*v67)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v68)(char *, uint64_t, uint64_t);
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  char *v86;
  _QWORD *result;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(uint64_t, uint64_t);
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  int v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int (*v208)(char *, uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD v213[2];
  _QWORD v214[2];
  __int128 v215;
  __int128 v216;
  _QWORD v217[2];
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD v223[3];
  uint64_t v224;
  uint64_t v225;

  v200 = a5;
  v193 = a4;
  v207 = a3;
  v209 = a2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v189 = (char *)&v183 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v192 = (char *)&v183 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v183 - v12;
  v14 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v15 = __chkstk_darwin(v14);
  v184 = (uint64_t)&v183 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v186 = (char *)&v183 - v18;
  v19 = __chkstk_darwin(v17);
  v187 = (uint64_t)&v183 - v20;
  v21 = __chkstk_darwin(v19);
  v203 = (uint64_t)&v183 - v22;
  v23 = __chkstk_darwin(v21);
  v194 = (char *)&v183 - v24;
  v25 = __chkstk_darwin(v23);
  v188 = (uint64_t)&v183 - v26;
  v27 = __chkstk_darwin(v25);
  v198 = (char *)&v183 - v28;
  v29 = __chkstk_darwin(v27);
  v196 = (uint64_t)&v183 - v30;
  v31 = __chkstk_darwin(v29);
  v197 = (char *)&v183 - v32;
  v33 = __chkstk_darwin(v31);
  v185 = (uint64_t)&v183 - v34;
  v35 = __chkstk_darwin(v33);
  v195 = (char *)&v183 - v36;
  v37 = __chkstk_darwin(v35);
  v199 = (char *)&v183 - v38;
  v39 = __chkstk_darwin(v37);
  v210 = (uint64_t)&v183 - v40;
  v41 = __chkstk_darwin(v39);
  v190 = (uint64_t)&v183 - v42;
  v43 = __chkstk_darwin(v41);
  v201 = (uint64_t)&v183 - v44;
  v45 = __chkstk_darwin(v43);
  v191 = (uint64_t)&v183 - v46;
  v47 = __chkstk_darwin(v45);
  v205 = (char *)&v183 - v48;
  v49 = __chkstk_darwin(v47);
  v51 = (char *)&v183 - v50;
  v52 = __chkstk_darwin(v49);
  v54 = (char *)&v183 - v53;
  v55 = __chkstk_darwin(v52);
  v57 = (char *)&v183 - v56;
  v58 = __chkstk_darwin(v55);
  v60 = (char *)&v183 - v59;
  __chkstk_darwin(v58);
  v62 = (char *)&v183 - v61;
  v63 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v64 = v63((char *)&v183 - v61, 1, 1, v6);
  v65 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 160);
  v206 = a1;
  v65(v64);
  v208 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v66 = v208(v60, 1, v6);
  v204 = v7;
  if (v66 == 1)
  {
    v67 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v63;
    sub_1000124F8((uint64_t)v60, (uint64_t *)&unk_10015BA60);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v60, v6);
    sub_100086398((uint64_t)v57);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    sub_1000124F8((uint64_t)v62, (uint64_t *)&unk_10015BA60);
    v67 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v63;
    v63(v57, 0, 1, v6);
    sub_1000260AC((uint64_t)v57, (uint64_t)v62, (uint64_t *)&unk_10015BA60);
  }
  v202 = v62;
  sub_100019E1C((uint64_t)v62, (uint64_t)v54, (uint64_t *)&unk_10015BA60);
  v68 = v208;
  v69 = v208(v54, 1, v6);
  sub_1000124F8((uint64_t)v54, (uint64_t *)&unk_10015BA60);
  sub_100019E1C(v207, (uint64_t)v51, (uint64_t *)&unk_10015BA60);
  v70 = (uint64_t)v205;
  if (v69 == 1 && v68(v51, 1, v6) == 1)
  {
    v71 = sub_1000124F8((uint64_t)v51, (uint64_t *)&unk_10015BA60);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v206 + 112))(v223, v71);
    v72 = v224;
    sub_1000124F8((uint64_t)v223, &qword_100157C78);
    v73 = v200;
    v74 = v67;
    if (!v72)
    {
      v75 = 0;
      v76 = 1;
      v77 = v204;
      v78 = (uint64_t)v199;
      goto LABEL_17;
    }
  }
  else
  {
    sub_1000124F8((uint64_t)v51, (uint64_t *)&unk_10015BA60);
    v73 = v200;
    v74 = v67;
  }
  v79 = v191;
  sub_100019E1C((uint64_t)v202, v191, (uint64_t *)&unk_10015BA60);
  v80 = v201;
  sub_100019E1C(v207, v201, (uint64_t *)&unk_10015BA60);
  v81 = v68((char *)v79, 1, v6);
  v78 = (uint64_t)v199;
  if (v81 == 1)
  {
    v82 = v80;
    v83 = v80;
    v84 = v190;
    sub_100019E1C(v82, v190, (uint64_t *)&unk_10015BA60);
    v85 = v68((char *)v84, 1, v6);
    v86 = v192;
    if (v85 == 1)
    {
      result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v206 + 112))(v223);
      v88 = v224;
      if (!v224)
      {
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }
      v89 = v225;
      sub_100004DE4(v223, v224);
      (*(void (**)(uint64_t, uint64_t))(v89 + 64))(v88, v89);
      sub_1000124F8(v201, (uint64_t *)&unk_10015BA60);
      sub_100005D08(v223);
      sub_1000124F8(v190, (uint64_t *)&unk_10015BA60);
      v77 = v204;
      v68 = v208;
    }
    else
    {
      sub_1000124F8(v83, (uint64_t *)&unk_10015BA60);
      v77 = v204;
      (*(void (**)(char *, uint64_t, uint64_t))(v204 + 32))(v86, v84, v6);
    }
    sub_1000124F8(v79, (uint64_t *)&unk_10015BA60);
  }
  else
  {
    sub_1000124F8(v80, (uint64_t *)&unk_10015BA60);
    v77 = v204;
    v86 = v192;
    (*(void (**)(char *, uint64_t, uint64_t))(v204 + 32))(v192, v79, v6);
  }
  sub_1000D4890(v73[18], v73[19], v73[20], v73[21], v70);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v86, v6);
  v76 = 0;
  v75 = 1;
LABEL_17:
  v74(v70, v76, 1, v6);
  sub_100019E1C(v70, v78, (uint64_t *)&unk_10015BA60);
  if (v68((char *)v78, 1, v6) == 1)
  {
    sub_1000124F8(v78, (uint64_t *)&unk_10015BA60);
    v90 = 1;
    v91 = v210;
  }
  else
  {
    v92 = v189;
    URL.deletingLastPathComponent()();
    v93 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
    v93(v78, v6);
    v91 = v210;
    sub_100086398(v210);
    v93((uint64_t)v92, v6);
    v90 = 0;
  }
  v201 = v6;
  v74(v91, v90, 1, v6);
  v94 = v73[68];
  if (v94)
  {
    v95 = v73[72];
    v96 = v75;
    v97 = v73[71];
    v98 = v73[70];
    v99 = v73[69];
    v223[0] = v73[68];
    v223[1] = v99;
    v223[2] = v98;
    v224 = v97;
    v225 = v95;
    v100 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v206 + 144);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v99);
    swift_bridgeObjectRetain(v98);
    swift_bridgeObjectRetain(v97);
    v101 = swift_bridgeObjectRetain(v95);
    v102 = v100(v101);
    v104 = v103;
    v105 = v209;
    swift_bridgeObjectRetain(v209);
    LODWORD(v199) = sub_1000ADE04(v102, v104, v105);
    swift_bridgeObjectRelease(v95);
    v106 = v97;
    v75 = v96;
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v98);
    swift_bridgeObjectRelease(v99);
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v104);
    swift_bridgeObjectRelease(v105);
  }
  else
  {
    LODWORD(v199) = 3;
    v105 = v209;
  }
  v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v208;
  v108 = (uint64_t)v198;
  v109 = (uint64_t)v197;
  v217[1] = 0;
  if (qword_10015E4C8 != -1)
    swift_once(&qword_10015E4C8, sub_10002C10C);
  v217[0] = qword_100175300;
  v110 = (uint64_t *)sub_10008F478();
  if (!*(_QWORD *)(v105 + 16))
  {
    v215 = 0u;
    v216 = 0u;
    v115 = (uint64_t)v195;
LABEL_36:
    sub_1000124F8((uint64_t)&v215, &qword_100158018);
LABEL_37:
    sub_100019E1C(v210, v115, (uint64_t *)&unk_10015BA60);
    goto LABEL_38;
  }
  v112 = *v110;
  v111 = v110[1];
  swift_bridgeObjectRetain(v111);
  v113 = sub_100005DE8(v112, v111);
  if ((v114 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(v105 + 56) + 32 * v113, (uint64_t)&v215);
  }
  else
  {
    v215 = 0u;
    v216 = 0u;
  }
  v115 = (uint64_t)v195;
  swift_bridgeObjectRelease(v111);
  if (!*((_QWORD *)&v216 + 1))
    goto LABEL_36;
  if ((swift_dynamicCast(&v222, &v215, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0
    || (v222 & 1) == 0)
  {
    goto LABEL_37;
  }
  sub_100019E1C(v210, v115, (uint64_t *)&unk_10015BA60);
  if (v75)
  {
    v116 = v185;
    sub_100019E1C(v115, v185, (uint64_t *)&unk_10015BA60);
    v117 = v107(v116, 1, v201);
    if ((_DWORD)v117 == 1)
    {
      sub_1000124F8(v115, (uint64_t *)&unk_10015BA60);
      v115 = v116;
    }
    else
    {
      v177 = URL.path.getter(v117);
      v178 = v116;
      v179 = v177;
      v181 = v180;
      (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v178, v201);
      sub_100032C6C(0x2F6D65747379532FLL, 0xE800000000000000, v179, v181);
      v182 = v181;
      v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v208;
      swift_bridgeObjectRelease(v182);
    }
  }
LABEL_38:
  sub_1000124F8(v115, (uint64_t *)&unk_10015BA60);
  v118 = sub_100039B14();
  sub_1000D3EB4((uint64_t)v217, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v218);
  v214[1] = v218;
  if (qword_10015E4E8 != -1)
    swift_once(&qword_10015E4E8, sub_10002C14C);
  v214[0] = qword_100175320;
  sub_100019E1C(v210, v109, (uint64_t *)&unk_10015BA60);
  v119 = v196;
  if (!v75)
  {
    sub_1000124F8(v109, (uint64_t *)&unk_10015BA60);
LABEL_45:
    v126 = sub_100005C88(&qword_100158C20);
    v127 = swift_allocObject(v126, 48, 7);
    *(_OWORD *)(v127 + 16) = xmmword_10010F050;
    v128 = sub_100091850();
    v130 = *(_QWORD *)v128;
    v129 = *((_QWORD *)v128 + 1);
    *(_QWORD *)(v127 + 32) = v130;
    *(_QWORD *)(v127 + 40) = v129;
    v131 = v206;
    v132 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v206 + 272);
    swift_bridgeObjectRetain(v129);
    LOBYTE(v132) = v132(v127);
    v133 = swift_bridgeObjectRelease(v127);
    if ((v132 & 1) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v131 + 208))(v133);
    goto LABEL_47;
  }
  sub_100019E1C(v109, v196, (uint64_t *)&unk_10015BA60);
  result = (_QWORD *)v107(v119, 1, v201);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  v120 = (_QWORD *)v200[12];
  v121 = swift_bridgeObjectRetain(v120);
  v122 = URL.path.getter(v121);
  v124 = v123;
  (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v119, v201);
  v125 = sub_100034320(v122, v124, v120);
  swift_bridgeObjectRelease(v120);
  swift_bridgeObjectRelease(v124);
  sub_1000124F8(v109, (uint64_t *)&unk_10015BA60);
  if ((v125 & 1) == 0)
    goto LABEL_45;
LABEL_47:
  v134 = (uint64_t)v205;
  sub_1000D3EB4((uint64_t)v214, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v219);
  v213[1] = v219;
  v135 = qword_100175320;
  if (qword_10015E4F0 != -1)
    swift_once(&qword_10015E4F0, sub_10002C15C);
  if (!v135)
  {
    if (!qword_100175328)
    {
      v135 = 0;
      goto LABEL_55;
    }
LABEL_53:
    v135 |= qword_100175328;
    goto LABEL_55;
  }
  if ((qword_100175328 & ~v135) != 0)
    goto LABEL_53;
LABEL_55:
  v213[0] = v135;
  sub_100019E1C(v134, v108, (uint64_t *)&unk_10015BA60);
  if ((v75 & 1) == 0)
    goto LABEL_58;
  v136 = v201;
  v137 = v108;
  v138 = v75;
  v139 = (_QWORD *)*sub_100026AEC();
  v140 = v137;
  v141 = v137;
  v142 = v188;
  sub_100019E1C(v141, v188, (uint64_t *)&unk_10015BA60);
  result = (_QWORD *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v208)(v142, 1, v136);
  if ((_DWORD)result == 1)
    goto LABEL_111;
  v143 = swift_bridgeObjectRetain(v139);
  v144 = URL.path.getter(v143);
  v146 = v145;
  (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v142, v136);
  sub_100034320(v144, v146, v139);
  swift_bridgeObjectRelease(v139);
  swift_bridgeObjectRelease(v146);
  v134 = (uint64_t)v205;
  v75 = v138;
  v108 = v140;
LABEL_58:
  sub_1000124F8(v108, (uint64_t *)&unk_10015BA60);
  sub_1000D3EB4((uint64_t)v213, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v220);
  v222 = v220;
  v212 = qword_100175328;
  v147 = (uint64_t *)sub_10008F49C();
  v148 = v209;
  if (*(_QWORD *)(v209 + 16))
  {
    v150 = *v147;
    v149 = v147[1];
    swift_bridgeObjectRetain(v149);
    v151 = sub_100005DE8(v150, v149);
    v152 = (uint64_t)v194;
    if ((v153 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(v148 + 56) + 32 * v151, (uint64_t)&v215);
    }
    else
    {
      v215 = 0u;
      v216 = 0u;
    }
    swift_bridgeObjectRelease(v149);
    if (*((_QWORD *)&v216 + 1))
    {
      swift_dynamicCast(&v221, &v215, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
      goto LABEL_66;
    }
  }
  else
  {
    v215 = 0u;
    v216 = 0u;
    v152 = (uint64_t)v194;
  }
  sub_1000124F8((uint64_t)&v215, &qword_100158018);
LABEL_66:
  sub_1000D3EB4((uint64_t)&v212, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v221);
  v212 = v221;
  if (qword_10015E4D0 != -1)
    swift_once(&qword_10015E4D0, sub_10002C11C);
  v211 = qword_100175308;
  v154 = (uint64_t *)sub_10008F484();
  v155 = v209;
  if (*(_QWORD *)(v209 + 16))
  {
    v157 = *v154;
    v156 = v154[1];
    swift_bridgeObjectRetain(v156);
    v158 = sub_100005DE8(v157, v156);
    if ((v159 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(v155 + 56) + 32 * v158, (uint64_t)&v215);
    }
    else
    {
      v215 = 0u;
      v216 = 0u;
    }
    swift_bridgeObjectRelease(v156);
  }
  else
  {
    v215 = 0u;
    v216 = 0u;
  }
  swift_bridgeObjectRelease(v209);
  if (!*((_QWORD *)&v216 + 1))
  {
    sub_1000124F8((uint64_t)&v215, &qword_100158018);
    goto LABEL_79;
  }
  if (!swift_dynamicCast(&v222, &v215, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
  {
LABEL_79:
    v161 = v206;
    sub_100019E1C(v210, v152, (uint64_t *)&unk_10015BA60);
    goto LABEL_80;
  }
  v160 = v222;
  sub_100019E1C(v210, v152, (uint64_t *)&unk_10015BA60);
  v161 = v206;
  if ((v160 & 1) == 0)
  {
LABEL_80:
    v163 = type metadata accessor for KernelExtension(0);
    if (!swift_dynamicCastClass(v161, v163) || ((*(uint64_t (**)(void))(*(_QWORD *)v161 + 208))() & 1) != 0)
    {
      sub_100019E1C(v152, v203, (uint64_t *)&unk_10015BA60);
LABEL_83:
      v162 = (char)v199;
LABEL_84:
      sub_1000124F8(v203, (uint64_t *)&unk_10015BA60);
      goto LABEL_85;
    }
    sub_100019E1C(v152, v203, (uint64_t *)&unk_10015BA60);
    if (!v75)
      goto LABEL_83;
    v166 = v187;
    sub_100019E1C(v203, v187, (uint64_t *)&unk_10015BA60);
    result = (_QWORD *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v208)(v166, 1, v201);
    if ((_DWORD)result != 1)
    {
      v167 = URL.path.getter(result);
      v169 = v168;
      v170 = *(void (**)(uint64_t, uint64_t))(v204 + 8);
      v170(v166, v201);
      v171 = (uint64_t)v186;
      if (v167 == 0xD000000000000013 && v169 == 0x8000000100122FE0)
      {
        swift_bridgeObjectRelease(0x8000000100122FE0);
        sub_100019E1C(v203, v171, (uint64_t *)&unk_10015BA60);
LABEL_102:
        sub_1000124F8(v171, (uint64_t *)&unk_10015BA60);
        v134 = (uint64_t)v205;
        goto LABEL_83;
      }
      v172 = _stringCompareWithSmolCheck(_:_:expecting:)(v167, v169, 0xD000000000000013, 0x8000000100122FE0, 0);
      swift_bridgeObjectRelease(v169);
      sub_100019E1C(v203, v171, (uint64_t *)&unk_10015BA60);
      if ((v172 & 1) != 0)
        goto LABEL_102;
      v173 = v184;
      sub_100019E1C(v171, v184, (uint64_t *)&unk_10015BA60);
      result = (_QWORD *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v208)(v173, 1, v201);
      if ((_DWORD)result != 1)
      {
        v174 = URL.path.getter(result);
        v176 = v175;
        v170(v173, v201);
        if (v174 == 0xD00000000000001ALL && v176 == 0x8000000100123000)
        {
          swift_bridgeObjectRelease(0x8000000100123000);
        }
        else
        {
          _stringCompareWithSmolCheck(_:_:expecting:)(v174, v176, 0xD00000000000001ALL, 0x8000000100123000, 0);
          swift_bridgeObjectRelease(v176);
        }
        v134 = (uint64_t)v205;
        v162 = (char)v199;
        sub_1000124F8(v171, (uint64_t *)&unk_10015BA60);
        goto LABEL_84;
      }
LABEL_114:
      __break(1u);
      return result;
    }
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  v162 = (char)v199;
LABEL_85:
  sub_1000124F8(v152, (uint64_t *)&unk_10015BA60);
  sub_1000D3EB4((uint64_t)&v211, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v222);
  v221 = v222;
  if (qword_10015E4D8 != -1)
    swift_once(&qword_10015E4D8, sub_10002C12C);
  v220 = qword_100175310;
  if (v162 != 3)
  {
    LOBYTE(v215) = v162;
    LOBYTE(v219) = 0;
    v164 = sub_10003A2D0();
    dispatch thunk of static Equatable.== infix(_:_:)(&v215, &v219, &type metadata for ExtensionManager.Settings.ExtensionFilter.FilterMatch, v164);
  }
  sub_1000D3EB4((uint64_t)&v220, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v215);
  v221 = v215;
  if (qword_10015E4E0 != -1)
    swift_once(&qword_10015E4E0, sub_10002C13C);
  v220 = qword_100175318;
  if (v162 != 3)
  {
    LOBYTE(v222) = v162;
    LOBYTE(v219) = 1;
    v165 = sub_10003A2D0();
    dispatch thunk of static Equatable.== infix(_:_:)(&v222, &v219, &type metadata for ExtensionManager.Settings.ExtensionFilter.FilterMatch, v165);
  }
  sub_1000D3EB4((uint64_t)&v220, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v222);
  v221 = v222;
  if (qword_10015E500 != -1)
    swift_once(&qword_10015E500, sub_10002C1BC);
  v220 = qword_100175338;
  sub_1000D3EB4((uint64_t)&v220, (uint64_t)&type metadata for RealizedInfo.Flags, v118, (char *)&v215);
  sub_1000124F8(v207, (uint64_t *)&unk_10015BA60);
  sub_1000124F8(v210, (uint64_t *)&unk_10015BA60);
  sub_1000124F8(v134, (uint64_t *)&unk_10015BA60);
  sub_1000124F8((uint64_t)v202, (uint64_t *)&unk_10015BA60);
  return (_QWORD *)v215;
}

_QWORD *sub_100038E40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v15 = a1[4];
  v16 = a1[6];
  v3 = a1[8];
  v2 = a1[9];
  v4 = a1[10];
  v5 = a1[11];
  v6 = a1[12];
  v7 = a1[14];
  v12 = a1[2];
  v13 = a1[17];
  v30 = a1[20];
  v28 = a1[21];
  v35 = a1[19];
  v36 = a1[23];
  v25 = a1[27];
  v26 = a1[26];
  v23 = a1[31];
  v24 = a1[29];
  v21 = a1[35];
  v22 = a1[33];
  v19 = a1[38];
  v20 = a1[37];
  v17 = a1[40];
  v18 = a1[39];
  v14 = a1[41];
  v8 = a1[43];
  v9 = a1[45];
  v10 = a1[47];
  v27 = a1[49];
  v29 = a1[51];
  v31 = a1[53];
  v34 = a1[54];
  v44 = a1[57];
  v45 = a1[56];
  v42 = a1[59];
  v43 = a1[58];
  v40 = a1[61];
  v41 = a1[60];
  v39 = a1[62];
  v37 = a1[55];
  v38 = a1[63];
  v32 = a1[65];
  v33 = a1[64];
  v50 = a1[69];
  v51 = a1[68];
  v48 = a1[71];
  v49 = a1[70];
  v46 = a1[67];
  v47 = a1[72];
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  sub_1000390EC(v13);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v37);
  sub_10003910C(v45, v44, v43, v42, v41, v40, v39, v38, v33, v32);
  swift_bridgeObjectRelease(v46);
  sub_100039184(v51, v50, v49, v48, v47);
  return a1;
}

unint64_t sub_1000390EC(unint64_t result)
{
  if (result != 5)
    return sub_1000390FC(result);
  return result;
}

unint64_t sub_1000390FC(unint64_t result)
{
  if (result >= 5)
    return swift_release(result);
  return result;
}

uint64_t sub_10003910C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a9);
    return swift_bridgeObjectRelease(a10);
  }
  return result;
}

uint64_t sub_100039184(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

uint64_t sub_1000391DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  switch(a10)
  {
    case 0:
    case 30:
    case 51:
      goto LABEL_3;
    case 1:
    case 2:
    case 4:
    case 5:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
      goto LABEL_2;
    case 3:
      goto LABEL_9;
    case 6:
    case 14:
    case 42:
      swift_bridgeObjectRelease(a2);
      result = a4;
      goto LABEL_3;
    case 8:
      result = a3;
      goto LABEL_3;
    case 13:
      swift_bridgeObjectRelease(a2);
      sub_100021610(a4, a5);
      swift_bridgeObjectRelease(a9);
      result = a7;
      goto LABEL_3;
    case 15:
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a4);
      result = a6;
      goto LABEL_3;
    case 18:
      result = a2;
LABEL_9:
      swift_bridgeObjectRelease(result);
      result = a3;
      goto LABEL_3;
    case 26:
      swift_bridgeObjectRelease(result);
LABEL_2:
      result = a2;
LABEL_3:
      result = swift_bridgeObjectRelease(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000392C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005C88(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003930C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100033DC8(a1, a2, a3, v3);
}

_QWORD *sub_100039314(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    result = (_QWORD *)sub_1000109E8(v2);
    v5 = (uint64_t)result;
    v7 = v6;
    v8 = 0;
    v9 = v2 + 64;
    v26 = v2 + 80;
    v27 = v3;
    v28 = v2;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v2 + 32))
    {
      v11 = (unint64_t)v5 >> 6;
      if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(v2 + 36) != v7)
        goto LABEL_23;
      v30 = v8;
      v12 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v5);
      v13 = *v12;
      v14 = v12[1];
      v15 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5);
      swift_bridgeObjectRetain(v14);
      swift_retain(v15);
      v16 = a2(v13, v14, v15);
      swift_release(v15);
      v17 = swift_bridgeObjectRelease(v14);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v18 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
      v19 = v16;
      v2 = v28;
      v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v19);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v20);
      v10 = 1 << *(_BYTE *)(v28 + 32);
      if (v5 >= v10)
        goto LABEL_24;
      v21 = *(_QWORD *)(v9 + 8 * v11);
      if ((v21 & (1 << v5)) == 0)
        goto LABEL_25;
      if (*(_DWORD *)(v28 + 36) != v7)
        goto LABEL_26;
      v22 = v21 & (-2 << (v5 & 0x3F));
      if (v22)
      {
        v10 = __clz(__rbit64(v22)) | v5 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = v11 + 1;
        v24 = (unint64_t)(v10 + 63) >> 6;
        if (v11 + 1 < v24)
        {
          v25 = *(_QWORD *)(v9 + 8 * v23);
          if (v25)
          {
LABEL_18:
            v10 = __clz(__rbit64(v25)) + (v23 << 6);
          }
          else
          {
            while (v24 - 2 != v11)
            {
              v25 = *(_QWORD *)(v26 + 8 * v11++);
              if (v25)
              {
                v23 = v11 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v8 = v30 + 1;
      v5 = v10;
      if (v30 + 1 == v27)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for RealizedKernelCollection(uint64_t a1)
{
  return sub_100017D70(a1, (uint64_t *)&unk_10015ECA0, (uint64_t)&nominal type descriptor for RealizedKernelCollection);
}

uint64_t sub_10003954C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100039570()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000395A4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;

  sub_10003242C(a1, a2, a3 & 1, v3[2], v3[3], v3[4]);
  return 2;
}

BOOL sub_1000395C8(_QWORD *a1, _QWORD *a2, char a3)
{
  unint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  char *isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD v39[6];
  uint64_t v40[5];
  char v41;
  uint64_t v42[5];
  char v43;
  _BYTE v44[56];

  v7 = (uint64_t *)a1[3];
  v8 = a2[3];
  sub_10003A1E0((uint64_t *)(v8 + 24), (uint64_t)v44);
  sub_10003A1E0(v7 + 3, (uint64_t)v40);
  sub_10003A21C((uint64_t)v44, (uint64_t)v42);
  if (v41)
  {
    if (v41 != 1)
    {
      sub_10003A258(v42);
      v13 = v40;
      goto LABEL_17;
    }
    sub_10003A1E0(v40, (uint64_t)v39);
    v9 = v39[0];
    if (v43 == 1)
    {
      v10 = v42[0];
      v3 = sub_1000D4174(*(unsigned __int8 *)(v39[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind), *(unsigned __int8 *)(v42[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
      swift_release(v9);
      swift_release(v10);
      sub_10003A258(v40);
      if ((v3 & 1) != 0)
        return 1;
      if ((a3 & 1) != 0)
        goto LABEL_6;
LABEL_19:
      v12 = _swiftEmptyArrayStorage;
      goto LABEL_20;
    }
    swift_release(v39[0]);
  }
  if (!v43)
  {
    if (v41 != 1)
      goto LABEL_18;
    swift_release(v40[0]);
    v13 = v42;
LABEL_17:
    sub_10003A258(v13);
    return 1;
  }
  if (v43 != 1)
  {
    sub_10003A258(v42);
    v14 = v40;
    goto LABEL_31;
  }
  sub_10003A1E0(v42, (uint64_t)v39);
  swift_release(v39[0]);
  if (!v41)
  {
    sub_10003A258(v40);
    v14 = v42;
LABEL_31:
    sub_10003A258(v14);
    return 0;
  }
LABEL_18:
  sub_1000124F8((uint64_t)v40, &qword_100158C00);
  if ((a3 & 1) == 0)
    goto LABEL_19;
LABEL_6:
  v11 = sub_100005C88(&qword_100158C08);
  v12 = (_QWORD *)swift_allocObject(v11, 40, 7);
  *((_OWORD *)v12 + 1) = xmmword_10010F050;
  if (qword_10015E490 != -1)
    swift_once(&qword_10015E490, sub_10002BF1C);
  v12[4] = qword_1001752C8;
LABEL_20:
  if (qword_10015E470 != -1)
    swift_once(&qword_10015E470, sub_10002BE5C);
  v16 = qword_1001752A8;
  if (qword_10015E450 != -1)
    swift_once(&qword_10015E450, sub_10002BD9C);
  v17 = qword_100175288;
  v18 = qword_10015E4D8;
  if (qword_10015E4D8 != -1)
    swift_once(&qword_10015E4D8, sub_10002C12C);
  v19 = (char *)v12[2];
  v20 = (int64_t)(v19 + 3);
  if (__OFADD__(v19, 3))
  {
    __break(1u);
LABEL_59:
    v19 = sub_100035380((char *)(v18 > 1), v20, 1, v19);
    v18 = *((_QWORD *)v19 + 3);
    v23 = v18 >> 1;
    goto LABEL_38;
  }
  v38 = v8;
  v8 = qword_100175310;
  v21 = swift_bridgeObjectRetain(v12);
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(v21);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && (v18 = v12[3], v23 = v18 >> 1, (uint64_t)(v18 >> 1) >= v20))
  {
    v19 = (char *)v12;
  }
  else
  {
    if ((uint64_t)v19 <= v20)
      v24 = (int64_t)(v19 + 3);
    else
      v24 = (int64_t)v19;
    v19 = sub_100035380(isUniquelyReferenced_nonNull_native, v24, 1, (char *)v12);
    v18 = *((_QWORD *)v19 + 3);
    v23 = v18 >> 1;
  }
  v3 = *((_QWORD *)v19 + 2);
  v20 = v3 + 1;
  if (v23 <= v3)
    goto LABEL_59;
LABEL_38:
  *((_QWORD *)v19 + 2) = v20;
  *(_QWORD *)&v19[8 * v3 + 32] = v16;
  v25 = v3 + 2;
  if ((uint64_t)v23 < (uint64_t)(v3 + 2))
  {
    v37 = sub_100035380((char *)(v18 > 1), v3 + 2, 1, v19);
    v25 = v3 + 2;
    v19 = v37;
  }
  *((_QWORD *)v19 + 2) = v25;
  *(_QWORD *)&v19[8 * v20 + 32] = v17;
  v27 = *((_QWORD *)v19 + 2);
  v26 = *((_QWORD *)v19 + 3);
  if (v27 >= v26 >> 1)
    v19 = sub_100035380((char *)(v26 > 1), v27 + 1, 1, v19);
  *((_QWORD *)v19 + 2) = v27 + 1;
  *(_QWORD *)&v19[8 * v27 + 32] = v8;
  v28 = swift_bridgeObjectRelease(v12);
  v29 = *((_QWORD *)v19 + 2);
  if (!v29)
  {
LABEL_50:
    v33 = swift_bridgeObjectRelease(v19);
    if ((*((_BYTE *)a1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex + 8) & 1) != 0
      || (*((_BYTE *)a2 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex + 8) & 1) != 0)
    {
      goto LABEL_52;
    }
    v35 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex);
    v36 = *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex);
    if (v35 < v36)
      return 1;
    if (v36 >= v35)
    {
LABEL_52:
      v34 = (*(uint64_t (**)(uint64_t))(*v7 + 192))(v33);
      return (*(uint64_t (**)(void))(*(_QWORD *)v38 + 192))() < v34;
    }
    return 0;
  }
  v30 = 0;
  v31 = *(uint64_t (**)(void))(*a1 + 168);
  while (1)
  {
    v32 = *(_QWORD *)&v19[8 * v30 + 32];
    if ((v32 & ~((uint64_t (*)(uint64_t))v31)(v28)) == 0
      && (v32 & ~(*(uint64_t (**)(void))(*a2 + 168))()) != 0)
    {
      break;
    }
    v28 = (*(uint64_t (**)(void))(*a2 + 168))();
    if ((v32 & ~v28) == 0)
    {
      v28 = v31();
      if ((v32 & ~v28) != 0)
      {
        swift_bridgeObjectRelease(v19);
        return 0;
      }
    }
    if (v29 == ++v30)
      goto LABEL_50;
  }
  swift_bridgeObjectRelease(v19);
  return 1;
}

unint64_t sub_100039A8C()
{
  unint64_t result;

  result = qword_100158940;
  if (!qword_100158940)
  {
    result = swift_getWitnessTable(&unk_10011A540, &type metadata for CodeSigningTeam);
    atomic_store(result, (unint64_t *)&qword_100158940);
  }
  return result;
}

unint64_t sub_100039AD0()
{
  unint64_t result;

  result = qword_100158950;
  if (!qword_100158950)
  {
    result = swift_getWitnessTable(&unk_10011B4F8, &type metadata for OSExtension.Location);
    atomic_store(result, (unint64_t *)&qword_100158950);
  }
  return result;
}

unint64_t sub_100039B14()
{
  unint64_t result;

  result = qword_100158958;
  if (!qword_100158958)
  {
    result = swift_getWitnessTable(&unk_10010FEB4, &type metadata for RealizedInfo.Flags);
    atomic_store(result, (unint64_t *)&qword_100158958);
  }
  return result;
}

unint64_t sub_100039B58()
{
  unint64_t result;

  result = qword_100158960;
  if (!qword_100158960)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100158960);
  }
  return result;
}

unint64_t sub_100039BA0()
{
  unint64_t result;

  result = qword_100158968;
  if (!qword_100158968)
  {
    result = swift_getWitnessTable(&unk_10010FFDC, &type metadata for RealizedInfo.Flags);
    atomic_store(result, (unint64_t *)&qword_100158968);
  }
  return result;
}

unint64_t sub_100039BE8()
{
  unint64_t result;

  result = qword_100158970;
  if (!qword_100158970)
  {
    result = swift_getWitnessTable(&unk_10010FF14, &type metadata for RealizedInfo.Flags);
    atomic_store(result, (unint64_t *)&qword_100158970);
  }
  return result;
}

unint64_t sub_100039C30()
{
  unint64_t result;

  result = qword_100158978;
  if (!qword_100158978)
  {
    result = swift_getWitnessTable(&unk_100110014, &type metadata for RealizedInfo.Flags);
    atomic_store(result, (unint64_t *)&qword_100158978);
  }
  return result;
}

unint64_t sub_100039C78()
{
  unint64_t result;

  result = qword_100158980;
  if (!qword_100158980)
  {
    result = swift_getWitnessTable(&unk_10011003C, &type metadata for RealizedInfo.Flags);
    atomic_store(result, (unint64_t *)&qword_100158980);
  }
  return result;
}

unint64_t sub_100039CC0()
{
  unint64_t result;

  result = qword_100158988;
  if (!qword_100158988)
  {
    result = swift_getWitnessTable(&unk_10011006C, &type metadata for RealizedInfo.LoadInfo.LoadState);
    atomic_store(result, (unint64_t *)&qword_100158988);
  }
  return result;
}

uint64_t sub_100039D04()
{
  return sub_100012534(&qword_100158990, type metadata accessor for RealizedInfo, (uint64_t)&unk_10011016C);
}

uint64_t sub_100039D30()
{
  return sub_100012534(&qword_100158998, type metadata accessor for RealizedKernelCollection, (uint64_t)&unk_100110144);
}

uint64_t sub_100039D5C()
{
  return type metadata accessor for RealizedInfo(0);
}

void sub_100039D64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[2] = "(";
  v6[3] = &unk_1001102B0;
  v6[4] = "(";
  v6[5] = &unk_1001102C8;
  sub_100039E64(319, &qword_1001589C8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v6[6] = *(_QWORD *)(v2 - 8) + 64;
    sub_100039E64(319, (unint64_t *)&qword_1001589D0, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      v6[8] = &unk_1001102E0;
      v6[9] = &unk_1001102F8;
      v6[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 11, v6, a1 + 80);
    }
  }
}

void sub_100039E64(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

ValueMetadata *type metadata accessor for RealizedInfo.Flags()
{
  return &type metadata for RealizedInfo.Flags;
}

uint64_t destroy for RealizedInfo.LoadInfo(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s10driverkitd12RealizedInfoC8LoadInfoVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for RealizedInfo.LoadInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for RealizedInfo.LoadInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealizedInfo.LoadInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RealizedInfo.LoadInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RealizedInfo.LoadInfo()
{
  return &type metadata for RealizedInfo.LoadInfo;
}

uint64_t storeEnumTagSinglePayload for RealizedInfo.LoadInfo.LoadState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10003A0A4 + 4 * byte_10010FEAE[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003A0D8 + 4 * byte_10010FEA9[v4]))();
}

uint64_t sub_10003A0D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A0E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003A0E8);
  return result;
}

uint64_t sub_10003A0F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003A0FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10003A100(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A108(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RealizedInfo.LoadInfo.LoadState()
{
  return &type metadata for RealizedInfo.LoadInfo.LoadState;
}

uint64_t sub_10003A124()
{
  return type metadata accessor for RealizedKernelCollection(0);
}

void sub_10003A12C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_100039E64(319, &qword_1001589C8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

uint64_t sub_10003A1E0(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for OSExtension.Location(a2, a1);
  return a2;
}

uint64_t sub_10003A21C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for OSExtension.Location(a2, a1);
  return a2;
}

_QWORD *sub_10003A258(_QWORD *a1)
{
  destroy for OSExtension.Location(a1);
  return a1;
}

unint64_t sub_10003A28C()
{
  unint64_t result;

  result = qword_100158C18;
  if (!qword_100158C18)
  {
    result = swift_getWitnessTable(&unk_10010FC34, &type metadata for ExceptionList.ExceptionType);
    atomic_store(result, (unint64_t *)&qword_100158C18);
  }
  return result;
}

unint64_t sub_10003A2D0()
{
  unint64_t result;

  result = qword_100158C28;
  if (!qword_100158C28)
  {
    result = swift_getWitnessTable(&unk_1001143E0, &type metadata for ExtensionManager.Settings.ExtensionFilter.FilterMatch);
    atomic_store(result, (unint64_t *)&qword_100158C28);
  }
  return result;
}

unint64_t sub_10003A314()
{
  unint64_t result;

  result = qword_100158C40;
  if (!qword_100158C40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100158C40);
  }
  return result;
}

uint64_t sub_10003A35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_10003A3D4(v10, v7, v8);
}

uint64_t sub_10003A3D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_100158C48);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_10003A440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100158C48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t sub_10003A48C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = sub_1000122F8();
  v1 = swift_allocError(&type metadata for KMError, v0, 0, 0);
  *(_QWORD *)v2 = 0xD000000000000033;
  *(_QWORD *)(v2 + 8) = 0x8000000100123190;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0;
  *(_BYTE *)(v2 + 72) = 50;
  return swift_willThrow(v1);
}

uint64_t sub_10003A528()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

unint64_t sub_10003A550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  id v7;
  unint64_t result;
  unint64_t v9;

  v7 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain(a2);
  result = (unint64_t)sub_10003A6DC(a1, a2, 0);
  if (!v3)
  {
    v9 = result;
    result = sub_10003A7B4();
    a3[3] = result;
    a3[4] = (unint64_t)&off_10014A0B0;
    *a3 = v9;
  }
  return result;
}

void sub_10003A5D8(void (*a1)(_QWORD *))
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  unint64_t v6;
  id v7;
  _QWORD v8[5];

  v3 = objc_msgSend((id)objc_opt_self(LSApplicationRecord), "enumeratorWithOptions:", 0);
  v4 = objc_msgSend(v3, "nextObject");
  if (v4)
  {
    v5 = v4;
    v6 = sub_10003A7B4();
    while (1)
    {
      v8[3] = v6;
      v8[4] = &off_10014A0B0;
      v8[0] = v5;
      v7 = v5;
      a1(v8);
      if (v1)
        break;

      sub_100005D08(v8);
      v5 = objc_msgSend(v3, "nextObject");
      if (!v5)
        goto LABEL_5;
    }

    sub_100005D08(v8);
  }
  else
  {
LABEL_5:

  }
}

id sub_10003A6DC(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  return v7;
}

unint64_t sub_10003A7B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158C50;
  if (!qword_100158C50)
  {
    v1 = objc_opt_self(LSApplicationRecord);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100158C50);
  }
  return result;
}

uint64_t type metadata accessor for NullLaunchServices()
{
  return objc_opt_self(_TtC10driverkitd18NullLaunchServices);
}

uint64_t type metadata accessor for RealLaunchServices()
{
  return objc_opt_self(_TtC10driverkitd18RealLaunchServices);
}

uint64_t sub_10003A830()
{
  return sub_10003A528();
}

uint64_t sub_10003A844()
{
  return sub_10001379C();
}

uint64_t sub_10003A85C(uint64_t a1, uint64_t a2)
{
  return sub_10003A868(a1, a2, (uint64_t)&off_100147228);
}

uint64_t sub_10003A868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_10003A9CC(v10, v7, v8);
}

uint64_t sub_10003A8E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a1[3];
  v3 = a1[4];
  sub_100004DE4(a1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v7 = StaticString.description.getter(v4, v5, v6);
  v9 = v8;
  v10 = a1[3];
  v11 = a1[4];
  sub_100004DE4(a1, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  v15 = StaticString.description.getter(v12, v13, v14);
  v17 = v16;
  v18 = String.utf8CString.getter(v7);
  swift_bridgeObjectRelease(v9);
  v19 = String.utf8CString.getter(v15);
  swift_bridgeObjectRelease(v17);
  v20 = j___os_feature_enabled_impl(v18 + 32, v19 + 32);
  swift_release(v18);
  swift_release(v19);
  return v20;
}

uint64_t sub_10003A9C0(uint64_t a1, uint64_t a2)
{
  return sub_10003A868(a1, a2, (uint64_t)&off_100147250);
}

uint64_t sub_10003A9CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_100158DA8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_10003AA38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100158DA8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t type metadata accessor for RealFeatureFlagsClient()
{
  return objc_opt_self(_TtC10driverkitd22RealFeatureFlagsClient);
}

uint64_t type metadata accessor for RestoreOSFeatureFlagsClient()
{
  return objc_opt_self(_TtC10driverkitd27RestoreOSFeatureFlagsClient);
}

unint64_t sub_10003AAC8()
{
  return sub_10003AAFC((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_10003AAFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_100005C88(&qword_100157F00);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_100005C88(&qword_100157F08);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10004066C(v13, (uint64_t)v5);
    result = sub_10003DBEC((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = type metadata accessor for DriverBinEntry(0);
    result = sub_10001244C(v10, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17, type metadata accessor for DriverBinEntry);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10003ACAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_bridgeObjectRetain(a1);
  v3 = sub_10003ACF8(v2);
  swift_bridgeObjectRelease(a1);
  return v3;
}

uint64_t sub_10003ACF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v3 = type metadata accessor for DriverBinEntry(0);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  v4 = __chkstk_darwin(v3);
  v39 = (uint64_t)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v38 = (uint64_t)v33 - v6;
  v7 = type metadata accessor for URL(0);
  v43 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (!v11)
    return (uint64_t)v12;
  v33[1] = v1;
  v44 = _swiftEmptyArrayStorage;
  v42 = v8;
  sub_10003DEB4(0, v11, 0);
  result = sub_1000109E8(v42);
  v15 = result;
  v16 = v42;
  v17 = 0;
  v18 = v42 + 64;
  v19 = *(_BYTE *)(v42 + 32);
  v33[0] = v42 + 88;
  v36 = v10;
  v37 = v7;
  v34 = v14;
  v35 = v42 + 64;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << v19)
  {
    v21 = (unint64_t)v15 >> 6;
    if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(v16 + 36) != (_DWORD)v14)
      goto LABEL_28;
    v22 = v38;
    sub_100012408(*(_QWORD *)(v16 + 56) + *(_QWORD *)(v40 + 72) * v15, v38, type metadata accessor for DriverBinEntry);
    v23 = v22;
    v24 = v39;
    sub_10001244C(v23, v39, type metadata accessor for DriverBinEntry);
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v10, v24 + *(int *)(v41 + 28), v7);
    sub_100012490(v24, type metadata accessor for DriverBinEntry);
    v12 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
    {
      sub_10003DEB4(0, v12[2] + 1, 1);
      v12 = v44;
    }
    v26 = v12[2];
    v25 = v12[3];
    if (v26 >= v25 >> 1)
    {
      sub_10003DEB4(v25 > 1, v26 + 1, 1);
      v12 = v44;
    }
    v12[2] = v26 + 1;
    v27 = (unint64_t)v12
        + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))
        + *(_QWORD *)(v43 + 72) * v26;
    v10 = v36;
    v7 = v37;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v43 + 32))(v27, v36, v37);
    v44 = v12;
    v16 = v42;
    v19 = *(_BYTE *)(v42 + 32);
    v20 = 1 << v19;
    if (v15 >= 1 << v19)
      goto LABEL_29;
    v18 = v35;
    v28 = *(_QWORD *)(v35 + 8 * v21);
    if ((v28 & (1 << v15)) == 0)
      goto LABEL_30;
    LODWORD(v14) = v34;
    if (*(_DWORD *)(v42 + 36) != (_DWORD)v34)
      goto LABEL_31;
    v29 = v28 & (-2 << (v15 & 0x3F));
    if (v29)
    {
      v20 = __clz(__rbit64(v29)) | v15 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = v21 + 1;
      v31 = (v20 + 63) >> 6;
      if (v21 + 1 < v31)
      {
        v32 = *(_QWORD *)(v35 + 8 * v30);
        if (!v32)
        {
          v30 = v21 + 2;
          if (v21 + 2 >= v31)
            goto LABEL_4;
          v32 = *(_QWORD *)(v35 + 8 * v30);
          if (!v32)
          {
            while (v31 - 3 != v21)
            {
              v32 = *(_QWORD *)(v33[0] + 8 * v21++);
              if (v32)
              {
                v30 = v21 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        v20 = __clz(__rbit64(v32)) + (v30 << 6);
      }
    }
LABEL_4:
    ++v17;
    v15 = v20;
    if (v17 == v11)
      return (uint64_t)v12;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10003B060(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  void *object;
  Swift::String v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  _QWORD *v51;

  v3 = type metadata accessor for DriverBinEntry(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  v4 = __chkstk_darwin(v3);
  v46 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v45 = (uint64_t)v39 - v6;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (!v7)
    return (uint64_t)v8;
  v39[1] = v1;
  v51 = _swiftEmptyArrayStorage;
  sub_10000C958(0, v7, 0);
  result = sub_1000109E8(a1);
  v11 = result;
  v12 = 0;
  v13 = a1 + 64;
  v40 = a1 + 80;
  v41 = v7;
  v43 = a1 + 64;
  v44 = a1;
  v42 = v10;
  v14 = (uint64_t)v46;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(_BYTE *)(a1 + 32))
  {
    v17 = (unint64_t)v11 >> 6;
    if ((*(_QWORD *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
      goto LABEL_26;
    v49 = v12;
    v18 = v45;
    sub_100012408(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v47 + 72) * v11, v45, type metadata accessor for DriverBinEntry);
    sub_10001244C(v18, v14, type metadata accessor for DriverBinEntry);
    v50[0] = 0;
    v50[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(v50[1]);
    strcpy((char *)v50, "Staged bundle ");
    HIBYTE(v50[1]) = -18;
    v19 = v48;
    v20 = type metadata accessor for URL(0);
    v21 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
    object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    v24._countAndFlagsBits = 0x70706120726F6620;
    v24._object = (void *)0xE900000000000020;
    String.append(_:)(v24);
    v25 = (uint64_t *)(v14 + *(int *)(v19 + 20));
    v26 = *v25;
    v27 = (void *)v25[1];
    swift_bridgeObjectRetain(v27);
    v28._countAndFlagsBits = v26;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v27);
    v29 = v50[0];
    v30 = v50[1];
    sub_100012490(v14, type metadata accessor for DriverBinEntry);
    v8 = v51;
    result = swift_isUniquelyReferenced_nonNull_native(v51);
    if ((result & 1) == 0)
    {
      result = sub_10000C958(0, v8[2] + 1, 1);
      v8 = v51;
    }
    v32 = v8[2];
    v31 = v8[3];
    if (v32 >= v31 >> 1)
    {
      result = sub_10000C958(v31 > 1, v32 + 1, 1);
      v8 = v51;
    }
    v8[2] = v32 + 1;
    v33 = &v8[2 * v32];
    v33[4] = v29;
    v33[5] = v30;
    a1 = v44;
    v15 = 1 << *(_BYTE *)(v44 + 32);
    if (v11 >= v15)
      goto LABEL_27;
    v13 = v43;
    v34 = *(_QWORD *)(v43 + 8 * v17);
    if ((v34 & (1 << v11)) == 0)
      goto LABEL_28;
    LODWORD(v10) = v42;
    if (*(_DWORD *)(v44 + 36) != (_DWORD)v42)
      goto LABEL_29;
    v35 = v34 & (-2 << (v11 & 0x3F));
    if (v35)
    {
      v15 = __clz(__rbit64(v35)) | v11 & 0xFFFFFFFFFFFFFFC0;
      v16 = v41;
    }
    else
    {
      v36 = v17 + 1;
      v37 = (unint64_t)(v15 + 63) >> 6;
      v16 = v41;
      if (v17 + 1 < v37)
      {
        v38 = *(_QWORD *)(v43 + 8 * v36);
        if (v38)
        {
LABEL_22:
          v15 = __clz(__rbit64(v38)) + (v36 << 6);
        }
        else
        {
          while (v37 - 2 != v17)
          {
            v38 = *(_QWORD *)(v40 + 8 * v17++);
            if (v38)
            {
              v36 = v17 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v12 = v49 + 1;
    v11 = v15;
    if (v49 + 1 == v16)
      return (uint64_t)v8;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10003B410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  char v10;
  char v11;
  uint64_t v12;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  for (result = UUID.init()(v6);
        *(_QWORD *)(a1 + 16);
        result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4))
  {
    swift_bridgeObjectRetain(a1);
    sub_10003DBEC(a2);
    v11 = v10;
    result = swift_bridgeObjectRelease(a1);
    if ((v11 & 1) == 0)
      break;
    UUID.init()(result);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  }
  return result;
}

uint64_t sub_10003B4E0(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    sub_10003DBEC(a1);
    v5 = v4;
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_10003B530(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  Swift::String v20;
  void *object;
  unint64_t v22;
  unint64_t v23;

  v3 = sub_100005C88(&qword_100158EF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v22 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v22 - v11, a1, v6);
  v14 = *v1;
  if (*(_QWORD *)(v14 + 16)
    && (swift_bridgeObjectRetain(v14),
        sub_10003DBEC((uint64_t)v12),
        v16 = v15,
        swift_bridgeObjectRelease(v14),
        (v16 & 1) != 0))
  {
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease(v23);
    v22 = 0xD00000000000002DLL;
    v23 = 0x80000001001232B0;
    v19 = sub_100012534(&qword_100158EF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v19);
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v22, v23, "driverkitd/DriverBinInfo.swift", 30, 2, 64, 0);
    __break(1u);
  }
  else
  {
    v13(v10, (uint64_t)v12, v6);
    sub_100012408(a1, (uint64_t)v5, type metadata accessor for DriverBinEntry);
    v17 = type metadata accessor for DriverBinEntry(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v5, 0, 1, v17);
    sub_10003B764((uint64_t)v5, (uint64_t)v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  return result;
}

uint64_t sub_10003B764(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = sub_100005C88(&qword_100158EF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DriverBinEntry(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_1000405E8(a1);
    sub_10003E044(a2, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_1000405E8((uint64_t)v8);
  }
  else
  {
    sub_10001244C(a1, (uint64_t)v11, type metadata accessor for DriverBinEntry);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v19 = *v3;
    *v3 = 0x8000000000000000;
    sub_10003E870((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    v16 = *v3;
    *v3 = v19;
    swift_bridgeObjectRelease(v16);
    v17 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  }
}

uint64_t sub_10003B8D4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F6973726576;
  else
    return 0x73656972746E65;
}

uint64_t sub_10003B908@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003EF88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003B92C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003DC94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003B954(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003DC94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B97C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;

  v18 = a4;
  v8 = sub_100005C88(&qword_100158F00);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100004DE4(a1, v12);
  v14 = sub_10003DC94();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DriverBinInfo.CodingKeys, &type metadata for DriverBinInfo.CodingKeys, v14, v12, v13);
  v21 = a2;
  v20 = 0;
  v15 = sub_100005C88(&qword_100158F08);
  v16 = sub_10003DCD8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v8, v15, v16);
  if (!v4)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, v18, &v19, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10003BAC4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10003F078(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10003BAF0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10003B97C(a1, *v1, v1[1], v1[2]);
}

void sub_10003BB0C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  Swift::String v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  Swift::String v44;
  unint64_t v45;
  unint64_t v46;

  v6 = type metadata accessor for DriverBinEntry(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005C88(&qword_100157EF8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v40 - v13;
  v45 = 0;
  v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(v46);
  v45 = 0xD000000000000013;
  v46 = 0x80000001001232E0;
  swift_bridgeObjectRetain(a3);
  v15._countAndFlagsBits = a2;
  v15._object = a3;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(a3);
  v16._countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v44._countAndFlagsBits = *(_QWORD *)(a1 + 16);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  v19._countAndFlagsBits = 0x73656972746E6520;
  v19._object = (void *)0xEA00000000000A3ALL;
  String.append(_:)(v19);
  v20 = *(_QWORD *)(a1 + 64);
  v41 = a1 + 64;
  v21 = 1 << *(_BYTE *)(a1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v42 = (unint64_t)(v21 + 63) >> 6;
  v40 = v42 - 1;
  swift_bridgeObjectRetain(a1);
  v24 = 0;
  if (!v23)
    goto LABEL_8;
LABEL_6:
  v29 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  v30 = v29 | (v24 << 6);
  while (2)
  {
    v31 = *(_QWORD *)(a1 + 48);
    v32 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v12, v31 + *(_QWORD *)(*(_QWORD *)(v32 - 8) + 72) * v30, v32);
    v33 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(v43 + 72) * v30;
    v34 = sub_100005C88((uint64_t *)&unk_10015ABF0);
    sub_100012408(v33, (uint64_t)&v12[*(int *)(v34 + 48)], type metadata accessor for DriverBinEntry);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v12, 0, 1, v34);
    while (1)
    {
      sub_10003F23C((uint64_t)v12, (uint64_t)v14);
      v39 = sub_100005C88((uint64_t *)&unk_10015ABF0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v14, 1, v39) == 1)
      {
        swift_release(a1);
        return;
      }
      sub_10001244C((uint64_t)&v14[*(int *)(v39 + 48)], (uint64_t)v8, type metadata accessor for DriverBinEntry);
      v44._countAndFlagsBits = sub_10003BF4C();
      v44._object = v25;
      v26._countAndFlagsBits = 10;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      v27 = v44._object;
      String.append(_:)(v44);
      swift_bridgeObjectRelease(v27);
      sub_100012490((uint64_t)v8, type metadata accessor for DriverBinEntry);
      v28 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v14, v28);
      if (v23)
        goto LABEL_6;
LABEL_8:
      v35 = v24 + 1;
      if (__OFADD__(v24, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v35 < v42)
      {
        v36 = *(_QWORD *)(v41 + 8 * v35);
        if (v36)
          goto LABEL_11;
        v37 = v24 + 2;
        ++v24;
        if (v35 + 1 < v42)
        {
          v36 = *(_QWORD *)(v41 + 8 * v37);
          if (v36)
            goto LABEL_14;
          v24 = v35 + 1;
          if (v35 + 2 < v42)
          {
            v36 = *(_QWORD *)(v41 + 8 * (v35 + 2));
            if (v36)
            {
              v35 += 2;
              goto LABEL_11;
            }
            v37 = v35 + 3;
            v24 = v35 + 2;
            if (v35 + 3 < v42)
              break;
          }
        }
      }
LABEL_25:
      v38 = sub_100005C88((uint64_t *)&unk_10015ABF0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v12, 1, 1, v38);
      v23 = 0;
    }
    v36 = *(_QWORD *)(v41 + 8 * v37);
    if (v36)
    {
LABEL_14:
      v35 = v37;
LABEL_11:
      v23 = (v36 - 1) & v36;
      v30 = __clz(__rbit64(v36)) + (v35 << 6);
      v24 = v35;
      continue;
    }
    break;
  }
  while (1)
  {
    v35 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v35 >= v42)
    {
      v24 = v40;
      goto LABEL_25;
    }
    v36 = *(_QWORD *)(v41 + 8 * v35);
    ++v37;
    if (v36)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_10003BF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  void *v26;
  Swift::String v27;
  void *v28;
  Swift::String v29;
  void *v30;
  Class v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  void *v38;
  id v40[2];
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;

  v0 = type metadata accessor for TimeZone(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
  v40[0] = v4;
  static TimeZone.current.getter();
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setTimeZone:", isa);

  v6 = type metadata accessor for UUID(0);
  v7 = sub_100012534(&qword_100158EF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v42 = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
  v43 = v8;
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  type metadata accessor for DriverBinEntry(0);
  v10 = type metadata accessor for URL(0);
  v11 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 10;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v41._countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(v41._object);
  v41._countAndFlagsBits = 0xD000000000000011;
  v41._object = (void *)0x8000000100123300;
  v15 = sub_10001A040();
  v17 = sub_10003D6F0(0x7FFFFFFFFFFFFFFFLL, 1, v15, v16);
  v18 = sub_10003EE5C((uint64_t)v17, 538976288, 0xE400000000000000);
  swift_bridgeObjectRelease(v17);
  v40[1] = v18;
  v19 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v20 = sub_100013C48();
  v21 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v19, v20);
  v23 = v22;
  swift_bridgeObjectRelease(v18);
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  v25._countAndFlagsBits = 10;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  v26 = v41._object;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v26);
  v41._countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(v41._object);
  v41._countAndFlagsBits = 0xD000000000000013;
  v41._object = (void *)0x8000000100123320;
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
  v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  v29._countAndFlagsBits = 10;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v30 = v41._object;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v30);
  v41._countAndFlagsBits = 0x656D695420202020;
  v41._object = (void *)0xEF203A706D617473;
  v31 = Date._bridgeToObjectiveC()().super.isa;
  v32 = v40[0];
  v33 = objc_msgSend(v40[0], "stringFromDate:", v31);

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v36);
  v38 = v41._object;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v38);

  return v42;
}

void sub_10003C2F8()
{
  uint64_t v0;

  sub_10003BB0C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t sub_10003C304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t (*v26)(uint64_t);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char v45;
  char v46;
  char v47;
  int *v48;
  char v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  int *v56;
  int64_t v57;
  char *v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = type metadata accessor for DriverBinEntry(0);
  v61 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v50 - v8;
  v10 = type metadata accessor for UUID(0);
  v62 = *(_QWORD *)(v10 - 8);
  v63 = v10;
  __chkstk_darwin(v10);
  v58 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005C88(&qword_100157EF8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v13);
  v18 = (char *)&v50 - v17;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v57 = 0;
  v54 = a1;
  v21 = *(_QWORD *)(a1 + 64);
  v20 = a1 + 64;
  v19 = v21;
  v22 = 1 << *(_BYTE *)(v20 - 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v19;
  v52 = v20;
  v53 = (unint64_t)(v22 + 63) >> 6;
  v51 = v53 - 1;
  v55 = v15;
  v56 = (int *)v4;
  v25 = type metadata accessor for DriverBinEntry;
  while (1)
  {
    if (v24)
    {
      v26 = v25;
      v60 = (v24 - 1) & v24;
      v27 = __clz(__rbit64(v24)) | (v57 << 6);
LABEL_8:
      v28 = v54;
      (*(void (**)(char *, unint64_t, uint64_t))(v62 + 16))(v15, *(_QWORD *)(v54 + 48) + *(_QWORD *)(v62 + 72) * v27, v63);
      v29 = *(_QWORD *)(v28 + 56) + *(_QWORD *)(v61 + 72) * v27;
      v30 = sub_100005C88((uint64_t *)&unk_10015ABF0);
      v25 = v26;
      sub_100012408(v29, (uint64_t)&v15[*(int *)(v30 + 48)], v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v15, 0, 1, v30);
      goto LABEL_30;
    }
    v31 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v31 < v53)
    {
      v32 = *(_QWORD *)(v52 + 8 * v31);
      if (v32)
        goto LABEL_12;
      v33 = v57 + 2;
      ++v57;
      if (v31 + 1 < v53)
      {
        v32 = *(_QWORD *)(v52 + 8 * v33);
        if (v32)
          goto LABEL_15;
        v57 = v31 + 1;
        if (v31 + 2 < v53)
        {
          v32 = *(_QWORD *)(v52 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_12;
          }
          v57 = v31 + 2;
          if (v31 + 3 < v53)
          {
            v32 = *(_QWORD *)(v52 + 8 * (v31 + 3));
            if (v32)
            {
              v31 += 3;
              goto LABEL_12;
            }
            v33 = v31 + 4;
            v57 = v31 + 3;
            if (v31 + 4 < v53)
              break;
          }
        }
      }
    }
LABEL_29:
    v34 = sub_100005C88((uint64_t *)&unk_10015ABF0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v15, 1, 1, v34);
    v60 = 0;
LABEL_30:
    sub_10003F23C((uint64_t)v15, (uint64_t)v18);
    v35 = sub_100005C88((uint64_t *)&unk_10015ABF0);
    v36 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v18, 1, v35) == 1;
    result = v36;
    if (v36)
      return result;
    v59 = v36;
    v37 = (uint64_t)v7;
    v38 = (uint64_t)&v18[*(int *)(v35 + 48)];
    v39 = v18;
    v41 = v62;
    v40 = v63;
    v42 = (uint64_t)v58;
    v43 = v39;
    (*(void (**)(char *))(v62 + 32))(v58);
    sub_10001244C(v38, (uint64_t)v9, v25);
    v44 = sub_10003DBEC(v42);
    v46 = v45;
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v40);
    if ((v46 & 1) == 0)
      goto LABEL_40;
    v7 = (char *)v37;
    sub_100012408(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v61 + 72) * v44, v37, v25);
    v47 = static UUID.== infix(_:_:)(v37, v9);
    v48 = v56;
    if ((v47 & 1) == 0
      || (sub_10001AC84(v37 + v56[5], &v9[v56[5]]) & 1) == 0
      || (static URL.== infix(_:_:)(v37 + v48[6], &v9[v48[6]]) & 1) == 0
      || (static URL.== infix(_:_:)(v37 + v48[7], &v9[v48[7]]) & 1) == 0)
    {
      sub_100012490(v37, type metadata accessor for DriverBinEntry);
LABEL_40:
      sub_100012490((uint64_t)v9, type metadata accessor for DriverBinEntry);
      return 0;
    }
    v49 = static Date.== infix(_:_:)(v37 + v48[8], &v9[v48[8]]);
    sub_100012490(v37, v25);
    sub_100012490((uint64_t)v9, v25);
    v15 = v55;
    v18 = v43;
    v24 = v60;
    result = v59;
    if ((v49 & 1) == 0)
      return result;
  }
  v32 = *(_QWORD *)(v52 + 8 * v33);
  if (v32)
  {
LABEL_15:
    v31 = v33;
LABEL_12:
    v26 = v25;
    v60 = (v32 - 1) & v32;
    v27 = __clz(__rbit64(v32)) + (v31 << 6);
    v57 = v31;
    goto LABEL_8;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v53)
    {
      v57 = v51;
      goto LABEL_29;
    }
    v32 = *(_QWORD *)(v52 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_12;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_10003C804(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((sub_10003C304(*a1, *a2) & 1) == 0)
    return 0;
  if (v2 == v4 && v3 == v5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v4, v5, 0);
}

uint64_t sub_10003C880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  _QWORD v12[2];

  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v12, "Staged bundle ");
  HIBYTE(v12[1]) = -18;
  v1 = type metadata accessor for DriverBinEntry(0);
  v2 = type metadata accessor for URL(0);
  v3 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 0x70706120726F6620;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  v7 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  v8 = *v7;
  v9 = (void *)v7[1];
  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  return v12[0];
}

uint64_t sub_10003C998()
{
  uint64_t *v0;

  return sub_10003ED70(*v0);
}

uint64_t sub_10003C9A0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;

  v3 = v2;
  v6 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = PropertyListDecoder.init()();
  v8 = sub_10003F284();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v21, &type metadata for DriverBinInfo, a1, a2, &type metadata for DriverBinInfo, v8);
  if (v2)
  {
    sub_100011F40(a1, a2);
  }
  else
  {
    v3 = v21;
    v9 = v22;
    v10 = v23;
    if (v22 == 0xD000000000000020 && v23 == (void *)0x8000000100122460
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, 0xD000000000000020, 0x8000000100122460, 0) & 1) != 0)
    {
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v3);
      sub_100011F40(a1, a2);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v3);
      swift_release(v7);
      return v3;
    }
    v21 = 0;
    v22 = 0xE000000000000000;
    swift_bridgeObjectRetain(v10);
    _StringGuts.grow(_:)(52);
    v12._countAndFlagsBits = 0xD000000000000028;
    v12._object = (void *)0x8000000100123340;
    String.append(_:)(v12);
    v13._countAndFlagsBits = 0xD000000000000020;
    v13._object = (void *)0x8000000100122460;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 0x20646E756F66202CLL;
    v14._object = (void *)0xE800000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = v9;
    v15._object = v10;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v10);
    v16 = v21;
    v17 = v22;
    v18 = sub_1000122F8();
    v19 = swift_allocError(&type metadata for KMError, v18, 0, 0);
    *(_QWORD *)v20 = v16;
    *(_QWORD *)(v20 + 8) = v17;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_QWORD *)(v20 + 64) = 0;
    *(_BYTE *)(v20 + 72) = 50;
    swift_willThrow(v19);
    sub_100011F40(a1, a2);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v3);
  }
  swift_release(v7);
  return v3;
}

uint64_t sub_10003CBE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD v12[3];

  v6 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter(100);
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = a3;
  v8 = sub_10003F2C8();
  v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v12, &type metadata for DriverBinInfo, v8, v9);
  swift_release(v7);
  return v10;
}

uint64_t sub_10003CC90()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003CCC8 + 4 * byte_10011048C[*v0]))(0x65626D754E6E6962, 0xE900000000000072);
}

uint64_t sub_10003CCC8()
{
  return 0x726F636552707061;
}

uint64_t sub_10003CCE0()
{
  return 0x5255646567617473;
}

uint64_t sub_10003CCFC()
{
  return 0x7542646567617473;
}

uint64_t sub_10003CD1C()
{
  return 0x6D617473656D6974;
}

uint64_t sub_10003CD34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000402D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003CD58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003F30C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003CD80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003F30C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003CDA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  v13 = (int *)type metadata accessor for DriverBinEntry(0);
  sub_10001244C(a2, a6 + v13[5], type metadata accessor for ApplicationRecord);
  v14 = a6 + v13[6];
  v15 = type metadata accessor for URL(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v14, a3, v15);
  v16(a6 + v13[7], a4, v15);
  v17 = a6 + v13[8];
  v18 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a5, v18);
}

uint64_t sub_10003CE98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v3 = v1;
  v5 = sub_100005C88(&qword_100158F38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_10003F30C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DriverBinEntry.CodingKeys, &type metadata for DriverBinEntry.CodingKeys, v11, v9, v10);
  v31 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100012534(&qword_100158F18, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v31, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for DriverBinEntry(0);
    v15 = v3 + v14[5];
    v30 = 1;
    v16 = type metadata accessor for ApplicationRecord(0);
    v17 = sub_100012534(&qword_1001582A8, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F424);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v30, v5, v16, v17);
    v18 = v3 + v14[6];
    v29 = 2;
    v19 = type metadata accessor for URL(0);
    v20 = sub_100012534(&qword_100158258, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v29, v5, v19, v20);
    v21 = v3 + v14[7];
    v28 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v28, v5, v19, v20);
    v22 = v3 + v14[8];
    v27 = 4;
    v23 = type metadata accessor for Date(0);
    v24 = sub_100012534(&qword_100158030, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v27, v5, v23, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10003D11C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(uint64_t, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;

  v37 = a2;
  v39 = type metadata accessor for Date(0);
  v36 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for URL(0);
  v42 = *(_QWORD *)(v45 - 8);
  v4 = __chkstk_darwin(v45);
  v40 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v41 = (char *)&v35 - v6;
  v44 = type metadata accessor for ApplicationRecord(0);
  __chkstk_darwin(v44);
  v43 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v47 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100005C88(&qword_100158F40);
  v10 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for DriverBinEntry(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v16 = a1[4];
  sub_100004DE4(a1, v17);
  v18 = sub_10003F30C();
  v48 = v12;
  v19 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DriverBinEntry.CodingKeys, &type metadata for DriverBinEntry.CodingKeys, v18, v17, v16);
  if (v19)
    return sub_100005D08(a1);
  v21 = (uint64_t)v43;
  v20 = v44;
  v50 = v10;
  v35 = v8;
  v22 = v45;
  v55 = 0;
  v23 = sub_100012534(&qword_100158F48, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v24 = v46;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v46, &v55, v49, v46, v23);
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v15, v47, v24);
  v54 = 1;
  v25 = sub_100012534(&qword_1001585E0, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F3FC);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v20, &v54, v49, v20, v25);
  sub_10001244C(v21, (uint64_t)&v15[v13[5]], type metadata accessor for ApplicationRecord);
  v53 = 2;
  v26 = (uint64_t)v15;
  v27 = sub_100012534(&qword_100158270, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v28 = v41;
  v47 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, &v53, v49, v22, v27);
  v29 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
  v29(v26 + v13[6], v28, v22);
  v52 = 3;
  v30 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, &v52, v49, v22, v27);
  v29(v26 + v13[7], v30, v22);
  v51 = 4;
  v31 = sub_100012534(&qword_100158048, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v33 = v38;
  v32 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v39, &v51, v49, v39, v31);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v48, v49);
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v26 + v13[8], v33, v32);
  sub_100012408(v26, v37, type metadata accessor for DriverBinEntry);
  sub_100005D08(a1);
  return sub_100012490(v26, type metadata accessor for DriverBinEntry);
}

uint64_t sub_10003D6C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003D11C(a1, a2);
}

uint64_t sub_10003D6DC(_QWORD *a1)
{
  return sub_10003CE98(a1);
}

char *sub_10003D6F0(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD v55[2];
  char *v56;

  if (a1 < 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v7 = a4;
  v9 = swift_allocObject(&unk_100147430, 24, 7);
  *(_QWORD *)(v9 + 16) = _swiftEmptyArrayStorage;
  v13 = swift_allocObject(&unk_100147458, 24, 7);
  v6 = (char *)v13;
  *(_QWORD *)(v13 + 16) = 15;
  v14 = v7 >> 60;
  v15 = HIBYTE(v7) & 0xF;
  if (!a1 || ((v7 & 0x2000000000000000) != 0 ? (v16 = HIBYTE(v7) & 0xF) : (v16 = a3 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((v7 & 0x2000000000000000) == 0)
      v15 = a3 & 0xFFFFFFFFFFFFLL;
    v17 = (v14 & ((a3 & 0x800000000000000) == 0)) == 0;
    v38 = 7;
    if (!v17)
      v38 = 11;
    sub_100029490(v38 | (v15 << 16), v13, a2 & 1, v9, a3, v7);
    swift_bridgeObjectRelease(v7);
    v39 = *(char **)(v9 + 16);
    swift_bridgeObjectRetain(v39);
    swift_release(v9);
    swift_release(v6);
    return v39;
  }
  v49 = a1;
  v17 = (v14 & ((a3 & 0x800000000000000) == 0)) == 0;
  v18 = 7;
  if (!v17)
    v18 = 11;
  v48 = v18 | (v16 << 16);
  v54 = 4 * v16;
  v56 = (char *)_swiftEmptyArrayStorage;
  v19 = 15;
  v4 = 15;
  v52 = v7;
  v53 = v13;
  v50 = a2;
  v51 = a3;
  do
  {
    v20 = String.subscript.getter(v19, a3, v7);
    v5 = v21;
    if ((v21 & 0x2000000000000000) != 0)
      v22 = HIBYTE(v21) & 0xF;
    else
      v22 = v20 & 0xFFFFFFFFFFFFLL;
    if (!v22)
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if ((v21 & 0x1000000000000000) != 0)
    {
      v24 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(0, v20, v21);
    }
    else
    {
      if ((v21 & 0x2000000000000000) != 0)
      {
        v55[0] = v20;
        v55[1] = v21 & 0xFFFFFFFFFFFFFFLL;
        v23 = v55;
      }
      else if ((v20 & 0x1000000000000000) != 0)
      {
        v23 = (_QWORD *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v23 = (_QWORD *)_StringObject.sharedUTF8.getter(v20, v21);
      }
      v24 = _decodeScalar(_:startingAt:)(v23);
    }
    v8 = v24;
    swift_bridgeObjectRelease(v5);
    if ((v8 - 14) <= 0xFFFFFFFB && (v8 - 8232) >= 2 && (_DWORD)v8 != 133)
    {
      v19 = String.index(after:)(v19, a3, v7);
      continue;
    }
    if (v4 >> 14 == v19 >> 14 && (a2 & 1) != 0)
    {
      v19 = String.index(after:)(v19, a3, v7);
      *((_QWORD *)v6 + 2) = v19;
      v4 = v19;
      continue;
    }
    if (v19 >> 14 < v4 >> 14)
      goto LABEL_53;
    v25 = a3;
    v26 = v9;
    v27 = String.subscript.getter(v4, v19, v25, v7);
    v5 = v28;
    v30 = v29;
    v8 = v31;
    v32 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0)
      v32 = sub_10002959C(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
    v34 = *((_QWORD *)v32 + 2);
    v33 = *((_QWORD *)v32 + 3);
    v56 = v32;
    if (v34 >= v33 >> 1)
      v56 = sub_10002959C((char *)(v33 > 1), v34 + 1, 1, v56);
    v35 = v56;
    *((_QWORD *)v56 + 2) = v34 + 1;
    v36 = &v35[32 * v34];
    *((_QWORD *)v36 + 4) = v27;
    *((_QWORD *)v36 + 5) = v5;
    *((_QWORD *)v36 + 6) = v30;
    *((_QWORD *)v36 + 7) = v8;
    v9 = v26;
    *(_QWORD *)(v26 + 16) = v35;
    a3 = v51;
    v7 = v52;
    v4 = String.index(after:)(v19, v51, v52);
    v6 = (char *)v53;
    *(_QWORD *)(v53 + 16) = v4;
    v37 = *((_QWORD *)v35 + 2);
    v19 = v4;
    a2 = v50;
    if (v37 == v49)
      break;
  }
  while (v54 != v19 >> 14);
  if (v54 == v4 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    v39 = v56;
    goto LABEL_50;
  }
  if (v54 >= v4 >> 14)
  {
    v4 = String.subscript.getter(v4, v48, a3, v7);
    v5 = v40;
    v41 = v7;
    v7 = v42;
    v8 = v43;
    swift_bridgeObjectRelease(v41);
    v6 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0)
      goto LABEL_56;
    goto LABEL_47;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  v6 = sub_10002959C(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
LABEL_47:
  v45 = *((_QWORD *)v6 + 2);
  v44 = *((_QWORD *)v6 + 3);
  v39 = v6;
  if (v45 >= v44 >> 1)
    v39 = sub_10002959C((char *)(v44 > 1), v45 + 1, 1, v6);
  *((_QWORD *)v39 + 2) = v45 + 1;
  v46 = &v39[32 * v45];
  *((_QWORD *)v46 + 4) = v4;
  *((_QWORD *)v46 + 5) = v5;
  *((_QWORD *)v46 + 6) = v7;
  *((_QWORD *)v46 + 7) = v8;
  *(_QWORD *)(v9 + 16) = v39;
  v6 = (char *)v53;
LABEL_50:
  swift_bridgeObjectRetain(v39);
  swift_release(v9);
  swift_release(v6);
  return v39;
}

uint64_t sub_10003DB5C(uint64_t a1, uint64_t a2, int *a3)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (sub_10001AC84(a1 + a3[5], a2 + a3[5]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + a3[6], a2 + a3[6]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + a3[7], a2 + a3[7]) & 1) != 0)
  {
    return static Date.== infix(_:_:)(a1 + a3[8], a2 + a3[8]);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_10003DBEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100012534(&qword_100157F10, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10003DD74(a1, v7);
}

uint64_t type metadata accessor for DriverBinEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_10015F1C0;
  if (!qword_10015F1C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DriverBinEntry);
  return result;
}

unint64_t sub_10003DC94()
{
  unint64_t result;

  result = qword_10015ECB0;
  if (!qword_10015ECB0)
  {
    result = swift_getWitnessTable(&unk_100110824, &type metadata for DriverBinInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015ECB0);
  }
  return result;
}

unint64_t sub_10003DCD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158F10;
  if (!qword_100158F10)
  {
    v1 = sub_100011CE4(&qword_100158F08);
    sub_100012534(&qword_100158F18, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_100012534(&qword_100158F20, type metadata accessor for DriverBinEntry, (uint64_t)&unk_100110598);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100158F10);
  }
  return result;
}

unint64_t sub_10003DD74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100012534(&qword_100158BF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

size_t sub_10003DEB4(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_10003DED0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

size_t sub_10003DED0(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005C88(&qword_10015BB40);
  v11 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20);
  }
  swift_release(a4);
  return (size_t)v15;
}

uint64_t sub_10003E044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10003DBEC(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10003EAA8();
      v10 = v19;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = type metadata accessor for DriverBinEntry(0);
    v15 = *(_QWORD *)(v14 - 8);
    sub_10001244C(v13 + *(_QWORD *)(v15 + 72) * v7, a2, type metadata accessor for DriverBinEntry);
    sub_10003E59C(v7, v10);
    v16 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for DriverBinEntry(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
}

uint64_t sub_10003E180(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t i;
  int v52;
  uint64_t v53;

  v3 = v2;
  v6 = type metadata accessor for DriverBinEntry(0);
  v50 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100157F08);
  v52 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (*(_QWORD *)(v12 + 16))
  {
    v15 = 1 << *(_BYTE *)(v12 + 32);
    v16 = *(_QWORD *)(v12 + 64);
    v49 = (_QWORD *)(v12 + 64);
    if (v15 < 64)
      v17 = ~(-1 << v15);
    else
      v17 = -1;
    v18 = v17 & v16;
    v47 = v2;
    v48 = (unint64_t)(v15 + 63) >> 6;
    v19 = v13 + 64;
    result = swift_retain(v12);
    v21 = 0;
    v22 = v12;
    for (i = v12; ; v22 = i)
    {
      if (v18)
      {
        v24 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        v25 = v24 | (v21 << 6);
      }
      else
      {
        v26 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        if (v26 >= v48)
        {
          swift_release(v22);
          v3 = v47;
          v27 = v49;
          if ((v52 & 1) == 0)
            goto LABEL_41;
LABEL_38:
          v45 = 1 << *(_BYTE *)(i + 32);
          if (v45 >= 64)
            bzero(v27, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v27 = -1 << v45;
          v44 = i;
          *(_QWORD *)(i + 16) = 0;
          goto LABEL_44;
        }
        v27 = v49;
        v28 = v49[v26];
        ++v21;
        if (!v28)
        {
          v21 = v26 + 1;
          if (v26 + 1 >= v48)
            goto LABEL_37;
          v28 = v49[v21];
          if (!v28)
          {
            v29 = v26 + 2;
            if (v29 >= v48)
            {
LABEL_37:
              swift_release(v22);
              v3 = v47;
              if ((v52 & 1) == 0)
              {
LABEL_41:
                v44 = i;
                goto LABEL_44;
              }
              goto LABEL_38;
            }
            v28 = v49[v29];
            if (!v28)
            {
              while (1)
              {
                v21 = v29 + 1;
                if (__OFADD__(v29, 1))
                  break;
                if (v21 >= v48)
                  goto LABEL_37;
                v28 = v49[v21];
                ++v29;
                if (v28)
                  goto LABEL_23;
              }
LABEL_46:
              __break(1u);
              return result;
            }
            v21 = v29;
          }
        }
LABEL_23:
        v18 = (v28 - 1) & v28;
        v25 = __clz(__rbit64(v28)) + (v21 << 6);
      }
      v30 = *(_QWORD *)(v9 + 72);
      v31 = *(_QWORD *)(v22 + 48) + v30 * v25;
      if ((v52 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v31, v8);
        v32 = *(_QWORD *)(v22 + 56);
        v33 = *(_QWORD *)(v50 + 72);
        sub_10001244C(v32 + v33 * v25, v53, type metadata accessor for DriverBinEntry);
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v31, v8);
        v34 = *(_QWORD *)(v22 + 56);
        v33 = *(_QWORD *)(v50 + 72);
        sub_100012408(v34 + v33 * v25, v53, type metadata accessor for DriverBinEntry);
      }
      v35 = *(_QWORD *)(v14 + 40);
      v36 = sub_100012534(&qword_100157F10, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
      v37 = -1 << *(_BYTE *)(v14 + 32);
      v38 = result & ~v37;
      v39 = v38 >> 6;
      if (((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6))) != 0)
      {
        v23 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v40 = 0;
        v41 = (unint64_t)(63 - v37) >> 6;
        do
        {
          if (++v39 == v41 && (v40 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v42 = v39 == v41;
          if (v39 == v41)
            v39 = 0;
          v40 |= v42;
          v43 = *(_QWORD *)(v19 + 8 * v39);
        }
        while (v43 == -1);
        v23 = __clz(__rbit64(~v43)) + (v39 << 6);
      }
      *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v30 * v23, v11, v8);
      result = sub_10001244C(v53, *(_QWORD *)(v14 + 56) + v33 * v23, type metadata accessor for DriverBinEntry);
      ++*(_QWORD *)(v14 + 16);
    }
  }
  v44 = v12;
LABEL_44:
  result = swift_release(v44);
  *v3 = v14;
  return result;
}

unint64_t sub_10003E59C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  unint64_t v43;
  uint64_t v44;

  v4 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v43 = (result + 1) & v11;
      v12 = *(_QWORD *)(v44 + 72);
      v42 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v42(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100012534(&qword_100157F10, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v43)
        {
          if (v21 >= v43 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            v25 = v24 + v15 * a1;
            v26 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || v25 >= v26 + v15)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v4);
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront(v25);
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = type metadata accessor for DriverBinEntry(0);
            v29 = *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72);
            v30 = v29 * a1;
            result = v27 + v29 * a1;
            v31 = v29 * v10;
            v32 = v27 + v29 * v10;
            v33 = v32 + v29;
            if (v30 < v31 || result >= v33)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v32, 1, v28);
              a1 = v10;
              v13 = v17;
            }
            else
            {
              a1 = v10;
              v13 = v17;
              if (v30 != v31)
              {
                result = swift_arrayInitWithTakeBackToFront(result);
                v13 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v43 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v36 = *v35;
    v37 = (-1 << a1) - 1;
  }
  else
  {
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v37 = *v35;
    v36 = (-1 << a1) - 1;
  }
  *v35 = v37 & v36;
  v38 = *(_QWORD *)(a2 + 16);
  v39 = __OFSUB__(v38, 1);
  v40 = v38 - 1;
  if (v39)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v40;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10003E870(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10003DBEC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for DriverBinEntry(0);
        return sub_100040628(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10003EAA8();
      goto LABEL_7;
    }
    sub_10003E180(v17, a3 & 1);
    v24 = sub_10003DBEC(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10003E9F0(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_10003E9F0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for DriverBinEntry(0);
  result = sub_10001244C(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for DriverBinEntry);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

void *sub_10003EAA8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = type metadata accessor for DriverBinEntry(0);
  v36 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005C88(&qword_100157F08);
  v30 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = *(_QWORD *)(v5 + 16);
  v38 = v6;
  if (!v7)
  {
    result = (void *)swift_release(v5);
    v28 = v38;
    v27 = v30;
LABEL_25:
    *v27 = v28;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v38;
  }
  v11 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v37 = v5;
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v31 = v5 + 64;
  v32 = (unint64_t)(v12 + 63) >> 6;
  v16 = v33;
  v15 = v34;
  v17 = (uint64_t)v35;
  for (i = v38; ; result = (void *)sub_10001244C(v17, *(_QWORD *)(i + 56) + v23, type metadata accessor for DriverBinEntry))
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v11 << 6);
      v21 = v37;
      goto LABEL_9;
    }
    v24 = v11 + 1;
    v21 = v37;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v32)
        goto LABEL_23;
      v25 = *(_QWORD *)(v31 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_22:
    v14 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    v22 = *(_QWORD *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v16, *(_QWORD *)(v21 + 48) + v22, v15);
    v23 = *(_QWORD *)(v36 + 72) * v20;
    sub_100012408(*(_QWORD *)(v21 + 56) + v23, v17, type metadata accessor for DriverBinEntry);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(i + 48) + v22, v16, v15);
  }
  v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    result = (void *)swift_release(v37);
    v27 = v30;
    v28 = v38;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(v31 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10003ED70(uint64_t a1)
{
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  uint64_t v12;

  v12 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v2._countAndFlagsBits = 0x73656972746E6520;
  v2._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v2);
  swift_bridgeObjectRetain(a1);
  v4 = sub_10003B060(v3);
  swift_bridgeObjectRelease(a1);
  v5 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v6 = sub_100013C48();
  v7 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v5, v6);
  v9 = v8;
  swift_bridgeObjectRelease(v4);
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  return v12;
}

_QWORD *sub_10003EE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  void *object;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_10000C958(0, v3, 0);
    v6 = (_QWORD *)(a1 + 56);
    do
    {
      v8 = *(v6 - 3);
      v7 = *(v6 - 2);
      v9 = *(v6 - 1);
      v10 = *v6;
      swift_bridgeObjectRetain(*v6);
      swift_bridgeObjectRetain(a3);
      v11._countAndFlagsBits = static String._fromSubstring(_:)(v8, v7, v9, v10);
      object = v11._object;
      String.append(_:)(v11);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(object);
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
        sub_10000C958(v13 > 1, v14 + 1, 1);
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = a2;
      v15[5] = a3;
      v6 += 4;
      --v3;
    }
    while (v3);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10003EF88(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x73656972746E65 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656972746E65, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10003F078(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_100005C88(&qword_100158FE0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100004DE4(a1, v7);
  v9 = sub_10003DC94();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DriverBinInfo.CodingKeys, &type metadata for DriverBinInfo.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100005D08(a1);
  }
  else
  {
    v10 = sub_100005C88(&qword_100158F08);
    HIBYTE(v15) = 0;
    v11 = sub_10004054C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v10, (char *)&v15 + 7, v3, v10, v11);
    v7 = v16;
    BYTE6(v15) = 1;
    swift_bridgeObjectRetain(v16);
    KeyedDecodingContainer.decode(_:forKey:)((char *)&v15 + 6, v3);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v14);
    sub_100005D08(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v7);
  }
  return v7;
}

uint64_t sub_10003F23C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100157EF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10003F284()
{
  unint64_t result;

  result = qword_100158F28;
  if (!qword_100158F28)
  {
    result = swift_getWitnessTable(&unk_1001104A8, &type metadata for DriverBinInfo);
    atomic_store(result, (unint64_t *)&qword_100158F28);
  }
  return result;
}

unint64_t sub_10003F2C8()
{
  unint64_t result;

  result = qword_100158F30;
  if (!qword_100158F30)
  {
    result = swift_getWitnessTable(&unk_1001104D0, &type metadata for DriverBinInfo);
    atomic_store(result, (unint64_t *)&qword_100158F30);
  }
  return result;
}

unint64_t sub_10003F30C()
{
  unint64_t result;

  result = qword_10015ECB8[0];
  if (!qword_10015ECB8[0])
  {
    result = swift_getWitnessTable(&unk_1001107D4, &type metadata for DriverBinEntry.CodingKeys);
    atomic_store(result, qword_10015ECB8);
  }
  return result;
}

uint64_t destroy for DriverBinInfo(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s10driverkitd13DriverBinInfoVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for DriverBinInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *assignWithTake for DriverBinInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DriverBinInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DriverBinInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverBinInfo()
{
  return &type metadata for DriverBinInfo;
}

char *sub_10003F4F8(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  void (*v37)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v34);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = (char *)a2 + v8;
    v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    *(_QWORD *)v9 = *(uint64_t *)((char *)a2 + v8);
    *((_QWORD *)v9 + 1) = v11;
    v12 = (int *)type metadata accessor for ApplicationRecord(0);
    v13 = v12[5];
    v36 = &v9[v13];
    v14 = &v10[v13];
    v15 = type metadata accessor for URL(0);
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v37 = v16;
    v17 = swift_bridgeObjectRetain(v11);
    ((void (*)(char *, char *, uint64_t, __n128))v16)(v36, v14, v15, v17);
    v18 = v12[6];
    v19 = *(_QWORD *)&v10[v18];
    *(_QWORD *)&v9[v18] = v19;
    v20 = v12[7];
    v21 = (uint64_t *)&v9[v20];
    v22 = (uint64_t *)&v10[v20];
    v23 = *v22;
    v24 = v22[1];
    swift_bridgeObjectRetain(v19);
    sub_1000122B4(v23, v24);
    *v21 = v23;
    v21[1] = v24;
    v25 = v12[8];
    v26 = (uint64_t *)&v9[v25];
    v27 = (uint64_t *)&v10[v25];
    v28 = *v27;
    v29 = v27[1];
    sub_1000122B4(*v27, v29);
    *v26 = v28;
    v26[1] = v29;
    v37(&a1[a3[6]], (char *)a2 + a3[6], v15);
    v37(&a1[a3[7]], (char *)a2 + a3[7], v15);
    v30 = a3[8];
    v31 = &a1[v30];
    v32 = (char *)a2 + v30;
    v33 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  }
  return a1;
}

uint64_t sub_10003F69C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
  v6 = (int *)type metadata accessor for ApplicationRecord(0);
  v7 = v5 + v6[5];
  v8 = type metadata accessor for URL(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[6]));
  sub_100011F40(*(_QWORD *)(v5 + v6[7]), *(_QWORD *)(v5 + v6[7] + 8));
  sub_100011F40(*(_QWORD *)(v5 + v6[8]), *(_QWORD *)(v5 + v6[8] + 8));
  v9(a1 + a2[6], v8);
  v9(a1 + a2[7], v8);
  v10 = a1 + a2[8];
  v11 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t sub_10003F7A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = v10;
  v11 = (int *)type metadata accessor for ApplicationRecord(0);
  v12 = v11[5];
  v13 = (char *)v8 + v12;
  v14 = v9 + v12;
  v15 = type metadata accessor for URL(0);
  v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
  v17 = swift_bridgeObjectRetain(v10);
  v16(v13, v14, v15, v17);
  v18 = v11[6];
  v19 = *(_QWORD *)(v9 + v18);
  *(_QWORD *)((char *)v8 + v18) = v19;
  v20 = v11[7];
  v21 = (_QWORD *)((char *)v8 + v20);
  v22 = (uint64_t *)(v9 + v20);
  v23 = *v22;
  v24 = v22[1];
  swift_bridgeObjectRetain(v19);
  sub_1000122B4(v23, v24);
  *v21 = v23;
  v21[1] = v24;
  v25 = v11[8];
  v26 = (_QWORD *)((char *)v8 + v25);
  v27 = (uint64_t *)(v9 + v25);
  v28 = *v27;
  v29 = v27[1];
  sub_1000122B4(*v27, v29);
  *v26 = v28;
  v26[1] = v29;
  ((void (*)(uint64_t, uint64_t, uint64_t))v16)(a1 + a3[6], a2 + a3[6], v15);
  ((void (*)(uint64_t, uint64_t, uint64_t))v16)(a1 + a3[7], a2 + a3[7], v15);
  v30 = a3[8];
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  return a1;
}

uint64_t sub_10003F914(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  *v8 = *(_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (int *)type metadata accessor for ApplicationRecord(0);
  v13 = v12[5];
  v14 = (char *)v8 + v13;
  v15 = v9 + v13;
  v16 = type metadata accessor for URL(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24);
  v17(v14, v15, v16);
  v18 = v12[6];
  v19 = *(_QWORD *)(v9 + v18);
  v20 = *(_QWORD *)((char *)v8 + v18);
  *(_QWORD *)((char *)v8 + v18) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = v12[7];
  v22 = (_QWORD *)((char *)v8 + v21);
  v23 = (uint64_t *)(v9 + v21);
  v24 = *v23;
  v25 = v23[1];
  sub_1000122B4(*v23, v25);
  v26 = *v22;
  v27 = v22[1];
  *v22 = v24;
  v22[1] = v25;
  sub_100011F40(v26, v27);
  v28 = v12[8];
  v29 = (_QWORD *)((char *)v8 + v28);
  v30 = (uint64_t *)(v9 + v28);
  v31 = *v30;
  v32 = v30[1];
  sub_1000122B4(*v30, v32);
  v33 = *v29;
  v34 = v29[1];
  *v29 = v31;
  v29[1] = v32;
  sub_100011F40(v33, v34);
  v17((char *)(a1 + a3[6]), a2 + a3[6], v16);
  v17((char *)(a1 + a3[7]), a2 + a3[7], v16);
  v35 = a3[8];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  return a1;
}

uint64_t sub_10003FAB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for ApplicationRecord(0);
  v11 = v10[5];
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for URL(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  *(_QWORD *)(v8 + v10[6]) = *(_QWORD *)(v9 + v10[6]);
  *(_OWORD *)(v8 + v10[7]) = *(_OWORD *)(v9 + v10[7]);
  *(_OWORD *)(v8 + v10[8]) = *(_OWORD *)(v9 + v10[8]);
  v15(a1 + a3[6], a2 + a3[6], v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  return a1;
}

uint64_t sub_10003FBE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = (int *)type metadata accessor for ApplicationRecord(0);
  v13 = v12[5];
  v14 = (char *)v8 + v13;
  v15 = v9 + v13;
  v16 = type metadata accessor for URL(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40);
  v17(v14, v15, v16);
  v18 = v12[6];
  v19 = *(_QWORD *)((char *)v8 + v18);
  *(_QWORD *)((char *)v8 + v18) = *(_QWORD *)(v9 + v18);
  swift_bridgeObjectRelease(v19);
  v20 = v12[7];
  v21 = *(_QWORD *)((char *)v8 + v20);
  v22 = *(_QWORD *)((char *)v8 + v20 + 8);
  *(_OWORD *)((char *)v8 + v20) = *(_OWORD *)(v9 + v20);
  sub_100011F40(v21, v22);
  v23 = v12[8];
  v24 = *(_QWORD *)((char *)v8 + v23);
  v25 = *(_QWORD *)((char *)v8 + v23 + 8);
  *(_OWORD *)((char *)v8 + v23) = *(_OWORD *)(v9 + v23);
  sub_100011F40(v24, v25);
  v17((char *)(a1 + a3[6]), a2 + a3[6], v16);
  v17((char *)(a1 + a3[7]), a2 + a3[7], v16);
  v26 = a3[8];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v27, v28, v29);
  return a1;
}

uint64_t sub_10003FD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003FD48);
}

uint64_t sub_10003FD48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for ApplicationRecord(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = type metadata accessor for URL(0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = type metadata accessor for Date(0);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[8];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10003FE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003FE10);
}

uint64_t sub_10003FE10(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for ApplicationRecord(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = type metadata accessor for URL(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = type metadata accessor for Date(0);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[8];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10003FED4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ApplicationRecord(319);
    if (v4 <= 0x3F)
    {
      v7[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for URL(319);
      if (v5 <= 0x3F)
      {
        v8 = *(_QWORD *)(result - 8) + 64;
        v9 = v8;
        result = type metadata accessor for Date(319);
        if (v6 <= 0x3F)
        {
          v10 = *(_QWORD *)(result - 8) + 64;
          swift_initStructMetadata(a1, 256, 5, v7, a1 + 16);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DriverBinEntry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10003FFDC + 4 * byte_100110496[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100040010 + 4 * byte_100110491[v4]))();
}

uint64_t sub_100040010(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040018(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100040020);
  return result;
}

uint64_t sub_10004002C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100040034);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100040038(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040040(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DriverBinEntry.CodingKeys()
{
  return &type metadata for DriverBinEntry.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DriverBinInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000400A8 + 4 * byte_1001104A0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000400DC + 4 * byte_10011049B[v4]))();
}

uint64_t sub_1000400DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000400E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000400ECLL);
  return result;
}

uint64_t sub_1000400F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100040100);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100040104(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004010C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DriverBinInfo.CodingKeys()
{
  return &type metadata for DriverBinInfo.CodingKeys;
}

unint64_t sub_10004012C()
{
  unint64_t result;

  result = qword_10015F2D0[0];
  if (!qword_10015F2D0[0])
  {
    result = swift_getWitnessTable(&unk_1001106F4, &type metadata for DriverBinInfo.CodingKeys);
    atomic_store(result, qword_10015F2D0);
  }
  return result;
}

unint64_t sub_100040174()
{
  unint64_t result;

  result = qword_10015F4E0[0];
  if (!qword_10015F4E0[0])
  {
    result = swift_getWitnessTable(&unk_1001107AC, &type metadata for DriverBinEntry.CodingKeys);
    atomic_store(result, qword_10015F4E0);
  }
  return result;
}

unint64_t sub_1000401BC()
{
  unint64_t result;

  result = qword_10015F5F0;
  if (!qword_10015F5F0)
  {
    result = swift_getWitnessTable(&unk_10011071C, &type metadata for DriverBinEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F5F0);
  }
  return result;
}

unint64_t sub_100040204()
{
  unint64_t result;

  result = qword_10015F5F8[0];
  if (!qword_10015F5F8[0])
  {
    result = swift_getWitnessTable(&unk_100110744, &type metadata for DriverBinEntry.CodingKeys);
    atomic_store(result, qword_10015F5F8);
  }
  return result;
}

unint64_t sub_10004024C()
{
  unint64_t result;

  result = qword_10015F680;
  if (!qword_10015F680)
  {
    result = swift_getWitnessTable(&unk_100110664, &type metadata for DriverBinInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F680);
  }
  return result;
}

unint64_t sub_100040294()
{
  unint64_t result;

  result = qword_10015F688[0];
  if (!qword_10015F688[0])
  {
    result = swift_getWitnessTable(&unk_10011068C, &type metadata for DriverBinInfo.CodingKeys);
    atomic_store(result, qword_10015F688);
  }
  return result;
}

uint64_t sub_1000402D8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x65626D754E6E6962 && a2 == 0xE900000000000072)
  {
    v4 = 0xE900000000000072;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65626D754E6E6962, 0xE900000000000072, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x726F636552707061 && a2 == 0xE900000000000064)
  {
    v6 = 0xE900000000000064;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F636552707061, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x5255646567617473 && a2 == 0xE90000000000004CLL)
  {
    v7 = 0xE90000000000004CLL;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5255646567617473, 0xE90000000000004CLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0x7542646567617473 && a2 == 0xEC000000656C646ELL)
  {
    v8 = 0xEC000000656C646ELL;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7542646567617473, 0xEC000000656C646ELL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_24;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease(0xE900000000000070);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100040518()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004053C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10004054C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158FE8;
  if (!qword_100158FE8)
  {
    v1 = sub_100011CE4(&qword_100158F08);
    sub_100012534(&qword_100158F48, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_100012534(&qword_100158FF0, type metadata accessor for DriverBinEntry, (uint64_t)&unk_100110570);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100158FE8);
  }
  return result;
}

uint64_t sub_1000405E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005C88(&qword_100158EF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100040628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DriverBinEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004066C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100157F00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000406B4()
{
  return sub_10004071C(&OBJC_IVAR____TtC10driverkitd16DriverBinManager_applicationManager);
}

uint64_t sub_1000406C0(uint64_t a1)
{
  return sub_10004076C(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager_applicationManager);
}

void *sub_1000406CC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_applicationManager, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_100040710()
{
  return sub_10004071C(&OBJC_IVAR____TtC10driverkitd16DriverBinManager_activeDriversStateManager);
}

uint64_t sub_10004071C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE v4[24];

  v2 = (_QWORD *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  return swift_retain(*v2);
}

uint64_t sub_100040760(uint64_t a1)
{
  return sub_10004076C(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager_activeDriversStateManager);
}

uint64_t sub_10004076C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = *v4;
  *v4 = a1;
  return swift_release(v5);
}

void *sub_1000407B8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_activeDriversStateManager, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_1000407FC()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_100040844(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

void *sub_100040894(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_1000408D8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  sub_10004092C(a1, a2, a3);
  return v7;
}

uint64_t sub_10004092C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;

  *(_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_applicationManager) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_activeDriversStateManager) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers) = _swiftEmptyArrayStorage;
  v7 = OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock;
  *(_QWORD *)(v3 + v7) = objc_msgSend(objc_allocWithZone((Class)NSRecursiveLock), "init");
  v8 = v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v8, 1, 1, v9);
  v11(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation, 1, 1, v9);
  v12 = (_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_stateManagerQueue) = a1;
  sub_100004E2C(a3, v3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v3 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory, a2, v9);
  return v3;
}

uint64_t sub_100040A54(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 168);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 160))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for ApplicationManager();
    sub_1000CD228(v1, (uint64_t)&off_100147550, v7, (uint64_t)&off_1001463D8);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100040AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t active;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v4);
  if (result)
  {
    v6 = result;
    active = type metadata accessor for ActiveDriversStateManager();
    sub_1000CD228(v1, (uint64_t)&off_100147550, active, (uint64_t)&off_100146760);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100040B2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100040C78(&OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation, 0x696C702E6F666E49, 0xEA00000000007473, a1);
}

uint64_t sub_100040B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88((uint64_t *)&unk_10015BA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040B98(uint64_t a1)
{
  return sub_100040E1C(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation);
}

void (*sub_100040BA4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v3[7] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for URL(0);
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[10] = malloc(v7);
  v8 = malloc(v7);
  v3[11] = v8;
  sub_100040B2C((uint64_t)v8);
  return sub_100040C40;
}

void sub_100040C40(uint64_t a1, char a2)
{
  sub_100040FA0(a1, a2, &OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation);
}

uint64_t sub_100040C4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100040C78(&OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation, 0x6F666E497478654ELL, 0xEE007473696C702ELL, a1);
}

uint64_t sub_100040C78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];
  _BYTE v20[24];

  v9 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v10 = __chkstk_darwin(v9);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v14 = &v19[-v13];
  v15 = v4 + *a1;
  swift_beginAccess(v15, v20, 0, 0);
  sub_100019E1C(v15, (uint64_t)v14, (uint64_t *)&unk_10015BA60);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v17 + 32))(a4, v14, v16);
  sub_1000124F8((uint64_t)v14, (uint64_t *)&unk_10015BA60);
  URL.appendingPathComponent(_:)(a2, a3);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16))(v12, a4, v16);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
  swift_beginAccess(v15, v19, 33, 0);
  sub_100040B50((uint64_t)v12, v15);
  return swift_endAccess(v19);
}

uint64_t sub_100040E10(uint64_t a1)
{
  return sub_100040E1C(a1, &OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation);
}

uint64_t sub_100040E1C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  v5 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v5);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 32))(v7, a1, v8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  v10 = v2 + *a2;
  swift_beginAccess(v10, v13, 33, 0);
  sub_100040B50((uint64_t)v7, v10);
  return swift_endAccess(v13);
}

void (*sub_100040EF8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v3[7] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for URL(0);
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[10] = malloc(v7);
  v8 = malloc(v7);
  v3[11] = v8;
  sub_100040C4C((uint64_t)v8);
  return sub_100040F94;
}

void sub_100040F94(uint64_t a1, char a2)
{
  sub_100040FA0(a1, a2, &OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation);
}

void sub_100040FA0(uint64_t a1, char a2, _QWORD *a3)
{
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD **)a1;
  v6 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(void **)(*(_QWORD *)a1 + 88);
  if ((a2 & 1) != 0)
  {
    v7 = v4[8];
    v8 = v4[9];
    v10 = v4[6];
    v9 = (void *)v4[7];
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v8 + 16))(v4[10], v4[11], v7);
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v9, v6, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v9, 0, 1, v7);
    v11 = v10 + *a3;
    swift_beginAccess(v11, v4, 33, 0);
    sub_100040B50((uint64_t)v9, v11);
    swift_endAccess(v4);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v7);
  }
  else
  {
    v12 = v4[8];
    v13 = v4[9];
    v14 = v4[6];
    v9 = (void *)v4[7];
    (*(void (**)(void *, _QWORD, uint64_t))(v13 + 32))(v9, v4[11], v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    v15 = v14 + *a3;
    swift_beginAccess(v15, v4 + 3, 33, 0);
    sub_100040B50((uint64_t)v9, v15);
    swift_endAccess(v4 + 3);
  }
  free(v5);
  free(v6);
  free(v9);
  free(v4);
}

uint64_t sub_1000410FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v3 = type metadata accessor for DriverBinEntry(0);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  v4 = __chkstk_darwin(v3);
  v39 = (uint64_t)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v38 = (uint64_t)v33 - v6;
  v7 = type metadata accessor for URL(0);
  v43 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (!v11)
    return (uint64_t)v12;
  v33[1] = v1;
  v44 = _swiftEmptyArrayStorage;
  v42 = v8;
  sub_10003DEB4(0, v11, 0);
  result = sub_1000109E8(v42);
  v15 = result;
  v16 = v42;
  v17 = 0;
  v18 = v42 + 64;
  v19 = *(_BYTE *)(v42 + 32);
  v33[0] = v42 + 88;
  v36 = v10;
  v37 = v7;
  v34 = v14;
  v35 = v42 + 64;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << v19)
  {
    v21 = (unint64_t)v15 >> 6;
    if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(v16 + 36) != (_DWORD)v14)
      goto LABEL_28;
    v22 = v38;
    sub_100012408(*(_QWORD *)(v16 + 56) + *(_QWORD *)(v40 + 72) * v15, v38, type metadata accessor for DriverBinEntry);
    v23 = v22;
    v24 = v39;
    sub_10001244C(v23, v39, type metadata accessor for DriverBinEntry);
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v10, v24 + *(int *)(v41 + 24), v7);
    sub_100012490(v24, type metadata accessor for DriverBinEntry);
    v12 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
    {
      sub_10003DEB4(0, v12[2] + 1, 1);
      v12 = v44;
    }
    v26 = v12[2];
    v25 = v12[3];
    if (v26 >= v25 >> 1)
    {
      sub_10003DEB4(v25 > 1, v26 + 1, 1);
      v12 = v44;
    }
    v12[2] = v26 + 1;
    v27 = (unint64_t)v12
        + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))
        + *(_QWORD *)(v43 + 72) * v26;
    v10 = v36;
    v7 = v37;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v43 + 32))(v27, v36, v37);
    v44 = v12;
    v16 = v42;
    v19 = *(_BYTE *)(v42 + 32);
    v20 = 1 << v19;
    if (v15 >= 1 << v19)
      goto LABEL_29;
    v18 = v35;
    v28 = *(_QWORD *)(v35 + 8 * v21);
    if ((v28 & (1 << v15)) == 0)
      goto LABEL_30;
    LODWORD(v14) = v34;
    if (*(_DWORD *)(v42 + 36) != (_DWORD)v34)
      goto LABEL_31;
    v29 = v28 & (-2 << (v15 & 0x3F));
    if (v29)
    {
      v20 = __clz(__rbit64(v29)) | v15 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = v21 + 1;
      v31 = (v20 + 63) >> 6;
      if (v21 + 1 < v31)
      {
        v32 = *(_QWORD *)(v35 + 8 * v30);
        if (!v32)
        {
          v30 = v21 + 2;
          if (v21 + 2 >= v31)
            goto LABEL_4;
          v32 = *(_QWORD *)(v35 + 8 * v30);
          if (!v32)
          {
            while (v31 - 3 != v21)
            {
              v32 = *(_QWORD *)(v33[0] + 8 * v21++);
              if (v32)
              {
                v30 = v21 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        v20 = __clz(__rbit64(v32)) + (v30 << 6);
      }
    }
LABEL_4:
    ++v17;
    v15 = v20;
    if (v17 == v11)
      return (uint64_t)v12;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

char *sub_100041464()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void (*v23)(char *);
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  _BOOL4 v29;
  char *v30;
  uint8_t *v31;
  uint8_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  char *result;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  void *v88;
  uint64_t v89;
  uint8_t *v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(char *, uint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *);
  char *v104;
  uint64_t v105;
  uint64_t v106[3];
  uint64_t v107;
  uint64_t v108;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v103 = *(void (**)(char *))(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v89 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v89 - v14;
  __chkstk_darwin(v13);
  v104 = (char *)&v89 - v16;
  v17 = OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock], "lock");
  v18 = (uint64_t *)&v0[OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo];
  v19 = *(_QWORD *)&v0[OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo];
  if (v19)
  {
    v20 = v18[2];
    v21 = *(void **)&v1[v17];
    swift_bridgeObjectRetain(v19);
    objc_msgSend(v21, "unlock", swift_bridgeObjectRetain(v20).n128_f64[0]);
    return (char *)v19;
  }
  v100 = v5;
  v101 = v3;
  v93 = v18;
  v94 = v9;
  v95 = v12;
  v96 = v15;
  v22 = sub_1000D31B4();
  v23 = (void (*)(_QWORD))v103;
  v24 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v103 + 2);
  v102 = v22;
  v99 = v24;
  ((void (*)(char *))v24)(v104);
  v25 = swift_retain_n(v1, 2);
  v26 = Logger.logObject.getter(v25);
  v27 = v6;
  v28 = static os_log_type_t.default.getter(v26);
  v29 = os_log_type_enabled(v26, v28);
  v30 = v1;
  v97 = v27;
  v98 = v17;
  if (v29)
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v92 = swift_slowAlloc(32, -1);
    v106[0] = v92;
    v91 = v31;
    *(_DWORD *)v31 = 136315138;
    v32 = v31 + 12;
    v90 = v31 + 4;
    v33 = v100;
    v34 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 280))();
    v35 = URL.path.getter(v34);
    v37 = v36;
    v38 = v101;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v33, v2);
    v105 = sub_1000055A0(v35, v37, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v90, v32);
    swift_release_n(v30, 2);
    swift_bridgeObjectRelease(v37);
    v39 = v91;
    _os_log_impl((void *)&_mh_execute_header, v26, v28, "Loading dextbin info, reading plist file from %s", v91, 0xCu);
    v40 = v92;
    swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

    v41 = v30;
    v42 = (void (*)(char *))*((_QWORD *)v23 + 1);
    v43 = v97;
    v42(v104);
  }
  else
  {

    swift_release_n(v1, 2);
    v41 = v1;
    v42 = (void (*)(char *))*((_QWORD *)v23 + 1);
    v43 = v27;
    ((void (*)(char *, uint64_t))v42)(v104, v27);
    v33 = v100;
    v38 = v101;
  }
  v44 = *((_QWORD *)v41 + 5);
  v45 = *((_QWORD *)v41 + 6);
  sub_100004DE4((_QWORD *)v41 + 2, v44);
  sub_10010731C(v44, v45);
  v46 = v107;
  v47 = v108;
  sub_100004DE4(v106, v107);
  v48 = *(uint64_t (**)(void))(*(_QWORD *)v41 + 280);
  v104 = v41;
  v49 = v48();
  v50 = URL.path.getter(v49);
  v52 = v51;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v33, v2);
  v53 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 16))(v50, v52, 0, v46, v47);
  v55 = v54;
  swift_bridgeObjectRelease(v52);
  v56 = sub_100005D08(v106);
  if (v55 >> 60 != 15)
  {
    v71 = v96;
    v72 = v43;
    v73 = v99(v96, v102, v43);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.default.getter(v74);
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Loading dextbin info, decoding plist", v76, 2u);
      v77 = v76;
      v72 = v43;
      v71 = v96;
      swift_slowDealloc(v77, -1, -1);
    }

    v103 = v42;
    ((void (*)(char *, uint64_t))v42)(v71, v72);
    sub_1000122B4(v53, v55);
    v19 = sub_10003C9A0(v53, v55);
    v80 = v79;
    v82 = v81;
    sub_100021610(v53, v55);
    v83 = v93;
    v84 = *v93;
    v85 = v93[1];
    v86 = v93[2];
    *v93 = v19;
    v83[1] = v80;
    v83[2] = v82;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v82);
    sub_100045978(v84, v85, v86);
    v88 = *(void **)&v104[v98];
    goto LABEL_15;
  }
  v57 = errno.getter(v56);
  result = strerror(v57);
  if (result)
  {
    v59 = String.init(cString:)(result);
    v61 = v60;
    v62 = v95;
    v99(v95, v102, v43);
    swift_bridgeObjectRetain(v61);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = v59;
      v67 = (uint8_t *)swift_slowAlloc(12, -1);
      v68 = swift_slowAlloc(32, -1);
      v106[0] = v68;
      *(_DWORD *)v67 = 136315138;
      swift_bridgeObjectRetain(v61);
      v105 = sub_1000055A0(v66, v61, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v67 + 4, v67 + 12);
      swift_bridgeObjectRelease_n(v61, 3);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "contentsOfFile failed to read plist: %s", v67, 0xCu);
      swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v67, -1, -1);

      v69 = v62;
      v70 = v97;
    }
    else
    {

      swift_bridgeObjectRelease_n(v61, 2);
      v69 = v62;
      v70 = v43;
    }
    ((void (*)(char *, uint64_t))v42)(v69, v70);
    v78 = v98;
    v19 = sub_10003AAC8();
    v88 = *(void **)&v104[v78];
LABEL_15:
    objc_msgSend(v88, "unlock", v87);
    return (char *)v19;
  }
  __break(1u);
  return result;
}

uint64_t sub_100041CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v25[2];

  v25[0] = a2;
  v25[1] = a3;
  v4 = type metadata accessor for ApplicationRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005C88((uint64_t *)&unk_10015ABF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v25 - v12;
  v14 = (char *)v25 + *(int *)(v11 + 48) - v12;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17(v13, a1, v15);
  sub_100012408(v25[0], (uint64_t)v14, type metadata accessor for DriverBinEntry);
  v18 = (uint64_t)&v10[*(int *)(v7 + 48)];
  v17(v10, (uint64_t)v13, v15);
  sub_100012408((uint64_t)v14, v18, type metadata accessor for DriverBinEntry);
  v19 = type metadata accessor for DriverBinEntry(0);
  sub_100012408(v18 + *(int *)(v19 + 20), (uint64_t)v6, type metadata accessor for ApplicationRecord);
  sub_100012490(v18, type metadata accessor for DriverBinEntry);
  v20 = (uint64_t *)&v6[*(int *)(v4 + 32)];
  v21 = *v20;
  v22 = v20[1];
  sub_1000122B4(*v20, v22);
  sub_100012490((uint64_t)v6, type metadata accessor for ApplicationRecord);
  sub_100021198(v21, v22);
  LOBYTE(v17) = v23;
  sub_100011F40(v21, v22);
  sub_1000124F8((uint64_t)v13, (uint64_t *)&unk_10015ABF0);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v15);
  return v17 & 1;
}

_UNKNOWN **sub_100041EB4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t active;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(void);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, uint64_t, uint64_t);
  char *v115;
  uint64_t v116;
  NSObject *v117;
  uint8_t *v118;
  int64_t v119;
  _QWORD *v120;
  uint64_t v121;
  int64_t v122;
  int v123;
  int v124;
  char v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  Swift::String v131;
  void *object;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  int64_t v139;
  uint64_t v140;
  char v141;
  __int128 v142;
  char *v143;
  char *v144;
  void (*v145)(char *, uint64_t);
  char *v146;
  NSObject *v147;
  uint8_t *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  NSObject *v159;
  os_log_type_t v160;
  uint8_t *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(_QWORD, _QWORD);
  uint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(char *, uint64_t, uint64_t);
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void (*v197)(char *, uint64_t, char *);
  char *v198;
  char *v199;
  uint64_t (*v200)(char *, char *);
  uint64_t v201;
  NSObject *v202;
  os_log_type_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(char *, uint64_t, char *);
  char *v218;
  char *v219;
  uint64_t (*v220)(char *, char *);
  uint64_t v221;
  NSObject *v222;
  os_log_type_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  void (*v237)(_QWORD, _QWORD);
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  void *v269;
  unint64_t v270;
  _QWORD *v271;
  BOOL v272;
  unint64_t v273;
  unint64_t v274;
  _QWORD *v275;
  BOOL v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t (*v279)(char *, uint64_t, uint64_t);
  uint64_t v280;
  uint64_t v281;
  NSObject *v282;
  os_log_type_t v283;
  uint8_t *v284;
  void (*v285)(char *, uint64_t);
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  NSObject *v295;
  uint64_t v296;
  uint8_t *v297;
  uint8_t *v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  NSObject *v316;
  os_log_type_t v317;
  uint8_t *v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  int v327;
  char *v328;
  char *v329;
  uint64_t v330;
  void *v331;
  void *v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  void *v338;
  Swift::String v339;
  Swift::String v340;
  Swift::String v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  _QWORD *v347;
  unint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  char *v354;
  uint64_t v355;
  uint64_t v356;
  NSObject *v357;
  os_log_type_t v358;
  uint8_t *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  void (*v363)(char *, uint64_t);
  unint64_t v364;
  unint64_t v365;
  uint64_t v367;
  void (*v368)(char *, uint64_t);
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  unint64_t *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  void (*v382)(char *, uint64_t, uint64_t);
  uint8_t *v383;
  NSObject *v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  char *v388;
  char *v389;
  char *v390;
  char *v391;
  char *v392;
  char *v393;
  char *v394;
  char *v395;
  char *v396;
  char *v397;
  char *v398;
  _QWORD *v399;
  void *v400;
  uint64_t v401;
  uint64_t v402;
  char *v403;
  char *v404;
  uint64_t v405;
  char *v406;
  _QWORD *v407;
  char *v408;
  char *v409;
  char *v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  char *v416;
  char *v417;
  char *v418;
  char *v419;
  uint64_t *v420;
  char *v421;
  uint64_t v422;
  unint64_t v423;
  __int128 v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  char *v429;
  char *v430;
  uint64_t v431;
  _QWORD *v432;
  char *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  char *v437;
  void (**v438)(char *, uint64_t, uint64_t);
  char *v439;
  unint64_t v440;
  _QWORD *v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  _QWORD *v445;
  uint64_t __s2;
  _QWORD v447[2];
  uint64_t __s1;
  _QWORD v449[2];
  uint64_t v450;
  uint64_t v451;

  v1 = v0;
  v434 = type metadata accessor for ApplicationRecord(0);
  v422 = *(_QWORD *)(v434 - 8);
  v2 = __chkstk_darwin(v434);
  v419 = (char *)&v382 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v418 = (char *)&v382 - v5;
  v6 = __chkstk_darwin(v4);
  v417 = (char *)&v382 - v7;
  __chkstk_darwin(v6);
  v398 = (char *)&v382 - v8;
  v9 = sub_100005C88(&qword_100158280);
  v10 = __chkstk_darwin(v9);
  v420 = (uint64_t *)((char *)&v382 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v430 = (char *)&v382 - v12;
  v414 = type metadata accessor for DriverBinEntry(0);
  v423 = *(_QWORD *)(v414 - 8);
  v13 = __chkstk_darwin(v414);
  v415 = (char *)&v382 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v413 = (uint64_t)&v382 - v16;
  v17 = __chkstk_darwin(v15);
  v416 = (char *)&v382 - v18;
  v19 = __chkstk_darwin(v17);
  v412 = (uint64_t)&v382 - v20;
  __chkstk_darwin(v19);
  v438 = (void (**)(char *, uint64_t, uint64_t))((char *)&v382 - v21);
  v404 = (char *)type metadata accessor for UUID(0);
  v433 = (char *)*((_QWORD *)v404 - 1);
  v22 = __chkstk_darwin(v404);
  v411 = (char *)&v382 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v410 = (char *)&v382 - v25;
  v26 = __chkstk_darwin(v24);
  v409 = (char *)&v382 - v27;
  v28 = __chkstk_darwin(v26);
  v408 = (char *)&v382 - v29;
  __chkstk_darwin(v28);
  v439 = (char *)&v382 - v30;
  v31 = sub_100005C88(&qword_100157EF8);
  v32 = __chkstk_darwin(v31);
  v432 = (void (**)(char *, uint64_t, uint64_t))((char *)&v382 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v32);
  v431 = (uint64_t)&v382 - v34;
  v435 = type metadata accessor for Logger(0);
  v35 = *(_QWORD *)(v435 - 8);
  v36 = __chkstk_darwin(v435);
  v396 = (char *)&v382 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v406 = (char *)&v382 - v39;
  v40 = __chkstk_darwin(v38);
  v425 = (char *)&v382 - v41;
  v42 = __chkstk_darwin(v40);
  v391 = (char *)&v382 - v43;
  v44 = __chkstk_darwin(v42);
  v392 = (char *)&v382 - v45;
  v46 = __chkstk_darwin(v44);
  v397 = (char *)&v382 - v47;
  v48 = __chkstk_darwin(v46);
  v428 = (char *)&v382 - v49;
  v50 = __chkstk_darwin(v48);
  v429 = (char *)&v382 - v51;
  v52 = __chkstk_darwin(v50);
  v421 = (char *)&v382 - v53;
  v54 = __chkstk_darwin(v52);
  v394 = (char *)&v382 - v55;
  __chkstk_darwin(v54);
  v403 = (char *)&v382 - v56;
  active = type metadata accessor for ActiveDriverInfo(0);
  v395 = *(char **)(active - 8);
  __chkstk_darwin(active);
  v59 = (char *)&v382 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for URL(0);
  v426 = *(_QWORD *)(v60 - 8);
  v61 = __chkstk_darwin(v60);
  v388 = (char *)&v382 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __chkstk_darwin(v61);
  v389 = (char *)&v382 - v64;
  v65 = __chkstk_darwin(v63);
  v390 = (char *)&v382 - v66;
  v67 = __chkstk_darwin(v65);
  v393 = (char *)&v382 - v68;
  v69 = __chkstk_darwin(v67);
  v437 = (char *)&v382 - v70;
  v71 = __chkstk_darwin(v69);
  v436 = (uint64_t)&v382 - v72;
  __chkstk_darwin(v71);
  v74 = (char *)&v382 - v73;
  v445 = _swiftEmptyArrayStorage;
  v401 = OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock;
  objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_recursiveLock), "lock");
  v75 = v0 + 2;
  v76 = v0[5];
  v77 = v1[6];
  v399 = v75;
  sub_100004DE4(v75, v76);
  sub_10010731C(v76, v77);
  v78 = v451;
  sub_100004DE4(&__s1, v450);
  v79 = *(uint64_t (**)(void))(v78 + 24);
  *(_QWORD *)&v424 = (char *)v1 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory;
  v80 = v79();
  v407 = v1;
  v427 = v60;
  v440 = v35;
  swift_bridgeObjectRelease(v80);
  v81 = sub_100005D08(&__s1);
  v425 = 0;
  v82 = v416;
  v83 = v407;
  v84 = (*(uint64_t (**)(uint64_t))(*v407 + 360))(v81);
  v402 = v85;
  v87 = v86;
  v442 = sub_10003AAC8();
  v443 = v88;
  v444 = v89;
  v90 = sub_100045E28(v84);
  v91 = (*(uint64_t (**)(uint64_t))(*v83 + 184))(v90);
  if (!v91)
  {
    __break(1u);
    goto LABEL_122;
  }
  v92 = v91;
  v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 176))(v91);
  swift_release(v92);
  v94 = *(_QWORD *)(v93 + 16);
  v405 = v84;
  v400 = v87;
  if (v94)
  {
    __s1 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10003DEB4(0, v94, 0);
    v95 = (v395[80] + 32) & ~(unint64_t)v395[80];
    *(_QWORD *)&v424 = v93;
    v96 = v93 + v95;
    v97 = *((_QWORD *)v395 + 9);
    v98 = v426;
    do
    {
      sub_100012408(v96, (uint64_t)v59, type metadata accessor for ActiveDriverInfo);
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v74, v59, v60);
      sub_100012490((uint64_t)v59, type metadata accessor for ActiveDriverInfo);
      v99 = (_QWORD *)__s1;
      if ((swift_isUniquelyReferenced_nonNull_native(__s1) & 1) == 0)
      {
        sub_10003DEB4(0, v99[2] + 1, 1);
        v99 = (_QWORD *)__s1;
      }
      v101 = v99[2];
      v100 = v99[3];
      if (v101 >= v100 >> 1)
      {
        sub_10003DEB4(v100 > 1, v101 + 1, 1);
        v99 = (_QWORD *)__s1;
      }
      v99[2] = v101 + 1;
      v98 = v426;
      v102 = (unint64_t)v99
           + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))
           + *(_QWORD *)(v98 + 72) * v101;
      v60 = v427;
      (*(void (**)(unint64_t, char *, uint64_t))(v426 + 32))(v102, v74, v427);
      __s1 = (uint64_t)v99;
      v96 += v97;
      --v94;
    }
    while (v94);
    swift_bridgeObjectRelease(v424);
    v84 = v405;
  }
  else
  {
    swift_bridgeObjectRelease(v93);
    v99 = _swiftEmptyArrayStorage;
  }
  v103 = (_QWORD *)sub_100011D28((uint64_t)v99);
  swift_bridgeObjectRelease(v99);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v84);
  v104 = v425;
  v425 = (char *)sub_10004A720(v105, v103);
  swift_bridgeObjectRelease(v84);
  swift_bridgeObjectRelease(v103);
  v106 = sub_10003ACAC(v84);
  v107 = (_QWORD *)sub_100011D28(v106);
  swift_bridgeObjectRelease(v106);
  v108 = (uint64_t)v407;
  swift_retain(v407);
  v109 = sub_10004ACD0((uint64_t)v103, v108, v107);
  v395 = v104;
  swift_release(v108);
  swift_bridgeObjectRelease(v107);
  v110 = v435;
  v111 = v440;
  v112 = (uint64_t)v415;
  if (*(_QWORD *)(v109 + 16))
  {
    v113 = sub_1000D31B4();
    v114 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 16);
    v115 = v403;
    v114(v403, v113, v110);
    v116 = swift_retain(v109);
    v117 = Logger.logObject.getter(v116);
    LODWORD(v387) = static os_log_type_t.error.getter(v117);
    if (os_log_type_enabled(v117, (os_log_type_t)v387))
    {
      v384 = v117;
      v386 = v113;
      v118 = (uint8_t *)swift_slowAlloc(12, -1);
      v385 = swift_slowAlloc(32, -1);
      __s2 = v385;
      v383 = v118;
      *(_DWORD *)v118 = 136315138;
      v119 = *(_QWORD *)(v109 + 16);
      v120 = _swiftEmptyArrayStorage;
      *(_QWORD *)&v424 = v109;
      if (v119)
      {
        v121 = v109;
        v382 = v114;
        v441 = _swiftEmptyArrayStorage;
        sub_10000C958(0, v119, 0);
        v122 = sub_100045CA4(v109);
        v124 = v123;
        v126 = v125 & 1;
        v406 = (char *)(v121 + 56);
        do
        {
          if (v122 < 0 || v122 >= 1 << *(_BYTE *)(v121 + 32))
          {
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
            JUMPOUT(0x10004559CLL);
          }
          if (((*(_QWORD *)&v406[((unint64_t)v122 >> 3) & 0xFFFFFFFFFFFFF8] >> v122) & 1) == 0)
            goto LABEL_119;
          if (*(_DWORD *)(v121 + 36) != v124)
            goto LABEL_120;
          v127 = v426;
          v128 = v436;
          (*(void (**)(uint64_t, int64_t, uint64_t))(v426 + 16))(v436, *(_QWORD *)(v121 + 48) + *(_QWORD *)(v426 + 72) * v122, v60);
          v129 = v437;
          v130 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 32))(v437, v128, v60);
          __s1 = 8224;
          v449[0] = 0xE200000000000000;
          v131._countAndFlagsBits = URL.path.getter(v130);
          object = v131._object;
          String.append(_:)(v131);
          swift_bridgeObjectRelease(object);
          v133 = v60;
          v135 = __s1;
          v134 = v449[0];
          (*(void (**)(char *, uint64_t))(v127 + 8))(v129, v133);
          v120 = v441;
          if ((swift_isUniquelyReferenced_nonNull_native(v441) & 1) == 0)
          {
            sub_10000C958(0, v120[2] + 1, 1);
            v120 = v441;
          }
          v137 = v120[2];
          v136 = v120[3];
          if (v137 >= v136 >> 1)
          {
            sub_10000C958(v136 > 1, v137 + 1, 1);
            v120 = v441;
          }
          v120[2] = v137 + 1;
          v138 = &v120[2 * v137];
          v138[4] = v135;
          v138[5] = v134;
          v121 = v424;
          v139 = sub_100045D44(v122, v124, v126 & 1, v424);
          v122 = v139;
          v124 = v140;
          v126 = v141 & 1;
          --v119;
          v60 = v427;
        }
        while (v119);
        sub_10004AF40(v139, v140, v141 & 1);
        v111 = v440;
        v114 = v382;
      }
      v147 = v384;
      v148 = v383;
      __s1 = (uint64_t)v120;
      v149 = sub_100005C88((uint64_t *)&unk_10015A5D0);
      v150 = sub_100013C48();
      v151 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v149, v150);
      v153 = v152;
      swift_bridgeObjectRelease(v120);
      __s1 = sub_1000055A0(v151, v153, &__s2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s1, v449, v148 + 4, v148 + 12);
      v154 = v424;
      swift_release(v424);
      swift_bridgeObjectRelease(v154);
      swift_bridgeObjectRelease(v153);
      _os_log_impl((void *)&_mh_execute_header, v147, (os_log_type_t)v387, "Found actively used drivers that are missing:\n%s", v148, 0xCu);
      v155 = v385;
      swift_arrayDestroy(v385, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v155, -1, -1);
      swift_slowDealloc(v148, -1, -1);

      v145 = *(void (**)(char *, uint64_t))(v111 + 8);
      v110 = v435;
      v145(v403, v435);
      v146 = v394;
      v113 = v386;
    }
    else
    {

      swift_release(v109);
      swift_bridgeObjectRelease(v109);
      v145 = *(void (**)(char *, uint64_t))(v111 + 8);
      v145(v115, v110);
      v146 = v394;
    }
    v114(v146, v113, v110);
    v156 = v405;
    swift_bridgeObjectRetain_n(v405, 2);
    v157 = v400;
    v158 = swift_bridgeObjectRetain_n(v400, 2);
    v159 = Logger.logObject.getter(v158);
    v160 = static os_log_type_t.error.getter(v159);
    if (os_log_type_enabled(v159, v160))
    {
      v161 = (uint8_t *)swift_slowAlloc(12, -1);
      v162 = swift_slowAlloc(32, -1);
      __s1 = v162;
      v437 = (char *)v145;
      *(_DWORD *)v161 = 136315138;
      sub_10003BB0C(v156, v402, v157);
      v164 = v163;
      __s2 = sub_1000055A0(v165, v163, &__s1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v447, v161 + 4, v161 + 12);
      swift_bridgeObjectRelease_n(v157, 2);
      swift_bridgeObjectRelease_n(v156, 2);
      v166 = v415;
      swift_bridgeObjectRelease(v164);
      _os_log_impl((void *)&_mh_execute_header, v159, v160, "%s", v161, 0xCu);
      swift_arrayDestroy(v162, 1, (char *)&type metadata for Any + 8);
      v167 = v162;
      v110 = v435;
      swift_slowDealloc(v167, -1, -1);
      swift_slowDealloc(v161, -1, -1);

      v112 = (uint64_t)v166;
      ((void (*)(char *, uint64_t))v437)(v146, v110);
      v143 = v404;
      v144 = v433;
      v82 = v416;
    }
    else
    {

      swift_bridgeObjectRelease_n(v157, 2);
      swift_bridgeObjectRelease_n(v156, 2);
      v145(v146, v110);
      v143 = v404;
      v144 = v433;
      v82 = v416;
      v112 = (uint64_t)v415;
    }
  }
  else
  {
    swift_release(v109);
    v143 = v404;
    v144 = v433;
  }
  v168 = 0;
  v169 = 1 << v425[32];
  v170 = -1;
  if (v169 < 64)
    v170 = ~(-1 << v169);
  v171 = v170 & *((_QWORD *)v425 + 8);
  v172 = (unint64_t)(v169 + 63) >> 6;
  v386 = v172 - 1;
  v406 = (char *)v172;
  v387 = v172 - 5;
  v403 = v425 + 64;
  v394 = v425 + 104;
  *(_QWORD *)&v142 = 136315394;
  v424 = v142;
  v404 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v171)
    {
      v173 = v110;
      v174 = (uint64_t)v82;
      v436 = (v171 - 1) & v171;
      v437 = v168;
      v175 = __clz(__rbit64(v171)) | ((_QWORD)v168 << 6);
LABEL_37:
      v176 = v425;
      v177 = v144;
      v178 = (uint64_t)v432;
      (*((void (**)(_QWORD *, unint64_t, char *))v144 + 2))(v432, *((_QWORD *)v425 + 6) + *((_QWORD *)v144 + 9) * v175, v143);
      v179 = *((_QWORD *)v176 + 7) + *(_QWORD *)(v423 + 72) * v175;
      v180 = sub_100005C88((uint64_t *)&unk_10015ABF0);
      sub_100012408(v179, v178 + *(int *)(v180 + 48), type metadata accessor for DriverBinEntry);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v180 - 8) + 56))(v178, 0, 1, v180);
      v182 = (void (*)(_QWORD, _QWORD))v438;
      v181 = (uint64_t)v439;
      goto LABEL_45;
    }
    v183 = (uint64_t)(v168 + 1);
    if (__OFADD__(v168, 1))
    {
      __break(1u);
      __break(1u);
      JUMPOUT(0x100045580);
    }
    v173 = v110;
    if (v183 >= (uint64_t)v406)
    {
      v177 = v144;
      v185 = v168;
      v181 = (uint64_t)v439;
LABEL_43:
      v182 = (void (*)(_QWORD, _QWORD))v438;
      goto LABEL_44;
    }
    v184 = *(_QWORD *)&v403[8 * v183];
    v181 = (uint64_t)v439;
    if (v184)
      goto LABEL_41;
    v177 = v144;
    v185 = v168 + 1;
    v182 = (void (*)(_QWORD, _QWORD))v438;
    if ((uint64_t)(v168 + 2) < (uint64_t)v406)
    {
      v184 = *(_QWORD *)&v403[8 * (_QWORD)(v168 + 2)];
      if (v184)
      {
        v183 = (uint64_t)(v168 + 2);
        v144 = v177;
LABEL_41:
        v174 = (uint64_t)v82;
        v436 = (v184 - 1) & v184;
        v437 = (char *)v183;
        v175 = __clz(__rbit64(v184)) + (v183 << 6);
        goto LABEL_37;
      }
      v185 = v168 + 2;
      if ((uint64_t)(v168 + 3) < (uint64_t)v406)
      {
        v184 = *(_QWORD *)&v403[8 * (_QWORD)(v168 + 3)];
        if (v184)
        {
          v183 = (uint64_t)(v168 + 3);
          v144 = v177;
          goto LABEL_41;
        }
        v183 = (uint64_t)(v168 + 4);
        v185 = v168 + 3;
        if ((uint64_t)(v168 + 4) < (uint64_t)v406)
        {
          v184 = *(_QWORD *)&v403[8 * v183];
          v144 = v177;
          if (v184)
            goto LABEL_41;
          while ((char *)v387 != v168)
          {
            v184 = *(_QWORD *)&v394[8 * (_QWORD)v168++];
            if (v184)
            {
              v183 = (uint64_t)(v168 + 4);
              goto LABEL_41;
            }
          }
          v185 = (char *)v386;
          goto LABEL_43;
        }
      }
    }
LABEL_44:
    v174 = (uint64_t)v82;
    v186 = sub_100005C88((uint64_t *)&unk_10015ABF0);
    v187 = v432;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 56))(v432, 1, 1, v186);
    v436 = 0;
    v437 = v185;
    v178 = (uint64_t)v187;
LABEL_45:
    v188 = v431;
    sub_1000260AC(v178, v431, &qword_100157EF8);
    v189 = sub_100005C88((uint64_t *)&unk_10015ABF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v189 - 8) + 48))(v188, 1, v189) == 1)
      break;
    v190 = v188 + *(int *)(v189 + 48);
    (*((void (**)(uint64_t, uint64_t, char *))v177 + 4))(v181, v188, v143);
    sub_10001244C(v190, (uint64_t)v182, type metadata accessor for DriverBinEntry);
    LOBYTE(v190) = static UUID.== infix(_:_:)(v182, v181);
    v191 = sub_1000D31B4();
    v192 = *(void (**)(char *, uint64_t, uint64_t))(v440 + 16);
    if ((v190 & 1) != 0)
    {
      v193 = v421;
      v194 = v173;
      v192(v421, v191, v173);
      v195 = v412;
      sub_100012408((uint64_t)v182, v412, type metadata accessor for DriverBinEntry);
      v196 = v174;
      sub_100012408(v195, v174, type metadata accessor for DriverBinEntry);
      sub_100012490(v195, type metadata accessor for DriverBinEntry);
      v197 = (void (*)(char *, uint64_t, char *))*((_QWORD *)v177 + 2);
      v198 = v408;
      v197(v408, v181, v143);
      v199 = v409;
      v197(v409, (uint64_t)v198, v143);
      v200 = (uint64_t (*)(char *, char *))*((_QWORD *)v177 + 1);
      v201 = v200(v198, v143);
      v202 = Logger.logObject.getter(v201);
      v203 = static os_log_type_t.default.getter(v202);
      if (os_log_type_enabled(v202, v203))
      {
        v204 = swift_slowAlloc(22, -1);
        v205 = swift_slowAlloc(64, -1);
        __s1 = v205;
        *(_DWORD *)v204 = v424;
        v206 = sub_100012534(&qword_100157EB8, type metadata accessor for DriverBinEntry, (uint64_t)&unk_1001105E8);
        v207 = dispatch thunk of CustomStringConvertible.description.getter(v414, v206);
        v209 = v208;
        *(_QWORD *)(v204 + 4) = sub_1000055A0(v207, v208, &__s1);
        swift_bridgeObjectRelease(v209);
        sub_100012490(v196, type metadata accessor for DriverBinEntry);
        *(_WORD *)(v204 + 12) = 2080;
        v210 = sub_100012534(&qword_100158EF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v211 = dispatch thunk of CustomStringConvertible.description.getter(v143, v210);
        v213 = v212;
        *(_QWORD *)(v204 + 14) = sub_1000055A0(v211, v212, &__s1);
        swift_bridgeObjectRelease(v213);
        v200(v199, v143);
        _os_log_impl((void *)&_mh_execute_header, v202, v203, "Copying old active bin entry %s with bin number %s", (uint8_t *)v204, 0x16u);
        swift_arrayDestroy(v205, 2, v404);
        v214 = v440;
        swift_slowDealloc(v205, -1, -1);
        v215 = v204;
        v110 = v435;
        swift_slowDealloc(v215, -1, -1);

        (*(void (**)(char *, uint64_t))(v214 + 8))(v421, v110);
      }
      else
      {
        sub_100012490(v196, type metadata accessor for DriverBinEntry);
        v200(v199, v143);

        (*(void (**)(char *, uint64_t))(v440 + 8))(v193, v194);
        v110 = v194;
      }
      v82 = (char *)v196;
      v237 = (void (*)(_QWORD, _QWORD))v438;
      sub_10003B530((uint64_t)v438);
      sub_100012490((uint64_t)v237, type metadata accessor for DriverBinEntry);
      v200(v439, v143);
      v112 = (uint64_t)v415;
      v171 = v436;
      v168 = v437;
      v144 = v433;
    }
    else
    {
      v192(v429, v191, v173);
      v216 = v413;
      sub_100012408((uint64_t)v182, v413, type metadata accessor for DriverBinEntry);
      sub_100012408(v216, v112, type metadata accessor for DriverBinEntry);
      sub_100012490(v216, type metadata accessor for DriverBinEntry);
      v217 = (void (*)(char *, uint64_t, char *))*((_QWORD *)v177 + 2);
      v218 = v410;
      v217(v410, v181, v143);
      v219 = v411;
      v217(v411, (uint64_t)v218, v143);
      v220 = (uint64_t (*)(char *, char *))*((_QWORD *)v177 + 1);
      v221 = v220(v218, v143);
      v222 = Logger.logObject.getter(v221);
      v223 = static os_log_type_t.error.getter(v222);
      if (os_log_type_enabled(v222, v223))
      {
        v224 = swift_slowAlloc(22, -1);
        v225 = swift_slowAlloc(64, -1);
        __s1 = v225;
        *(_DWORD *)v224 = v424;
        v226 = sub_100012534(&qword_100157EB8, type metadata accessor for DriverBinEntry, (uint64_t)&unk_1001105E8);
        v227 = dispatch thunk of CustomStringConvertible.description.getter(v414, v226);
        v229 = v228;
        *(_QWORD *)(v224 + 4) = sub_1000055A0(v227, v228, &__s1);
        swift_bridgeObjectRelease(v229);
        sub_100012490(v112, type metadata accessor for DriverBinEntry);
        *(_WORD *)(v224 + 12) = 2080;
        v230 = sub_100012534(&qword_100158EF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v231 = dispatch thunk of CustomStringConvertible.description.getter(v143, v230);
        v233 = v232;
        *(_QWORD *)(v224 + 14) = sub_1000055A0(v231, v232, &__s1);
        swift_bridgeObjectRelease(v233);
        v220(v219, v143);
        _os_log_impl((void *)&_mh_execute_header, v222, v223, "Internal error: Bin entry %s was inserted with incorrect bin number %s", (uint8_t *)v224, 0x16u);
        swift_arrayDestroy(v225, 2, (char *)&type metadata for Any + 8);
        v234 = v225;
        v235 = v440;
        swift_slowDealloc(v234, -1, -1);
        v236 = v224;
        v110 = v435;
        swift_slowDealloc(v236, -1, -1);

        (*(void (**)(char *, uint64_t))(v235 + 8))(v429, v110);
      }
      else
      {

        v220(v219, v143);
        sub_100012490(v112, type metadata accessor for DriverBinEntry);
        v110 = v435;
        (*(void (**)(char *, uint64_t))(v440 + 8))(v429, v435);
      }
      sub_100012490((uint64_t)v438, type metadata accessor for DriverBinEntry);
      v220(v439, v143);
      v82 = v416;
      v144 = v433;
      v171 = v436;
      v168 = v437;
    }
  }
  v238 = swift_release(v425);
  v239 = (*(uint64_t (**)(uint64_t))(*v407 + 160))(v238);
  if (!v239)
  {
LABEL_122:
    __break(1u);
    JUMPOUT(0x100045674);
  }
  v240 = v239;
  v241 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v239 + 216))(v239);
  swift_release(v240);
  v242 = 0;
  v243 = *(_QWORD *)(v241 + 64);
  v432 = (_QWORD *)(v241 + 64);
  v244 = 1 << *(_BYTE *)(v241 + 32);
  v245 = -1;
  if (v244 < 64)
    v245 = ~(-1 << v244);
  v246 = v245 & v243;
  v247 = (unint64_t)(v244 + 63) >> 6;
  v421 = (char *)(v247 - 1);
  v436 = v247;
  v423 = v247 - 5;
  v437 = (char *)v241;
  v425 = (char *)(v241 + 104);
  v433 = (char *)&type metadata for Any + 8;
  v248 = (uint64_t)v398;
  v249 = (uint64_t)v420;
  v250 = (uint64_t)v430;
  v251 = v440;
  if (v246)
  {
    v438 = (void (**)(char *, uint64_t, uint64_t))((v246 - 1) & v246);
    v439 = 0;
    v252 = __clz(__rbit64(v246));
    goto LABEL_71;
  }
  v259 = 1;
  if (v436 <= 1)
  {
    v261 = 0;
LABEL_76:
    v262 = sub_100005C88(&qword_100158288);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v262 - 8) + 56))(v249, 1, 1, v262);
    v438 = 0;
    v439 = (char *)v261;
    goto LABEL_77;
  }
  v260 = v432[1];
  if (!v260)
  {
    v261 = 1;
    if (v436 > 2)
    {
      v260 = v432[2];
      if (v260)
      {
        v259 = 2;
        goto LABEL_74;
      }
      v261 = 2;
      if (v436 > 3)
      {
        v260 = v432[3];
        if (v260)
        {
          v259 = 3;
          goto LABEL_74;
        }
        v259 = 4;
        v261 = 3;
        if (v436 > 4)
        {
          v260 = v432[4];
          if (v260)
            goto LABEL_74;
          while (v423 != v242)
          {
            v260 = *(_QWORD *)&v425[8 * v242++];
            if (v260)
            {
              v259 = v242 + 4;
              goto LABEL_74;
            }
          }
          v261 = (uint64_t)v421;
        }
      }
    }
    goto LABEL_76;
  }
LABEL_74:
  v438 = (void (**)(char *, uint64_t, uint64_t))((v260 - 1) & v260);
  v439 = (char *)v259;
  v252 = __clz(__rbit64(v260)) + (v259 << 6);
LABEL_71:
  v253 = *((_QWORD *)v437 + 7);
  v254 = (uint64_t *)(*((_QWORD *)v437 + 6) + 16 * v252);
  v255 = *v254;
  v256 = v254[1];
  *v420 = *v254;
  *(_QWORD *)(v249 + 8) = v256;
  v257 = v253 + *(_QWORD *)(v422 + 72) * v252;
  v258 = sub_100005C88(&qword_100158288);
  sub_100012408(v257, v249 + *(int *)(v258 + 48), type metadata accessor for ApplicationRecord);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v258 - 8) + 56))(v249, 0, 1, v258);
  sub_1000122B4(v255, v256);
LABEL_77:
  sub_1000260AC(v249, v250, &qword_100158280);
  v263 = sub_100005C88(&qword_100158288);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v263 - 8) + 48))(v250, 1, v263) != 1)
  {
    sub_10001244C(v250 + *(int *)(v263 + 48), v248, type metadata accessor for ApplicationRecord);
    __asm { BR              X8 }
  }
  swift_release(v437);
  v264 = v442;
  v265 = v443;
  v266 = v444;
  swift_bridgeObjectRetain(v442);
  swift_bridgeObjectRetain(v266);
  v267 = v407;
  sub_100045E28(v264);
  swift_bridgeObjectRelease(v266);
  swift_bridgeObjectRelease(v264);
  __s1 = v264;
  v449[0] = v265;
  v449[1] = v266;
  v268 = v405;
  __s2 = v405;
  v447[0] = v402;
  v269 = v400;
  v447[1] = v400;
  v270 = sub_10004AEFC();
  LOBYTE(v265) = dispatch thunk of static Equatable.== infix(_:_:)(&__s1, &__s2, &type metadata for DriverBinInfo, v270);
  swift_bridgeObjectRelease(v269);
  swift_bridgeObjectRelease(v268);
  v271 = v445;
  if ((v265 & 1) == 0)
  {
    swift_bridgeObjectRetain(v445);
    v272 = sub_1000D2610();
    swift_bridgeObjectRelease(v271);
    if (v272)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
        v271 = sub_10000C500(0, v271[2] + 1, 1, v271);
      v274 = v271[2];
      v273 = v271[3];
      if (v274 >= v273 >> 1)
        v271 = sub_10000C500((_QWORD *)(v273 > 1), v274 + 1, 1, v271);
      v271[2] = v274 + 1;
      v275 = &v271[2 * v274];
      v275[4] = 0xD000000000000012;
      v275[5] = 0x80000001001233C0;
      v445 = v271;
    }
  }
  swift_bridgeObjectRetain(v271);
  v276 = sub_1000D2610();
  swift_bridgeObjectRelease(v271);
  if (v276)
  {
    swift_bridgeObjectRelease(v266);
    swift_bridgeObjectRelease(v264);
    objc_msgSend(*(id *)((char *)v267 + v401), "unlock");
    swift_bridgeObjectRelease(v271);
    return 0;
  }
  v278 = sub_1000D31B4();
  v279 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v251 + 16);
  v280 = v435;
  v281 = v279(v397, v278, v435);
  v282 = Logger.logObject.getter(v281);
  v283 = static os_log_type_t.default.getter(v282);
  if (os_log_type_enabled(v282, v283))
  {
    v284 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v284 = 0;
    _os_log_impl((void *)&_mh_execute_header, v282, v283, "Saving dextbin info, encoding", v284, 2u);
    swift_slowDealloc(v284, -1, -1);
  }

  v285 = *(void (**)(char *, uint64_t))(v251 + 8);
  v285(v397, v280);
  v287 = v442;
  v286 = v443;
  v288 = v444;
  swift_bridgeObjectRetain(v442);
  swift_bridgeObjectRetain(v288);
  v289 = (uint64_t)v395;
  v290 = sub_10003CBE4(v287, v286, v288);
  v292 = v289;
  if (v289)
  {
    swift_bridgeObjectRelease_n(v288, 2);
    swift_bridgeObjectRelease_n(v287, 2);
    goto LABEL_112;
  }
  v439 = (char *)v290;
  v440 = v291;
  swift_bridgeObjectRelease(v288);
  swift_bridgeObjectRelease(v287);
  v293 = v392;
  v434 = v278;
  v436 = (uint64_t)v279;
  v294 = v279(v392, v278, v280);
  v295 = Logger.logObject.getter(v294);
  v296 = static os_log_type_t.default.getter(v295);
  if (os_log_type_enabled(v295, (os_log_type_t)v296))
  {
    v297 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v297 = 0;
    _os_log_impl((void *)&_mh_execute_header, v295, (os_log_type_t)v296, "Writing new dextbin info contents", v297, 2u);
    v298 = v297;
    v293 = v392;
    swift_slowDealloc(v298, -1, -1);
  }

  v299 = v435;
  v438 = (void (**)(char *, uint64_t, uint64_t))v285;
  v285(v293, v435);
  v300 = v407;
  v301 = v407[5];
  v302 = v407[6];
  sub_100004DE4(v399, v301);
  sub_10010731C(v301, v302);
  v303 = v450;
  v304 = v451;
  sub_100004DE4(&__s1, v450);
  v305 = v393;
  v437 = *(char **)(*v300 + 304);
  v306 = ((uint64_t (*)(void))v437)();
  v307 = URL.path.getter(v306);
  v309 = v308;
  v433 = *(char **)(v426 + 8);
  ((void (*)(char *, uint64_t))v433)(v305, v427);
  v310 = (uint64_t)v439;
  v311 = v440;
  sub_1000122B4((uint64_t)v439, v440);
  v312 = sub_10001B9E4((uint64_t)_swiftEmptyArrayStorage);
  LOBYTE(v307) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v304 + 40))(v307, v309, v310, v311, v312, v303, v304);
  swift_bridgeObjectRelease(v312);
  sub_100011F40(v310, v311);
  swift_bridgeObjectRelease(v309);
  v313 = sub_100005D08(&__s1);
  if ((v307 & 1) != 0)
  {
    v314 = v391;
    v315 = ((uint64_t (*)(char *, uint64_t, uint64_t))v436)(v391, v434, v299);
    v316 = Logger.logObject.getter(v315);
    v317 = static os_log_type_t.default.getter(v316);
    if (os_log_type_enabled(v316, v317))
    {
      v318 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v318 = 0;
      _os_log_impl((void *)&_mh_execute_header, v316, v317, "Replacing old dextbin info contents", v318, 2u);
      swift_slowDealloc(v318, -1, -1);
    }

    ((void (*)(char *, uint64_t))v438)(v314, v435);
    v319 = v407;
    v320 = v407[5];
    v321 = v407[6];
    sub_100004DE4(v399, v320);
    sub_10010731C(v320, v321);
    v322 = v450;
    v323 = v451;
    sub_100004DE4(&__s1, v450);
    v324 = v390;
    v325 = (*(uint64_t (**)(void))(*v319 + 280))();
    v326 = v389;
    ((void (*)(uint64_t))v437)(v325);
    (*(void (**)(char *, char *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v323 + 88))(v324, v326, 0, 0, 0, 0, v322, v323);
    v367 = v427;
    v368 = (void (*)(char *, uint64_t))v433;
    ((void (*)(char *, uint64_t))v433)(v326, v427);
    v368(v324, v367);
    sub_100005D08(&__s1);
    v369 = v319[5];
    v370 = v319[6];
    sub_100004DE4(v399, v369);
    sub_10010731C(v369, v370);
    v371 = v450;
    v372 = v451;
    sub_100004DE4(&__s1, v450);
    v373 = v388;
    ((void (*)(void))v437)();
    (*(void (**)(char *, uint64_t, uint64_t))(v372 + 104))(v373, v371, v372);
    v368(v373, v367);
    sub_100011F40((uint64_t)v439, v440);
    v374 = v401;
    sub_100005D08(&__s1);
    v375 = v443;
    v376 = v444;
    v377 = v407;
    v378 = (_QWORD *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
    v379 = *(_QWORD *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
    v380 = *(_QWORD *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 8);
    v381 = *(_QWORD *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 16);
    *v378 = v442;
    v378[1] = v375;
    v378[2] = v376;
    sub_100045978(v379, v380, v381);
    v277 = v445;
    objc_msgSend(*(id *)((char *)v377 + v374), "unlock");
  }
  else
  {
    v327 = errno.getter(v313);
    v328 = strerror(v327);
    v279 = (uint64_t (*)(char *, uint64_t, uint64_t))v436;
    v278 = v434;
    if (!v328)
    {
      __break(1u);
      JUMPOUT(0x1000456B8);
    }
    v329 = v328;
    swift_bridgeObjectRelease(v442);
    swift_bridgeObjectRelease(v444);
    v330 = String.init(cString:)(v329);
    v332 = v331;
    __s1 = 0;
    v449[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v333 = swift_bridgeObjectRelease(v449[0]);
    __s1 = 0x6946657461657263;
    v449[0] = 0xEB0000000020656CLL;
    v334 = v393;
    v335 = ((uint64_t (*)(uint64_t))v437)(v333);
    v336 = URL.path.getter(v335);
    v338 = v337;
    ((void (*)(char *, uint64_t))v433)(v334, v427);
    v339._countAndFlagsBits = v336;
    v339._object = v338;
    String.append(_:)(v339);
    swift_bridgeObjectRelease(v338);
    v340._countAndFlagsBits = 0x3A64656C69616620;
    v340._object = (void *)0xEF206F6E72726520;
    String.append(_:)(v340);
    v341._countAndFlagsBits = v330;
    v341._object = v332;
    String.append(_:)(v341);
    swift_bridgeObjectRelease(v332);
    v342 = __s1;
    v343 = v449[0];
    v344 = sub_1000122F8();
    v292 = swift_allocError(&type metadata for KMError, v344, 0, 0);
    *(_QWORD *)v345 = v342;
    *(_QWORD *)(v345 + 8) = v343;
    *(_OWORD *)(v345 + 16) = 0u;
    *(_OWORD *)(v345 + 32) = 0u;
    *(_OWORD *)(v345 + 48) = 0u;
    *(_QWORD *)(v345 + 64) = 0;
    *(_BYTE *)(v345 + 72) = 19;
    swift_willThrow(v292);
    sub_100011F40((uint64_t)v439, v440);
    v285 = (void (*)(char *, uint64_t))v438;
LABEL_112:
    v346 = sub_10003AAC8();
    v347 = v407;
    v348 = (_QWORD *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
    v349 = *(_QWORD *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo);
    v350 = *(_QWORD *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 8);
    v351 = *(_QWORD *)((char *)v407 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 16);
    *v348 = v346;
    v348[1] = v352;
    v348[2] = v353;
    sub_100045978(v349, v350, v351);
    v354 = v396;
    v355 = v435;
    v279(v396, v278, v435);
    swift_errorRetain(v292);
    v356 = swift_errorRetain(v292);
    v357 = Logger.logObject.getter(v356);
    v358 = static os_log_type_t.error.getter(v357);
    if (os_log_type_enabled(v357, v358))
    {
      v359 = (uint8_t *)swift_slowAlloc(12, -1);
      v360 = swift_slowAlloc(32, -1);
      __s1 = v360;
      *(_DWORD *)v359 = 136315138;
      __s2 = v292;
      swift_errorRetain(v292);
      v361 = sub_100005C88(&qword_10015AB50);
      v362 = String.init<A>(describing:)(&__s2, v361);
      v363 = v285;
      v365 = v364;
      __s2 = sub_1000055A0(v362, v364, &__s1);
      v347 = v407;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v447, v359 + 4, v359 + 12);
      swift_bridgeObjectRelease(v365);
      swift_errorRelease(v292);
      swift_errorRelease(v292);
      _os_log_impl((void *)&_mh_execute_header, v357, v358, "Can't save dextbin info: %s", v359, 0xCu);
      swift_arrayDestroy(v360, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v360, -1, -1);
      swift_slowDealloc(v359, -1, -1);

      v363(v396, v435);
    }
    else
    {
      swift_errorRelease(v292);
      swift_errorRelease(v292);

      v285(v354, v355);
    }
    swift_errorRelease(v292);
    objc_msgSend(*(id *)((char *)v347 + v401), "unlock");
    swift_bridgeObjectRelease(v445);
    return &off_100147520;
  }
  return (_UNKNOWN **)v277;
}

unint64_t sub_1000456E8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
  v3 = v2;
  sub_10003BB0C(v1, v4, v2);
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v1);
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  return 0xD000000000000014;
}

BOOL sub_100045778()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::Bool v4;

  URL.path.getter();
  v1 = v0;
  v2._countAndFlagsBits = URL.path.getter();
  object = v2._object;
  v4 = String.hasPrefix(_:)(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(object);
  return v4;
}

uint64_t sub_1000457E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100005D08((_QWORD *)(v0 + 16));
  v1 = v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_applicationManager));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_activeDriversStateManager));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_subscribers));

  sub_1000124F8(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___infoLocation, (uint64_t *)&unk_10015BA60);
  sub_1000124F8(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager____lazy_storage___nextInfoLocation, (uint64_t *)&unk_10015BA60);
  sub_100045978(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo), *(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager__driverBinInfo + 16));
  return v0;
}

uint64_t sub_1000458C8()
{
  uint64_t v0;

  sub_1000457E4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

id sub_1000458EC()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_stateManagerQueue);
}

uint64_t sub_1000458FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t sub_100045908()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

void (*sub_100045914(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 224))();
  return sub_10000C4BC;
}

uint64_t sub_100045960()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t sub_10004596C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t sub_100045978(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_1000459A4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v8 = type metadata accessor for URL(0);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v40 = v9;
  sub_100005C88(&qword_100157EA8);
  result = static _SetStorage.allocate(capacity:)(a3);
  v12 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  v17 = v40;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v15 << 6);
    }
    else
    {
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v20 >= v39)
      {
LABEL_37:
        swift_release(a4);
        return v12;
      }
      v21 = v38[v20];
      ++v15;
      if (!v21)
      {
        v15 = v20 + 1;
        if (v20 + 1 >= v39)
          goto LABEL_37;
        v21 = v38[v15];
        if (!v21)
        {
          v15 = v20 + 2;
          if (v20 + 2 >= v39)
            goto LABEL_37;
          v21 = v38[v15];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v39)
              goto LABEL_37;
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v15 >= v39)
                  goto LABEL_37;
                v21 = v38[v15];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v15 = v22;
          }
        }
      }
LABEL_24:
      v14 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }
    v23 = a4;
    v24 = *(_QWORD *)(a4 + 48);
    v25 = *(_QWORD *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    v26 = *(_QWORD *)(v12 + 40);
    v27 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      v17 = v40;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      v17 = v40;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v35 == -1);
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v12 + 48) + v31 * v25, v11, v8);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v23;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100045CA4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_100045D44(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100045E28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  __int128 v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(uint64_t, unint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  os_log_t v80;
  void (*v81)(void);
  uint64_t v82;
  void (*v83)(void);
  char v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  os_log_t v102;
  void (*v103)(char *, uint64_t, uint64_t);
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  __int128 v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  NSObject *v135;
  uint64_t v136;
  os_log_type_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  void (*v144)(char *, uint64_t);
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  NSObject *v156;
  os_log_type_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  void (*v163)(char *, uint64_t);
  char *v164;
  uint64_t v165;
  void (*v166)(char *, uint64_t);
  char *v167;
  __int128 v168;
  os_log_t v169;
  char *v170;
  __int128 v171;
  os_log_t v172;
  void (*v173)(void);
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  unint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  _QWORD *v190;
  __int128 v191;
  char *v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(_QWORD);
  char v205;
  uint64_t v206;
  uint64_t v207;
  char v208;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v198 = v4;
  v199 = v5;
  v6 = __chkstk_darwin(v4);
  v186 = (char *)&v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v175 = (char *)&v168 - v9;
  v10 = __chkstk_darwin(v8);
  v179 = (char *)&v168 - v11;
  __chkstk_darwin(v10);
  v183 = (char *)&v168 - v12;
  v13 = type metadata accessor for URL(0);
  v202 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v174 = (char *)&v168 - v18;
  v19 = __chkstk_darwin(v17);
  v185 = (char *)&v168 - v20;
  v21 = __chkstk_darwin(v19);
  v178 = (char *)&v168 - v22;
  v23 = __chkstk_darwin(v21);
  v177 = (char *)&v168 - v24;
  v25 = __chkstk_darwin(v23);
  v182 = (char *)&v168 - v26;
  v27 = __chkstk_darwin(v25);
  v176 = (char *)&v168 - v28;
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v168 - v30;
  __chkstk_darwin(v29);
  v201 = (char *)&v168 - v32;
  v33 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v34 = __chkstk_darwin(v33);
  v192 = (char *)&v168 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  *(_QWORD *)&v191 = (char *)&v168 - v36;
  v37 = (_QWORD *)(v1 + 16);
  v38 = *(_QWORD *)(v1 + 40);
  v39 = *(_QWORD *)(v2 + 48);
  v190 = v37;
  sub_100004DE4(v37, v38);
  sub_10010731C(v38, v39);
  v40 = v206;
  v41 = v207;
  sub_100004DE4(&v204, v206);
  v194 = v2;
  v42 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v41 + 24))(v2 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory, 0, 1, v40, v41);
  v43 = v202;
  v44 = v191;
  sub_100005D08(&v204);
  swift_bridgeObjectRetain(a1);
  v46 = sub_1000410FC(v45);
  v195 = 0;
  swift_bridgeObjectRelease(a1);
  v47 = sub_100011D28(v46);
  result = swift_bridgeObjectRelease(v46);
  v50 = *(char **)(v42 + 16);
  v181 = v16;
  v189 = v50;
  if (v50)
  {
    v51 = 0;
    v180 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    v188 = v42 + v180;
    v200 = v47 + 56;
    v197 = (char *)_swiftEmptyArrayStorage;
    *(_QWORD *)&v49 = 136315138;
    v171 = v49;
    v170 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v49 = 136315394;
    v168 = v49;
    v52 = v201;
    v184 = v47;
    v187 = v42;
    while (1)
    {
      if ((unint64_t)v51 >= *(_QWORD *)(v42 + 16))
      {
        __break(1u);
        return result;
      }
      v53 = *(_QWORD *)(v43 + 72);
      v54 = *(void (**)(uint64_t, unint64_t, uint64_t))(v43 + 16);
      v54(v44, v188 + v53 * (_QWORD)v51, v13);
      v196 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
      v196(v44, 0, 1, v13);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v44, 1, v13) == 1)
        goto LABEL_35;
      *(_QWORD *)&v193 = *(_QWORD *)(v43 + 32);
      v55 = ((uint64_t (*)(char *, uint64_t, uint64_t))v193)(v52, v44, v13);
      v56 = v52;
      if ((URL.hasDirectoryPath.getter(v55) & 1) != 0)
        break;
      v82 = v194;
      v83 = *(void (**)(void))(*(_QWORD *)v194 + 280);
      v83();
      v84 = static URL.== infix(_:_:)(v52, v31);
      v65 = *(void (**)(char *, uint64_t))(v43 + 8);
      v65(v31, v13);
      if ((v84 & 1) == 0)
      {
        v173 = v83;
        v85 = sub_1000D31B4();
        (*(void (**)(char *, uint64_t, uint64_t))(v199 + 16))(v179, v85, v198);
        v86 = v177;
        v54((uint64_t)v177, (unint64_t)v56, v13);
        v87 = swift_retain_n(v82, 2);
        v88 = Logger.logObject.getter(v87);
        v89 = static os_log_type_t.default.getter(v88);
        v90 = v89;
        if (os_log_type_enabled(v88, v89))
        {
          v91 = swift_slowAlloc(22, -1);
          v92 = swift_slowAlloc(64, -1);
          v204 = (void (*)(_QWORD))v92;
          *(_DWORD *)v91 = v168;
          v93 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          LODWORD(v172) = v90;
          v94 = v93;
          v169 = v88;
          v95 = dispatch thunk of CustomStringConvertible.description.getter(v13, v93);
          v97 = v96;
          *(_QWORD *)(v91 + 4) = sub_1000055A0(v95, v96, (uint64_t *)&v204);
          swift_bridgeObjectRelease(v97);
          v98 = ((uint64_t (*)(char *, uint64_t))v65)(v177, v13);
          *(_WORD *)(v91 + 12) = 2080;
          ((void (*)(uint64_t))v173)(v98);
          v99 = dispatch thunk of CustomStringConvertible.description.getter(v13, v94);
          v101 = v100;
          v65(v31, v13);
          *(_QWORD *)(v91 + 14) = sub_1000055A0(v99, v101, (uint64_t *)&v204);
          swift_release_n(v194, 2);
          swift_bridgeObjectRelease(v101);
          v102 = v169;
          _os_log_impl((void *)&_mh_execute_header, v169, (os_log_type_t)v172, "Will remove untracked file %s, since it is not the expected Info.plist at %s", (uint8_t *)v91, 0x16u);
          swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v92, -1, -1);
          swift_slowDealloc(v91, -1, -1);

        }
        else
        {
          v65(v86, v13);

          swift_release_n(v82, 2);
        }
        (*(void (**)(char *, uint64_t))(v199 + 8))(v179, v198);
        v44 = v191;
        v54((uint64_t)v178, (unint64_t)v201, v13);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v197);
        v47 = v184;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v197 = (char *)sub_10000C60C(0, *((_QWORD *)v197 + 2) + 1, 1, (unint64_t)v197);
        v103 = (void (*)(char *, uint64_t, uint64_t))v193;
        v105 = *((_QWORD *)v197 + 2);
        v109 = *((_QWORD *)v197 + 3);
        v106 = v105 + 1;
        if (v105 >= v109 >> 1)
          v197 = (char *)sub_10000C60C(v109 > 1, v105 + 1, 1, (unint64_t)v197);
        v107 = &v205;
LABEL_30:
        v110 = *((_QWORD *)v107 - 32);
        v111 = v197;
        *((_QWORD *)v197 + 2) = v106;
        v103(&v111[v180 + v105 * v53], v110, v13);
        v52 = v201;
        goto LABEL_31;
      }
      v52 = v56;
      v44 = v191;
      v42 = v187;
      v47 = v184;
LABEL_4:
      ++v51;
      result = ((uint64_t (*)(char *, uint64_t))v65)(v52, v13);
      v43 = v202;
      if (v51 == v189)
        goto LABEL_34;
    }
    if (!*(_QWORD *)(v47 + 16)
      || (v57 = *(_QWORD *)(v47 + 40),
          v58 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL), v59 = dispatch thunk of Hashable._rawHashValue(seed:)(v57, v13, v58), v60 = -1 << *(_BYTE *)(v47 + 32), v61 = v59 & ~v60, ((*(_QWORD *)(v200 + ((v61 >> 3) & 0xFFFFFFFFFFFFF8)) >> v61) & 1) == 0))
    {
LABEL_13:
      v66 = sub_1000D31B4();
      v67 = v198;
      (*(void (**)(char *, uint64_t, uint64_t))(v199 + 16))(v183, v66, v198);
      v68 = v176;
      v69 = ((uint64_t (*)(char *, char *, uint64_t))v54)(v176, v201, v13);
      v70 = Logger.logObject.getter(v69);
      v71 = static os_log_type_t.default.getter(v70);
      if (os_log_type_enabled(v70, v71))
      {
        v72 = swift_slowAlloc(12, -1);
        v172 = v70;
        v73 = v68;
        v74 = v72;
        v173 = (void (*)(void))swift_slowAlloc(32, -1);
        v204 = (void (*)(_QWORD))v173;
        *(_DWORD *)v74 = v171;
        v75 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v76 = v73;
        v77 = dispatch thunk of CustomStringConvertible.description.getter(v13, v75);
        v79 = v78;
        *(_QWORD *)(v74 + 4) = sub_1000055A0(v77, v78, (uint64_t *)&v204);
        swift_bridgeObjectRelease(v79);
        v65 = *(void (**)(char *, uint64_t))(v43 + 8);
        v65(v76, v13);
        v80 = v172;
        _os_log_impl((void *)&_mh_execute_header, v172, v71, "Will remove untracked directory %s", (uint8_t *)v74, 0xCu);
        v81 = v173;
        swift_arrayDestroy(v173, 1, v170);
        swift_slowDealloc(v81, -1, -1);
        swift_slowDealloc(v74, -1, -1);

        (*(void (**)(char *, uint64_t))(v199 + 8))(v183, v198);
      }
      else
      {
        v65 = *(void (**)(char *, uint64_t))(v43 + 8);
        v65(v68, v13);

        (*(void (**)(char *, uint64_t))(v199 + 8))(v183, v67);
      }
      v44 = v191;
      v47 = v184;
      v54((uint64_t)v182, (unint64_t)v201, v13);
      if ((swift_isUniquelyReferenced_nonNull_native(v197) & 1) == 0)
        v197 = (char *)sub_10000C60C(0, *((_QWORD *)v197 + 2) + 1, 1, (unint64_t)v197);
      v103 = (void (*)(char *, uint64_t, uint64_t))v193;
      v105 = *((_QWORD *)v197 + 2);
      v104 = *((_QWORD *)v197 + 3);
      v106 = v105 + 1;
      if (v105 >= v104 >> 1)
        v197 = (char *)sub_10000C60C(v104 > 1, v105 + 1, 1, (unint64_t)v197);
      v107 = &v208;
      goto LABEL_30;
    }
    v62 = ~v60;
    while (1)
    {
      v54((uint64_t)v31, *(_QWORD *)(v47 + 48) + v61 * v53, v13);
      v63 = sub_100012534(&qword_100157E98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v64 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v201, v13, v63);
      v65 = *(void (**)(char *, uint64_t))(v43 + 8);
      v65(v31, v13);
      if ((v64 & 1) != 0)
        break;
      v61 = (v61 + 1) & v62;
      v43 = v202;
      if (((*(_QWORD *)(v200 + ((v61 >> 3) & 0xFFFFFFFFFFFFF8)) >> v61) & 1) == 0)
        goto LABEL_13;
    }
    v52 = v201;
    v44 = v191;
LABEL_31:
    v42 = v187;
    goto LABEL_4;
  }
  v196 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
  v197 = (char *)_swiftEmptyArrayStorage;
LABEL_34:
  v196(v44, 1, 1, v13);
LABEL_35:
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v42);
  v113 = v185;
  v114 = v192;
  v115 = v194;
  v116 = *((_QWORD *)v197 + 2);
  if (v116)
  {
    v117 = &v197[(*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80)];
    v118 = *(char **)(v43 + 16);
    v200 = *(_QWORD *)(v43 + 72);
    v201 = v118;
    *(_QWORD *)&v112 = 136315138;
    v191 = v112;
    v189 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v112 = 136315394;
    v193 = v112;
    ((void (*)(char *, char *, uint64_t))v118)(v192, v117, v13);
    while (1)
    {
      v196((uint64_t)v114, 0, 1, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v114, 1, v13) == 1)
        return swift_bridgeObjectRelease(v197);
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v113, v114, v13);
      v122 = *(_QWORD *)(v115 + 40);
      v123 = *(_QWORD *)(v115 + 48);
      sub_100004DE4(v190, v122);
      sub_10010731C(v122, v123);
      v124 = v206;
      v125 = v207;
      sub_100004DE4(&v204, v206);
      v126 = v195;
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 104))(v113, v124, v125);
      v127 = v126;
      if (v126)
      {
        sub_100005D08(&v204);
        v128 = sub_1000D31B4();
        v129 = v199;
        v130 = v186;
        v131 = v113;
        v132 = v198;
        (*(void (**)(char *, uint64_t, uint64_t))(v199 + 16))(v186, v128, v198);
        v133 = v181;
        ((void (*)(char *, char *, uint64_t))v201)(v181, v131, v13);
        swift_errorRetain(v127);
        v134 = swift_errorRetain(v127);
        v135 = Logger.logObject.getter(v134);
        v136 = v132;
        v137 = static os_log_type_t.error.getter(v135);
        if (!os_log_type_enabled(v135, v137))
        {

          swift_errorRelease(v127);
          swift_errorRelease(v127);
          v119 = v202;
          v120 = v136;
          v121 = *(void (**)(char *, uint64_t))(v202 + 8);
          v121(v133, v13);
          swift_errorRelease(v127);
          (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v120);
          v113 = v185;
          v121(v185, v13);
          v195 = 0;
          v43 = v119;
LABEL_38:
          v114 = v192;
          v115 = v194;
          goto LABEL_39;
        }
        v138 = swift_slowAlloc(22, -1);
        v139 = swift_slowAlloc(64, -1);
        v204 = (void (*)(_QWORD))v139;
        *(_DWORD *)v138 = v193;
        v140 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v141 = dispatch thunk of CustomStringConvertible.description.getter(v13, v140);
        v143 = v142;
        *(_QWORD *)(v138 + 4) = sub_1000055A0(v141, v142, (uint64_t *)&v204);
        swift_bridgeObjectRelease(v143);
        v144 = *(void (**)(char *, uint64_t))(v202 + 8);
        v144(v133, v13);
        v145 = v144;
        *(_WORD *)(v138 + 12) = 2080;
        v203 = v127;
        swift_errorRetain(v127);
        v146 = sub_100005C88(&qword_10015AB50);
        v147 = String.init<A>(describing:)(&v203, v146);
        v149 = v148;
        *(_QWORD *)(v138 + 14) = sub_1000055A0(v147, v148, (uint64_t *)&v204);
        swift_bridgeObjectRelease(v149);
        swift_errorRelease(v127);
        swift_errorRelease(v127);
        _os_log_impl((void *)&_mh_execute_header, v135, v137, "Difficulty removing %s: %s", (uint8_t *)v138, 0x16u);
        swift_arrayDestroy(v139, 2, (char *)&type metadata for Any + 8);
        v150 = v194;
        swift_slowDealloc(v139, -1, -1);
        swift_slowDealloc(v138, -1, -1);

        v115 = v150;
        swift_errorRelease(v127);
        (*(void (**)(char *, uint64_t))(v199 + 8))(v186, v198);
        v113 = v185;
        v145(v185, v13);
        v195 = 0;
        v43 = v202;
      }
      else
      {
        v195 = 0;
        sub_100005D08(&v204);
        v151 = sub_1000D31B4();
        v152 = v199;
        v153 = v175;
        (*(void (**)(char *, uint64_t, uint64_t))(v199 + 16))(v175, v151, v198);
        v154 = v174;
        v155 = ((uint64_t (*)(char *, char *, uint64_t))v201)(v174, v113, v13);
        v156 = Logger.logObject.getter(v155);
        v157 = static os_log_type_t.default.getter(v156);
        if (!os_log_type_enabled(v156, v157))
        {

          v165 = v202;
          v166 = *(void (**)(char *, uint64_t))(v202 + 8);
          v166(v154, v13);
          v167 = v153;
          v43 = v165;
          (*(void (**)(char *, uint64_t))(v152 + 8))(v167, v198);
          v166(v113, v13);
          goto LABEL_38;
        }
        v158 = swift_slowAlloc(12, -1);
        v159 = swift_slowAlloc(32, -1);
        v204 = (void (*)(_QWORD))v159;
        *(_DWORD *)v158 = v191;
        v160 = URL.path.getter(v159);
        v162 = v161;
        *(_QWORD *)(v158 + 4) = sub_1000055A0(v160, v161, (uint64_t *)&v204);
        swift_bridgeObjectRelease(v162);
        v163 = *(void (**)(char *, uint64_t))(v202 + 8);
        v163(v154, v13);
        _os_log_impl((void *)&_mh_execute_header, v156, v157, "Removed untracked path %s", (uint8_t *)v158, 0xCu);
        swift_arrayDestroy(v159, 1, v189);
        swift_slowDealloc(v159, -1, -1);
        v115 = v194;
        swift_slowDealloc(v158, -1, -1);

        v164 = v153;
        v43 = v202;
        (*(void (**)(char *, uint64_t))(v199 + 8))(v164, v198);
        v113 = v185;
        v163(v185, v13);
      }
      v114 = v192;
LABEL_39:
      v117 += v200;
      if (!--v116)
        break;
      ((void (*)(char *, char *, uint64_t))v201)(v114, v117, v13);
    }
  }
  v196((uint64_t)v114, 1, 1, v13);
  return swift_bridgeObjectRelease(v197);
}

uint64_t sub_100046EEC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(uint64_t);
  char v26;
  void (*v27)(char *, uint64_t);
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void (*v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  char *v74;

  v54 = a2;
  v68 = a5;
  v71 = a4;
  v55 = a1;
  v6 = type metadata accessor for URL(0);
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  __chkstk_darwin(v6);
  v65 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100005C88((uint64_t *)&unk_10015ABF0);
  v8 = __chkstk_darwin(v64);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v74 = (char *)&v54 - v11;
  v12 = type metadata accessor for DriverBinEntry(0);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  result = __chkstk_darwin(v15);
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = 0;
  v69 = (_QWORD *)a3;
  v21 = *(_QWORD *)(a3 + 64);
  v56 = 0;
  v57 = a3 + 64;
  v22 = 1 << *(_BYTE *)(a3 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v58 = (unint64_t)(v22 + 63) >> 6;
  v25 = type metadata accessor for DriverBinEntry;
  v60 = v16;
  v61 = v14;
  v59 = v19;
  while (v24)
  {
    v72 = (v24 - 1) & v24;
    v73 = v20;
    v28 = __clz(__rbit64(v24)) | (v20 << 6);
LABEL_21:
    v33 = v69;
    v34 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    v34(v19, v69[6] + *(_QWORD *)(v16 + 72) * v28, v15);
    v35 = v33[7];
    v36 = *(_QWORD *)(v62 + 72);
    v70 = v28;
    sub_100012408(v35 + v36 * v28, (uint64_t)v14, v25);
    v37 = v64;
    v38 = v25;
    v39 = v15;
    v40 = (uint64_t)v74;
    v41 = (uint64_t)&v74[*(int *)(v64 + 48)];
    v34(v74, (unint64_t)v19, v39);
    sub_100012408((uint64_t)v14, v41, v38);
    v42 = (uint64_t)&v10[*(int *)(v37 + 48)];
    v43 = v10;
    v44 = v40;
    v15 = v39;
    v25 = v38;
    v34(v10, v44, v15);
    sub_100012408(v41, v42, v38);
    v45 = v65;
    v46 = v66;
    v47 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v42 + *(int *)(v63 + 28), v67);
    v48 = sub_100012490(v42, v38);
    v49 = URL.lastPathComponent.getter(v48);
    v51 = v50;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
    if (v49 == v71 && v51 == v68)
    {
      swift_bridgeObjectRelease(v68);
      sub_1000124F8((uint64_t)v74, (uint64_t *)&unk_10015ABF0);
      v16 = v60;
      v52 = *(void (**)(char *, uint64_t))(v60 + 8);
      v10 = v43;
      v52(v43, v15);
      v14 = v61;
      sub_100012490((uint64_t)v61, v38);
      v19 = v59;
      result = ((uint64_t (*)(char *, uint64_t))v52)(v59, v15);
      v24 = v72;
      v20 = v73;
      goto LABEL_24;
    }
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v71, v68, 0);
    swift_bridgeObjectRelease(v51);
    sub_1000124F8((uint64_t)v74, (uint64_t *)&unk_10015ABF0);
    v16 = v60;
    v27 = *(void (**)(char *, uint64_t))(v60 + 8);
    v10 = v43;
    v27(v43, v15);
    v14 = v61;
    sub_100012490((uint64_t)v61, v38);
    v19 = v59;
    result = ((uint64_t (*)(char *, uint64_t))v27)(v59, v15);
    v24 = v72;
    v20 = v73;
    if ((v26 & 1) != 0)
    {
LABEL_24:
      *(unint64_t *)((char *)v55 + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v70;
      if (__OFADD__(v56++, 1))
      {
        __break(1u);
        return sub_10000DC74(v55, v54, v56, v69);
      }
    }
  }
  v29 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v29 >= v58)
    return sub_10000DC74(v55, v54, v56, v69);
  v30 = *(_QWORD *)(v57 + 8 * v29);
  v31 = v20 + 1;
  if (v30)
    goto LABEL_20;
  v31 = v20 + 2;
  if (v20 + 2 >= v58)
    return sub_10000DC74(v55, v54, v56, v69);
  v30 = *(_QWORD *)(v57 + 8 * v31);
  if (v30)
    goto LABEL_20;
  v31 = v20 + 3;
  if (v20 + 3 >= v58)
    return sub_10000DC74(v55, v54, v56, v69);
  v30 = *(_QWORD *)(v57 + 8 * v31);
  if (v30)
  {
LABEL_20:
    v72 = (v30 - 1) & v30;
    v73 = v31;
    v28 = __clz(__rbit64(v30)) + (v31 << 6);
    goto LABEL_21;
  }
  v32 = v20 + 4;
  if (v20 + 4 >= v58)
    return sub_10000DC74(v55, v54, v56, v69);
  v30 = *(_QWORD *)(v57 + 8 * v32);
  if (v30)
  {
    v31 = v20 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v31 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v31 >= v58)
      return sub_10000DC74(v55, v54, v56, v69);
    v30 = *(_QWORD *)(v57 + 8 * v31);
    ++v32;
    if (v30)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000473A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain(a3);
    v12 = sub_100046EEC((unint64_t *)((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    v13 = swift_bridgeObjectRelease(a3);
    if (v3)
      swift_willThrow(v13);
    swift_bridgeObjectRelease_n(a3, 2);
  }
  else
  {
    v14 = (void *)swift_slowAlloc(v10, -1);
    bzero(v14, v10);
    swift_bridgeObjectRetain(a3);
    v12 = sub_100046EEC((unint64_t *)v14, v9, a1, a2, a3);
    swift_bridgeObjectRelease(a3);
    swift_slowDealloc(v14, -1, -1);
    swift_bridgeObjectRelease_n(a3, 2);
  }
  return v12;
}

uint64_t sub_100047560(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t (*v69)(uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t (*v74)(uint64_t);
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  Swift::String v95;
  uint64_t v96;
  Swift::String v97;
  void *object;
  Swift::String v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  uint64_t v135;
  Swift::String v136;
  void *v137;
  Swift::String v138;
  uint64_t v139;
  Swift::String v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  Swift::String v167;
  void *v168;
  Swift::String v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  void *v173;
  Swift::String v174;
  Swift::String v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(char *, uint64_t, uint64_t);
  char *v184;
  uint64_t v185;
  NSObject *v186;
  os_log_type_t v187;
  _BOOL4 v188;
  uint8_t *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t (*v199)(char *, uint64_t);
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  int v218;
  char *v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  NSObject *v227;
  os_log_type_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  char *v234;
  void (*v235)(char *, uint64_t);
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(char *, char *, uint64_t);
  char *v246;
  uint64_t v247;
  NSObject *v248;
  os_log_type_t v249;
  int v250;
  _BOOL4 v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  char *v286;
  void (*v287)(char *, uint64_t);
  unint64_t v288;
  unint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  NSObject *v297;
  os_log_type_t v298;
  _BOOL4 v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  void (*v323)(char *, uint64_t);
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t (*v328)(char *, char *, uint64_t);
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  Swift::String v333;
  uint64_t v334;
  Swift::String v335;
  void *v336;
  Swift::String v337;
  Swift::String v338;
  void *v339;
  Swift::String v340;
  uint64_t v341;
  uint64_t v342;
  Swift::String v343;
  void *v344;
  Swift::String v345;
  uint64_t v346;
  Swift::String v347;
  void *v348;
  Swift::String v349;
  uint64_t v350;
  Swift::String v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  _QWORD *v356;
  unint64_t v357;
  unint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  void (*v380)(char *, uint64_t);
  uint64_t v381;
  uint64_t v382;
  Swift::String v383;
  char *v384;
  uint64_t v385;
  Swift::String v386;
  void *v387;
  Swift::String v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  NSObject *v395;
  os_log_type_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  Swift::String v407;
  void *v408;
  Swift::String v409;
  uint64_t v410;
  uint64_t *v411;
  uint64_t v412;
  void *v413;
  Swift::String v414;
  Swift::String v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  NSObject *v425;
  os_log_type_t v426;
  uint8_t *v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  void (*v434)(char *, uint64_t);
  uint64_t v436;
  void *v437;
  void *v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  char *v442;
  char *v443;
  uint64_t v444;
  char *v445;
  _QWORD *v446;
  uint64_t v447;
  void *v448;
  uint64_t v449;
  __n128 v450;
  uint64_t v451;
  char *v452;
  void *v453;
  char *v454;
  uint64_t v455;
  char *v456;
  char *v457;
  uint64_t v458;
  char *v459;
  __n128 v460;
  char *v461;
  __n128 v462;
  __n128 v463;
  void *v464;
  char *v465;
  uint64_t v466;
  uint64_t v467;
  void (*v468)(char *, char *, uint64_t);
  char *v469;
  uint64_t v470;
  char *v471;
  uint64_t v472;
  char *v473;
  char *v474;
  uint64_t v475;
  char *v476;
  char *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  char *v481;
  char *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  char *v486;
  _QWORD *v487;
  char *v488;
  char *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t *v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t v500;
  void (*v501)(char *, uint64_t);
  uint64_t v502;
  char *v503;
  uint64_t v504;
  void *v505;
  uint64_t v506;
  void (*v507)(char *, uint64_t, uint64_t);
  uint64_t (*v508)(char *, uint64_t);
  uint64_t v509;
  uint64_t v510;
  char v511;
  char v512[8];
  uint64_t v513;
  __int128 v514;
  uint64_t v515;
  uint64_t v516;
  char v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520[2];
  uint64_t v521;
  uint64_t v522;

  v5 = v4;
  v446 = a4;
  v485 = a3;
  v8 = type metadata accessor for Date(0);
  __chkstk_darwin(v8);
  v445 = (char *)&v436 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ApplicationRecord(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v436 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v444 = (uint64_t)&v436 - v15;
  __chkstk_darwin(v14);
  v458 = (uint64_t)&v436 - v16;
  v510 = type metadata accessor for Logger(0);
  v478 = *(_QWORD *)(v510 - 8);
  v17 = __chkstk_darwin(v510);
  v456 = (char *)&v436 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v477 = (char *)&v436 - v20;
  v21 = __chkstk_darwin(v19);
  v486 = (char *)&v436 - v22;
  v23 = __chkstk_darwin(v21);
  v441 = (char *)&v436 - v24;
  v25 = __chkstk_darwin(v23);
  v471 = (char *)&v436 - v26;
  v27 = __chkstk_darwin(v25);
  v476 = (char *)&v436 - v28;
  __chkstk_darwin(v27);
  v481 = (char *)&v436 - v29;
  v483 = sub_100005C88((uint64_t *)&unk_10015ABF0);
  v479 = *(_QWORD *)(v483 - 8);
  __chkstk_darwin(v483);
  v467 = (uint64_t)&v436 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100005C88(&qword_100157EF8);
  __chkstk_darwin(v31);
  v489 = (char *)&v436 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v466 = sub_100005C88(&qword_100157F00);
  __chkstk_darwin(v466);
  v465 = (char *)&v436 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v470 = type metadata accessor for DriverBinEntry(0);
  v34 = __chkstk_darwin(v470);
  v440 = (uint64_t)&v436 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v447 = (uint64_t)&v436 - v37;
  __chkstk_darwin(v36);
  v472 = (uint64_t)&v436 - v38;
  v502 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v502 - 8);
  v40 = __chkstk_darwin(v502);
  v443 = (char *)&v436 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v493 = (uint64_t)&v436 - v43;
  v44 = __chkstk_darwin(v42);
  v46 = (char *)&v436 - v45;
  __chkstk_darwin(v44);
  v473 = (char *)&v436 - v47;
  v504 = type metadata accessor for URL(0);
  v495 = *(_QWORD *)(v504 - 8);
  v48 = __chkstk_darwin(v504);
  v452 = (char *)&v436 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __chkstk_darwin(v48);
  v469 = (char *)&v436 - v51;
  v52 = __chkstk_darwin(v50);
  v442 = (char *)&v436 - v53;
  v54 = __chkstk_darwin(v52);
  v454 = (char *)&v436 - v55;
  v56 = __chkstk_darwin(v54);
  v457 = (char *)&v436 - v57;
  v58 = __chkstk_darwin(v56);
  v503 = (char *)&v436 - v59;
  __chkstk_darwin(v58);
  v482 = (char *)&v436 - v60;
  v513 = a1;
  swift_bridgeObjectRetain(a2);
  v61 = 0;
  v62 = sub_10000CE24((uint64_t)sub_10004B0AC, (uint64_t)v512, a2);
  swift_bridgeObjectRelease(a2);
  v484 = v10;
  v63 = *(int *)(v10 + 24);
  v491 = a1;
  v64 = *(_QWORD *)(a1 + v63);
  v65 = *(_QWORD *)(v64 + 16);
  if (v65)
  {
    v487 = (_QWORD *)(v5 + 16);
    v475 = v5 + OBJC_IVAR____TtC10driverkitd16DriverBinManager_directory;
    v488 = &v517;
    v66 = swift_bridgeObjectRetain(v64);
    v439 = v67;
    v68 = (unint64_t *)(v67 + 40);
    v464 = (void *)0x80000001001234B0;
    v66.n128_u64[0] = 136315138;
    v462 = v66;
    v461 = (char *)&type metadata for Any + 8;
    v66.n128_u64[0] = 136315650;
    v460 = v66;
    v438 = (void *)0x8000000100123510;
    v69 = type metadata accessor for DriverBinEntry;
    v437 = (void *)0x8000000100123530;
    v448 = (void *)0x80000001001234E0;
    v66.n128_u64[0] = 136315906;
    v450 = v66;
    v66.n128_u64[0] = 136315394;
    v463 = v66;
    v449 = 0x8000000100123580;
    v453 = (void *)0x8000000100123550;
    v494 = v5;
    v474 = v13;
    v70 = v483;
    v500 = v39;
    v480 = v62;
    v71 = v481;
    v459 = v46;
    while (1)
    {
      v74 = v69;
      v497 = v65;
      v76 = *(v68 - 1);
      v75 = *v68;
      swift_bridgeObjectRetain(*v68);
      v77 = v482;
      v492 = v76;
      v499 = v75;
      v78 = URL.init(fileURLWithPath:)(v76, v75);
      v79 = URL.lastPathComponent.getter(v78);
      v81 = v80;
      v501 = *(void (**)(char *, uint64_t))(v495 + 8);
      v501(v77, v504);
      swift_bridgeObjectRetain(v81);
      v82 = v480;
      v83 = swift_retain(v480);
      v498 = v79;
      v84 = sub_1000473A0(v83, v79, v81);
      swift_release(v82);
      v505 = (void *)v81;
      swift_bridgeObjectRelease(v81);
      v85 = sub_1000109E8(v84);
      if ((v87 & 1) != 0)
        goto LABEL_72;
      v88 = v86;
      if (*(_DWORD *)(v84 + 36) != v86)
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
      }
      v89 = 1;
      if (v85 != 1 << *(_BYTE *)(v84 + 32))
      {
        v90 = v467;
        v91 = v467 + *(int *)(v70 + 48);
        sub_100010918(v467, v91, v85, v88, 0, v84);
        v92 = v489;
        (*(void (**)(char *, uint64_t, uint64_t))(v500 + 16))(v489, v90, v502);
        sub_100012408(v91, (uint64_t)&v92[*(int *)(v70 + 48)], v74);
        sub_1000124F8(v90, (uint64_t *)&unk_10015ABF0);
        v89 = 0;
      }
      v496 = v68;
      v93 = v479;
      v94 = (uint64_t)v489;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v479 + 56))(v489, v89, 1, v70);
      swift_release(v84);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v94, 1, v70) == 1)
      {
        sub_1000124F8(v94, &qword_100157EF8);
        v520[0] = 0;
        v520[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(55);
        v95._countAndFlagsBits = 0xD000000000000026;
        v95._object = v464;
        String.append(_:)(v95);
        v96 = sub_100012534(&qword_100159000, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F3D4);
        v97._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v484, v96);
        object = v97._object;
        String.append(_:)(v97);
        swift_bridgeObjectRelease(object);
        v99._countAndFlagsBits = 0x7264206874697720;
        v99._object = (void *)0xED00002072657669;
        String.append(_:)(v99);
        v100._countAndFlagsBits = v498;
        v100._object = v505;
        String.append(_:)(v100);
        v101 = v520[0];
        v102 = v520[1];
        v103 = sub_1000122F8();
        v104 = swift_allocError(&type metadata for KMError, v103, 0, 0);
        *(_QWORD *)v105 = v101;
        *(_QWORD *)(v105 + 8) = v102;
        *(_OWORD *)(v105 + 16) = 0u;
        *(_OWORD *)(v105 + 32) = 0u;
        *(_OWORD *)(v105 + 48) = 0u;
        *(_QWORD *)(v105 + 64) = 0;
        *(_BYTE *)(v105 + 72) = 50;
        swift_willThrow(v104);
        goto LABEL_28;
      }
      v509 = v61;
      v106 = v94;
      v107 = v94 + *(int *)(v70 + 48);
      v108 = v466;
      v109 = v465;
      v110 = (uint64_t)&v465[*(int *)(v466 + 48)];
      v111 = v500;
      v112 = *(void (**)(char *, uint64_t, uint64_t))(v500 + 32);
      v113 = v502;
      v112(v465, v106, v502);
      sub_10001244C(v107, v110, v74);
      v114 = (uint64_t)&v109[*(int *)(v108 + 48)];
      v115 = (uint64_t)v473;
      v112(v473, (uint64_t)v109, v113);
      v116 = v472;
      sub_10001244C(v114, v472, v74);
      if ((static UUID.== infix(_:_:)(v116, v115) & 1) == 0)
      {
        v520[0] = 0;
        v520[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(48);
        swift_bridgeObjectRelease(v520[1]);
        strcpy((char *)v520, "Bin entry ");
        BYTE3(v520[1]) = 0;
        HIDWORD(v520[1]) = -369098752;
        v135 = sub_100012534(&qword_100157EB8, v74, (uint64_t)&unk_1001105E8);
        v136._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v470, v135);
        v137 = v136._object;
        String.append(_:)(v136);
        swift_bridgeObjectRelease(v137);
        v138._countAndFlagsBits = 0xD000000000000022;
        v138._object = v453;
        String.append(_:)(v138);
        v139 = sub_100012534(&qword_100158EF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v140._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v113, v139);
        v141 = v140._object;
        String.append(_:)(v140);
        swift_bridgeObjectRelease(v141);
        v142 = v520[0];
        v143 = v520[1];
        v144 = sub_1000122F8();
        v104 = swift_allocError(&type metadata for KMError, v144, 0, 0);
        *(_QWORD *)v145 = v142;
        *(_QWORD *)(v145 + 8) = v143;
        *(_OWORD *)(v145 + 16) = 0u;
        *(_OWORD *)(v145 + 32) = 0u;
        *(_OWORD *)(v145 + 48) = 0u;
        *(_QWORD *)(v145 + 64) = 0;
        *(_BYTE *)(v145 + 72) = 50;
        swift_willThrow(v104);
        sub_100012490(v116, v74);
        (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v115, v113);
        goto LABEL_28;
      }
      v117 = sub_10003B4E0(v115, *v485);
      v118 = v459;
      if ((v117 & 1) != 0)
      {
        swift_bridgeObjectRelease(v505);
        v119 = sub_1000D31B4();
        v120 = v478;
        (*(void (**)(char *, uint64_t, uint64_t))(v478 + 16))(v71, v119, v510);
        v121 = v500;
        v122 = v502;
        (*(void (**)(char *, uint64_t, uint64_t))(v500 + 16))(v118, v115, v502);
        v123 = v499;
        swift_bridgeObjectRetain(v499);
        v125 = Logger.logObject.getter(v124);
        v126 = static os_log_type_t.default.getter(v125);
        if (os_log_type_enabled(v125, v126))
        {
          v127 = swift_slowAlloc(22, -1);
          v128 = swift_slowAlloc(64, -1);
          v520[0] = v128;
          *(_DWORD *)v127 = v463.n128_u32[0];
          swift_bridgeObjectRetain(v123);
          *(_QWORD *)(v127 + 4) = sub_1000055A0(v492, v123, v520);
          swift_bridgeObjectRelease_n(v123, 3);
          *(_WORD *)(v127 + 12) = 2080;
          v129 = sub_100012534(&qword_100158EF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v130 = dispatch thunk of CustomStringConvertible.description.getter(v122, v129);
          v132 = v131;
          *(_QWORD *)(v127 + 14) = sub_1000055A0(v130, v131, v520);
          swift_bridgeObjectRelease(v132);
          v133 = *(void (**)(char *, uint64_t))(v121 + 8);
          v133(v459, v122);
          _os_log_impl((void *)&_mh_execute_header, v125, v126, "Skipping bundle at %s, already inserted into new bin with UUID %s", (uint8_t *)v127, 0x16u);
          swift_arrayDestroy(v128, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v128, -1, -1);
          swift_slowDealloc(v127, -1, -1);

          v71 = v481;
          (*(void (**)(char *, uint64_t))(v120 + 8))(v481, v510);
          v134 = v472;
        }
        else
        {

          v133 = *(void (**)(char *, uint64_t))(v121 + 8);
          v133(v118, v122);
          swift_bridgeObjectRelease_n(v123, 2);
          v71 = v481;
          (*(void (**)(char *, uint64_t))(v120 + 8))(v481, v510);
          v134 = v116;
        }
        v69 = v74;
        sub_100012490(v134, v74);
        v133(v473, v122);
      }
      else
      {
        LOBYTE(v516) = 0;
        v146 = *(_QWORD *)(v494 + 40);
        v147 = *(_QWORD *)(v494 + 48);
        v148 = v487;
        sub_100004DE4(v487, v146);
        sub_10010731C(v146, v147);
        v149 = v522;
        v150 = sub_100004DE4(v520, v521);
        v151 = URL.path.getter(v150);
        v153 = v152;
        LOBYTE(v146) = (*(uint64_t (**)(uint64_t))(v149 + 136))(v151);
        swift_bridgeObjectRelease(v153);
        if ((v146 & 1) == 0)
        {
          sub_100005D08(v520);
          v155 = v500;
LABEL_26:
          v520[0] = 0;
          v520[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(42);
          v166 = swift_bridgeObjectRelease(v520[1]);
          v520[0] = 0xD000000000000012;
          v520[1] = v449;
          v167._countAndFlagsBits = URL.path.getter(v166);
          v168 = v167._object;
          String.append(_:)(v167);
          swift_bridgeObjectRelease(v168);
          v169._countAndFlagsBits = 0x20726F6620;
          v169._object = (void *)0xE500000000000000;
          String.append(_:)(v169);
          v170 = v472;
          v171 = (uint64_t *)(v472 + *(int *)(v470 + 20));
          v172 = *v171;
          v173 = (void *)v171[1];
          swift_bridgeObjectRetain(v173);
          v174._countAndFlagsBits = v172;
          v174._object = v173;
          String.append(_:)(v174);
          swift_bridgeObjectRelease(v173);
          v175._countAndFlagsBits = 0x6F6E2073656F6420;
          v175._object = (void *)0xEF74736978652074;
          String.append(_:)(v175);
          v176 = v520[0];
          v177 = v520[1];
          v178 = sub_1000122F8();
          v104 = swift_allocError(&type metadata for KMError, v178, 0, 0);
          *(_QWORD *)v179 = v176;
          *(_QWORD *)(v179 + 8) = v177;
          *(_OWORD *)(v179 + 16) = 0u;
          *(_OWORD *)(v179 + 32) = 0u;
          *(_OWORD *)(v179 + 48) = 0u;
          *(_QWORD *)(v179 + 64) = 0;
          *(_BYTE *)(v179 + 72) = 19;
          swift_willThrow(v104);
          sub_100012490(v170, type metadata accessor for DriverBinEntry);
          (*(void (**)(char *, uint64_t))(v155 + 8))(v473, v502);
          goto LABEL_28;
        }
        v154 = v516;
        sub_100005D08(v520);
        v155 = v500;
        if ((v154 & 1) == 0)
          goto LABEL_26;
        v156 = *(_QWORD *)(v494 + 40);
        v157 = *(_QWORD *)(v494 + 48);
        sub_100004DE4(v148, v156);
        sub_10010731C(v156, v157);
        v158 = v522;
        v159 = sub_100004DE4(v520, v521);
        v160 = URL.path.getter(v159);
        v162 = v161;
        LOBYTE(v156) = (*(uint64_t (**)(uint64_t))(v158 + 136))(v160);
        swift_bridgeObjectRelease(v162);
        if ((v156 & 1) == 0)
        {
          sub_100005D08(v520);
          v164 = v500;
LABEL_61:
          v520[0] = 0;
          v520[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          v406 = swift_bridgeObjectRelease(v520[1]);
          strcpy((char *)v520, "Staged bundle ");
          HIBYTE(v520[1]) = -18;
          v407._countAndFlagsBits = URL.path.getter(v406);
          v408 = v407._object;
          String.append(_:)(v407);
          swift_bridgeObjectRelease(v408);
          v409._countAndFlagsBits = 0x20726F6620;
          v409._object = (void *)0xE500000000000000;
          String.append(_:)(v409);
          v410 = v472;
          v411 = (uint64_t *)(v472 + *(int *)(v470 + 20));
          v412 = *v411;
          v413 = (void *)v411[1];
          swift_bridgeObjectRetain(v413);
          v414._countAndFlagsBits = v412;
          v414._object = v413;
          String.append(_:)(v414);
          swift_bridgeObjectRelease(v413);
          v415._countAndFlagsBits = 0x6F6E2073656F6420;
          v415._object = (void *)0xEF74736978652074;
          String.append(_:)(v415);
          v416 = v520[0];
          v417 = v520[1];
          v418 = sub_1000122F8();
          v104 = swift_allocError(&type metadata for KMError, v418, 0, 0);
          *(_QWORD *)v419 = v416;
          *(_QWORD *)(v419 + 8) = v417;
          *(_OWORD *)(v419 + 16) = 0u;
          *(_OWORD *)(v419 + 32) = 0u;
          *(_OWORD *)(v419 + 48) = 0u;
          *(_QWORD *)(v419 + 64) = 0;
          *(_BYTE *)(v419 + 72) = 19;
          swift_willThrow(v104);
          sub_100012490(v410, type metadata accessor for DriverBinEntry);
          (*(void (**)(char *, uint64_t))(v164 + 8))(v473, v502);
LABEL_28:
          v509 = 0;
          v180 = v494;
          v181 = sub_1000D31B4();
          v182 = v478;
          v183 = *(void (**)(char *, uint64_t, uint64_t))(v478 + 16);
          v184 = v476;
          v506 = v181;
          v507 = v183;
          ((void (*)(char *))v183)(v476);
          swift_errorRetain(v104);
          v185 = swift_errorRetain(v104);
          v186 = Logger.logObject.getter(v185);
          v187 = static os_log_type_t.error.getter(v186);
          v188 = os_log_type_enabled(v186, v187);
          v490 = v104;
          if (v188)
          {
            v189 = (uint8_t *)swift_slowAlloc(12, -1);
            v190 = swift_slowAlloc(32, -1);
            v520[0] = v190;
            *(_DWORD *)v189 = v462.n128_u32[0];
            v191 = v182;
            v192 = v184;
            v193 = v191;
            v516 = v104;
            swift_errorRetain(v104);
            v194 = sub_100005C88(&qword_10015AB50);
            v195 = String.init<A>(describing:)(&v516, v194);
            v197 = v196;
            v516 = sub_1000055A0(v195, v196, v520);
            v180 = v494;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v189 + 4, v189 + 12);
            swift_bridgeObjectRelease(v197);
            swift_errorRelease(v104);
            swift_errorRelease(v104);
            _os_log_impl((void *)&_mh_execute_header, v186, v187, "Failed to reuse existing bin entry: %s. Creating new bin entry", v189, 0xCu);
            swift_arrayDestroy(v190, 1, v461);
            v198 = v510;
            swift_slowDealloc(v190, -1, -1);
            swift_slowDealloc(v189, -1, -1);

            v199 = *(uint64_t (**)(char *, uint64_t))(v193 + 8);
            v200 = v192;
            v201 = v198;
            v202 = v198;
          }
          else
          {
            swift_errorRelease(v104);
            swift_errorRelease(v104);

            v199 = *(uint64_t (**)(char *, uint64_t))(v182 + 8);
            v200 = v184;
            v202 = v510;
            v201 = v510;
          }
          v508 = v199;
          v199(v200, v202);
          v203 = v477;
          v204 = v504;
          v205 = v503;
          v206 = sub_10003B410(*v485, v493);
          v207 = UUID.uuidString.getter(v206);
          v209 = v208;
          URL.appendingPathComponent(_:isDirectory:)(v207, v208, 1);
          swift_bridgeObjectRelease(v209);
          v210 = *(_QWORD *)(v180 + 40);
          v211 = *(_QWORD *)(v180 + 48);
          sub_100004DE4(v487, v210);
          sub_10010731C(v210, v211);
          v212 = v521;
          v213 = v522;
          sub_100004DE4(v520, v521);
          v214 = sub_10001B9E4((uint64_t)_swiftEmptyArrayStorage);
          v215 = v509;
          (*(void (**)(char *, uint64_t, unint64_t, uint64_t, uint64_t))(v213 + 48))(v205, 1, v214, v212, v213);
          v509 = v215;
          v216 = v499;
          if (v215)
          {
            swift_bridgeObjectRelease(v214);
            swift_bridgeObjectRelease(v216);
            v217 = sub_100005D08(v520);
            v218 = errno.getter(v217);
            v219 = strerror(v218);
            if (!v219)
              goto LABEL_73;
            v220 = String.init(cString:)(v219);
            v222 = v221;
            v223 = v203;
            v507(v203, v506, v201);
            v224 = v469;
            (*(void (**)(char *, char *, uint64_t))(v495 + 16))(v469, v205, v204);
            v225 = v509;
            swift_errorRetain(v509);
            swift_errorRetain(v225);
            swift_bridgeObjectRetain(v222);
            v227 = Logger.logObject.getter(v226);
            v228 = static os_log_type_t.error.getter(v227);
            if (os_log_type_enabled(v227, v228))
            {
              v229 = swift_slowAlloc(32, -1);
              v230 = swift_slowAlloc(96, -1);
              v499 = v230;
              v520[0] = v230;
              *(_DWORD *)v229 = v460.n128_u32[0];
              v492 = v220;
              v231 = URL.path.getter(v230);
              v233 = v232;
              v516 = sub_1000055A0(v231, v232, v520);
              v234 = v488;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v229 + 4, v229 + 12);
              swift_bridgeObjectRelease(v233);
              v235 = v501;
              v501(v224, v204);
              *(_WORD *)(v229 + 12) = 2080;
              v516 = v509;
              swift_errorRetain(v509);
              v236 = sub_100005C88(&qword_10015AB50);
              v237 = String.init<A>(describing:)(&v516, v236);
              v239 = v238;
              v516 = sub_1000055A0(v237, v238, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v234, v229 + 14, v229 + 22);
              swift_bridgeObjectRelease(v239);
              swift_errorRelease(v509);
              swift_errorRelease(v509);
              *(_WORD *)(v229 + 22) = 2080;
              swift_bridgeObjectRetain(v222);
              v516 = sub_1000055A0(v492, v222, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v234, v229 + 24, v229 + 32);
              swift_bridgeObjectRelease_n(v222, 3);
              _os_log_impl((void *)&_mh_execute_header, v227, v228, "Could not create directory %s: %s (errno %s)", (uint8_t *)v229, 0x20u);
              v240 = v499;
              swift_arrayDestroy(v499, 3, (char *)&type metadata for Any + 8);
              v225 = v509;
              swift_slowDealloc(v240, -1, -1);
              swift_slowDealloc(v229, -1, -1);

              v241 = v223;
              v242 = v510;
            }
            else
            {
              v235 = v501;
              v501(v224, v204);
              swift_errorRelease(v225);
              swift_errorRelease(v225);

              swift_bridgeObjectRelease_n(v222, 2);
              v241 = v223;
              v242 = v201;
            }
            v266 = v508(v241, v242);
            v267 = (uint64_t)v474;
            v268 = v500;
            v269 = v204;
            v270 = (unint64_t)v505;
            swift_willThrow(v266);
            v235(v503, v269);
            (*(void (**)(uint64_t, uint64_t))(v268 + 8))(v493, v502);
            v271 = v486;
            goto LABEL_58;
          }
          swift_bridgeObjectRelease(v214);
          sub_100005D08(v520);
          v243 = v201;
          v507(v471, v506, v201);
          v244 = v458;
          sub_100012408(v491, v458, type metadata accessor for ApplicationRecord);
          v245 = *(void (**)(char *, char *, uint64_t))(v495 + 16);
          v246 = v457;
          v245(v457, v205, v204);
          v247 = swift_bridgeObjectRetain_n(v216, 2);
          v248 = Logger.logObject.getter(v247);
          v249 = static os_log_type_t.default.getter(v248);
          v250 = v249;
          v251 = os_log_type_enabled(v248, v249);
          v468 = v245;
          if (v251)
          {
            v252 = v246;
            v253 = swift_slowAlloc(32, -1);
            v254 = swift_slowAlloc(96, -1);
            v520[0] = v254;
            *(_DWORD *)v253 = v460.n128_u32[0];
            LODWORD(v455) = v250;
            v255 = sub_100013834(*(_QWORD *)(v244 + *(int *)(v484 + 32)), *(_QWORD *)(v244 + *(int *)(v484 + 32) + 8));
            v256 = v244;
            v258 = v257;
            v516 = sub_1000055A0(v255, v257, v520);
            v259 = v216;
            v260 = v488;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v253 + 4, v253 + 12);
            swift_bridgeObjectRelease(v258);
            sub_100012490(v256, type metadata accessor for ApplicationRecord);
            *(_WORD *)(v253 + 12) = 2080;
            swift_bridgeObjectRetain(v259);
            v516 = sub_1000055A0(v492, v259, v520);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v260, v253 + 14, v253 + 22);
            v261 = swift_bridgeObjectRelease_n(v259, 3);
            *(_WORD *)(v253 + 22) = 2080;
            v262 = URL.path.getter(v261);
            v264 = v263;
            v516 = sub_1000055A0(v262, v263, v520);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v260, v253 + 24, v253 + 32);
            swift_bridgeObjectRelease(v264);
            v501(v252, v204);
            _os_log_impl((void *)&_mh_execute_header, v248, (os_log_type_t)v455, "Attempting to copy out driver extension:\n  installIdentifier: %s\n               from: %s\n                 to: %s", (uint8_t *)v253, 0x20u);
            swift_arrayDestroy(v254, 3, (char *)&type metadata for Any + 8);
            v265 = v494;
            swift_slowDealloc(v254, -1, -1);
            swift_slowDealloc(v253, -1, -1);

            v508(v471, v510);
          }
          else
          {
            sub_100012490(v244, type metadata accessor for ApplicationRecord);
            swift_bridgeObjectRelease_n(v216, 2);
            v501(v246, v204);

            v508(v471, v243);
            v265 = v494;
            v259 = v216;
          }
          v272 = *(_QWORD *)(v265 + 40);
          v273 = *(_QWORD *)(v265 + 48);
          v274 = v487;
          sub_100004DE4(v487, v272);
          sub_10010731C(v272, v273);
          v275 = v521;
          v276 = v522;
          v277 = sub_100004DE4(v520, v521);
          v278 = URL.path.getter(v277);
          v280 = v279;
          v281 = sub_100105630();
          v282 = v275;
          v283 = v509;
          sub_10010563C(v492, v259, v278, v280, v281, v282, v276);
          v509 = v283;
          if (v283)
          {
            swift_bridgeObjectRelease(v280);
            v284 = sub_100005D08(v520);
            v285 = errno.getter(v284);
            v286 = strerror(v285);
            v287 = v501;
            if (!v286)
              goto LABEL_74;
            v455 = String.init(cString:)(v286);
            v289 = v288;
            v290 = v456;
            v291 = v510;
            v507(v456, v506, v510);
            v292 = v452;
            v293 = v504;
            v468(v452, v503, v504);
            v294 = v509;
            swift_errorRetain(v509);
            v295 = v499;
            swift_bridgeObjectRetain(v499);
            swift_errorRetain(v294);
            swift_bridgeObjectRetain(v289);
            v297 = Logger.logObject.getter(v296);
            v298 = static os_log_type_t.error.getter(v297);
            LODWORD(v468) = v298;
            v299 = os_log_type_enabled(v297, v298);
            v300 = v492;
            if (v299)
            {
              v301 = swift_slowAlloc(42, -1);
              v451 = swift_slowAlloc(128, -1);
              v520[0] = v451;
              *(_DWORD *)v301 = v450.n128_u32[0];
              swift_bridgeObjectRetain(v295);
              v516 = sub_1000055A0(v300, v295, v520);
              v302 = v488;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v301 + 4, v301 + 12);
              v303 = swift_bridgeObjectRelease_n(v295, 3);
              *(_WORD *)(v301 + 12) = 2080;
              v304 = URL.path.getter(v303);
              v306 = v305;
              v516 = sub_1000055A0(v304, v305, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v302, v301 + 14, v301 + 22);
              swift_bridgeObjectRelease(v306);
              v287(v292, v293);
              *(_WORD *)(v301 + 22) = 2080;
              v516 = v294;
              swift_errorRetain(v294);
              v307 = sub_100005C88(&qword_10015AB50);
              v308 = String.init<A>(describing:)(&v516, v307);
              v310 = v309;
              v516 = sub_1000055A0(v308, v309, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v302, v301 + 24, v301 + 32);
              swift_bridgeObjectRelease(v310);
              swift_errorRelease(v294);
              swift_errorRelease(v294);
              *(_WORD *)(v301 + 32) = 2080;
              swift_bridgeObjectRetain(v289);
              v516 = sub_1000055A0(v455, v289, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v302, v301 + 34, v301 + 42);
              swift_bridgeObjectRelease_n(v289, 3);
              _os_log_impl((void *)&_mh_execute_header, v297, (os_log_type_t)v468, "Could not copyfile:\nfrom: %s\nto: %s\nerror: %s\nerrno: %s", (uint8_t *)v301, 0x2Au);
              v311 = v451;
              swift_arrayDestroy(v451, 4, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v311, -1, -1);
              swift_slowDealloc(v301, -1, -1);

              v312 = v456;
              v313 = v510;
            }
            else
            {
              swift_bridgeObjectRelease_n(v295, 2);
              v287(v292, v293);
              swift_errorRelease(v294);
              swift_errorRelease(v294);

              swift_bridgeObjectRelease_n(v289, 2);
              v312 = v290;
              v313 = v291;
            }
            v381 = v508(v312, v313);
            v267 = (uint64_t)v474;
            v382 = v502;
            swift_willThrow(v381);
            v287(v503, v504);
            (*(void (**)(uint64_t, uint64_t))(v500 + 8))(v493, v382);
            v225 = v294;
LABEL_57:
            v270 = (unint64_t)v505;
            v271 = v486;
LABEL_58:
            v507(v271, v506, v510);
            sub_100012408(v491, v267, type metadata accessor for ApplicationRecord);
            swift_bridgeObjectRetain(v270);
            v394 = swift_errorRetain(v225);
            v395 = Logger.logObject.getter(v394);
            v396 = static os_log_type_t.error.getter(v395);
            if (os_log_type_enabled(v395, v396))
            {
              v397 = swift_slowAlloc(22, -1);
              v398 = swift_slowAlloc(64, -1);
              v509 = 0;
              v399 = v398;
              v520[0] = v398;
              *(_DWORD *)v397 = v463.n128_u32[0];
              swift_bridgeObjectRetain(v270);
              v516 = sub_1000055A0(v498, v270, v520);
              v400 = v225;
              v401 = v488;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v397 + 4, v397 + 12);
              swift_bridgeObjectRelease_n(v270, 3);
              *(_WORD *)(v397 + 12) = 2080;
              v402 = sub_100012534(&qword_100159000, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F3D4);
              v403 = dispatch thunk of CustomStringConvertible.description.getter(v484, v402);
              v405 = v404;
              v516 = sub_1000055A0(v403, v404, v520);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v401, v397 + 14, v397 + 22);
              swift_bridgeObjectRelease(v405);
              sub_100012490(v267, type metadata accessor for ApplicationRecord);
              _os_log_impl((void *)&_mh_execute_header, v395, v396, "Failed to stage driver %s from app %s", (uint8_t *)v397, 0x16u);
              swift_arrayDestroy(v399, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v399, -1, -1);
              swift_slowDealloc(v397, -1, -1);
              swift_errorRelease(v400);

              swift_errorRelease(v400);
              swift_errorRelease(v490);
              v508(v486, v510);
              v61 = v509;
            }
            else
            {
              swift_errorRelease(v490);
              swift_errorRelease(v225);
              swift_bridgeObjectRelease_n(v270, 2);
              sub_100012490(v267, type metadata accessor for ApplicationRecord);
              swift_errorRelease(v225);

              v508(v271, v510);
              v61 = 0;
            }
            v71 = v481;
            v70 = v483;
            v72 = v497;
            v73 = v496;
            v69 = type metadata accessor for DriverBinEntry;
            goto LABEL_5;
          }
          swift_bridgeObjectRelease(v280);
          swift_bridgeObjectRelease(v259);
          sub_100005D08(v520);
          URL.appendingPathComponent(_:isDirectory:)(v498, v505, 1);
          v511 = 0;
          v314 = *(_QWORD *)(v265 + 40);
          v315 = *(_QWORD *)(v265 + 48);
          sub_100004DE4(v274, v314);
          sub_10010731C(v314, v315);
          v316 = v522;
          v317 = sub_100004DE4(v520, v521);
          v318 = URL.path.getter(v317);
          v320 = v319;
          LOBYTE(v314) = (*(uint64_t (**)(uint64_t))(v316 + 136))(v318);
          swift_bridgeObjectRelease(v320);
          if ((v314 & 1) == 0)
          {
            sub_100005D08(v520);
            v322 = v502;
            v323 = v501;
LABEL_56:
            v520[0] = 0;
            v520[1] = 0xE000000000000000;
            _StringGuts.grow(_:)(55);
            v383._countAndFlagsBits = 0x2064657461657243;
            v383._object = (void *)0xE800000000000000;
            String.append(_:)(v383);
            v384 = v454;
            v386._countAndFlagsBits = URL.path.getter(v385);
            v387 = v386._object;
            String.append(_:)(v386);
            swift_bridgeObjectRelease(v387);
            v388._countAndFlagsBits = 0xD00000000000002DLL;
            v388._object = v448;
            String.append(_:)(v388);
            v389 = v520[0];
            v390 = v520[1];
            v391 = sub_1000122F8();
            v225 = swift_allocError(&type metadata for KMError, v391, 0, 0);
            *(_QWORD *)v392 = v389;
            *(_QWORD *)(v392 + 8) = v390;
            *(_OWORD *)(v392 + 16) = 0u;
            *(_OWORD *)(v392 + 32) = 0u;
            *(_OWORD *)(v392 + 48) = 0u;
            *(_QWORD *)(v392 + 64) = 0;
            *(_BYTE *)(v392 + 72) = 19;
            swift_willThrow(v225);
            v393 = v504;
            v323(v384, v504);
            v323(v503, v393);
            (*(void (**)(uint64_t, uint64_t))(v500 + 8))(v493, v322);
            v267 = (uint64_t)v474;
            goto LABEL_57;
          }
          v321 = v511;
          sub_100005D08(v520);
          v322 = v502;
          v323 = v501;
          if ((v321 & 1) == 0)
            goto LABEL_56;
          v324 = (uint64_t)v443;
          v325 = v504;
          (*(void (**)(char *, uint64_t, uint64_t))(v500 + 16))(v443, v493, v502);
          v326 = v444;
          sub_100012408(v491, v444, type metadata accessor for ApplicationRecord);
          v327 = (uint64_t)v482;
          v328 = (uint64_t (*)(char *, char *, uint64_t))v468;
          v468(v482, v503, v325);
          v329 = (uint64_t)v442;
          v330 = v328(v442, v454, v325);
          v331 = (uint64_t)v445;
          static Date.now.getter(v330);
          v332 = v447;
          sub_10003CDA8(v324, v326, v327, v329, v331, v447);
          sub_10003B530(v332);
          v520[0] = 0;
          v520[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(84);
          v333._countAndFlagsBits = 0xD000000000000013;
          v333._object = v438;
          String.append(_:)(v333);
          v334 = sub_100012534(&qword_100159000, type metadata accessor for ApplicationRecord, (uint64_t)&unk_10010F3D4);
          v335._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v484, v334);
          v336 = v335._object;
          String.append(_:)(v335);
          swift_bridgeObjectRelease(v336);
          v337._countAndFlagsBits = 0x7264206874697720;
          v337._object = (void *)0xED00002072657669;
          String.append(_:)(v337);
          v338._countAndFlagsBits = v498;
          v339 = v505;
          v338._object = v505;
          String.append(_:)(v338);
          swift_bridgeObjectRelease(v339);
          v340._countAndFlagsBits = 544175136;
          v340._object = (void *)0xE400000000000000;
          String.append(_:)(v340);
          v341 = v470;
          v342 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v343._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v325, v342);
          v344 = v343._object;
          String.append(_:)(v343);
          swift_bridgeObjectRelease(v344);
          v345._countAndFlagsBits = 0xD00000000000001ALL;
          v345._object = v437;
          String.append(_:)(v345);
          v346 = v332 + *(int *)(v341 + 28);
          v347._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v325, v342);
          v348 = v347._object;
          String.append(_:)(v347);
          swift_bridgeObjectRelease(v348);
          v349._countAndFlagsBits = 0x5520676E69737520;
          v349._object = (void *)0xEC00000020444955;
          String.append(_:)(v349);
          v350 = sub_100012534(&qword_100158EF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v351._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v502, v350);
          v352 = v351._object;
          String.append(_:)(v351);
          swift_bridgeObjectRelease(v352);
          v353 = v520[0];
          v354 = v520[1];
          v355 = v446;
          v356 = (_QWORD *)*v446;
          if ((swift_isUniquelyReferenced_nonNull_native(*v446) & 1) == 0)
            v356 = sub_10000C500(0, v356[2] + 1, 1, v356);
          v69 = type metadata accessor for DriverBinEntry;
          v61 = v509;
          v358 = v356[2];
          v357 = v356[3];
          if (v358 >= v357 >> 1)
            v356 = sub_10000C500((_QWORD *)(v357 > 1), v358 + 1, 1, v356);
          v356[2] = v358 + 1;
          v359 = &v356[2 * v358];
          v359[4] = v353;
          v359[5] = v354;
          *v355 = v356;
          v360 = v494;
          v361 = *(_QWORD *)(v494 + 40);
          v362 = *(_QWORD *)(v494 + 48);
          sub_100004DE4(v487, v361);
          sub_10009C20C(v361, v362);
          v363 = v518;
          v364 = v519;
          sub_100004DE4(&v516, v518);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v364 + 24))(&v514, v346, v363, v364);
          if (v515)
          {
            sub_100004E2C(&v514, (uint64_t)v520);
            sub_100005D08(&v516);
            v365 = v521;
            v366 = v522;
            sub_100004DE4(v520, v521);
            v367 = (*(uint64_t (**)(uint64_t, uint64_t))(v366 + 24))(v365, v366);
            if (v368)
            {
              v369 = v367;
              v370 = v368;
              v371 = *(_QWORD *)(v360 + 40);
              v372 = *(_QWORD *)(v360 + 48);
              sub_100004DE4(v487, v371);
              sub_100005554(v371, v372);
              v373 = v518;
              v374 = v519;
              v375 = sub_100004DE4(&v516, v518);
              v376 = URL.path.getter(v375);
              v378 = v377;
              sub_100016734(v369, v370, v376, v377, v373, v374);
              swift_bridgeObjectRelease(v370);
              swift_bridgeObjectRelease(v378);
              swift_errorRelease(v490);
              sub_100012490(v447, type metadata accessor for DriverBinEntry);
              v379 = v504;
              v380 = v501;
              v501(v454, v504);
              v380(v503, v379);
              (*(void (**)(uint64_t, uint64_t))(v500 + 8))(v493, v502);
              sub_100005D08(&v516);
              sub_100005D08(v520);
LABEL_68:
              v71 = v481;
              v70 = v483;
              v72 = v497;
              v73 = v496;
              goto LABEL_5;
            }
            v420 = v520;
          }
          else
          {
            sub_1000124F8((uint64_t)&v514, &qword_100157C78);
            v420 = &v516;
          }
          sub_100005D08(v420);
          v421 = v441;
          v507(v441, v506, v510);
          v422 = v447;
          v423 = v440;
          v424 = sub_100012408(v447, v440, type metadata accessor for DriverBinEntry);
          v425 = Logger.logObject.getter(v424);
          v426 = static os_log_type_t.error.getter(v425);
          if (os_log_type_enabled(v425, v426))
          {
            v427 = (uint8_t *)swift_slowAlloc(12, -1);
            v428 = swift_slowAlloc(32, -1);
            v520[0] = v428;
            *(_DWORD *)v427 = v462.n128_u32[0];
            v429 = URL.path.getter(v428);
            v431 = v430;
            v516 = sub_1000055A0(v429, v430, v520);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v516, v488, v427 + 4, v427 + 12);
            swift_bridgeObjectRelease(v431);
            sub_100012490(v423, type metadata accessor for DriverBinEntry);
            _os_log_impl((void *)&_mh_execute_header, v425, v426, "Could not report driver install: could not resolve driver bundle at\n %s", v427, 0xCu);
            swift_arrayDestroy(v428, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v428, -1, -1);
            swift_slowDealloc(v427, -1, -1);

            swift_errorRelease(v490);
            v508(v441, v510);
            v432 = v447;
          }
          else
          {

            sub_100012490(v423, type metadata accessor for DriverBinEntry);
            swift_errorRelease(v490);
            v508(v421, v510);
            v432 = v422;
          }
          sub_100012490(v432, type metadata accessor for DriverBinEntry);
          v433 = v504;
          v434 = v501;
          v501(v454, v504);
          v434(v503, v433);
          (*(void (**)(uint64_t, uint64_t))(v500 + 8))(v493, v502);
          goto LABEL_68;
        }
        v163 = v516;
        sub_100005D08(v520);
        v164 = v500;
        if ((v163 & 1) == 0)
          goto LABEL_61;
        swift_bridgeObjectRelease(v505);
        swift_bridgeObjectRelease(v499);
        v165 = v472;
        sub_10003B530(v472);
        v69 = type metadata accessor for DriverBinEntry;
        sub_100012490(v165, type metadata accessor for DriverBinEntry);
        (*(void (**)(char *, uint64_t))(v164 + 8))(v473, v502);
      }
      v70 = v483;
      v72 = v497;
      v73 = v496;
      v61 = v509;
LABEL_5:
      v68 = v73 + 2;
      v65 = v72 - 1;
      if (!v65)
      {
        swift_release(v480);
        return swift_bridgeObjectRelease(v439);
      }
    }
  }
  return swift_release(v62);
}

uint64_t sub_10004A184(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void (*v35)(void);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(char *, uint64_t);
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  int64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;

  v59 = a2;
  v60 = a1;
  v6 = type metadata accessor for URL(0);
  v79 = *(_QWORD **)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v80 = (char *)&v58 - v10;
  v68 = sub_100005C88((uint64_t *)&unk_10015ABF0);
  v11 = __chkstk_darwin(v68);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v58 - v14;
  v16 = type metadata accessor for DriverBinEntry(0);
  v66 = *(_QWORD *)(v16 - 8);
  v67 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v74 - 8);
  result = __chkstk_darwin(v74);
  v73 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = 0;
  v69 = (_QWORD *)a3;
  v23 = *(_QWORD *)(a3 + 64);
  v61 = 0;
  v62 = a3 + 64;
  v24 = 1 << *(_BYTE *)(a3 + 32);
  if (v24 < 64)
    v25 = ~(-1 << v24);
  else
    v25 = -1;
  v26 = v25 & v23;
  v63 = (unint64_t)(v24 + 63) >> 6;
  v64 = v19;
  v77 = a4 + 7;
  v78 = a4;
  v75 = v15;
  v76 = v13;
  v65 = v18;
  while (1)
  {
    if (v26)
    {
      v71 = (v26 - 1) & v26;
      v72 = v22;
      v29 = __clz(__rbit64(v26)) | (v22 << 6);
      goto LABEL_22;
    }
    v30 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v30 >= v63)
      return sub_10000DC74(v60, v59, v61, v69);
    v31 = *(_QWORD *)(v62 + 8 * v30);
    v32 = v22 + 1;
    if (!v31)
    {
      v32 = v22 + 2;
      if (v22 + 2 >= v63)
        return sub_10000DC74(v60, v59, v61, v69);
      v31 = *(_QWORD *)(v62 + 8 * v32);
      if (!v31)
      {
        v32 = v22 + 3;
        if (v22 + 3 >= v63)
          return sub_10000DC74(v60, v59, v61, v69);
        v31 = *(_QWORD *)(v62 + 8 * v32);
        if (!v31)
          break;
      }
    }
LABEL_21:
    v71 = (v31 - 1) & v31;
    v72 = v32;
    v29 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_22:
    v34 = v69;
    v35 = *(void (**)(void))(v19 + 16);
    v37 = v73;
    v36 = v74;
    ((void (*)(char *, unint64_t, uint64_t))v35)(v73, v69[6] + *(_QWORD *)(v19 + 72) * v29, v74);
    v38 = v34[7];
    v39 = *(_QWORD *)(v66 + 72);
    v70 = v29;
    sub_100012408(v38 + v39 * v29, (uint64_t)v18, type metadata accessor for DriverBinEntry);
    v40 = v68;
    v41 = (uint64_t)&v75[*(int *)(v68 + 48)];
    ((void (*)(char *, char *, uint64_t))v35)(v75, v37, v36);
    sub_100012408((uint64_t)v18, v41, type metadata accessor for DriverBinEntry);
    v42 = (uint64_t)&v76[*(int *)(v40 + 48)];
    v35();
    sub_100012408(v41, v42, type metadata accessor for DriverBinEntry);
    v43 = (void (*)(char *, uint64_t, uint64_t))v79[2];
    v43(v80, v42 + *(int *)(v67 + 28), v6);
    sub_100012490(v42, type metadata accessor for DriverBinEntry);
    if (v78[2]
      && (v44 = v78,
          v45 = v78[5],
          v46 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL), v47 = dispatch thunk of Hashable._rawHashValue(seed:)(v45, v6, v46), v48 = -1 << *((_BYTE *)v44 + 32), v49 = v47 & ~v48, ((*(_QWORD *)((char *)v77 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) != 0))
    {
      v50 = ~v48;
      v51 = v79[9];
      while (1)
      {
        v43(v9, v78[6] + v51 * v49, v6);
        v52 = sub_100012534(&qword_100157E98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v53 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v80, v6, v52);
        v54 = (void (*)(char *, uint64_t))v79[1];
        v54(v9, v6);
        if ((v53 & 1) != 0)
          break;
        v49 = (v49 + 1) & v50;
        if (((*(_QWORD *)((char *)v77 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
          goto LABEL_5;
      }
      v54(v80, v6);
      sub_1000124F8((uint64_t)v75, (uint64_t *)&unk_10015ABF0);
      v19 = v64;
      v55 = *(void (**)(char *, uint64_t))(v64 + 8);
      v56 = v74;
      v55(v76, v74);
      v18 = v65;
      sub_100012490((uint64_t)v65, type metadata accessor for DriverBinEntry);
      result = ((uint64_t (*)(char *, uint64_t))v55)(v73, v56);
      *(unint64_t *)((char *)v60 + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v70;
      v57 = __OFADD__(v61++, 1);
      v26 = v71;
      v22 = v72;
      if (v57)
      {
        __break(1u);
        return sub_10000DC74(v60, v59, v61, v69);
      }
    }
    else
    {
LABEL_5:
      ((void (*)(char *, uint64_t))v79[1])(v80, v6);
      sub_1000124F8((uint64_t)v75, (uint64_t *)&unk_10015ABF0);
      v19 = v64;
      v27 = *(void (**)(char *, uint64_t))(v64 + 8);
      v28 = v74;
      v27(v76, v74);
      v18 = v65;
      sub_100012490((uint64_t)v65, type metadata accessor for DriverBinEntry);
      result = ((uint64_t (*)(char *, uint64_t))v27)(v73, v28);
      v26 = v71;
      v22 = v72;
    }
  }
  v33 = v22 + 4;
  if (v22 + 4 >= v63)
    return sub_10000DC74(v60, v59, v61, v69);
  v31 = *(_QWORD *)(v62 + 8 * v33);
  if (v31)
  {
    v32 = v22 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v32 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v32 >= v63)
      return sub_10000DC74(v60, v59, v61, v69);
    v31 = *(_QWORD *)(v62 + 8 * v32);
    ++v33;
    if (v31)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10004A720(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_10004A184((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    v11 = swift_bridgeObjectRelease(a2);
    if (v2)
      swift_willThrow(v11);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v8, -1);
    bzero(v12, v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_10004A184((unint64_t *)v12, v7, a1, a2);
    swift_bridgeObjectRelease(a2);
    swift_slowDealloc(v12, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v10;
}

uint64_t sub_10004A8D4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  char v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  BOOL v43;
  uint64_t v44;
  unint64_t *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char *v57;

  v44 = a2;
  v45 = a1;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD **)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v57 = (char *)&v44 - v14;
  result = __chkstk_darwin(v13);
  v17 = (char *)&v44 - v16;
  v18 = 0;
  v19 = *(_QWORD *)(a3 + 56);
  v49 = 0;
  v50 = a3 + 56;
  v20 = 1 << *(_BYTE *)(a3 + 32);
  if (v20 < 64)
    v21 = ~(-1 << v20);
  else
    v21 = -1;
  v22 = v21 & v19;
  v51 = (unint64_t)(v20 + 63) >> 6;
  v55 = a5 + 7;
  v56 = a5;
  v47 = a4;
  v48 = a3;
  v46 = (char *)&v44 - v16;
  while (1)
  {
    if (v22)
    {
      v53 = v18;
      v54 = (v22 - 1) & v22;
      v24 = __clz(__rbit64(v22)) | (v18 << 6);
      goto LABEL_23;
    }
    v25 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v25 >= v51)
      goto LABEL_35;
    v26 = *(_QWORD *)(v50 + 8 * v25);
    v27 = v18 + 1;
    if (!v26)
    {
      v27 = v18 + 2;
      if (v18 + 2 >= v51)
        goto LABEL_35;
      v26 = *(_QWORD *)(v50 + 8 * v27);
      if (!v26)
      {
        v27 = v18 + 3;
        if (v18 + 3 >= v51)
          goto LABEL_35;
        v26 = *(_QWORD *)(v50 + 8 * v27);
        if (!v26)
          break;
      }
    }
LABEL_22:
    v53 = v27;
    v54 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_23:
    v52 = v24;
    v29 = v9[9];
    v30 = (void (*)(char *, unint64_t, uint64_t))v9[2];
    v30(v17, *(_QWORD *)(a3 + 48) + v29 * v24, v8);
    v31 = (*(uint64_t (**)(char *))(*(_QWORD *)a4 + 392))(v17);
    v30(v57, (unint64_t)v17, v8);
    if ((v31 & 1) == 0)
    {
      v23 = (void (*)(char *, uint64_t))v9[1];
      goto LABEL_6;
    }
    v32 = v9;
    v33 = v56;
    if (v56[2]
      && (v34 = v56[5],
          v35 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL), v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v8, v35), v37 = -1 << *((_BYTE *)v33 + 32), v38 = v36 & ~v37, ((*(_QWORD *)((char *)v55 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) != 0))
    {
      v39 = ~v37;
      while (1)
      {
        v30(v12, v56[6] + v38 * v29, v8);
        v40 = sub_100012534(&qword_100157E98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v41 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v57, v8, v40);
        v23 = (void (*)(char *, uint64_t))v32[1];
        v23(v12, v8);
        if ((v41 & 1) != 0)
          break;
        v38 = (v38 + 1) & v39;
        if (((*(_QWORD *)((char *)v55 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
        {
          v23(v57, v8);
          goto LABEL_30;
        }
      }
      a4 = v47;
      a3 = v48;
      v9 = v32;
      v17 = v46;
LABEL_6:
      v18 = v53;
      v23(v57, v8);
      result = ((uint64_t (*)(char *, uint64_t))v23)(v17, v8);
      v22 = v54;
    }
    else
    {
      v23 = (void (*)(char *, uint64_t))v32[1];
      v23(v57, v8);
LABEL_30:
      v42 = v46;
      result = ((uint64_t (*)(char *, uint64_t))v23)(v46, v8);
      v18 = v53;
      *(unint64_t *)((char *)v45 + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v52;
      a3 = v48;
      v43 = __OFADD__(v49++, 1);
      a4 = v47;
      v9 = v32;
      v17 = v42;
      v22 = v54;
      if (v43)
        goto LABEL_37;
    }
  }
  v28 = v18 + 4;
  if (v18 + 4 >= v51)
  {
LABEL_35:
    swift_retain(a3);
    return sub_1000459A4(v45, v44, v49, a3);
  }
  v26 = *(_QWORD *)(v50 + 8 * v28);
  if (v26)
  {
    v27 = v18 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v51)
      goto LABEL_35;
    v26 = *(_QWORD *)(v50 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_22;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_10004ACD0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  swift_retain_n(a2, 2);
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_retain(a2);
    swift_bridgeObjectRetain(a3);
    v12 = sub_10004A8D4((unint64_t *)((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    swift_release(a1);
    swift_release(a2);
    v13 = swift_bridgeObjectRelease(a3);
    if (v3)
      swift_willThrow(v13);
    swift_bridgeObjectRelease(a3);
    swift_release(a2);
  }
  else
  {
    v14 = (void *)swift_slowAlloc(v10, -1);
    bzero(v14, v10);
    swift_retain(a2);
    swift_bridgeObjectRetain(a3);
    v12 = sub_10004A8D4((unint64_t *)v14, v9, a1, a2, a3);
    swift_release(a1);
    swift_release(a2);
    swift_bridgeObjectRelease(a3);
    swift_slowDealloc(v14, -1, -1);
    swift_bridgeObjectRelease(a3);
    swift_release(a2);
  }
  swift_bridgeObjectRelease(a3);
  swift_release(a2);
  return v12;
}

unint64_t sub_10004AEFC()
{
  unint64_t result;

  result = qword_100158FF8;
  if (!qword_100158FF8)
  {
    result = swift_getWitnessTable(&unk_100110520, &type metadata for DriverBinInfo);
    atomic_store(result, (unint64_t *)&qword_100158FF8);
  }
  return result;
}

uint64_t sub_10004AF40(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10004AF4C()
{
  return type metadata accessor for DriverBinManager(0);
}

uint64_t type metadata accessor for DriverBinManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10015F730;
  if (!qword_10015F730)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DriverBinManager);
  return result;
}

void sub_10004AF90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v6[0] = "(";
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[3] = &unk_1001108D0;
    v6[4] = &unk_1001108D0;
    v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    sub_10004B058(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = &unk_1001108E8;
      swift_updateClassMetadata2(a1, 256, 10, v6, a1 + 80);
    }
  }
}

void sub_10004B058(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001589D0)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001589D0);
  }
}

uint64_t sub_10004B0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100041CCC(a1, a2, *(_QWORD *)(v2 + 16)) & 1;
}

uint64_t sub_10004B0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  Swift::String v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  Swift::String v75;
  __int128 v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  void (*v89)(char *, uint64_t);
  unint64_t v90;
  char v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  Swift::String v104;
  __int128 v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  void (*v110)(char *, uint64_t);
  void (*v111)(char *, uint64_t);
  char *v112;
  void (*v113)(uint64_t, char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void (*v117)(char *, uint64_t, uint64_t);
  void (*v118)(char *, char *, uint64_t);
  unint64_t v119;
  uint64_t v120;
  unsigned int (*v121)(char *, uint64_t, uint64_t);
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  __int128 v137;
  __int128 v138;
  int v139;

  v129 = a3;
  v139 = a7;
  v131 = a1;
  v132 = a2;
  v8 = sub_100005C88(&qword_100158918);
  v9 = __chkstk_darwin(v8);
  v126 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v128 = (uint64_t)&v114 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v114 - v13;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v125 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v127 = (char *)&v114 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v114 - v21;
  v23 = sub_100005C88(&qword_1001591D8);
  v24 = __chkstk_darwin(v23);
  v130 = (uint64_t)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v114 - v27;
  v29 = (char *)&v114 + *(int *)(v26 + 48) - v27;
  v30 = (char *)&v114 + *(int *)(v26 + 64) - v27;
  v134 = v16;
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v31((char *)&v114 - v27, 1, 1, v15);
  v133 = v29;
  v31(v29, 1, 1, v15);
  v31(v30, 1, 1, v15);
  v32 = (uint64_t *)sub_10008F9E8();
  v33 = v32;
  if (!*(_QWORD *)(a4 + 16))
  {
    v137 = 0u;
    v138 = 0u;
LABEL_10:
    sub_1000124F8((uint64_t)&v137, &qword_100158018);
    goto LABEL_11;
  }
  v124 = v22;
  v34 = *v32;
  v35 = v32[1];
  swift_bridgeObjectRetain(v35);
  v36 = sub_100005DE8(v34, v35);
  if ((v37 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(a4 + 56) + 32 * v36, (uint64_t)&v137);
  }
  else
  {
    v137 = 0u;
    v138 = 0u;
  }
  swift_bridgeObjectRelease(v35);
  if (!*((_QWORD *)&v138 + 1))
    goto LABEL_10;
  if ((swift_dynamicCast(&v135, &v137, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
  {
    v122 = v30;
    v123 = v28;
    v38 = v135;
    v39 = v136;
    sub_1000122B4(v135, v136);
    sub_1000D2668(v38, v39);
    v40 = v134;
    v121 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48);
    if (v121(v14, 1, v15) == 1)
    {
      sub_100011F40(v38, v39);
      sub_1000124F8((uint64_t)v14, &qword_100158918);
      v28 = v123;
      goto LABEL_11;
    }
    v120 = v38;
    v119 = v39;
    v52 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    v53 = v124;
    v52(v124, v14, v15);
    v28 = v123;
    sub_1000124F8((uint64_t)v123, &qword_100158918);
    v118 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    v118(v28, v53, v15);
    v31(v28, 0, 1, v15);
    v54 = v139;
    if (sub_100026294(v139, 1) || sub_100026294(v54, 2))
    {
      v117 = (void (*)(char *, uint64_t, uint64_t))v52;
      v55 = (uint64_t *)sub_10008F9D0();
      v56 = v55;
      v57 = v120;
      if (*(_QWORD *)(a4 + 16))
      {
        v58 = *v55;
        v59 = v55[1];
        swift_bridgeObjectRetain(v59);
        v60 = sub_100005DE8(v58, v59);
        if ((v61 & 1) != 0)
        {
          sub_100005D28(*(_QWORD *)(a4 + 56) + 32 * v60, (uint64_t)&v137);
        }
        else
        {
          v137 = 0u;
          v138 = 0u;
        }
        swift_bridgeObjectRelease(v59);
        if (*((_QWORD *)&v138 + 1))
        {
          if ((swift_dynamicCast(&v135, &v137, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
          {
LABEL_28:
            v70 = sub_1000D4214(v139);
            v72 = v71;
            *(_QWORD *)&v137 = 0;
            *((_QWORD *)&v137 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(22);
            swift_bridgeObjectRelease(*((_QWORD *)&v137 + 1));
            *(_QWORD *)&v137 = 0xD000000000000014;
            *((_QWORD *)&v137 + 1) = 0x8000000100122DF0;
            v73 = *v56;
            v74 = (void *)v56[1];
            swift_bridgeObjectRetain(v74);
            v75._countAndFlagsBits = v73;
            v75._object = v74;
            String.append(_:)(v75);
            swift_bridgeObjectRelease(v74);
            v76 = v137;
            v77 = sub_1000122F8();
            v78 = swift_allocError(&type metadata for KMError, v77, 0, 0);
            *(_QWORD *)v79 = v70;
            *(_QWORD *)(v79 + 8) = v72;
            *(_OWORD *)(v79 + 16) = v76;
            *(_OWORD *)(v79 + 32) = 0u;
            *(_OWORD *)(v79 + 48) = 0u;
            *(_QWORD *)(v79 + 64) = 0;
            *(_BYTE *)(v79 + 72) = 6;
            swift_willThrow(v78);
            sub_100011F40(v57, v119);
            (*(void (**)(char *, uint64_t))(v134 + 8))(v124, v15);
            return sub_1000124F8((uint64_t)v28, &qword_1001591D8);
          }
          v68 = v135;
          v67 = v136;
          sub_1000122B4(v135, v136);
          v69 = v128;
          sub_1000D2668(v68, v67);
          if (v121((char *)v69, 1, v15) == 1)
          {
            sub_100011F40(v68, v67);
            sub_1000124F8(v69, &qword_100158918);
            v57 = v120;
            goto LABEL_28;
          }
          v115 = v68;
          v116 = v67;
          v80 = v127;
          v117(v127, v69, v15);
          v81 = (uint64_t)v133;
          sub_1000124F8((uint64_t)v133, &qword_100158918);
          v118((char *)v81, v80, v15);
          v31((char *)v81, 0, 1, v15);
          if (sub_100026294(v139, 2))
          {
            v82 = (uint64_t *)sub_10008F9DC();
            v63 = (uint64_t)v122;
            v83 = v120;
            if (*(_QWORD *)(a4 + 16))
            {
              v84 = v82;
              v85 = *v82;
              v86 = v82[1];
              swift_bridgeObjectRetain(v86);
              v87 = sub_100005DE8(v85, v86);
              if ((v88 & 1) != 0)
              {
                sub_100005D28(*(_QWORD *)(a4 + 56) + 32 * v87, (uint64_t)&v137);
              }
              else
              {
                v137 = 0u;
                v138 = 0u;
              }
              v90 = v119;
              swift_bridgeObjectRelease(v86);
              if (*((_QWORD *)&v138 + 1))
              {
                v91 = swift_dynamicCast(&v135, &v137, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
                v92 = v124;
                if ((v91 & 1) != 0)
                {
                  v94 = v135;
                  v93 = v136;
                  sub_1000122B4(v135, v136);
                  v128 = v94;
                  v95 = v94;
                  v96 = v93;
                  v97 = (uint64_t)v126;
                  sub_1000D2668(v95, v96);
                  if (v121((char *)v97, 1, v15) == 1)
                  {
                    sub_1000124F8(v97, &qword_100158918);
                    v98 = v92;
                    v99 = sub_1000D4214(v139);
                    v101 = v100;
                    *(_QWORD *)&v137 = 0;
                    *((_QWORD *)&v137 + 1) = 0xE000000000000000;
                    _StringGuts.grow(_:)(22);
                    swift_bridgeObjectRelease(*((_QWORD *)&v137 + 1));
                    *(_QWORD *)&v137 = 0xD000000000000014;
                    *((_QWORD *)&v137 + 1) = 0x8000000100122DF0;
                    v102 = *v84;
                    v103 = (void *)v84[1];
                    swift_bridgeObjectRetain(v103);
                    v104._countAndFlagsBits = v102;
                    v104._object = v103;
                    String.append(_:)(v104);
                    swift_bridgeObjectRelease(v103);
                    v105 = v137;
                    v106 = sub_1000122F8();
                    v107 = swift_allocError(&type metadata for KMError, v106, 0, 0);
                    *(_QWORD *)v108 = v99;
                    *(_QWORD *)(v108 + 8) = v101;
                    *(_OWORD *)(v108 + 16) = v105;
                    *(_OWORD *)(v108 + 32) = 0u;
                    *(_OWORD *)(v108 + 48) = 0u;
                    *(_QWORD *)(v108 + 64) = 0;
                    *(_BYTE *)(v108 + 72) = 6;
                    swift_willThrow(v107);
                    sub_100011F40(v128, v96);
                    sub_100011F40(v115, v116);
                    sub_100011F40(v120, v119);
                    v109 = *(void (**)(char *, uint64_t))(v134 + 8);
                    v109(v127, v15);
                    v109(v98, v15);
                    return sub_1000124F8((uint64_t)v28, &qword_1001591D8);
                  }
                  sub_100011F40(v128, v96);
                  sub_100011F40(v115, v116);
                  sub_100011F40(v120, v90);
                  v111 = *(void (**)(char *, uint64_t))(v134 + 8);
                  v111(v127, v15);
                  v111(v92, v15);
                  v112 = v125;
                  v113 = (void (*)(uint64_t, char *, uint64_t))v117;
                  v117(v125, v97, v15);
                  v63 = (uint64_t)v122;
                  sub_1000124F8((uint64_t)v122, &qword_100158918);
                  v113(v63, v112, v15);
                  v31((char *)v63, 0, 1, v15);
                  goto LABEL_43;
                }
                sub_100011F40(v115, v116);
                sub_100011F40(v83, v90);
LABEL_42:
                v110 = *(void (**)(char *, uint64_t))(v134 + 8);
                v110(v127, v15);
                v110(v92, v15);
LABEL_43:
                v62 = v129;
                goto LABEL_21;
              }
            }
            else
            {
              v137 = 0u;
              v138 = 0u;
              v90 = v119;
            }
            sub_100011F40(v115, v116);
            sub_100011F40(v83, v90);
            sub_1000124F8((uint64_t)&v137, &qword_100158018);
            v92 = v124;
            goto LABEL_42;
          }
          sub_100011F40(v115, v116);
          sub_100011F40(v120, v119);
          v89 = *(void (**)(char *, uint64_t))(v134 + 8);
          v89(v80, v15);
          v89(v124, v15);
LABEL_20:
          v62 = v129;
          v63 = (uint64_t)v122;
LABEL_21:
          v64 = v130;
          v65 = v130 + *(int *)(v23 + 48);
          v66 = v130 + *(int *)(v23 + 64);
          sub_10004DB34((uint64_t)v28, v130);
          sub_10004DB34((uint64_t)v133, v65);
          sub_10004DB34(v63, v66);
          sub_10004DB7C(v64, v131);
          sub_10004DB7C(v65, v132);
          sub_10004DB7C(v66, v62);
          return sub_1000124F8((uint64_t)v28, &qword_1001591D8);
        }
      }
      else
      {
        v137 = 0u;
        v138 = 0u;
      }
      sub_1000124F8((uint64_t)&v137, &qword_100158018);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v53, v15);
    sub_100011F40(v120, v119);
    goto LABEL_20;
  }
LABEL_11:
  v41 = sub_1000D4214(v139);
  v43 = v42;
  *(_QWORD *)&v137 = 0;
  *((_QWORD *)&v137 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(*((_QWORD *)&v137 + 1));
  *(_QWORD *)&v137 = 0xD00000000000001CLL;
  *((_QWORD *)&v137 + 1) = 0x80000001001235A0;
  v44 = *v33;
  v45 = (void *)v33[1];
  swift_bridgeObjectRetain(v45);
  v46._countAndFlagsBits = v44;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v45);
  v47 = v137;
  v48 = sub_1000122F8();
  v49 = swift_allocError(&type metadata for KMError, v48, 0, 0);
  *(_QWORD *)v50 = v41;
  *(_QWORD *)(v50 + 8) = v43;
  *(_OWORD *)(v50 + 16) = v47;
  *(_OWORD *)(v50 + 32) = 0u;
  *(_OWORD *)(v50 + 48) = 0u;
  *(_QWORD *)(v50 + 64) = 0;
  *(_BYTE *)(v50 + 72) = 6;
  swift_willThrow(v49);
  return sub_1000124F8((uint64_t)v28, &qword_1001591D8);
}

uint64_t sub_10004BBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 128))();
  if (!v4)
  {
    v11 = result;
    sub_10004B0D8(a1, a2, a3, result, v9, v10, *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
    return swift_bridgeObjectRelease(v11);
  }
  return result;
}

_OWORD *sub_10004BC34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  void *object;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[2];
  uint64_t v74;

  v1 = type metadata accessor for OSSignpostID(0);
  v68 = *(_QWORD *)(v1 - 8);
  v69 = v1;
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v67) = static os_signpost_type_t.begin.getter(v2);
  v5 = (id)*sub_1000D302C();
  v6 = sub_1000901DC();
  v7 = *v6;
  v8 = v6[1];
  v9 = *((unsigned __int8 *)v6 + 16);
  v10 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10010F050;
  v12 = sub_1000D4214(*(_BYTE *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
  v14 = v13;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v15 = sub_100026838();
  *(_QWORD *)(v11 + 64) = v15;
  *(_QWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 40) = v14;
  static OSSignpostID.exclusive.getter(v15);
  os_signpost(_:dso:log:name:signpostID:_:_:)(HIDWORD(v67), &_mh_execute_header, v5, v7, v8, v9, v4, "kind: %{public}s", 16, 2, v11);

  swift_bridgeObjectRelease(v11);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v4, v69);
  v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8));
  v17 = sub_1000D4090(v16);
  v68 = v0;
  v69 = v17;
  v19 = v18;
  v21 = v20;
  v22 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  v23 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 32);
  v24 = sub_100004DE4((_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data), v22);
  v25 = sub_10008FB24();
  v26 = *v25;
  v27 = v25[1];
  v28 = v25[2];
  v29 = v25[3];
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v29);
  v30 = v26;
  v31 = v70;
  v32 = v24;
  v33 = sub_1000E1020(v30, v27, v28, v29, v69, v19, v21, v22, v23);
  if (v31)
  {
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v19);
LABEL_18:
    v51 = v68;
    goto LABEL_19;
  }
  v35 = v33;
  v36 = v34;
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v19);
  if (v36 >> 60 == 15)
  {
    *(_QWORD *)&v73[0] = 0;
    *((_QWORD *)&v73[0] + 1) = 0xE000000000000000;
    v32 = v73;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease(*((_QWORD *)&v73[0] + 1));
    v37 = sub_1000122F8();
    v38 = swift_allocError(&type metadata for KMError, v37, 0, 0);
    *(_QWORD *)v39 = 0xD000000000000020;
    *(_QWORD *)(v39 + 8) = 0x80000001001235E0;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_OWORD *)(v39 + 32) = 0u;
    *(_OWORD *)(v39 + 48) = 0u;
    *(_QWORD *)(v39 + 64) = 0;
    *(_BYTE *)(v39 + 72) = 24;
    swift_willThrow(v38);
    goto LABEL_18;
  }
  v40 = sub_100005C88((uint64_t *)&unk_10015BA80);
  sub_1000D3644(v35, v36, v40, v40);
  v32 = *(_OWORD **)&v73[0];
  if (!*(_QWORD *)&v73[0])
  {
    v47 = sub_1000122F8();
    v48 = swift_allocError(&type metadata for KMError, v47, 0, 0);
    *(_OWORD *)v49 = 0u;
    *(_OWORD *)(v49 + 16) = 0u;
    *(_OWORD *)(v49 + 32) = 0u;
    *(_OWORD *)(v49 + 48) = 0u;
    *(_QWORD *)(v49 + 64) = 0;
    *(_BYTE *)(v49 + 72) = 73;
    swift_willThrow(v48);
    sub_100021610(v35, v36);
    goto LABEL_18;
  }
  v41 = (uint64_t *)sub_10008F9F4();
  if (!*((_QWORD *)v32 + 2))
  {
    v71 = 0u;
    v72 = 0u;
LABEL_16:
    sub_100021610(v35, v36);
    sub_1000124F8((uint64_t)&v71, &qword_100158018);
    v51 = v68;
    goto LABEL_19;
  }
  v42 = v41;
  v43 = *v41;
  v44 = v41[1];
  swift_bridgeObjectRetain(v44);
  v45 = sub_100005DE8(v43, v44);
  if ((v46 & 1) != 0)
  {
    sub_100005D28(*((_QWORD *)v32 + 7) + 32 * v45, (uint64_t)&v71);
  }
  else
  {
    v71 = 0u;
    v72 = 0u;
  }
  swift_bridgeObjectRelease(v44);
  if (!*((_QWORD *)&v72 + 1))
    goto LABEL_16;
  sub_100017464(&v71, v73);
  sub_100005D28((uint64_t)v73, (uint64_t)&v71);
  if (!swift_dynamicCast(&v74, &v71, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
  {
    swift_bridgeObjectRelease(v32);
    *(_QWORD *)&v71 = 0;
    *((_QWORD *)&v71 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(*((_QWORD *)&v71 + 1));
    *(_QWORD *)&v71 = 0xD000000000000017;
    *((_QWORD *)&v71 + 1) = 0x8000000100123610;
    v59 = *v42;
    v58 = (void *)v42[1];
    swift_bridgeObjectRetain(v58);
    v60._countAndFlagsBits = v59;
    v60._object = v58;
    String.append(_:)(v60);
    swift_bridgeObjectRelease(v58);
    v61._object = (void *)0x8000000100123630;
    v61._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v61);
    v32 = (_OWORD *)*((_QWORD *)&v71 + 1);
    v62 = v71;
    v63 = sub_1000122F8();
    v64 = swift_allocError(&type metadata for KMError, v63, 0, 0);
    *(_QWORD *)v65 = v62;
    *(_QWORD *)(v65 + 8) = v32;
    *(_OWORD *)(v65 + 16) = 0u;
    *(_OWORD *)(v65 + 32) = 0u;
    *(_OWORD *)(v65 + 48) = 0u;
    *(_QWORD *)(v65 + 64) = 0;
    *(_BYTE *)(v65 + 72) = 24;
    swift_willThrow(v64);
    sub_100021610(v35, v36);
    sub_100005D08(v73);
    goto LABEL_18;
  }
  v50 = v74;
  v51 = v68;
  if (*(_QWORD *)(v68 + 16) >= v74)
  {
    sub_100005D08(v73);
    sub_100021610(v35, v36);
  }
  else
  {
    swift_bridgeObjectRelease(v32);
    *(_QWORD *)&v71 = 0;
    *((_QWORD *)&v71 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease(*((_QWORD *)&v71 + 1));
    *(_QWORD *)&v71 = 0xD000000000000013;
    *((_QWORD *)&v71 + 1) = 0x8000000100123650;
    v74 = v50;
    v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v52._object;
    String.append(_:)(v52);
    swift_bridgeObjectRelease(object);
    v32 = (_OWORD *)*((_QWORD *)&v71 + 1);
    v54 = v71;
    v55 = sub_1000122F8();
    v56 = swift_allocError(&type metadata for KMError, v55, 0, 0);
    *(_QWORD *)v57 = v54;
    *(_QWORD *)(v57 + 8) = v32;
    *(_OWORD *)(v57 + 16) = 0u;
    *(_OWORD *)(v57 + 32) = 0u;
    *(_OWORD *)(v57 + 48) = 0u;
    *(_QWORD *)(v57 + 64) = 0;
    *(_BYTE *)(v57 + 72) = 25;
    swift_willThrow(v56);
    sub_100021610(v35, v36);
    sub_100005D08(v73);
  }
LABEL_19:
  sub_10004C240(v51);
  return v32;
}

uint64_t sub_10004C240(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  char **v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v19;
  uint64_t v20;
  unsigned int v21;

  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = static os_signpost_type_t.end.getter(v4);
  v7 = (id)*sub_1000D302C();
  v8 = sub_1000901DC();
  v9 = *v8;
  v10 = v8[1];
  v11 = *((unsigned __int8 *)v8 + 16);
  v12 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10010F050;
  v14 = sub_1000D4214(*(_BYTE *)(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
  v16 = v15;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  v17 = sub_100026838();
  *(_QWORD *)(v13 + 64) = v17;
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  static OSSignpostID.exclusive.getter(v17);
  v19 = 2;
  os_signpost(_:dso:log:name:signpostID:_:_:)(v21, &_mh_execute_header, v7, v9, v10, v11, v6, "kind: %{public}s", 16, v19, v13);

  swift_bridgeObjectRelease(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_10004C3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = v5;
  v33 = a4;
  v10 = sub_100005C88(&qword_100158918);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)(v4 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  v14 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  v15 = v13[4];
  sub_100004DE4(v13, v14);
  v16 = (uint64_t *)sub_100090044();
  v17 = *v16;
  v18 = v16[1];
  swift_bridgeObjectRetain(v18);
  sub_1000E1050(v17, v18, a1, a2, a3, v14, v15, (uint64_t)&v26);
  result = swift_bridgeObjectRelease(v18);
  if (!v6)
  {
    v20 = v33;
    if (v27)
    {
      sub_100004E2C(&v26, (uint64_t)v29);
      v32 = v28;
      v21 = v30;
      v22 = v31;
      sub_100004DE4(v29, v30);
      sub_1000E2470(a1, a2, a3, v21, v22, (uint64_t)v12);
      v23 = type metadata accessor for UUID(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v12, 1, v23) == 1)
      {
        sub_1000124F8((uint64_t)v12, &qword_100158918);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v20, 1, 1, v23);
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v20, v12, v23);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v20, 0, 1, v23);
      }
      return sub_1000124F8((uint64_t)v29, &qword_1001591E8);
    }
    else
    {
      sub_1000124F8((uint64_t)&v26, &qword_1001591E0);
      v25 = type metadata accessor for UUID(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v20, 1, 1, v25);
    }
  }
  return result;
}

uint64_t sub_10004C5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = v4;
  v9 = (_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  v11 = v9[4];
  v12 = sub_100004DE4(v9, v10);
  v13 = (uint64_t *)sub_100090044();
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  v16 = v10;
  v17 = (uint64_t)v12;
  sub_1000E1050(v14, v15, a1, a2, a3, v16, v11, (uint64_t)&v25);
  swift_bridgeObjectRelease(v15);
  if (!v5)
  {
    if (v26)
    {
      sub_100004E2C(&v25, (uint64_t)v28);
      v31 = v27;
      v19 = v29;
      v20 = v30;
      sub_100004DE4(v28, v29);
      v21 = sub_1000E26B4(a1, a2, a3, v19, v20);
      if ((v22 & 1) == 0)
      {
        v17 = sub_1000E081C(v21);
        sub_1000124F8((uint64_t)v28, &qword_1001591E8);
        return v17;
      }
      v23 = &qword_1001591E8;
      v24 = (__int128 *)v28;
    }
    else
    {
      v23 = &qword_1001591E0;
      v24 = &v25;
    }
    sub_1000124F8((uint64_t)v24, v23);
    return 0;
  }
  return v17;
}

uint64_t sub_10004C734(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _UNKNOWN **v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;

  v4 = v3;
  v6 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
  swift_bridgeObjectRetain(*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8));
  v7 = sub_1000D4090(v6);
  v9 = v8;
  v11 = v10;
  if ((unint64_t)a2 >> 62)
    goto LABEL_41;
  v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v48 = v7;
  v49 = v4;
  v47 = (unint64_t)v11;
  if (v12)
  {
    v46 = v2;
    sub_10000C958(0, v12 & ~(v12 >> 63), 0);
    if (v12 < 0)
    {
      __break(1u);
      JUMPOUT(0x10004D2E8);
    }
    v50 = v12;
    v45 = v9;
    v13 = 0;
    v14 = a2 & 0xC000000000000001;
    v15 = a2;
    do
    {
      if (v14)
      {
        v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a2);
      }
      else
      {
        v16 = *(_QWORD *)(a2 + 8 * v13 + 32);
        swift_retain(v16);
      }
      v17 = (*(uint64_t (**)(void))(*(_QWORD *)v16 + 144))();
      v19 = v18;
      swift_release(v16);
      v21 = _swiftEmptyArrayStorage[2];
      v20 = _swiftEmptyArrayStorage[3];
      if (v21 >= v20 >> 1)
        sub_10000C958(v20 > 1, v21 + 1, 1);
      ++v13;
      _swiftEmptyArrayStorage[2] = v21 + 1;
      v22 = &_swiftEmptyArrayStorage[2 * v21];
      v22[4] = v17;
      v22[5] = v19;
      a2 = v15;
    }
    while (v50 != v13);
    v9 = v45;
    v2 = v46;
  }
  v23 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  v24 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 24);
  v25 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data + 32);
  v4 = sub_100004DE4(v23, v24);
  v11 = &off_100147590;
  v26 = sub_10004F728((uint64_t)&off_100147590);
  swift_arrayDestroy(&unk_1001475B0, 1, &type metadata for MachOSymbol.Kind);
  v27 = v25;
  v2 = v4;
  sub_1000E2F34((uint64_t)_swiftEmptyArrayStorage, v48, v9, v47, v26, v24, v27);
  if (!v49)
  {
    v7 = v28;
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v9);
    v52 = sub_10004D308((uint64_t)_swiftEmptyArrayStorage);
    v29 = sub_10004D308((uint64_t)_swiftEmptyArrayStorage);
    v30 = 0;
    v51 = v29;
    v43 = v7 + 64;
    v31 = 1 << *(_BYTE *)(v7 + 32);
    v32 = -1;
    if (v31 < 64)
      v32 = ~(-1 << v31);
    v33 = v32 & *(_QWORD *)(v7 + 64);
    v44 = (unint64_t)(v31 + 63) >> 6;
    while (1)
    {
      if (v33)
      {
        v34 = __clz(__rbit64(v33));
        v33 &= v33 - 1;
        v35 = v34 | (v30 << 6);
      }
      else
      {
        if (__OFADD__(v30++, 1))
        {
          __break(1u);
          goto LABEL_40;
        }
        if (v30 >= v44)
          goto LABEL_37;
        v37 = *(_QWORD *)(v43 + 8 * v30);
        if (!v37)
        {
          v38 = v30 + 1;
          if (v30 + 1 >= v44)
            goto LABEL_37;
          v37 = *(_QWORD *)(v43 + 8 * v38);
          if (!v37)
          {
            v38 = v30 + 2;
            if (v30 + 2 >= v44)
              goto LABEL_37;
            v37 = *(_QWORD *)(v43 + 8 * v38);
            if (!v37)
            {
              v38 = v30 + 3;
              if (v30 + 3 >= v44)
              {
LABEL_37:
                swift_release(v7);
                v24 = sub_10004DD28(a1, (uint64_t *)&v52, (uint64_t *)&v51);
                swift_bridgeObjectRelease(v51);
                swift_bridgeObjectRelease(v52);
                return v24;
              }
              v37 = *(_QWORD *)(v43 + 8 * v38);
              if (!v37)
              {
                while (1)
                {
                  v30 = v38 + 1;
                  if (__OFADD__(v38, 1))
                    break;
                  if (v30 >= v44)
                    goto LABEL_37;
                  v37 = *(_QWORD *)(v43 + 8 * v30);
                  ++v38;
                  if (v37)
                    goto LABEL_30;
                }
LABEL_40:
                __break(1u);
LABEL_41:
                if (a2 < 0)
                  v41 = a2;
                else
                  v41 = a2 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(a2);
                v12 = _CocoaArrayWrapper.endIndex.getter(v41);
                swift_bridgeObjectRelease(a2);
                goto LABEL_3;
              }
            }
          }
          v30 = v38;
        }
LABEL_30:
        v33 = (v37 - 1) & v37;
        v35 = __clz(__rbit64(v37)) + (v30 << 6);
      }
      v39 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v35);
      v9 = *(_QWORD *)(v39 + 16);
      if (v9)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v35 + 8));
        swift_bridgeObjectRetain(v39);
        __asm { BR              X9 }
      }
    }
  }
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v9);
  return v24;
}

unint64_t sub_10004D308(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_100159310);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100005DE8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void (*sub_10004D420(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_10004EB04(v6, a2, a3);
  return sub_100029040;
}

void (*sub_10004D48C(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4))(_QWORD *a1)
{
  _QWORD *v8;

  v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[4] = a3;
  v8[5] = a4;
  swift_bridgeObjectRetain(a3);
  sub_10004F8A8(a4);
  v8[6] = sub_10004EB94(v8, a2, a3, a4);
  return sub_10004D508;
}

void sub_10004D508(_QWORD *a1)
{
  void *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_bridgeObjectRelease(v3);
  sub_10004F8CC(v2);
  free(v1);
}

_QWORD *sub_10004D554(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = result[2];
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = sub_10000C500(result, v11, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (_QWORD *)swift_arrayInitWithCopy(&v3[2 * v7 + 4]);
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v8 = v3[2];
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    v3[2] = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10004D63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, __int128 *a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v13 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)(v13 + 16) = a1;
  v14 = v13 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
  v15 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a2, v15);
  v16 = (_QWORD *)(v13 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
  *v16 = a3;
  v16[1] = a4;
  *(_BYTE *)(v13 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind) = a5;
  sub_100004E2C(a6, v13 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data);
  return v13;
}

uint64_t sub_10004D6FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8));
  sub_100005D08((_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd16KernelCollection_data));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004D770()
{
  unint64_t v0;
  Swift::String v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  uint64_t v6;

  v0 = sub_10004F8F0();
  v6 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for CollectionKind, v0);
  v1._countAndFlagsBits = 544497952;
  v1._object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  v3._countAndFlagsBits = URL.path.getter(v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  return v6;
}

uint64_t sub_10004D7FC()
{
  unint64_t v0;
  Swift::String v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  uint64_t v6;

  v0 = sub_10004F8F0();
  v6 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for CollectionKind, v0);
  v1._countAndFlagsBits = 544497952;
  v1._object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  v3._countAndFlagsBits = URL.path.getter(v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  return v6;
}

BOOL sub_10004D888(uint64_t a1, uint64_t a2)
{
  return (static URL.== infix(_:_:)(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path, a2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path) & 1) != 0&& sub_100026294(*(_BYTE *)(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind), *(_BYTE *)(a2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
}

Swift::Int sub_10004D8E0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  v0 = type metadata accessor for URL(0);
  v1 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v4, v0, v1);
  v2 = sub_10004F934();
  dispatch thunk of Hashable.hash(into:)(v4, &type metadata for CollectionKind, v2);
  return Hasher._finalize()();
}

uint64_t sub_10004D990(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = type metadata accessor for URL(0);
  v3 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  v4 = sub_10004F934();
  return dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CollectionKind, v4);
}

Swift::Int sub_10004DA30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  v1 = type metadata accessor for URL(0);
  v2 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v5, v1, v2);
  v3 = sub_10004F934();
  dispatch thunk of Hashable.hash(into:)(v5, &type metadata for CollectionKind, v3);
  return Hasher._finalize()();
}

BOOL sub_10004DADC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  return (static URL.== infix(_:_:)(*a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path, *a2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path) & 1) != 0&& sub_100026294(*(_BYTE *)(v2 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind), *(_BYTE *)(v3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
}

uint64_t sub_10004DB34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100158918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004DB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100158918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004DBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v3 + 40);
  v8 = sub_10004FA90();
  v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, &type metadata for MachOSymbol, v8);
  return sub_10004DC48(a1, a2, a3, v9);
}

unint64_t sub_10004DC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[0] = a1;
  v15[1] = a2;
  v15[2] = a3;
  v5 = -1 << *(_BYTE *)(v4 + 32);
  v6 = a4 & ~v5;
  if (((*(_QWORD *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v7 = ~v5;
    v8 = sub_10004FAE4();
    do
    {
      v9 = *(_QWORD *)(v4 + 48) + 24 * v6;
      v10 = *(_OWORD *)v9;
      v11 = *(_QWORD *)(v9 + 16);
      v13 = v10;
      v14 = v11;
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v13, v15, &type metadata for MachOSymbol, v8) & 1) != 0)
        break;
      v6 = (v6 + 1) & v7;
    }
    while (((*(_QWORD *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

uint64_t sub_10004DD28(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  void (*v50)(_QWORD *);
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t result;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  int64_t v78;
  _QWORD v79[5];
  _QWORD *v80;

  sub_100005C88(&qword_1001592F0);
  v5 = static _DictionaryStorage.copy(original:)(a1);
  v6 = (_QWORD *)v5;
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 64);
  v61 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & v8;
  v62 = (unint64_t)(v9 + 63) >> 6;
  v63 = v5 + 64;
  v59 = (_QWORD *)v5;
  v60 = a1;
  if ((v10 & v8) == 0)
    goto LABEL_6;
LABEL_5:
  v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v12 | (v7 << 6); ; i = __clz(__rbit64(v15)) + (v7 << 6))
  {
    v17 = 8 * i;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v80 = &_swiftEmptyDictionarySingleton;
    v74 = *(_QWORD *)(v19 + 16);
    if (v74)
      break;
    swift_retain(v18);
    v53 = &_swiftEmptyDictionarySingleton;
LABEL_63:
    *(_QWORD *)(v63 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v6[6] + v17) = v18;
    *(_QWORD *)(v6[7] + v17) = v53;
    v54 = v6[2];
    v55 = __OFADD__(v54, 1);
    v56 = v54 + 1;
    if (v55)
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    v6[2] = v56;
    if (v11)
      goto LABEL_5;
LABEL_6:
    v14 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_70;
    if (v14 >= v62)
      return (uint64_t)v6;
    v15 = *(_QWORD *)(v61 + 8 * v14);
    ++v7;
    if (!v15)
    {
      v7 = v14 + 1;
      if (v14 + 1 >= v62)
        return (uint64_t)v6;
      v15 = *(_QWORD *)(v61 + 8 * v7);
      if (!v15)
      {
        v7 = v14 + 2;
        if (v14 + 2 >= v62)
          return (uint64_t)v6;
        v15 = *(_QWORD *)(v61 + 8 * v7);
        if (!v15)
        {
          v16 = v14 + 3;
          if (v16 >= v62)
            return (uint64_t)v6;
          v15 = *(_QWORD *)(v61 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              v7 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_71;
              if (v7 >= v62)
                return (uint64_t)v6;
              v15 = *(_QWORD *)(v61 + 8 * v7);
              ++v16;
              if (v15)
                goto LABEL_19;
            }
          }
          v7 = v16;
        }
      }
    }
LABEL_19:
    v11 = (v15 - 1) & v15;
  }
  v66 = 8 * i;
  v67 = i;
  v68 = v11;
  v69 = v7;
  v73 = v19 + 32;
  v64 = v19;
  swift_bridgeObjectRetain_n(v19, 2);
  v65 = v18;
  swift_retain(v18);
  v20 = 0;
  while (2)
  {
    v21 = (uint64_t *)(v73 + 24 * v20);
    v3 = v21[1];
    v11 = v21[2];
    v22 = *v21;
    swift_bridgeObjectRetain(v3);
    sub_10004F8A8(v11);
    v23 = *a2;
    if (*(_QWORD *)(*a2 + 16))
    {
      swift_bridgeObjectRetain(v3);
      v24 = sub_100005DE8(v22, v3);
      if ((v25 & 1) != 0)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRelease(v3);
        swift_bridgeObjectRetain(v3);
        sub_10004F8A8(v11);
        v27 = v80;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v80);
        v79[0] = v27;
        sub_10004F5A4(v26, v22, v3, v11, isUniquelyReferenced_nonNull_native);
        v80 = (_QWORD *)v79[0];
        swift_bridgeObjectRelease(0x8000000000000000);
        swift_bridgeObjectRelease(v3);
        sub_10004F8CC(v11);
        goto LABEL_59;
      }
      swift_bridgeObjectRelease(v3);
    }
    v77 = v11;
    v75 = v20;
    v29 = *a3;
    v30 = *a3 + 64;
    v31 = 1 << *(_BYTE *)(*a3 + 32);
    if (v31 < 64)
      v32 = ~(-1 << v31);
    else
      v32 = -1;
    v33 = v32 & *(_QWORD *)(*a3 + 64);
    v78 = (unint64_t)(v31 + 63) >> 6;
    swift_bridgeObjectRetain(v29);
    v76 = 0;
    v34 = 0;
    if (v33)
    {
LABEL_30:
      v35 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v36 = v35 | (v34 << 6);
      goto LABEL_31;
    }
    while (1)
    {
      v41 = v34 + 1;
      if (__OFADD__(v34, 1))
      {
        __break(1u);
LABEL_67:
        __break(1u);
        return (uint64_t)v6;
      }
      if (v41 >= v78)
        break;
      v42 = *(_QWORD *)(v30 + 8 * v41);
      ++v34;
      if (v42)
        goto LABEL_46;
      v34 = v41 + 1;
      if (v41 + 1 >= v78)
        break;
      v42 = *(_QWORD *)(v30 + 8 * v34);
      if (v42)
        goto LABEL_46;
      v34 = v41 + 2;
      if (v41 + 2 >= v78)
        break;
      v42 = *(_QWORD *)(v30 + 8 * v34);
      if (v42)
        goto LABEL_46;
      v43 = v41 + 3;
      if (v43 >= v78)
        break;
      v42 = *(_QWORD *)(v30 + 8 * v43);
      if (!v42)
      {
        while (1)
        {
          v34 = v43 + 1;
          if (__OFADD__(v43, 1))
            goto LABEL_67;
          if (v34 >= v78)
            goto LABEL_57;
          v42 = *(_QWORD *)(v30 + 8 * v34);
          ++v43;
          if (v42)
            goto LABEL_46;
        }
      }
      v34 = v43;
LABEL_46:
      v33 = (v42 - 1) & v42;
      v36 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_31:
      v37 = *(_QWORD *)(v29 + 48) + 16 * v36;
      v6 = *(_QWORD **)v37;
      v38 = *(_QWORD *)(v37 + 8);
      v39 = *(_QWORD **)(*(_QWORD *)(v29 + 56) + 8 * v36);
      swift_bridgeObjectRetain(v3);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      v40 = sub_100032C6C((uint64_t)v6, v38, v22, v3);
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v38);
      if ((v40 & 1) != 0)
      {
        v44 = v80;
        if (!v80[2])
          goto LABEL_51;
        swift_bridgeObjectRetain(v3);
        v45 = v77;
        sub_10004F8A8(v77);
        v46 = sub_10004DBC4(v22, v3, v77);
        if ((v47 & 1) == 0)
        {
          swift_bridgeObjectRelease(v3);
          sub_10004F8CC(v77);
LABEL_51:
          swift_bridgeObjectRetain(v3);
          v45 = v77;
          sub_10004F8A8(v77);
          v49 = swift_isUniquelyReferenced_nonNull_native(v44);
          v79[0] = v44;
          sub_10004F5A4((uint64_t)_swiftEmptyArrayStorage, v22, v3, v77, v49);
          v80 = (_QWORD *)v79[0];
          swift_bridgeObjectRelease(0x8000000000000000);
          swift_bridgeObjectRelease(v3);
          sub_10004F8CC(v77);
          goto LABEL_52;
        }
        v48 = *(_QWORD *)(v44[7] + 8 * v46);
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRelease(v3);
        sub_10004F8CC(v77);
        swift_bridgeObjectRelease(v48);
LABEL_52:
        swift_bridgeObjectRetain(v3);
        sub_10004F8A8(v45);
        v50 = sub_10004D48C(v79, v22, v3, v45);
        if (*v51 > 1uLL)
          sub_10004D554(v39);
        else
          swift_bridgeObjectRelease(v39);
        ((void (*)(_QWORD *, _QWORD))v50)(v79, 0);
        swift_bridgeObjectRelease(v3);
        sub_10004F8CC(v77);
        v76 = 1;
        if (v33)
          goto LABEL_30;
      }
      else
      {
        swift_bridgeObjectRelease(v39);
        if (v33)
          goto LABEL_30;
      }
    }
LABEL_57:
    swift_release(v29);
    v20 = v75;
    v11 = v77;
    if ((v76 & 1) == 0)
    {
      swift_bridgeObjectRetain(v3);
      sub_10004F8A8(v77);
      v52 = sub_10004EA1C(v22, v3, v77);
      swift_bridgeObjectRelease(v3);
      sub_10004F8CC(v77);
      sub_10004FA80(v52);
    }
LABEL_59:
    if (!v71)
    {
      ++v20;
      swift_bridgeObjectRelease(v3);
      sub_10004F8CC(v11);
      if (v20 == v74)
      {
        swift_bridgeObjectRelease_n(v64, 2);
        v53 = v80;
        v6 = v59;
        a1 = v60;
        v11 = v68;
        v7 = v69;
        v17 = v66;
        i = v67;
        v18 = v65;
        goto LABEL_63;
      }
      continue;
    }
    break;
  }
LABEL_72:
  v58 = v80;
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v58);
  sub_10004F8CC(v11);
  result = swift_bridgeObjectRelease(v64);
  __break(1u);
  return result;
}

Swift::Int sub_10004E3D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100159310);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10004E6E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100159300);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v39 = v3;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v40)
      break;
    v25 = v41;
    v26 = v41[v24];
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v40)
        goto LABEL_36;
      v26 = v41[v14];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v40)
        {
LABEL_36:
          swift_release(v5);
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v41[v27];
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v40)
              goto LABEL_36;
            v26 = v41[v14];
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = *(_QWORD *)(v5 + 56);
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 24 * v23);
    v34 = *v33;
    v35 = v33[1];
    v36 = v33[2];
    v37 = *(_QWORD *)(v32 + 8 * v23);
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      sub_10004F8A8(v36);
      swift_bridgeObjectRetain(v37);
    }
    v15 = *(_QWORD *)(v8 + 40);
    v16 = sub_10004FA90();
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v15, &type metadata for MachOSymbol, v16);
    v17 = -1 << *(_BYTE *)(v8 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 24 * v20);
    *v21 = v34;
    v21[1] = v35;
    v21[2] = v36;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20) = v37;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v39;
  v25 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10004EA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10004DBC4(a1, a2, a3);
  LOBYTE(a3) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a3 & 1) == 0)
    return 1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v12 = *v4;
  v18 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10004F1F4();
    v12 = v18;
  }
  v13 = *(_QWORD *)(v12 + 48) + 24 * v9;
  v14 = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + 8));
  sub_10004F8CC(v14);
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v9);
  sub_10004F3C4(v9, v12);
  v16 = *v4;
  *v4 = v12;
  swift_bridgeObjectRelease(v16);
  return v15;
}

void (*sub_10004EB04(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_10004EF40(v7);
  v7[10] = sub_10004EC94(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10002972C;
}

void (*sub_10004EB94(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4))(uint64_t a1)
{
  _QWORD *v4;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;

  v9 = malloc(0x60uLL);
  *a1 = v9;
  v9[8] = a3;
  v9[9] = a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  swift_bridgeObjectRetain(a3);
  sub_10004F8A8(a4);
  v9[10] = sub_10002AAA4(v9);
  v9[11] = sub_10004EDC0(v9 + 4, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  return sub_10004EC3C;
}

void sub_10004EC3C(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  unint64_t v3;
  uint64_t v4;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease(v4);
  sub_10004F8CC(v3);
  v2(v1, 0);
  free(v1);
}

void (*sub_10004EC94(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_100005DE8(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_10002AA68;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10004F040();
      goto LABEL_7;
    }
    sub_10004E3D0(v16, a4 & 1);
    v20 = sub_100005DE8(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void (*sub_10004EDC0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5))(uint64_t **a1)
{
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*result)(uint64_t **);

  v6 = v5;
  v12 = malloc(0x38uLL);
  *a1 = v12;
  v12[3] = a4;
  v12[4] = v6;
  v12[1] = a2;
  v12[2] = a3;
  v13 = *v6;
  v15 = sub_10004DBC4(a2, a3, a4);
  *((_BYTE *)v12 + 48) = v14 & 1;
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = *(_QWORD *)(v13 + 24);
    if (v20 >= v18 && (a5 & 1) != 0)
    {
LABEL_7:
      v12[5] = v15;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v21 = *(_QWORD *)(*(_QWORD *)(*v6 + 56) + 8 * v15);
LABEL_12:
        *v12 = v21;
        return sub_10004EF00;
      }
LABEL_11:
      v21 = 1;
      goto LABEL_12;
    }
    if (v20 >= v18 && (a5 & 1) == 0)
    {
      sub_10004F1F4();
      goto LABEL_7;
    }
    sub_10004E6E4(v18, a5 & 1);
    v22 = sub_10004DBC4(a2, a3, a4);
    if ((v19 & 1) == (v23 & 1))
    {
      v15 = v22;
      v12[5] = v22;
      if ((v19 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MachOSymbol);
  __break(1u);
  return result;
}

void sub_10004EF00(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_10004EF60(*a1, *((_BYTE *)*a1 + 48), (uint64_t *)(*a1)[4], (*a1)[5], (*a1)[1], (*a1)[2], (*a1)[3]);
  sub_10004FA80(*v1);
  free(v1);
}

uint64_t (*sub_10004EF40(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_10004FBB0;
}

uint64_t *sub_10004EF60(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v9 = *result;
  if (*result == 1)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + 24 * a4, 1, &type metadata for MachOSymbol);
      sub_10004F3C4(a4, *a3);
    }
    return (uint64_t *)sub_10004FAD4(v9);
  }
  v10 = (_QWORD *)*a3;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)(v10[7] + 8 * a4) = v9;
    return (uint64_t *)sub_10004FAD4(v9);
  }
  v10[(a4 >> 6) + 8] |= 1 << a4;
  v12 = (_QWORD *)(v10[6] + 24 * a4);
  *v12 = a5;
  v12[1] = a6;
  v12[2] = a7;
  *(_QWORD *)(v10[7] + 8 * a4) = v9;
  v13 = v10[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (!v14)
  {
    v10[2] = v15;
    swift_bridgeObjectRetain(a6);
    sub_10004F8A8(a7);
    return (uint64_t *)sub_10004FAD4(v9);
  }
  __break(1u);
  return result;
}

void sub_10004F040()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100005C88(&qword_100159310);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10004F1F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100005C88(&qword_100159300);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 24 * v15);
    v18 = v17[1];
    v19 = v17[2];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = *v17;
    v22[1] = v18;
    v22[2] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
    sub_10004F8A8(v19);
    swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

unint64_t sub_10004F3C4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v9 = sub_10004FA90();
      do
      {
        result = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40), &type metadata for MachOSymbol, v9);
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= (uint64_t)v10)
          {
LABEL_16:
            v13 = *(_QWORD *)(a2 + 48);
            v14 = v13 + 24 * v3;
            v15 = (__int128 *)(v13 + 24 * v6);
            if (v3 != v6 || v14 >= (unint64_t)v15 + 24)
            {
              v16 = *v15;
              *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
              *(_OWORD *)v14 = v16;
            }
            v17 = *(_QWORD *)(a2 + 56);
            v18 = (_QWORD *)(v17 + 8 * v3);
            v19 = (_QWORD *)(v17 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
            {
              *v18 = *v19;
              v3 = v6;
            }
          }
        }
        else if (v10 >= v8 || v3 >= (uint64_t)v10)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10004F5A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10004DBC4(a2, a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10004F1F4();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 24 * v14);
    *v25 = a2;
    v25[1] = a3;
    v25[2] = a4;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a3);
      return sub_10004F8A8(a4);
    }
    goto LABEL_14;
  }
  sub_10004E6E4(v17, a5 & 1);
  v23 = sub_10004DBC4(a2, a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MachOSymbol);
  __break(1u);
  return result;
}

uint64_t sub_10004F728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005C88(&qword_100159318);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v20 = v1;
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 32 + 8 * v4);
      v22 = v6;
      v7 = *(_QWORD *)(v3 + 40);
      sub_10004F8A8(v6);
      v8 = sub_10004FB28();
      result = dispatch thunk of Hashable._rawHashValue(seed:)(v7, &type metadata for MachOSymbol.Kind, v8);
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = ~v10;
        v16 = sub_10004FB6C();
        do
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11);
          result = dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v22, &type metadata for MachOSymbol.Kind, v16);
          if ((result & 1) != 0)
          {
            sub_10004F8CC(v6);
            v1 = v20;
            goto LABEL_4;
          }
          v11 = (v11 + 1) & v15;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
        }
        while ((v13 & (1 << v11)) != 0);
        v1 = v20;
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v6;
      v17 = *(_QWORD *)(v3 + 16);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        break;
      *(_QWORD *)(v3 + 16) = v19;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
    __break(1u);
  }
  else
  {
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return result;
}

unint64_t sub_10004F8A8(unint64_t result)
{
  unint64_t v1;

  v1 = result >> 62;
  if (!(result >> 62))
    return swift_retain(result);
  if ((_DWORD)v1 == 2 || (_DWORD)v1 == 1)
  {
    result &= 0x3FFFFFFFFFFFFFFFuLL;
    return swift_retain(result);
  }
  return result;
}

unint64_t sub_10004F8CC(unint64_t result)
{
  unint64_t v1;

  v1 = result >> 62;
  if (!(result >> 62))
    return swift_release(result);
  if ((_DWORD)v1 == 2 || (_DWORD)v1 == 1)
  {
    result &= 0x3FFFFFFFFFFFFFFFuLL;
    return swift_release(result);
  }
  return result;
}

unint64_t sub_10004F8F0()
{
  unint64_t result;

  result = qword_1001591F0;
  if (!qword_1001591F0)
  {
    result = swift_getWitnessTable(&unk_10011A318, &type metadata for CollectionKind);
    atomic_store(result, (unint64_t *)&qword_1001591F0);
  }
  return result;
}

unint64_t sub_10004F934()
{
  unint64_t result;

  result = qword_1001591F8;
  if (!qword_1001591F8)
  {
    result = swift_getWitnessTable(&unk_10010FA98, &type metadata for CollectionKind);
    atomic_store(result, (unint64_t *)&qword_1001591F8);
  }
  return result;
}

uint64_t sub_10004F978()
{
  return sub_100012534(&qword_100159200, type metadata accessor for KernelCollection, (uint64_t)&unk_100110968);
}

uint64_t type metadata accessor for KernelCollection(uint64_t a1)
{
  uint64_t result;

  result = qword_10015F8C0;
  if (!qword_10015F8C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KernelCollection);
  return result;
}

uint64_t sub_10004F9E0()
{
  return type metadata accessor for KernelCollection(0);
}

uint64_t sub_10004F9E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1001109B8;
    v4[3] = &unk_1001109D0;
    v4[4] = &unk_1001109E8;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10004FA80(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t sub_10004FA90()
{
  unint64_t result;

  result = qword_1001592F8;
  if (!qword_1001592F8)
  {
    result = swift_getWitnessTable(&unk_10011ACE8, &type metadata for MachOSymbol);
    atomic_store(result, (unint64_t *)&qword_1001592F8);
  }
  return result;
}

uint64_t sub_10004FAD4(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain(result);
  return result;
}

unint64_t sub_10004FAE4()
{
  unint64_t result;

  result = qword_100159308;
  if (!qword_100159308)
  {
    result = swift_getWitnessTable(&unk_10011ACC0, &type metadata for MachOSymbol);
    atomic_store(result, (unint64_t *)&qword_100159308);
  }
  return result;
}

unint64_t sub_10004FB28()
{
  unint64_t result;

  result = qword_100159320;
  if (!qword_100159320)
  {
    result = swift_getWitnessTable(&unk_10011AC80, &type metadata for MachOSymbol.Kind);
    atomic_store(result, (unint64_t *)&qword_100159320);
  }
  return result;
}

unint64_t sub_10004FB6C()
{
  unint64_t result;

  result = qword_100159328;
  if (!qword_100159328)
  {
    result = swift_getWitnessTable(&unk_10011AC58, &type metadata for MachOSymbol.Kind);
    atomic_store(result, (unint64_t *)&qword_100159328);
  }
  return result;
}

void *sub_10004FBB4()
{
  _QWORD *v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)((char *)v0 + *(_QWORD *)((swift_isaMask & *v0) + 0x60));
  swift_beginAccess(v1, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_10004FC10(void *a1)
{
  _QWORD *v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)((char *)v1 + *(_QWORD *)((swift_isaMask & *v1) + 0x60));
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

void *sub_10004FC70(uint64_t a1)
{
  _QWORD *v1;

  swift_beginAccess((char *)v1 + *(_QWORD *)((swift_isaMask & *v1) + 0x60), a1, 33, 0);
  return &j_j__swift_endAccess;
}

void *sub_10004FCC4()
{
  _QWORD *v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)((char *)v0 + *(_QWORD *)((swift_isaMask & *v0) + 0x68));
  swift_beginAccess(v1, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_10004FD20(void *a1)
{
  _QWORD *v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)((char *)v1 + *(_QWORD *)((swift_isaMask & *v1) + 0x68));
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

void *sub_10004FD80(uint64_t a1)
{
  _QWORD *v1;

  swift_beginAccess((char *)v1 + *(_QWORD *)((swift_isaMask & *v1) + 0x68), a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10004FDD4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  char v6[24];

  v3 = swift_isaMask & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x70);
  swift_beginAccess(v4, v6, 0, 0);
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_10004FE48(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  _BYTE v6[24];

  v3 = swift_isaMask & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x70);
  swift_beginAccess(v4, v6, 33, 0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess(v6);
}

uint64_t (*sub_10004FEC4(uint64_t a1))(_QWORD)
{
  _QWORD *v1;

  swift_beginAccess((char *)v1 + *(_QWORD *)((swift_isaMask & *v1) + 0x70), a1, 33, 0);
  return j__swift_endAccess;
}

id sub_10004FF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v6;

  v6 = sub_1000511DC(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 8))(a1);
  return v6;
}

void sub_10004FF5C()
{
  sub_100051214();
}

id sub_10004FF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_10004FFC4(char *a1)
{
  uint64_t v2;

  v2 = swift_isaMask & *(_QWORD *)a1;

  return (*(uint64_t (**)(char *))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))(&a1[*(_QWORD *)((swift_isaMask & *(_QWORD *)a1) + 0x70)]);
}

void sub_100050040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD *v12;
  void (*v13)(void *);
  _QWORD *v14;
  _QWORD *v15;
  void (*v16)(_QWORD *);
  _QWORD *v17;
  void *v18;
  id v19;
  void *v20;
  int v21;
  BOOL v22;
  int v23;

  v5 = v4;
  v7 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0, *(_QWORD *)(*(_QWORD *)v5 + 80), *(_QWORD *)(*(_QWORD *)v5 + 88), a4);
  v10 = sub_1000511DC(a1, v7, v8, v9);
  v11 = v10;
  v12 = *(_QWORD **)(v5 + 24);
  if (v12)
  {
    v13 = *(void (**)(void *))((swift_isaMask & *v12) + 0x80);
    v14 = v12;
    v15 = v11;
    v13(v11);
    v16 = *(void (**)(_QWORD *))((swift_isaMask & *v15) + 0x98);
    v17 = v14;
    v16(v12);
  }
  else
  {
    v18 = *(void **)(v5 + 16);
    *(_QWORD *)(v5 + 16) = v10;
    v19 = v10;

    v17 = *(_QWORD **)(v5 + 24);
    *(_QWORD *)(v5 + 24) = v11;
  }

  v20 = *(void **)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v11;
  v11;

  v21 = *(_DWORD *)(v5 + 32);
  v22 = __CFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
    __break(1u);
  else
    *(_DWORD *)(v5 + 32) = v23;
}

void sub_100050148()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  id v11;
  char v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  int v17;
  BOOL v18;
  int v19;

  v1 = (_QWORD *)v0[2];
  if (v1)
  {
    v2 = v0;
    v3 = *v0;
    v4 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x78);
    v5 = v1;
    v6 = v4();
    v7 = (void *)v0[2];
    v0[2] = v6;

    v9 = (void *)v0[3];
    if (v9)
    {
      type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v8);
      v10 = v5;
      v11 = v9;
      v12 = static NSObject.== infix(_:_:)(v10, v11);

      if ((v12 & 1) != 0)
      {
        v13 = v4();
        v14 = (void *)v2[3];
        v2[3] = v13;

      }
    }
    v15 = (_QWORD *)v4();
    if (v15)
    {
      v16 = v15;
      (*(void (**)(_QWORD))((swift_isaMask & *v15) + 0x98))(0);

    }
    v17 = *((_DWORD *)v2 + 8);
    v18 = v17 != 0;
    v19 = v17 - 1;
    if (v18)
      *((_DWORD *)v2 + 8) = v19;
    else
      __break(1u);
  }
}

void sub_100050258(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void (*v9)(_QWORD *);
  _QWORD *v10;
  id v11;
  void (*v12)(void *);
  id v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  id v17;
  char v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  id v23;
  char v24;
  void *v25;
  int v26;
  BOOL v27;
  int v28;

  v2 = v1;
  v4 = *v1;
  v5 = (_QWORD *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x90))();
  v6 = (_QWORD *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x78))();
  v8 = v6;
  if (v6)
  {
    v9 = *(void (**)(_QWORD *))((swift_isaMask & *v6) + 0x98);
    v10 = v5;
    v11 = v8;
    v9(v5);

  }
  if (v5)
  {
    v12 = *(void (**)(void *))((swift_isaMask & *v5) + 0x80);
    v13 = v8;
    v14 = v5;
    v12(v8);

  }
  v15 = (void *)v2[2];
  if (v15)
  {
    type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v7);
    v16 = a1;
    v17 = v15;
    v18 = static NSObject.== infix(_:_:)(v16, v17);

    if ((v18 & 1) != 0)
    {
      v19 = (void *)v2[2];
      v2[2] = v5;
      v20 = v5;

    }
  }
  v21 = (void *)v2[3];
  if (v21)
  {
    type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v7);
    v22 = a1;
    v23 = v21;
    v24 = static NSObject.== infix(_:_:)(v22, v23);

    if ((v24 & 1) != 0)
    {
      v25 = (void *)v2[3];
      v2[3] = v8;
      v8 = v25;
    }
  }
  else
  {

  }
  v26 = *((_DWORD *)v2 + 8);
  v27 = v26 != 0;
  v28 = v26 - 1;
  if (v27)
    *((_DWORD *)v2 + 8) = v28;
  else
    __break(1u);
}

void *sub_1000503FC()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t sub_100050420(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void (*v10)(void);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)(void);
  _QWORD *v19;
  Swift::String v20;
  void *object;
  unint64_t v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  unint64_t v32;
  Swift::String v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v2 = *(_QWORD *)(*v1 + 80);
  v38 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(a1);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v1;
  v6 = (_QWORD *)v1[2];
  if (v6)
  {
    v7 = *(_QWORD *)(v3 + 88);
    v37 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
    v8 = v6;
    v9 = _swiftEmptyArrayStorage;
    do
    {
      v10 = *(void (**)(void))((swift_isaMask & *v6) + 0xA8);
      v11 = v6;
      v10();

      v12 = v37(v2, v7);
      v14 = v13;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v2);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_10000C500(0, v9[2] + 1, 1, v9);
      v16 = v9[2];
      v15 = v9[3];
      if (v16 >= v15 >> 1)
        v9 = sub_10000C500((_QWORD *)(v15 > 1), v16 + 1, 1, v9);
      v9[2] = v16 + 1;
      v17 = &v9[2 * v16];
      v17[4] = v12;
      v17[5] = v14;
      v18 = *(uint64_t (**)(void))((swift_isaMask & *v11) + 0x78);
      v19 = v11;
      v6 = (_QWORD *)v18();

    }
    while (v6);
  }
  else
  {
    v9 = _swiftEmptyArrayStorage;
  }
  LODWORD(v39) = *((_DWORD *)v36 + 8);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
  object = v20._object;
  v39 = 0x203A657A69535BLL;
  v40 = 0xE700000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(object);
  v22 = v40;
  swift_bridgeObjectRetain(v40);
  v23._countAndFlagsBits = 0x203E2D2D20;
  v23._object = (void *)0xE500000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v25 = v39;
  v24 = v40;
  v39 = (uint64_t)v9;
  v26 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v27 = sub_100013C48();
  v28 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v26, v27);
  v30 = v29;
  swift_bridgeObjectRelease(v9);
  v39 = v25;
  v40 = v24;
  swift_bridgeObjectRetain(v24);
  v31._countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v30);
  v32 = v40;
  swift_bridgeObjectRetain(v40);
  v33._countAndFlagsBits = 93;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v32);
  return v39;
}

uint64_t sub_1000506C8()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32);
}

uint64_t sub_1000506D0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 36, 7);
}

uint64_t sub_1000506FC()
{
  uint64_t v0;
  uint64_t result;

  result = swift_allocObject(v0, 36, 7);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100050724(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = swift_allocObject(v1, 40, 7);
  sub_100050760(a1, v4, v5, v6);
  return v3;
}

uint64_t *sub_100050760(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *v4;
  *((_DWORD *)v4 + 4) = a1;
  v6 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 88);
  v8 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(255, v6, v7, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for String, v8, 0, 0);
  v10 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
  v4[3] = Dictionary.init(dictionaryLiteral:)(v10, &type metadata for String, v8, &protocol witness table for String);
  v12 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList(0, v6, v7, v11);
  v13 = swift_allocObject(v12, 36, 7);
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_DWORD *)(v13 + 32) = 0;
  v4[4] = v13;
  return v4;
}

uint64_t sub_100050818()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _BYTE v7[24];

  v1 = *v0;
  swift_beginAccess(v0 + 3, v7, 0, 0);
  v2 = v0[3];
  type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  v4 = swift_bridgeObjectRetain(v2);
  v5 = Dictionary.count.getter(v4);
  swift_bridgeObjectRelease(v2);
  return v5;
}

uint64_t sub_10005089C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(_QWORD *);
  void (*v20)(_QWORD, _QWORD);
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(_QWORD, _QWORD);
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  _QWORD *v31;
  void (*v32)(void);
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v45)(void);
  uint64_t (*v46)(uint64_t, uint64_t);
  void (*v47)(_QWORD, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  _QWORD *v53;
  uint64_t v54;
  id v55;
  char v56[24];

  v2 = v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(a1);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 88);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
  v50 = v5;
  v46 = v10;
  v11 = v10(v3, v9);
  v13 = v12;
  swift_beginAccess(v1 + 3, v56, 0, 0);
  v14 = v1[3];
  v52[0] = v11;
  v52[1] = v13;
  v16 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0, v3, v9, v15);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  v47 = (void (*)(_QWORD, _QWORD))v16;
  Dictionary.subscript.getter(&v53, v52, v14, &type metadata for String, v16, &protocol witness table for String);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  v17 = v53;
  v51 = v4;
  v48 = v13;
  v49 = v11;
  if (v53)
  {
    v18 = v2[4];
    v19 = *(void (**)(_QWORD *))(*(_QWORD *)v18 + 208);
    swift_retain(v18);
    v19(v17);
    swift_release(v18);
    v53 = (_QWORD *)v11;
    v54 = v13;
    swift_beginAccess(v2 + 3, v52, 33, 0);
    v20 = v47;
    v21 = type metadata accessor for Dictionary(0, &type metadata for String, v47, &protocol witness table for String);
    Dictionary.removeValue(forKey:)(&v55, &v53, v21);
    swift_endAccess(v52);

    (*(void (**)(void))((swift_isaMask & *v17) + 0xA8))();
    (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v3, v9);

    (*(void (**)(char *, uint64_t))(v51 + 8))(v7, v3);
    v22 = v2 + 3;
    v23 = v20;
  }
  else
  {
    v22 = v2 + 3;
    v23 = v47;
  }
  v24 = *((unsigned int *)v2 + 4);
  v25 = v2[3];
  v26 = swift_bridgeObjectRetain(v25);
  v27 = Dictionary.count.getter(v26);
  swift_bridgeObjectRelease(v25);
  if (v27 == v24)
  {
    v28 = v2[4];
    v29 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 200);
    v30 = swift_retain(v28);
    v31 = (_QWORD *)v29(v30);
    swift_release(v28);
    if (v31)
    {
      v45 = *(void (**)(void))((swift_isaMask & *v31) + 0xA8);
      v32 = v45;
      v33 = v31;
      v32();
      v34 = v46(v3, v9);
      v36 = v35;
      v47 = *(void (**)(_QWORD, _QWORD))(v51 + 8);
      v47(v7, v3);
      v53 = (_QWORD *)v34;
      v54 = v36;
      swift_beginAccess(v22, v52, 33, 0);
      v37 = type metadata accessor for Dictionary(0, &type metadata for String, v23, &protocol witness table for String);
      Dictionary.removeValue(forKey:)(&v55, &v53, v37);
      swift_endAccess(v52);
      swift_bridgeObjectRelease(v36);

      v45();
      (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v3, v9);

      v47(v7, v3);
    }
  }
  v38 = v2[4];
  v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 192);
  swift_retain(v38);
  v40 = (void *)v39(v50);
  swift_release(v38);
  v53 = (_QWORD *)v49;
  v54 = v48;
  v55 = v40;
  swift_beginAccess(v22, v52, 33, 0);
  v41 = type metadata accessor for Dictionary(0, &type metadata for String, v23, &protocol witness table for String);
  v42 = v40;
  Dictionary.subscript.setter(&v55, &v53, v41);
  v43 = swift_endAccess(v52);
  (*(void (**)(uint64_t))((swift_isaMask & *v42) + 0xA8))(v43);
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v3, v9);

  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v7, v3);
}

uint64_t sub_100050CF4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(_QWORD *);
  uint64_t v17;
  _BYTE v18[24];
  _QWORD v19[2];
  _QWORD *v20;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(a1);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19[0] = v5;
  v19[1] = v8;
  swift_beginAccess(v1 + 3, v18, 33, 0);
  v9 = *(_QWORD *)(v2 + 88);
  v11 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(255, v3, v9, v10);
  v12 = type metadata accessor for Dictionary(0, &type metadata for String, v11, &protocol witness table for String);
  Dictionary.removeValue(forKey:)(&v20, v19, v12);
  result = swift_endAccess(v18);
  v14 = v20;
  if (v20)
  {
    v15 = v1[4];
    v16 = *(void (**)(_QWORD *))(*(_QWORD *)v15 + 208);
    swift_retain(v15);
    v16(v14);
    v17 = swift_release(v15);
    (*(void (**)(uint64_t))((swift_isaMask & *v14) + 0xA8))(v17);
    (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v3, v9);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

uint64_t sub_100050E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[2];
  _QWORD *v16;
  _BYTE v17[24];

  v7 = *v3;
  swift_beginAccess(v3 + 3, v17, 0, 0);
  v8 = v3[3];
  v15[0] = a1;
  v15[1] = a2;
  v9 = *(_QWORD *)(v7 + 80);
  v11 = type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0, v9, *(_QWORD *)(v7 + 88), v10);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v8);
  Dictionary.subscript.getter(&v16, v15, v8, &type metadata for String, v11, &protocol witness table for String);
  swift_bridgeObjectRelease(a2);
  v12 = swift_bridgeObjectRelease(v8);
  v13 = v16;
  if (!v16)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a3, 1, 1, v9);
  (*(void (**)(uint64_t))((swift_isaMask & *v16) + 0xA8))(v12);

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a3, 0, 1, v9);
}

uint64_t sub_100050F4C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  _BYTE v20[24];

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(a1);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *((unsigned int *)v1 + 4);
  swift_beginAccess(v1 + 3, v20, 0, 0);
  v8 = v1[3];
  v9 = *(_QWORD *)(v2 + 88);
  type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0, v3, v9, v10);
  v11 = swift_bridgeObjectRetain(v8);
  v12 = Dictionary.count.getter(v11);
  swift_bridgeObjectRelease(v8);
  v13 = 0;
  if (v12 != v7)
    return v13;
  v14 = v1[4];
  v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 216);
  v16 = swift_retain(v14);
  v17 = (_QWORD *)v15(v16);
  result = swift_release(v14);
  if (v17)
  {
    (*(void (**)(uint64_t))((swift_isaMask & *v17) + 0xA8))(result);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v3, v9);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000510B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224);
  v3 = swift_retain(v1);
  v4 = v2(v3);
  swift_release(v1);
  return v4;
}

uint64_t sub_100051108()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

id sub_100051134(uint64_t a1)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  objc_super v7;

  v2 = (_QWORD *)(swift_isaMask & *(_QWORD *)v1);
  *(_QWORD *)&v1[v2[12]] = 0;
  *(_QWORD *)&v1[*(_QWORD *)((swift_isaMask & *(_QWORD *)v1) + 0x68)] = 0;
  v3 = v2[10];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(&v1[*(_QWORD *)((swift_isaMask & *(_QWORD *)v1) + 0x70)], a1, v3);
  v5 = (objc_class *)type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0, v3, v2[11], v4);
  v7.receiver = v1;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "init");
}

id sub_1000511DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v6;

  v6 = objc_allocWithZone((Class)type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4));
  return sub_100051134(a1);
}

void sub_100051214()
{
  _swift_stdlib_reportUnimplementedInitializer("driverkitd.KMDoublyLinkedListNode", 33, "init()", 6, 0);
  __break(1u);
}

uint64_t type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000639C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KMLimitedSizeCache.KMDoublyLinkedList.KMDoublyLinkedListNode);
}

uint64_t type metadata accessor for KMLimitedSizeCache.KMDoublyLinkedList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000639C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KMLimitedSizeCache.KMDoublyLinkedList);
}

uint64_t sub_10005125C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000512AC(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int32 + 64, (uint64_t)&value witness table for Builtin.BridgeObject + 64, (uint64_t)&value witness table for Builtin.NativeObject + 64);
}

uint64_t type metadata accessor for KMLimitedSizeCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000639C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KMLimitedSizeCache);
}

uint64_t sub_100051290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000512AC(a1, a2, a3, (uint64_t)"\b", (uint64_t)"\b", (uint64_t)&value witness table for Builtin.Int32 + 64);
}

uint64_t sub_1000512AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a4;
  v8 = a5;
  v9 = a6;
  return swift_initClassMetadata2();
}

uint64_t sub_1000512EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  v4[1] = "\b";
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 3, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100051368()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[9];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD v45[9];
  char v46;

  v1 = (uint64_t *)v0;
  sub_100051568(v0, (uint64_t)v32);
  v2 = v32[2];
  v28 = v32[1];
  v30 = v32[0];
  v3 = v32[3];
  v4 = v32[4];
  v5 = v32[5];
  v6 = v32[6];
  v8 = v32[7];
  v7 = v32[8];
  v9 = v33;
  sub_100051568((uint64_t)v1, (uint64_t)&v34);
  v10 = v44;
  if (v44 < 0)
  {
    v44 &= ~0x8000000000000000;
    sub_100051590((uint64_t)&v34, (uint64_t)v45);
    sub_1000515CC(v30, v28, v2, v3, v4, v5, v6, v8, v7, v9);
    sub_1000B47F4();
    v23 = v24;
    sub_1000516CC(v1);
  }
  else
  {
    v11 = v38;
    v12 = v39;
    v13 = v40;
    v14 = v41;
    v15 = v42;
    v16 = v43;
    v45[0] = v34;
    v45[1] = v35;
    v26 = v35;
    v27 = v34;
    v29 = v37;
    v31 = v36;
    v45[2] = v36;
    v45[3] = v37;
    v45[4] = v38;
    v45[5] = v39;
    v45[6] = v40;
    v45[7] = v41;
    v45[8] = v42;
    v46 = v43;
    sub_1000515CC(v34, v35, v36, v37, v38, v39, v40, v41, v42, v43);
    swift_retain(v10);
    _StringGuts.grow(_:)(17);
    sub_1000B47F4();
    v18 = v17;
    swift_bridgeObjectRelease(0xE000000000000000);
    v19._countAndFlagsBits = 0x736E657478652820;
    v19._object = (void *)0xEC000000206E6F69;
    String.append(_:)(v19);
    v20._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 200))();
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22._countAndFlagsBits = 41;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    swift_release(v10);
    sub_1000391DC(v27, v26, v31, v29, v11, v12, v13, v14, v15, v16);
    return v18;
  }
  return v23;
}

uint64_t sub_100051568(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  return a2;
}

uint64_t sub_100051590(uint64_t a1, uint64_t a2)
{
  initializeWithTake for KMError(a2, a1);
  return a2;
}

uint64_t sub_1000515CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v13;

  v13 = result;
  switch(a10)
  {
    case 0:
    case 30:
    case 51:
      goto LABEL_3;
    case 1:
    case 2:
    case 4:
    case 5:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
      goto LABEL_2;
    case 3:
      goto LABEL_8;
    case 6:
    case 14:
    case 42:
      swift_bridgeObjectRetain(a2);
      v13 = a4;
      goto LABEL_3;
    case 8:
      goto LABEL_9;
    case 13:
      v13 = a9;
      swift_bridgeObjectRetain(a2);
      sub_10002B23C(a4, a5);
      swift_bridgeObjectRetain(a7);
      goto LABEL_3;
    case 15:
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a4);
      v13 = a6;
      goto LABEL_3;
    case 18:
      result = a2;
LABEL_8:
      swift_bridgeObjectRetain(result);
LABEL_9:
      v13 = a3;
      goto LABEL_3;
    case 26:
      swift_bridgeObjectRetain(result);
LABEL_2:
      v13 = a2;
LABEL_3:
      result = swift_bridgeObjectRetain(v13);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_1000516CC(uint64_t *a1)
{
  sub_10005171C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return a1;
}

uint64_t sub_10005171C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11 < 0)
    return sub_1000391DC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  sub_1000391DC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return swift_release(a11);
}

uint64_t sub_100051784()
{
  uint64_t v0;
  _BYTE v2[88];

  sub_100051568(v0, (uint64_t)v2);
  return sub_100051368();
}

void *sub_1000517B8()
{
  return &_swiftEmptyArrayStorage;
}

unint64_t sub_1000517C4()
{
  return sub_1000517D0((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_1000517D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_100159418);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  v22 = v3 + 64;
  swift_retain(v3);
  v21 = v1;
  v6 = v1 + 56;
  while (1)
  {
    v23 = v5;
    v7 = *(_QWORD *)(v6 - 24);
    v8 = *(_QWORD *)(v6 - 16);
    v10 = *(_QWORD *)(v6 - 8);
    v9 = *(_QWORD *)v6;
    v11 = *(_QWORD *)(v6 + 16);
    v12 = *(_QWORD *)(v6 + 32);
    v25 = *(_QWORD *)(v6 + 24);
    v26 = *(_QWORD *)(v6 + 8);
    v13 = *(_QWORD *)(v6 + 48);
    v24 = *(_QWORD *)(v6 + 40);
    v14 = *(_BYTE *)(v6 + 56);
    swift_retain(v7);
    sub_1000515CC(v8, v10, v9, v26, v11, v25, v12, v24, v13, v14);
    result = sub_100054894(v7);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v7;
    v17 = v4[7] + 80 * result;
    *(_QWORD *)v17 = v8;
    *(_QWORD *)(v17 + 8) = v10;
    *(_QWORD *)(v17 + 16) = v9;
    *(_QWORD *)(v17 + 24) = v26;
    *(_QWORD *)(v17 + 32) = v11;
    *(_QWORD *)(v17 + 40) = v25;
    *(_QWORD *)(v17 + 48) = v12;
    *(_QWORD *)(v17 + 56) = v24;
    *(_QWORD *)(v17 + 64) = v13;
    *(_BYTE *)(v17 + 72) = v14;
    v18 = v4[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v6 += 88;
    v4[2] = v20;
    v5 = v23 - 1;
    if (v23 == 1)
    {
      swift_release(v4);
      v1 = v21;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100051984(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_1001593E8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v8 = *(v6 - 1);
    v7 = *v6;
    swift_retain(v8);
    swift_retain(v7);
    result = sub_100054894(v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100051A8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_100159400);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100005DE8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100051BA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100005C88(&qword_100159428);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100005C88(&qword_1001593F8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100019E1C(v13, (uint64_t)v5, &qword_100159428);
    result = sub_100054924((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100051D38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_1001593F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v7 = *((_BYTE *)v6 - 8);
    v8 = *v6;
    swift_bridgeObjectRetain(*v6);
    result = sub_100054990(v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(_QWORD *)(v4[7] + 8 * result) = v8;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_100051E38()
{
  return &_swiftEmptySetSingleton;
}

unint64_t sub_100051E44()
{
  return sub_100051984((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_100051E50()
{
  return sub_100051A8C((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_100051E5C()
{
  return sub_100051BA4((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_100051E68()
{
  return sub_100051D38((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100051E74@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

_QWORD *sub_100051E88(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *v1;
  v21 = v3;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0)
      v16 = v3 & 0xFFFFFFFFFFFFFF8;
    else
      v16 = v3;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v16);
    if (!v4)
      goto LABEL_19;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v3);
    if (!v4)
      goto LABEL_19;
  }
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_30;
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v4; ++i)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      v7 = sub_100026294(*(_BYTE *)(*(_QWORD *)(v6 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection)+ OBJC_IVAR____TtC10driverkitd16KernelCollection_kind), (char)a1);
      if (v7)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
        v8 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
        v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
        specialized ContiguousArray._endMutation()(v9);
      }
      else
      {
        swift_unknownObjectRelease(v6);
      }
    }
  }
  else
  {
    v10 = (_QWORD *)(v3 + 32);
    do
    {
      v11 = *v10;
      v12 = *(_BYTE *)(*(_QWORD *)(*v10 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection)
                     + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
      swift_retain(*v10);
      v13 = sub_100026294(v12, (char)a1);
      if (v13)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
        specialized ContiguousArray._endMutation()(v15);
      }
      else
      {
        swift_release(v11);
      }
      ++v10;
      --v4;
    }
    while (v4);
  }
LABEL_19:
  result = sub_10005C73C(&v21);
  a1 = _swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0
    && ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    if (_swiftEmptyArrayStorage[2])
      goto LABEL_22;
LABEL_27:
    swift_release(_swiftEmptyArrayStorage);
    return 0;
  }
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v20 = _CocoaArrayWrapper.endIndex.getter(v19);
  result = (_QWORD *)swift_release(_swiftEmptyArrayStorage);
  if (!v20)
    goto LABEL_27;
LABEL_22:
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
LABEL_30:
    v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_25;
  }
  if (_swiftEmptyArrayStorage[2])
  {
    v18 = _swiftEmptyArrayStorage[4];
    swift_retain(v18);
LABEL_25:
    swift_release(a1);
    return (_QWORD *)v18;
  }
  __break(1u);
  return result;
}

void **sub_1000520D8(uint64_t (*a1)(uint64_t *), void **a2, unint64_t a3)
{
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *);
  void **v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;

  v5 = a3;
  v25 = (void **)&_swiftEmptyArrayStorage;
  if (a3 >> 62)
    goto LABEL_18;
  for (i = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v9 = 0;
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
    v23 = v5 & 0xC000000000000001;
    v21 = v5;
    while (1)
    {
      if (v23)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v5);
        v11 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_14:
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease(v5);
          swift_release(v10);
          swift_release(v25);
          return v3;
        }
        goto LABEL_9;
      }
      if (v9 >= *(_QWORD *)(v22 + 16))
        break;
      v10 = *(_QWORD *)(v5 + 8 * v9 + 32);
      swift_retain(v10);
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_14;
LABEL_9:
      v24 = v10;
      v3 = a2;
      v12 = a1(&v24);
      if (v4)
        goto LABEL_15;
      if ((v12 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v13 = i;
        v14 = a1;
        v15 = a2;
        v16 = v25[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
        v17 = v16;
        a2 = v15;
        a1 = v14;
        i = v13;
        v5 = v21;
        v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v10);
        v3 = (void **)&v25;
        specialized ContiguousArray._endMutation()(v18);
      }
      else
      {
        swift_release(v10);
      }
      ++v9;
      if (v11 == i)
      {
        v3 = v25;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_18:
    if (v5 < 0)
      v19 = v5;
    else
      v19 = v5 & 0xFFFFFFFFFFFFFF8;
  }
  v3 = (void **)&_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v5);
  return v3;
}

uint64_t sub_10005228C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  result = sub_1000109E8(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    v7 = sub_10005A084((uint64_t)v20, result, v5, 0, a1);
    v8 = v20[0];
    v9 = v20[1];
    v10 = v21;
    v11 = v22;
    v18 = v20[0];
    v19 = v21;
    v12 = v23;
    v13 = v24;
    v14 = v25;
    v15 = v26;
    v16 = v27;
    v17 = v28;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 32) = v11;
    *(_QWORD *)(a2 + 40) = v12;
    *(_QWORD *)(a2 + 48) = v13;
    *(_QWORD *)(a2 + 56) = v14;
    *(_QWORD *)(a2 + 64) = v15;
    *(_QWORD *)(a2 + 72) = v16;
    *(_BYTE *)(a2 + 80) = v17;
    swift_retain(v7);
    sub_1000515CC(v18, v9, v19, v11, v12, v13, v14, v15, v16, v17);
    swift_release(v7);
    return sub_1000391DC(v18, v9, v19, v11, v12, v13, v14, v15, v16, v17);
  }
  return result;
}

uint64_t sub_1000523E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *);
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t result;
  uint64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  void (*v57)(_QWORD *);
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  _QWORD *v66;
  void (*v67)(_QWORD *);
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  void (*v81)(_QWORD *);
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  _QWORD v97[3];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v93 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v89 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v91 = (char *)&v88 - v8;
  v9 = __chkstk_darwin(v7);
  v90 = (char *)&v88 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v88 - v11;
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(v1 + 24);
  v15 = swift_retain(v13);
  v16 = sub_100052AE0(v15, v14);
  v17 = swift_release(v13);
  v94 = a1;
  if (v16)
  {
    v18 = static os_log_type_t.info.getter(v17);
    v19 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_10010F050;
    v21 = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 200))();
    v23 = v22;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_100026838();
    *(_QWORD *)(v20 + 32) = v21;
    *(_QWORD *)(v20 + 40) = v23;
    a1 = v94;
    v24 = sub_10002687C();
    v25 = (void *)static OS_os_log.default.getter(v24);
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v25, "Collision: replacing %{public}s", 31, 2, v20);
    swift_bridgeObjectRelease(v20);

    sub_100052BB8(v16);
    swift_release(v16);
  }
  swift_retain(v13);
  v26 = swift_retain(a1);
  sub_100055024(v26, v13);
  v27 = swift_release(v13);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 144))(v27);
  v30 = v29;
  *(_QWORD *)&v95 = v28;
  *((_QWORD *)&v95 + 1) = v29;
  v92 = type metadata accessor for RealizedInfo(0);
  sub_1000D5550((uint64_t)&v95, v2 + 32, (uint64_t)&type metadata for String, v92, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRetain(v30);
  v31 = sub_100053034(v97, v28, v30);
  if (*v32)
  {
    v100 = a1;
    v33 = sub_100005C88(&qword_100157EC8);
    v34 = sub_100012534(&qword_100159330, type metadata accessor for RealizedInfo, (uint64_t)&unk_1001100FC);
    sub_1000D262C(0, (uint64_t)&v100, v33, v34);
  }
  ((void (*)(_QWORD *, _QWORD))v31)(v97, 0);
  v35 = swift_bridgeObjectRelease_n(v30, 2);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v13 + 112))(&v95, v35);
  if (v96)
  {
    sub_100004E2C(&v95, (uint64_t)v97);
    v36 = v98;
    v37 = v99;
    sub_100004DE4(v97, v98);
    (*(void (**)(uint64_t, uint64_t))(v37 + 64))(v36, v37);
    v39 = v2 + 40;
    v38 = *(_QWORD *)(v2 + 40);
    if (!*(_QWORD *)(v38 + 16) || (v40 = sub_100054924((uint64_t)v12), (v41 & 1) == 0))
    {
      v48 = v93;
      v43 = *(void (**)(char *, uint64_t))(v93 + 8);
      v43(v12, v4);
LABEL_32:
      v75 = v98;
      v76 = v99;
      sub_100004DE4(v97, v98);
      v77 = (uint64_t)v90;
      (*(void (**)(uint64_t, uint64_t))(v76 + 64))(v75, v76);
      v78 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      sub_1000D5550(v77, v39, v4, v92, v78);
      v79 = v91;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v91, v77, v4);
      v81 = sub_1000530A0(&v95);
      if (*v80)
      {
        v82 = v80;
        v83 = v94;
        v84 = swift_retain(v94);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v84);
        v86 = *(_QWORD *)((*v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v85 = *(_QWORD *)((*v82 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v86 >= v85 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1);
        v87 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v86, v83);
        specialized Array._endMutation()(v87);
      }
      ((void (*)(__int128 *, _QWORD))v81)(&v95, 0);
      v43(v79, v4);
      v43((char *)v77, v4);
      return sub_100005D08(v97);
    }
    v42 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v40);
    v43 = *(void (**)(char *, uint64_t))(v93 + 8);
    swift_bridgeObjectRetain(v42);
    result = ((uint64_t (*)(char *, uint64_t))v43)(v12, v4);
    if ((unint64_t)v42 >> 62)
    {
      if (v42 < 0)
        v74 = v42;
      else
        v74 = v42 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v42);
      v45 = _CocoaArrayWrapper.endIndex.getter(v74);
      result = swift_bridgeObjectRelease(v42);
      if (v45)
        goto LABEL_10;
    }
    else
    {
      v45 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v45)
      {
LABEL_10:
        if (v45 < 1)
        {
          __break(1u);
          return result;
        }
        for (i = 0; i != v45; ++i)
        {
          if ((v42 & 0xC000000000000001) != 0)
          {
            v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v42);
          }
          else
          {
            v47 = *(_QWORD *)(v42 + 8 * i + 32);
            swift_retain(v47);
          }
          sub_100052BB8(v47);
          swift_release(v47);
        }
      }
    }
    swift_bridgeObjectRelease(v42);
    v48 = v93;
    goto LABEL_32;
  }
  v49 = sub_1000124F8((uint64_t)&v95, &qword_100157C78);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 120))(v49);
  if (result)
  {
    v50 = result;
    v51 = result + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
    v52 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v53 = v92;
    sub_1000D5550(v51, v2 + 40, v4, v92, v52);
    v54 = v93;
    v55 = v89;
    (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v89, v51, v4);
    v57 = sub_1000530A0(v97);
    if (*v56)
    {
      v58 = v56;
      v59 = v94;
      v60 = swift_retain(v94);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v60);
      v62 = *(_QWORD *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v61 = *(_QWORD *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v62 >= v61 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
      v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v59);
      specialized Array._endMutation()(v63);
    }
    ((void (*)(_QWORD *, _QWORD))v57)(v97, 0);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v4);
    LOBYTE(v95) = *(_BYTE *)(v50 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
    v64 = v95;
    v65 = sub_10004F934();
    sub_1000D5550((uint64_t)&v95, v2 + 48, (uint64_t)&type metadata for CollectionKind, v53, v65);
    v67 = sub_100053184(v97, v64);
    v68 = v94;
    if (*v66)
    {
      v69 = v66;
      v70 = swift_retain(v94);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v70);
      v72 = *(_QWORD *)((*v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v71 = *(_QWORD *)((*v69 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v72 >= v71 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
      v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v68);
      specialized Array._endMutation()(v73);
    }
    ((void (*)(_QWORD *, _QWORD))v67)(v97, 0);
    return swift_release(v50);
  }
  return result;
}

uint64_t sub_100052AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;

  v2 = a2;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v8 = sub_100054894(a1);
      if ((v9 & 1) != 0)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v8);
        swift_retain(v7);
        return v7;
      }
    }
    return 0;
  }
  if (a2 >= 0)
    v2 = a2 & 0xFFFFFFFFFFFFFF8;
  v4 = swift_retain(a1);
  v5 = __CocoaDictionary.lookup(_:)(v4, v2);
  swift_release(a1);
  if (!v5)
    return 0;
  v11 = v5;
  v6 = type metadata accessor for RealizedInfo(0);
  swift_unknownObjectRetain(v5);
  swift_dynamicCast(&v12, &v11, (char *)&type metadata for Swift.AnyObject + 8, v6, 7);
  v7 = v12;
  swift_unknownObjectRelease(v5);
  return v7;
}

uint64_t sub_100052BB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *);
  uint64_t *v23;
  void (*v24)(_QWORD *, _QWORD);
  uint64_t *v25;
  uint64_t v26;
  void (*v27)(_QWORD *);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, _QWORD);
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  char *v48;
  void (*v49)(_QWORD *, _QWORD);
  uint64_t v50;
  char *v51;
  _QWORD v52[4];

  v2 = v1;
  v4 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v4);
  v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v51 = (char *)v46 - v12;
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(v1 + 24);
  v15 = swift_retain(v13);
  v16 = sub_100052AE0(v15, v14);
  swift_release(v13);
  swift_release(v16);
  if (!v16)
    return v16 != 0;
  v48 = v11;
  v49 = (void (*)(_QWORD *, _QWORD))v7;
  v50 = v8;
  v17 = swift_retain(v13);
  v18 = sub_100054EC4(v17);
  swift_release(v13);
  v19 = swift_release(v18);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 144))(v19);
  v22 = (void (*)(_QWORD *))v21;
  v24 = (void (*)(_QWORD *, _QWORD))sub_100053034(v52, v20, v21);
  if (*v23)
  {
    v25 = v23;
    v46[1] = v2;
    v47 = v16;
    swift_retain(a1);
    v26 = 0;
    v16 = sub_10005A40C(v25, a1);
    v27 = (void (*)(_QWORD *))a1;
    swift_release(a1);
    v28 = *v25;
    if ((unint64_t)*v25 >> 62)
    {
      if (v28 < 0)
        v43 = *v25;
      else
        v43 = v28 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v25);
      v29 = _CocoaArrayWrapper.endIndex.getter(v43);
      swift_bridgeObjectRelease(v28);
      if (v29 >= v16)
        goto LABEL_5;
    }
    else
    {
      v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v29 >= v16)
      {
LABEL_5:
        a1 = (uint64_t)v27;
        sub_10005AEE4(v16, v29, type metadata accessor for RealizedInfo);
        v24(v52, 0);
        v16 = v47;
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  v24(v52, 0);
LABEL_7:
  v30 = swift_bridgeObjectRelease(v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 152))(v30);
  v24 = v49;
  v31 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, void (*)(_QWORD *, _QWORD)))(v50 + 48))(v6, 1, v49) == 1)
  {
    for (i = sub_1000124F8((uint64_t)v6, (uint64_t *)&unk_10015BA60); ; i = v39(v51, v24))
    {
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 120))(i);
      if (!v40)
        break;
      v22 = (void (*)(_QWORD *))v40;
      v27 = sub_100053184(v52, *(_BYTE *)(v40 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
      if (!*v41)
        goto LABEL_20;
      v42 = v41;
      swift_retain(a1);
      v26 = sub_10005A40C(v42, a1);
      swift_release(a1);
      v29 = *v42;
      if ((unint64_t)*v42 >> 62)
      {
LABEL_27:
        if (v29 < 0)
          v44 = v29;
        else
          v44 = v29 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v29);
        v37 = _CocoaArrayWrapper.endIndex.getter(v44);
        swift_bridgeObjectRelease(v29);
        if (v37 >= v26)
        {
LABEL_19:
          sub_10005AEE4(v26, v37, type metadata accessor for RealizedInfo);
LABEL_20:
          ((void (*)(_QWORD *, _QWORD))v27)(v52, 0);
          swift_release(v22);
          return v16 != 0;
        }
      }
      else
      {
        v37 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v37 >= v26)
          goto LABEL_19;
      }
      __break(1u);
LABEL_32:
      if (v37 < 0)
        v45 = v37;
      else
        v45 = v37 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v37);
      v38 = _CocoaArrayWrapper.endIndex.getter(v45);
      result = swift_bridgeObjectRelease(v37);
      if (v38 < (uint64_t)v24)
        goto LABEL_36;
LABEL_12:
      a1 = (uint64_t)v27;
      sub_10005AEE4((uint64_t)v24, v38, type metadata accessor for RealizedInfo);
      ((void (*)(_QWORD *, _QWORD))v22)(v52, 0);
      v24 = v49;
LABEL_14:
      v39 = *(uint64_t (**)(char *, _QWORD))(v50 + 8);
      v39(v48, v24);
    }
    return v16 != 0;
  }
  v33 = v51;
  (*(void (**)(char *, char *, void (*)(_QWORD *, _QWORD)))(v31 + 32))(v51, v6, v24);
  (*(void (**)(char *, char *, void (*)(_QWORD *, _QWORD)))(v31 + 16))(v48, v33, v24);
  v22 = sub_1000530A0(v52);
  if (!*v34)
  {
    ((void (*)(_QWORD *, _QWORD))v22)(v52, 0);
    goto LABEL_14;
  }
  v35 = v34;
  swift_retain(a1);
  v24 = (void (*)(_QWORD *, _QWORD))sub_10005A40C(v35, a1);
  v27 = (void (*)(_QWORD *))a1;
  result = swift_release(a1);
  v37 = *v35;
  if ((unint64_t)*v35 >> 62)
    goto LABEL_32;
  v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v38 >= (uint64_t)v24)
    goto LABEL_12;
LABEL_36:
  __break(1u);
  return result;
}

void (*sub_100053034(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_10005713C(v6, a2, a3);
  return sub_100029040;
}

void (*sub_1000530A0(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = type metadata accessor for URL(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  (*(void (**)(void))(v4 + 16))();
  v2[7] = sub_100057010(v2, (uint64_t)v5);
  return sub_100053130;
}

void sub_100053130(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

void (*sub_100053184(_QWORD *a1, char a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_100056F58(v4, a2);
  return sub_1000531D0;
}

void sub_1000531D0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t sub_100053200(uint64_t a1, uint64_t a2)
{
  return sub_1000542B4(a1, a2, (uint64_t)sub_10005425C, (void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t, _QWORD, __n128))sub_100053FF4, &qword_100159338, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100053224(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[12];
  _BYTE v33[104];

  v2 = type metadata accessor for LookupSpec(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v4, a1, v5);
  swift_storeEnumTagMultiPayload(v4, v2, 1);
  sub_100053DFC((uint64_t)v4, (uint64_t)v32);
  v7 = v32[0];
  v6 = v32[1];
  v8 = v32[2];
  v9 = v32[3];
  v10 = v32[4];
  v11 = v32[5];
  v12 = v32[6];
  v13 = v32[7];
  v21 = v32[9];
  v22 = v32[8];
  v20 = v32[10];
  sub_1000260AC((uint64_t)v32, (uint64_t)v33, &qword_100159348);
  if (v33[88] == 1)
  {
    v23[0] = v7;
    v23[1] = v6;
    v23[2] = v8;
    v24 = v9;
    v25 = v10;
    v26 = v11;
    v27 = v12;
    v28 = v13;
    v29 = v22;
    v30 = v21;
    v31 = v20;
    v14 = sub_10005AD04();
    swift_willThrowTypedImpl(v23, &type metadata for LookupError, v14);
    sub_10005AE60((uint64_t)v32, (uint64_t (*)(void))&_swift_release);
    sub_10005ACC8((uint64_t)v4);
    return 0;
  }
  sub_10005ACC8((uint64_t)v4);
  v15 = *(_QWORD *)(v7 + 24);
  v16 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v15 + 112);
  v17 = swift_retain(v15);
  v16(v23, v17);
  swift_release(v15);
  if (!v24)
  {
    sub_10005AE60((uint64_t)v32, (uint64_t (*)(void))&_swift_release);
    sub_1000124F8((uint64_t)v23, &qword_100157C78);
    return 0;
  }
  sub_1000124F8((uint64_t)v23, &qword_100157C78);
  return v7;
}

void sub_1000533F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = type metadata accessor for URL(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for LookupSpec(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005B18C(a1, (uint64_t)v5);
  v6 = (char *)sub_1000534C8 + 4 * byte_100110BA2[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

void **sub_1000534C8()
{
  void **v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;

  v4 = v3[1];
  v5 = *(_QWORD *)(v1 + 32);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_100005DE8(*v3, v3[1]), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRelease(v4);
    if (!v2)
      return (void **)v8;
  }
  else
  {
    swift_bridgeObjectRelease(v4);
    v8 = 0;
    if (!v2)
      return (void **)v8;
  }
  if (v8)
    return sub_10005A25C(v8, v2, v0);
  return (void **)v8;
}

uint64_t sub_100053620(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v2 = &_swiftEmptyDictionarySingleton;
    v37 = &_swiftEmptyDictionarySingleton;
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v3 = __CocoaDictionary.makeIterator()(a1);
    v4 = ((uint64_t (*)(void))__CocoaDictionary.Iterator.next())();
    if (v4)
    {
      v6 = v4;
      v7 = v5;
      v33 = v3;
      v8 = type metadata accessor for OSExtension(0);
      do
      {
        v34[0] = v6;
        swift_dynamicCast(&v35, v34, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v34[0] = v7;
        v13 = type metadata accessor for RealizedInfo(0);
        swift_dynamicCast(&v36, v34, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
        v14 = v35;
        v15 = v36;
        v16 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v35 + 112);
        swift_retain(v35);
        v17 = swift_retain(v15);
        v16(v34, v17);
        v18 = v34[3];
        sub_1000124F8((uint64_t)v34, &qword_100157C78);
        swift_release(v14);
        swift_release(v15);
        if (v18)
        {
          v19 = v37;
          v20 = v37[2];
          if (v37[3] <= v20)
          {
            v21 = v20 + 1;
            swift_retain(v14);
            swift_retain(v15);
            sub_100055CC8(v21, 1);
            v19 = v37;
          }
          else
          {
            swift_retain(v14);
            swift_retain(v15);
          }
          v34[0] = v14;
          v22 = v19[5];
          v23 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
          result = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v8, v23);
          v25 = v19 + 8;
          v26 = -1 << *((_BYTE *)v19 + 32);
          v27 = result & ~v26;
          v28 = v27 >> 6;
          if (((-1 << v27) & ~v19[(v27 >> 6) + 8]) != 0)
          {
            v9 = __clz(__rbit64((-1 << v27) & ~v19[(v27 >> 6) + 8])) | v27 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v29 = 0;
            v30 = (unint64_t)(63 - v26) >> 6;
            do
            {
              if (++v28 == v30 && (v29 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v31 = v28 == v30;
              if (v28 == v30)
                v28 = 0;
              v29 |= v31;
              v32 = v25[v28];
            }
            while (v32 == -1);
            v9 = __clz(__rbit64(~v32)) + (v28 << 6);
          }
          *(_QWORD *)((char *)v25 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
          v10 = 8 * v9;
          *(_QWORD *)(v19[6] + v10) = v14;
          *(_QWORD *)(v19[7] + v10) = v15;
          ++v19[2];
        }
        swift_release(v15);
        v11 = swift_release(v14);
        v6 = __CocoaDictionary.Iterator.next()(v11);
        v7 = v12;
      }
      while (v6);
      v2 = v37;
      v3 = v33;
    }
    v35 = 0;
    v36 = 0;
    sub_100005DE0(v3 | 0x8000000000000000);
  }
  else
  {
    v2 = (void *)sub_100057888(a1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100057B38);
    swift_bridgeObjectRelease(v1);
  }
  return (uint64_t)v2;
}

uint64_t sub_10005392C(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = (unint64_t *)&_swiftEmptyDictionarySingleton;
    v36 = &_swiftEmptyDictionarySingleton;
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = __CocoaDictionary.makeIterator()(a1);
    v5 = __CocoaDictionary.Iterator.next()(v4);
    if (v5)
    {
      v7 = v5;
      v8 = v6;
      v9 = type metadata accessor for OSExtension(0);
      v10 = a2;
      do
      {
        v33 = v7;
        swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
        v33 = v8;
        v15 = type metadata accessor for RealizedInfo(0);
        swift_dynamicCast(&v35, &v33, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
        v16 = v34;
        v17 = v35;
        if ((unint64_t *)*v34 == v10)
        {
          v18 = v36;
          v19 = v36[2];
          if (v36[3] <= v19)
          {
            v20 = v19 + 1;
            swift_retain(v34);
            swift_retain(v17);
            sub_100055CC8(v20, 1);
            v18 = v36;
          }
          else
          {
            swift_retain(v34);
            swift_retain(v17);
          }
          v33 = (uint64_t)v16;
          v21 = v18[5];
          v22 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
          result = dispatch thunk of Hashable._rawHashValue(seed:)(v21, v9, v22);
          v24 = v18 + 8;
          v25 = -1 << *((_BYTE *)v18 + 32);
          v26 = result & ~v25;
          v27 = v26 >> 6;
          if (((-1 << v26) & ~v18[(v26 >> 6) + 8]) != 0)
          {
            v11 = __clz(__rbit64((-1 << v26) & ~v18[(v26 >> 6) + 8])) | v26 & 0x7FFFFFFFFFFFFFC0;
            v10 = a2;
          }
          else
          {
            v28 = 0;
            v29 = (unint64_t)(63 - v25) >> 6;
            v10 = a2;
            do
            {
              if (++v27 == v29 && (v28 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v30 = v27 == v29;
              if (v27 == v29)
                v27 = 0;
              v28 |= v30;
              v31 = v24[v27];
            }
            while (v31 == -1);
            v11 = __clz(__rbit64(~v31)) + (v27 << 6);
          }
          *(_QWORD *)((char *)v24 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
          v12 = 8 * v11;
          *(_QWORD *)(v18[6] + v12) = v16;
          *(_QWORD *)(v18[7] + v12) = v17;
          ++v18[2];
        }
        swift_release(v17);
        v13 = swift_release(v16);
        v7 = __CocoaDictionary.Iterator.next()(v13);
        v8 = v14;
      }
      while (v7);
      v3 = v36;
    }
    v34 = 0;
    v35 = 0;
    sub_100005DE0(v4 | 0x8000000000000000);
  }
  else
  {
    v3 = sub_100057724(a1, a2);
    swift_bridgeObjectRelease(v2);
  }
  return (uint64_t)v3;
}

void sub_100053C00(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  Swift::String v17;
  Swift::String v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unsigned __int8 v29;
  uint64_t v30;

  v7 = *(_QWORD *)(v3 + 8);
  v30 = v7;
  swift_bridgeObjectRetain(a2);
  sub_10005C714(&v30);
  v8 = sub_10005AACC(v7, a1, (uint64_t)a2);
  swift_bridgeObjectRelease(a2);
  sub_10005C73C(&v30);
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_release(v8);
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0x6F6620746F6E2027;
    v18._object = (void *)0xEB00000000646E75;
    String.append(_:)(v18);
    v12 = (_QWORD *)0xD00000000000001BLL;
    *(_QWORD *)&v15 = 0x80000001001237E0;
    v16 = 0uLL;
    v10 = 0x8000000000000000;
    v11 = 10;
LABEL_8:
    v13 = 0uLL;
    v14 = 0uLL;
    goto LABEL_9;
  }
  v9 = swift_retain(v8);
  sub_10005228C(v9, (uint64_t)&v23);
  swift_release(v8);
  v10 = v23;
  if (!v23)
  {
    swift_release(v8);
    __break(1u);
    goto LABEL_11;
  }
  sub_1000391DC((uint64_t)v24, v25, *((uint64_t *)&v25 + 1), v26, *((unint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29);
  if (*(_QWORD *)(v8 + 16) != 1)
  {
    v12 = sub_100054DD4(v8);
    swift_release(v8);
    v11 = 0;
    v15 = 0uLL;
    v16 = 0uLL;
    goto LABEL_8;
  }
  sub_10005228C(v8, (uint64_t)&v23);
  swift_release(v8);
  if (v23)
  {
    v11 = v29;
    v21 = v27;
    v22 = v28;
    v19 = v25;
    v20 = v26;
    v12 = v24;
    swift_release(v23);
    v13 = v21;
    v14 = v22;
    v15 = v19;
    v16 = v20;
LABEL_9:
    *(_QWORD *)a3 = v12;
    *(_OWORD *)(a3 + 8) = v15;
    *(_OWORD *)(a3 + 24) = v16;
    *(_OWORD *)(a3 + 40) = v13;
    *(_OWORD *)(a3 + 56) = v14;
    *(_QWORD *)(a3 + 72) = v11;
    *(_QWORD *)(a3 + 80) = v10;
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_100053DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  _QWORD v27[11];

  v4 = type metadata accessor for LookupSpec(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000533F4(a1);
  if (!v7)
    goto LABEL_12;
  v8 = v7;
  v9 = v7 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)v7 >> 62))
  {
    result = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_4;
    goto LABEL_11;
  }
  if (v7 >= 0)
    v7 &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(v7);
  if (!result)
  {
LABEL_11:
    swift_bridgeObjectRelease(v8);
LABEL_12:
    sub_10005B18C(a1, (uint64_t)v6);
    if (swift_getEnumCaseMultiPayload(v6, v4))
    {
      result = sub_10005ACC8((uint64_t)v6);
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v12 = 0x80000001001237A0;
      v22 = 1;
      v21 = 0x8000000000000000;
      v11 = 0xD000000000000032;
      v20 = 10;
    }
    else
    {
      v23 = *v6;
      v26 = (void *)v6[1];
      sub_100053C00(v23, v26, (uint64_t)v27);
      v11 = v27[0];
      v14 = v27[3];
      v24 = v27[2];
      v25 = v27[1];
      v15 = v27[4];
      v16 = v27[5];
      v17 = v27[6];
      v18 = v27[7];
      v19 = v27[8];
      v20 = v27[9];
      v21 = v27[10];
      result = swift_bridgeObjectRelease(v26);
      v13 = v24;
      v12 = v25;
      v22 = 1;
    }
    goto LABEL_15;
  }
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v9 + 16))
  {
    v11 = *(_QWORD *)(v8 + 32);
    swift_retain(v11);
LABEL_7:
    result = swift_bridgeObjectRelease(v8);
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
LABEL_15:
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v13;
    *(_QWORD *)(a2 + 24) = v14;
    *(_QWORD *)(a2 + 32) = v15;
    *(_QWORD *)(a2 + 40) = v16;
    *(_QWORD *)(a2 + 48) = v17;
    *(_QWORD *)(a2 + 56) = v18;
    *(_QWORD *)(a2 + 64) = v19;
    *(_QWORD *)(a2 + 72) = v20;
    *(_QWORD *)(a2 + 80) = v21;
    *(_BYTE *)(a2 + 88) = v22;
    return result;
  }
  __break(1u);
  return result;
}

void sub_100053FF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  _QWORD v26[11];

  v4 = type metadata accessor for LookupSpec(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000533F4(a1);
  v8 = v7;
  if (v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = v7;
  }
  else
  {
    sub_10005B18C(a1, (uint64_t)v6);
    if (swift_getEnumCaseMultiPayload(v6, v4))
    {
      sub_10005ACC8((uint64_t)v6);
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v9 = 0x80000001001237A0;
      v18 = 0x8000000000000000;
      v19 = 0xD000000000000032;
      v17 = 10;
    }
    else
    {
      v20 = *v6;
      v25 = (void *)v6[1];
      sub_100053C00(v20, v25, (uint64_t)v26);
      v19 = v26[0];
      v23 = v26[2];
      v24 = v26[1];
      v12 = v26[4];
      v22 = v26[3];
      v13 = v26[5];
      v14 = v26[6];
      v15 = v26[7];
      v16 = v26[8];
      v17 = v26[9];
      v18 = v26[10];
      swift_bridgeObjectRelease(v25);
      v10 = v23;
      v9 = v24;
      v11 = v22;
    }
  }
  *(_QWORD *)a2 = v19;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 40) = v13;
  *(_QWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 56) = v15;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v17;
  *(_QWORD *)(a2 + 80) = v18;
  *(_BYTE *)(a2 + 88) = v8 == 0;
}

uint64_t sub_10005418C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  _QWORD v14[11];
  _QWORD v15[12];
  _BYTE v16[104];

  sub_100053DFC(a1, (uint64_t)v15);
  v1 = v15[0];
  v2 = v15[1];
  v3 = v15[2];
  v4 = v15[3];
  v5 = v15[4];
  v6 = v15[5];
  v7 = v15[6];
  v8 = v15[7];
  v9 = v15[8];
  v10 = v15[9];
  v13 = v15[10];
  sub_1000260AC((uint64_t)v15, (uint64_t)v16, &qword_100159348);
  if (v16[88] == 1)
  {
    v14[0] = v1;
    v14[1] = v2;
    v14[2] = v3;
    v14[3] = v4;
    v14[4] = v5;
    v14[5] = v6;
    v14[6] = v7;
    v14[7] = v8;
    v14[8] = v9;
    v14[9] = v10;
    v14[10] = v13;
    v11 = sub_10005AD04();
    swift_willThrowTypedImpl(v14, &type metadata for LookupError, v11);
    sub_10005AE60((uint64_t)v15, (uint64_t (*)(void))&_swift_release);
    return 0;
  }
  return v1;
}

BOOL sub_100054260(uint64_t a1)
{
  _BOOL8 v1;
  _QWORD v3[5];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 24) + 112))(v3);
  v1 = v3[3] != 0;
  sub_1000124F8((uint64_t)v3, &qword_100157C78);
  return v1;
}

uint64_t sub_1000542B4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, _QWORD *, uint64_t, _QWORD, __n128), uint64_t *a5, uint64_t (*a6)(void))
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t *v30;
  _QWORD v31[11];
  _QWORD v32[12];
  _BYTE v33[104];

  v29 = a6;
  v30 = a5;
  v10 = type metadata accessor for LookupSpec(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v12 = a1;
  v12[1] = a2;
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  v14 = swift_bridgeObjectRetain(a2);
  a4(v32, v12, a3, 0, v14);
  v15 = v32[0];
  v16 = v32[1];
  v17 = v32[2];
  v18 = v32[3];
  v19 = v32[4];
  v20 = v32[5];
  v21 = v32[6];
  v22 = v32[7];
  v27 = v32[9];
  v28 = v32[8];
  v26 = v32[10];
  sub_10005ACC8((uint64_t)v12);
  sub_1000260AC((uint64_t)v32, (uint64_t)v33, v30);
  if (v33[88] == 1)
  {
    v31[0] = v15;
    v31[1] = v16;
    v31[2] = v17;
    v31[3] = v18;
    v31[4] = v19;
    v31[5] = v20;
    v31[6] = v21;
    v31[7] = v22;
    v31[8] = v28;
    v31[9] = v27;
    v31[10] = v26;
    v23 = sub_10005AD04();
    swift_willThrowTypedImpl(v31, &type metadata for LookupError, v23);
    sub_10005AE60((uint64_t)v32, v29);
    return 0;
  }
  return v15;
}

uint64_t sub_100054408(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v19[16];
  _QWORD *v20;
  uint64_t v21;
  _BYTE v22[16];
  _QWORD *v23;
  uint64_t v24;
  _BYTE v25[16];
  uint64_t v26;

  v3 = v1[4];
  v26 = a1;
  swift_bridgeObjectRetain(v3);
  v4 = sub_1000598E4((void (*)(uint64_t *__return_ptr, uint64_t *, __n128))sub_10005B87C, (uint64_t)v25, v3);
  v5 = sub_100057888(v4, (uint64_t (*)(char *, unint64_t, uint64_t))sub_1000581F0);
  swift_bridgeObjectRelease(v3);
  swift_release(v4);
  swift_bridgeObjectRelease(v1[4]);
  v1[4] = v5;
  v6 = v1[5];
  v23 = v1;
  v24 = a1;
  swift_bridgeObjectRetain(v6);
  v7 = sub_1000595D4((void (*)(uint64_t *__return_ptr, uint64_t *, __n128))sub_10005B87C, (uint64_t)v22, v6);
  v8 = sub_100057888(v7, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100057EC4);
  swift_bridgeObjectRelease(v6);
  swift_release(v7);
  swift_bridgeObjectRelease(v1[5]);
  v1[5] = v8;
  v9 = v1[6];
  v20 = v1;
  v21 = a1;
  swift_bridgeObjectRetain(v9);
  v10 = sub_1000593B8((void (*)(uint64_t *__return_ptr, uint64_t *, __n128))sub_10005B87C, (uint64_t)v19, v9);
  v11 = sub_100057888(v10, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100057D14);
  swift_bridgeObjectRelease(v9);
  swift_release(v10);
  swift_bridgeObjectRelease(v1[6]);
  v1[6] = v11;
  v12 = v1[3];
  v17 = v1;
  v18 = a1;
  swift_bridgeObjectRetain(v12);
  v14 = sub_10005B540(v13, (uint64_t (*)(uint64_t *, uint64_t))sub_10005B8E0, (uint64_t)&v16);
  result = swift_bridgeObjectRelease(v1[3]);
  v1[3] = v14;
  return result;
}

uint64_t sub_100054568()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t ApprovalDB.entries.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*v1);
  *v1 = a1;
  return result;
}

uint64_t (*sub_100054598())()
{
  return nullsub_1;
}

uint64_t sub_1000545A8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t sub_1000545B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_1000545D8())()
{
  return nullsub_1;
}

uint64_t sub_1000545E8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000545F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_100054618())()
{
  return nullsub_1;
}

uint64_t sub_100054628()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100054630(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*sub_100054658())()
{
  return nullsub_1;
}

uint64_t sub_100054668()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100054670(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*sub_100054698())()
{
  return nullsub_1;
}

uint64_t sub_1000546A8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

uint64_t sub_1000546B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*sub_1000546D8())()
{
  return nullsub_1;
}

uint64_t sub_1000546E8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t sub_1000546F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 48));
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*sub_100054718())()
{
  return nullsub_1;
}

uint64_t sub_100054730(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = swift_retain(a1);
  v5 = sub_100052AE0(v4, v3);
  swift_release(a1);
  return v5;
}

uint64_t sub_10005476C(uint64_t a1, uint64_t a2)
{
  return sub_1000542B4(a1, a2, (uint64_t)sub_10005425C, (void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t, _QWORD, __n128))sub_100053DFC, &qword_100159348, (uint64_t (*)(void))&_swift_release);
}

double sub_1000547A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  sub_100005F34((void (*)(uint64_t))sub_100054814, 0, a1);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  return result;
}

uint64_t sub_100054814@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  *a2 = *a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return swift_bridgeObjectRetain(v8);
}

unint64_t sub_100054894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = type metadata accessor for OSExtension(0);
  v5 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
  v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, v4, v5);
  return sub_1000549F8(a1, v6);
}

unint64_t sub_100054924(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for URL(0);
  v6 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100054AD8(a1, v7);
}

unint64_t sub_100054990(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = sub_10004F934();
  v5 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, &type metadata for CollectionKind, v4);
  return sub_100054C18(a1, v5);
}

unint64_t sub_1000549F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = v2;
    v7 = ~v4;
    v8 = type metadata accessor for OSExtension(0);
    v9 = sub_100012534(&qword_100159420, type metadata accessor for OSExtension, (uint64_t)&unk_10011B490);
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v5);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v11, &v12, v8, v9) & 1) != 0)
        break;
      v5 = (v5 + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_100054AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100012534(&qword_100157E98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_100054C18(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;
  char v9;

  v9 = a1;
  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = sub_1000262B0();
    do
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v8, &v9, &type metadata for CollectionKind, v6) & 1) != 0)
        break;
      v4 = (v4 + 1) & v5;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

_QWORD *sub_100054CDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v1 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      goto LABEL_5;
    return _swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaDictionary.count.getter(a1);
  if (!v2)
    return _swiftEmptyArrayStorage;
LABEL_5:
  if (v2 <= 0)
  {
    v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    v3 = sub_100005C88(&qword_10015BB70);
    v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
    v5 = j__malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = v2;
    v4[3] = (2 * (v6 >> 3)) | 1;
  }
  swift_bridgeObjectRetain(v1);
  v7 = sub_100059B88((uint64_t)&v9, v4 + 4, v2, v1);
  result = (_QWORD *)sub_100005DE0(v9);
  if (v7 == v2)
    return v4;
  __break(1u);
  return result;
}

_QWORD *sub_100054DD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100005C88(&qword_100159410);
  v4 = (_QWORD *)swift_allocObject(v3, 80 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 80);
  v6 = sub_100059E48((uint64_t)&v9, (uint64_t)(v4 + 4), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_100005DE0(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_100054EC4(unint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v4);
    a1 = sub_100054894(a1);
    v12 = v11;
    swift_bridgeObjectRelease(v4);
    if ((v12 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v4 = *v2;
      v17 = *v2;
      *v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100056DB0();
        v4 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0)
    v5 = *v2;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v6 = swift_retain(a1);
  v7 = __CocoaDictionary.lookup(_:)(v6, v5);
  swift_release(a1);
  if (!v7)
  {
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  swift_unknownObjectRelease(v7);
  v8 = __CocoaDictionary.count.getter(v5);
  v4 = sub_1000550C4(v5, v8);
  swift_retain(v4);
  a1 = sub_100054894(a1);
  v10 = v9;
  swift_release(v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:
  swift_release(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * a1));
  v14 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * a1);
  sub_100056460(a1, v4);
  v15 = *v2;
  *v2 = v4;
  swift_bridgeObjectRelease(v15);
  return v14;
}

uint64_t sub_100055024(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  result = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(result, 1))
  {
    v6 = sub_1000550C4(v7, result + 1);
    *v3 = v6;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v11 = *v3;
    *v3 = 0x8000000000000000;
    sub_100056644(a1, a2, isUniquelyReferenced_nonNull_native);
    v10 = *v3;
    *v3 = v11;
    return swift_bridgeObjectRelease(v10);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000550C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a2)
  {
    sub_100005C88(&qword_1001593E8);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v32 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = type metadata accessor for OSExtension(0);
      do
      {
        v30 = v8;
        swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v29 = v9;
        v23 = type metadata accessor for RealizedInfo(0);
        swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
        v4 = v32;
        v24 = *(_QWORD *)(v32 + 16);
        if (*(_QWORD *)(v32 + 24) <= v24)
        {
          sub_100055CC8(v24 + 1, 1);
          v4 = v32;
        }
        v11 = v30;
        v12 = v31;
        v29 = v31;
        v13 = *(_QWORD *)(v4 + 40);
        v14 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
        result = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v10, v14);
        v16 = v4 + 64;
        v17 = -1 << *(_BYTE *)(v4 + 32);
        v18 = result & ~v17;
        v19 = v18 >> 6;
        if (((-1 << v18) & ~*(_QWORD *)(v4 + 64 + 8 * (v18 >> 6))) != 0)
        {
          v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v4 + 64 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v25 = 0;
          v26 = (unint64_t)(63 - v17) >> 6;
          do
          {
            if (++v19 == v26 && (v25 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v27 = v19 == v26;
            if (v19 == v26)
              v19 = 0;
            v25 |= v27;
            v28 = *(_QWORD *)(v16 + 8 * v19);
          }
          while (v28 == -1);
          v20 = __clz(__rbit64(~v28)) + (v19 << 6);
        }
        *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
        v21 = 8 * v20;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v21) = v12;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v11;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v22;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

uint64_t sub_10005531C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_1001593F0);
  v36 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v34)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v35 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v34)
        goto LABEL_36;
      v25 = *(_QWORD *)(v35 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v34)
        {
LABEL_36:
          swift_release(v5);
          if ((v36 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v35 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v34)
              goto LABEL_36;
            v25 = *(_QWORD *)(v35 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v22);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v36 & 1) == 0)
      swift_bridgeObjectRetain(v32);
    v15 = *(_QWORD *)(v8 + 40);
    v16 = sub_10004F934();
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v15, &type metadata for CollectionKind, v16);
    v17 = -1 << *(_BYTE *)(v8 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v19 == v28;
        if (v19 == v28)
          v19 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v19);
      }
      while (v30 == -1);
      v20 = __clz(__rbit64(~v30)) + (v19 << 6);
    }
    *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v20) = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20) = v32;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v24 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v24, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100055620(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_1001593F8);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

Swift::Int sub_1000559B4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100159400);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100055CC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_1001593E8);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v23 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v24 = v23 | (v14 << 6);
      goto LABEL_34;
    }
    v25 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v37)
      break;
    v26 = (_QWORD *)(v5 + 64);
    v27 = *(_QWORD *)(v38 + 8 * v25);
    ++v14;
    if (!v27)
    {
      v14 = v25 + 1;
      if (v25 + 1 >= v37)
        goto LABEL_36;
      v27 = *(_QWORD *)(v38 + 8 * v14);
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v2;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = *(_QWORD *)(v38 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            v14 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v27 = *(_QWORD *)(v38 + 8 * v14);
            ++v28;
            if (v27)
              goto LABEL_33;
          }
        }
        v14 = v28;
      }
    }
LABEL_33:
    v11 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_34:
    v33 = 8 * v24;
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v33);
    v35 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v33);
    if ((v39 & 1) == 0)
    {
      swift_retain(v34);
      swift_retain(v35);
    }
    v15 = *(_QWORD *)(v8 + 40);
    v16 = type metadata accessor for OSExtension(0);
    v17 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v16, v17);
    v18 = -1 << *(_BYTE *)(v8 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v20 == v30;
        if (v20 == v30)
          v20 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v20);
      }
      while (v32 == -1);
      v21 = __clz(__rbit64(~v32)) + (v20 << 6);
    }
    *(_QWORD *)(v12 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = 8 * v21;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v22) = v34;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v22) = v35;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v2;
  v26 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v26, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

unint64_t sub_100055FF8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v9 = sub_10004F934();
      do
      {
        result = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40), &type metadata for CollectionKind, v9);
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= (uint64_t)v10)
          {
LABEL_16:
            v13 = *(_QWORD *)(a2 + 48);
            v14 = (_BYTE *)(v13 + v3);
            v15 = (_BYTE *)(v13 + v6);
            if (v3 != v6 || v14 >= v15 + 1)
              *v14 = *v15;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v3 = v6;
            }
          }
        }
        else if (v10 >= v8 || v3 >= (uint64_t)v10)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000561C0(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for URL(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_QWORD *)(v26 + 8 * a1);
            v28 = (_QWORD *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100056460(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v9 = type metadata accessor for OSExtension(0);
      v10 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
      do
      {
        result = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40), v9, v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = (_QWORD *)(v14 + 8 * v3);
            v16 = (_QWORD *)(v14 + 8 * v6);
            if (v3 != v6 || v15 >= v16 + 1)
              *v15 = *v16;
            v17 = *(_QWORD *)(a2 + 56);
            v18 = (_QWORD *)(v17 + 8 * v3);
            v19 = (_QWORD *)(v17 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
            {
              *v18 = *v19;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100056644(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100054894(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100056DB0();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v21 = 8 * v10;
    *(_QWORD *)(v16[6] + v21) = a2;
    *(_QWORD *)(v16[7] + v21) = a1;
    v22 = v16[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v16[2] = v24;
      return swift_retain(a2);
    }
    goto LABEL_14;
  }
  sub_100055CC8(v13, a3 & 1);
  v19 = sub_100054894(a2);
  if ((v14 & 1) == (v20 & 1))
  {
    v10 = v19;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v25 = type metadata accessor for OSExtension(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
  __break(1u);
  return result;
}

uint64_t sub_100056794(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

void *sub_10005682C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_100005C88(&qword_1001593F0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain(v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000569CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005C88(&qword_1001593F8);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_bridgeObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100056BFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100005C88(&qword_100159400);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100056DB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_100005C88(&qword_1001593E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    swift_retain(v17);
    result = (void *)swift_retain(v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void (*sub_100056F58(_QWORD *a1, char a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v5[8] = sub_10004EF40(v5);
  v5[9] = sub_1000571CC((uint64_t)(v5 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_100056FD4;
}

void sub_100056FD4(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

void (*sub_100057010(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x68uLL);
  *a1 = v5;
  v6 = type metadata accessor for URL(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  v5[10] = v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v6);
  v5[11] = sub_10002AAA4(v5);
  v5[12] = sub_1000573B4(v5 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1000570D0;
}

void sub_1000570D0(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(*(_QWORD *)a1 + 32, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*sub_10005713C(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_10004EF40(v7);
  v7[10] = sub_10005750C(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10002972C;
}

unint64_t (*sub_1000571CC(uint64_t a1, char a2, char a3))(unint64_t result, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t (*result)(unint64_t, char);

  v4 = v3;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 24) = a2;
  v8 = *v3;
  v10 = sub_100054990(a2);
  *(_BYTE *)(a1 + 25) = v9 & 1;
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(_QWORD *)(a1 + 16) = v10;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v16 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v10);
LABEL_12:
        *(_QWORD *)a1 = v16;
        return sub_1000572DC;
      }
LABEL_11:
      v16 = 0;
      goto LABEL_12;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10005682C();
      goto LABEL_7;
    }
    sub_10005531C(v13, a3 & 1);
    v17 = sub_100054990(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      v10 = v17;
      *(_QWORD *)(a1 + 16) = v17;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (unint64_t (*)(unint64_t, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CollectionKind);
  __break(1u);
  return result;
}

unint64_t sub_1000572DC(unint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v10;

  v2 = *(_QWORD *)result;
  LOBYTE(v3) = *(_BYTE *)(result + 25);
  if ((a2 & 1) != 0)
  {
    if (!v2)
      goto LABEL_10;
    v4 = *(_QWORD *)(result + 16);
    v5 = **(_QWORD ***)(result + 8);
    if ((*(_BYTE *)(result + 25) & 1) != 0)
    {
LABEL_9:
      *(_QWORD *)(v5[7] + 8 * v4) = v2;
      return result;
    }
    v6 = *(_BYTE *)(result + 24);
    v5[(v4 >> 6) + 8] |= 1 << v4;
    *(_BYTE *)(v5[6] + v4) = v6;
    v3 = v5[7];
    *(_QWORD *)(v3 + 8 * v4) = v2;
    v7 = v5[2];
    v8 = __OFADD__(v7, 1);
    v2 = v7 + 1;
    if (!v8)
      goto LABEL_14;
    __break(1u);
  }
  if (!v2)
  {
LABEL_10:
    if ((v3 & 1) != 0)
      return sub_100055FF8(*(_QWORD *)(result + 16), **(_QWORD **)(result + 8));
    return result;
  }
  v4 = *(_QWORD *)(result + 16);
  v5 = **(_QWORD ***)(result + 8);
  if ((v3 & 1) != 0)
    goto LABEL_9;
  v9 = *(_BYTE *)(result + 24);
  v5[(v4 >> 6) + 8] |= 1 << v4;
  *(_BYTE *)(v5[6] + v4) = v9;
  *(_QWORD *)(v5[7] + 8 * v4) = v2;
  v10 = v5[2];
  v8 = __OFADD__(v10, 1);
  v2 = v10 + 1;
  if (!v8)
  {
LABEL_14:
    v5[2] = v2;
    return result;
  }
  __break(1u);
  return result;
}

void (*sub_1000573B4(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **);
  uint64_t v21;

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_100054924(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_1000574D0;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_1000569CC();
      goto LABEL_7;
    }
    sub_100055620(v14, a3 & 1);
    v18 = sub_100054924(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  v21 = type metadata accessor for URL(0);
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

void sub_1000574D0(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_100057638(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

void (*sub_10005750C(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_100005DE8(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_10002AA68;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_100056BFC();
      goto LABEL_7;
    }
    sub_1000559B4(v16, a4 & 1);
    v20 = sub_100005DE8(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100057638(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v10 = type metadata accessor for URL(0);
  __chkstk_darwin(v10);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  if (v15)
  {
    v16 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(v16[7] + 8 * a4) = v15;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 16))(v14, a5);
      sub_100056794(a4, (uint64_t)v14, v15, v16);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy(*(_QWORD *)(*a3 + 48) + *(_QWORD *)(v12 + 72) * a4, 1, v11);
    sub_1000561C0(a4, *a3);
  }
  return swift_bridgeObjectRetain(v15);
}

unint64_t *sub_100057724(uint64_t isStackAllocationSafe, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t *v10;
  void *v11;
  uint64_t v13;

  v4 = isStackAllocationSafe;
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = sub_1000579E4((unint64_t *)((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v4, (uint64_t)a2);
    if (v2)
      swift_willThrow(v10);
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v9, -1);
    bzero(v11, v9);
    a2 = sub_1000579E4((unint64_t *)v11, v8, v4, (uint64_t)a2);
    swift_slowDealloc(v11, -1, -1);
  }
  return a2;
}

uint64_t sub_100057888(uint64_t a1, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  char v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v4 = v2;
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (1 << v6) + 63;
  v9 = v8 >> 6;
  v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    v11 = a2((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1);
    if (v2)
      swift_willThrow(v11);
    else
      return v11;
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v10, -1);
    bzero(v12, v10);
    v4 = a2((char *)v12, v9, a1);
    swift_slowDealloc(v12, -1, -1);
  }
  return v4;
}

unint64_t *sub_1000579E4(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11)
      return (unint64_t *)sub_1000583C0(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        return (unint64_t *)sub_1000583C0(result, a2, v5, a3);
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          return (unint64_t *)sub_1000583C0(result, a2, v5, a3);
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    if (**(_QWORD **)(*(_QWORD *)(a3 + 48) + 8 * v13) == a4)
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1000583C0(result, a2, v5, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    return (unint64_t *)sub_1000583C0(result, a2, v5, a3);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      return (unint64_t *)sub_1000583C0(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100057B38(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t *v22;
  _QWORD v23[5];
  uint64_t v24;

  v22 = (unint64_t *)result;
  v4 = 0;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    v17 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v9)
      return sub_1000583C0(v22, a2, v24, a3);
    v18 = *(_QWORD *)(v5 + 8 * v17);
    ++v4;
    if (!v18)
    {
      v4 = v17 + 1;
      if (v17 + 1 >= v9)
        return sub_1000583C0(v22, a2, v24, a3);
      v18 = *(_QWORD *)(v5 + 8 * v4);
      if (!v18)
      {
        v4 = v17 + 2;
        if (v17 + 2 >= v9)
          return sub_1000583C0(v22, a2, v24, a3);
        v18 = *(_QWORD *)(v5 + 8 * v4);
        if (!v18)
          break;
      }
    }
LABEL_20:
    v8 = (v18 - 1) & v18;
    v11 = __clz(__rbit64(v18)) + (v4 << 6);
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v11);
    v13 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v11);
    v14 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v12 + 112);
    swift_retain(v12);
    v15 = swift_retain(v13);
    v14(v23, v15);
    v16 = v23[3];
    sub_1000124F8((uint64_t)v23, &qword_100157C78);
    swift_release(v12);
    result = swift_release(v13);
    if (v16)
    {
      *(unint64_t *)((char *)v22 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
        return sub_1000583C0(v22, a2, v24, a3);
      }
    }
  }
  v19 = v17 + 3;
  if (v19 >= v9)
    return sub_1000583C0(v22, a2, v24, a3);
  v18 = *(_QWORD *)(v5 + 8 * v19);
  if (v18)
  {
    v4 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v4 >= v9)
      return sub_1000583C0(v22, a2, v24, a3);
    v18 = *(_QWORD *)(v5 + 8 * v4);
    ++v19;
    if (v18)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100057D14(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;

  v20 = (unint64_t *)result;
  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v10)
      return sub_100058A28(v20, a2, v4, a3);
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        return sub_100058A28(v20, a2, v4, a3);
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          return sub_100058A28(v20, a2, v4, a3);
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v9 = (v16 - 1) & v16;
    v12 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_5:
    v13 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v12);
    type metadata accessor for RealizedInfo(0);
    swift_bridgeObjectRetain(v13);
    v14 = sub_1000D2610();
    result = swift_bridgeObjectRelease(v13);
    if (!v14)
    {
      *(unint64_t *)((char *)v20 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return sub_100058A28(v20, a2, v4, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v10)
    return sub_100058A28(v20, a2, v4, a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      return sub_100058A28(v20, a2, v4, a3);
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100057EC4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int64_t v43;

  v30 = a2;
  v31 = a1;
  v40 = sub_100005C88(&qword_100157C88);
  v4 = __chkstk_darwin(v40);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v36 = (char *)&v30 - v6;
  v35 = type metadata accessor for URL(0);
  v38 = *(_QWORD **)(v35 - 8);
  result = __chkstk_darwin(v35);
  v37 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v41 = (_QWORD *)a3;
  v10 = *(_QWORD *)(a3 + 64);
  v32 = 0;
  v33 = a3 + 64;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v34 = (unint64_t)(v11 + 63) >> 6;
  v15 = v37;
  v14 = v38;
  v16 = v35;
  v17 = (uint64_t)v36;
  v18 = v39;
  while (1)
  {
    if (v13)
    {
      v42 = (v13 - 1) & v13;
      v43 = v9;
      v19 = __clz(__rbit64(v13)) | (v9 << 6);
      goto LABEL_5;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v25 >= v34)
      return sub_100058CC8(v31, v30, v32, v41);
    v26 = *(_QWORD *)(v33 + 8 * v25);
    v27 = v9 + 1;
    if (!v26)
    {
      v27 = v9 + 2;
      if (v9 + 2 >= v34)
        return sub_100058CC8(v31, v30, v32, v41);
      v26 = *(_QWORD *)(v33 + 8 * v27);
      if (!v26)
      {
        v27 = v9 + 3;
        if (v9 + 3 >= v34)
          return sub_100058CC8(v31, v30, v32, v41);
        v26 = *(_QWORD *)(v33 + 8 * v27);
        if (!v26)
          break;
      }
    }
LABEL_20:
    v42 = (v26 - 1) & v26;
    v43 = v27;
    v19 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_5:
    v20 = v41;
    v21 = (void (*)(char *, unint64_t, uint64_t))v14[2];
    v21(v15, v41[6] + v14[9] * v19, v16);
    v22 = *(_QWORD *)(v20[7] + 8 * v19);
    v21((char *)v17, (unint64_t)v15, v16);
    v23 = *(int *)(v40 + 48);
    *(_QWORD *)(v17 + v23) = v22;
    v21(v18, v17, v16);
    *(_QWORD *)&v18[v23] = v22;
    type metadata accessor for RealizedInfo(0);
    swift_bridgeObjectRetain_n(v22, 2);
    LOBYTE(v21) = sub_1000D2610();
    sub_1000124F8(v17, &qword_100157C88);
    v24 = (void (*)(char *, uint64_t))v14[1];
    v24(v18, v16);
    swift_bridgeObjectRelease(v22);
    result = ((uint64_t (*)(char *, uint64_t))v24)(v15, v16);
    v9 = v43;
    v13 = v42;
    if ((v21 & 1) == 0)
    {
      *(unint64_t *)((char *)v31 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v32++, 1))
      {
        __break(1u);
        return sub_100058CC8(v31, v30, v32, v41);
      }
    }
  }
  v28 = v9 + 4;
  if (v9 + 4 >= v34)
    return sub_100058CC8(v31, v30, v32, v41);
  v26 = *(_QWORD *)(v33 + 8 * v28);
  if (v26)
  {
    v27 = v9 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v34)
      return sub_100058CC8(v31, v30, v32, v41);
    v26 = *(_QWORD *)(v33 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000581F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;
  uint64_t v21;

  v20 = (unint64_t *)result;
  v21 = 0;
  v4 = 0;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    v15 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v9)
      return sub_100059014(v20, a2, v21, a3);
    v16 = *(_QWORD *)(v5 + 8 * v15);
    ++v4;
    if (!v16)
    {
      v4 = v15 + 1;
      if (v15 + 1 >= v9)
        return sub_100059014(v20, a2, v21, a3);
      v16 = *(_QWORD *)(v5 + 8 * v4);
      if (!v16)
      {
        v4 = v15 + 2;
        if (v15 + 2 >= v9)
          return sub_100059014(v20, a2, v21, a3);
        v16 = *(_QWORD *)(v5 + 8 * v4);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v8 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v4 << 6);
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v11 + 8);
    v13 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v11);
    type metadata accessor for RealizedInfo(0);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v14 = sub_1000D2610();
    swift_bridgeObjectRelease(v12);
    result = swift_bridgeObjectRelease(v13);
    if (!v14)
    {
      *(unint64_t *)((char *)v20 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
        return sub_100059014(v20, a2, v21, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v9)
    return sub_100059014(v20, a2, v21, a3);
  v16 = *(_QWORD *)(v5 + 8 * v17);
  if (v16)
  {
    v4 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v4 >= v9)
      return sub_100059014(v20, a2, v21, a3);
    v16 = *(_QWORD *)(v5 + 8 * v4);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000583C0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  if (!a3)
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_100005C88(&qword_1001593E8);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v8 = result;
  v34 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  v36 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v37 = v10;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v34)
        return v8;
      v15 = a1[v14];
      v16 = v10 + 1;
      if (!v15)
      {
        v16 = v10 + 2;
        if (v10 + 2 >= v34)
          return v8;
        v15 = a1[v16];
        if (!v15)
        {
          v16 = v10 + 3;
          if (v10 + 3 >= v34)
            return v8;
          v15 = a1[v16];
          if (!v15)
          {
            v17 = v10 + 4;
            if (v10 + 4 >= v34)
              return v8;
            v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                v16 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v16 >= v34)
                  return v8;
                v15 = a1[v16];
                ++v17;
                if (v15)
                  goto LABEL_24;
              }
            }
            v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v37 = v16;
      v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    v18 = 8 * v13;
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + v18);
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    v21 = *(_QWORD *)(v8 + 40);
    v22 = type metadata accessor for OSExtension(0);
    v23 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
    swift_retain(v19);
    swift_retain(v20);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v21, v22, v23);
    v24 = -1 << *(_BYTE *)(v8 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v31 == -1);
      v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = 8 * v27;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v32) = v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v32) = v20;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v4 = v36;
    v10 = v37;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000586A0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (!a3)
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_100005C88(&qword_100159418);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v7 = result;
  if (a2 < 1)
    v8 = 0;
  else
    v8 = *a1;
  v9 = 0;
  v10 = result + 64;
  v40 = v4;
  v41 = result;
  while (1)
  {
    v48 = v5;
    if (v8)
    {
      v42 = (v8 - 1) & v8;
      v43 = v9;
      v11 = __clz(__rbit64(v8)) | (v9 << 6);
    }
    else
    {
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_40;
      if (v12 >= a2)
        return v7;
      v13 = a1[v12];
      v14 = v9 + 1;
      if (!v13)
      {
        v14 = v9 + 2;
        if (v9 + 2 >= a2)
          return v7;
        v13 = a1[v14];
        if (!v13)
        {
          v14 = v9 + 3;
          if (v9 + 3 >= a2)
            return v7;
          v13 = a1[v14];
          if (!v13)
          {
            v15 = v9 + 4;
            if (v9 + 4 >= a2)
              return v7;
            v13 = a1[v15];
            if (!v13)
            {
              while (1)
              {
                v14 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_41;
                if (v14 >= a2)
                  return v7;
                v13 = a1[v14];
                ++v15;
                if (v13)
                  goto LABEL_24;
              }
            }
            v14 = v9 + 4;
          }
        }
      }
LABEL_24:
      v42 = (v13 - 1) & v13;
      v43 = v14;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11);
    v17 = *(_QWORD *)(v4 + 56) + 80 * v11;
    v19 = *(_QWORD *)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 32);
    v22 = *(_QWORD *)(v17 + 40);
    v24 = *(_QWORD *)(v17 + 48);
    v23 = *(_QWORD *)(v17 + 56);
    v25 = *(_QWORD *)(v17 + 64);
    v26 = *(_BYTE *)(v17 + 72);
    v46 = *(_QWORD *)(v17 + 24);
    v47 = *(_QWORD *)(v7 + 40);
    v44 = v16;
    swift_retain(v16);
    v45 = v21;
    sub_1000515CC(v19, v18, v20, v46, v21, v22, v24, v23, v25, v26);
    v27 = type metadata accessor for OSExtension(0);
    v28 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v47, v27, v28);
    v7 = v41;
    v29 = -1 << *(_BYTE *)(v41 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v10 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v10 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    *(_QWORD *)(*(_QWORD *)(v41 + 48) + 8 * v32) = v44;
    v37 = *(_QWORD *)(v41 + 56) + 80 * v32;
    *(_QWORD *)v37 = v19;
    *(_QWORD *)(v37 + 8) = v18;
    *(_QWORD *)(v37 + 16) = v20;
    *(_QWORD *)(v37 + 24) = v46;
    *(_QWORD *)(v37 + 32) = v45;
    *(_QWORD *)(v37 + 40) = v22;
    *(_QWORD *)(v37 + 48) = v24;
    *(_QWORD *)(v37 + 56) = v23;
    *(_QWORD *)(v37 + 64) = v25;
    *(_BYTE *)(v37 + 72) = v26;
    ++*(_QWORD *)(v41 + 16);
    v5 = v48 - 1;
    if (__OFSUB__(v48, 1))
      break;
    v4 = v40;
    v8 = v42;
    v9 = v43;
    if (v48 == 1)
      return v7;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100058A28(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  if (!a3)
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_100005C88(&qword_1001593F0);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v34 = a1;
  v35 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v36 = v11;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v35)
        return v9;
      v16 = v34[v15];
      v17 = v11 + 1;
      if (!v16)
      {
        v17 = v11 + 2;
        if (v11 + 2 >= v35)
          return v9;
        v16 = v34[v17];
        if (!v16)
        {
          v17 = v11 + 3;
          if (v11 + 3 >= v35)
            return v9;
          v16 = v34[v17];
          if (!v16)
          {
            v18 = v11 + 4;
            if (v11 + 4 >= v35)
              return v9;
            v16 = v34[v18];
            if (!v16)
            {
              while (1)
              {
                v17 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_41;
                if (v17 >= v35)
                  return v9;
                v16 = v34[v17];
                ++v18;
                if (v16)
                  goto LABEL_24;
              }
            }
            v17 = v11 + 4;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v36 = v17;
      v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    v19 = *(_QWORD *)(v4 + 56);
    v20 = v4;
    v21 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v14);
    v22 = *(_QWORD *)(v19 + 8 * v14);
    v23 = *(_QWORD *)(v9 + 40);
    v24 = sub_10004F934();
    swift_bridgeObjectRetain(v22);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v23, &type metadata for CollectionKind, v24);
    v25 = -1 << *(_BYTE *)(v9 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v27);
      }
      while (v32 == -1);
      v28 = __clz(__rbit64(~v32)) + (v27 << 6);
    }
    *(_QWORD *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    *(_BYTE *)(*(_QWORD *)(v9 + 48) + v28) = v21;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v28) = v22;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v4 = v20;
    v11 = v36;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100058CC8(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  v47 = type metadata accessor for URL(0);
  v43 = *(_QWORD *)(v47 - 8);
  v8 = __chkstk_darwin(v47);
  v46 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v42 = (char *)&v38 - v10;
  if (!a3)
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (uint64_t)a4;
  }
  sub_100005C88(&qword_1001593F8);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v12 = result;
  v39 = a1;
  v40 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *a1;
  v14 = 0;
  v15 = result + 64;
  v41 = a4;
  v16 = v47;
  while (1)
  {
    if (v13)
    {
      v44 = (v13 - 1) & v13;
      v45 = v14;
      v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      v18 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v18 >= v40)
        return v12;
      v19 = v39[v18];
      v20 = v14 + 1;
      if (!v19)
      {
        v20 = v14 + 2;
        if (v14 + 2 >= v40)
          return v12;
        v19 = v39[v20];
        if (!v19)
        {
          v20 = v14 + 3;
          if (v14 + 3 >= v40)
            return v12;
          v19 = v39[v20];
          if (!v19)
          {
            v21 = v14 + 4;
            if (v14 + 4 >= v40)
              return v12;
            v19 = v39[v21];
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v20 >= v40)
                  return v12;
                v19 = v39[v20];
                ++v21;
                if (v19)
                  goto LABEL_24;
              }
            }
            v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      v44 = (v19 - 1) & v19;
      v45 = v20;
      v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    v22 = v42;
    v23 = v43;
    v24 = *(_QWORD *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, a4[6] + v24 * v17, v16);
    v25 = *(_QWORD *)(a4[7] + 8 * v17);
    v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v46, v22, v16);
    v27 = *(_QWORD *)(v12 + 40);
    v28 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    swift_bridgeObjectRetain(v25);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v16, v28);
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v15 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v15 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v12 + 48) + v32 * v24, v46, v47);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v32) = v25;
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v41;
    v13 = v44;
    v14 = v45;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_100059014(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v32;
  uint64_t v33;
  _QWORD v34[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_100005C88(&qword_100159400);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v33)
        return v9;
      v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v33)
          return v9;
        v16 = v32[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v33)
            return v9;
          v16 = v32[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v33)
              return v9;
            v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v33)
                  return v9;
                v16 = v32[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)(v34, *(_QWORD *)(v9 + 40));
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v34, v20, v19);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v25) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

char *sub_1000592AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88((uint64_t *)&unk_10015BB60);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000593A4(uint64_t a1)
{
  return sub_1000592AC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000593B8(void (*a1)(uint64_t *__return_ptr, uint64_t *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  BOOL v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_100005C88(&qword_1001593F0);
  result = static _DictionaryStorage.copy(original:)(a3);
  v6 = (_QWORD *)result;
  v7 = 0;
  v28 = a3;
  v10 = *(_QWORD *)(a3 + 64);
  v9 = a3 + 64;
  v8 = v10;
  v11 = 1 << *(_BYTE *)(v9 - 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v8;
  v25 = v9;
  v26 = (unint64_t)(v11 + 63) >> 6;
  v14 = result + 64;
  if ((v12 & v8) == 0)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v7 << 6); ; i = __clz(__rbit64(v18)) + (v7 << 6))
  {
    v20 = *(_BYTE *)(*(_QWORD *)(v28 + 48) + i);
    v21 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * i);
    v30 = v21;
    v22 = swift_bridgeObjectRetain(v21);
    a1(&v29, &v30, v22);
    result = swift_bridgeObjectRelease(v21);
    if (v3)
    {
      swift_release(v6);
      return (uint64_t)v6;
    }
    *(_QWORD *)(v14 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(v6[6] + i) = v20;
    *(_QWORD *)(v6[7] + 8 * i) = v29;
    v23 = v6[2];
    v17 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v17)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v6[2] = v24;
    if (v13)
      goto LABEL_4;
LABEL_5:
    v17 = __OFADD__(v7++, 1);
    if (v17)
      goto LABEL_27;
    if (v7 >= v26)
      return (uint64_t)v6;
    v18 = *(_QWORD *)(v25 + 8 * v7);
    if (!v18)
      break;
LABEL_15:
    v13 = (v18 - 1) & v18;
  }
  v19 = v7 + 1;
  if (v7 + 1 >= v26)
    return (uint64_t)v6;
  v18 = *(_QWORD *)(v25 + 8 * v19);
  if (v18)
    goto LABEL_14;
  v19 = v7 + 2;
  if (v7 + 2 >= v26)
    return (uint64_t)v6;
  v18 = *(_QWORD *)(v25 + 8 * v19);
  if (v18)
    goto LABEL_14;
  v19 = v7 + 3;
  if (v7 + 3 >= v26)
    return (uint64_t)v6;
  v18 = *(_QWORD *)(v25 + 8 * v19);
  if (v18)
  {
LABEL_14:
    v7 = v19;
    goto LABEL_15;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v26)
      return (uint64_t)v6;
    v18 = *(_QWORD *)(v25 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000595D4(void (*a1)(uint64_t *__return_ptr, uint64_t *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t i;
  BOOL v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(uint64_t *__return_ptr, uint64_t *, __n128);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v41 = a1;
  v42 = a2;
  v4 = type metadata accessor for URL(0);
  v45 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v40 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v39 = (char *)&v35 - v7;
  sub_100005C88(&qword_1001593F8);
  result = static _DictionaryStorage.copy(original:)(a3);
  v9 = v4;
  v10 = result;
  v11 = 0;
  v43 = a3;
  v44 = result;
  v14 = *(_QWORD *)(a3 + 64);
  v13 = a3 + 64;
  v12 = v14;
  v15 = 1 << *(_BYTE *)(v13 - 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v12;
  v36 = v13;
  v37 = (unint64_t)(v15 + 63) >> 6;
  v38 = result + 64;
  v19 = v39;
  v18 = v40;
  if ((v16 & v12) == 0)
    goto LABEL_5;
LABEL_4:
  v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v46 = v11;
  for (i = v20 | (v11 << 6); ; i = __clz(__rbit64(v24)) + (v23 << 6))
  {
    v26 = v43;
    v27 = v45;
    v28 = *(_QWORD *)(v45 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v19, *(_QWORD *)(v43 + 48) + v28, v9);
    v49 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * i);
    v29 = v49;
    v30 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v30(v18, v19, v9);
    v31 = swift_bridgeObjectRetain(v29);
    v32 = v47;
    v41(&v48, &v49, v31);
    if (v32)
    {
      v10 = v44;
      swift_release(v44);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v9);
      swift_bridgeObjectRelease(v49);
      return v10;
    }
    v47 = 0;
    swift_bridgeObjectRelease(v29);
    *(_QWORD *)(v38 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v10 = v44;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v30)(*(_QWORD *)(v44 + 48) + v28, v18, v9);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * i) = v48;
    v33 = *(_QWORD *)(v10 + 16);
    v22 = __OFADD__(v33, 1);
    v34 = v33 + 1;
    if (v22)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    *(_QWORD *)(v10 + 16) = v34;
    v11 = v46;
    if (v17)
      goto LABEL_4;
LABEL_5:
    v22 = __OFADD__(v11, 1);
    v23 = v11 + 1;
    if (v22)
      goto LABEL_28;
    if (v23 >= v37)
      return v10;
    v24 = *(_QWORD *)(v36 + 8 * v23);
    if (!v24)
      break;
LABEL_15:
    v17 = (v24 - 1) & v24;
    v46 = v23;
  }
  v25 = v23 + 1;
  if (v23 + 1 >= v37)
    return v10;
  v24 = *(_QWORD *)(v36 + 8 * v25);
  if (v24)
    goto LABEL_14;
  v25 = v23 + 2;
  if (v23 + 2 >= v37)
    return v10;
  v24 = *(_QWORD *)(v36 + 8 * v25);
  if (v24)
    goto LABEL_14;
  v25 = v23 + 3;
  if (v23 + 3 >= v37)
    return v10;
  v24 = *(_QWORD *)(v36 + 8 * v25);
  if (v24)
  {
LABEL_14:
    v23 = v25;
    goto LABEL_15;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v37)
      return v44;
    v24 = *(_QWORD *)(v36 + 8 * v23);
    ++v25;
    if (v24)
      goto LABEL_15;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000598E4(void (*a1)(uint64_t *__return_ptr, uint64_t *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t i;
  BOOL v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_100005C88(&qword_100159400);
  result = static _DictionaryStorage.copy(original:)(a3);
  v6 = (_QWORD *)result;
  v7 = 0;
  v31 = a3;
  v10 = *(_QWORD *)(a3 + 64);
  v9 = a3 + 64;
  v8 = v10;
  v11 = 1 << *(_BYTE *)(v9 - 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v8;
  v27 = v9;
  v28 = (unint64_t)(v11 + 63) >> 6;
  v29 = result + 64;
  if ((v12 & v8) == 0)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(v31 + 48) + 16 * i);
    v20 = *v19;
    v21 = v19[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * i);
    v22 = v33;
    swift_bridgeObjectRetain(v21);
    v23 = swift_bridgeObjectRetain(v22);
    a1(&v32, &v33, v23);
    result = swift_bridgeObjectRelease(v22);
    if (v3)
    {
      swift_bridgeObjectRelease(v21);
      swift_release(v6);
      return (uint64_t)v6;
    }
    *(_QWORD *)(v29 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v24 = (_QWORD *)(v6[6] + 16 * i);
    *v24 = v20;
    v24[1] = v21;
    *(_QWORD *)(v6[7] + 8 * i) = v32;
    v25 = v6[2];
    v16 = __OFADD__(v25, 1);
    v26 = v25 + 1;
    if (v16)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v6[2] = v26;
    if (v13)
      goto LABEL_4;
LABEL_5:
    v16 = __OFADD__(v7++, 1);
    if (v16)
      goto LABEL_27;
    if (v7 >= v28)
      return (uint64_t)v6;
    v17 = *(_QWORD *)(v27 + 8 * v7);
    if (!v17)
      break;
LABEL_15:
    v13 = (v17 - 1) & v17;
  }
  v18 = v7 + 1;
  if (v7 + 1 >= v28)
    return (uint64_t)v6;
  v17 = *(_QWORD *)(v27 + 8 * v18);
  if (v17)
    goto LABEL_14;
  v18 = v7 + 2;
  if (v7 + 2 >= v28)
    return (uint64_t)v6;
  v17 = *(_QWORD *)(v27 + 8 * v18);
  if (v17)
    goto LABEL_14;
  v18 = v7 + 3;
  if (v7 + 3 >= v28)
    return (uint64_t)v6;
  v17 = *(_QWORD *)(v27 + 8 * v18);
  if (v17)
  {
LABEL_14:
    v7 = v18;
    goto LABEL_15;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v28)
      return (uint64_t)v6;
    v17 = *(_QWORD *)(v27 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100059B20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

uint64_t sub_100059B88(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a4;
  v6 = a2;
  v7 = (_QWORD *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v8 = a4;
    else
      v8 = a4 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaDictionary.makeIterator()(v8);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v4 = result | 0x8000000000000000;
    if (v6)
      goto LABEL_6;
LABEL_39:
    v12 = 0;
    a3 = 0;
LABEL_48:
    *v7 = v4;
    v7[1] = v9;
    v7[2] = v10;
    v7[3] = v12;
    v7[4] = v11;
    return a3;
  }
  v25 = -1 << *(_BYTE *)(a4 + 32);
  v9 = a4 + 64;
  v26 = ~v25;
  v27 = -v25;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  else
    v28 = -1;
  v11 = v28 & *(_QWORD *)(a4 + 64);
  v10 = v26;
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v12 = 0;
    goto LABEL_48;
  }
  if (a3 < 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v29 = v10;
  v30 = v7;
  v12 = 0;
  v13 = 0;
  v31 = (unint64_t)(v10 + 64) >> 6;
  while ((v4 & 0x8000000000000000) != 0)
  {
    v19 = v9;
    v20 = __CocoaDictionary.Iterator.next()(result);
    if (!v20)
    {
      a3 = v13;
LABEL_47:
      v10 = v29;
      v7 = v30;
      goto LABEL_48;
    }
    v22 = v21;
    swift_unknownObjectRelease(v20);
    v32 = v22;
    v23 = type metadata accessor for RealizedInfo(0);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v16 = v33;
    result = swift_unknownObjectRelease(v22);
    v9 = v19;
    if (!v16)
      goto LABEL_46;
LABEL_11:
    ++v13;
    *v6++ = v16;
    if (v13 == a3)
      goto LABEL_47;
  }
  if (v11)
  {
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v15 = v14 | (v12 << 6);
    goto LABEL_10;
  }
  v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_50;
  }
  if (v17 >= v31)
    goto LABEL_42;
  v18 = *(_QWORD *)(v9 + 8 * v17);
  if (v18)
    goto LABEL_26;
  v12 += 2;
  if (v17 + 1 >= v31)
  {
    v11 = 0;
    v12 = v17;
    goto LABEL_46;
  }
  v18 = *(_QWORD *)(v9 + 8 * v12);
  if (v18)
  {
LABEL_19:
    v17 = v12;
LABEL_26:
    v11 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
LABEL_10:
    v16 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15);
    result = swift_retain(v16);
    if (!v16)
      goto LABEL_46;
    goto LABEL_11;
  }
  v24 = v17 + 2;
  if (v17 + 2 >= v31)
    goto LABEL_42;
  v18 = *(_QWORD *)(v9 + 8 * v24);
  if (v18)
  {
LABEL_25:
    v17 = v24;
    goto LABEL_26;
  }
  v12 = v17 + 3;
  if (v17 + 3 >= v31)
  {
    v11 = 0;
    v12 = v17 + 2;
    goto LABEL_46;
  }
  v18 = *(_QWORD *)(v9 + 8 * v12);
  if (v18)
    goto LABEL_19;
  v24 = v17 + 4;
  if (v17 + 4 >= v31)
  {
LABEL_42:
    v11 = 0;
LABEL_46:
    a3 = v13;
    goto LABEL_47;
  }
  v18 = *(_QWORD *)(v9 + 8 * v24);
  if (v18)
    goto LABEL_25;
  while (1)
  {
    v17 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v17 >= v31)
    {
      v11 = 0;
      v12 = v31 - 1;
      goto LABEL_46;
    }
    v18 = *(_QWORD *)(v9 + 8 * v17);
    ++v24;
    if (v18)
      goto LABEL_26;
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_100059E48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v31 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(a4 + 56) + 80 * v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    v25 = *(_QWORD *)(v20 + 32);
    v26 = *(_QWORD *)(v20 + 40);
    v27 = *(_QWORD *)(v20 + 48);
    v28 = *(_QWORD *)(v20 + 56);
    v29 = *(_QWORD *)(v20 + 64);
    v30 = *(_BYTE *)(v20 + 72);
    *(_QWORD *)v11 = v21;
    *(_QWORD *)(v11 + 8) = v22;
    *(_QWORD *)(v11 + 16) = v23;
    *(_QWORD *)(v11 + 24) = v24;
    *(_QWORD *)(v11 + 32) = v25;
    *(_QWORD *)(v11 + 40) = v26;
    *(_QWORD *)(v11 + 48) = v27;
    *(_QWORD *)(v11 + 56) = v28;
    *(_QWORD *)(v11 + 64) = v29;
    *(_BYTE *)(v11 + 72) = v30;
    if (v13 == v10)
    {
      sub_1000515CC(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
      goto LABEL_38;
    }
    v11 += 80;
    result = sub_1000515CC(v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v31;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10005A084(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 8 * a2);
    v5 = *(_QWORD *)(a5 + 56) + 80 * a2;
    v6 = *(_QWORD *)v5;
    v7 = *(_QWORD *)(v5 + 8);
    v8 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    v10 = *(_QWORD *)(v5 + 32);
    v11 = *(_QWORD *)(v5 + 40);
    v12 = *(_QWORD *)(v5 + 48);
    v13 = *(_QWORD *)(v5 + 56);
    v14 = *(_QWORD *)(v5 + 64);
    v15 = *(_BYTE *)(v5 + 72);
    *(_QWORD *)result = *(_QWORD *)v5;
    *(_QWORD *)(result + 8) = v7;
    *(_QWORD *)(result + 16) = v8;
    *(_QWORD *)(result + 24) = v9;
    *(_QWORD *)(result + 32) = v10;
    *(_QWORD *)(result + 40) = v11;
    *(_QWORD *)(result + 48) = v12;
    *(_QWORD *)(result + 56) = v13;
    *(_QWORD *)(result + 64) = v14;
    *(_BYTE *)(result + 72) = v15;
    swift_retain(v16);
    sub_1000515CC(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
    return v16;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10005A188(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a3;
  v7 = a3[1];
  v8 = a3[2];
  v9 = a3[3];
  v10 = a3[4];
  v11 = a3[5];
  v12 = a3[6];
  swift_bridgeObjectRetain(*a3);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  LOBYTE(a4) = sub_10005C410(a2, a4);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  return a4 & 1;
}

void **sub_10005A25C(unint64_t a1, uint64_t (*a2)(uint64_t), void **a3)
{
  void **v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  void **v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void **v24;

  v7 = a1;
  v24 = (void **)&_swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v9 = 0;
    v22 = v7 & 0xFFFFFFFFFFFFFF8;
    v23 = v7 & 0xC000000000000001;
    v21 = v7;
    while (1)
    {
      if (v23)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
        v11 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_14:
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease(v7);
          swift_release(v10);
          swift_release(v24);
          return v3;
        }
        goto LABEL_9;
      }
      if (v9 >= *(_QWORD *)(v22 + 16))
        break;
      v10 = *(_QWORD *)(v7 + 8 * v9 + 32);
      swift_retain(v10);
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_14;
LABEL_9:
      v3 = a3;
      v12 = a2(v10);
      if (v4)
        goto LABEL_15;
      if ((v12 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v13 = i;
        v14 = a2;
        v15 = a3;
        v16 = v24[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
        v17 = v16;
        a3 = v15;
        a2 = v14;
        i = v13;
        v7 = v21;
        v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v10);
        v3 = (void **)&v24;
        specialized ContiguousArray._endMutation()(v18);
      }
      else
      {
        swift_release(v10);
      }
      ++v9;
      if (v11 == i)
      {
        v3 = v24;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_18:
    if (v7 < 0)
      v19 = v7;
    else
      v19 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  v3 = (void **)&_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v7);
  return v3;
}

uint64_t sub_10005A40C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = *a1;
  v6 = swift_bridgeObjectRetain(*a1);
  v7 = sub_10005AD48(v6, a2);
  v9 = v8;
  v10 = v2;
  swift_bridgeObjectRelease(v5);
  if (v2)
    return v7;
  if ((v9 & 1) == 0)
  {
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_57;
    v9 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_58:
      if (v9 < 0)
        v31 = v9;
      else
        v31 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v9);
      v32 = _CocoaArrayWrapper.endIndex.getter(v31);
      swift_bridgeObjectRelease(v9);
      if (v11 != v32)
        goto LABEL_6;
    }
    else if (v11 != *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      v9 = type metadata accessor for OSExtension(0);
      v12 = *(_QWORD *)(a2 + 24);
      v11 = v7 + 5;
      v35 = v10;
      while (1)
      {
        v13 = v11 - 4;
        v14 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v14);
        }
        else
        {
          if ((v13 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          if (v13 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_48;
          v15 = *(_QWORD *)(v14 + 8 * v11);
          swift_retain(v15);
        }
        a2 = sub_1000F66F8(*(_QWORD *)(v15 + 24), v12);
        swift_release(v15);
        if ((a2 & 1) == 0)
          break;
LABEL_32:
        v26 = v11 - 3;
        if (__OFADD__(v13, 1))
          goto LABEL_49;
        a2 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (a2 < 0)
            v28 = *a1;
          else
            v28 = a2 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*a1);
          v27 = _CocoaArrayWrapper.endIndex.getter(v28);
          swift_bridgeObjectRelease(a2);
        }
        else
        {
          v27 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        ++v11;
        if (v26 == v27)
          return v7;
      }
      if (v13 == v7)
      {
LABEL_31:
        if (__OFADD__(v7++, 1))
          goto LABEL_50;
        goto LABEL_32;
      }
      a2 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
        a2 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v13 & 0x8000000000000000) != 0)
            goto LABEL_53;
          if (v13 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_54;
          v17 = *(_QWORD *)(a2 + 8 * v11);
          swift_retain(v17);
          goto LABEL_20;
        }
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_51;
        if (v7 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_52;
        v16 = *(_QWORD *)(a2 + 8 * v7 + 32);
        swift_retain(v16);
        if ((a2 & 0xC000000000000001) == 0)
          goto LABEL_17;
      }
      v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a2);
      a2 = *a1;
LABEL_20:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(a2);
      *a1 = a2;
      if (!isUniquelyReferenced_nonNull_bridgeObject || a2 < 0 || (a2 & 0x4000000000000000) != 0)
      {
        a2 = sub_100059B20(a2);
        *a1 = a2;
      }
      v19 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
      *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v17;
      v20 = swift_release(v19);
      specialized Array._endMutation()(v20);
      a2 = *a1;
      v21 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = a2;
      if (!v21 || a2 < 0 || (a2 & 0x4000000000000000) != 0)
      {
        a2 = sub_100059B20(a2);
        *a1 = a2;
      }
      v10 = v35;
      if ((v13 & 0x8000000000000000) != 0)
        goto LABEL_55;
      v22 = a2 & 0xFFFFFFFFFFFFFF8;
      if (v13 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_56;
      v23 = *(_QWORD *)(v22 + 8 * v11);
      *(_QWORD *)(v22 + 8 * v11) = v16;
      v24 = swift_release(v23);
      a2 = (uint64_t)a1;
      specialized Array._endMutation()(v24);
      goto LABEL_31;
    }
    return v7;
  }
  v29 = *a1;
  if (!((unint64_t)*a1 >> 62))
    return *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v29 < 0)
    v33 = *a1;
  else
    v33 = v29 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*a1);
  v34 = _CocoaArrayWrapper.endIndex.getter(v33);
  swift_bridgeObjectRelease(v29);
  return v34;
}

_QWORD *sub_10005A758(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  swift_bridgeObjectRetain(*a1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_10005A7D4(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  unint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  int64_t v38;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v35 = (unint64_t *)result;
  v36 = 0;
  v5 = 0;
  v8 = a3[8];
  v6 = a3 + 8;
  v7 = v8;
  v9 = 1 << *((_BYTE *)v6 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v7;
  v37 = v6;
  v38 = (unint64_t)(v9 + 63) >> 6;
  while (v11)
  {
    v43 = (v11 - 1) & v11;
    v44 = v5;
    v13 = __clz(__rbit64(v11)) | (v5 << 6);
LABEL_22:
    v18 = *(_QWORD *)(a3[6] + 8 * v13);
    v42 = v13;
    v19 = a3[7] + 80 * v13;
    v21 = *(_QWORD *)v19;
    v20 = *(_QWORD *)(v19 + 8);
    v23 = *(_QWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 40);
    v47 = *(_QWORD *)(v19 + 32);
    v25 = *(_QWORD *)(v19 + 56);
    v26 = *(_QWORD *)(v19 + 64);
    v27 = *(_BYTE *)(v19 + 72);
    v45 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 144);
    v46 = *(_QWORD *)(v19 + 48);
    swift_retain(v18);
    v49 = v22;
    v48 = v25;
    v28 = sub_1000515CC(v21, v20, v23, v22, v47, v24, v46, v25, v26, v27);
    v29 = v45(v28);
    if (v29 == a4 && v30 == a5)
    {
      swift_bridgeObjectRelease(a5);
      sub_1000391DC(v21, v20, v23, v22, v47, v24, v46, v25, v26, v27);
      result = swift_release(v18);
      v11 = v43;
      v5 = v44;
LABEL_5:
      *(unint64_t *)((char *)v35 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
      if (__OFADD__(v36++, 1))
        goto LABEL_31;
    }
    else
    {
      v32 = v30;
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, a4, a5, 0);
      swift_bridgeObjectRelease(v32);
      sub_1000391DC(v21, v20, v23, v49, v47, v24, v46, v48, v26, v27);
      result = swift_release(v18);
      v11 = v43;
      v5 = v44;
      if ((v33 & 1) != 0)
        goto LABEL_5;
    }
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v14 >= v38)
    return sub_1000586A0(v35, a2, v36, (uint64_t)a3);
  v15 = v37[v14];
  v16 = v5 + 1;
  if (v15)
    goto LABEL_21;
  v16 = v5 + 2;
  if (v5 + 2 >= v38)
    return sub_1000586A0(v35, a2, v36, (uint64_t)a3);
  v15 = v37[v16];
  if (v15)
    goto LABEL_21;
  v16 = v5 + 3;
  if (v5 + 3 >= v38)
    return sub_1000586A0(v35, a2, v36, (uint64_t)a3);
  v15 = v37[v16];
  if (v15)
  {
LABEL_21:
    v43 = (v15 - 1) & v15;
    v44 = v16;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    goto LABEL_22;
  }
  v17 = v5 + 4;
  if (v5 + 4 >= v38)
    return sub_1000586A0(v35, a2, v36, (uint64_t)a3);
  v15 = v37[v17];
  if (v15)
  {
    v16 = v5 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v38)
      return sub_1000586A0(v35, a2, v36, (uint64_t)a3);
    v15 = v37[v16];
    ++v17;
    if (v15)
      goto LABEL_21;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10005AACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a3, 2);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v10, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain(a3);
    v12 = sub_10005A7D4((uint64_t)&v16 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, (_QWORD *)a1, a2, a3);
    v13 = swift_bridgeObjectRelease(a3);
    if (v3)
      swift_willThrow(v13);
    swift_bridgeObjectRelease_n(a3, 2);
  }
  else
  {
    v14 = (void *)swift_slowAlloc(v10, -1);
    bzero(v14, v10);
    swift_bridgeObjectRetain(a3);
    v12 = sub_10005A7D4((uint64_t)v14, v9, (_QWORD *)a1, a2, a3);
    swift_bridgeObjectRelease(a3);
    swift_slowDealloc(v14, -1, -1);
    swift_bridgeObjectRelease_n(a3, 2);
  }
  return v12;
}

uint64_t type metadata accessor for LookupSpec(uint64_t a1)
{
  uint64_t result;

  result = qword_10015FB50;
  if (!qword_10015FB50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LookupSpec);
  return result;
}

uint64_t sub_10005ACC8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LookupSpec(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10005AD04()
{
  unint64_t result;

  result = qword_100159340;
  if (!qword_100159340)
  {
    result = swift_getWitnessTable(&unk_100110BA8, &type metadata for LookupError);
    atomic_store(result, (unint64_t *)&qword_100159340);
  }
  return result;
}

uint64_t sub_10005AD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
    return 0;
  }
LABEL_13:
  if (a1 < 0)
    v9 = a1;
  else
    v9 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v4 = _CocoaArrayWrapper.endIndex.getter(v9);
  swift_bridgeObjectRelease(a1);
  if (!v4)
    return 0;
LABEL_3:
  type metadata accessor for OSExtension(0);
  v5 = 0;
  a2 = *(_QWORD *)(a2 + 24);
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
      swift_retain(v6);
    }
    v7 = sub_1000F66F8(*(_QWORD *)(v6 + 24), a2);
    swift_release(v6);
    if ((v7 & 1) != 0)
      return v5;
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v8 == v4)
      return 0;
  }
}

uint64_t sub_10005AE60(uint64_t a1, uint64_t (*a2)(void))
{
  sub_10005AEC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88), a2);
  return a1;
}

uint64_t sub_10005AEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t (*a13)(void))
{
  if ((a12 & 1) != 0)
    return sub_10005171C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  else
    return a13();
}

void *sub_10005AEE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  if (v9 < v3)
    goto LABEL_33;
LABEL_4:
  v7 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v7))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v9 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v7;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_41:
    __break(1u);
LABEL_42:
    if (v9 < 0)
      v29 = v9;
    else
      v29 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v14 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v9);
    v9 = *v4;
    goto LABEL_15;
  }
LABEL_36:
  if (v9 < 0)
    v28 = v9;
  else
    v28 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v9);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_41;
LABEL_8:
  v9 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v9;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v13 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v9 >> 62)
    goto LABEL_42;
  v14 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v9);
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v9);
  v16 = *v4;
  *v4 = v15;
  swift_bridgeObjectRelease(v16);
  v13 = *v4 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v17 = v13 + 32;
  v18 = (char *)(v13 + 32 + 8 * v5);
  v19 = v6(0);
  result = (void *)swift_arrayDestroy(v18, v7, v19);
  if (!v8)
    return (void *)specialized Array._endMutation()(result);
  v21 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    v23 = v22 - v3;
    if (!__OFSUB__(v22, v3))
      goto LABEL_21;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v21 < 0)
    v30 = *v4;
  else
    v30 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  result = (void *)swift_bridgeObjectRelease(v21);
  v23 = v31 - v3;
  if (__OFSUB__(v31, v3))
    goto LABEL_51;
LABEL_21:
  v24 = (char *)(v17 + 8 * v3);
  if (v5 != v3 || v18 >= &v24[8 * v23])
    result = memmove(v18, v24, 8 * v23);
  v3 = *v4;
  if ((unint64_t)*v4 >> 62)
  {
LABEL_52:
    if (v3 < 0)
      v32 = v3;
    else
      v32 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v33 = _CocoaArrayWrapper.endIndex.getter(v32);
    result = (void *)swift_bridgeObjectRelease(v3);
    v26 = v33 + v8;
    if (!__OFADD__(v33, v8))
      goto LABEL_26;
    goto LABEL_57;
  }
  v25 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v26 = v25 + v8;
  if (!__OFADD__(v25, v8))
  {
LABEL_26:
    *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v26;
    return (void *)specialized Array._endMutation()(result);
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t sub_10005B18C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LookupSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005B1D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;

  v20 = (unint64_t *)result;
  v21 = 0;
  v6 = 0;
  v22 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v23 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v23)
      return sub_1000583C0(v20, a2, v21, a3);
    v16 = *(_QWORD *)(v22 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v23)
        return sub_1000583C0(v20, a2, v21, a3);
      v16 = *(_QWORD *)(v22 + 8 * v6);
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v23)
          return sub_1000583C0(v20, a2, v21, a3);
        v16 = *(_QWORD *)(v22 + 8 * v6);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v9 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v11);
    v13 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v11);
    v24 = v12;
    swift_retain(v12);
    swift_retain(v13);
    v14 = a4(&v24, v13);
    swift_release(v12);
    result = swift_release(v13);
    if ((v14 & 1) != 0)
    {
      *(unint64_t *)((char *)v20 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
        return sub_1000583C0(v20, a2, v21, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v23)
    return sub_1000583C0(v20, a2, v21, a3);
  v16 = *(_QWORD *)(v22 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v23)
      return sub_1000583C0(v20, a2, v21, a3);
    v16 = *(_QWORD *)(v22 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10005B3D0(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t *, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v6 = isStackAllocationSafe;
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    v12 = sub_10005B1D0((uint64_t)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v10, v6, a2);
    if (v3)
      swift_willThrow(v12);
    else
      return v12;
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v11, -1);
    bzero(v13, v11);
    a3 = sub_10005B1D0((uint64_t)v13, v10, v6, a2);
    swift_slowDealloc(v13, -1, -1);
  }
  return a3;
}

uint64_t sub_10005B540(uint64_t a1, uint64_t (*a2)(uint64_t *, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, uint64_t);
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t *, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = &_swiftEmptyDictionarySingleton;
    v45 = &_swiftEmptyDictionarySingleton;
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v7 = __CocoaDictionary.makeIterator()(a1);
    v8 = v7 & 0x7FFFFFFFFFFFFFFFLL;
    v9 = __CocoaDictionary.Iterator.next()(v7);
    if (v9)
    {
      v11 = v9;
      v12 = v10;
      v40 = v7;
      v13 = type metadata accessor for OSExtension(0);
      v41 = v13;
      do
      {
        v42 = v11;
        swift_dynamicCast(&v43, &v42, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
        v42 = v12;
        v16 = type metadata accessor for RealizedInfo(0);
        swift_dynamicCast(&v44, &v42, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
        v17 = v43;
        v18 = v44;
        v42 = v43;
        swift_retain(v43);
        swift_retain(v18);
        v19 = v4(&v42, v18);
        swift_release(v17);
        swift_release(v18);
        if ((v19 & 1) != 0)
        {
          v20 = v8;
          v21 = v4;
          v22 = v3;
          v23 = v45;
          v24 = v45[2];
          if (v45[3] <= v24)
          {
            v25 = v24 + 1;
            swift_retain(v17);
            swift_retain(v18);
            sub_100055CC8(v25, 1);
            v23 = v45;
          }
          else
          {
            swift_retain(v17);
            swift_retain(v18);
          }
          v42 = v17;
          v26 = v23[5];
          v27 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
          v28 = v26;
          v13 = v41;
          result = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v41, v27);
          v30 = v23 + 8;
          v31 = -1 << *((_BYTE *)v23 + 32);
          v32 = result & ~v31;
          v33 = v32 >> 6;
          if (((-1 << v32) & ~v23[(v32 >> 6) + 8]) != 0)
          {
            v34 = __clz(__rbit64((-1 << v32) & ~v23[(v32 >> 6) + 8])) | v32 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v35 = 0;
            v36 = (unint64_t)(63 - v31) >> 6;
            do
            {
              if (++v33 == v36 && (v35 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v37 = v33 == v36;
              if (v33 == v36)
                v33 = 0;
              v35 |= v37;
              v38 = v30[v33];
            }
            while (v38 == -1);
            v34 = __clz(__rbit64(~v38)) + (v33 << 6);
          }
          *(_QWORD *)((char *)v30 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
          v39 = 8 * v34;
          *(_QWORD *)(v23[6] + v39) = v17;
          *(_QWORD *)(v23[7] + v39) = v18;
          ++v23[2];
          swift_release(v18);
          v14 = swift_release(v17);
          v3 = v22;
          v4 = v21;
          v8 = v20;
        }
        else
        {
          swift_release(v18);
          v14 = swift_release(v17);
        }
        v11 = __CocoaDictionary.Iterator.next()(v14);
        v12 = v15;
      }
      while (v11);
      v6 = v45;
      v7 = v40;
    }
    v43 = 0;
    v44 = 0;
    sub_100005DE0(v7 | 0x8000000000000000);
  }
  else
  {
    v6 = (_QWORD *)sub_10005B3D0(a1, a2, a3);
    swift_bridgeObjectRelease(v5);
  }
  return (uint64_t)v6;
}

void **sub_10005B87C@<X0>(unint64_t *a1@<X0>, void ***a2@<X8>)
{
  return sub_10005B890(a1, a2);
}

void **sub_10005B890@<X0>(unint64_t *a1@<X0>, void ***a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  void **result;
  void *v6;
  __int128 v7;

  v4 = *a1;
  v7 = *(_OWORD *)(v2 + 16);
  swift_bridgeObjectRetain(v4);
  result = sub_1000520D8(sub_10005C638, &v6, v4);
  *a2 = result;
  return result;
}

uint64_t sub_10005B8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10005A188(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD **)(v2 + 24));
}

uint64_t *sub_10005B8E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain(v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_10005B9C0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    v4 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else if (!(_DWORD)result)
  {
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  }
  return result;
}

_QWORD *sub_10005BA20(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain(v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_QWORD *sub_10005BAD0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_10005ACC8((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void *sub_10005BB98(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10005BC24(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10005ACC8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for URL(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10005BCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_10005BCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_10005BCDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10005BCEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100110C38;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100110C50;
    v4[3] = (char *)&value witness table for Builtin.NativeObject.Type + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 4, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10005BD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11 < 0)
    return sub_1000515CC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  sub_1000515CC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return swift_retain(a11);
}

uint64_t destroy for LookupError(uint64_t *a1)
{
  return sub_10005171C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
}

uint64_t *initializeWithCopy for LookupError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  sub_10005BD74(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  return a1;
}

uint64_t assignWithCopy for LookupError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v23 = a2[9];
  v24 = a2[10];
  sub_10005BD74(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, v24);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 80) = v24;
  sub_10005171C(v12, v13, v14, v15, v16, v17, v18, v19, v20, SBYTE8(v20), v21);
  return a1;
}

__n128 initializeWithTake for LookupError(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for LookupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v3;
  sub_10005171C(v4, v6, v5, v7, v8, v9, v10, v11, v12, SBYTE8(v12), v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupError(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72) >> 7;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for LookupError(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = (unint64_t)-a2 << 7;
      *(_QWORD *)(a1 + 80) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10005C0E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) >> 63;
}

uint64_t sub_10005C0EC(uint64_t result)
{
  *(_QWORD *)(result + 80) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_10005C0FC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 80) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *(_QWORD *)(result + 72) &= 0x7FuLL;
  *(_QWORD *)(result + 80) = v2;
  return result;
}

ValueMetadata *type metadata accessor for LookupError()
{
  return &type metadata for LookupError;
}

uint64_t destroy for LookupTable(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t *initializeWithCopy for LookupTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  v9 = a2[6];
  a1[6] = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t *assignWithCopy for LookupTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[4];
  v13 = a1[4];
  a1[4] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a2[5];
  v15 = a1[5];
  a1[5] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a2[6];
  v17 = a1[6];
  a1[6] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

__n128 initializeWithTake for OSExtensionCodable(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for LookupTable(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a1[4]);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  v7 = a1[6];
  a1[6] = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupTable(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LookupTable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LookupTable()
{
  return &type metadata for LookupTable;
}

uint64_t sub_10005C410(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v30[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v30[-1] - v12;
  sub_100019E1C(a1 + OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL, (uint64_t)&v30[-1] - v12, (uint64_t *)&unk_10015BA60);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v15 = v14(v13, 1, v4);
  if ((_DWORD)v15 != 1)
  {
    v18 = URL.path.getter(v15);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_6:
    v24 = a2[3];
    v25 = a2[4];
    sub_100004DE4(a2, v24);
    sub_10010731C(v24, v25);
    v26 = v31;
    v27 = v32;
    sub_100004DE4(v30, v31);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 136))(v18, v20, 0, v26, v27);
    swift_bridgeObjectRelease(v20);
    sub_100005D08(v30);
    return v17 & 1;
  }
  v16 = sub_1000124F8((uint64_t)v13, (uint64_t *)&unk_10015BA60);
  (*(void (**)(uint64_t))(**(_QWORD **)(a1 + 24) + 256))(v16);
  if (v14(v11, 1, v4) != 1)
  {
    sub_100086398((uint64_t)v7);
    v21 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    v22 = v21(v11, v4);
    v18 = URL.path.getter(v22);
    v20 = v23;
    v21(v7, v4);
    goto LABEL_6;
  }
  sub_1000124F8((uint64_t)v11, (uint64_t *)&unk_10015BA60);
  v17 = 1;
  return v17 & 1;
}

uint64_t sub_10005C638(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)(v1 + 16);
  v3 = *(_QWORD **)(v1 + 24);
  v4 = *a1;
  v5 = *v2;
  v6 = v2[1];
  v7 = v2[2];
  v8 = v2[3];
  v9 = v2[4];
  v10 = v2[5];
  v11 = v2[6];
  swift_bridgeObjectRetain(*v2);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  LOBYTE(v4) = sub_10005C410(v4, v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v11);
  return v4 & 1;
}

_QWORD *sub_10005C714(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

_QWORD *sub_10005C73C(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

unint64_t sub_10005C768()
{
  unint64_t result;

  result = sub_10005C78C((uint64_t)&off_100147A70);
  qword_10015FB68 = result;
  return result;
}

unint64_t sub_10005C78C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_100159628);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100005DE8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

driverkitd::ApprovalState_optional __swiftcall ApprovalState.init(fromString:)(Swift::String fromString)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  unint64_t v4;
  char v5;
  driverkitd::ApprovalState_optional v6;

  object = fromString._object;
  countAndFlagsBits = fromString._countAndFlagsBits;
  if (qword_10015FB60 != -1)
    swift_once(&qword_10015FB60, sub_10005C768);
  v3 = qword_10015FB68;
  if (*(_QWORD *)(qword_10015FB68 + 16) && (v4 = sub_100005DE8(countAndFlagsBits, (uint64_t)object), (v5 & 1) != 0))
    v6.value = *(_BYTE *)(*(_QWORD *)(v3 + 56) + v4);
  else
    v6.value = driverkitd_ApprovalState_unknownDefault;
  swift_bridgeObjectRelease(object);
  return v6;
}

uint64_t ApprovalState.stringValue.getter(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[48];

  v1 = a1;
  if (qword_10015FB60 != -1)
    a1 = swift_once(&qword_10015FB60, sub_10005C768);
  v2 = qword_10015FB68;
  __chkstk_darwin(a1);
  v9[16] = v1;
  swift_bridgeObjectRetain(v2);
  v4 = sub_100066464(v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1000636F0, (uint64_t)v9);
  swift_bridgeObjectRelease(v2);
  v5 = sub_10005C9FC(v4);
  v7 = v6;
  result = swift_release(v4);
  if (v7)
    return (uint64_t)v5;
  __break(1u);
  return result;
}

_BYTE *sub_10005C9FC(uint64_t a1)
{
  _BYTE *result;
  int v3;
  char v4;
  char v5;

  result = (_BYTE *)sub_1000109E8(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (_BYTE *)(1 << *(_BYTE *)(a1 + 32)))
    return 0;
  else
    return sub_100066208(&v5, (uint64_t)result, v3, 0, a1);
}

Swift::Bool __swiftcall ApprovalState.canTransitionTo(_:)(driverkitd::ApprovalState a1)
{
  char v1;
  int v2;

  if (v1 == 1)
    v2 = 2;
  else
    v2 = 1;
  return v2 == a1;
}

driverkitd::ApprovalState_optional __swiftcall ApprovalState.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 3)
    LOBYTE(rawValue) = 3;
  return (driverkitd::ApprovalState_optional)rawValue;
}

uint64_t ApprovalState.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t *sub_10005CAB8@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_10005CAD0(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

_UNKNOWN **static ApprovalState.allCases.getter()
{
  return &off_100147AD8;
}

void sub_10005CAE8(_QWORD *a1@<X8>)
{
  *a1 = &off_100147B00;
}

uint64_t ApprovalState.description.getter(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[48];

  v1 = a1;
  if (qword_10015FB60 != -1)
    a1 = swift_once(&qword_10015FB60, sub_10005C768);
  v2 = qword_10015FB68;
  __chkstk_darwin(a1);
  v9[16] = v1;
  swift_bridgeObjectRetain(v2);
  v4 = sub_100066464(v3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100069F20, (uint64_t)v9);
  swift_bridgeObjectRelease(v2);
  v5 = sub_10005C9FC(v4);
  v7 = v6;
  result = swift_release(v4);
  if (v7)
    return (uint64_t)v5;
  __break(1u);
  return result;
}

uint64_t sub_10005CBCC(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[48];

  v2 = *v1;
  if (qword_10015FB60 != -1)
    a1 = swift_once(&qword_10015FB60, sub_10005C768);
  v3 = qword_10015FB68;
  __chkstk_darwin(a1);
  v10[16] = v2;
  swift_bridgeObjectRetain(v3);
  v5 = sub_100066464(v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100069F20, (uint64_t)v10);
  swift_bridgeObjectRelease(v3);
  v6 = sub_10005C9FC(v5);
  v8 = v7;
  result = swift_release(v5);
  if (v8)
    return (uint64_t)v6;
  __break(1u);
  return result;
}

uint64_t ApprovalState.debugDescription.getter(unsigned __int8 a1)
{
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  void *v10;
  uint64_t result;
  Swift::String v12;
  Swift::String v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = a1;
  v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v17 = v2;
  v3._countAndFlagsBits = 10272;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  if (qword_10015FB60 != -1)
    v4 = swift_once(&qword_10015FB60, sub_10005C768);
  v5 = qword_10015FB68;
  __chkstk_darwin(v4);
  v14[16] = a1;
  swift_bridgeObjectRetain(v5);
  v7 = sub_100066464(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100069F20, (uint64_t)v14);
  swift_bridgeObjectRelease(v5);
  v8 = sub_10005C9FC(v7);
  v10 = v9;
  result = swift_release(v7);
  if (v10)
  {
    v12._countAndFlagsBits = (uint64_t)v8;
    v12._object = v10;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v10);
    v13._countAndFlagsBits = 41;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    return v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005CDD0()
{
  unsigned __int8 *v0;

  return ApprovalState.debugDescription.getter(*v0);
}

uint64_t sub_10005CDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10001233C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10005CE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10001233C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

id sub_10005CE80(uint64_t a1, void *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  NSString v16;
  Class isa;
  id v18;
  uint64_t v20;

  static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
  v7 = v6;
  v8 = sub_100005C88(&qword_100158230);
  inited = swift_initStackObject(v8, &v20);
  *(_OWORD *)(inited + 16) = xmmword_10010F050;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v10;
  sub_1000665D4(a1, (uint64_t)a2);
  v11 = sub_10005CFEC(a1, a2, a3 & 1);
  v13 = v12;
  sub_1000665DC(a1, (uint64_t)a2);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v11;
  *(_QWORD *)(inited + 56) = v13;
  v14 = sub_1000159E8(inited);
  v15 = objc_allocWithZone((Class)NSError);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  v18 = objc_msgSend(v15, "initWithDomain:code:userInfo:", v16, 5, isa);

  return v18;
}

unint64_t sub_10005CFEC(uint64_t a1, void *a2, char a3)
{
  Swift::String v5;
  unint64_t v7;

  if ((a3 & 1) != 0)
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease(0xE000000000000000);
    v7 = 0xD000000000000010;
  }
  else
  {
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease(0xE000000000000000);
    v7 = 0xD000000000000012;
  }
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  return v7;
}

unint64_t sub_10005D0A0()
{
  uint64_t v0;

  return sub_10005CFEC(*(_QWORD *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10005D0AC()
{
  _BYTE *v0;

  if (*v0)
    return 0x7261506472696874;
  else
    return 0x7261507473726966;
}

uint64_t sub_10005D0E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000666B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005D108(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000665E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D130(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000665E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005D158()
{
  return 0;
}

uint64_t sub_10005D164@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

void sub_10005D190(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10005D19C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006666C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D1C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006666C();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10005D1F4()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_10005D210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_1000667B8(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_10005D23C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100066628();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D264(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100066628();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalDBEntrySource.encode(to:)(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[2];

  v29 = a2;
  v30 = a3;
  v4 = sub_100005C88(&qword_100159430);
  v27 = *(_QWORD *)(v4 - 8);
  v28 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005C88(&qword_100159438);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005C88(&qword_100159440);
  v31 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_100004DE4(a1, v14);
  v16 = sub_1000665E4();
  v17 = v15;
  v18 = v30;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ApprovalDBEntrySource.CodingKeys, &type metadata for ApprovalDBEntrySource.CodingKeys, v16, v14, v17);
  if (v18 >> 60 == 15)
  {
    LOBYTE(v32[0]) = 0;
    v19 = sub_10006666C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys, v32, v11, &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys, v19);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  }
  else
  {
    LOBYTE(v32[0]) = 1;
    v21 = v29;
    sub_1000122B4(v29, v18);
    v22 = sub_100066628();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys, v32, v11, &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys, v22);
    v32[0] = v21;
    v32[1] = v18;
    v23 = sub_10001A73C();
    v24 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v32, v25, v28, &type metadata for Data, v23);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v24);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
    return sub_100021610(v21, v18);
  }
}

_QWORD *ApprovalDBEntrySource.init(from:)(_QWORD *a1)
{
  return sub_10006683C(a1);
}

_QWORD *sub_10005D4EC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_10006683C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10005D514(_QWORD *a1)
{
  uint64_t v1;

  return ApprovalDBEntrySource.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

void ApprovalDBEntrySource.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    sub_1000122B4(a2, a3);
    Data.hash(into:)(a1, a2, a3);
    sub_100021610(a2, a3);
  }
}

Swift::Int ApprovalDBEntrySource.hashValue.getter(uint64_t a1, unint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    sub_1000122B4(a1, a2);
    Data.hash(into:)(v5, a1, a2);
    sub_100021610(a1, a2);
  }
  return Hasher._finalize()();
}

Swift::Int sub_10005D638()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    sub_1000122B4(v1, v2);
    Data.hash(into:)(v4, v1, v2);
    sub_100021610(v1, v2);
  }
  return Hasher._finalize()();
}

void sub_10005D6C4(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v4 = *v1;
    Hasher._combine(_:)(1uLL);
    sub_1000122B4(v4, v3);
    Data.hash(into:)(a1, v4, v3);
    sub_100021610(v4, v3);
  }
}

Swift::Int sub_10005D748(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    sub_1000122B4(v2, v3);
    Data.hash(into:)(v5, v2, v3);
    sub_100021610(v2, v3);
  }
  return Hasher._finalize()();
}

uint64_t sub_10005D7D4(uint64_t a1, uint64_t a2)
{
  return _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t ApprovalDBEntrySource.description.getter(uint64_t a1, unint64_t a2)
{
  Swift::String v5;
  void *object;

  if (a2 >> 60 == 15)
    return 0x6D6574737973;
  sub_1000122B4(a1, a2);
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease(0xE000000000000000);
  v5._countAndFlagsBits = sub_100013834(a1, a2);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  sub_100021610(a1, a2);
  return 0xD000000000000024;
}

uint64_t sub_10005D8A4()
{
  uint64_t v0;

  return ApprovalDBEntrySource.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t ApprovalDBEntry.init(driverIdentifier:source:approvalState:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5;
  return result;
}

unint64_t sub_10005D8BC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656372756F73;
  if (*v0 != 1)
    v1 = 0x6C61766F72707061;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_10005D924@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100067118(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005D948(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10005D954(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100066E8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005D97C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100066E8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalDBEntry.description.getter()
{
  __int128 *v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  void *object;
  unint64_t v8;
  Swift::String v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  void *v17;
  uint64_t result;
  Swift::String v19;
  _BYTE v20[48];
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;

  v23 = *v0;
  v24 = v23;
  sub_100066E64((uint64_t)&v24);
  v1._countAndFlagsBits = 544106784;
  v1._object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  v2 = *((_QWORD *)v0 + 2);
  v3 = *((_QWORD *)v0 + 3);
  if (v3 >> 60 == 15)
  {
    v4 = 0xE600000000000000;
    v5 = 0x6D6574737973;
  }
  else
  {
    sub_10002B23C(v2, v3);
    sub_1000122B4(v2, v3);
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease(0xE000000000000000);
    v21 = 0xD000000000000024;
    v22 = 0x8000000100123840;
    v6._countAndFlagsBits = sub_100013834(v2, v3);
    object = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object);
    sub_100021610(v2, v3);
    v5 = 0xD000000000000024;
    v4 = 0x8000000100123840;
  }
  v8 = v4;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v4);
  sub_100021610(v2, v3);
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v11 = *((_BYTE *)v0 + 32);
  if (qword_10015FB60 != -1)
    v10 = swift_once(&qword_10015FB60, sub_10005C768);
  v12 = qword_10015FB68;
  __chkstk_darwin(v10);
  v20[16] = v11;
  swift_bridgeObjectRetain(v12);
  v14 = sub_100066464(v13, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100069F20, (uint64_t)v20);
  swift_bridgeObjectRelease(v12);
  v15 = sub_10005C9FC(v14);
  v17 = v16;
  result = swift_release(v14);
  if (v17)
  {
    v19._countAndFlagsBits = (uint64_t)v15;
    v19._object = v17;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v17);
    return v23;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ApprovalDBEntry.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;

  v3 = v1;
  v5 = sub_100005C88(&qword_100159448);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_100066E8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ApprovalDBEntry.CodingKeys, &type metadata for ApprovalDBEntry.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v19, v5);
  if (!v2)
  {
    sub_100066ED0((_OWORD *)v3 + 1, &v20);
    sub_100066ED0(&v20, &v19);
    v18 = 1;
    v14 = sub_100066EE0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for ApprovalDBEntrySource, v14);
    LOBYTE(v19) = *((_BYTE *)v3 + 32);
    v18 = 2;
    v15 = sub_100066F24();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for ApprovalState, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double ApprovalDBEntry.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  sub_100067284(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10005DD4C(_QWORD *a1)
{
  return ApprovalDBEntry.encode(to:)(a1);
}

BOOL static ApprovalDBEntry.__derived_struct_equals(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  _BOOL8 result;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[3];
    sub_100066ED0((_OWORD *)(a2 + 16), &v11);
    if (v10 >> 60 == 15)
    {
      sub_100066ED0(&v11, &v12);
      if (*((_QWORD *)&v12 + 1) >> 60 == 15)
        return *((unsigned __int8 *)a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    }
    else
    {
      sub_100066ED0(&v11, &v12);
      if (*((_QWORD *)&v12 + 1) >> 60 != 15)
        __asm { BR              X10 }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10005DF8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v14;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 32);
  if (v4 == *(_QWORD *)a2 && v5 == v9)
    return _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(v6, v7, v10, v11) & (v8 == v12);
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v9, 0);
  result = 0;
  if ((v14 & 1) != 0)
    return _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(v6, v7, v10, v11) & (v8 == v12);
  return result;
}

uint64_t sub_10005E018(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_100005C88(&qword_100159580);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100004DE4(a1, v8);
  v10 = sub_100069A78();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ApprovalDB.V0.CodingKeys, &type metadata for ApprovalDB.V0.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_100005C88(&qword_100159588);
  v12 = sub_100069C60(&qword_100159590, &qword_100159588, (void (*)(void))sub_100069ABC, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_10005E13C()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_10005E160()
{
  return 0x73656972746E65;
}

uint64_t sub_10005E17C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100069A78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005E1A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100069A78();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10005E1CC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1000676A4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10005E1F4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10005E018(a1, *v1);
}

uint64_t (*ApprovalDB.entries.modify(uint64_t *a1))(_QWORD *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *a1 = *v1;
  a1[1] = (uint64_t)v1;
  swift_bridgeObjectRetain(v3);
  return sub_10005E248;
}

uint64_t sub_10005E248(_QWORD *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)a1[1];
  v4 = *v3;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(*a1);
    swift_bridgeObjectRelease(v4);
    *v3 = v2;
    return swift_bridgeObjectRelease(v2);
  }
  else
  {
    result = swift_bridgeObjectRelease(*v3);
    *v3 = v2;
  }
  return result;
}

void *sub_10005E2A8()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10005E2B8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned __int8 *i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v5 = *(_QWORD *)(a5 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(a5);
    for (i = (unsigned __int8 *)(a5 + 64); ; i += 40)
    {
      v11 = *((_QWORD *)i - 4);
      v12 = *((_QWORD *)i - 3);
      v14 = *((_QWORD *)i - 2);
      v13 = *((_QWORD *)i - 1);
      v15 = *i;
      v16 = v11 == a1 && v12 == a2;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, *((_QWORD *)i - 3), a1, a2, 0) & 1) != 0)
      {
        if (v13 >> 60 == 15)
        {
          if (a4 >> 60 == 15)
          {
            swift_bridgeObjectRetain(v12);
            sub_10002B23C(v14, v13);
            swift_bridgeObjectRelease(v12);
            swift_bridgeObjectRelease(a5);
            sub_100021610(v14, v13);
            return v15;
          }
        }
        else if (a4 >> 60 != 15)
        {
          __asm { BR              X8 }
        }
      }
      if (!--v5)
      {
        swift_bridgeObjectRelease(a5);
        return 3;
      }
    }
  }
  return 3;
}

_QWORD *sub_10005EE48(_QWORD *a1)
{
  char **v1;
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  _QWORD *result;
  Swift::String v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char **v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  __int128 v34;
  __int128 v35;

  v2 = a1;
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  if (v4)
  {
    v5 = *a1;
    v6 = a1[1];
    swift_bridgeObjectRetain(v3);
    v7 = 32;
    while (1)
    {
      v9 = *(_OWORD *)&v3[v7];
      v8 = *(_OWORD *)&v3[v7 + 16];
      v33 = v3[v7 + 32];
      v31 = v9;
      v32 = v8;
      v10 = (_QWORD)v9 == v5 && *((_QWORD *)&v9 + 1) == v6;
      if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, *((_QWORD *)&v9 + 1), v5, v6, 0) & 1) != 0)
      {
        v11 = *((_QWORD *)&v32 + 1);
        sub_100066ED0((_OWORD *)v2 + 1, &v30);
        if (v11 >> 60 == 15)
        {
          sub_100066ED0(&v30, &v35);
          if (*((_QWORD *)&v35 + 1) >> 60 == 15)
          {
            sub_100067500(&v31);
            swift_bridgeObjectRelease(v3);
            _StringGuts.grow(_:)(64);
            v19._countAndFlagsBits = 0xD000000000000027;
            v19._object = (void *)0x8000000100123870;
            String.append(_:)(v19);
            v20._countAndFlagsBits = ApprovalDBEntry.description.getter();
            object = v20._object;
            String.append(_:)(v20);
            swift_bridgeObjectRelease(object);
            v22._object = (void *)0x80000001001238A0;
            v22._countAndFlagsBits = 0xD000000000000015;
            String.append(_:)(v22);
            v23._countAndFlagsBits = ApprovalDBEntry.description.getter();
            v24 = v23._object;
            String.append(_:)(v23);
            swift_bridgeObjectRelease(v24);
            v25 = sub_100067540();
            v26 = swift_allocError(&type metadata for ApprovalsError, v25, 0, 0);
            *(_QWORD *)v27 = 0;
            *(_QWORD *)(v27 + 8) = 0xE000000000000000;
            *(_BYTE *)(v27 + 16) = 0;
            swift_willThrow(v26);
            return sub_100067584(&v31);
          }
        }
        else
        {
          sub_100066ED0(&v30, &v34);
          if (*((_QWORD *)&v34 + 1) >> 60 != 15)
            __asm { BR              X8 }
        }
      }
      v7 += 40;
      if (!--v4)
      {
        swift_bridgeObjectRelease(v3);
        v2 = a1;
        v1 = v28;
        break;
      }
    }
  }
  swift_bridgeObjectRetain(v3);
  sub_100067500(v2);
  v12 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
    v12 = sub_1000639A4(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
  v14 = *((_QWORD *)v12 + 2);
  v13 = *((_QWORD *)v12 + 3);
  if (v14 >= v13 >> 1)
    v12 = sub_1000639A4((char *)(v13 > 1), v14 + 1, 1, v12);
  *((_QWORD *)v12 + 2) = v14 + 1;
  v15 = &v12[40 * v14];
  v16 = *(_OWORD *)v2;
  v17 = *((_OWORD *)v2 + 1);
  v15[64] = *((_BYTE *)v2 + 32);
  *((_OWORD *)v15 + 2) = v16;
  *((_OWORD *)v15 + 3) = v17;
  result = (_QWORD *)swift_bridgeObjectRelease(v3);
  *v1 = v12;
  return result;
}

unint64_t sub_10005FA44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  BOOL v10;
  __int128 v11;
  Swift::String v12;
  void *v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String v21;
  void *object;
  unint64_t v23;
  Swift::String v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  Swift::String v31;
  void *v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  void *v39;
  void *v40;
  Swift::String v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE v52[56];
  char **v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t __s1;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unsigned __int8 v66;
  __int128 v67;
  __int128 v68;

  v54 = a1;
  v2 = *v1;
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
LABEL_14:
    __s1 = 0;
    v62 = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    v12._object = (void *)0x80000001001238C0;
    String.append(_:)(v12);
    v14 = *(_QWORD *)v54;
    v13 = *(void **)(v54 + 8);
    swift_bridgeObjectRetain(v13);
    v15._countAndFlagsBits = v14;
    v15._object = v13;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v13);
    v16._countAndFlagsBits = 0x656372756F73202CLL;
    v16._object = (void *)0xEA00000000002020;
    String.append(_:)(v16);
    v17 = *(_QWORD *)(v54 + 16);
    v18 = *(_QWORD *)(v54 + 24);
    if (v18 >> 60 == 15)
    {
      v19 = 0xE600000000000000;
      v20 = 0x6D6574737973;
    }
    else
    {
      sub_10002B23C(v17, v18);
      sub_1000122B4(v17, v18);
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(0xE000000000000000);
      v21._countAndFlagsBits = sub_100013834(v17, v18);
      object = v21._object;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(object);
      sub_100021610(v17, v18);
      v20 = 0xD000000000000024;
      v19 = 0x8000000100123840;
    }
    v23 = v19;
    String.append(_:)(*(Swift::String *)&v20);
    swift_bridgeObjectRelease(v19);
    sub_100021610(v17, v18);
    v24._object = (void *)0x80000001001238F0;
    v24._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v24);
    v25 = v62;
    v26 = sub_100067540();
    v27 = swift_allocError(&type metadata for ApprovalsError, v26, 0, 0);
    *(_QWORD *)v28 = __s1;
    *(_QWORD *)(v28 + 8) = v25;
    *(_BYTE *)(v28 + 16) = 1;
    swift_willThrow(v27);
    return v25 & 1;
  }
  v4 = 0;
  v5 = 0;
  v6 = *(_QWORD *)v54;
  v59 = *(_QWORD *)(v54 + 8);
  v60 = v6;
  v58 = (_OWORD *)(v54 + 16);
  v55 = (char *)v2;
  v56 = v3;
  while (1)
  {
    if (v5 >= *(_QWORD *)(v2 + 16))
    {
      __break(1u);
      JUMPOUT(0x10006099CLL);
    }
    v8 = *(_OWORD *)(v2 + v4 + 32);
    v7 = *(_OWORD *)(v2 + v4 + 48);
    v66 = *(_BYTE *)(v2 + v4 + 64);
    v64 = v8;
    v65 = v7;
    v9 = v8;
    v10 = (_QWORD)v8 == v60 && *((_QWORD *)&v8 + 1) == v59;
    if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)(v64, *((_QWORD *)&v64 + 1), v60, v59, 0) & 1) == 0)
      goto LABEL_4;
    v57 = v66;
    v11 = v65;
    sub_100066ED0(v58, &v63);
    if (*((_QWORD *)&v11 + 1) >> 60 != 15)
    {
      sub_100066ED0(&v63, &v67);
      if (*((_QWORD *)&v67 + 1) >> 60 != 15)
        __asm { BR              X8 }
      goto LABEL_4;
    }
    sub_100066ED0(&v63, &v68);
    if (*((_QWORD *)&v68 + 1) >> 60 == 15)
      break;
LABEL_4:
    ++v5;
    v4 += 40;
    if (v3 == v5)
      goto LABEL_14;
  }
  sub_100067500(&v64);
  v30 = *(unsigned __int8 *)(v54 + 32);
  LOBYTE(v25) = v57 != v30;
  if (v57 == v30)
  {
    sub_100067584(&v64);
  }
  else if (v57 == 1)
  {
    if (v30 != 2)
      goto LABEL_22;
LABEL_28:
    swift_bridgeObjectRetain(*((_QWORD *)&v9 + 1));
    sub_10002B23C(v11, *((unint64_t *)&v11 + 1));
    v46 = v55;
    swift_bridgeObjectRetain(v55);
    if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
      v46 = sub_100063AB4((uint64_t)v55);
    if (v5 >= *((_QWORD *)v46 + 2))
    {
      __break(1u);
      JUMPOUT(0x100060A10);
    }
    v48 = &v46[v4];
    v49 = *(_QWORD *)&v46[v4 + 40];
    v50 = *(_QWORD *)&v46[v4 + 48];
    v51 = *((_QWORD *)v48 + 7);
    *((_OWORD *)v48 + 2) = v9;
    *((_OWORD *)v48 + 3) = v11;
    v48[64] = v11;
    swift_bridgeObjectRelease(v49);
    sub_100021610(v50, v51);
    swift_bridgeObjectRelease(*((_QWORD *)&v9 + 1));
    swift_bridgeObjectRelease(v55);
    sub_100021610(v11, *((unint64_t *)&v11 + 1));
    *v53 = v46;
  }
  else
  {
    if (v30 == 1)
      goto LABEL_28;
LABEL_22:
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease(0xE000000000000000);
    __s1 = 0xD00000000000001DLL;
    v62 = 0x8000000100123910;
    sub_100067500(&v64);
    v31._countAndFlagsBits = ApprovalDBEntry.description.getter();
    v32 = v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v32);
    sub_100067584(&v64);
    v33._countAndFlagsBits = 0x2077656E206F7420;
    v33._object = (void *)0xEE00206574617473;
    String.append(_:)(v33);
    if (qword_10015FB60 != -1)
      v34 = swift_once(&qword_10015FB60, sub_10005C768);
    v35 = qword_10015FB68;
    __chkstk_darwin(v34);
    v52[16] = v30;
    swift_bridgeObjectRetain(v35);
    v37 = sub_100066464(v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100069F20, (uint64_t)v52);
    swift_bridgeObjectRelease(v35);
    v38 = sub_10005C9FC(v37);
    v40 = v39;
    swift_release(v37);
    if (!v40)
    {
      __break(1u);
      JUMPOUT(0x100060A70);
    }
    v41._countAndFlagsBits = (uint64_t)v38;
    v41._object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(v40);
    v42 = __s1;
    v25 = v62;
    v43 = sub_100067540();
    v44 = swift_allocError(&type metadata for ApprovalsError, v43, 0, 0);
    *(_QWORD *)v45 = v42;
    *(_QWORD *)(v45 + 8) = v25;
    *(_BYTE *)(v45 + 16) = 0;
    swift_willThrow(v44);
    sub_100067584(&v64);
  }
  return v25 & 1;
}

unint64_t sub_100060AA0(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  _OWORD v9[2];
  char v10;

  result = 0xD00000000000001DLL;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(a1);
    v4 = 32;
    do
    {
      v5 = *(_OWORD *)(a1 + v4 + 16);
      v9[0] = *(_OWORD *)(a1 + v4);
      v9[1] = v5;
      v10 = *(_BYTE *)(a1 + v4 + 32);
      sub_100067500(v9);
      v8._countAndFlagsBits = ApprovalDBEntry.description.getter();
      v8._object = v6;
      v7._countAndFlagsBits = 10;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      String.append(_:)(v8);
      swift_bridgeObjectRelease(v8._object);
      sub_100067584(v9);
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(a1);
    return 0xD00000000000001DLL;
  }
  return result;
}

uint64_t sub_100060B74()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F6973726576;
  else
    return 12406;
}

uint64_t sub_100060BA4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000677F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100060BC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006761C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100060BF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006761C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalDB.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;

  v7 = sub_100005C88(&qword_100159468);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_100004DE4(a1, v11);
  v13 = sub_10006761C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ApprovalDB.CodingKeys, &type metadata for ApprovalDB.CodingKeys, v13, v11, v12);
  v19 = a2;
  v18 = 0;
  v14 = sub_100067660();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v7, &type metadata for ApprovalDB.V0, v14);
  if (!v3)
  {
    v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v17, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t ApprovalDB.init(from:)(_QWORD *a1)
{
  return sub_1000678C8(a1);
}

uint64_t sub_100060D60@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1000678C8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100060D88(_QWORD *a1)
{
  uint64_t *v1;

  return ApprovalDB.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100060DA4(uint64_t *a1, uint64_t *a2)
{
  return _s10driverkitd10ApprovalDBV2eeoiySbAC_ACtFZ_0(*a1, a1[1], *a2);
}

uint64_t sub_100060DB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[9];
  uint64_t v15;
  _OWORD v16[4];
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100067A58();
  v4 = Set.init(minimumCapacity:)(v2, &type metadata for ApprovalSettingsStateEntry, v3);
  v15 = v4;
  if (v2)
  {
    v5 = 32;
    do
    {
      v6 = *(_OWORD *)(a1 + v5 + 48);
      v16[2] = *(_OWORD *)(a1 + v5 + 32);
      v16[3] = v6;
      v17 = *(_BYTE *)(a1 + v5 + 64);
      v7 = *(_OWORD *)(a1 + v5 + 16);
      v16[0] = *(_OWORD *)(a1 + v5);
      v16[1] = v7;
      sub_100067A9C(v16);
      sub_100063AC8((uint64_t)v14, (uint64_t)v16);
      v8 = v14[3];
      v9 = v14[5];
      v10 = v14[6];
      v11 = v14[7];
      swift_bridgeObjectRelease(v14[1]);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v9);
      sub_100021610(v10, v11);
      v5 += 72;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(a1);
    return v15;
  }
  else
  {
    v12 = v4;
    swift_bridgeObjectRelease(a1);
  }
  return v12;
}

Swift::Int sub_100060EAC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_100060EEC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_100060F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x73656972746E65 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656972746E65, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100060FBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100067AFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100060FE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100067AFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ApprovalSettingsState.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_100005C88(&qword_100159478);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100004DE4(a1, v8);
  v10 = sub_100067AFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ApprovalSettingsState.CodingKeys, &type metadata for ApprovalSettingsState.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_100005C88(&qword_100159480);
  v12 = sub_100069C60(&qword_100159488, &qword_100159480, (void (*)(void))sub_100067B40, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *ApprovalSettingsState.init(from:)(_QWORD *a1)
{
  return sub_100067B84(a1);
}

_QWORD *sub_100061144@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100067B84(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10006116C(_QWORD *a1)
{
  uint64_t *v1;

  return ApprovalSettingsState.encode(to:)(a1, *v1);
}

uint64_t sub_100061188(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v31;
  char v33;
  char v35;
  int v36;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD __s1[9];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned __int8 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v2 = 0;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v46 = a2 + 56;
  v43 = a2;
  v39 = a1 + 56;
  v40 = a1;
  v38 = v7;
  if (v6)
    goto LABEL_7;
LABEL_8:
  v9 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    JUMPOUT(0x100061F50);
  }
  if (v9 >= v7)
    return 1;
  v10 = *(_QWORD *)(v3 + 8 * v9);
  v11 = v2 + 1;
  if (!v10)
  {
    v11 = v9 + 1;
    if (v9 + 1 >= v7)
      return 1;
    v10 = *(_QWORD *)(v3 + 8 * v11);
    if (!v10)
    {
      v11 = v9 + 2;
      if (v9 + 2 >= v7)
        return 1;
      v10 = *(_QWORD *)(v3 + 8 * v11);
      if (!v10)
      {
        v11 = v9 + 3;
        if (v9 + 3 >= v7)
          return 1;
        v10 = *(_QWORD *)(v3 + 8 * v11);
        if (!v10)
        {
          v12 = v9 + 4;
          if (v12 < v7)
          {
            v10 = *(_QWORD *)(v3 + 8 * v12);
            if (v10)
            {
              v11 = v12;
              goto LABEL_23;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x100061F68);
              }
              if (v11 >= v7)
                break;
              v10 = *(_QWORD *)(v3 + 8 * v11);
              ++v12;
              if (v10)
                goto LABEL_23;
            }
          }
          return 1;
        }
      }
    }
  }
LABEL_23:
  v41 = (v10 - 1) & v10;
  v42 = v11;
  for (i = __clz(__rbit64(v10)) + (v11 << 6); ; i = __clz(__rbit64(v6)) | (v2 << 6))
  {
    v13 = *(_QWORD *)(a1 + 48) + 72 * i;
    v48 = *(_OWORD *)v13;
    v15 = *(_OWORD *)(v13 + 32);
    v14 = *(_OWORD *)(v13 + 48);
    v16 = *(_OWORD *)(v13 + 16);
    v52 = *(_BYTE *)(v13 + 64);
    v51 = v14;
    v49 = v16;
    v50 = v15;
    Hasher.init(_seed:)(__s1, *(_QWORD *)(a2 + 40));
    sub_100067A9C(&v48);
    ApprovalSettingsStateEntry.hash(into:)((uint64_t)__s1);
    v17 = Hasher._finalize()();
    v18 = v43;
    v19 = -1 << *(_BYTE *)(v43 + 32);
    v20 = v17 & ~v19;
    if (((*(_QWORD *)(v46 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      break;
    v44 = ~v19;
    v21 = v48;
    while (1)
    {
      v22 = *(_QWORD *)(v18 + 48) + 72 * v20;
      v23 = *(_QWORD *)(v22 + 8);
      v24 = *(_QWORD *)(v22 + 16);
      v25 = *(_QWORD *)(v22 + 24);
      v26 = *(_QWORD *)(v22 + 32);
      v27 = *(_QWORD *)(v22 + 40);
      v29 = *(_QWORD *)(v22 + 48);
      v28 = *(_QWORD *)(v22 + 56);
      v45 = *(unsigned __int8 *)(v22 + 64);
      if (*(_QWORD *)v22 != (_QWORD)v21 || v23 != *((_QWORD *)&v21 + 1))
      {
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v22, v23, v21, *((_QWORD *)&v21 + 1), 0);
        v18 = v43;
        if ((v31 & 1) == 0)
          goto LABEL_27;
      }
      if (v25)
      {
        if (!*((_QWORD *)&v49 + 1))
          goto LABEL_27;
        if (v24 != (_QWORD)v49 || v25 != *((_QWORD *)&v49 + 1))
        {
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v49, *((_QWORD *)&v49 + 1), 0);
          v18 = v43;
          if ((v33 & 1) == 0)
            goto LABEL_27;
        }
      }
      else if (*((_QWORD *)&v49 + 1))
      {
        goto LABEL_27;
      }
      if (v27)
      {
        if (!*((_QWORD *)&v50 + 1))
          goto LABEL_27;
        if (v26 != (_QWORD)v50 || v27 != *((_QWORD *)&v50 + 1))
        {
          v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v50, *((_QWORD *)&v50 + 1), 0);
          v18 = v43;
          if ((v35 & 1) == 0)
            goto LABEL_27;
        }
      }
      else if (*((_QWORD *)&v50 + 1))
      {
        goto LABEL_27;
      }
      sub_100066ED0(&v51, &v53);
      if (v28 >> 60 != 15)
      {
        sub_100066ED0(&v53, &v54);
        v18 = v43;
        if (*((_QWORD *)&v54 + 1) >> 60 != 15)
          __asm { BR              X8 }
        goto LABEL_27;
      }
      sub_100066ED0(&v53, &v55);
      v18 = v43;
      if (*((_QWORD *)&v55 + 1) >> 60 == 15)
      {
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v25);
        sub_10002B23C(v29, v28);
        v36 = v52;
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(v25);
        swift_bridgeObjectRelease(v23);
        sub_100021610(v29, v28);
        v18 = v43;
        if (v45 == v36)
          break;
      }
LABEL_27:
      v20 = (v20 + 1) & v44;
      if (((*(_QWORD *)(v46 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        goto LABEL_58;
    }
    sub_100069C00(&v48);
    a2 = v43;
    v3 = v39;
    a1 = v40;
    v7 = v38;
    v6 = v41;
    v2 = v42;
    if (!v41)
      goto LABEL_8;
LABEL_7:
    v41 = (v6 - 1) & v6;
    v42 = v2;
  }
LABEL_58:
  sub_100069C00(&v48);
  return 0;
}

uint64_t sub_100062024(uint64_t *a1, uint64_t *a2)
{
  return sub_100061188(*a1, *a2);
}

unint64_t ApprovalSettingsState.debugDescription.getter(uint64_t a1)
{
  Swift::String v2;
  void *object;
  Swift::String v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t countAndFlagsBits;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  void *v28;
  Swift::String v29;
  void *v30;
  Swift::String v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  void *v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(0xE000000000000000);
  v62._countAndFlagsBits = 0xD000000000000017;
  v62._object = (void *)0x8000000100123950;
  v79 = *(void **)(a1 + 16);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x73656972746E6520;
  v4._object = (void *)0xEA00000000000A3ALL;
  String.append(_:)(v4);
  v5 = 0xD000000000000017;
  v77 = 0xD000000000000017;
  v78 = 0x8000000100123950;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  v7 = ~v6;
  v8 = -v6;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(a1 + 56);
  v71 = a1;
  v72 = a1 + 56;
  v73 = v7;
  v74 = 0;
  v75 = v10;
  v76 = 0;
  swift_bridgeObjectRetain(a1);
  sub_100062438((uint64_t)&v62);
  v11 = v63;
  if (v63)
  {
    v12 = 0;
    countAndFlagsBits = v62._countAndFlagsBits;
    v14 = v62._object;
    v16 = v64;
    v15 = v65;
    v17 = v66;
    v18 = v67;
    v19 = v68;
    v20 = v69;
    v21 = v70;
    do
    {
      v79 = v14;
      v80 = v11;
      v81 = v16;
      v82 = v15;
      v60 = v17;
      v61 = v15;
      v83 = v17;
      v84 = v18;
      v58 = v19;
      v59 = v18;
      v85 = v19;
      v86 = v20;
      v57 = v20;
      v87 = v21;
      v62._countAndFlagsBits = 0x207865646E492020;
      v62._object = (void *)0xE800000000000000;
      v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v30 = v29._object;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(v30);
      v31._countAndFlagsBits = 2618;
      v31._object = (void *)0xE200000000000000;
      String.append(_:)(v31);
      v32 = v62._object;
      String.append(_:)(v62);
      swift_bridgeObjectRelease(v32);
      v33 = ApprovalSettingsStateEntry.debugDescription.getter();
      v35 = sub_100062904(0x7FFFFFFFFFFFFFFFLL, 1, v33, v34);
      v36 = v35;
      v37 = *((_QWORD *)v35 + 2);
      if (v37)
      {
        v53 = v16;
        v54 = v14;
        v55 = countAndFlagsBits;
        v56 = v12;
        v52 = v11;
        sub_10000C958(0, v37, 0);
        v38 = v36;
        v39 = (uint64_t *)(v36 + 56);
        do
        {
          v40 = *(v39 - 3);
          v41 = *(v39 - 2);
          v42 = *(v39 - 1);
          v43 = *v39;
          v62._countAndFlagsBits = 538976288;
          v62._object = (void *)0xE400000000000000;
          swift_bridgeObjectRetain(v43);
          v44._countAndFlagsBits = static String._fromSubstring(_:)(v40, v41, v42, v43);
          v45 = v44._object;
          String.append(_:)(v44);
          swift_bridgeObjectRelease(v43);
          swift_bridgeObjectRelease(v45);
          v46 = v62._countAndFlagsBits;
          v47 = v62._object;
          v49 = _swiftEmptyArrayStorage[2];
          v48 = _swiftEmptyArrayStorage[3];
          if (v49 >= v48 >> 1)
            sub_10000C958(v48 > 1, v49 + 1, 1);
          _swiftEmptyArrayStorage[2] = v49 + 1;
          v50 = &_swiftEmptyArrayStorage[2 * v49];
          v50[4] = v46;
          v50[5] = v47;
          v39 += 4;
          --v37;
        }
        while (v37);
        swift_bridgeObjectRelease(v38);
        v11 = v52;
        v16 = v53;
        countAndFlagsBits = v55;
        v12 = v56;
        v14 = v54;
      }
      else
      {
        swift_bridgeObjectRelease(v35);
      }
      v62._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      v22 = sub_100005C88((uint64_t *)&unk_10015A5D0);
      v23 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
      v24 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v22, v23);
      v26 = v25;
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      v62._countAndFlagsBits = v24;
      v62._object = v26;
      swift_bridgeObjectRetain(v26);
      v27._countAndFlagsBits = 10;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      swift_bridgeObjectRelease(v26);
      v28 = v62._object;
      String.append(_:)(v62);
      swift_bridgeObjectRelease(v28);
      sub_100067CD0(countAndFlagsBits, (uint64_t)v14, v11, v16, v61, v60, v59, v58, v57);
      sub_100062438((uint64_t)&v62);
      countAndFlagsBits = v62._countAndFlagsBits;
      v14 = v62._object;
      v11 = v63;
      v16 = v64;
      v15 = v65;
      v17 = v66;
      v18 = v67;
      v19 = v68;
      v20 = v69;
      v21 = v70;
    }
    while (v63);
    v5 = v77;
  }
  sub_100005DE0(v71);
  return v5;
}

void sub_100062438(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;

  v3 = v1[3];
  v2 = v1[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = *(_QWORD *)(*v1 + 48) + 72 * v6;
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *(_QWORD *)(v7 + 16);
    v11 = *(_OWORD *)(v7 + 24);
    v12 = *(_QWORD *)(v7 + 40);
    v13 = *(_QWORD *)(v7 + 48);
    v14 = *(_QWORD *)(v7 + 56);
    v15 = *(_BYTE *)(v7 + 64);
    v1[3] = v4;
    v1[4] = v5;
    v16 = v1[5];
    if (!__OFADD__(v16, 1))
    {
      v1[5] = v16 + 1;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = v10;
      *(_OWORD *)(a1 + 32) = v11;
      *(_QWORD *)(a1 + 48) = v12;
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v14;
      v17 = v11;
      *(_BYTE *)(a1 + 72) = v15;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v17);
      sub_10002B23C(v13, v14);
      return;
    }
    __break(1u);
    goto LABEL_25;
  }
  v18 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    v19 = (unint64_t)(v1[2] + 64) >> 6;
    if (v18 < v19)
    {
      v20 = v1[1];
      v21 = *(_QWORD *)(v20 + 8 * v18);
      if (v21)
      {
LABEL_8:
        v5 = (v21 - 1) & v21;
        v6 = __clz(__rbit64(v21)) + (v18 << 6);
        v4 = v18;
        goto LABEL_3;
      }
      v22 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v19)
      {
        v21 = *(_QWORD *)(v20 + 8 * v22);
        if (v21)
        {
LABEL_11:
          v18 = v22;
          goto LABEL_8;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v19)
        {
          v21 = *(_QWORD *)(v20 + 8 * (v3 + 3));
          if (v21)
          {
            v18 = v3 + 3;
            goto LABEL_8;
          }
          v22 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v19)
          {
            v21 = *(_QWORD *)(v20 + 8 * v22);
            if (v21)
              goto LABEL_11;
            v18 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v19)
            {
              v21 = *(_QWORD *)(v20 + 8 * v18);
              if (v21)
                goto LABEL_8;
              v4 = v19 - 1;
              v23 = v3 + 6;
              while (v19 != v23)
              {
                v21 = *(_QWORD *)(v20 + 8 * v23++);
                if (v21)
                {
                  v18 = v23 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v4;
    v1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 57) = 0u;
    return;
  }
LABEL_25:
  __break(1u);
}

uint64_t ApprovalSettingsStateEntry.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  void *v27;
  void *v28;
  uint64_t result;
  Swift::String v30;
  _BYTE v31[48];
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE v36[16];
  _QWORD v37[2];

  v37[0] = 0;
  v37[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(83);
  v34 = 0;
  v35 = 0xE000000000000000;
  v1._countAndFlagsBits = 0xD000000000000013;
  v1._object = (void *)0x8000000100123970;
  String.append(_:)(v1);
  v2 = *(_QWORD *)v0;
  v3 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0x79616C707369440ALL;
  v5._object = (void *)0xEF203A656D614E20;
  String.append(_:)(v5);
  sub_100067D28(v0 + 16, (uint64_t)v37);
  sub_100067D28((uint64_t)v37, (uint64_t)v36);
  sub_100066E64((uint64_t)v37);
  v6 = sub_100005C88(&qword_100159498);
  v7._countAndFlagsBits = String.init<A>(describing:)(v36, v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._countAndFlagsBits = 0x542065676173550ALL;
  v9._object = (void *)0xED0000203A747865;
  String.append(_:)(v9);
  sub_100067D28(v0 + 32, (uint64_t)v36);
  sub_100067D28((uint64_t)v36, (uint64_t)&v32);
  sub_100066E64((uint64_t)v36);
  v10._countAndFlagsBits = String.init<A>(describing:)(&v32, v6);
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 0x3A656372756F530ALL;
  v12._object = (void *)0xE900000000000020;
  String.append(_:)(v12);
  v13 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 56);
  if (v14 >> 60 == 15)
  {
    v15 = 0xE600000000000000;
    v16 = 0x6D6574737973;
  }
  else
  {
    v32 = 0;
    v33 = 0xE000000000000000;
    sub_10002B23C(v13, v14);
    sub_1000122B4(v13, v14);
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease(v33);
    v32 = 0xD000000000000024;
    v33 = 0x8000000100123840;
    v17._countAndFlagsBits = sub_100013834(v13, v14);
    v18 = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v18);
    sub_100021610(v13, v14);
    v16 = v32;
    v15 = v33;
  }
  v19 = v15;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease(v15);
  sub_100021610(v13, v14);
  v20._object = (void *)0x8000000100123990;
  v20._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v20);
  v22 = *(_BYTE *)(v0 + 64);
  if (qword_10015FB60 != -1)
    v21 = swift_once(&qword_10015FB60, sub_10005C768);
  v23 = qword_10015FB68;
  __chkstk_darwin(v21);
  v31[16] = v22;
  swift_bridgeObjectRetain(v23);
  v25 = sub_100066464(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100069F20, (uint64_t)v31);
  swift_bridgeObjectRelease(v23);
  v26 = sub_10005C9FC(v25);
  v28 = v27;
  result = swift_release(v25);
  if (v28)
  {
    v30._countAndFlagsBits = (uint64_t)v26;
    v30._object = v28;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v28);
    return v34;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_100062904(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD v55[2];
  char *v56;

  if (a1 < 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v7 = a4;
  v9 = swift_allocObject(&unk_100148250, 24, 7);
  *(_QWORD *)(v9 + 16) = _swiftEmptyArrayStorage;
  v13 = swift_allocObject(&unk_100148278, 24, 7);
  v6 = (char *)v13;
  *(_QWORD *)(v13 + 16) = 15;
  v14 = v7 >> 60;
  v15 = HIBYTE(v7) & 0xF;
  if (!a1 || ((v7 & 0x2000000000000000) != 0 ? (v16 = HIBYTE(v7) & 0xF) : (v16 = a3 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((v7 & 0x2000000000000000) == 0)
      v15 = a3 & 0xFFFFFFFFFFFFLL;
    v17 = (v14 & ((a3 & 0x800000000000000) == 0)) == 0;
    v38 = 7;
    if (!v17)
      v38 = 11;
    sub_100029490(v38 | (v15 << 16), v13, a2 & 1, v9, a3, v7);
    swift_bridgeObjectRelease(v7);
    v39 = *(char **)(v9 + 16);
    swift_bridgeObjectRetain(v39);
    swift_release(v9);
    swift_release(v6);
    return v39;
  }
  v49 = a1;
  v17 = (v14 & ((a3 & 0x800000000000000) == 0)) == 0;
  v18 = 7;
  if (!v17)
    v18 = 11;
  v48 = v18 | (v16 << 16);
  v54 = 4 * v16;
  v56 = (char *)_swiftEmptyArrayStorage;
  v19 = 15;
  v4 = 15;
  v52 = v7;
  v53 = v13;
  v50 = a2;
  v51 = a3;
  do
  {
    v20 = String.subscript.getter(v19, a3, v7);
    v5 = v21;
    if ((v21 & 0x2000000000000000) != 0)
      v22 = HIBYTE(v21) & 0xF;
    else
      v22 = v20 & 0xFFFFFFFFFFFFLL;
    if (!v22)
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if ((v21 & 0x1000000000000000) != 0)
    {
      v24 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(0, v20, v21);
    }
    else
    {
      if ((v21 & 0x2000000000000000) != 0)
      {
        v55[0] = v20;
        v55[1] = v21 & 0xFFFFFFFFFFFFFFLL;
        v23 = v55;
      }
      else if ((v20 & 0x1000000000000000) != 0)
      {
        v23 = (_QWORD *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v23 = (_QWORD *)_StringObject.sharedUTF8.getter(v20, v21);
      }
      v24 = _decodeScalar(_:startingAt:)(v23);
    }
    v8 = v24;
    swift_bridgeObjectRelease(v5);
    if ((v8 - 14) <= 0xFFFFFFFB && (v8 - 8232) >= 2 && (_DWORD)v8 != 133)
    {
      v19 = String.index(after:)(v19, a3, v7);
      continue;
    }
    if (v4 >> 14 == v19 >> 14 && (a2 & 1) != 0)
    {
      v19 = String.index(after:)(v19, a3, v7);
      *((_QWORD *)v6 + 2) = v19;
      v4 = v19;
      continue;
    }
    if (v19 >> 14 < v4 >> 14)
      goto LABEL_53;
    v25 = a3;
    v26 = v9;
    v27 = String.subscript.getter(v4, v19, v25, v7);
    v5 = v28;
    v30 = v29;
    v8 = v31;
    v32 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0)
      v32 = sub_10002959C(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
    v34 = *((_QWORD *)v32 + 2);
    v33 = *((_QWORD *)v32 + 3);
    v56 = v32;
    if (v34 >= v33 >> 1)
      v56 = sub_10002959C((char *)(v33 > 1), v34 + 1, 1, v56);
    v35 = v56;
    *((_QWORD *)v56 + 2) = v34 + 1;
    v36 = &v35[32 * v34];
    *((_QWORD *)v36 + 4) = v27;
    *((_QWORD *)v36 + 5) = v5;
    *((_QWORD *)v36 + 6) = v30;
    *((_QWORD *)v36 + 7) = v8;
    v9 = v26;
    *(_QWORD *)(v26 + 16) = v35;
    a3 = v51;
    v7 = v52;
    v4 = String.index(after:)(v19, v51, v52);
    v6 = (char *)v53;
    *(_QWORD *)(v53 + 16) = v4;
    v37 = *((_QWORD *)v35 + 2);
    v19 = v4;
    a2 = v50;
    if (v37 == v49)
      break;
  }
  while (v54 != v19 >> 14);
  if (v54 == v4 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    v39 = v56;
    goto LABEL_50;
  }
  if (v54 >= v4 >> 14)
  {
    v4 = String.subscript.getter(v4, v48, a3, v7);
    v5 = v40;
    v41 = v7;
    v7 = v42;
    v8 = v43;
    swift_bridgeObjectRelease(v41);
    v6 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0)
      goto LABEL_56;
    goto LABEL_47;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  v6 = sub_10002959C(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
LABEL_47:
  v45 = *((_QWORD *)v6 + 2);
  v44 = *((_QWORD *)v6 + 3);
  v39 = v6;
  if (v45 >= v44 >> 1)
    v39 = sub_10002959C((char *)(v44 > 1), v45 + 1, 1, v6);
  *((_QWORD *)v39 + 2) = v45 + 1;
  v46 = &v39[32 * v45];
  *((_QWORD *)v46 + 4) = v4;
  *((_QWORD *)v46 + 5) = v5;
  *((_QWORD *)v46 + 6) = v7;
  *((_QWORD *)v46 + 7) = v8;
  *(_QWORD *)(v9 + 16) = v39;
  v6 = (char *)v53;
LABEL_50:
  swift_bridgeObjectRetain(v39);
  swift_release(v9);
  swift_release(v6);
  return v39;
}

unint64_t sub_100062D68()
{
  uint64_t *v0;

  return ApprovalSettingsState.debugDescription.getter(*v0);
}

uint64_t ApprovalSettingsStateEntry.driverIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t ApprovalSettingsStateEntry.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t ApprovalSettingsStateEntry.source.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_10002B23C(v1, *(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t ApprovalSettingsStateEntry.approvalState.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_100062E00()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100062E34 + 4 * byte_100110CB0[*v0]))(0xD000000000000010, 0x8000000100123A40);
}

uint64_t sub_100062E34()
{
  return 0x4E79616C70736964;
}

uint64_t sub_100062E54()
{
  return 0x7865546567617375;
}

uint64_t sub_100062E70()
{
  return 0x656372756F73;
}

uint64_t sub_100062E84()
{
  return 0x6C61766F72707061;
}

uint64_t sub_100062EA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100067DB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100062ECC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100067D70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100062EF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100067D70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100062F1C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_BYTE *)(a9 + 64) = a10;
  return result;
}

uint64_t ApprovalSettingsStateEntry.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;

  v3 = v1;
  v5 = sub_100005C88(&qword_1001594A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_100067D70();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ApprovalSettingsStateEntry.CodingKeys, &type metadata for ApprovalSettingsStateEntry.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v23) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v23) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v23, v5);
    v16 = v3[4];
    v17 = v3[5];
    LOBYTE(v23) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v23, v5);
    sub_100066ED0((_OWORD *)v3 + 3, &v24);
    sub_100066ED0(&v24, &v23);
    v22 = 3;
    v18 = sub_100066EE0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for ApprovalDBEntrySource, v18);
    LOBYTE(v23) = *((_BYTE *)v3 + 64);
    v22 = 4;
    v19 = sub_100066F24();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for ApprovalState, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 ApprovalSettingsStateEntry.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  char v7;

  sub_10006800C(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_BYTE *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100063154(_QWORD *a1)
{
  return ApprovalSettingsStateEntry.encode(to:)(a1);
}

BOOL sub_100063198(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  char v8;
  _OWORD v9[4];
  char v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_BYTE *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_BYTE *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return _s10driverkitd26ApprovalSettingsStateEntryV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t *)v7, (uint64_t)v9);
}

void ApprovalSettingsStateEntry.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = *v2;
  v5 = v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = v2[3];
  if (v6)
  {
    v7 = v2[2];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v6);
    String.hash(into:)(a1, v7, v6);
    swift_bridgeObjectRelease(v6);
    v8 = v2[5];
    if (v8)
    {
LABEL_3:
      v9 = v2[4];
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v8);
      String.hash(into:)(a1, v9, v8);
      swift_bridgeObjectRelease(v8);
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v8 = v2[5];
    if (v8)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
LABEL_6:
  v10 = v2[7];
  if (v10 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = v2[6];
    Hasher._combine(_:)(1uLL);
    sub_1000122B4(v11, v10);
    Data.hash(into:)(a1, v11, v10);
    sub_100021610(v11, v10);
  }
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + 64));
}

Swift::Int ApprovalSettingsStateEntry.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  ApprovalSettingsStateEntry.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100063358(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  ApprovalSettingsStateEntry.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_100063390()
{
  return ApprovalSettingsStateEntry.debugDescription.getter();
}

uint64_t ApprovalStateUpdateRequest.__allocating_init(entry:callback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  __int128 v8;

  v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 32) = v8;
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(v7 + 56) = a2;
  *(_QWORD *)(v7 + 64) = a3;
  static Date.now.getter();
  return v7;
}

uint64_t ApprovalStateUpdateRequest.init(entry:callback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v14;

  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin();
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 32) = v12;
  *(_BYTE *)(v3 + 48) = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(v3 + 56) = a2;
  *(_QWORD *)(v3 + 64) = a3;
  static Date.now.getter(v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v3 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp, v11, v7);
  return v3;
}

_QWORD *ApprovalStateUpdateRequest.deinit()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = v0[4];
  v2 = v0[5];
  swift_bridgeObjectRelease(v0[3]);
  sub_100021610(v1, v2);
  swift_release(v0[8]);
  v3 = (char *)v0 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp;
  v4 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t ApprovalStateUpdateRequest.__deallocating_deinit()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = v0[4];
  v2 = v0[5];
  swift_bridgeObjectRelease(v0[3]);
  sub_100021610(v1, v2);
  swift_release(v0[8]);
  v3 = (char *)v0 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp;
  v4 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

unint64_t ApprovalStateUpdateRequest.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  __int128 v6;
  Swift::String v7;
  void *v8;
  _OWORD v10[2];
  char v11;

  *(_QWORD *)&v10[0] = 0;
  *((_QWORD *)&v10[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = type metadata accessor for Date(0);
  v2 = sub_1000683F8();
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6 = *(_OWORD *)(v0 + 32);
  v10[0] = *(_OWORD *)(v0 + 16);
  v10[1] = v6;
  v11 = *(_BYTE *)(v0 + 48);
  sub_100067500(v10);
  v7._countAndFlagsBits = ApprovalDBEntry.description.getter();
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  sub_100067584(v10);
  return 0xD000000000000014;
}

unint64_t sub_1000636C0()
{
  return ApprovalStateUpdateRequest.description.getter();
}

uint64_t sub_1000636E4(uint64_t *a1, uint64_t *a2)
{
  return _s10driverkitd26ApprovalStateUpdateRequestC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

BOOL sub_1000636F0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;

  return *(unsigned __int8 *)(v3 + 16) == a3;
}

Swift::Int sub_100063700(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  _QWORD v33[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_100005C88(&qword_100159628);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v8 = result;
  v31 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v31)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v31)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v31)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v31)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v31)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_BYTE *)(*(_QWORD *)(v4 + 56) + v13);
    Hasher.init(_seed:)(v33, *(_QWORD *)(v8 + 40));
    swift_bridgeObjectRetain(v18);
    String.hash(into:)(v33, v19, v18);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v8 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v24);
    *v29 = v19;
    v29[1] = v18;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v24) = v20;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

char *sub_1000639A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_1001595F8);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100063AB4(uint64_t a1)
{
  return sub_1000639A4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100063AC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  int v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t __s1;
  _OWORD v53[4];
  __int128 v54;
  __int128 v55;

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)(v53, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v6);
  ApprovalSettingsStateEntry.hash(into:)((uint64_t)v53);
  v7 = Hasher._finalize()();
  v8 = v6;
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v7 & ~v9;
  v49 = v6 + 56;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
    swift_bridgeObjectRelease(v6);
    goto LABEL_34;
  }
  v44 = v2;
  v45 = a1;
  v46 = v6;
  v47 = ~v9;
  v11 = *(_QWORD *)(a2 + 8);
  v51 = *(_QWORD *)a2;
  do
  {
    v12 = *(_QWORD *)(v8 + 48) + 72 * v10;
    v13 = *(_QWORD *)(v12 + 8);
    v15 = *(_QWORD *)(v12 + 16);
    v14 = *(_QWORD *)(v12 + 24);
    v16 = *(_QWORD *)(v12 + 32);
    v17 = *(_QWORD *)(v12 + 40);
    v18 = *(_QWORD *)(v12 + 56);
    v50 = *(_QWORD *)(v12 + 48);
    v48 = *(unsigned __int8 *)(v12 + 64);
    v19 = *(_QWORD *)v12 == v51 && v13 == v11;
    if (v19
      || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v12, v13, v51, v11, 0), v8 = v46,
                                                                                                 (v20 & 1) != 0))
    {
      v21 = *(_QWORD *)(a2 + 24);
      if (v14)
      {
        if (!v21)
          goto LABEL_4;
        v22 = *(_QWORD *)(a2 + 16);
        if (v15 != v22 || v14 != v21)
        {
          v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, v22, v21, 0);
          v8 = v46;
          if ((v24 & 1) == 0)
            goto LABEL_4;
        }
      }
      else if (v21)
      {
        goto LABEL_4;
      }
      v25 = *(_QWORD *)(a2 + 40);
      if (v17)
      {
        if (!v25)
          goto LABEL_4;
        v26 = *(_QWORD *)(a2 + 32);
        if (v16 != v26 || v17 != v25)
        {
          v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v26, v25, 0);
          v8 = v46;
          if ((v28 & 1) == 0)
            goto LABEL_4;
        }
      }
      else if (v25)
      {
        goto LABEL_4;
      }
      sub_100066ED0((_OWORD *)(a2 + 48), &v54);
      if (v18 >> 60 == 15)
      {
        sub_100066ED0(&v54, v53);
        v8 = v46;
        if (*((_QWORD *)&v53[0] + 1) >> 60 == 15)
        {
          swift_bridgeObjectRetain(v17);
          swift_bridgeObjectRetain(v13);
          swift_bridgeObjectRetain(v14);
          sub_10002B23C(v50, v18);
          v29 = *(unsigned __int8 *)(a2 + 64);
          swift_bridgeObjectRelease(v17);
          swift_bridgeObjectRelease(v14);
          swift_bridgeObjectRelease(v13);
          sub_100021610(v50, v18);
          v8 = v46;
          if (v48 == v29)
          {
            swift_bridgeObjectRelease(v46);
            sub_100069C00((_QWORD *)a2);
            v34 = *(_QWORD *)(*v44 + 48) + 72 * v10;
            v35 = *(_QWORD *)(v34 + 8);
            v36 = *(_QWORD *)(v34 + 16);
            v37 = *(_QWORD *)(v34 + 40);
            v38 = *(_QWORD *)(v34 + 48);
            v39 = *(_QWORD *)(v34 + 56);
            v40 = *(_BYTE *)(v34 + 64);
            *(_QWORD *)v45 = *(_QWORD *)v34;
            *(_QWORD *)(v45 + 8) = v35;
            *(_QWORD *)(v45 + 16) = v36;
            v41 = *(_OWORD *)(v34 + 24);
            *(_OWORD *)(v45 + 24) = v41;
            *(_QWORD *)(v45 + 40) = v37;
            *(_QWORD *)(v45 + 48) = v38;
            *(_QWORD *)(v45 + 56) = v39;
            *(_BYTE *)(v45 + 64) = v40;
            v42 = v41;
            swift_bridgeObjectRetain(v37);
            swift_bridgeObjectRetain(v35);
            swift_bridgeObjectRetain(v42);
            sub_10002B23C(v38, v39);
            return 0;
          }
        }
      }
      else
      {
        sub_100066ED0(&v54, &v55);
        v8 = v46;
        if (*((_QWORD *)&v55 + 1) >> 60 != 15)
          __asm { BR              X8 }
      }
    }
LABEL_4:
    v10 = (v10 + 1) & v47;
  }
  while (((*(_QWORD *)(v49 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  swift_bridgeObjectRelease(v8);
  v3 = v44;
  a1 = v45;
LABEL_34:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  __s1 = *v3;
  *v3 = 0x8000000000000000;
  sub_100067A9C((_QWORD *)a2);
  sub_100064DA4(a2, v10, isUniquelyReferenced_nonNull_native);
  v31 = *v3;
  *v3 = __s1;
  swift_bridgeObjectRelease(v31);
  v32 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v32;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v33 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v33;
  return 1;
}

Swift::Int sub_10006496C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  Swift::UInt v28;
  Swift::UInt v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD v48[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_1001595E8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v41 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v39 = v2;
    v40 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain(v3);
    v12 = 0;
    v42 = v3;
    v43 = v6;
    while (1)
    {
      if (v9)
      {
        v44 = (v9 - 1) & v9;
        v46 = v12;
        v15 = __clz(__rbit64(v9)) | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          return result;
        }
        if (v16 >= v40)
          goto LABEL_45;
        v17 = v41[v16];
        v18 = v12 + 1;
        if (!v17)
        {
          v18 = v12 + 2;
          if (v12 + 2 >= v40)
            goto LABEL_45;
          v17 = v41[v18];
          if (!v17)
          {
            v18 = v12 + 3;
            if (v12 + 3 >= v40)
              goto LABEL_45;
            v17 = v41[v18];
            if (!v17)
            {
              v19 = v12 + 4;
              if (v12 + 4 >= v40)
              {
LABEL_45:
                swift_release(v3);
                v2 = v39;
                v38 = 1 << *(_BYTE *)(v3 + 32);
                if (v38 > 63)
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v41 = -1 << v38;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v41[v19];
              if (!v17)
              {
                while (1)
                {
                  v18 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_51;
                  if (v18 >= v40)
                    goto LABEL_45;
                  v17 = v41[v18];
                  ++v19;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v18 = v12 + 4;
            }
          }
        }
LABEL_26:
        v44 = (v17 - 1) & v17;
        v46 = v18;
        v15 = __clz(__rbit64(v17)) + (v18 << 6);
      }
      v20 = *(_QWORD *)(v3 + 48) + 72 * v15;
      v21 = *(_QWORD *)v20;
      v22 = *(_QWORD *)(v20 + 8);
      v23 = *(_QWORD *)(v20 + 16);
      v24 = *(_QWORD *)(v20 + 24);
      v26 = *(_QWORD *)(v20 + 32);
      v25 = *(_QWORD *)(v20 + 40);
      v27 = *(_QWORD *)(v20 + 56);
      v47 = *(_QWORD *)(v20 + 48);
      v28 = *(unsigned __int8 *)(v20 + 64);
      Hasher.init(_seed:)(v48, *(_QWORD *)(v6 + 40));
      swift_bridgeObjectRetain(v22);
      v45 = v21;
      String.hash(into:)(v48, v21, v22);
      swift_bridgeObjectRelease(v22);
      if (v24)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v24);
        String.hash(into:)(v48, v23, v24);
        swift_bridgeObjectRelease(v24);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v29 = v28;
      if (v25)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v25);
        v30 = v26;
        String.hash(into:)(v48, v26, v25);
        swift_bridgeObjectRelease(v25);
      }
      else
      {
        Hasher._combine(_:)(0);
        v30 = v26;
      }
      if (v27 >> 60 == 15)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1uLL);
        sub_1000122B4(v47, v27);
        Data.hash(into:)(v48, v47, v27);
        sub_100021610(v47, v27);
      }
      Hasher._combine(_:)(v29);
      result = Hasher._finalize()();
      v6 = v43;
      v31 = -1 << *(_BYTE *)(v43 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v10 + 8 * (v32 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v10 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_50;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v10 + 8 * v33);
        }
        while (v37 == -1);
        v13 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v43 + 48) + 72 * v13;
      v12 = v46;
      *(_QWORD *)v14 = v45;
      *(_QWORD *)(v14 + 8) = v22;
      *(_QWORD *)(v14 + 16) = v23;
      *(_QWORD *)(v14 + 24) = v24;
      *(_QWORD *)(v14 + 32) = v30;
      *(_QWORD *)(v14 + 40) = v25;
      *(_QWORD *)(v14 + 48) = v47;
      *(_QWORD *)(v14 + 56) = v27;
      *(_BYTE *)(v14 + 64) = v29;
      ++*(_QWORD *)(v43 + 16);
      v3 = v42;
      v9 = v44;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100064DA4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[4];
  __int128 v43;
  __int128 v44;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_10006496C(v8);
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_100065BCC();
        goto LABEL_39;
      }
      sub_100065DE0(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v42, *(_QWORD *)(*v3 + 40));
    ApprovalSettingsStateEntry.hash(into:)((uint64_t)v42);
    result = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v9 + 32);
    a2 = result & ~v10;
    v39 = v9 + 56;
    v40 = v9;
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v37 = ~v10;
      v11 = *(_QWORD *)v5;
      v12 = *(_QWORD *)(v5 + 8);
      do
      {
        v13 = *(_QWORD *)(v40 + 48) + 72 * a2;
        result = *(_QWORD *)v13;
        v14 = *(_QWORD *)(v13 + 8);
        v16 = *(_QWORD *)(v13 + 16);
        v15 = *(_QWORD *)(v13 + 24);
        v17 = *(_QWORD *)(v13 + 32);
        v18 = *(_QWORD *)(v13 + 40);
        v19 = *(_QWORD *)(v13 + 56);
        v41 = *(_QWORD *)(v13 + 48);
        v38 = *(unsigned __int8 *)(v13 + 64);
        if (*(_QWORD *)v13 != v11 || v14 != v12)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v11, v12, 0);
          if ((result & 1) == 0)
            goto LABEL_11;
        }
        v21 = *(_QWORD *)(v5 + 24);
        if (v15)
        {
          if (!v21)
            goto LABEL_11;
          v22 = *(_QWORD *)(v5 + 16);
          if (v16 != v22 || v15 != v21)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, v22, v21, 0);
            if ((result & 1) == 0)
              goto LABEL_11;
          }
        }
        else if (v21)
        {
          goto LABEL_11;
        }
        v24 = *(_QWORD *)(v5 + 40);
        if (v18)
        {
          if (v24)
          {
            v25 = *(_QWORD *)(v5 + 32);
            v26 = v17 == v25 && v18 == v24;
            if (v26
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v25, v24, 0), (result & 1) != 0))
            {
LABEL_33:
              sub_100066ED0((_OWORD *)(v5 + 48), &v43);
              if (v19 >> 60 == 15)
              {
                result = (uint64_t)sub_100066ED0(&v43, v42);
                if (*((_QWORD *)&v42[0] + 1) >> 60 == 15)
                {
                  swift_bridgeObjectRetain(v18);
                  swift_bridgeObjectRetain(v14);
                  swift_bridgeObjectRetain(v15);
                  sub_10002B23C(v41, v19);
                  v27 = *(unsigned __int8 *)(v5 + 64);
                  swift_bridgeObjectRelease(v18);
                  swift_bridgeObjectRelease(v15);
                  swift_bridgeObjectRelease(v14);
                  result = sub_100021610(v41, v19);
                  if (v38 == v27)
                  {
                    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ApprovalSettingsStateEntry);
                    __break(1u);
                    JUMPOUT(0x100065B9CLL);
                  }
                }
              }
              else
              {
                result = (uint64_t)sub_100066ED0(&v43, &v44);
                if (*((_QWORD *)&v44 + 1) >> 60 != 15)
                  __asm { BR              X8 }
              }
            }
          }
        }
        else if (!v24)
        {
          goto LABEL_33;
        }
LABEL_11:
        a2 = (a2 + 1) & v37;
      }
      while (((*(_QWORD *)(v39 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_39:
  v28 = *v36;
  *(_QWORD *)(*v36 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v29 = *(_QWORD *)(v28 + 48) + 72 * a2;
  *(_OWORD *)v29 = *(_OWORD *)v5;
  v30 = *(_OWORD *)(v5 + 16);
  v31 = *(_OWORD *)(v5 + 32);
  v32 = *(_OWORD *)(v5 + 48);
  *(_BYTE *)(v29 + 64) = *(_BYTE *)(v5 + 64);
  *(_OWORD *)(v29 + 32) = v31;
  *(_OWORD *)(v29 + 48) = v32;
  *(_OWORD *)(v29 + 16) = v30;
  v33 = *(_QWORD *)(v28 + 16);
  v34 = __OFADD__(v33, 1);
  v35 = v33 + 1;
  if (v34)
  {
    __break(1u);
    JUMPOUT(0x100065AECLL);
  }
  *(_QWORD *)(v28 + 16) = v35;
  return result;
}

void *sub_100065BCC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;

  sub_100005C88(&qword_1001595E8);
  v29 = v0;
  v1 = *v0;
  v2 = static _SetStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v1);
    *v29 = v3;
    return result;
  }
  result = (void *)(v2 + 56);
  v5 = v1 + 56;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 56 + 8 * v6)
    result = memmove(result, (const void *)(v1 + 56), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v26 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v12)
      goto LABEL_28;
    v27 = *(_QWORD *)(v5 + 8 * v26);
    ++v8;
    if (!v27)
    {
      v8 = v26 + 1;
      if (v26 + 1 >= v12)
        goto LABEL_28;
      v27 = *(_QWORD *)(v5 + 8 * v8);
      if (!v27)
      {
        v8 = v26 + 2;
        if (v26 + 2 >= v12)
          goto LABEL_28;
        v27 = *(_QWORD *)(v5 + 8 * v8);
        if (!v27)
          break;
      }
    }
LABEL_27:
    v11 = (v27 - 1) & v27;
    v14 = __clz(__rbit64(v27)) + (v8 << 6);
LABEL_12:
    v15 = 72 * v14;
    v16 = *(_QWORD *)(v1 + 48) + v15;
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 40);
    v20 = *(_QWORD *)(v16 + 48);
    v21 = *(_QWORD *)(v16 + 56);
    v22 = *(_BYTE *)(v16 + 64);
    v23 = *(_QWORD *)(v3 + 48) + v15;
    v24 = *(_OWORD *)(v16 + 24);
    *(_QWORD *)v23 = *(_QWORD *)v16;
    *(_QWORD *)(v23 + 8) = v17;
    *(_QWORD *)(v23 + 16) = v18;
    *(_OWORD *)(v23 + 24) = v24;
    *(_QWORD *)(v23 + 40) = v19;
    *(_QWORD *)(v23 + 48) = v20;
    *(_QWORD *)(v23 + 56) = v21;
    *(_BYTE *)(v23 + 64) = v22;
    v25 = v24;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v25);
    result = (void *)sub_10002B23C(v20, v21);
  }
  v28 = v26 + 3;
  if (v28 >= v12)
    goto LABEL_28;
  v27 = *(_QWORD *)(v5 + 8 * v28);
  if (v27)
  {
    v8 = v28;
    goto LABEL_27;
  }
  while (1)
  {
    v8 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v8 >= v12)
      goto LABEL_28;
    v27 = *(_QWORD *)(v5 + 8 * v8);
    ++v28;
    if (v27)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_100065DE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD v48[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_1001595E8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_47:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v39 = v2;
  v40 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v41 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  v42 = v3;
  v43 = v6;
  while (1)
  {
    if (v9)
    {
      v44 = (v9 - 1) & v9;
      v46 = v12;
      v15 = __clz(__rbit64(v9)) | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    if (v16 >= v41)
      goto LABEL_45;
    v17 = *(_QWORD *)(v40 + 8 * v16);
    v18 = v12 + 1;
    if (!v17)
    {
      v18 = v12 + 2;
      if (v12 + 2 >= v41)
        goto LABEL_45;
      v17 = *(_QWORD *)(v40 + 8 * v18);
      if (!v17)
      {
        v18 = v12 + 3;
        if (v12 + 3 >= v41)
          goto LABEL_45;
        v17 = *(_QWORD *)(v40 + 8 * v18);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v44 = (v17 - 1) & v17;
    v46 = v18;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_27:
    v20 = *(_QWORD *)(v3 + 48) + 72 * v15;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    v25 = *(_QWORD *)(v20 + 40);
    v47 = *(_QWORD *)(v20 + 32);
    v27 = *(_QWORD *)(v20 + 48);
    v26 = *(_QWORD *)(v20 + 56);
    v28 = *(unsigned __int8 *)(v20 + 64);
    Hasher.init(_seed:)(v48, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain_n(v22, 2);
    swift_bridgeObjectRetain(v24);
    sub_10002B23C(v27, v26);
    v45 = v21;
    String.hash(into:)(v48, v21, v22);
    swift_bridgeObjectRelease(v22);
    if (v24)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v24);
      v29 = v23;
      String.hash(into:)(v48, v23, v24);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      v29 = v23;
      Hasher._combine(_:)(0);
    }
    v30 = v28;
    if (v25)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v25);
      v31 = v47;
      String.hash(into:)(v48, v47, v25);
      swift_bridgeObjectRelease(v25);
    }
    else
    {
      Hasher._combine(_:)(0);
      v31 = v47;
    }
    if (v26 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      sub_1000122B4(v27, v26);
      Data.hash(into:)(v48, v27, v26);
      sub_100021610(v27, v26);
    }
    Hasher._combine(_:)(v30);
    result = Hasher._finalize()();
    v6 = v43;
    v32 = -1 << *(_BYTE *)(v43 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v10 + 8 * (v33 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v10 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_48;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v10 + 8 * v34);
      }
      while (v38 == -1);
      v13 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v43 + 48) + 72 * v13;
    v12 = v46;
    *(_QWORD *)v14 = v45;
    *(_QWORD *)(v14 + 8) = v22;
    *(_QWORD *)(v14 + 16) = v29;
    *(_QWORD *)(v14 + 24) = v24;
    *(_QWORD *)(v14 + 32) = v31;
    *(_QWORD *)(v14 + 40) = v25;
    *(_QWORD *)(v14 + 48) = v27;
    *(_QWORD *)(v14 + 56) = v26;
    *(_BYTE *)(v14 + 64) = v30;
    ++*(_QWORD *)(v43 + 16);
    v3 = v42;
    v9 = v44;
  }
  v19 = v12 + 4;
  if (v12 + 4 >= v41)
  {
LABEL_45:
    result = swift_release_n(v3, 2);
    v2 = v39;
    goto LABEL_47;
  }
  v17 = *(_QWORD *)(v40 + 8 * v19);
  if (v17)
  {
    v18 = v12 + 4;
    goto LABEL_26;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v41)
      goto LABEL_45;
    v17 = *(_QWORD *)(v40 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_26;
  }
LABEL_49:
  __break(1u);
  return result;
}

_BYTE *sub_100066208(_BYTE *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = (uint64_t *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    v6 = *v5;
    v7 = v5[1];
    *result = *(_BYTE *)(*(_QWORD *)(a5 + 56) + a2);
    swift_bridgeObjectRetain(v7);
    return (_BYTE *)v6;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10006628C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, __n128))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = (unint64_t *)result;
  v6 = 0;
  v25 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }
    v18 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v10)
      return sub_100063700(v23, a2, v24, a3);
    v19 = *(_QWORD *)(v25 + 8 * v18);
    ++v6;
    if (!v19)
    {
      v6 = v18 + 1;
      if (v18 + 1 >= v10)
        return sub_100063700(v23, a2, v24, a3);
      v19 = *(_QWORD *)(v25 + 8 * v6);
      if (!v19)
      {
        v6 = v18 + 2;
        if (v18 + 2 >= v10)
          return sub_100063700(v23, a2, v24, a3);
        v19 = *(_QWORD *)(v25 + 8 * v6);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v9 = (v19 - 1) & v19;
    v12 = __clz(__rbit64(v19)) + (v6 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 56) + v12);
    v17 = swift_bridgeObjectRetain(v15);
    LOBYTE(v16) = a4(v14, v15, v16, v17);
    result = swift_bridgeObjectRelease(v15);
    if ((v16 & 1) != 0)
    {
      *(unint64_t *)((char *)v23 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
        return sub_100063700(v23, a2, v24, a3);
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v10)
    return sub_100063700(v23, a2, v24, a3);
  v19 = *(_QWORD *)(v25 + 8 * v20);
  if (v19)
  {
    v6 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v6 >= v10)
      return sub_100063700(v23, a2, v24, a3);
    v19 = *(_QWORD *)(v25 + 8 * v6);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100066464(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, __n128), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v6 = isStackAllocationSafe;
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    v12 = sub_10006628C((uint64_t)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v10, v6, a2);
    if (v3)
      swift_willThrow(v12);
    else
      return v12;
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v11, -1);
    bzero(v13, v11);
    a3 = sub_10006628C((uint64_t)v13, v10, v6, a2);
    swift_slowDealloc(v13, -1, -1);
  }
  return a3;
}

uint64_t sub_1000665D4(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000665DC(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

unint64_t sub_1000665E4()
{
  unint64_t result;

  result = qword_10015FB70;
  if (!qword_10015FB70)
  {
    result = swift_getWitnessTable(&unk_100111AA8, &type metadata for ApprovalDBEntrySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FB70);
  }
  return result;
}

unint64_t sub_100066628()
{
  unint64_t result;

  result = qword_10015FB78;
  if (!qword_10015FB78)
  {
    result = swift_getWitnessTable(&unk_100111A58, &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FB78);
  }
  return result;
}

unint64_t sub_10006666C()
{
  unint64_t result;

  result = qword_10015FB80;
  if (!qword_10015FB80)
  {
    result = swift_getWitnessTable(&unk_100111A08, &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FB80);
  }
  return result;
}

uint64_t sub_1000666B0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7261507473726966 && a2 == 0xEA00000000007974)
  {
    v5 = 0xEA00000000007974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7261507473726966, 0xEA00000000007974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7261506472696874 && a2 == 0xEA00000000007974)
  {
    swift_bridgeObjectRelease(0xEA00000000007974);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7261506472696874, 0xEA00000000007974, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000667B8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100123A20)
  {
    swift_bridgeObjectRelease(0x8000000100123A20);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100123A20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

_QWORD *sub_10006683C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;

  v2 = sub_100005C88(&qword_100159608);
  v3 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  v35 = v3;
  __chkstk_darwin(v2);
  v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005C88(&qword_100159610);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005C88(&qword_100159618);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v37 = a1;
  v15 = sub_100004DE4(a1, v13);
  v16 = sub_1000665E4();
  v17 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ApprovalDBEntrySource.CodingKeys, &type metadata for ApprovalDBEntrySource.CodingKeys, v16, v13, v14);
  if (!v17)
  {
    v33 = v5;
    v18 = v36;
    v39 = v10;
    v19 = KeyedDecodingContainer.allKeys.getter(v9);
    v20 = v19;
    if (*(_QWORD *)(v19 + 16) == 1)
    {
      if ((*(_BYTE *)(v19 + 32) & 1) != 0)
      {
        LOBYTE(v38) = 1;
        v21 = sub_100066628();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys, &v38, v9, &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys, v21);
        v22 = sub_10001AB98();
        v23 = v34;
        KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, v24, v34, &type metadata for Data, v22);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v23);
        swift_bridgeObjectRelease(v20);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v9);
        v15 = v38;
      }
      else
      {
        LOBYTE(v38) = 0;
        v30 = sub_10006666C();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys, &v38, v9, &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys, v30);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v33);
        swift_bridgeObjectRelease(v20);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v9);
        v15 = 0;
      }
    }
    else
    {
      v25 = type metadata accessor for DecodingError(0);
      swift_allocError(v25, &protocol witness table for DecodingError, 0, 0);
      v27 = v26;
      v15 = v12;
      sub_100005C88(&qword_100159620);
      *v27 = &type metadata for ApprovalDBEntrySource;
      v28 = KeyedDecodingContainer.codingPath.getter(v9);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v28, 0xD00000000000002BLL, 0x8000000100123A60, 0);
      v29 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, enum case for DecodingError.typeMismatch(_:), v25);
      swift_willThrow(v29);
      swift_bridgeObjectRelease(v20);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v9);
    }
  }
  sub_100005D08(v37);
  return v15;
}

uint64_t _s10driverkitd10ApprovalDBV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned __int8 *i;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == *(_QWORD *)(a3 + 16))
  {
    if (!v3)
      return 1;
    swift_bridgeObjectRetain(a1);
    for (i = (unsigned __int8 *)(v6 + 64); ; i += 40)
    {
      v8 = *((_QWORD *)i - 2);
      v9 = *((_QWORD *)i - 1);
      v10 = *i;
      v11 = *((_QWORD *)i - 4);
      v12 = *((_QWORD *)i - 3);
      swift_bridgeObjectRetain(v12);
      sub_10002B23C(v8, v9);
      v13 = sub_10005E2B8(v11, v12, v8, v9, a3);
      swift_bridgeObjectRelease(v12);
      if (v13 == 3)
      {
        swift_bridgeObjectRelease(a1);
        sub_100021610(v8, v9);
        return 0;
      }
      sub_100021610(v8, v9);
      if (v10 != v13)
        break;
      if (!--v3)
      {
        swift_bridgeObjectRelease(a1);
        return 1;
      }
    }
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

uint64_t _s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    if (a4 >> 60 == 15)
      return 1;
  }
  else if (a4 >> 60 != 15)
  {
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_100066E64(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_100066E8C()
{
  unint64_t result;

  result = qword_10015FB88;
  if (!qword_10015FB88)
  {
    result = swift_getWitnessTable(&unk_1001119B8, &type metadata for ApprovalDBEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FB88);
  }
  return result;
}

_OWORD *sub_100066ED0(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

unint64_t sub_100066EE0()
{
  unint64_t result;

  result = qword_100159450;
  if (!qword_100159450)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDBEntrySource, &type metadata for ApprovalDBEntrySource);
    atomic_store(result, (unint64_t *)&qword_100159450);
  }
  return result;
}

unint64_t sub_100066F24()
{
  unint64_t result;

  result = qword_100159458;
  if (!qword_100159458)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalState, &type metadata for ApprovalState);
    atomic_store(result, (unint64_t *)&qword_100159458);
  }
  return result;
}

BOOL _s10driverkitd26ApprovalSettingsStateEntryV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  if (v4 != *(_QWORD *)a2 || v5 != v6)
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0);
    result = 0;
    if ((v8 & 1) == 0)
      return result;
  }
  v10 = a1[3];
  v11 = *(_QWORD *)(a2 + 24);
  if (!v10)
  {
    if (v11)
      return 0;
    goto LABEL_15;
  }
  if (!v11)
    return 0;
  v12 = a1[2];
  v13 = *(_QWORD *)(a2 + 16);
  v14 = v12 == v13 && v10 == v11;
  if (v14 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0), result = 0, (v15 & 1) != 0))
  {
LABEL_15:
    v16 = a1[5];
    v17 = *(_QWORD *)(a2 + 40);
    if (v16)
    {
      if (v17)
      {
        v18 = a1[4];
        v19 = *(_QWORD *)(a2 + 32);
        if (v18 != v19 || v16 != v17)
        {
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v16, v19, v17, 0);
          result = 0;
          if ((v20 & 1) == 0)
            return result;
        }
        goto LABEL_22;
      }
    }
    else if (!v17)
    {
LABEL_22:
      if ((_s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(a1[6], a1[7], *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56)) & 1) != 0)return *((unsigned __int8 *)a1 + 64) == *(unsigned __int8 *)(a2 + 64);
    }
    return 0;
  }
  return result;
}

uint64_t _s10driverkitd26ApprovalStateUpdateRequestC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(unsigned __int8 *)(a1 + 48);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(unsigned __int8 *)(a2 + 48);
  v14 = v4 == v9 && v5 == v10;
  if ((v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v9, v10, 0) & 1) != 0)
    && (_s10driverkitd21ApprovalDBEntrySourceO21__derived_enum_equalsySbAC_ACtFZ_0(v6, v7, v11, v12) & 1) != 0
    && v8 == v13)
  {
    return static Date.== infix(_:_:)(a1 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp, a2 + OBJC_IVAR____TtC10driverkitd26ApprovalStateUpdateRequest_timestamp);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100067118(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100123A40;
    if (a2 == 0x8000000100123A40)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100123A40, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v6 = 0xE600000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6C61766F72707061 && a2 == 0xED00006574617453)
  {
    swift_bridgeObjectRelease(0xED00006574617453);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C61766F72707061, 0xED00006574617453, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100067284@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v5 = sub_100005C88(&qword_100159600);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_100066E8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ApprovalDBEntry.CodingKeys, &type metadata for ApprovalDBEntry.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D08(a1);
  LOBYTE(v25) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  v14 = v13;
  v24 = v12;
  v27 = 1;
  v15 = sub_100069B44();
  swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for ApprovalDBEntrySource, &v27, v5, &type metadata for ApprovalDBEntrySource, v15);
  v27 = 2;
  v22 = v26;
  v23 = v25;
  sub_10002B23C(v25, v26);
  v16 = sub_100069B88();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for ApprovalState, &v27, v5, &type metadata for ApprovalState, v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = v25;
  swift_bridgeObjectRetain(v14);
  v19 = v22;
  v18 = v23;
  sub_10002B23C(v23, v22);
  sub_100021610(v18, v19);
  swift_bridgeObjectRelease(v14);
  sub_100005D08(a1);
  swift_bridgeObjectRelease(v14);
  result = sub_100021610(v18, v19);
  *(_QWORD *)a2 = v24;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v19;
  *(_BYTE *)(a2 + 32) = v17;
  return result;
}

_QWORD *sub_100067500(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  v3 = a1[3];
  swift_bridgeObjectRetain(a1[1]);
  sub_10002B23C(v2, v3);
  return a1;
}

unint64_t sub_100067540()
{
  unint64_t result;

  result = qword_100159460;
  if (!qword_100159460)
  {
    result = swift_getWitnessTable(&unk_100110E60, &type metadata for ApprovalsError);
    atomic_store(result, (unint64_t *)&qword_100159460);
  }
  return result;
}

_QWORD *sub_100067584(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  v3 = a1[3];
  swift_bridgeObjectRelease(a1[1]);
  sub_100021610(v2, v3);
  return a1;
}

uint64_t sub_1000675C4(uint64_t a1)
{
  sub_10002B23C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000675F0(uint64_t a1)
{
  sub_100021610(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_10006761C()
{
  unint64_t result;

  result = qword_10015FB90;
  if (!qword_10015FB90)
  {
    result = swift_getWitnessTable(&unk_100111968, &type metadata for ApprovalDB.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FB90);
  }
  return result;
}

unint64_t sub_100067660()
{
  unint64_t result;

  result = qword_10015FB98;
  if (!qword_10015FB98)
  {
    result = swift_getWitnessTable(&unk_100111940, &type metadata for ApprovalDB.V0);
    atomic_store(result, (unint64_t *)&qword_10015FB98);
  }
  return result;
}

_QWORD *sub_1000676A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v3 = sub_100005C88(&qword_1001595A0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100004DE4(a1, v7);
  v10 = sub_100069A78();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ApprovalDB.V0.CodingKeys, &type metadata for ApprovalDB.V0.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_100005D08(a1);
  }
  else
  {
    v11 = sub_100005C88(&qword_100159588);
    v12 = sub_100069C60(&qword_1001595A8, &qword_100159588, (void (*)(void))sub_100069B00, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = (_QWORD *)v15[1];
    sub_100005D08(a1);
  }
  return v9;
}

uint64_t sub_1000677F0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 12406 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12406, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000678C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;

  v3 = sub_100005C88(&qword_1001595F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100004DE4(a1, v7);
  v9 = sub_10006761C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ApprovalDB.CodingKeys, &type metadata for ApprovalDB.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100005D08(a1);
  }
  else
  {
    HIBYTE(v13) = 0;
    v10 = sub_100069D08();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for ApprovalDB.V0, (char *)&v13 + 7, v3, &type metadata for ApprovalDB.V0, v10);
    v7 = v14;
    BYTE6(v13) = 1;
    v12 = swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decode(_:forKey:)((char *)&v13 + 6, v3, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100005D08(a1);
    swift_bridgeObjectRelease(v7);
  }
  return v7;
}

unint64_t sub_100067A58()
{
  unint64_t result;

  result = qword_100159470;
  if (!qword_100159470)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalSettingsStateEntry, &type metadata for ApprovalSettingsStateEntry);
    atomic_store(result, (unint64_t *)&qword_100159470);
  }
  return result;
}

_QWORD *sub_100067A9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[7];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10002B23C(v4, v5);
  return a1;
}

unint64_t sub_100067AFC()
{
  unint64_t result;

  result = qword_10015FBA0;
  if (!qword_10015FBA0)
  {
    result = swift_getWitnessTable(&unk_1001118F0, &type metadata for ApprovalSettingsState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015FBA0);
  }
  return result;
}

unint64_t sub_100067B40()
{
  unint64_t result;

  result = qword_100159490;
  if (!qword_100159490)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalSettingsStateEntry, &type metadata for ApprovalSettingsStateEntry);
    atomic_store(result, (unint64_t *)&qword_100159490);
  }
  return result;
}

_QWORD *sub_100067B84(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v3 = sub_100005C88(&qword_1001595D0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100004DE4(a1, v7);
  v10 = sub_100067AFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ApprovalSettingsState.CodingKeys, &type metadata for ApprovalSettingsState.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_100005D08(a1);
  }
  else
  {
    v11 = sub_100005C88(&qword_100159480);
    v12 = sub_100069C60(&qword_1001595D8, &qword_100159480, (void (*)(void))sub_100069CC4, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = (_QWORD *)v15[1];
    sub_100005D08(a1);
  }
  return v9;
}

uint64_t sub_100067CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a7);
    return sub_100021610(a8, a9);
  }
  return result;
}

uint64_t sub_100067D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100159498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100067D70()
{
  unint64_t result;

  result = qword_10015FBA8[0];
  if (!qword_10015FBA8[0])
  {
    result = swift_getWitnessTable(&unk_1001118A0, &type metadata for ApprovalSettingsStateEntry.CodingKeys);
    atomic_store(result, qword_10015FBA8);
  }
  return result;
}

uint64_t sub_100067DB4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100123A40;
    if (a2 == 0x8000000100123A40)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100123A40, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61)
  {
    v6 = 0xEB00000000656D61;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E79616C70736964, 0xEB00000000656D61, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x7865546567617375 && a2 == 0xE900000000000074)
  {
    v7 = 0xE900000000000074;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865546567617375, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x6C61766F72707061 && a2 == 0xED00006574617453)
  {
    swift_bridgeObjectRelease(0xED00006574617453);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C61766F72707061, 0xED00006574617453, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10006800C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;

  v5 = sub_100005C88(&qword_1001595B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_100067D70();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ApprovalSettingsStateEntry.CodingKeys, &type metadata for ApprovalSettingsStateEntry.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D08(a1);
  LOBYTE(v36) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
  v14 = v13;
  v34 = v12;
  LOBYTE(v36) = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5);
  v35 = v16;
  v31 = v15;
  LOBYTE(v36) = 2;
  swift_bridgeObjectRetain(v16);
  v33 = 0;
  v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5);
  v38 = 3;
  v18 = v17;
  v19 = sub_100069B44();
  swift_bridgeObjectRetain(v18);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for ApprovalDBEntrySource, &v38, v5, &type metadata for ApprovalDBEntrySource, v19);
  v32 = v18;
  v20 = v36;
  v38 = 4;
  v29 = v37;
  sub_10002B23C(v36, v37);
  v21 = sub_100069B88();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for ApprovalState, &v38, v5, &type metadata for ApprovalState, v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = v36;
  swift_bridgeObjectRetain(v14);
  v23 = v20;
  v24 = v35;
  swift_bridgeObjectRetain(v35);
  v25 = v32;
  swift_bridgeObjectRetain(v32);
  v26 = v29;
  sub_10002B23C(v23, v29);
  sub_100021610(v23, v26);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  sub_100005D08(a1);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v14);
  result = sub_100021610(v23, v26);
  *(_QWORD *)a2 = v34;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v31;
  *(_QWORD *)(a2 + 24) = v24;
  *(_QWORD *)(a2 + 32) = v30;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v23;
  *(_QWORD *)(a2 + 56) = v26;
  *(_BYTE *)(a2 + 64) = v22;
  return result;
}

unint64_t sub_1000683F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AC00;
  if (!qword_10015AC00)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_10015AC00);
  }
  return result;
}

uint64_t sub_100068444()
{
  return sub_10001284C(&qword_1001594A8, &qword_1001594B0, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100068474()
{
  unint64_t result;

  result = qword_1001594B8;
  if (!qword_1001594B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDBEntrySource, &type metadata for ApprovalDBEntrySource);
    atomic_store(result, (unint64_t *)&qword_1001594B8);
  }
  return result;
}

unint64_t sub_1000684BC()
{
  unint64_t result;

  result = qword_1001594C0;
  if (!qword_1001594C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalSettingsStateEntry, &type metadata for ApprovalSettingsStateEntry);
    atomic_store(result, (unint64_t *)&qword_1001594C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalState()
{
  return &type metadata for ApprovalState;
}

uint64_t destroy for ApprovalsError(uint64_t *a1)
{
  return sub_1000665DC(*a1, a1[1]);
}

uint64_t _s10driverkitd14ApprovalsErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000665D4(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ApprovalsError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000665D4(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000665DC(v6, v7);
  return a1;
}

__n128 initializeWithTake for ApprovalsError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ApprovalsError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000665DC(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalsError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalsError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000686AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000686B4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ApprovalsError()
{
  return &type metadata for ApprovalsError;
}

uint64_t *destroy for ApprovalDBEntrySource(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0)
    return (uint64_t *)sub_100011F40(*result, v1);
  return result;
}

uint64_t _s10driverkitd21ApprovalDBEntrySourceOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_1000122B4(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for ApprovalDBEntrySource(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a1[1];
  v5 = a2[1];
  v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      v9 = *a2;
      sub_1000122B4(v9, v5);
      v10 = *a1;
      v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_100011F40(v10, v11);
      return a1;
    }
    sub_100011F40(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v7 = *a2;
  sub_1000122B4(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

__n128 initializeWithTake for CodeSigningHash(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for ApprovalDBEntrySource(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_100011F40(v7, v4);
      return a1;
    }
    sub_100011F40(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalDBEntrySource(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  if (v3 + 1 >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ApprovalDBEntrySource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 12;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_1000688E0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  else
    return 0;
}

_QWORD *sub_100068908(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource()
{
  return &type metadata for ApprovalDBEntrySource;
}

uint64_t destroy for ApprovalDBEntry(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_bridgeObjectRelease(a1[1]);
  v3 = a1[3];
  if (v3 >> 60 != 15)
    return sub_100011F40(a1[2], v3);
  return result;
}

uint64_t initializeWithCopy for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v4);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    sub_1000122B4(v7, v6);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v6;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (uint64_t *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >> 60 != 15)
  {
    if (v7 >> 60 != 15)
    {
      v9 = *v6;
      sub_1000122B4(*v6, *(_QWORD *)(a2 + 24));
      v10 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = v7;
      sub_100011F40(v10, v11);
      goto LABEL_8;
    }
    sub_100068ADC(a1 + 16);
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
    goto LABEL_8;
  }
  v8 = *v6;
  sub_1000122B4(*v6, *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v7;
LABEL_8:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t sub_100068ADC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005C88(&qword_1001594C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 initializeWithTake for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ApprovalDBEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = (_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (v8 >> 60 != 15)
    {
      v9 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v6;
      *(_QWORD *)(a1 + 24) = v8;
      sub_100011F40(v9, v7);
      goto LABEL_6;
    }
    sub_100068ADC(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
LABEL_6:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalDBEntry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalDBEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntry()
{
  return &type metadata for ApprovalDBEntry;
}

uint64_t *initializeBufferWithCopyOfBuffer for ApprovalDB(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ApprovalDB(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for ApprovalDB(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for ApprovalDB(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalDB(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalDB(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDB()
{
  return &type metadata for ApprovalDB;
}

ValueMetadata *type metadata accessor for ApprovalSettingsState()
{
  return &type metadata for ApprovalSettingsState;
}

uint64_t destroy for ApprovalSettingsStateEntry(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  result = swift_bridgeObjectRelease(a1[5]);
  v3 = a1[7];
  if (v3 >> 60 != 15)
    return sub_100011F40(a1[6], v3);
  return result;
}

uint64_t initializeWithCopy for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = (uint64_t *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
  }
  else
  {
    v9 = *v7;
    sub_1000122B4(*v7, v8);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v8;
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (uint64_t *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56) >> 60 != 15)
  {
    if (v11 >> 60 != 15)
    {
      v13 = *v10;
      sub_1000122B4(*v10, *(_QWORD *)(a2 + 56));
      v14 = *(_QWORD *)(a1 + 48);
      v15 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 56) = v11;
      sub_100011F40(v14, v15);
      goto LABEL_8;
    }
    sub_100068ADC(a1 + 48);
    goto LABEL_6;
  }
  if (v11 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
    goto LABEL_8;
  }
  v12 = *v10;
  sub_1000122B4(*v10, *(_QWORD *)(a2 + 56));
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
LABEL_8:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ApprovalSettingsStateEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = (_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  if (v11 >> 60 != 15)
  {
    v12 = *(_QWORD *)(a2 + 56);
    if (v12 >> 60 != 15)
    {
      v13 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = *v10;
      *(_QWORD *)(a1 + 56) = v12;
      sub_100011F40(v13, v11);
      goto LABEL_6;
    }
    sub_100068ADC(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
LABEL_6:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApprovalSettingsStateEntry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApprovalSettingsStateEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApprovalSettingsStateEntry()
{
  return &type metadata for ApprovalSettingsStateEntry;
}

uint64_t sub_100069148()
{
  return type metadata accessor for ApprovalStateUpdateRequest(0);
}

uint64_t type metadata accessor for ApprovalStateUpdateRequest(uint64_t a1)
{
  uint64_t result;

  result = qword_100160C30;
  if (!qword_100160C30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApprovalStateUpdateRequest);
  return result;
}

uint64_t sub_10006918C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "!";
  v4[1] = (char *)&value witness table for () + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ApprovalSettingsStateEntry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10006925C + 4 * byte_100110CBA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100069290 + 4 * byte_100110CB5[v4]))();
}

uint64_t sub_100069290(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000692A0);
  return result;
}

uint64_t sub_1000692AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000692B4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000692B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000692C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApprovalSettingsStateEntry.CodingKeys()
{
  return &type metadata for ApprovalSettingsStateEntry.CodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalSettingsState.CodingKeys()
{
  return &type metadata for ApprovalSettingsState.CodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalDB.V0()
{
  return &type metadata for ApprovalDB.V0;
}

ValueMetadata *type metadata accessor for ApprovalDB.CodingKeys()
{
  return &type metadata for ApprovalDB.CodingKeys;
}

uint64_t _s10driverkitd13ApprovalStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10006936C + 4 * byte_100110CC4[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000693A0 + 4 * byte_100110CBF[v4]))();
}

uint64_t sub_1000693A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000693A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000693B0);
  return result;
}

uint64_t sub_1000693BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000693C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000693C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000693D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntry.CodingKeys()
{
  return &type metadata for ApprovalDBEntry.CodingKeys;
}

uint64_t _s10driverkitd10ApprovalDBV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100069438 + 4 * byte_100110CCE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10006946C + 4 * byte_100110CC9[v4]))();
}

uint64_t sub_10006946C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069474(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006947CLL);
  return result;
}

uint64_t sub_100069488(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100069490);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100069494(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006949C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource.CodingKeys()
{
  return &type metadata for ApprovalDBEntrySource.CodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource.FirstPartyCodingKeys()
{
  return &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys;
}

ValueMetadata *type metadata accessor for ApprovalDBEntrySource.ThirdPartyCodingKeys()
{
  return &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys;
}

unint64_t sub_1000694DC()
{
  unint64_t result;

  result = qword_100160D40[0];
  if (!qword_100160D40[0])
  {
    result = swift_getWitnessTable(&unk_100111468, &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys);
    atomic_store(result, qword_100160D40);
  }
  return result;
}

unint64_t sub_100069524()
{
  unint64_t result;

  result = qword_100161050[0];
  if (!qword_100161050[0])
  {
    result = swift_getWitnessTable(&unk_100111570, &type metadata for ApprovalDBEntrySource.CodingKeys);
    atomic_store(result, qword_100161050);
  }
  return result;
}

unint64_t sub_10006956C()
{
  unint64_t result;

  result = qword_100161260[0];
  if (!qword_100161260[0])
  {
    result = swift_getWitnessTable(&unk_100111628, &type metadata for ApprovalDBEntry.CodingKeys);
    atomic_store(result, qword_100161260);
  }
  return result;
}

unint64_t sub_1000695B4()
{
  unint64_t result;

  result = qword_100161470[0];
  if (!qword_100161470[0])
  {
    result = swift_getWitnessTable(&unk_1001116E0, &type metadata for ApprovalDB.CodingKeys);
    atomic_store(result, qword_100161470);
  }
  return result;
}

unint64_t sub_1000695FC()
{
  unint64_t result;

  result = qword_100161700[0];
  if (!qword_100161700[0])
  {
    result = swift_getWitnessTable(&unk_1001117C0, &type metadata for ApprovalSettingsState.CodingKeys);
    atomic_store(result, qword_100161700);
  }
  return result;
}

unint64_t sub_100069644()
{
  unint64_t result;

  result = qword_100161910[0];
  if (!qword_100161910[0])
  {
    result = swift_getWitnessTable(&unk_100111878, &type metadata for ApprovalSettingsStateEntry.CodingKeys);
    atomic_store(result, qword_100161910);
  }
  return result;
}

unint64_t sub_10006968C()
{
  unint64_t result;

  result = qword_100161A20;
  if (!qword_100161A20)
  {
    result = swift_getWitnessTable(&unk_1001117E8, &type metadata for ApprovalSettingsStateEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161A20);
  }
  return result;
}

unint64_t sub_1000696D4()
{
  unint64_t result;

  result = qword_100161A28[0];
  if (!qword_100161A28[0])
  {
    result = swift_getWitnessTable(&unk_100111810, &type metadata for ApprovalSettingsStateEntry.CodingKeys);
    atomic_store(result, qword_100161A28);
  }
  return result;
}

unint64_t sub_10006971C()
{
  unint64_t result;

  result = qword_100161AB0;
  if (!qword_100161AB0)
  {
    result = swift_getWitnessTable(&unk_100111730, &type metadata for ApprovalSettingsState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161AB0);
  }
  return result;
}

unint64_t sub_100069764()
{
  unint64_t result;

  result = qword_100161AB8[0];
  if (!qword_100161AB8[0])
  {
    result = swift_getWitnessTable(&unk_100111758, &type metadata for ApprovalSettingsState.CodingKeys);
    atomic_store(result, qword_100161AB8);
  }
  return result;
}

unint64_t sub_1000697AC()
{
  unint64_t result;

  result = qword_100161BC0;
  if (!qword_100161BC0)
  {
    result = swift_getWitnessTable(&unk_100111650, &type metadata for ApprovalDB.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161BC0);
  }
  return result;
}

unint64_t sub_1000697F4()
{
  unint64_t result;

  result = qword_100161BC8[0];
  if (!qword_100161BC8[0])
  {
    result = swift_getWitnessTable(&unk_100111678, &type metadata for ApprovalDB.CodingKeys);
    atomic_store(result, qword_100161BC8);
  }
  return result;
}

unint64_t sub_10006983C()
{
  unint64_t result;

  result = qword_100161C50;
  if (!qword_100161C50)
  {
    result = swift_getWitnessTable(&unk_100111598, &type metadata for ApprovalDBEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161C50);
  }
  return result;
}

unint64_t sub_100069884()
{
  unint64_t result;

  result = qword_100161C58[0];
  if (!qword_100161C58[0])
  {
    result = swift_getWitnessTable(&unk_1001115C0, &type metadata for ApprovalDBEntry.CodingKeys);
    atomic_store(result, qword_100161C58);
  }
  return result;
}

unint64_t sub_1000698CC()
{
  unint64_t result;

  result = qword_100161CE0;
  if (!qword_100161CE0)
  {
    result = swift_getWitnessTable(&unk_100111490, &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161CE0);
  }
  return result;
}

unint64_t sub_100069914()
{
  unint64_t result;

  result = qword_100161CE8[0];
  if (!qword_100161CE8[0])
  {
    result = swift_getWitnessTable(&unk_1001114B8, &type metadata for ApprovalDBEntrySource.FirstPartyCodingKeys);
    atomic_store(result, qword_100161CE8);
  }
  return result;
}

unint64_t sub_10006995C()
{
  unint64_t result;

  result = qword_100161D70;
  if (!qword_100161D70)
  {
    result = swift_getWitnessTable(&unk_1001113D8, &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161D70);
  }
  return result;
}

unint64_t sub_1000699A4()
{
  unint64_t result;

  result = qword_100161D78;
  if (!qword_100161D78)
  {
    result = swift_getWitnessTable(&unk_100111400, &type metadata for ApprovalDBEntrySource.ThirdPartyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161D78);
  }
  return result;
}

unint64_t sub_1000699EC()
{
  unint64_t result;

  result = qword_100161E00;
  if (!qword_100161E00)
  {
    result = swift_getWitnessTable(&unk_1001114E0, &type metadata for ApprovalDBEntrySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161E00);
  }
  return result;
}

unint64_t sub_100069A34()
{
  unint64_t result;

  result = qword_100161E08[0];
  if (!qword_100161E08[0])
  {
    result = swift_getWitnessTable(&unk_100111508, &type metadata for ApprovalDBEntrySource.CodingKeys);
    atomic_store(result, qword_100161E08);
  }
  return result;
}

unint64_t sub_100069A78()
{
  unint64_t result;

  result = qword_100161E90;
  if (!qword_100161E90)
  {
    result = swift_getWitnessTable(&unk_100111BB0, &type metadata for ApprovalDB.V0.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100161E90);
  }
  return result;
}

unint64_t sub_100069ABC()
{
  unint64_t result;

  result = qword_100159598;
  if (!qword_100159598)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDBEntry, &type metadata for ApprovalDBEntry);
    atomic_store(result, (unint64_t *)&qword_100159598);
  }
  return result;
}

unint64_t sub_100069B00()
{
  unint64_t result;

  result = qword_1001595B0;
  if (!qword_1001595B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDBEntry, &type metadata for ApprovalDBEntry);
    atomic_store(result, (unint64_t *)&qword_1001595B0);
  }
  return result;
}

unint64_t sub_100069B44()
{
  unint64_t result;

  result = qword_1001595C0;
  if (!qword_1001595C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDBEntrySource, &type metadata for ApprovalDBEntrySource);
    atomic_store(result, (unint64_t *)&qword_1001595C0);
  }
  return result;
}

unint64_t sub_100069B88()
{
  unint64_t result;

  result = qword_1001595C8;
  if (!qword_1001595C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalState, &type metadata for ApprovalState);
    atomic_store(result, (unint64_t *)&qword_1001595C8);
  }
  return result;
}

uint64_t sub_100069BCC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100069BF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

_QWORD *sub_100069C00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_100021610(v4, v5);
  return a1;
}

uint64_t sub_100069C60(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100011CE4(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100069CC4()
{
  unint64_t result;

  result = qword_1001595E0;
  if (!qword_1001595E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalSettingsStateEntry, &type metadata for ApprovalSettingsStateEntry);
    atomic_store(result, (unint64_t *)&qword_1001595E0);
  }
  return result;
}

unint64_t sub_100069D08()
{
  unint64_t result;

  result = qword_100161E98[0];
  if (!qword_100161E98[0])
  {
    result = swift_getWitnessTable(&unk_100111708, &type metadata for ApprovalDB.V0);
    atomic_store(result, qword_100161E98);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s10driverkitd21ApprovalSettingsStateV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100069DDC + 4 * byte_100110CD3[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100069DFC + 4 * byte_100110CD8[v4]))();
}

_BYTE *sub_100069DDC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100069DFC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100069E04(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100069E0C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100069E14(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100069E1C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ApprovalDB.V0.CodingKeys()
{
  return &type metadata for ApprovalDB.V0.CodingKeys;
}

unint64_t sub_100069E3C()
{
  unint64_t result;

  result = qword_100161FA0[0];
  if (!qword_100161FA0[0])
  {
    result = swift_getWitnessTable(&unk_100111B88, &type metadata for ApprovalDB.V0.CodingKeys);
    atomic_store(result, qword_100161FA0);
  }
  return result;
}

unint64_t sub_100069E84()
{
  unint64_t result;

  result = qword_1001620B0;
  if (!qword_1001620B0)
  {
    result = swift_getWitnessTable(&unk_100111AF8, &type metadata for ApprovalDB.V0.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001620B0);
  }
  return result;
}

unint64_t sub_100069ECC()
{
  unint64_t result;

  result = qword_1001620B8[0];
  if (!qword_1001620B8[0])
  {
    result = swift_getWitnessTable(&unk_100111B20, &type metadata for ApprovalDB.V0.CodingKeys);
    atomic_store(result, qword_1001620B8);
  }
  return result;
}

uint64_t sub_100069F24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  Class isa;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD v23[6];
  uint64_t v24;
  _OWORD v25[2];

  v2 = type metadata accessor for POSIXError(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1;
  swift_bridgeObjectRetain(a1);
  sub_10006A594(0xD000000000000010, 0x8000000100123A90, v25);
  v6 = v22;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  v8 = (void *)_CFXPCCreateXPCObjectFromCFObject(isa);

  if (!v8)
  {
    v9 = sub_1000122F8();
    v10 = swift_allocError(&type metadata for KMError, v9, 0, 0);
    *(_QWORD *)v11 = 0xD000000000000026;
    *(_QWORD *)(v11 + 8) = 0x8000000100123AB0;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_QWORD *)(v11 + 64) = 0;
    *(_BYTE *)(v11 + 72) = 4;
    swift_willThrow(v10);
    return sub_10006A68C((uint64_t)v25);
  }
  sub_100019E1C((uint64_t)v25, (uint64_t)v23, &qword_100158018);
  if (v24)
  {
    if ((swift_dynamicCast(&v21, v23, (char *)&type metadata for Any + 8, &type metadata for UInt32, 6) & 1) != 0)
      xpc_dictionary_set_mach_send(v8, "_DextCheckInPort", v21);
  }
  else
  {
    sub_10006A68C((uint64_t)v23);
  }
  v23[0] = 0;
  v12 = sub_100004A78(v8, v23);
  if ((_DWORD)v12)
  {
    v13 = POSIXErrorCode.init(rawValue:)(v12);
    if ((v13 & (unint64_t)&_mh_execute_header) != 0)
      v14 = 96;
    else
      v14 = v13;
    v21 = v14;
    v15 = sub_10006A308((uint64_t)_swiftEmptyArrayStorage);
    v16 = sub_10006A6CC();
    v17 = _BridgedStoredNSError.init(_:userInfo:)(&v21, v15, v2, v16);
    POSIXError._nsError.getter(v17);
    v18 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_willThrow(v18);
    swift_unknownObjectRelease(v8);
    return sub_10006A68C((uint64_t)v25);
  }
  sub_10006A68C((uint64_t)v25);
  swift_unknownObjectRelease(v8);
  return v23[0];
}

uint64_t sub_10006A1B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t sub_10006A1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_10006A250(v10, v7, v8);
}

uint64_t sub_10006A250(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_100159630);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_10006A2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100159630);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

unint64_t sub_10006A308(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_100005C88(&qword_100158248);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100019E1C(v7, (uint64_t)&v17, (uint64_t *)&unk_100159E70);
    v8 = v17;
    v9 = v18;
    result = sub_10006A734(v17, v18, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10006A450);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100017464(&v19, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10006A450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

double sub_10006A594@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10006A734(a1, a2, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100005E4C);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100016EFC();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_100017464((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_100035C5C(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10006A68C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005C88(&qword_100158018);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10006A6CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159D20;
  if (!qword_100159D20)
  {
    v1 = type metadata accessor for POSIXError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for POSIXError, v1);
    atomic_store(result, (unint64_t *)&qword_100159D20);
  }
  return result;
}

uint64_t type metadata accessor for RealDaemonLauncher()
{
  return objc_opt_self(_TtC10driverkitd18RealDaemonLauncher);
}

uint64_t sub_10006A734(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, Swift::Int))
{
  uint64_t v3;
  Swift::Int v6;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, *(_QWORD *)(v3 + 40));
  String.hash(into:)(v9, a1, a2);
  v6 = Hasher._finalize()();
  return a3(a1, a2, v6);
}

void sub_10006A7A0(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v6 = (uint64_t *)sub_100090248();
  v7 = *v6;
  v8 = v6[1];
  v9 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10010F050;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v11 = sub_100026838();
  *(_QWORD *)(v10 + 64) = v11;
  *(_QWORD *)(v10 + 32) = v7;
  *(_QWORD *)(v10 + 40) = v8;
  sub_10002687C();
  v12 = swift_bridgeObjectRetain_n(v8, 2);
  v13 = (void *)static OS_os_log.default.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  swift_bridgeObjectRelease(v10);

  v15 = swift_allocObject(&unk_100148458, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  aBlock[4] = sub_10006A9C8;
  v23 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006A9E8;
  aBlock[3] = &unk_100148470;
  v16 = _Block_copy(aBlock);
  v17 = v23;
  swift_retain(a3);
  swift_release(v17);
  v18 = String.utf8CString.getter(v7);
  xpc_set_event_stream_handler((const char *)(v18 + 32), a1, v16);
  swift_release(v18);
  _Block_release(v16);
  v19 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10010F050;
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  *(_QWORD *)(v19 + 64) = v11;
  *(_QWORD *)(v19 + 32) = v7;
  *(_QWORD *)(v19 + 40) = v8;
  v20 = (void *)static OS_os_log.default.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  swift_bridgeObjectRelease(v19);

}

uint64_t sub_10006A9A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006A9C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10006A9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10006AA30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006AA40(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10006AA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_10006AAC0(v10, v7, v8);
}

uint64_t sub_10006AAC0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_100159758);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_10006AB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100159758);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t type metadata accessor for RealDistNote()
{
  return objc_opt_self(_TtC10driverkitd12RealDistNote);
}

unint64_t sub_10006AB98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v21[2];
  __int128 v22;
  uint64_t v23;
  _BYTE v24[80];

  v4 = sub_100005C88(&qword_100158230);
  inited = swift_initStackObject(v4, v24);
  *(_OWORD *)(inited + 16) = xmmword_10010F050;
  v6 = (uint64_t *)sub_10008F5A4();
  v8 = *v6;
  v7 = v6[1];
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = v7;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 8);
  v10 = swift_bridgeObjectRetain(v7);
  v11 = v9(a1, a2, v10);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v11;
  *(_QWORD *)(inited + 56) = v12;
  v13 = sub_1000159E8(inited);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if (v14)
  {
    v15 = v14;
    v16 = (uint64_t *)sub_10008F5F8();
    v17 = *v16;
    v18 = v16[1];
    v23 = sub_100005C88((uint64_t *)&unk_10015BA80);
    *(_QWORD *)&v22 = v15;
    sub_100017464(&v22, v21);
    swift_bridgeObjectRetain(v18);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    sub_100016D64(v21, v17, v18, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  return v13;
}

unint64_t sub_10006ACC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_100159CD0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v15 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100005DE8(v7, v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v4[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10006ADDC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  if (!a1)
  {
    v9 = 0u;
    v10 = 0u;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain(a1);
  v2 = sub_10008F1F8();
  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = 0u;
    v10 = 0u;
LABEL_12:
    swift_bridgeObjectRelease(a1);
    goto LABEL_13;
  }
  v4 = *v2;
  v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  v5 = sub_100005DE8(v4, v3);
  if ((v6 & 1) == 0)
  {
    v9 = 0u;
    v10 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_12;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(a1);
  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_13:
    sub_1000124F8((uint64_t)&v9, &qword_100158018);
    return 0;
  }
  if (swift_dynamicCast(&v8, &v9, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v8;
  else
    return 0;
}

uint64_t sub_10006AEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 16))();
  if (!v2)
  {
    v11 = 0u;
    v12 = 0u;
    goto LABEL_13;
  }
  v3 = v2;
  v4 = sub_10008F1F8();
  if (!*(_QWORD *)(v3 + 16))
  {
    v11 = 0u;
    v12 = 0u;
LABEL_12:
    swift_bridgeObjectRelease(v3);
    goto LABEL_13;
  }
  v6 = *v4;
  v5 = v4[1];
  swift_bridgeObjectRetain(v5);
  v7 = sub_100005DE8(v6, v5);
  if ((v8 & 1) == 0)
  {
    v11 = 0u;
    v12 = 0u;
    swift_bridgeObjectRelease(v5);
    goto LABEL_12;
  }
  sub_100005D28(*(_QWORD *)(v3 + 56) + 32 * v7, (uint64_t)&v11);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  if (!*((_QWORD *)&v12 + 1))
  {
LABEL_13:
    sub_1000124F8((uint64_t)&v11, &qword_100158018);
    return 0;
  }
  if (swift_dynamicCast(&v10, &v11, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v10;
  else
    return 0;
}

uint64_t sub_10006AFEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t AssociatedTypeWitness;
  _QWORD v14[5];

  v8 = a1[3];
  v9 = a1[4];
  sub_100004DE4(a1, v8);
  v10 = *(_QWORD *)(a3 + 8);
  v14[3] = a2;
  v14[4] = v10;
  v11 = sub_100005BE0(v14);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v11, v4, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &unk_100132E4C, &unk_100132E5C);
  sub_10006B0B8(v14, AssociatedTypeWitness, v8, AssociatedTypeWitness, v9, a4);
  return sub_100005D08(v14);
}

uint64_t sub_10006B0B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v11 = a1[3];
  v12 = a1[4];
  sub_100004DE4(a1, v11);
  v13 = sub_10006AB98(v11, v12);
  sub_10006CD4C(v13, a2, a3, a4, a5, a6);
  return swift_bridgeObjectRelease(v13);
}

double sub_10006B160()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100005C88(&qword_100159CD8);
  v1 = swift_allocObject(v0, 304, 7);
  *(_QWORD *)&result = 17;
  *(_OWORD *)(v1 + 16) = xmmword_100111C80;
  *(_QWORD *)(v1 + 32) = &type metadata for KernelRequests.GetRequests;
  *(_QWORD *)(v1 + 40) = &off_100148538;
  *(_QWORD *)(v1 + 48) = &type metadata for KernelRequests.GetLoaded;
  *(_QWORD *)(v1 + 56) = &off_100148550;
  *(_QWORD *)(v1 + 64) = &type metadata for KernelRequests.LoadExtension;
  *(_QWORD *)(v1 + 72) = &off_100148580;
  *(_QWORD *)(v1 + 80) = &type metadata for KernelRequests.UnloadExtension;
  *(_QWORD *)(v1 + 88) = &off_1001485B0;
  *(_QWORD *)(v1 + 96) = &type metadata for KernelRequests.SendResource;
  *(_QWORD *)(v1 + 104) = &off_1001485C8;
  *(_QWORD *)(v1 + 112) = &type metadata for KernelRequests.LoadFileset;
  *(_QWORD *)(v1 + 120) = &off_1001485E0;
  *(_QWORD *)(v1 + 128) = &type metadata for KernelRequests.DextLaunch;
  *(_QWORD *)(v1 + 136) = &off_100148648;
  *(_QWORD *)(v1 + 144) = &type metadata for KernelRequests.RequestResource;
  *(_QWORD *)(v1 + 152) = &off_100148698;
  *(_QWORD *)(v1 + 160) = &type metadata for KernelRequests.LoadRequest;
  *(_QWORD *)(v1 + 168) = &off_1001486E8;
  *(_QWORD *)(v1 + 176) = &type metadata for KernelRequests.LoadNotification;
  *(_QWORD *)(v1 + 184) = &off_100148738;
  *(_QWORD *)(v1 + 192) = &type metadata for KernelRequests.UnloadNotification;
  *(_QWORD *)(v1 + 200) = &off_100148788;
  *(_QWORD *)(v1 + 208) = &type metadata for KernelRequests.RequestExit;
  *(_QWORD *)(v1 + 216) = &off_1001487C0;
  *(_QWORD *)(v1 + 224) = &type metadata for KernelRequests.MissingAuxKCBundles;
  *(_QWORD *)(v1 + 232) = &off_1001487D8;
  *(_QWORD *)(v1 + 240) = &type metadata for KernelRequests.AuxKCBundleAvailable;
  *(_QWORD *)(v1 + 248) = &off_100148808;
  *(_QWORD *)(v1 + 256) = &type metadata for KernelRequests.GetDaemonActive;
  *(_QWORD *)(v1 + 264) = &off_100148820;
  *(_QWORD *)(v1 + 272) = &type metadata for KernelRequests.GetDrivers;
  *(_QWORD *)(v1 + 280) = &off_100148838;
  *(_QWORD *)(v1 + 288) = &type metadata for KernelRequests.DextUpdateNotification;
  *(_QWORD *)(v1 + 296) = &off_100148870;
  qword_1001753E0 = v1;
  return result;
}

_QWORD *sub_10006B2F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  __n128 v24;
  Swift::String v25;
  void *object;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;
  Swift::String v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  _QWORD v42[2];
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v3 = v2;
  v6 = (uint64_t *)sub_10008F5A4();
  if (!*(_QWORD *)(a1 + 16))
  {
    v43 = 0u;
    v44 = 0u;
    goto LABEL_16;
  }
  v7 = *v6;
  v8 = v6[1];
  swift_bridgeObjectRetain(v8);
  v9 = sub_100005DE8(v7, v8);
  if ((v10 & 1) == 0)
  {
    v43 = 0u;
    v44 = 0u;
    swift_bridgeObjectRelease(v8);
    goto LABEL_16;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v43);
  swift_bridgeObjectRelease(v8);
  if (!*((_QWORD *)&v44 + 1))
  {
LABEL_16:
    sub_1000124F8((uint64_t)&v43, &qword_100158018);
    goto LABEL_17;
  }
  if ((swift_dynamicCast(v42, &v43, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_17:
    *(_QWORD *)&v43 = 0;
    *((_QWORD *)&v43 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(*((_QWORD *)&v43 + 1));
    *(_QWORD *)&v43 = 0x2074736575716552;
    *((_QWORD *)&v43 + 1) = 0xE800000000000000;
    v25._countAndFlagsBits = Dictionary.description.getter(v24);
    object = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(object);
    v27 = 0x8000000100123BF0;
    v28 = 0xD000000000000011;
LABEL_18:
    String.append(_:)(*(Swift::String *)&v28);
LABEL_19:
    v29 = v43;
    v30 = sub_1000122F8();
    v31 = swift_allocError(&type metadata for KMError, v30, 0, 0);
    *(_OWORD *)v32 = v29;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(_QWORD *)(v32 + 64) = 0;
    *(_BYTE *)(v32 + 72) = 9;
    return (_QWORD *)swift_willThrow(v31);
  }
  v12 = v42[0];
  v11 = (void *)v42[1];
  v13 = sub_100072368();
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_22:
    swift_bridgeObjectRelease(v13);
LABEL_23:
    *(_QWORD *)&v43 = 0;
    *((_QWORD *)&v43 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease(*((_QWORD *)&v43 + 1));
    *(_QWORD *)&v43 = 0xD000000000000017;
    *((_QWORD *)&v43 + 1) = 0x8000000100123C10;
    v34._countAndFlagsBits = v12;
    v34._object = v11;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v11);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain(v11);
  v14 = sub_100005DE8(v12, (uint64_t)v11);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease(v11);
    goto LABEL_22;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 16 * v14);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v13);
  v17 = swift_conformsToProtocol2(v16, &protocol descriptor for KernelRequestFromKernel);
  if (v17)
  {
    v18 = v17;
  }
  else
  {
    v16 = 0;
    v18 = 0;
  }
  if (!v16)
    goto LABEL_23;
  v19 = (uint64_t *)sub_10008F5F8();
  if (*(_QWORD *)(a1 + 16))
  {
    v45 = v18;
    v20 = *v19;
    v21 = v19[1];
    swift_bridgeObjectRetain(v21);
    v22 = sub_100005DE8(v20, v21);
    if ((v23 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v22, (uint64_t)&v43);
    }
    else
    {
      v43 = 0u;
      v44 = 0u;
    }
    swift_bridgeObjectRelease(v21);
    v18 = v45;
    if (*((_QWORD *)&v44 + 1))
    {
      v35 = sub_100005C88((uint64_t *)&unk_10015BA80);
      v36 = swift_dynamicCast(v42, &v43, (char *)&type metadata for Any + 8, v35, 6);
      v37 = v42[0];
      if (v36)
        v38 = v42[0];
      else
        v38 = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v16, v18) & 1) == 0)
        goto LABEL_36;
      if (v38)
      {
        v38 = v37;
        goto LABEL_36;
      }
      goto LABEL_34;
    }
  }
  else
  {
    v43 = 0u;
    v44 = 0u;
  }
  sub_1000124F8((uint64_t)&v43, &qword_100158018);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v16, v18) & 1) != 0)
  {
LABEL_34:
    *(_QWORD *)&v43 = 0;
    *((_QWORD *)&v43 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v39._countAndFlagsBits = 0x2074736575716552;
    v39._object = (void *)0xE800000000000000;
    String.append(_:)(v39);
    v40._countAndFlagsBits = v12;
    v40._object = v11;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v11);
    v28 = 0xD00000000000002BLL;
    v27 = 0x8000000100123C30;
    goto LABEL_18;
  }
  v38 = 0;
LABEL_36:
  swift_bridgeObjectRelease(v11);
  v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 24);
  a2[3] = v16;
  a2[4] = v18;
  sub_100005BE0(a2);
  result = (_QWORD *)v41(v38, v16, v18);
  if (v3)
    return sub_10007257C(a2);
  return result;
}

uint64_t sub_10006B724(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F640, qword_1001753E8, &qword_1001753E8[1]);
}

uint64_t sub_10006B73C()
{
  return 0;
}

uint64_t sub_10006B744(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_100162148, qword_1001753E8, &qword_1001753E8[1], (uint64_t)sub_10006B724);
}

uint64_t sub_10006B764(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F6AC, qword_1001753F8, &qword_1001753F8[1]);
}

double sub_10006B77C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  double result;

  v0 = sub_100005C88((uint64_t *)&unk_100159E60);
  v1 = swift_allocObject(v0, 224, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100111C90;
  v2 = sub_10008F2A8();
  v4 = *v2;
  v3 = v2[1];
  *(_QWORD *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 40) = v3;
  swift_bridgeObjectRetain(v3);
  v5 = sub_10008F46C();
  v7 = *(_QWORD *)v5;
  v6 = *((_QWORD *)v5 + 1);
  *(_QWORD *)(v1 + 48) = v7;
  *(_QWORD *)(v1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  v8 = sub_10008F1F8();
  v10 = *v8;
  v9 = v8[1];
  *(_QWORD *)(v1 + 64) = v10;
  *(_QWORD *)(v1 + 72) = v9;
  swift_bridgeObjectRetain(v9);
  v11 = sub_10008F538();
  v13 = *(_QWORD *)v11;
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)(v1 + 80) = v13;
  *(_QWORD *)(v1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  v14 = sub_10008F3C4();
  v16 = *v14;
  v15 = v14[1];
  *(_QWORD *)(v1 + 96) = v16;
  *(_QWORD *)(v1 + 104) = v15;
  swift_bridgeObjectRetain(v15);
  v17 = (uint64_t *)sub_10008F58C();
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)(v1 + 112) = v19;
  *(_QWORD *)(v1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  v20 = (uint64_t *)sub_10008F478();
  v22 = *v20;
  v21 = v20[1];
  *(_QWORD *)(v1 + 128) = v22;
  *(_QWORD *)(v1 + 136) = v21;
  swift_bridgeObjectRetain(v21);
  v23 = (uint64_t *)sub_10008F388();
  v25 = *v23;
  v24 = v23[1];
  *(_QWORD *)(v1 + 144) = v25;
  *(_QWORD *)(v1 + 152) = v24;
  swift_bridgeObjectRetain(v24);
  v26 = (uint64_t *)sub_10008F43C();
  v28 = *v26;
  v27 = v26[1];
  *(_QWORD *)(v1 + 160) = v28;
  *(_QWORD *)(v1 + 168) = v27;
  swift_bridgeObjectRetain(v27);
  v29 = (uint64_t *)sub_10008F490();
  v31 = *v29;
  v30 = v29[1];
  *(_QWORD *)(v1 + 176) = v31;
  *(_QWORD *)(v1 + 184) = v30;
  swift_bridgeObjectRetain(v30);
  v32 = (uint64_t *)sub_10008F484();
  v34 = *v32;
  v33 = v32[1];
  *(_QWORD *)(v1 + 192) = v34;
  *(_QWORD *)(v1 + 200) = v33;
  swift_bridgeObjectRetain(v33);
  v35 = (uint64_t *)sub_10008F37C();
  v37 = *v35;
  v36 = v35[1];
  *(_QWORD *)(v1 + 208) = v37;
  *(_QWORD *)(v1 + 216) = v36;
  qword_100175408 = v1;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v36).n128_u64[0];
  return result;
}

uint64_t *sub_10006B880()
{
  if (qword_100162158 != -1)
    swift_once(&qword_100162158, sub_10006B77C);
  return &qword_100175408;
}

double sub_10006B8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  double result;

  v0 = sub_100005C88((uint64_t *)&unk_100159E60);
  v1 = swift_allocObject(v0, 176, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100111CA0;
  v2 = (uint64_t *)sub_10008F574();
  v4 = *v2;
  v3 = v2[1];
  *(_QWORD *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 40) = v3;
  swift_bridgeObjectRetain(v3);
  v5 = (uint64_t *)sub_10008F544();
  v7 = *v5;
  v6 = v5[1];
  *(_QWORD *)(v1 + 48) = v7;
  *(_QWORD *)(v1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  v8 = (uint64_t *)sub_10008F580();
  v10 = *v8;
  v9 = v8[1];
  *(_QWORD *)(v1 + 64) = v10;
  *(_QWORD *)(v1 + 72) = v9;
  swift_bridgeObjectRetain(v9);
  v11 = (uint64_t *)sub_10008F520();
  v13 = *v11;
  v12 = v11[1];
  *(_QWORD *)(v1 + 80) = v13;
  *(_QWORD *)(v1 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  v14 = (uint64_t *)sub_10008F52C();
  v16 = *v14;
  v15 = v14[1];
  *(_QWORD *)(v1 + 96) = v16;
  *(_QWORD *)(v1 + 104) = v15;
  swift_bridgeObjectRetain(v15);
  v17 = (uint64_t *)sub_10008F514();
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)(v1 + 112) = v19;
  *(_QWORD *)(v1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  v20 = (uint64_t *)sub_10008F568();
  v22 = *v20;
  v21 = v20[1];
  *(_QWORD *)(v1 + 128) = v22;
  *(_QWORD *)(v1 + 136) = v21;
  swift_bridgeObjectRetain(v21);
  v23 = (uint64_t *)sub_10008F55C();
  v25 = *v23;
  v24 = v23[1];
  *(_QWORD *)(v1 + 144) = v25;
  *(_QWORD *)(v1 + 152) = v24;
  swift_bridgeObjectRetain(v24);
  v26 = (uint64_t *)sub_10008F550();
  v28 = *v26;
  v27 = v26[1];
  *(_QWORD *)(v1 + 160) = v28;
  *(_QWORD *)(v1 + 168) = v27;
  qword_100175410 = v1;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v27).n128_u64[0];
  return result;
}

uint64_t *sub_10006B994()
{
  if (qword_100162160 != -1)
    swift_once(&qword_100162160, sub_10006B8C0);
  return &qword_100175410;
}

uint64_t sub_10006B9D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10006B9E0(*a1, *a2);
}

uint64_t sub_10006B9E0(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x646564616F4CLL;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x646564616F6C6E55;
    else
      v4 = 7958081;
    if (v3 == 1)
      v5 = 0xE800000000000000;
    else
      v5 = 0xE300000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x646564616F6C6E55;
      else
        v2 = 7958081;
      if (v6 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE300000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE600000000000000;
    v4 = 0x646564616F4CLL;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v4 != 0x646564616F4CLL)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

Swift::Int sub_10006BAE0()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE800000000000000;
  v3 = 0x646564616F6C6E55;
  if (v1 != 1)
  {
    v3 = 7958081;
    v2 = 0xE300000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x646564616F4CLL;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10006BB74(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x646564616F6C6E55;
  if (*v1 != 1)
  {
    v3 = 7958081;
    v2 = 0xE300000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x646564616F4CLL;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10006BBE4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE800000000000000;
  v4 = 0x646564616F6C6E55;
  if (v2 != 1)
  {
    v4 = 7958081;
    v3 = 0xE300000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x646564616F4CLL;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE600000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_10006BC74@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000725B0(*a1);
  *a2 = result;
  return result;
}

void sub_10006BCA0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x646564616F6C6E55;
  if (v2 != 1)
  {
    v5 = 7958081;
    v4 = 0xE300000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x646564616F4CLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_10006BCF4(_QWORD *a1@<X8>)
{
  *a1 = &off_100148510;
}

void sub_10006BD04(char a1)
{
  __asm { BR              X10 }
}

unint64_t sub_10006BD40()
{
  uint64_t v0;
  char v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v2 = sub_10008F718();
  v4 = *(_QWORD *)v2;
  v3 = *((_QWORD *)v2 + 1);
  swift_bridgeObjectRetain(v3);
  v5 = sub_100005C88(&qword_100158230);
  inited = swift_initStackObject(v5, &v18);
  *(_OWORD *)(inited + 16) = xmmword_100111CB0;
  v7 = (uint64_t *)sub_10008F6E8();
  v9 = *v7;
  v8 = v7[1];
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = v8;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = v3;
  swift_bridgeObjectRetain(v8);
  v10 = sub_10008F730();
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  *(_QWORD *)(inited + 80) = v12;
  *(_QWORD *)(inited + 88) = v11;
  if (v1)
  {
    if (v1 == 1)
    {
      v13 = 0xE800000000000000;
      v14 = 0x646564616F6C6E55;
    }
    else
    {
      v13 = 0xE300000000000000;
      v14 = 7958081;
    }
  }
  else
  {
    v13 = 0xE600000000000000;
    v14 = 0x646564616F4CLL;
  }
  *(_QWORD *)(inited + 120) = &type metadata for String;
  *(_QWORD *)(inited + 96) = v14;
  *(_QWORD *)(inited + 104) = v13;
  swift_bridgeObjectRetain(v11);
  v15 = sub_10008F658();
  v16 = v15[1];
  *(_QWORD *)(inited + 128) = *v15;
  *(_QWORD *)(inited + 136) = v16;
  *(_QWORD *)(inited + 168) = sub_100005C88((uint64_t *)&unk_10015A5D0);
  *(_QWORD *)(inited + 144) = v0;
  swift_bridgeObjectRetain(v16);
  return sub_1000159E8(inited);
}

uint64_t sub_10006BE5C(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_100162150, qword_1001753F8, &qword_1001753F8[1], (uint64_t)sub_10006B764);
}

uint64_t sub_10006BE7C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v8;

  if (*a3 != -1)
    swift_once(a3, a6);
  v8 = *a4;
  swift_bridgeObjectRetain(*a5);
  return v8;
}

uint64_t sub_10006BED0(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F6D0, qword_100175418, &qword_100175418[1]);
}

uint64_t sub_10006BEE8(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_100162170, qword_100175418, &qword_100175418[1], (uint64_t)sub_10006BED0);
}

uint64_t sub_10006BF08(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F664, qword_100175428, &qword_100175428[1]);
}

unint64_t sub_10006BF20(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _OWORD v15[2];
  __int128 v16;
  void *v17;

  v4 = sub_1000159E8((uint64_t)_swiftEmptyArrayStorage);
  v5 = (uint64_t *)sub_10008F610();
  v6 = *v5;
  v7 = v5[1];
  v17 = &type metadata for String;
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  sub_100017464(&v16, v15);
  swift_bridgeObjectRetain(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  sub_100016D64(v15, v6, v7, isUniquelyReferenced_nonNull_native);
  v9 = v4;
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(0x8000000000000000);
  v10 = (uint64_t *)sub_10008F670();
  v11 = *v10;
  v12 = v10[1];
  v17 = &type metadata for Bool;
  LOBYTE(v16) = 1;
  sub_100017464(&v16, v15);
  swift_bridgeObjectRetain(v12);
  v13 = swift_isUniquelyReferenced_nonNull_native(v9);
  sub_100016D64(v15, v11, v12, v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(0x8000000000000000);
  return v9;
}

uint64_t sub_10006C038(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_100162178, qword_100175428, &qword_100175428[1], (uint64_t)sub_10006BF08);
}

uint64_t sub_10006C058(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F5EC, qword_100175438, &qword_100175438[1]);
}

uint64_t sub_10006C070(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_100162180, qword_100175438, &qword_100175438[1], (uint64_t)sub_10006C058);
}

uint64_t sub_10006C090(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F694, qword_100175448, &qword_100175448[1]);
}

unint64_t sub_10006C0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _OWORD v25[2];
  __int128 v26;
  void *v27;
  unint64_t v28;

  v10 = sub_1000159E8((uint64_t)_swiftEmptyArrayStorage);
  v28 = v10;
  v11 = (uint64_t *)sub_10008F67C();
  v13 = *v11;
  v12 = v11[1];
  if (a2)
  {
    v27 = &type metadata for String;
    *(_QWORD *)&v26 = a1;
    *((_QWORD *)&v26 + 1) = a2;
    sub_100017464(&v26, v25);
    swift_bridgeObjectRetain(v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    sub_100016D64(v25, v13, v12, isUniquelyReferenced_nonNull_native);
    v28 = v10;
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {
    swift_bridgeObjectRetain(v11[1]);
    sub_10006A594(v13, v12, &v26);
    swift_bridgeObjectRelease(v12);
    sub_1000124F8((uint64_t)&v26, &qword_100158018);
  }
  v15 = (uint64_t *)sub_10008F688();
  v17 = *v15;
  v16 = v15[1];
  if (a4)
  {
    v27 = &type metadata for String;
    *(_QWORD *)&v26 = a3;
    *((_QWORD *)&v26 + 1) = a4;
    sub_100017464(&v26, v25);
    swift_bridgeObjectRetain(v16);
    v18 = v28;
    v19 = swift_isUniquelyReferenced_nonNull_native(v28);
    sub_100016D64(v25, v17, v16, v19);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {
    swift_bridgeObjectRetain(v15[1]);
    sub_10006A594(v17, v16, &v26);
    swift_bridgeObjectRelease(v16);
    sub_1000124F8((uint64_t)&v26, &qword_100158018);
    v18 = v28;
  }
  v20 = (uint64_t *)sub_10008F6A0();
  v21 = *v20;
  v22 = v20[1];
  v27 = (void *)sub_100005C88(&qword_1001587D0);
  *(_QWORD *)&v26 = a5;
  sub_100017464(&v26, v25);
  swift_bridgeObjectRetain(v22);
  v23 = swift_isUniquelyReferenced_nonNull_native(v18);
  sub_100016D64(v25, v21, v22, v23);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(0x8000000000000000);
  return v18;
}

uint64_t sub_10006C2C0(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_100162188, qword_100175448, &qword_100175448[1], (uint64_t)sub_10006C090);
}

uint64_t sub_10006C2E0(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F6DC, qword_100175458, &qword_100175458[1]);
}

uint64_t sub_10006C2F8(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_100162190, qword_100175458, &qword_100175458[1], (uint64_t)sub_10006C2E0);
}

uint64_t sub_10006C318(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F5B0, qword_100175468, &qword_100175468[1]);
}

uint64_t sub_10006C330(uint64_t a1)
{
  return sub_10006C584(a1, (uint64_t (*)(void))sub_10008F61C);
}

uint64_t sub_10006C33C(uint64_t a1)
{
  return sub_10006C668(a1, (uint64_t (*)(void))sub_10008F628, (uint64_t)&type metadata for UInt64);
}

uint64_t sub_10006C350(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;

  if (!a1 || (v2 = (uint64_t *)sub_10008F634(), !*(_QWORD *)(a1 + 16)))
  {
    v9 = 0u;
    v10 = 0u;
    goto LABEL_10;
  }
  v4 = *v2;
  v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  v5 = sub_100005DE8(v4, v3);
  if ((v6 & 1) == 0)
  {
    v9 = 0u;
    v10 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_10;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease(v3);
  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_10:
    sub_1000124F8((uint64_t)&v9, &qword_100158018);
    return 2;
  }
  if (swift_dynamicCast(&v8, &v9, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
    return v8;
  else
    return 2;
}

unint64_t sub_10006C430(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v11;
  __int128 v12;
  __int128 v13;

  if (!a1 || (v2 = (uint64_t *)sub_10008F64C(), !*(_QWORD *)(a1 + 16)))
  {
    v12 = 0u;
    v13 = 0u;
    goto LABEL_10;
  }
  v4 = *v2;
  v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  v5 = sub_100005DE8(v4, v3);
  if ((v6 & 1) == 0)
  {
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_10;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v12);
  swift_bridgeObjectRelease(v3);
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_10:
    sub_1000124F8((uint64_t)&v12, &qword_100158018);
    v8 = 0;
    v9 = 1;
    return v8 | ((unint64_t)v9 << 32);
  }
  v7 = swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, &type metadata for UInt32, 6);
  v8 = v11;
  v9 = v7 ^ 1;
  if (!v7)
    v8 = 0;
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_10006C520(uint64_t a1)
{
  return sub_10006C7F8(a1, (uint64_t (*)(void))sub_10008F4E4);
}

uint64_t sub_10006C52C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10006C534()
{
  uint64_t *v0;

  return sub_10006ADDC(*v0);
}

uint64_t sub_10006C54C(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_100162198, qword_100175468, &qword_100175468[1], (uint64_t)sub_10006C318);
}

uint64_t sub_10006C56C(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F5E0, qword_100175478, &qword_100175478[1]);
}

uint64_t sub_10006C584(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if (!a1 || (v3 = (uint64_t *)a2(), !*(_QWORD *)(a1 + 16)))
  {
    v10 = 0u;
    v11 = 0u;
    goto LABEL_11;
  }
  v5 = *v3;
  v4 = v3[1];
  swift_bridgeObjectRetain(v4);
  v6 = sub_100005DE8(v5, v4);
  if ((v7 & 1) == 0)
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease(v4);
    goto LABEL_11;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v10);
  swift_bridgeObjectRelease(v4);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_11:
    sub_1000124F8((uint64_t)&v10, &qword_100158018);
    return 0;
  }
  if (swift_dynamicCast(&v9, &v10, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v9;
  else
    return 0;
}

uint64_t sub_10006C668(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  if (!a1 || (v5 = (uint64_t *)a2(), !*(_QWORD *)(a1 + 16)))
  {
    v12 = 0u;
    v13 = 0u;
    goto LABEL_11;
  }
  v7 = *v5;
  v6 = v5[1];
  swift_bridgeObjectRetain(v6);
  v8 = sub_100005DE8(v7, v6);
  if ((v9 & 1) == 0)
  {
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRelease(v6);
    goto LABEL_11;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v12);
  swift_bridgeObjectRelease(v6);
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_11:
    sub_1000124F8((uint64_t)&v12, &qword_100158018);
    return 0;
  }
  if (swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, a3, 6))
    return v11;
  else
    return 0;
}

uint64_t sub_10006C750(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_1001621A0, qword_100175478, &qword_100175478[1], (uint64_t)sub_10006C56C);
}

uint64_t sub_10006C770(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F5D4, qword_100175488, &qword_100175488[1]);
}

uint64_t sub_10006C788(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_1001621A8, qword_100175488, &qword_100175488[1], (uint64_t)sub_10006C770);
}

uint64_t sub_10006C7A8(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F5BC, qword_100175498, &qword_100175498[1]);
}

uint64_t sub_10006C7C0(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_1001621B0, qword_100175498, &qword_100175498[1], (uint64_t)sub_10006C7A8);
}

uint64_t sub_10006C7E0(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F5C8, qword_1001754A8, &qword_1001754A8[1]);
}

uint64_t sub_10006C7F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if (!a1 || (v3 = (uint64_t *)a2(), !*(_QWORD *)(a1 + 16)))
  {
    v10 = 0u;
    v11 = 0u;
    goto LABEL_11;
  }
  v5 = *v3;
  v4 = v3[1];
  swift_bridgeObjectRetain(v4);
  v6 = sub_100005DE8(v5, v4);
  if ((v7 & 1) == 0)
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease(v4);
    goto LABEL_11;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v10);
  swift_bridgeObjectRelease(v4);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_11:
    sub_1000124F8((uint64_t)&v10, &qword_100158018);
    return 0;
  }
  if (swift_dynamicCast(&v9, &v10, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
    return v9;
  else
    return 0;
}

uint64_t sub_10006C8E0(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_1001621B8, qword_1001754A8, &qword_1001754A8[1], (uint64_t)sub_10006C7E0);
}

uint64_t sub_10006C900(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F604, qword_1001754B8, &qword_1001754B8[1]);
}

uint64_t sub_10006C918(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_1001621C0, qword_1001754B8, &qword_1001754B8[1], (uint64_t)sub_10006C900);
}

uint64_t sub_10006C938(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F6B8, qword_1001754C8, &qword_1001754C8[1]);
}

uint64_t sub_10006C950(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_1001621C8, qword_1001754C8, &qword_1001754C8[1], (uint64_t)sub_10006C938);
}

uint64_t sub_10006C970(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F6C4, qword_1001754D8, &qword_1001754D8[1]);
}

uint64_t sub_10006C988(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_1001621D0, qword_1001754D8, &qword_1001754D8[1], (uint64_t)sub_10006C970);
}

uint64_t sub_10006C9A8(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F748, qword_1001754E8, &qword_1001754E8[1]);
}

uint64_t sub_10006C9C0(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_1001621D8, qword_1001754E8, &qword_1001754E8[1], (uint64_t)sub_10006C9A8);
}

uint64_t sub_10006C9E0(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F778, qword_1001754F8, &qword_1001754F8[1]);
}

unint64_t sub_10006C9F8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v6 = sub_100005C88(&qword_100158230);
  inited = swift_initStackObject(v6, &v15);
  *(_OWORD *)(inited + 16) = xmmword_10010F050;
  v8 = (uint64_t *)sub_10008F658();
  v10 = *v8;
  v9 = v8[1];
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(inited + 40) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a2);
  if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) == 0)
    a3 = sub_10000C500(0, a3[2] + 1, 1, a3);
  v12 = a3[2];
  v11 = a3[3];
  if (v12 >= v11 >> 1)
    a3 = sub_10000C500((_QWORD *)(v11 > 1), v12 + 1, 1, a3);
  a3[2] = v12 + 1;
  v13 = &a3[2 * v12];
  v13[4] = a1;
  v13[5] = a2;
  swift_bridgeObjectRelease(a2);
  *(_QWORD *)(inited + 72) = sub_100005C88((uint64_t *)&unk_10015A5D0);
  *(_QWORD *)(inited + 48) = a3;
  return sub_1000159E8(inited);
}

uint64_t sub_10006CAFC(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, &qword_1001621E0, qword_1001754F8, &qword_1001754F8[1], (uint64_t)sub_10006C9E0);
}

uint64_t sub_10006CB1C(uint64_t a1)
{
  return sub_10006CB34(a1, (uint64_t (*)(void))sub_10008F76C, qword_100175508, &qword_100175508[1]);
}

uint64_t sub_10006CB34(uint64_t a1, uint64_t (*a2)(void), _QWORD *a3, _QWORD *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (uint64_t *)a2();
  v8 = *v6;
  v7 = v6[1];
  *a3 = v8;
  *a4 = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10006CB64(uint64_t a1)
{
  return sub_10006C584(a1, (uint64_t (*)(void))sub_10008F754);
}

uint64_t sub_10006CB70(uint64_t a1)
{
  return sub_10006C7F8(a1, (uint64_t (*)(void))sub_10008F760);
}

uint64_t sub_10006CB7C(uint64_t a1, uint64_t a2)
{
  return sub_10006BE7C(a1, a2, qword_1001621E8, qword_100175508, &qword_100175508[1], (uint64_t)sub_10006CB1C);
}

uint64_t sub_10006CB9C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  return v1;
}

unint64_t sub_10006CBC8(uint64_t a1, void *a2, char a3)
{
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  unint64_t v9;

  if ((a3 & 1) != 0)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(0xE000000000000000);
    v5 = 0xD00000000000001ELL;
  }
  else
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(0xE000000000000000);
    v5 = 0x6B2064616F6C6E75;
  }
  v9 = v5;
  v6._countAndFlagsBits = a1;
  v6._object = a2;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 39;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return v9;
}

unint64_t sub_10006CC94()
{
  uint64_t v0;

  return sub_10006CBC8(*(_QWORD *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10006CCA0()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, "processName");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t sub_10006CCF4()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, "environment");
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, &type metadata for String, &protocol witness table for String);

  return v2;
}

uint64_t sub_10006CD4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  CFDataRef v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[4];

  v21[3] = sub_100005C88((uint64_t *)&unk_10015BA80);
  v21[0] = a1;
  type metadata accessor for CFDictionary(0);
  v13 = v12;
  swift_bridgeObjectRetain(a1);
  v14 = sub_1000D36B0((uint64_t)v21, v13, v13);
  v16 = v15;
  sub_100005D08(v21);
  if (v16 >> 60 == 15)
  {
    v17 = sub_1000122F8();
    v18 = swift_allocError(&type metadata for KMError, v17, 0, 0);
    *(_OWORD *)v19 = 0u;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_OWORD *)(v19 + 48) = 0u;
    *(_QWORD *)(v19 + 64) = 0;
    *(_BYTE *)(v19 + 72) = 73;
    return swift_willThrow(v18);
  }
  else
  {
    sub_10006CE70((uint64_t)v14, v16, a2, a3, a4, a5, a6);
    return sub_100021610((uint64_t)v14, v16);
  }
}

uint64_t sub_10006CE70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, __n128);
  __n128 v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;

  v58 = (char *)a7;
  v59 = (_QWORD *)a4;
  v12 = sub_100011CE4(&qword_100159868);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v12, a5, "logs response ", 0);
  v14 = __chkstk_darwin(TupleTypeMetadata2);
  v16 = (uint64_t *)((char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __chkstk_darwin(v14);
  v19 = (uint64_t *)((char *)&v52 - v18);
  v73 = _swiftEmptyArrayStorage;
  v20 = (char *)&v52 + *(int *)(v17 + 48) - v18;
  v21 = v61;
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))(a6 + 136))(v20, a1, a2, a3, a5, v59, a6);
  v23 = v21;
  if (v21)
  {
    v72 = v21;
    swift_errorRetain(v21);
    v24 = sub_100005C88(&qword_10015AB50);
    v25 = swift_dynamicCast(&v62, &v72, v24, &type metadata for KMError, 6);
    if ((v25 & 1) != 0)
    {
      v26 = v62;
      v27 = v63;
      v29 = v64;
      v28 = v65;
      v31 = v66;
      v30 = v67;
      v32 = v68;
      v33 = v69;
      if (v71 == 3)
      {
        v61 = v70;
        swift_bridgeObjectRetain(v62);
        v34 = v26[2];
        if (v34)
        {
          v52 = v27;
          v53 = v29;
          v54 = v28;
          v55 = v31;
          v56 = v30;
          v57 = v32;
          v58 = (char *)v33;
          v60 = v23;
          v62 = _swiftEmptyArrayStorage;
          sub_100071C00(0, v34, 0);
          v35 = v62;
          v59 = v26;
          v36 = v26 + 5;
          do
          {
            v37 = *(v36 - 1);
            v38 = *v36;
            swift_bridgeObjectRetain(*v36);
            v40 = static os_log_type_t.error.getter(v39);
            v62 = v35;
            v42 = v35[2];
            v41 = v35[3];
            if (v42 >= v41 >> 1)
            {
              sub_100071C00((char *)(v41 > 1), v42 + 1, 1);
              v35 = v62;
            }
            v35[2] = v42 + 1;
            v43 = &v35[3 * v42];
            *((_BYTE *)v43 + 32) = v40;
            v36 += 2;
            v43[5] = v37;
            v43[6] = v38;
            --v34;
          }
          while (v34);
          v26 = v59;
          sub_1000391DC((uint64_t)v59, v52, v53, v54, v55, v56, v57, (uint64_t)v58, v61, 3);
        }
        else
        {
          sub_1000391DC((uint64_t)v26, v27, v29, v28, v31, v30, v32, v33, v61, 3);
          v35 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease(v26);
        v25 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        v73 = v35;
        goto LABEL_15;
      }
      v25 = sub_1000391DC((uint64_t)v62, v63, v64, v65, v66, v67, v68, v69, v70, v71);
    }
    v35 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_willThrow(v25);
    goto LABEL_16;
  }
  v35 = (_QWORD *)v22;
  *v19 = v22;
  v44 = (char *)v16 + *(int *)(TupleTypeMetadata2 + 48);
  *v16 = v22;
  v45 = *(_QWORD *)(a5 - 8);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v44, v20, a5);
  v73 = v35;
  v46 = *(void (**)(char *, uint64_t, __n128))(v45 + 8);
  v47 = swift_bridgeObjectRetain(v35);
  v46(v44, a5, v47);
  v48 = (char *)v16 + *(int *)(TupleTypeMetadata2 + 48);
  v49 = *v19;
  v50 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v50(v48, v20, a5);
  swift_bridgeObjectRelease(v49);
  v50(v58, v48, a5);
LABEL_16:
  sub_10006D210((uint64_t *)&v73);
  return swift_bridgeObjectRelease(v35);
}

uint64_t sub_10006D210(uint64_t *a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  result = *a1;
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(result);
    v12 = v3;
    v4 = (_QWORD *)(v3 + 48);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v7 = *((unsigned __int8 *)v4 - 16);
      swift_bridgeObjectRetain(*v4);
      v8 = (void *)*sub_1000D2E50();
      v9 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v10 = swift_allocObject(v9, 72, 7);
      *(_OWORD *)(v10 + 16) = xmmword_10010F050;
      *(_QWORD *)(v10 + 56) = &type metadata for String;
      *(_QWORD *)(v10 + 64) = sub_100026838();
      *(_QWORD *)(v10 + 32) = v6;
      *(_QWORD *)(v10 + 40) = v5;
      swift_bridgeObjectRetain(v5);
      v11 = v8;
      os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v11, "(kernel): %{public}s", 20, 2, v10);
      swift_bridgeObjectRelease(v5);

      swift_bridgeObjectRelease(v10);
      v4 += 3;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease(v12);
  }
  return result;
}

uint64_t sub_10006D34C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(void);
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;

  v5 = sub_100005C88(&qword_1001587E0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(void))(*(_QWORD *)v2 + 424);
  v71 = ((uint64_t (*)(uint64_t))v9)(v6);
  v72 = v10;
  v75 = a1;
  v76 = a2;
  swift_bridgeObjectRetain(a2);
  v11._countAndFlagsBits = 61;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 1, 1, v12);
  v13 = sub_100026250();
  StringProtocol.range<A>(of:options:range:locale:)(&v75, 0, 0, 0, 1, v8, &type metadata for String, &type metadata for String, v13, v13);
  v15 = v14;
  v17 = v16;
  sub_1000124F8((uint64_t)v8, &qword_1001587E0);
  swift_bridgeObjectRelease(v76);
  v18 = swift_bridgeObjectRelease(v72);
  if ((v17 & 1) != 0)
    return 0;
  v19 = ((uint64_t (*)(uint64_t))v9)(v18);
  v21 = v20;
  v9();
  swift_bridgeObjectRelease(v22);
  v23 = String.distance(from:to:)(15, v15, v19, v21);
  v24 = swift_bridgeObjectRelease(v21);
  v25 = ((uint64_t (*)(uint64_t))v9)(v24);
  v27 = v26;
  v28 = sub_100072664(v23, v25, v26);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  swift_bridgeObjectRelease(v27);
  v71 = v28;
  v72 = v30;
  v73 = v32;
  v74 = v34;
  v75 = 32;
  v76 = 0xE100000000000000;
  v35 = sub_100072700();
  v36 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v75, &type metadata for Substring, &type metadata for String, v35, v13);
  swift_bridgeObjectRelease(v34);
  if (!v36[2])
    goto LABEL_10;
  v38 = v36[4];
  v37 = v36[5];
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v36);
  result = sub_100032C6C(30768, 0xE200000000000000, v38, v37);
  if ((result & 1) == 0)
  {
    v51 = HIBYTE(v37) & 0xF;
    v52 = v38 & 0xFFFFFFFFFFFFLL;
    if ((v37 & 0x2000000000000000) != 0)
      v53 = HIBYTE(v37) & 0xF;
    else
      v53 = v38 & 0xFFFFFFFFFFFFLL;
    if (!v53)
    {
      v50 = (_QWORD *)v37;
      goto LABEL_11;
    }
    if ((v37 & 0x1000000000000000) != 0)
    {
      v55 = (uint64_t)sub_100071F38(v38, v37, 10);
      LOBYTE(v38) = v69;
LABEL_62:
      swift_bridgeObjectRelease(v37);
      if ((v38 & 1) != 0)
        return 0;
      else
        return v55;
    }
    if ((v37 & 0x2000000000000000) == 0)
    {
      if ((v38 & 0x1000000000000000) != 0)
        v54 = (unsigned __int8 *)((v37 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v54 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v38, v37);
      v55 = (uint64_t)sub_10007201C(v54, v52, 10);
      LOBYTE(v38) = v56 & 1;
      goto LABEL_62;
    }
    v71 = v38;
    v72 = v37 & 0xFFFFFFFFFFFFFFLL;
    if (v38 == 43)
    {
      if (v51)
      {
        if (v51 == 1 || (BYTE1(v38) - 48) > 9u)
          goto LABEL_45;
        v55 = (BYTE1(v38) - 48);
        if (v51 != 2)
        {
          if ((BYTE2(v38) - 48) > 9u)
            goto LABEL_45;
          v55 = 10 * (BYTE1(v38) - 48) + (BYTE2(v38) - 48);
          if (v51 != 3)
          {
            if ((BYTE3(v38) - 48) > 9u)
              goto LABEL_45;
            v55 = 10 * v55 + (BYTE3(v38) - 48);
            v57 = v51 - 4;
            if (v57)
            {
              v58 = (unsigned __int8 *)&v71 + 4;
              while (1)
              {
                v59 = *v58 - 48;
                if (v59 > 9)
                  goto LABEL_45;
                v60 = 10 * v55;
                if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63)
                  goto LABEL_45;
                v55 = v60 + v59;
                if (__OFADD__(v60, v59))
                  goto LABEL_45;
                LOBYTE(v38) = 0;
                ++v58;
                if (!--v57)
                  goto LABEL_62;
              }
            }
          }
        }
LABEL_61:
        LOBYTE(v38) = 0;
        goto LABEL_62;
      }
    }
    else
    {
      if (v38 != 45)
      {
        if (!v51 || (v38 - 48) > 9u)
          goto LABEL_45;
        v55 = (v38 - 48);
        if (v51 != 1)
        {
          if ((BYTE1(v38) - 48) > 9u)
            goto LABEL_45;
          v55 = 10 * (v38 - 48) + (BYTE1(v38) - 48);
          if (v51 != 2)
          {
            if ((BYTE2(v38) - 48) > 9u)
              goto LABEL_45;
            v55 = 10 * v55 + (BYTE2(v38) - 48);
            v61 = v51 - 3;
            if (v61)
            {
              v62 = (unsigned __int8 *)&v71 + 3;
              while (1)
              {
                v63 = *v62 - 48;
                if (v63 > 9)
                  goto LABEL_45;
                v64 = 10 * v55;
                if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63)
                  goto LABEL_45;
                v55 = v64 + v63;
                if (__OFADD__(v64, v63))
                  goto LABEL_45;
                LOBYTE(v38) = 0;
                ++v62;
                if (!--v61)
                  goto LABEL_62;
              }
            }
          }
        }
        goto LABEL_61;
      }
      if (v51)
      {
        if (v51 == 1 || (BYTE1(v38) - 48) > 9u)
          goto LABEL_45;
        if (v51 == 2)
        {
          LOBYTE(v38) = 0;
          v55 = -(uint64_t)(BYTE1(v38) - 48);
          goto LABEL_62;
        }
        if ((BYTE2(v38) - 48) > 9u)
          goto LABEL_45;
        v55 = -10 * (BYTE1(v38) - 48) - (BYTE2(v38) - 48);
        if (v51 != 3)
        {
          if ((BYTE3(v38) - 48) <= 9u)
          {
            v55 = 10 * (int)v55 - (BYTE3(v38) - 48);
            v65 = v51 - 4;
            if (!v65)
              goto LABEL_61;
            v66 = (unsigned __int8 *)&v71 + 4;
            while (1)
            {
              v67 = *v66 - 48;
              if (v67 > 9)
                break;
              v68 = 10 * v55;
              if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63)
                break;
              v55 = v68 - v67;
              if (__OFSUB__(v68, v67))
                break;
              LOBYTE(v38) = 0;
              ++v66;
              if (!--v65)
                goto LABEL_62;
            }
          }
LABEL_45:
          v55 = 0;
          LOBYTE(v38) = 1;
          goto LABEL_62;
        }
        goto LABEL_61;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v40 = sub_100072664(2uLL, v38, v37);
  v42 = v41;
  v44 = v43;
  v36 = v45;
  swift_bridgeObjectRelease(v37);
  if ((v40 ^ v42) < 0x4000)
  {
LABEL_10:
    v50 = v36;
LABEL_11:
    swift_bridgeObjectRelease(v50);
    return 0;
  }
  v46 = sub_100072298(v40, v42, v44, (unint64_t)v36, 16);
  if ((v47 & 0x100) != 0)
    v46 = (uint64_t)sub_100071E48(v40, v42, v44, (uint64_t)v36, 16);
  v48 = v46;
  v49 = v47;
  swift_bridgeObjectRelease(v36);
  if ((v49 & 1) != 0)
    return 0;
  else
    return v48;
}

uint64_t sub_10006D930(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;

  v8 = sub_100005C88(&qword_1001587E0);
  __chkstk_darwin(v8);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 72);
  v71 = v11(a3, a4);
  v72 = v12;
  v75 = a1;
  v76 = a2;
  swift_bridgeObjectRetain(a2);
  v13._countAndFlagsBits = 61;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 1, 1, v14);
  v15 = sub_100026250();
  StringProtocol.range<A>(of:options:range:locale:)(&v75, 0, 0, 0, 1, v10, &type metadata for String, &type metadata for String, v15, v15);
  v17 = v16;
  v19 = v18;
  sub_1000124F8((uint64_t)v10, &qword_1001587E0);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v72);
  if ((v19 & 1) != 0)
    return 0;
  v20 = v11(a3, a4);
  v22 = v21;
  v11(a3, a4);
  swift_bridgeObjectRelease(v23);
  v24 = String.distance(from:to:)(15, v17, v20, v22);
  swift_bridgeObjectRelease(v22);
  v25 = v11(a3, a4);
  v27 = v26;
  v28 = sub_100072664(v24, v25, v26);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  swift_bridgeObjectRelease(v27);
  v71 = v28;
  v72 = v30;
  v73 = v32;
  v74 = v34;
  v75 = 32;
  v76 = 0xE100000000000000;
  v35 = sub_100072700();
  v36 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v75, &type metadata for Substring, &type metadata for String, v35, v15);
  swift_bridgeObjectRelease(v34);
  if (!v36[2])
    goto LABEL_10;
  v38 = v36[4];
  v37 = v36[5];
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v36);
  result = sub_100032C6C(30768, 0xE200000000000000, v38, v37);
  if ((result & 1) == 0)
  {
    v51 = HIBYTE(v37) & 0xF;
    v52 = v38 & 0xFFFFFFFFFFFFLL;
    if ((v37 & 0x2000000000000000) != 0)
      v53 = HIBYTE(v37) & 0xF;
    else
      v53 = v38 & 0xFFFFFFFFFFFFLL;
    if (!v53)
    {
      v50 = (_QWORD *)v37;
      goto LABEL_11;
    }
    if ((v37 & 0x1000000000000000) != 0)
    {
      v55 = (uint64_t)sub_100071F38(v38, v37, 10);
      LOBYTE(v38) = v69;
LABEL_56:
      swift_bridgeObjectRelease(v37);
      if ((v38 & 1) != 0)
        return 0;
      else
        return v55;
    }
    if ((v37 & 0x2000000000000000) == 0)
    {
      if ((v38 & 0x1000000000000000) != 0)
        v54 = (unsigned __int8 *)((v37 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v54 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v38, v37);
      v55 = (uint64_t)sub_10007201C(v54, v52, 10);
      LOBYTE(v38) = v56 & 1;
      goto LABEL_56;
    }
    v71 = v38;
    v72 = v37 & 0xFFFFFFFFFFFFFFLL;
    if (v38 == 43)
    {
      if (!v51)
        goto LABEL_69;
      if (v51 == 1 || (BYTE1(v38) - 48) > 9u)
        goto LABEL_43;
      v55 = (BYTE1(v38) - 48);
      if (v51 != 2)
      {
        if ((BYTE2(v38) - 48) > 9u)
          goto LABEL_43;
        v55 = 10 * (BYTE1(v38) - 48) + (BYTE2(v38) - 48);
        v57 = v51 - 3;
        if (v57)
        {
          v58 = (unsigned __int8 *)&v71 + 3;
          while (1)
          {
            v59 = *v58 - 48;
            if (v59 > 9)
              goto LABEL_43;
            v60 = 10 * v55;
            if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63)
              goto LABEL_43;
            v55 = v60 + v59;
            if (__OFADD__(v60, v59))
              goto LABEL_43;
            LOBYTE(v38) = 0;
            ++v58;
            if (!--v57)
              goto LABEL_56;
          }
        }
      }
    }
    else
    {
      if (v38 == 45)
      {
        if (v51)
        {
          if (v51 != 1 && (BYTE1(v38) - 48) <= 9u)
          {
            if (v51 == 2)
            {
              LOBYTE(v38) = 0;
              v55 = -(uint64_t)(BYTE1(v38) - 48);
              goto LABEL_56;
            }
            if ((BYTE2(v38) - 48) <= 9u)
            {
              v55 = -10 * (BYTE1(v38) - 48) - (BYTE2(v38) - 48);
              v65 = v51 - 3;
              if (!v65)
                goto LABEL_55;
              v66 = (unsigned __int8 *)&v71 + 3;
              while (1)
              {
                v67 = *v66 - 48;
                if (v67 > 9)
                  break;
                v68 = 10 * v55;
                if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63)
                  break;
                v55 = v68 - v67;
                if (__OFSUB__(v68, v67))
                  break;
                LOBYTE(v38) = 0;
                ++v66;
                if (!--v65)
                  goto LABEL_56;
              }
            }
          }
LABEL_43:
          v55 = 0;
          LOBYTE(v38) = 1;
          goto LABEL_56;
        }
        __break(1u);
LABEL_69:
        __break(1u);
        return result;
      }
      if (!v51 || (v38 - 48) > 9u)
        goto LABEL_43;
      v55 = (v38 - 48);
      if (v51 != 1)
      {
        if ((BYTE1(v38) - 48) > 9u)
          goto LABEL_43;
        v55 = 10 * (v38 - 48) + (BYTE1(v38) - 48);
        v61 = v51 - 2;
        if (v61)
        {
          v62 = (unsigned __int8 *)&v71 + 2;
          while (1)
          {
            v63 = *v62 - 48;
            if (v63 > 9)
              goto LABEL_43;
            v64 = 10 * v55;
            if ((unsigned __int128)(v55 * (__int128)10) >> 64 != (10 * v55) >> 63)
              goto LABEL_43;
            v55 = v64 + v63;
            if (__OFADD__(v64, v63))
              goto LABEL_43;
            LOBYTE(v38) = 0;
            ++v62;
            if (!--v61)
              goto LABEL_56;
          }
        }
      }
    }
LABEL_55:
    LOBYTE(v38) = 0;
    goto LABEL_56;
  }
  v40 = sub_100072664(2uLL, v38, v37);
  v42 = v41;
  v44 = v43;
  v36 = v45;
  swift_bridgeObjectRelease(v37);
  if (!((v40 ^ v42) >> 14))
  {
LABEL_10:
    v50 = v36;
LABEL_11:
    swift_bridgeObjectRelease(v50);
    return 0;
  }
  v46 = sub_100072298(v40, v42, v44, (unint64_t)v36, 16);
  if ((v47 & 0x100) != 0)
    v46 = (uint64_t)sub_100071E48(v40, v42, v44, (uint64_t)v36, 16);
  v48 = v46;
  v49 = v47;
  swift_bridgeObjectRelease(v36);
  if ((v49 & 1) != 0)
    return 0;
  else
    return v48;
}

uint64_t sub_10006DEC4()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 != 2)
    return v1 & 1;
  result = 0;
  *(_BYTE *)(v0 + 16) = 0;
  return result;
}

uint64_t sub_10006DEE4(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

_BYTE *(*sub_10006DEEC(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006DEC4() & 1;
  return sub_10006DF24;
}

_BYTE *sub_10006DF24(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 16) = result[8];
  return result;
}

uint64_t sub_10006DF34()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 17);
  if (v1 != 2)
    return v1 & 1;
  result = 0;
  *(_BYTE *)(v0 + 17) = 0;
  return result;
}

uint64_t sub_10006DF54(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

_BYTE *(*sub_10006DF5C(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006DF34() & 1;
  return sub_10006DF94;
}

_BYTE *sub_10006DF94(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 17) = result[8];
  return result;
}

uint64_t sub_10006DFA4()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 18);
  if (v1 != 2)
    return v1 & 1;
  result = 0;
  *(_BYTE *)(v0 + 18) = 0;
  return result;
}

uint64_t sub_10006DFC4(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 18) = result;
  return result;
}

_BYTE *(*sub_10006DFCC(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006DFA4() & 1;
  return sub_10006E004;
}

_BYTE *sub_10006E004(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 18) = result[8];
  return result;
}

uint64_t sub_10006E014()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 19);
  if (v1 != 2)
    return v1 & 1;
  result = 0;
  *(_BYTE *)(v0 + 19) = 0;
  return result;
}

uint64_t sub_10006E034(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 19) = result;
  return result;
}

_BYTE *(*sub_10006E03C(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E014() & 1;
  return sub_10006E074;
}

_BYTE *sub_10006E074(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 19) = result[8];
  return result;
}

uint64_t sub_10006E084()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 20);
  if (v1 != 2)
    return v1 & 1;
  result = 0;
  *(_BYTE *)(v0 + 20) = 0;
  return result;
}

uint64_t sub_10006E0A4(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 20) = result;
  return result;
}

_BYTE *(*sub_10006E0AC(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E084() & 1;
  return sub_10006E0E4;
}

_BYTE *sub_10006E0E4(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 20) = result[8];
  return result;
}

uint64_t sub_10006E0F4()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 21);
  if (v1 != 2)
    return v1 & 1;
  result = 0;
  *(_BYTE *)(v0 + 21) = 0;
  return result;
}

uint64_t sub_10006E114(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 21) = result;
  return result;
}

_BYTE *(*sub_10006E11C(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E0F4() & 1;
  return sub_10006E154;
}

_BYTE *sub_10006E154(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 21) = result[8];
  return result;
}

uint64_t sub_10006E164()
{
  unsigned __int8 *v0;
  int v1;
  char v2;

  v1 = v0[22];
  if (v1 == 2)
  {
    if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))() & 1) != 0
      || ((*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))() & 1) != 0
      || ((*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))() & 1) != 0
      || ((*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))() & 1) != 0)
    {
      v2 = 0;
    }
    else
    {
      v2 = sub_1000D7F90() ^ 1;
    }
    v0[22] = v2 & 1;
  }
  else
  {
    v2 = v1 & 1;
  }
  return v2 & 1;
}

uint64_t sub_10006E1E4(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 22) = result;
  return result;
}

_BYTE *(*sub_10006E1EC(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E164() & 1;
  return sub_10006E224;
}

_BYTE *sub_10006E224(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 22) = result[8];
  return result;
}

BOOL sub_10006E234()
{
  unsigned __int8 *v0;
  int v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, __n128);
  __n128 v6;
  uint64_t v7;
  _BOOL8 result;

  v1 = v0[23];
  if (v1 != 2)
    return v1 & 1;
  v2 = sub_10008FA24();
  v4 = *(_QWORD *)v2;
  v3 = *((_QWORD *)v2 + 1);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v0 + 592);
  v6 = swift_bridgeObjectRetain(v3);
  v7 = v5(v4, v3, v6);
  swift_bridgeObjectRelease(v3);
  result = v7 != 0;
  v0[23] = result;
  return result;
}

uint64_t sub_10006E2CC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 23) = result;
  return result;
}

_BYTE *(*sub_10006E2D4(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E234();
  return sub_10006E30C;
}

_BYTE *sub_10006E30C(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 23) = result[8];
  return result;
}

uint64_t sub_10006E31C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v1;
  if (v2 == 1)
  {
    v4 = (uint64_t *)sub_100090080();
    v5 = *v4;
    v6 = v4[1];
    v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*v0 + 600);
    v8 = swift_bridgeObjectRetain(v6);
    v3 = v7(v5, v6, v8);
    v10 = v9;
    swift_bridgeObjectRelease(v6);
    v11 = v0[3];
    v12 = v0[4];
    v0[3] = v3;
    v0[4] = v10;
    swift_bridgeObjectRetain(v10);
    sub_100072744(v11, v12);
  }
  sub_100072758(v1, v2);
  return v3;
}

uint64_t sub_10006E3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return sub_100072744(v3, v4);
}

uint64_t (*sub_10006E404(uint64_t *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = sub_10006E31C();
  a1[1] = v3;
  return sub_10006E438;
}

uint64_t sub_10006E438(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v2 = a1[2];
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = *a1;
  *(_QWORD *)(v2 + 32) = v3;
  if ((a2 & 1) == 0)
    return sub_100072744(v4, v5);
  swift_bridgeObjectRetain(v3);
  sub_100072744(v4, v5);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10006E49C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[6];
  if (v1)
  {
    v2 = v0[5];
  }
  else
  {
    v3 = sub_10008FA18();
    v4 = *(_QWORD *)v3;
    v5 = *((_QWORD *)v3 + 1);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*v0 + 600);
    v7 = swift_bridgeObjectRetain(v5);
    v2 = v6(v4, v5, v7);
    v9 = v8;
    swift_bridgeObjectRelease(v5);
    v10 = v0[6];
    v0[5] = v2;
    v0[6] = v9;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRelease(v10);
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_10006E560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_10006E570(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = sub_10006E49C();
  a1[1] = v3;
  return sub_10006E5A4;
}

uint64_t sub_10006E5A4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  v3 = *a1;
  v4 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 40) = v3;
  *(_QWORD *)(v1 + 48) = v2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10006E5B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v1 = v0;
  v2 = sub_100005C88(&qword_1001587E0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0[7];
  v7 = v0[8];
  v8 = v6;
  if (v7 == 1)
  {
    v9 = *(void (**)(void))(*v1 + 424);
    v41 = ((uint64_t (*)(uint64_t))v9)(v3);
    v42 = v10;
    v45 = 0x786966667573636BLL;
    v46 = 0xE800000000000000;
    v11._countAndFlagsBits = 61;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12 = type metadata accessor for Locale(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
    v13 = sub_100026250();
    StringProtocol.range<A>(of:options:range:locale:)(&v45, 0, 0, 0, 1, v5, &type metadata for String, &type metadata for String, v13, v13);
    v15 = v14;
    v17 = v16;
    sub_1000124F8((uint64_t)v5, &qword_1001587E0);
    swift_bridgeObjectRelease(v46);
    v18 = swift_bridgeObjectRelease(v42);
    v8 = 0;
    v19 = 0;
    if ((v17 & 1) == 0)
    {
      v20 = ((uint64_t (*)(uint64_t))v9)(v18);
      v22 = v21;
      v9();
      swift_bridgeObjectRelease(v23);
      v24 = String.distance(from:to:)(15, v15, v20, v22);
      v25 = swift_bridgeObjectRelease(v22);
      v26 = ((uint64_t (*)(uint64_t))v9)(v25);
      v28 = v27;
      v29 = sub_100072664(v24, v26, v27);
      v31 = v30;
      v33 = v32;
      v35 = v34;
      swift_bridgeObjectRelease(v28);
      v41 = v29;
      v42 = v31;
      v43 = v33;
      v44 = v35;
      v45 = 32;
      v46 = 0xE100000000000000;
      v36 = sub_100072700();
      v37 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v45, &type metadata for Substring, &type metadata for String, v36, v13);
      swift_bridgeObjectRelease(v35);
      if (v37[2])
      {
        v8 = v37[4];
        v19 = v37[5];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRelease(v37);
      }
      else
      {
        swift_bridgeObjectRelease(v37);
        v8 = 0;
        v19 = 0;
      }
    }
    v38 = v1[7];
    v39 = v1[8];
    v1[7] = v8;
    v1[8] = v19;
    swift_bridgeObjectRetain(v19);
    sub_100072744(v38, v39);
  }
  sub_100072758(v6, v7);
  return v8;
}

uint64_t sub_10006E83C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return sub_100072744(v3, v4);
}

uint64_t (*sub_10006E850(uint64_t *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = sub_10006E5B8();
  a1[1] = v3;
  return sub_10006E884;
}

uint64_t sub_10006E884(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v2 = a1[2];
  v4 = *(_QWORD *)(v2 + 56);
  v5 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 56) = *a1;
  *(_QWORD *)(v2 + 64) = v3;
  if ((a2 & 1) == 0)
    return sub_100072744(v4, v5);
  swift_bridgeObjectRetain(v3);
  sub_100072744(v4, v5);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10006E8E8()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  void (*v7)(void);
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v1 = v0;
  v2 = sub_100005C88(&qword_1001587E0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0[72];
  if (v6 == 2)
  {
    v7 = *(void (**)(void))(*(_QWORD *)v0 + 424);
    v39 = ((uint64_t (*)(uint64_t))v7)(v3);
    v40 = v8;
    v43 = 0x427441434B787561;
    v44 = 0xEB00000000746F6FLL;
    v9._countAndFlagsBits = 61;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v10 = type metadata accessor for Locale(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
    v11 = sub_100026250();
    StringProtocol.range<A>(of:options:range:locale:)(&v43, 0, 0, 0, 1, v5, &type metadata for String, &type metadata for String, v11, v11);
    v13 = v12;
    v15 = v14;
    sub_1000124F8((uint64_t)v5, &qword_1001587E0);
    swift_bridgeObjectRelease(v44);
    v16 = swift_bridgeObjectRelease(v40);
    if ((v15 & 1) != 0)
    {
      v37 = 0;
    }
    else
    {
      v17 = ((uint64_t (*)(uint64_t))v7)(v16);
      v19 = v18;
      v7();
      swift_bridgeObjectRelease(v20);
      v21 = String.distance(from:to:)(15, v13, v17, v19);
      v22 = swift_bridgeObjectRelease(v19);
      v23 = ((uint64_t (*)(uint64_t))v7)(v22);
      v25 = v24;
      v26 = sub_100072664(v21, v23, v24);
      v28 = v27;
      v30 = v29;
      v32 = v31;
      swift_bridgeObjectRelease(v25);
      v39 = v26;
      v40 = v28;
      v41 = v30;
      v42 = v32;
      v43 = 32;
      v44 = 0xE100000000000000;
      v33 = sub_100072700();
      v34 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v43, &type metadata for Substring, &type metadata for String, v33, v11);
      swift_bridgeObjectRelease(v32);
      if (v34[2])
      {
        v36 = v34[4];
        v35 = v34[5];
        swift_bridgeObjectRetain(v35);
        swift_bridgeObjectRelease(v34);
        if (v36 == 0x65736C6166 && v35 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease(0xE500000000000000);
          v37 = 1;
        }
        else
        {
          v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v35, 0x65736C6166, 0xE500000000000000, 0);
          swift_bridgeObjectRelease(v35);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v34);
        v37 = 0;
      }
    }
    v1[72] = v37 & 1;
  }
  else
  {
    v37 = v6 & 1;
  }
  return v37 & 1;
}

uint64_t sub_10006EB9C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = result;
  return result;
}

_BYTE *(*sub_10006EBA4(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006E8E8() & 1;
  return sub_10006EBDC;
}

_BYTE *sub_10006EBDC(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 72) = result[8];
  return result;
}

BOOL sub_10006EBEC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _BOOL8 result;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(v0 + 73);
  if (v1 != 2)
    return v1 & 1;
  v2 = v0;
  v3 = sub_10006D34C(0x676F6C6D6BLL, 0xE500000000000000);
  if ((v4 & 1) != 0)
  {
    v6 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    v7 = (void *)static OS_os_log.default.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    os_log(_:dso:log:type:_:)("kmlog not specified", 19, 2, &_mh_execute_header, v7, v8, _swiftEmptyArrayStorage);

    result = 0;
  }
  else
  {
    result = v3 == 1;
  }
  *(_BYTE *)(v2 + 73) = result;
  return result;
}

uint64_t sub_10006ECA0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 73) = result;
  return result;
}

_BYTE *(*sub_10006ECA8(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006EBEC();
  return sub_10006ECE0;
}

_BYTE *sub_10006ECE0(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 73) = result[8];
  return result;
}

uint64_t sub_10006ECF0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  __int16 v6;

  if ((*(_BYTE *)(v0 + 76) & 1) != 0)
  {
    v1 = sub_10006D34C(0x676F6C6D6BLL, 0xE500000000000000);
    if ((v2 & 1) != 0 || v1 != 1)
    {
      v5 = sub_1000D7F90();
      if ((v5 & 1) == 0)
      {
        LOBYTE(v3) = 0;
        v6 = 256;
        v4 = 1;
        goto LABEL_10;
      }
      LOBYTE(v3) = static os_log_type_t.error.getter(v5);
    }
    else
    {
      LOBYTE(v3) = static os_log_type_t.default.getter(1);
    }
    v4 = 0;
    v6 = v3;
LABEL_10:
    *(_WORD *)(v0 + 74) = v6;
    *(_BYTE *)(v0 + 76) = 0;
    return v3 | (v4 << 8);
  }
  v3 = *(unsigned __int16 *)(v0 + 74);
  v4 = (v3 >> 8) & 1;
  return v3 | (v4 << 8);
}

uint64_t sub_10006ED78(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 74) = result & 0x1FF;
  *(_BYTE *)(v1 + 76) = 0;
  return result;
}

uint64_t *(*sub_10006ED88(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  __int16 v3;

  *(_QWORD *)a1 = v1;
  v3 = sub_10006ECF0();
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = HIBYTE(v3) & 1;
  return sub_10006EDC4;
}

uint64_t *sub_10006EDC4(uint64_t *result)
{
  uint64_t v1;
  __int16 v2;

  v1 = *result;
  if (*((_BYTE *)result + 9))
    v2 = 256;
  else
    v2 = 0;
  *(_WORD *)(v1 + 74) = v2 | *((unsigned __int8 *)result + 8);
  *(_BYTE *)(v1 + 76) = 0;
  return result;
}

BOOL sub_10006EDEC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BOOL8 result;
  int v11;

  v1 = *(unsigned __int8 *)(v0 + 77);
  if (v1 != 2)
    return v1 & 1;
  v2 = v0;
  v3 = sub_10006D34C(0x6173615F74786564, 0xEC00000062735F6ELL);
  if ((v4 & 1) != 0)
  {
    result = 0;
  }
  else
  {
    v5 = v3;
    v6 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_10010F050;
    *(_QWORD *)(v7 + 56) = &type metadata for Int;
    *(_QWORD *)(v7 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v7 + 32) = v5;
    v8 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    v9 = (void *)static OS_os_log.default.getter(v8);
    static os_log_type_t.default.getter(v9);
    os_log(_:dso:log:type:_:)("dext_asan_sb boot-arg present: %d", v11);
    swift_bridgeObjectRelease(v7);

    result = v5 == 1;
  }
  *(_BYTE *)(v2 + 77) = result;
  return result;
}

uint64_t sub_10006EEFC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 77) = result;
  return result;
}

_BYTE *(*sub_10006EF04(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_10006EDEC();
  return sub_10006EF3C;
}

_BYTE *sub_10006EF3C(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 77) = result[8];
  return result;
}

uint64_t sub_10006EF4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  _BYTE v6[24];
  _BYTE v7[40];
  __int128 v8;
  uint64_t v9;
  _UNKNOWN **v10;
  _BYTE v11[24];

  v3 = v1 + 80;
  swift_beginAccess(v3, v11, 0, 0);
  sub_100019E1C(v3, (uint64_t)&v8, &qword_100159878);
  if (!v9)
  {
    sub_1000124F8((uint64_t)&v8, &qword_100159878);
    v4 = objc_msgSend(objc_allocWithZone((Class)NSProcessInfo), "init");
    v9 = sub_100005D68(0, &qword_100159880, NSProcessInfo_ptr);
    v10 = &off_100148888;
    *(_QWORD *)&v8 = v4;
    sub_100005C44((uint64_t)&v8, (uint64_t)v7);
    swift_beginAccess(v3, v6, 33, 0);
    sub_10007276C((uint64_t)v7, v3);
    swift_endAccess(v6);
  }
  return sub_100004E2C(&v8, a1);
}

uint64_t sub_10006F040(__int128 *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  _BYTE v4[40];

  sub_100004E2C(a1, (uint64_t)v4);
  swift_beginAccess(v1 + 80, v3, 33, 0);
  sub_10007276C((uint64_t)v4, v1 + 80);
  return swift_endAccess(v3);
}

void (*sub_10006F094(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  sub_10006EF4C((uint64_t)v3);
  return sub_10006F0E0;
}

void sub_10006F0E0(uint64_t *a1, char a2)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    v5 = v2[18];
    sub_100005C44(*a1, (uint64_t)v3);
    sub_100004E2C(v3, v4);
    swift_beginAccess(v5 + 80, v2 + 15, 33, 0);
    sub_10007276C(v4, v5 + 80);
    swift_endAccess(v2 + 15);
    sub_100005D08(v2);
  }
  else
  {
    v6 = v2[18];
    sub_100004E2C((__int128 *)*a1, (uint64_t)v3);
    v6 += 80;
    swift_beginAccess(v6, v4, 33, 0);
    sub_10007276C((uint64_t)v3, v6);
    swift_endAccess(v4);
  }
  free(v2);
}

uint64_t sub_10006F1B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  size_t v11;
  uint64_t v12;

  v2 = type metadata accessor for POSIXError(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 8;
  v12 = 0;
  v6 = String.utf8CString.getter(a1);
  LODWORD(a1) = sysctlbyname((const char *)(v6 + 32), &v12, &v11, 0, 0);
  swift_release(v6);
  if (!(_DWORD)a1)
    return v12;
  v7 = sub_1000BCAF8((uint64_t)v5);
  POSIXError._nsError.getter(v7);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return swift_willThrow(v8);
}

char *sub_10006F2C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v16;

  v2 = type metadata accessor for POSIXError(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = 0;
  v6 = String.utf8CString.getter(a1);
  v7 = sysctlbyname((const char *)(v6 + 32), 0, &v16, 0, 0);
  swift_release(v6);
  if (v7)
  {
    v8 = sub_1000BCAF8((uint64_t)v5);
    POSIXError._nsError.getter(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_willThrow(v9);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v16, -1);
    v11 = String.utf8CString.getter(a1);
    v12 = sysctlbyname((const char *)(v11 + 32), v10, &v16, 0, 0);
    swift_release(v11);
    if (v12)
    {
      v13 = sub_1000BCAF8((uint64_t)v5);
      POSIXError._nsError.getter(v13);
      v14 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      swift_willThrow(v14);
    }
    else
    {
      v5 = (char *)String.init(cString:)(v10);
    }
    swift_slowDealloc(v10, -1, -1);
  }
  return v5;
}

uint64_t sub_10006F484(unint64_t a1, uint64_t a2, unint64_t a3)
{
  mach_port_t v4;

  if (a3 >> 60 != 15)
    __asm { BR              X10 }
  v4 = sub_1000D7F34();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (HIDWORD(a1))
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x10006F6E8);
  }
  return IOCatalogueSendData(v4, a1, 0, 0);
}

void sub_10006F70C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    sub_1000D7F34();
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (!HIDWORD(a2))
    {
      __asm { BR              X10 }
    }
    __break(1u);
    JUMPOUT(0x10006F7C8);
  }
  __break(1u);
  JUMPOUT(0x10006F7DCLL);
}

uint64_t sub_10006F7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = a1;
  v7 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = sub_100072BD8((uint64_t)&v6, a1, a2);
  swift_bridgeObjectRelease(v7);
  return v4;
}

uint64_t sub_10006F84C(uint64_t a1, uint64_t a2, char a3)
{
  mach_port_t v6;
  uint32_t v7;
  char *v8;
  uint64_t result;
  Swift::String v10;
  Swift::String v11;
  void *object;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_1000D7F34();
  if ((a3 & 1) != 0)
    v7 = 3;
  else
    v7 = 1;
  sub_1000665D4(a1, a2);
  v8 = (char *)sub_1000D17A0();
  sub_1000665DC(a1, a2);
  result = IOCatalogueTerminate(v6, v7, v8);
  if ((_DWORD)result)
  {
    _StringGuts.grow(_:)(55);
    v10._object = (void *)0x8000000100123D00;
    v10._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v10);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13._countAndFlagsBits = 41;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14 = sub_1000122F8();
    v15 = swift_allocError(&type metadata for KMError, v14, 0, 0);
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0xE000000000000000;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_QWORD *)(v16 + 64) = 0;
    *(_BYTE *)(v16 + 72) = 38;
    return swift_willThrow(v15);
  }
  return result;
}

void sub_10006F9B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[17];

  type metadata accessor for Optional(0, a5);
  v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v15[7] = (char *)v15 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&loc_10006FA70 + dword_1000702DC[a3 >> 62];
  v15[8] = a1;
  v15[3] = v13;
  v15[4] = v10;
  v15[5] = v14;
  v15[6] = a4;
  v15[2] = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __asm { BR              X9 }
}

_QWORD *sub_10006FA90()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  mach_port_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  mach_port_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  vm_address_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  void *v44;
  Swift::String v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  vm_address_t v50;
  unint64_t v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  void *object;
  uint64_t v56;
  unint64_t v57;
  vm_address_t v58;
  vm_size_t v59;
  vm_address_t v60;
  vm_map_t v61;
  vm_size_t v62;
  unint64_t v63;
  vm_size_t v64;
  vm_address_t v65;
  void (*v67)(_QWORD, uint64_t, char *);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(_QWORD, uint64_t, char *);

  v5 = mach_host_self();
  *(_QWORD *)(v4 - 112) = 0;
  *(_DWORD *)(v4 - 116) = 0;
  *(_QWORD *)(v4 - 136) = 0;
  *(_QWORD *)(v4 - 128) = 0;
  *(_QWORD *)(v4 - 104) = v3;
  *(_WORD *)(v4 - 96) = v1;
  *(_BYTE *)(v4 - 94) = BYTE2(v1);
  *(_BYTE *)(v4 - 93) = BYTE3(v1);
  *(_BYTE *)(v4 - 92) = BYTE4(v1);
  *(_BYTE *)(v4 - 91) = BYTE5(v1);
  v6 = kext_request(v5, 0xFF2u, v4 - 104, BYTE6(v1), (vm_offset_t *)(v4 - 112), (mach_msg_type_number_t *)(v4 - 116), (vm_offset_t *)(v4 - 128), (mach_msg_type_number_t *)(v4 - 132), (kern_return_t *)(v4 - 136));
  if ((_DWORD)v6)
  {
    v8 = (_QWORD *)sub_1000D1320(v6);
    v10 = v9;
    v11 = sub_1000122F8();
    v12 = swift_allocError(&type metadata for KMError, v11, 0, 0);
    *(_QWORD *)v13 = v8;
    *(_QWORD *)(v13 + 8) = v10;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_QWORD *)(v13 + 64) = 0;
    v14 = 2;
    goto LABEL_39;
  }
  v15 = *(const char **)(v4 - 128);
  if (!v15)
  {
    v8 = _swiftEmptyArrayStorage;
    v24 = *(unsigned int *)(v4 - 136);
    if ((_DWORD)v24)
      goto LABEL_13;
    goto LABEL_20;
  }
  if (!*(_DWORD *)(v4 - 132))
  {
    v8 = _swiftEmptyArrayStorage;
    v24 = *(unsigned int *)(v4 - 136);
    if ((_DWORD)v24)
      goto LABEL_13;
LABEL_20:
    if (v2 == (char *)&type metadata for () + 8)
    {
      swift_dynamicCast(*(_QWORD *)(v4 - 160), v7, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8, 7);
      v58 = *(_QWORD *)(v4 - 112);
      if (v58)
      {
        v59 = *(unsigned int *)(v4 - 116);
        if ((_DWORD)v59)
          vm_deallocate(mach_task_self_, v58, v59);
      }
      v60 = *(_QWORD *)(v4 - 128);
      if (v60)
      {
        v61 = mach_task_self_;
        v62 = *(unsigned int *)(v4 - 132);
LABEL_49:
        vm_deallocate(v61, v60, v62);
      }
LABEL_50:
      if (!v5)
        return v8;
      goto LABEL_45;
    }
    v33 = *(_QWORD *)(v4 - 112);
    if (v33)
    {
      v34 = *(unsigned int *)(v4 - 116);
      if ((_DWORD)v34)
      {
        v35 = *(_QWORD *)(v4 - 168);
        v36 = *(const char **)(v4 - 112);
        *(_QWORD *)(v4 - 216) = v34;
        sub_1000D34A4(v36, (uint64_t)v2, v35);
        v37 = *(_QWORD *)(v4 - 184);
        if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v37 + 48))(v35, 1, v2) == 1)
        {
          swift_bridgeObjectRelease(v8);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 200) + 8))(v35, *(_QWORD *)(v4 - 192));
          v38 = sub_1000122F8();
          v12 = swift_allocError(&type metadata for KMError, v38, 0, 0);
          v39 = 0xD000000000000026;
          v40 = "Unable to deserialize kernel response.";
LABEL_37:
          *(_QWORD *)v13 = v39;
          *(_QWORD *)(v13 + 8) = (unint64_t)(v40 - 32) | 0x8000000000000000;
          goto LABEL_38;
        }
        v67 = *(void (**)(_QWORD, uint64_t, char *))(v37 + 32);
        v68 = *(_QWORD *)(v4 - 208);
        v69 = v35;
        v70 = v67;
        v67(v68, v69, v2);
        v70(*(_QWORD *)(v4 - 160), v68, v2);
        vm_deallocate(mach_task_self_, v33, *(_QWORD *)(v4 - 216));
        if (v15)
        {
          v61 = mach_task_self_;
          v62 = *(unsigned int *)(v4 - 132);
          v60 = (vm_address_t)v15;
          goto LABEL_49;
        }
        goto LABEL_50;
      }
    }
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v4 - 104) = 0;
    *(_QWORD *)(v4 - 96) = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v52 = *(_QWORD *)(v4 - 96);
    *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 104);
    *(_QWORD *)(v4 - 96) = v52;
    v53._countAndFlagsBits = 0xD000000000000038;
    v53._object = (void *)0x8000000100123DC0;
    String.append(_:)(v53);
    v54._countAndFlagsBits = Data.description.getter(v3, v1);
    object = v54._object;
    String.append(_:)(v54);
    swift_bridgeObjectRelease(object);
    v8 = *(_QWORD **)(v4 - 104);
    v56 = *(_QWORD *)(v4 - 96);
    v57 = sub_1000122F8();
    v12 = swift_allocError(&type metadata for KMError, v57, 0, 0);
    *(_QWORD *)v13 = v8;
    *(_QWORD *)(v13 + 8) = v56;
LABEL_38:
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_QWORD *)(v13 + 64) = 0;
    v14 = 1;
LABEL_39:
    *(_BYTE *)(v13 + 72) = v14;
    swift_willThrow(v12);
    v50 = *(_QWORD *)(v4 - 112);
    if (!v50)
      goto LABEL_42;
    goto LABEL_40;
  }
  v16 = sub_100005C88(&qword_100159888);
  sub_1000D34A4(v15, v16, v4 - 104);
  v8 = *(_QWORD **)(v4 - 104);
  if (!v8)
  {
    v51 = sub_1000122F8();
    v12 = swift_allocError(&type metadata for KMError, v51, 0, 0);
    *(_QWORD *)v13 = 0xD00000000000001FLL;
    *(_QWORD *)(v13 + 8) = 0x8000000100123D40;
    goto LABEL_38;
  }
  *(_QWORD *)(v4 - 224) = v0;
  if (!v8[2])
  {
    __break(1u);
    goto LABEL_53;
  }
  v17 = v8[4];
  swift_bridgeObjectRetain(v17);
  v19 = sub_1000702EC(v18);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(v4 - 216) = v19;
  if (!v19)
  {
LABEL_36:
    swift_bridgeObjectRelease(v8);
    v63 = sub_1000122F8();
    v12 = swift_allocError(&type metadata for KMError, v63, 0, 0);
    v40 = "Unable to get log flags and messages.";
    v39 = 0xD000000000000025;
    goto LABEL_37;
  }
  if (v8[2] < 2uLL)
LABEL_53:
    __break(1u);
  v20 = v5;
  v21 = v8[5];
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v8);
  v22 = sub_100070428(v21);
  swift_bridgeObjectRelease(v21);
  if (!v22)
  {
    v8 = *(_QWORD **)(v4 - 216);
    v5 = v20;
    goto LABEL_36;
  }
  v23 = *(_QWORD *)(v4 - 216);
  v8 = sub_10007056C(v23, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  v5 = v20;
  v24 = *(unsigned int *)(v4 - 136);
  if (!(_DWORD)v24)
    goto LABEL_20;
LABEL_13:
  v25 = v8[2];
  if (v25)
  {
    *(_DWORD *)(v4 - 168) = v24;
    *(_DWORD *)(v4 - 160) = v5;
    *(_QWORD *)(v4 - 104) = _swiftEmptyArrayStorage;
    sub_10000C958(0, v25, 0);
    v26 = *(_QWORD **)(v4 - 104);
    v27 = v8 + 6;
    do
    {
      v29 = *(v27 - 1);
      v28 = *v27;
      *(_QWORD *)(v4 - 104) = v26;
      v31 = v26[2];
      v30 = v26[3];
      swift_bridgeObjectRetain(v28);
      if (v31 >= v30 >> 1)
      {
        sub_10000C958(v30 > 1, v31 + 1, 1);
        v26 = *(_QWORD **)(v4 - 104);
      }
      v26[2] = v31 + 1;
      v32 = &v26[2 * v31];
      v32[4] = v29;
      v32[5] = v28;
      v27 += 3;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease(v8);
    v5 = *(_DWORD *)(v4 - 160);
    v24 = *(unsigned int *)(v4 - 168);
  }
  else
  {
    swift_bridgeObjectRelease(v8);
    v26 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)(v4 - 104) = sub_1000D1320(v24);
  *(_QWORD *)(v4 - 96) = v41;
  v42._countAndFlagsBits = 10272;
  v42._object = (void *)0xE200000000000000;
  String.append(_:)(v42);
  *(_DWORD *)(v4 - 148) = v24;
  v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  v44 = v43._object;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(v44);
  v45._countAndFlagsBits = 41;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  v8 = *(_QWORD **)(v4 - 104);
  v46 = *(_QWORD *)(v4 - 96);
  v47 = sub_1000122F8();
  v48 = swift_allocError(&type metadata for KMError, v47, 0, 0);
  *(_QWORD *)v49 = v26;
  *(_QWORD *)(v49 + 8) = v8;
  *(_QWORD *)(v49 + 16) = v46;
  *(_OWORD *)(v49 + 24) = 0u;
  *(_OWORD *)(v49 + 40) = 0u;
  *(_OWORD *)(v49 + 56) = 0u;
  *(_BYTE *)(v49 + 72) = 3;
  swift_willThrow(v48);
  v50 = *(_QWORD *)(v4 - 112);
  if (v50)
  {
LABEL_40:
    v64 = *(unsigned int *)(v4 - 116);
    if ((_DWORD)v64)
      vm_deallocate(mach_task_self_, v50, v64);
  }
LABEL_42:
  v65 = *(_QWORD *)(v4 - 128);
  if (v65)
    vm_deallocate(mach_task_self_, v65, *(unsigned int *)(v4 - 132));
  if (v5)
LABEL_45:
    mach_port_deallocate(mach_task_self_, v5);
  return v8;
}

_QWORD *sub_1000702EC(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char v10;
  _BYTE v11[32];
  _QWORD *v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  sub_100071C1C(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_100005D28(i, (uint64_t)v11);
      if (!swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
        break;
      v5 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_100071C1C(0, v3[2] + 1, 1);
        v3 = v12;
      }
      v7 = v3[2];
      v6 = v3[3];
      if (v7 >= v6 >> 1)
      {
        sub_100071C1C((char *)(v6 > 1), v7 + 1, 1);
        v3 = v12;
      }
      v3[2] = v7 + 1;
      v3[v7 + 4] = v5;
      if (!--v2)
        return v3;
    }
    v9 = 0;
    v10 = 1;
    swift_release(v3);
    return 0;
  }
  return v3;
}

_QWORD *sub_100070428(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  _QWORD *v14;

  v2 = *(_QWORD *)(a1 + 16);
  v14 = _swiftEmptyArrayStorage;
  sub_10000C958(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_100005D28(i, (uint64_t)v13);
      if (!swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, &type metadata for String, 6))break;
      v5 = v11;
      v6 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10000C958(0, v3[2] + 1, 1);
        v3 = v14;
      }
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_10000C958(v7 > 1, v8 + 1, 1);
        v3 = v14;
      }
      v3[2] = v8 + 1;
      v9 = &v3[2 * v8];
      v9[4] = v5;
      v9[5] = v6;
      if (!--v2)
        return v3;
    }
    v11 = 0;
    v12 = 0;
    swift_release(v3);
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  return v3;
}

_QWORD *sub_10007056C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  sub_100071C00(0, v6, 0);
  v40 = a2;
  v41 = a1;
  v38 = v6;
  v42 = v4;
  v39 = v5;
  if (v6)
  {
    v7 = (unint64_t *)(a1 + 32);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    v8 = (uint64_t *)(a2 + 40);
    v9 = v4;
    while (v9)
    {
      if (!v5)
        goto LABEL_40;
      v10 = *v7;
      if ((*v7 & 0x8000000000000000) != 0)
        goto LABEL_41;
      if (HIDWORD(v10))
        goto LABEL_42;
      v11 = *v8;
      v43 = *v8;
      v45 = *(v8 - 1);
      switch(v10 & 7)
      {
        case 1uLL:
          swift_bridgeObjectRetain(v11);
          v13 = static os_log_type_t.error.getter(v14);
          break;
        case 3uLL:
          swift_bridgeObjectRetain(v11);
          v13 = static os_log_type_t.info.getter(v15);
          break;
        case 7uLL:
          v16 = swift_bridgeObjectRetain(v11);
          v13 = static os_log_type_t.debug.getter(v16);
          break;
        default:
          swift_bridgeObjectRetain(v11);
          v13 = static os_log_type_t.default.getter(v12);
          break;
      }
      v17 = v13;
      v19 = _swiftEmptyArrayStorage[2];
      v18 = _swiftEmptyArrayStorage[3];
      if (v19 >= v18 >> 1)
        sub_100071C00((char *)(v18 > 1), v19 + 1, 1);
      _swiftEmptyArrayStorage[2] = v19 + 1;
      v20 = &_swiftEmptyArrayStorage[3 * v19];
      *((_BYTE *)v20 + 32) = v17;
      --v5;
      v20[5] = v45;
      v20[6] = v43;
      --v9;
      v8 += 2;
      ++v7;
      if (!--v6)
        goto LABEL_20;
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    JUMPOUT(0x100070894);
  }
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
LABEL_20:
  if (v42 > v39)
  {
    v21 = 0;
    if (v38 <= v39)
      v22 = v39;
    else
      v22 = v38;
    v44 = v22 - v38;
    v23 = v42 - v38;
    v24 = (_QWORD *)(v40 + 16 * v38 + 40);
    while (v23 != v21)
    {
      if (v39 - v38 == v21)
        goto LABEL_38;
      if (v44 == v21)
        goto LABEL_44;
      v25 = *(_QWORD *)(v41 + 8 * v38 + 32 + 8 * v21);
      if ((v25 & 0x8000000000000000) != 0)
        goto LABEL_45;
      if (HIDWORD(v25))
        goto LABEL_46;
      v27 = *(v24 - 1);
      v26 = *v24;
      switch(v25 & 7)
      {
        case 1uLL:
          swift_bridgeObjectRetain(*v24);
          v29 = static os_log_type_t.error.getter(v30);
          break;
        case 3uLL:
          swift_bridgeObjectRetain(*v24);
          v29 = static os_log_type_t.info.getter(v31);
          break;
        case 7uLL:
          v32 = swift_bridgeObjectRetain(*v24);
          v29 = static os_log_type_t.debug.getter(v32);
          break;
        default:
          swift_bridgeObjectRetain(*v24);
          v29 = static os_log_type_t.default.getter(v28);
          break;
      }
      v33 = v29;
      v35 = _swiftEmptyArrayStorage[2];
      v34 = _swiftEmptyArrayStorage[3];
      if (v35 >= v34 >> 1)
        sub_100071C00((char *)(v34 > 1), v35 + 1, 1);
      _swiftEmptyArrayStorage[2] = v35 + 1;
      v36 = &_swiftEmptyArrayStorage[3 * v35];
      *((_BYTE *)v36 + 32) = v33;
      v36[5] = v27;
      v36[6] = v26;
      ++v21;
      v24 += 2;
      if (v23 == v21)
        goto LABEL_38;
    }
    goto LABEL_43;
  }
LABEL_38:
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v41);
  return _swiftEmptyArrayStorage;
}

const char *sub_1000708CC()
{
  mach_port_t v0;
  io_registry_entry_t RootEntry;
  io_registry_entry_t v2;
  __CFString *v3;
  CFTypeRef CFProperty;
  uint64_t v5;
  CFTypeID v6;
  __CFString *v7;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;
  cpu_type_t v13;
  uint64_t v14;
  uint64_t v15;
  cpu_subtype_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  cpu_subtype_t v31;
  char v32;
  cpu_type_t v33;
  char v34;

  v0 = sub_1000D7F34();
  RootEntry = IORegistryGetRootEntry(v0);
  if (RootEntry)
  {
    v2 = RootEntry;
    v3 = (__CFString *)String._bridgeToObjectiveC()();
    CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);

    if (CFProperty)
    {
      v6 = CFGetTypeID(CFProperty);
      if (v6 == CFNumberGetTypeID())
      {
        v7 = (__CFString *)String._bridgeToObjectiveC()();
        v8 = IORegistryEntryCreateCFProperty(v2, v7, kCFAllocatorDefault, 0);

        if (v8)
        {
          v10 = CFGetTypeID(v8);
          if (v10 == CFNumberGetTypeID())
          {
            swift_unknownObjectRetain(CFProperty);
            v11 = objc_opt_self(NSNumber);
            v12 = swift_dynamicCastObjCClass(CFProperty, v11);
            if (v12)
            {
              v33 = 0;
              v34 = 1;
              static Int32._conditionallyBridgeFromObjectiveC(_:result:)(v12, &v33);
              swift_unknownObjectRelease(CFProperty);
              if ((v34 & 1) == 0)
              {
                v13 = v33;
                swift_unknownObjectRetain(v8);
                v14 = objc_opt_self(NSNumber);
                v15 = swift_dynamicCastObjCClass(v8, v14);
                if (v15)
                {
                  v31 = 0;
                  v32 = 1;
                  static Int32._conditionallyBridgeFromObjectiveC(_:result:)(v15, &v31);
                  swift_unknownObjectRelease(v8);
                  if ((v32 & 1) == 0)
                  {
                    v16 = v31;
                    v17 = sub_1000D4120(v13, v31);
                    v18 = v17;
                    if (v19 == 1)
                    {
                      v20 = static os_log_type_t.error.getter(v17);
                      v21 = sub_100005C88((uint64_t *)&unk_1001596E0);
                      v22 = swift_allocObject(v21, 112, 7);
                      *(_OWORD *)(v22 + 16) = xmmword_10010F380;
                      *(_QWORD *)(v22 + 56) = &type metadata for Int32;
                      *(_QWORD *)(v22 + 64) = &protocol witness table for Int32;
                      *(_DWORD *)(v22 + 32) = v13;
                      *(_QWORD *)(v22 + 96) = &type metadata for Int32;
                      *(_QWORD *)(v22 + 104) = &protocol witness table for Int32;
                      *(_DWORD *)(v22 + 72) = v16;
                      v23 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
                      v24 = (void *)static OS_os_log.default.getter(v23);
                      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v24, "Unknown CPU type %d with subtype %d", v31, v33);
                      swift_unknownObjectRelease(CFProperty);
                      swift_unknownObjectRelease(v8);
                      swift_bridgeObjectRelease(v22);

                    }
                    else
                    {
                      swift_unknownObjectRelease(CFProperty);
                      swift_unknownObjectRelease(v8);
                    }
                    goto LABEL_19;
                  }
                }
                else
                {
                  swift_unknownObjectRelease(CFProperty);
                  CFProperty = v8;
                }
              }
            }
            else
            {
              swift_unknownObjectRelease(CFProperty);
            }
            swift_unknownObjectRelease(CFProperty);
            swift_unknownObjectRelease(v8);
LABEL_18:
            v18 = 0;
LABEL_19:
            IOObjectRelease(v2);
            return v18;
          }
          v9 = swift_unknownObjectRelease(v8);
        }
        v28 = static os_log_type_t.error.getter(v9);
        v29 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
        v27 = (void *)static OS_os_log.default.getter(v29);
        os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v27, "CPU Subtype is not a number?", 28, 2, _swiftEmptyArrayStorage);
        swift_unknownObjectRelease(CFProperty);
LABEL_17:

        goto LABEL_18;
      }
      v5 = swift_unknownObjectRelease(CFProperty);
    }
    v25 = static os_log_type_t.error.getter(v5);
    v26 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    v27 = (void *)static OS_os_log.default.getter(v26);
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v27, "CPU Type is not a number?", 25, 2, _swiftEmptyArrayStorage);
    goto LABEL_17;
  }
  return 0;
}

uint64_t sub_100070C90()
{
  mach_port_t v0;
  uint64_t v1;
  io_registry_entry_t v2;
  __CFString *v3;
  CFTypeRef CFProperty;
  uint64_t v5;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  CFTypeRef v17;

  v0 = sub_1000D7F34();
  v1 = IORegistryEntryFromPath(v0, "IODeviceTree:/chosen");
  if (!(_DWORD)v1)
  {
    v8 = static os_log_type_t.error.getter(v1);
    v9 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    v10 = (void *)static OS_os_log.default.getter(v9);
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v10, "No IOEntry found for IODeviceTree:/chosen", 41, 2, _swiftEmptyArrayStorage);
    goto LABEL_9;
  }
  v2 = v1;
  v3 = (__CFString *)String._bridgeToObjectiveC()();
  CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);

  if (!CFProperty)
  {
LABEL_8:
    v11 = static os_log_type_t.error.getter(v5);
    v12 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    v10 = (void *)static OS_os_log.default.getter(v12);
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v10, "ecid read from IORegistry is not CFData", 39, 2, _swiftEmptyArrayStorage);
    goto LABEL_9;
  }
  v6 = CFGetTypeID(CFProperty);
  if (v6 != CFDataGetTypeID())
  {
    v5 = swift_unknownObjectRelease(CFProperty);
    goto LABEL_8;
  }
  v17 = CFProperty;
  swift_unknownObjectRetain(CFProperty);
  v7 = swift_dynamicCast(v16, &v17, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Data, 6);
  if ((_DWORD)v7)
    __asm { BR              X10 }
  v14 = static os_log_type_t.error.getter(v7);
  v15 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v10 = (void *)static OS_os_log.default.getter(v15);
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v10, "could not convert ecid to Data", 30, 2, _swiftEmptyArrayStorage);
  swift_unknownObjectRelease(CFProperty);
LABEL_9:

  return 0;
}

driverkitd::ApprovalState sub_100070FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, __n128);
  __n128 v7;
  Swift::Int v8;
  driverkitd::ApprovalState result;
  Swift::String v10;
  void *object;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v3 = (uint64_t *)sub_10008FA30();
  v4 = *v3;
  v5 = v3[1];
  v6 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v0 + 592);
  v7 = swift_bridgeObjectRetain(v5);
  v8 = v6(v4, v5, v7);
  result = swift_bridgeObjectRelease(v5);
  if (!v2)
  {
    result = j___s10driverkitd13ApprovalStateO8rawValueACSgSi_tcfC(v8).value;
    if (result == driverkitd_ApprovalState_unknownDefault)
    {
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease(0xE000000000000000);
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v10._object;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(object);
      v12 = sub_1000122F8();
      v13 = swift_allocError(&type metadata for KMError, v12, 0, 0);
      *(_QWORD *)v14 = 0xD000000000000023;
      *(_QWORD *)(v14 + 8) = 0x8000000100123F30;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_QWORD *)(v14 + 64) = 0;
      *(_BYTE *)(v14 + 72) = 9;
      return swift_willThrow(v13);
    }
  }
  return result;
}

uint64_t sub_100071124()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t sub_100071130()
{
  uint64_t *v0;

  sub_100072744(v0[3], v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  sub_100072744(v0[7], v0[8]);
  sub_1000124F8((uint64_t)(v0 + 10), &qword_100159878);
  return swift_deallocClassInstance(v0, 120, 7);
}

double sub_100071174()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = swift_allocObject(v0, 120, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100111CC0;
  *(_QWORD *)(v1 + 32) = 1;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 1;
  *(_DWORD *)(v1 + 72) = 514;
  *(_WORD *)(v1 + 76) = 513;
  result = 0.0;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t sub_1000711CC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 232))() & 1;
}

uint64_t sub_1000711F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 256))() & 1;
}

uint64_t sub_100071224()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 280))() & 1;
}

uint64_t sub_100071250()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 304))() & 1;
}

uint64_t sub_10007127C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 376))() & 1;
}

uint64_t sub_1000712A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 328))() & 1;
}

uint64_t sub_1000712D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 352))() & 1;
}

uint64_t sub_100071300()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))() & 1;
}

uint64_t sub_10007132C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 424))();
}

uint64_t sub_100071354()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 400))();
}

uint64_t sub_10007137C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 448))();
}

uint64_t sub_1000713A4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 472))() & 1;
}

uint64_t sub_1000713D0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 496))() & 1;
}

uint64_t sub_1000713FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 520))() & 0x1FF;
}

uint64_t sub_100071430()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 544))() & 1;
}

uint64_t sub_10007145C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 568))();
}

uint64_t sub_100071484()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 632))();
}

uint64_t sub_1000714AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 592))();
}

uint64_t sub_1000714D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 600))();
}

uint64_t sub_1000714FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 608))();
}

uint64_t sub_100071524()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 616))();
}

uint64_t sub_10007154C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(**(_QWORD **)v3 + 624))(a1, a2, a3 & 1);
}

uint64_t sub_100071578()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 640))();
}

uint64_t sub_1000715A0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 664))();
}

uint64_t sub_1000715C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 648))();
}

uint64_t sub_1000715F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 656))();
}

uint64_t sub_10007161C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_100071694(v10, v7, v8);
}

uint64_t sub_100071694(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_100159890);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_100071700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100159890);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

Swift::Int sub_10007174C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100159CD0);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v15 << 6);
      goto LABEL_34;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v12)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v38 + 8 * v24);
    ++v15;
    if (!v26)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v12)
        goto LABEL_36;
      v26 = *(_QWORD *)(v38 + 8 * v15);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v15 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v26 = *(_QWORD *)(v38 + 8 * v15);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v15 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v40 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v32);
    if ((v39 & 1) == 0)
      swift_bridgeObjectRetain(v34);
    Hasher.init(_seed:)(v41, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v41, v35, v34);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v18 == v29;
        if (v18 == v29)
          v18 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v31 == -1);
      v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 16 * v19;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v20);
    *v21 = v35;
    v21[1] = v34;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v40;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v25 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_100071A58()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100005C88(&qword_100159CD0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

char *sub_100071C00(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100071C38(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100071C1C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_100071D50(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_100071C38(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_100159CC8);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_release(a4);
  return v11;
}

char *sub_100071D50(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_100159CB8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_release(a4);
  return v11;
}

unsigned __int8 *sub_100071E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v7 = sub_1000732EC();
  v8 = swift_bridgeObjectRetain(a4);
  v9 = String.init<A>(_:)(&v19, &type metadata for Substring, &protocol witness table for Substring, v7, v8);
  v11 = v9;
  v12 = v10;
  if ((v10 & 0x1000000000000000) == 0)
  {
    if ((v10 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v14 = HIBYTE(v12) & 0xF;
    v19 = v11;
    v20 = v12 & 0xFFFFFFFFFFFFFFLL;
    v13 = (unsigned __int8 *)&v19;
    goto LABEL_7;
  }
  v11 = sub_100013FE8(v9, v10);
  v16 = v15;
  swift_bridgeObjectRelease(v12);
  v12 = v16;
  if ((v16 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v11 & 0x1000000000000000) != 0)
  {
    v13 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v14 = v11 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v13 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v11, v12);
  }
LABEL_7:
  v17 = sub_10007201C(v13, v14, a5);
  swift_bridgeObjectRelease(v12);
  return v17;
}

unsigned __int8 *sub_100071F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  v4 = swift_bridgeObjectRetain(a2);
  v5 = String.init<A>(_:)(&v15, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v4);
  v7 = v5;
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_100013FE8(v5, v6);
  v12 = v11;
  swift_bridgeObjectRelease(v8);
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }
LABEL_7:
  v13 = sub_10007201C(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13;
}

unsigned __int8 *sub_10007201C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100072298(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  result = sub_1000727B4((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_100072368()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;

  if (qword_100162140 != -1)
LABEL_21:
    swift_once(&qword_100162140, sub_10006B160);
  v0 = qword_1001753E0;
  swift_bridgeObjectRetain(qword_1001753E0);
  v1 = (_QWORD *)sub_10006ACC0((uint64_t)_swiftEmptyArrayStorage);
  v2 = *(_QWORD *)(v0 + 16);
  if (!v2)
  {
LABEL_18:
    swift_bridgeObjectRelease(v0);
    return (uint64_t)v1;
  }
  swift_bridgeObjectRetain(v0);
  v3 = 0;
  while (1)
  {
    v21 = *(_OWORD *)(v0 + 16 * v3 + 32);
    v4 = (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16 * v3 + 40) + 8))();
    v6 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
    v9 = sub_100005DE8(v4, v6);
    v10 = v1[2];
    v11 = (v8 & 1) == 0;
    v12 = v10 + v11;
    if (__OFADD__(v10, v11))
    {
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v13 = v8;
    if (v1[3] < v12)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v8 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_100071A58();
      if ((v13 & 1) != 0)
      {
LABEL_4:
        *(_OWORD *)(v1[7] + 16 * v9) = v21;
        goto LABEL_5;
      }
    }
LABEL_13:
    v1[(v9 >> 6) + 8] |= 1 << v9;
    v16 = (uint64_t *)(v1[6] + 16 * v9);
    *v16 = v4;
    v16[1] = v6;
    *(_OWORD *)(v1[7] + 16 * v9) = v21;
    v17 = v1[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_20;
    v1[2] = v19;
    swift_bridgeObjectRetain(v6);
LABEL_5:
    ++v3;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(0x8000000000000000);
    if (v2 == v3)
    {
      swift_bridgeObjectRelease(v0);
      goto LABEL_18;
    }
  }
  sub_10007174C(v12, isUniquelyReferenced_nonNull_native);
  v14 = sub_100005DE8(v4, v6);
  if ((v13 & 1) == (v15 & 1))
  {
    v9 = v14;
    if ((v13 & 1) != 0)
      goto LABEL_4;
    goto LABEL_13;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_QWORD *sub_10007257C(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

unint64_t sub_1000725B0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001484A8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_1000725F8()
{
  unint64_t result;

  result = qword_100159860;
  if (!qword_100159860)
  {
    result = swift_getWitnessTable(&unk_1001134B8, &type metadata for KextRequestFlags);
    atomic_store(result, (unint64_t *)&qword_100159860);
  }
  return result;
}

void type metadata accessor for CFData(uint64_t a1)
{
  sub_1000732A8(a1, &qword_100159CB0, (uint64_t)&unk_1001494A0);
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
  sub_1000732A8(a1, &qword_100159CA8, (uint64_t)&unk_100149470);
}

unint64_t sub_100072664(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v5, a2, a3);
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

unint64_t sub_100072700()
{
  unint64_t result;

  result = qword_100159870;
  if (!qword_100159870)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100159870);
  }
  return result;
}

uint64_t sub_100072744(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_100072758(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_10007276C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100159878);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000727B4(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_1000144A4(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = String.UTF8View._foreignDistance(from:to:)(15, a2, a4, a5);
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_1000144A4(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_1000144A4(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_100072BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  mach_port_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for String.Encoding(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((v11 & 0x1000000000000000) != 0)
  {
    v12 = sub_100013FE8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v23 = v17;
    v8 = swift_bridgeObjectRelease(v11);
    v11 = v23;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v11;
    if ((v11 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_7:
    v21 = v12;
    v22 = v11 & 0xFFFFFFFFFFFFFFLL;
    v20[0] = a2;
    v20[1] = a3;
    static String.Encoding.utf8.getter(v8);
    v18 = sub_100026250();
    StringProtocol.lengthOfBytes(using:)(v10, &type metadata for String, v18);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v15 = sub_1000D7F34();
    v16 = (char *)&v21;
    return IOCatalogueModuleLoaded(v15, v16);
  }
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v12 & 0x1000000000000000) != 0)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(v12, v11);
    v13 = v8;
    if (!v8)
      return 4;
  }
  v21 = a2;
  v22 = a3;
  static String.Encoding.utf8.getter(v8);
  v14 = sub_100026250();
  StringProtocol.lengthOfBytes(using:)(v10, &type metadata for String, v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v15 = sub_1000D7F34();
  v16 = (char *)v13;
  return IOCatalogueModuleLoaded(v15, v16);
}

unint64_t sub_100072D54()
{
  unint64_t result;

  result = qword_1001598B0;
  if (!qword_1001598B0)
  {
    result = swift_getWitnessTable(&unk_100111D10, &type metadata for KernelRequests.GetLoaded.LoadedOption);
    atomic_store(result, (unint64_t *)&qword_1001598B0);
  }
  return result;
}

uint64_t sub_100072D98()
{
  return sub_10001284C(&qword_1001598B8, &qword_1001598C0, (uint64_t)&protocol conformance descriptor for [A]);
}

ValueMetadata *type metadata accessor for KernelRequests()
{
  return &type metadata for KernelRequests;
}

uint64_t *initializeBufferWithCopyOfBuffer for KernelRequests.GetRequests(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for KernelRequests.GetRequests(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

_QWORD *initializeWithTake for VariantKind(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *assignWithTake for KernelRequests.GetRequests(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for KernelRequests.GetRequests()
{
  return &type metadata for KernelRequests.GetRequests;
}

ValueMetadata *type metadata accessor for KernelRequests.GetLoaded()
{
  return &type metadata for KernelRequests.GetLoaded;
}

uint64_t storeEnumTagSinglePayload for KernelRequests.GetLoaded.LoadedOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100072EE8 + 4 * byte_100111CE3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100072F1C + 4 * byte_100111CDE[v4]))();
}

uint64_t sub_100072F1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100072F24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100072F2CLL);
  return result;
}

uint64_t sub_100072F38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100072F40);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100072F44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100072F4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KernelRequests.GetLoaded.LoadedOption()
{
  return &type metadata for KernelRequests.GetLoaded.LoadedOption;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadExtension()
{
  return &type metadata for KernelRequests.LoadExtension;
}

ValueMetadata *type metadata accessor for KernelRequests.UnloadExtension()
{
  return &type metadata for KernelRequests.UnloadExtension;
}

ValueMetadata *type metadata accessor for KernelRequests.SendResource()
{
  return &type metadata for KernelRequests.SendResource;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadFileset()
{
  return &type metadata for KernelRequests.LoadFileset;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadCodeless()
{
  return &type metadata for KernelRequests.LoadCodeless;
}

ValueMetadata *type metadata accessor for KernelRequests.DextLaunch()
{
  return &type metadata for KernelRequests.DextLaunch;
}

ValueMetadata *type metadata accessor for KernelRequests.RequestResource()
{
  return &type metadata for KernelRequests.RequestResource;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadRequest()
{
  return &type metadata for KernelRequests.LoadRequest;
}

ValueMetadata *type metadata accessor for KernelRequests.LoadNotification()
{
  return &type metadata for KernelRequests.LoadNotification;
}

ValueMetadata *type metadata accessor for KernelRequests.UnloadNotification()
{
  return &type metadata for KernelRequests.UnloadNotification;
}

ValueMetadata *type metadata accessor for KernelRequests.RequestExit()
{
  return &type metadata for KernelRequests.RequestExit;
}

ValueMetadata *type metadata accessor for KernelRequests.MissingAuxKCBundles()
{
  return &type metadata for KernelRequests.MissingAuxKCBundles;
}

ValueMetadata *type metadata accessor for KernelRequests.AuxKCBundleAvailable()
{
  return &type metadata for KernelRequests.AuxKCBundleAvailable;
}

ValueMetadata *type metadata accessor for KernelRequests.GetDaemonActive()
{
  return &type metadata for KernelRequests.GetDaemonActive;
}

ValueMetadata *type metadata accessor for KernelRequests.GetDrivers()
{
  return &type metadata for KernelRequests.GetDrivers;
}

uint64_t _s10driverkitd14KernelRequestsO11GetRequestsVwet_0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s10driverkitd14KernelRequestsO11GetRequestsVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelRequests.DextUpdateNotification()
{
  return &type metadata for KernelRequests.DextUpdateNotification;
}

uint64_t sub_100073118(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for KernelLogMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for KernelLogMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for KernelLogMessage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KernelLogMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelLogMessage()
{
  return &type metadata for KernelLogMessage;
}

ValueMetadata *type metadata accessor for IOTerminationAction()
{
  return &type metadata for IOTerminationAction;
}

uint64_t type metadata accessor for RealKernelClient()
{
  return objc_opt_self(_TtC10driverkitd16RealKernelClient);
}

void type metadata accessor for OSLogType(uint64_t a1)
{
  sub_1000732A8(a1, &qword_100159CA0, (uint64_t)&unk_100149448);
}

void sub_1000732A8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

unint64_t sub_1000732EC()
{
  unint64_t result;

  result = qword_100159CC0;
  if (!qword_100159CC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100159CC0);
  }
  return result;
}

uint64_t sub_100073348(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100073358(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100073360@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 96);
  swift_beginAccess(v4, v7, 0, 0);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v3 + 80));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v4, v5);
}

uint64_t sub_1000733D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 96);
  swift_beginAccess(v4, v7, 33, 0);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v3 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
  return swift_endAccess(v7);
}

uint64_t (*sub_100073448(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10007348C()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_beginAccess(v1, v3, 0, 0);
  return swift_unknownObjectRetain(*v1);
}

uint64_t sub_1000734D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 104));
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_unknownObjectRelease(v4);
}

uint64_t (*sub_100073524(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 104), a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_100073568(int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_1000735A4(a1);
  return v3;
}

uint64_t sub_1000735A4(int a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;

  v2 = v1;
  v4 = *(_QWORD *)v1;
  v18 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 56))(&v2[*(_QWORD *)(v4 + 96)], 1, 1);
  *(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 + 104)] = 0;
  if (a1)
  {
    *(_DWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 + 120)] = a1;
    sub_100005D68(0, (unint64_t *)&qword_100159CE0, OS_dispatch_queue_ptr);
    static DispatchQoS.userInitiated.getter();
    v19 = _swiftEmptyArrayStorage;
    v14 = sub_100012534((unint64_t *)&qword_100159CE8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v15 = sub_100005C88(&qword_100159CF0);
    v16 = sub_10007778C((unint64_t *)&qword_100159CF8, &qword_100159CF0);
    dispatch thunk of SetAlgebra.init<A>(_:)(v10, &v19, v15, v16, v8, v14);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v18);
    *(_QWORD *)&v2[*(_QWORD *)(*(_QWORD *)v2 + 112)] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002CLL, 0x80000001001241F0, v13, v10, v7, 0);
    return (uint64_t)v2;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000019, 0x8000000100124240, "driverkitd/DaemonSupport.swift", 30, 2, 77, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100073814()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  if (result)
  {
    v2 = result;
    v3 = objc_opt_self(OS_dispatch_source);
    v4 = swift_dynamicCastObjCClassUnconditional(v2, v3, 0, 0, 0);
    dispatch_mig_server(v4, 36, sub_1000739D8);
    return swift_unknownObjectRelease(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100073888(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  Class isa;
  uint64_t v13;

  v4 = static os_log_type_t.info.getter(a1);
  v5 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v6 = (void *)static OS_os_log.default.getter(v5);
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v6, "Received MIG message", 20, 2, _swiftEmptyArrayStorage);

  v7 = sub_100004C40(a1, a2);
  v8 = v7;
  if (!(_DWORD)v7)
  {
    v9 = a1[5] - 64;
    v10 = static os_log_type_t.error.getter(v7);
    v11 = (void *)static OS_os_log.default.getter(v10);
    if (v9 > 0xC)
      os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Unknown MIG message received.", 29, 2, _swiftEmptyArrayStorage);
    else
      os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Failed to process MIG message.", 30, 2, _swiftEmptyArrayStorage);

  }
  sub_100005D68(0, (unint64_t *)&unk_100159EC0, NSNumber_ptr);
  isa = NSNumber.init(BOOLeanLiteral:)(v8 != 0).super.super.isa;
  v13 = Int32.init(truncating:)();

  return v13;
}

void sub_1000739DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  void *v15;
  uint64_t v16;
  void (*v17)(_QWORD *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **aBlock;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;

  v1 = v0;
  v27 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v4 = (uint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005D68(0, &qword_100159D00, OS_dispatch_source_ptr);
  v9 = static OS_dispatch_source.makeMachReceiveSource(port:queue:)(*(unsigned int *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120)), *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 112)));
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 160))(v9);
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 152);
  v12 = v11(v10);
  if (v12)
  {
    v13 = v12;
    ObjectType = swift_getObjectType(v12);
    v32 = sub_100073CB0;
    v33 = v1;
    aBlock = _NSConcreteStackBlock;
    v29 = 1107296256;
    v30 = sub_10000B424;
    v31 = &unk_100149548;
    v15 = _Block_copy(&aBlock);
    v16 = swift_retain(v1);
    static DispatchQoS.unspecified.getter(v16);
    sub_100073CD4(v4);
    OS_dispatch_source.setCancelHandler(qos:flags:handler:)(v8, v4, v15, ObjectType);
    _Block_release(v15);
    swift_unknownObjectRelease(v13);
    v17 = *(void (**)(_QWORD *, uint64_t))(v2 + 8);
    v17(v4, v27);
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v26 = v5;
    v18(v8, v5);
    v19 = swift_release(v33);
    v20 = v11(v19);
    if (v20)
    {
      v21 = v20;
      v22 = swift_getObjectType(v20);
      swift_retain(v1);
      v32 = sub_10000C44C;
      v33 = v1;
      aBlock = _NSConcreteStackBlock;
      v29 = 1107296256;
      v30 = sub_10000B424;
      v31 = &unk_100149570;
      v23 = _Block_copy(&aBlock);
      static DispatchQoS.unspecified.getter(v23);
      sub_100073CD4(v4);
      OS_dispatch_source.setEventHandler(qos:flags:handler:)(v8, v4, v23, v22);
      _Block_release(v23);
      swift_unknownObjectRelease(v21);
      v17(v4, v27);
      v18(v8, v26);
      swift_release(v33);
      v32 = sub_100073D80;
      v33 = v1;
      aBlock = _NSConcreteStackBlock;
      v29 = 1107296256;
      v30 = sub_10000B424;
      v31 = &unk_100149598;
      v24 = _Block_copy(&aBlock);
      v25 = v33;
      swift_retain(v1);
      swift_release(v25);
      sub_100004A18(v24);
      _Block_release(v24);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100073CB0()
{
  uint64_t v0;

  return mach_port_mod_refs(mach_task_self_, *(_DWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120)), 1u, -1);
}

_QWORD *sub_100073CD4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = _swiftEmptyArrayStorage;
  v3 = sub_100012534((unint64_t *)&qword_10015ABD0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v4 = sub_100005C88((uint64_t *)&unk_100159EB0);
  v5 = sub_10007778C((unint64_t *)&qword_10015ABE0, (uint64_t *)&unk_100159EB0);
  return dispatch thunk of SetAlgebra.init<A>(_:)(a1, &v7, v4, v5, v2, v3);
}

uint64_t sub_100073D80()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t sub_100073D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = type metadata accessor for Optional(0, v3);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - v5;
  v7 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v10 - v5, a1, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v6, 0, 1, v3);
  v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 136))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192))(v8);
}

uint64_t sub_100073E44()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  if (result)
  {
    v2 = result;
    swift_getObjectType();
    OS_dispatch_source.activate()();
    return swift_unknownObjectRelease(v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100073E80()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = type metadata accessor for Optional(0, v2);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v12 - v6;
  (*(void (**)(uint64_t))(v1 + 128))(v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v7, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
LABEL_6:
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    return sub_1000124F8((uint64_t)&v12, &qword_100159D08);
  }
  v8 = sub_100005C88((uint64_t *)&unk_100159D10);
  if (!swift_dynamicCast(&v12, v7, v2, v8, 6))
    goto LABEL_6;
  if (*((_QWORD *)&v13 + 1))
  {
    sub_100004E2C(&v12, (uint64_t)v15);
    v9 = v16;
    v10 = v17;
    sub_100004DE4(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
    return sub_100005D08(v15);
  }
  return sub_1000124F8((uint64_t)&v12, &qword_100159D08);
}

uint64_t sub_100073FB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = type metadata accessor for Optional(0, *(_QWORD *)(*(_QWORD *)v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104)));

  return v0;
}

uint64_t sub_100074020()
{
  uint64_t v0;

  sub_100073FB8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100074044()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 200))();
}

uint64_t sub_10007406C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))();
}

uint64_t sub_100074094@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v3;
  char *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char v8[24];

  v3 = (_QWORD *)(swift_isaMask & *v1);
  v4 = (char *)v1 + v3[12];
  swift_beginAccess(v4, v8, 0, 0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3[11], v3[10], &protocol descriptor for NSXPCRequestDelegate.NumRequirements, &unk_1001336FC);
  v6 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v4, v6);
}

uint64_t sub_10007412C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  char *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  _BYTE v8[24];

  v3 = (_QWORD *)(swift_isaMask & *v1);
  v4 = (char *)v1 + v3[12];
  swift_beginAccess(v4, v8, 33, 0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3[11], v3[10], &protocol descriptor for NSXPCRequestDelegate.NumRequirements, &unk_1001336FC);
  v6 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v4, a1, v6);
  return swift_endAccess(v8);
}

uint64_t (*sub_1000741CC(uint64_t a1))(_QWORD)
{
  _QWORD *v1;

  swift_beginAccess((char *)v1 + *(_QWORD *)((swift_isaMask & *v1) + 0x60), a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_100074220(uint64_t a1)
{
  _QWORD *v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)((swift_isaMask & *v1) + 0x58), *(_QWORD *)((swift_isaMask & *v1) + 0x50), &protocol descriptor for NSXPCRequestDelegate.NumRequirements, &unk_1001336FC);
  v4 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - v5;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v9 - v5, a1, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v6, 0, 1, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *))((swift_isaMask & *v1) + 0x88))(v6);
}

id sub_1000742FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v9;

  v1 = type metadata accessor for OSSignpostID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static os_signpost_type_t.event.getter(v3);
  v7 = (id)*sub_1000D302C();
  static OSSignpostID.exclusive.getter(v7);
  os_signpost(_:dso:log:name:signpostID:)(v6, &_mh_execute_header, v7, "activate()", 10, 2, v5);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return objc_msgSend(*(id *)((char *)v0 + *(_QWORD *)((swift_isaMask & *v0) + 0x68)), "resume");
}

_QWORD *sub_1000743E4(void *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return sub_10007442C(a1, a2, a3);
}

_QWORD *sub_10007442C(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  objc_class *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  objc_super v41;
  _QWORD *v42;

  v38 = a2;
  v39 = a3;
  v40 = a1;
  v4 = (_QWORD *)(swift_isaMask & *v3);
  v37 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v37);
  v6 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v4[11];
  v15 = (char *)v3 + v4[12];
  v16 = v4[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v14, v16, &protocol descriptor for NSXPCRequestDelegate.NumRequirements, &unk_1001336FC);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v15, 1, 1, AssociatedTypeWitness);
  v36 = sub_100005D68(0, (unint64_t *)&qword_100159CE0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  v18 = v3;
  static DispatchQoS.unspecified.getter(v18);
  v42 = _swiftEmptyArrayStorage;
  v19 = sub_100012534((unint64_t *)&qword_100159CE8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v20 = sub_100005C88(&qword_100159CF0);
  v21 = sub_10007778C((unint64_t *)&qword_100159CF8, &qword_100159CF0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v6, &v42, v20, v21, v37, v19);
  *(_QWORD *)((char *)v18 + *(_QWORD *)((swift_isaMask & *v18) + 0x70)) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v38, v39, v9, v6, v13, 0);
  v22 = v40;
  *(_QWORD *)((char *)v18 + *(_QWORD *)((swift_isaMask & *v18) + 0x68)) = v40;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 32);
  v24 = v22;
  v25 = (void *)v23(v16, v14);
  v26 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", v25);

  *(_QWORD *)((char *)v18 + *(_QWORD *)((swift_isaMask & *v18) + 0x78)) = v26;
  v28 = (objc_class *)type metadata accessor for NSXPCRequestSource(0, v16, v14, v27);
  v41.receiver = v18;
  v41.super_class = v28;
  v29 = objc_msgSendSuper2(&v41, "init");
  v30 = *(void **)((char *)v29 + *(_QWORD *)((swift_isaMask & *v29) + 0x68));
  v31 = v29;
  objc_msgSend(v30, "setDelegate:", v31);
  v32 = *(void **)((char *)v31 + *(_QWORD *)((swift_isaMask & *v31) + 0x70));
  v33 = v30;
  v34 = v32;
  objc_msgSend(v33, "_setQueue:", v34);

  return v31;
}

uint64_t type metadata accessor for NSXPCRequestSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000639C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSXPCRequestSource);
}

uint64_t sub_100074788(uint64_t a1, void *a2)
{
  return sub_10007689C(a2);
}

uint64_t sub_100074790(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  char v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = sub_10007689C(v7);

  return v9 & 1;
}

void sub_1000747EC()
{
  sub_100077124();
}

id sub_100074808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for NSXPCRequestSource(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_100074854(_QWORD *a1)
{
  char *v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;

  v2 = (char *)a1 + *(_QWORD *)((swift_isaMask & *a1) + 0x60);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)((swift_isaMask & *a1) + 0x58), *(_QWORD *)((swift_isaMask & *a1) + 0x50), &protocol descriptor for NSXPCRequestDelegate.NumRequirements, &unk_1001336FC);
  v4 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);

}

uint64_t sub_100074910()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x98))();
}

uint64_t sub_100074948()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0xA0))();
}

uint64_t sub_100074980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void *v8;
  uint64_t v9;
  NSString v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  _DWORD v27[6];
  uint64_t v28;
  char v29;

  v4 = type metadata accessor for POSIXError(0);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  v24 = a1;
  v8 = (void *)v7(a1, a2);
  v9 = *((_QWORD *)sub_1000900C8() + 1);
  swift_bridgeObjectRetain(v9);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v11 = objc_msgSend(v8, "valueForEntitlement:", v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)(v26, v11);
    swift_unknownObjectRelease(v11);
  }
  else
  {
    memset(v26, 0, sizeof(v26));
  }
  sub_100077150((uint64_t)v26, (uint64_t)v27);
  if (!v28)
  {
    result = sub_1000124F8((uint64_t)v27, &qword_100158018);
LABEL_9:
    v13 = static os_log_type_t.error.getter(result);
    v14 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_10010F050;
    v16 = (void *)v7(v24, a2);
    v17 = objc_msgSend(v16, "processIdentifier");

    *(_QWORD *)(v15 + 56) = &type metadata for Int32;
    *(_QWORD *)(v15 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v15 + 32) = v17;
    v18 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    v19 = (void *)static OS_os_log.default.getter(v18);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v19, "Attempt by unentitled pid %d to access interface", v24);
    swift_bridgeObjectRelease(v15);

    v27[0] = 1;
    v20 = sub_10006A308((uint64_t)_swiftEmptyArrayStorage);
    v21 = sub_100012534((unint64_t *)&qword_100159D20, (uint64_t (*)(uint64_t))&type metadata accessor for POSIXError, (uint64_t)&protocol conformance descriptor for POSIXError);
    v22 = _BridgedStoredNSError.init(_:userInfo:)(v27, v20, v4, v21);
    POSIXError._nsError.getter(v22);
    v23 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v4);
    return swift_willThrow(v23);
  }
  result = swift_dynamicCast(&v29, v27, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  if (!(_DWORD)result || (v29 & 1) == 0)
    goto LABEL_9;
  return result;
}

void *sub_100074C2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  __int128 v76;
  int64_t v77;
  int64_t v78;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v80;
  uint64_t v81;
  unint64_t v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *result;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v150;
  _QWORD *v152;
  _QWORD v153[3];
  uint64_t v154;
  uint64_t v155;
  _QWORD v156[3];
  uint64_t v157;
  uint64_t v158;
  int v159;
  _QWORD v160[3];
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164;
  uint64_t v165;
  uint64_t __src[74];
  __int128 v167;
  __int128 v168;
  _QWORD *v169;
  _QWORD v170[10];
  _QWORD v171[8];

  v6 = a1[3];
  v7 = a1[4];
  sub_100004DE4(a1, v6);
  sub_100071700(v6, v7);
  v8 = __src[3];
  v9 = __src[4];
  sub_100004DE4(__src, __src[3]);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v8, v9);
  v12 = v11;
  sub_100005D08(__src);
  v13 = a1[3];
  v14 = a1[4];
  v152 = a1;
  sub_100004DE4(a1, v13);
  sub_100071700(v13, v14);
  v15 = __src[3];
  v16 = __src[4];
  sub_100004DE4(__src, __src[3]);
  v17 = (uint64_t *)sub_10008FA0C();
  v18 = *v17;
  v19 = v17[1];
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v16 + 152);
  v21 = swift_bridgeObjectRetain(v19);
  v22 = v20(v18, v19, v15, v16, v21);
  v24 = v23;
  swift_bridgeObjectRelease(v19);
  sub_100005D08(__src);
  v25 = sub_100090390(v22, v24, v10, v12);
  v26 = (unint64_t)v25;
  if (v25 == (_QWORD *)5)
    v27 = 0;
  else
    v27 = v25;
  KeyPath = swift_getKeyPath(&unk_100112450);
  v144 = sub_100075B80(v27, KeyPath, (__int128 *)a2, v152);
  v147 = v29;
  swift_release(KeyPath);
  v30 = swift_getKeyPath(&unk_100112470);
  sub_1000377D4((unint64_t)v27);
  v143 = sub_100075B80(v27, v30, (__int128 *)a2, v152);
  v146 = v31;
  sub_1000390EC(v26);
  swift_release(v30);
  v32 = v152[3];
  v33 = v152[4];
  sub_100004DE4(v152, v32);
  sub_100071700(v32, v33);
  v34 = v164;
  v35 = v165;
  sub_100004DE4(v163, v164);
  LOBYTE(v32) = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
  sub_100005C44((uint64_t)v152, (uint64_t)v160);
  v148 = v26;
  if ((v32 & 1) != 0)
  {
    sub_100005D08(v160);
    sub_100005D08(v163);
  }
  else
  {
    v36 = v161;
    v37 = v162;
    sub_100004DE4(v160, v161);
    sub_100071700(v36, v37);
    v38 = __src[3];
    v39 = __src[4];
    sub_100004DE4(__src, __src[3]);
    LOBYTE(v36) = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 24))(v38, v39);
    sub_100005D08(__src);
    sub_100005D08(v160);
    sub_100005D08(v163);
    if ((v36 & 1) == 0)
    {
      v47 = swift_getKeyPath(&unk_100112490);
      sub_1000377D4((unint64_t)v27);
      v141 = sub_100075B80(v27, v47, (__int128 *)a2, v152);
      v142 = v48;
      sub_1000390EC(v26);
      swift_release(v47);
      goto LABEL_12;
    }
  }
  v40 = v152[3];
  v41 = v152[4];
  sub_100004DE4(v152, v40);
  sub_100071700(v40, v41);
  v42 = __src[3];
  v43 = __src[4];
  sub_100004DE4(__src, __src[3]);
  LOBYTE(v40) = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 32))(v42, v43);
  sub_100005D08(__src);
  if ((v40 & 1) != 0)
    v44 = &unk_1001124D0;
  else
    v44 = &unk_1001124B0;
  v45 = swift_getKeyPath(v44);
  sub_1000377D4((unint64_t)v27);
  v141 = sub_100075B80(v27, v45, (__int128 *)a2, v152);
  v142 = v46;
  swift_release(v45);
  sub_1000390EC(v26);
LABEL_12:
  v150 = sub_100005C88(&qword_100157F18);
  v49 = swift_allocObject(v150, 48, 7);
  *(_OWORD *)(v49 + 16) = xmmword_100112440;
  *(_DWORD *)(v49 + 32) = *sub_1000A4584();
  *(_DWORD *)(v49 + 36) = *sub_1000A46C4();
  *(_DWORD *)(v49 + 40) = *(_DWORD *)sub_1000A4714();
  *(_DWORD *)(v49 + 44) = *sub_1000A45D4();
  __src[0] = v49;
  v50 = sub_100012808();
  v51 = sub_100005C88(&qword_100157F20);
  v52 = sub_10007778C(&qword_100159D40, &qword_100157F20);
  dispatch thunk of SetAlgebra.init<A>(_:)(v170, __src, v51, v52, &type metadata for ExtensionManager.Settings.Flags, v50);
  v53 = v170[0];
  LODWORD(v170[0]) = a3;
  sub_100077198();
  dispatch thunk of RawRepresentable.rawValue.getter(v171, &type metadata for ExtensionManager.Settings.Flags);
  v54 = sub_1000771DC();
  dispatch thunk of OptionSet.init(rawValue:)(v171, &type metadata for ExtensionManager.Settings.Flags, v54);
  LODWORD(v171[0]) = v53;
  dispatch thunk of SetAlgebra.formUnion(_:)(v171, &type metadata for ExtensionManager.Settings.Flags, v50);
  v159 = __src[0];
  v55 = v152[3];
  v56 = v152[4];
  sub_100004DE4(v152, v55);
  sub_100026A6C(v55, v56);
  v57 = __src[3];
  v58 = __src[4];
  sub_100004DE4(__src, __src[3]);
  LOBYTE(v55) = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 24))(v57, v58);
  sub_100005D08(__src);
  if ((v55 & 1) == 0)
  {
    v59 = swift_allocObject(v150, 40, 7);
    *(_OWORD *)(v59 + 16) = xmmword_10010F380;
    *(_DWORD *)(v59 + 32) = *(_DWORD *)sub_1000A43F4();
    *(_DWORD *)(v59 + 36) = *(_DWORD *)sub_1000A4494();
    __src[0] = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)(v170, __src, v51, v52, &type metadata for ExtensionManager.Settings.Flags, v50);
    LODWORD(__src[0]) = v170[0];
    dispatch thunk of RawRepresentable.rawValue.getter(v171, &type metadata for ExtensionManager.Settings.Flags);
    dispatch thunk of RawRepresentable.rawValue.getter(v156, &type metadata for ExtensionManager.Settings.Flags);
    LODWORD(v170[0]) = LODWORD(v156[0]) | LODWORD(v171[0]);
    dispatch thunk of OptionSet.init(rawValue:)(v170, &type metadata for ExtensionManager.Settings.Flags, v54);
  }
  v145 = v27;
  v60 = v152[3];
  v61 = v152[4];
  sub_100004DE4(v152, v60);
  sub_100071700(v60, v61);
  v62 = __src[3];
  v63 = __src[4];
  sub_100004DE4(__src, __src[3]);
  LOBYTE(v60) = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 48))(v62, v63);
  sub_100005D08(__src);
  if ((v60 & 1) != 0)
  {
    v64 = swift_allocObject(v150, 44, 7);
    *(_OWORD *)(v64 + 16) = xmmword_100111CB0;
    *(_DWORD *)(v64 + 32) = *(_DWORD *)sub_1000A43F4();
    *(_DWORD *)(v64 + 36) = *(_DWORD *)sub_1000A44E4();
    *(_DWORD *)(v64 + 40) = *(_DWORD *)sub_1000A4494();
    __src[0] = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(v170, __src, v51, v52, &type metadata for ExtensionManager.Settings.Flags, v50);
    LODWORD(__src[0]) = v170[0];
    dispatch thunk of RawRepresentable.rawValue.getter(v171, &type metadata for ExtensionManager.Settings.Flags);
    dispatch thunk of RawRepresentable.rawValue.getter(v156, &type metadata for ExtensionManager.Settings.Flags);
    LODWORD(v170[0]) = LODWORD(v156[0]) | LODWORD(v171[0]);
    dispatch thunk of OptionSet.init(rawValue:)(v170, &type metadata for ExtensionManager.Settings.Flags, v54);
  }
  v65 = v152[3];
  v66 = v152[4];
  sub_100004DE4(v152, v65);
  sub_100071700(v65, v66);
  v67 = v157;
  v68 = v158;
  sub_100004DE4(v156, v157);
  LOBYTE(v65) = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 16))(v67, v68);
  sub_100005C44((uint64_t)v152, (uint64_t)v153);
  if ((v65 & 1) != 0)
  {
    sub_100005D08(v153);
    sub_100005D08(v156);
LABEL_19:
    v73 = swift_allocObject(v150, 44, 7);
    *(_OWORD *)(v73 + 16) = xmmword_100111CB0;
    *(_DWORD *)(v73 + 32) = *(_DWORD *)sub_1000A44E4();
    *(_DWORD *)(v73 + 36) = *(_DWORD *)sub_1000A4494();
    *(_DWORD *)(v73 + 40) = *(_DWORD *)sub_1000A48B4();
    __src[0] = v73;
    dispatch thunk of SetAlgebra.init<A>(_:)(v170, __src, v51, v52, &type metadata for ExtensionManager.Settings.Flags, v50);
    dispatch thunk of RawRepresentable.rawValue.getter(v171, &type metadata for ExtensionManager.Settings.Flags);
    dispatch thunk of RawRepresentable.rawValue.getter(&v168, &type metadata for ExtensionManager.Settings.Flags);
    LODWORD(__src[0]) = v168 | LODWORD(v171[0]);
    dispatch thunk of OptionSet.init(rawValue:)(__src, &type metadata for ExtensionManager.Settings.Flags, v54);
    goto LABEL_20;
  }
  v69 = v154;
  v70 = v155;
  sub_100004DE4(v153, v154);
  sub_100071700(v69, v70);
  v71 = __src[3];
  v72 = __src[4];
  sub_100004DE4(__src, __src[3]);
  LOBYTE(v69) = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 24))(v71, v72);
  sub_100005D08(__src);
  sub_100005D08(v153);
  sub_100005D08(v156);
  if ((v69 & 1) != 0)
    goto LABEL_19;
LABEL_20:
  if ((sub_1000D7F90() & 1) != 0)
  {
    v74 = swift_allocObject(v150, 36, 7);
    *(_OWORD *)(v74 + 16) = xmmword_10010F050;
    *(_DWORD *)(v74 + 32) = *(_DWORD *)sub_1000A49B8();
    __src[0] = v74;
    dispatch thunk of SetAlgebra.init<A>(_:)(v170, __src, v51, v52, &type metadata for ExtensionManager.Settings.Flags, v50);
    LODWORD(v171[0]) = v159;
    dispatch thunk of SetAlgebra.intersection(_:)(__src, v170, &type metadata for ExtensionManager.Settings.Flags, v50);
    if ((dispatch thunk of SetAlgebra.isEmpty.getter(&type metadata for ExtensionManager.Settings.Flags, v50) & 1) == 0)
      dispatch thunk of SetAlgebra.subtract(_:)(v170, &type metadata for ExtensionManager.Settings.Flags, v50);
  }
  v75 = *(_QWORD **)(a2 + 112);
  v169 = v75;
  v76 = *(_OWORD *)(a2 + 144);
  v167 = *(_OWORD *)(a2 + 176);
  v168 = v76;
  v77 = v75[2];
  v78 = v77 + 2;
  if (__OFADD__(v77, 2))
  {
    __break(1u);
LABEL_46:
    v75 = sub_10000C500((_QWORD *)(v54 > 1), v77, 1, v75);
    goto LABEL_31;
  }
  sub_100066E64((uint64_t)&v168);
  sub_100066E64((uint64_t)&v167);
  sub_10005C714(&v169);
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v75);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v78 > v75[3] >> 1)
  {
    if (v77 <= v78)
      v80 = v77 + 2;
    else
      v80 = v77;
    v75 = sub_10000C500(isUniquelyReferenced_nonNull_native, v80, 1, v75);
  }
  v78 = v75[2];
  v54 = v75[3];
  v77 = v78 + 1;
  swift_bridgeObjectRetain(*((_QWORD *)&v168 + 1));
  if (v78 >= v54 >> 1)
    goto LABEL_46;
LABEL_31:
  v81 = *((_QWORD *)&v167 + 1);
  v75[2] = v77;
  *(_OWORD *)&v75[2 * v78 + 4] = v168;
  v82 = v75[3];
  v83 = v78 + 2;
  swift_bridgeObjectRetain(v81);
  if (v83 > (uint64_t)(v82 >> 1))
    v75 = sub_10000C500((_QWORD *)(v82 > 1), v83, 1, v75);
  v75[2] = v83;
  *(_OWORD *)&v75[2 * v77 + 4] = v167;
  sub_100077220((uint64_t)&v167);
  sub_100077220((uint64_t)&v168);
  v84 = v152[3];
  v85 = v152[4];
  sub_100004DE4(v152, v84);
  sub_100071700(v84, v85);
  v86 = __src[3];
  v87 = __src[4];
  sub_100004DE4(__src, __src[3]);
  v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 184))(v86, v87);
  if (v89 == 1)
  {
    swift_bridgeObjectRelease(v142);
    swift_bridgeObjectRelease(v146);
    sub_100005D08(__src);
LABEL_49:
    result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000030, 0x80000001001242B0, "driverkitd/DaemonSupport.swift", 30, 2, 362, 0);
LABEL_53:
    __break(1u);
    return result;
  }
  v90 = v88;
  v91 = v89;
  v92 = sub_1000D3FAC(v88, v89);
  v94 = v93;
  sub_100072744(v90, v91);
  sub_100005D08(__src);
  if (!v94)
  {
    swift_bridgeObjectRelease(v142);
    swift_bridgeObjectRelease(v146);
    goto LABEL_49;
  }
  v95 = v152[3];
  v96 = v152[4];
  sub_100004DE4(v152, v95);
  sub_100071700(v95, v96);
  v97 = __src[3];
  v98 = __src[4];
  sub_100004DE4(__src, __src[3]);
  v99 = (*(uint64_t (**)(uint64_t, uint64_t))(v98 + 192))(v97, v98);
  if (v100 == 1)
  {
    swift_bridgeObjectRelease(v142);
    swift_bridgeObjectRelease(v146);
    sub_100005D08(__src);
LABEL_52:
    result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000033, 0x80000001001242F0, "driverkitd/DaemonSupport.swift", 30, 2, 364, 0);
    goto LABEL_53;
  }
  v101 = v99;
  v102 = v100;
  v103 = sub_1000D3FAC(v99, v100);
  v105 = v104;
  sub_100072744(v101, v102);
  sub_100005D08(__src);
  if (!v105)
  {
    swift_bridgeObjectRelease(v142);
    swift_bridgeObjectRelease(v146);
    goto LABEL_52;
  }
  v139 = v103;
  v140 = v94;
  v138 = v105;
  if (v92 == 0x34365F363878 && v94 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v92, v94, 0x34365F363878, 0xE600000000000000, 0) & 1) != 0)
  {
    v106 = sub_100026AEC();
    v107 = *v106;
    v108 = *(_QWORD *)(*v106 + 16);
    if (v108)
    {
      swift_bridgeObjectRetain(*v106);
      v109 = (uint64_t *)(v107 + 40);
      do
      {
        v110 = *(v109 - 1);
        v111 = *v109;
        swift_bridgeObjectRetain(*v109);
        sub_100075E20(__src, v110, v111);
        swift_bridgeObjectRelease(__src[1]);
        v109 += 2;
        --v108;
      }
      while (v108);
      swift_bridgeObjectRelease(v107);
    }
  }
  v112 = v152[3];
  v113 = v152[4];
  sub_100004DE4(v152, v112);
  sub_10010AA20(v112, v113);
  v114 = __src[3];
  v115 = __src[4];
  sub_100004DE4(__src, __src[3]);
  v116 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v115 + 8))(47, 0xE100000000000000, v114, v115);
  v134 = v117;
  v135 = v116;
  sub_100005D08(__src);
  v132 = sub_1000DF62C((uint64_t)v152);
  v118 = *(_QWORD *)(a2 + 72);
  v136 = *(_QWORD *)a2;
  v137 = *(_QWORD *)(a2 + 64);
  v133 = v118;
  v119 = *(_QWORD *)(a2 + 136);
  v120 = *(_QWORD *)(a2 + 240);
  memset(v170, 0, sizeof(v170));
  memset(v171, 0, 40);
  LODWORD(v115) = v159;
  sub_1000377C4(v148);
  swift_bridgeObjectRetain(v147);
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRetain(v119);
  sub_1000126EC((_QWORD *)a2);
  swift_bridgeObjectRetain(v120);
  v121 = sub_1000A5060();
  v123 = v122;
  swift_bridgeObjectRetain(v146);
  *(_QWORD *)&v131 = _swiftEmptyArrayStorage;
  *((_QWORD *)&v131 + 1) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v130 = 47;
  *((_QWORD *)&v130 + 1) = 0xE100000000000000;
  *(_QWORD *)&v129 = v138;
  *((_QWORD *)&v129 + 1) = v145;
  *(_QWORD *)&v128 = v140;
  *((_QWORD *)&v128 + 1) = v139;
  *(_QWORD *)&v127 = v119;
  *((_QWORD *)&v127 + 1) = v92;
  *(_QWORD *)&v126 = &_swiftEmptySetSingleton;
  *((_QWORD *)&v126 + 1) = &_swiftEmptySetSingleton;
  *(_QWORD *)&v125 = v133;
  *((_QWORD *)&v125 + 1) = v75;
  sub_1000A506C(v136, v144, v147, v141, v142, v143, v146, v137, (uint64_t)__src, v125, v126, v127, v128, v129, v130, v131, v135, v134, a2,
    v120,
    (uint64_t)v170,
    v121,
    v123,
    (uint64_t)v171,
    v115,
    v132);
  sub_1000390EC(v148);
  sub_100010B40((_QWORD *)a2);
  swift_bridgeObjectRelease(v146);
  swift_bridgeObjectRelease(v142);
  swift_bridgeObjectRelease(v147);
  sub_100005D08(v152);
  return memcpy(a4, __src, 0x24DuLL);
}

uint64_t sub_100075B80(_QWORD *a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v8 = type metadata accessor for URL(0);
  v46 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v43 - v12;
  v14 = a3[13];
  v61 = a3[12];
  v62 = v14;
  v63 = a3[14];
  v64 = *((_QWORD *)a3 + 30);
  v15 = a3[9];
  v57 = a3[8];
  v58 = v15;
  v16 = a3[11];
  v59 = a3[10];
  v60 = v16;
  v17 = a3[5];
  v53 = a3[4];
  v54 = v17;
  v18 = a3[7];
  v55 = a3[6];
  v56 = v18;
  v19 = a3[1];
  v49 = *a3;
  v50 = v19;
  v20 = a3[3];
  v51 = a3[2];
  v52 = v20;
  sub_1000126EC(a3);
  swift_getAtKeyPath(&v49, a2);
  sub_100010B40(a3);
  v21 = v47;
  v22 = v48;
  if ((unint64_t)a1 >= 5)
  {
    v44 = a2;
    v26 = a4;
    v27 = a1[2];
    v28 = a1[3];
    v29 = a1[4];
    v45 = v27;
    sub_1000377D4(v27);
    swift_bridgeObjectRetain(v29);
    URL.init(fileURLWithPath:)(v21, v22);
    swift_bridgeObjectRelease(v22);
    v30 = v28;
    v31 = v26;
    URL.appendingPathExtension(_:)(v30, v29);
    swift_bridgeObjectRelease(v29);
    v32 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
    v33 = v32(v11, v8);
    v25 = URL.path.getter(v33);
    v35 = v34;
    v32(v13, v8);
    v36 = v31[3];
    v37 = v31[4];
    sub_100004DE4(v31, v36);
    sub_10010731C(v36, v37);
    v38 = *((_QWORD *)&v50 + 1);
    v39 = v51;
    sub_100004DE4(&v49, *((uint64_t *)&v50 + 1));
    LOBYTE(v36) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 136))(v25, v35, 0, v38, v39);
    sub_100005D08(&v49);
    if ((v36 & 1) != 0)
    {
      v40 = v45;
    }
    else
    {
      swift_bridgeObjectRelease(v35);
      v41 = v45;
      v25 = sub_100075B80(v45, v44, a3, v31);
      v40 = v41;
    }
    sub_1000390FC(v40);
  }
  else
  {
    URL.init(fileURLWithPath:)(v47, v48);
    swift_bridgeObjectRelease(v22);
    sub_1000D460C((uint64_t)a1, (uint64_t)v13);
    v23 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
    v24 = v23(v11, v8);
    v25 = URL.path.getter(v24);
    v23(v13, v8);
  }
  return v25;
}

uint64_t sub_100075E20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1000762A8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int sub_100075FCC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_100159E58);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_1000762A8(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100075FCC(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100076440();
      goto LABEL_22;
    }
    sub_1000765F0(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void sub_100076440()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100005C88(&qword_100159E58);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

Swift::Int sub_1000765F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_100159E58);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10007689C(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void (*v30)(id);
  char *v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v34;
  void (*v35)(char *, id, uint64_t, uint64_t);
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void **p_ivar_lyt;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  Swift::String v53;
  void *v54;
  Swift::String v55;
  void *object;
  void **v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  void *v72;
  char *v73;
  id v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void *v80;
  char *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  void (*v101)(char *, char *, uint64_t);
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  void **aBlock;
  unint64_t v108;
  uint64_t (*v109)(uint64_t);
  void *v110;
  uint64_t (*v111)();
  char *v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;

  v3 = swift_isaMask & *v1;
  v101 = (void (*)(char *, char *, uint64_t))type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v99 = *((_QWORD *)v101 - 1);
  __chkstk_darwin(v101);
  v100 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for OS_dispatch_workloop.Attributes(0);
  __chkstk_darwin(v97);
  v98 = (uint64_t *)((char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(v3 + 80);
  v105 = *(_QWORD *)(v3 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v105, v6, &protocol descriptor for NSXPCRequestDelegate.NumRequirements, &unk_1001336FC);
  v92 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v91 = *(_QWORD *)(v92 - 8);
  v8 = __chkstk_darwin(v92);
  v94 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v103 = (char *)&v91 - v11;
  v104 = *(_QWORD *)(v6 - 8);
  v12 = __chkstk_darwin(v10);
  v102 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = v13;
  __chkstk_darwin(v12);
  v106 = (char *)&v91 - v14;
  v15 = type metadata accessor for OSSignpostID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = static os_signpost_type_t.event.getter(v17);
  v21 = (void *)*sub_1000D302C();
  v22 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10010F050;
  v24 = v21;
  v25 = objc_msgSend(a1, "processIdentifier");
  *(_QWORD *)(v23 + 56) = &type metadata for Int32;
  *(_QWORD *)(v23 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v23 + 32) = (_DWORD)v25;
  static OSSignpostID.exclusive.getter(v25);
  os_signpost(_:dso:log:name:signpostID:_:_:)(v20, &_mh_execute_header, v24, "listener(_:shouldAcceptNewConnection:)", 38, 2, v19, "Pid: %d", 7);

  v26 = v23;
  v27 = a1;
  swift_bridgeObjectRelease(v26);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v28 = *(void **)((char *)v1 + *(_QWORD *)((swift_isaMask & *v1) + 0x78));
  v29 = objc_msgSend(a1, "setExportedInterface:", v28);
  v30 = *(void (**)(id))((swift_isaMask & *v1) + 0x80);
  v31 = v103;
  v93 = v1;
  v30(v29);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48);
  v95 = AssociatedTypeWitness;
  result = v32(v31, 1, AssociatedTypeWitness);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }
  v34 = v105;
  v35 = *(void (**)(char *, id, uint64_t, uint64_t))(v105 + 40);
  v36 = v27;
  v37 = v106;
  v35(v31, v36, v6, v34);
  v38 = v6;
  v39 = _bridgeAnythingToObjectiveC<A>(_:)(v37, v6);
  v40 = v36;
  objc_msgSend(v36, "setExportedObject:", v39);
  v41 = swift_unknownObjectRelease(v39);
  v42 = v94;
  v30((id)v41);
  v43 = v95;
  if (v32(v42, 1, v95) == 1)
  {
    (*(void (**)(char *, uint64_t))(v91 + 8))(v42, v92);
    p_ivar_lyt = &ApprovalSettingsStateManager.ivar_lyt;
LABEL_7:
    v115 = 0;
    v113 = 0u;
    v114 = 0u;
    v47 = v38;
    goto LABEL_8;
  }
  v45 = sub_100005C88((uint64_t *)&unk_100159EA0);
  v46 = swift_dynamicCast(&v113, v42, v43, v45, 6);
  p_ivar_lyt = (void **)(&ApprovalSettingsStateManager + 16);
  if (!v46)
    goto LABEL_7;
  v47 = v38;
  if (!*((_QWORD *)&v114 + 1))
  {
LABEL_8:
    sub_1000124F8((uint64_t)&v113, &qword_100157C70);
    v50 = 0xD00000000000001ALL;
    v52 = 0x80000001001243E0;
    goto LABEL_9;
  }
  sub_100004E2C(&v113, (uint64_t)&aBlock);
  v48 = v110;
  v49 = sub_100004DE4(&aBlock, (uint64_t)v110);
  swift_getDynamicType(v49, v48, 1);
  v50 = (*((uint64_t (**)(void))v111 + 4))();
  v52 = v51;
  sub_100005D08(&aBlock);
LABEL_9:
  sub_100005D68(0, &qword_100159E80, OS_dispatch_workloop_ptr);
  aBlock = 0;
  v108 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(v108);
  aBlock = (void **)v50;
  v108 = v52;
  v53._object = (void *)0x8000000100124400;
  v53._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v53);
  v54 = v40;
  LODWORD(v113) = objc_msgSend(v40, (SEL)p_ivar_lyt[157]);
  v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v55._object;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(object);
  v57 = aBlock;
  v58 = v108;
  aBlock = (void **)_swiftEmptyArrayStorage;
  v59 = sub_100012534(&qword_100159E88, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_workloop.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_workloop.Attributes);
  v60 = sub_100005C88(&qword_100159E90);
  v61 = sub_10007778C(&qword_100159E98, &qword_100159E90);
  v62 = v98;
  dispatch thunk of SetAlgebra.init<A>(_:)(v98, &aBlock, v60, v61, v97, v59);
  v63 = v100;
  (*(void (**)(char *, _QWORD, _QWORD *))(v99 + 104))(v100, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v101);
  v103 = (char *)OS_dispatch_workloop.init(label:attributes:autoreleaseFrequency:osWorkgroup:)(v57, v58, v62, v63, 0);
  objc_msgSend(v54, "_setQueue:");
  v64 = v104;
  v101 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
  v65 = v102;
  v101(v102, v106, v47);
  v66 = *(unsigned __int8 *)(v64 + 80);
  v67 = (v66 + 40) & ~v66;
  v99 = v66 | 7;
  v100 = (char *)(v67 + v96);
  v68 = (char *)swift_allocObject(&unk_1001497E8, v67 + v96, v66 | 7);
  *((_QWORD *)v68 + 2) = v47;
  v69 = v47;
  v70 = v105;
  *((_QWORD *)v68 + 3) = v105;
  *((_QWORD *)v68 + 4) = v54;
  v71 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
  v71(&v68[v67], v65, v69);
  v111 = sub_100077514;
  v112 = v68;
  aBlock = _NSConcreteStackBlock;
  v108 = 1107296256;
  v109 = sub_10000B424;
  v110 = &unk_100149800;
  v72 = _Block_copy(&aBlock);
  v73 = v112;
  v74 = v54;
  v75 = v73;
  v76 = v70;
  v77 = v69;
  swift_release((char *)v75);
  objc_msgSend(v74, "setInterruptionHandler:", v72);
  _Block_release(v72);
  v101(v65, v106, v69);
  v78 = (char *)swift_allocObject(&unk_100149838, v100, v99);
  *((_QWORD *)v78 + 2) = v69;
  *((_QWORD *)v78 + 3) = v76;
  *((_QWORD *)v78 + 4) = v74;
  v71(&v78[v67], v65, v69);
  v79 = v106;
  v111 = sub_100077688;
  v112 = v78;
  aBlock = _NSConcreteStackBlock;
  v108 = 1107296256;
  v109 = sub_10000B424;
  v110 = &unk_100149850;
  v80 = _Block_copy(&aBlock);
  v81 = v112;
  v82 = v74;
  swift_release(v81);
  objc_msgSend(v82, "setInvalidationHandler:", v80);
  _Block_release(v80);
  v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 48))(v77, v76);
  v84 = v83;
  v85 = *(_QWORD *)(v83 + 16);
  if (v85)
  {
    v86 = (unsigned __int8 *)(v83 + 56);
    do
    {
      v87 = *((_QWORD *)v86 - 3);
      v88 = *((_QWORD *)v86 - 2);
      v89 = *((_QWORD *)v86 - 1);
      v90 = *v86;
      v86 += 32;
      objc_msgSend(v28, "setInterface:forSelector:argumentIndex:ofReply:", v87, v88, v89, v90);
      --v85;
    }
    while (v85);
  }
  swift_bridgeObjectRelease(v84);
  (*(void (**)(void *, uint64_t, uint64_t))(v76 + 72))(v28, v77, v76);
  objc_msgSend(v82, "resume");

  (*(void (**)(char *, uint64_t))(v104 + 8))(v79, v77);
  return 1;
}

void sub_100077124()
{
  _swift_stdlib_reportUnimplementedInitializer("driverkitd.NSXPCRequestSource", 29, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_100077150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100158018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100077198()
{
  unint64_t result;

  result = qword_100159D48;
  if (!qword_100159D48)
  {
    result = swift_getWitnessTable(&unk_1001142D8, &type metadata for ExtensionManager.Settings.Flags);
    atomic_store(result, (unint64_t *)&qword_100159D48);
  }
  return result;
}

unint64_t sub_1000771DC()
{
  unint64_t result;

  result = qword_100159D50;
  if (!qword_100159D50)
  {
    result = swift_getWitnessTable(&unk_1001141D8, &type metadata for ExtensionManager.Settings.Flags);
    atomic_store(result, (unint64_t *)&qword_100159D50);
  }
  return result;
}

uint64_t sub_100077220(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100077248(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
    result = swift_initClassMetadata2(a1, 0, 4, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for KernelRequestSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000639C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KernelRequestSource);
}

uint64_t sub_1000772E8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  unint64_t v4;
  _QWORD v5[4];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80), &protocol descriptor for NSXPCRequestDelegate.NumRequirements, &unk_1001336FC);
  result = type metadata accessor for Optional(319, AssociatedTypeWitness);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_initClassMetadata2(a1, 0, 4, v5, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

void destroy for NSXPCRequestDelegateInterface(id *a1)
{

}

uint64_t initializeWithCopy for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NSXPCRequestDelegateInterface(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSXPCRequestDelegateInterface(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSXPCRequestDelegateInterface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NSXPCRequestDelegateInterface()
{
  return &type metadata for NSXPCRequestDelegateInterface;
}

uint64_t sub_100077514()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  int v10;

  v1 = v0[2];
  v2 = v0[3];
  v3 = (void *)v0[4];
  v4 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10010F050;
  v6 = objc_msgSend(v3, "processIdentifier");
  *(_QWORD *)(v5 + 56) = &type metadata for Int32;
  *(_QWORD *)(v5 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v5 + 32) = v6;
  v7 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v8 = (void *)static OS_os_log.default.getter(v7);
  static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)("Connection with client pid %d interrupted.", v10);

  swift_bridgeObjectRelease(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t sub_10007761C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100077688()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  int v10;

  v1 = v0[2];
  v2 = v0[3];
  v3 = (void *)v0[4];
  v4 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10010F050;
  v6 = objc_msgSend(v3, "processIdentifier");
  *(_QWORD *)(v5 + 56) = &type metadata for Int32;
  *(_QWORD *)(v5 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v5 + 32) = v6;
  v7 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v8 = (void *)static OS_os_log.default.getter(v7);
  static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)("Connection with client pid %d invalidated.", v10);

  swift_bridgeObjectRelease(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
}

uint64_t sub_10007778C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100011CE4(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000777F4()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100079AE4();
  v1 = sub_10003A314();
  return sub_1000D3780(1, (uint64_t)&type metadata for XPCEventSubscriberFlags, v0, v1, (uint64_t)&qword_100175518);
}

uint64_t *sub_10007783C()
{
  if (qword_100162720 != -1)
    swift_once(&qword_100162720, sub_1000777F4);
  return &qword_100175518;
}

uint64_t sub_10007787C(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_100162720 != -1)
    swift_once(&qword_100162720, sub_1000777F4);
  if ((qword_100175518 & ~a1) != 0)
  {
    v2 = _swiftEmptyArrayStorage;
  }
  else
  {
    v2 = sub_10000C500(0, 1, 1, _swiftEmptyArrayStorage);
    v4 = v2[2];
    v3 = v2[3];
    if (v4 >= v3 >> 1)
      v2 = sub_10000C500((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v2[2] = v4 + 1;
    v5 = &v2[2 * v4];
    v5[4] = 0x64656C7469746E65;
    v5[5] = 0xE800000000000000;
  }
  v6 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v7 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
  v8 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v6, v7);
  swift_bridgeObjectRelease(v2);
  return v8;
}

uint64_t sub_1000779B8()
{
  uint64_t *v0;

  return sub_10007787C(*v0);
}

uint64_t sub_1000779C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = sub_100005C88(&qword_100159F30);
  OS_dispatch_queue.sync<A>(execute:)(&v3, sub_100078258, v0, v1);
  return v3;
}

uint64_t sub_100077A1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 64, 7);
  sub_100077A80(a1, a2, a3, a4);
  return v9;
}

uint64_t sub_100077A80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t);
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  _QWORD *v27;
  id v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  id v32;
  uint64_t result;
  Swift::String v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **aBlock;
  unint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;

  v5 = v4;
  v39 = a3;
  v40 = a4;
  v36 = a2;
  v38 = a1;
  v37 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D68(0, (unint64_t *)&qword_100159CE0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v15);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v16 = sub_1000782A4();
  v17 = sub_100005C88(&qword_100159CF0);
  v18 = v36;
  v19 = sub_10001284C((unint64_t *)&qword_100159CF8, &qword_100159CF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v11, &aBlock, v17, v19, v9, v16);
  v20 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
  v21 = v38;
  v20(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v37);
  v22 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v39, v40, v14, v11, v8, 0);
  v5[3] = v22;
  v23 = String.utf8CString.getter(v21);
  v24 = v22;
  v25 = (id)xpc_event_publisher_create(v23 + 32, v24);

  swift_release(v23);
  if (v25)
  {
    v5[4] = v21;
    v5[5] = v18;
    v5[2] = v25;
    v5[6] = _swiftEmptyArrayStorage;
    v5[7] = sub_100078C5C((uint64_t)_swiftEmptyArrayStorage);
    v45 = sub_100078D30;
    v46 = v5;
    aBlock = _NSConcreteStackBlock;
    v42 = 1107296256;
    v43 = sub_100077F88;
    v44 = &unk_100149878;
    v26 = _Block_copy(&aBlock);
    v27 = v46;
    v28 = v25;
    swift_retain(v5);
    swift_release(v27);
    xpc_event_publisher_set_handler(v28, v26);
    _Block_release(v26);

    v29 = (void *)v5[2];
    v45 = sub_1000791A4;
    v46 = v5;
    aBlock = _NSConcreteStackBlock;
    v42 = 1107296256;
    v43 = sub_100077FF0;
    v44 = &unk_1001498A0;
    v30 = _Block_copy(&aBlock);
    v31 = v46;
    swift_retain(v5);
    v32 = v29;
    swift_release(v31);
    xpc_event_publisher_set_error_handler(v32, v30);
    _Block_release(v30);

    return (uint64_t)v5;
  }
  else
  {
    aBlock = 0;
    v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(v42);
    aBlock = (void **)0xD000000000000025;
    v42 = 0x8000000100124510;
    v34._countAndFlagsBits = v21;
    v34._object = v18;
    String.append(_:)(v34);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, aBlock, v42, "driverkitd/XPCEventPublisher.swift", 34, 2, 69, 0);
    __break(1u);
  }
  return result;
}

unint64_t sub_100077E14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_10015A068);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100005DE8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100077F24(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_100077F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  swift_unknownObjectRetain(a4);
  v8(a2, a3, a4);
  swift_release(v7);
  return swift_unknownObjectRelease(a4);
}

uint64_t sub_100077FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_10007802C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  unint64_t v6;
  Class isa;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[56];

  v3 = sub_100005C88(&qword_100159F38);
  inited = swift_initStackObject(v3, v13);
  *(_OWORD *)(inited + 16) = xmmword_10010F050;
  v5 = v1[5];
  *(_QWORD *)(inited + 32) = v1[4];
  *(_QWORD *)(inited + 40) = v5;
  *(_BYTE *)(inited + 48) = 1;
  swift_bridgeObjectRetain(v5);
  v6 = sub_100077E14(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  v8 = _CFXPCCreateXPCObjectFromCFObject(isa);

  if (v8)
  {
    xpc_event_publisher_fire(v1[2], a1, v8);
    return swift_unknownObjectRelease(v8);
  }
  else
  {
    v10 = sub_1000122F8();
    v11 = swift_allocError(&type metadata for KMError, v10, 0, 0);
    *(_QWORD *)v12 = 0xD000000000000025;
    *(_QWORD *)(v12 + 8) = 0x8000000100124570;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_QWORD *)(v12 + 64) = 0;
    *(_BYTE *)(v12 + 72) = 50;
    return swift_willThrow(v11);
  }
}

uint64_t sub_100078158()
{
  uint64_t v0;

  return xpc_event_publisher_activate(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100078160()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t sub_10007819C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_1000781E0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t sub_100078208()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t sub_100078230()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t sub_100078258@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 56, v5, 0, 0);
  v3 = *(_QWORD *)(v1 + 56);
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

unint64_t sub_1000782A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159CE8;
  if (!qword_100159CE8)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_100159CE8);
  }
  return result;
}

char *sub_1000782EC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015A078);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_1000783E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_100078414(a1, v3);
}

unint64_t sub_100078414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1000784B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v3 = sub_1000783E4(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v7 = *v1;
  v11 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100078990();
    v7 = v11;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  sub_1000787FC(v5, v7);
  v9 = *v2;
  *v2 = v7;
  swift_bridgeObjectRelease(v9);
  return v8;
}

uint64_t sub_100078558(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_10015A070);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = a2;
    v35 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_34;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_34;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v35;
                goto LABEL_41;
              }
              if (v34 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v33;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v9 = v22;
          }
        }
LABEL_24:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v23);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v24);
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v15 + 8 * v28);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

unint64_t sub_1000787FC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *sub_100078990()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_100005C88(&qword_10015A070);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100078B1C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1000783E4(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_100078990();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v18 = 8 * v10;
    *(_QWORD *)(v16[6] + v18) = a2;
    *(_QWORD *)(v16[7] + v18) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_100078558(result, a3 & 1);
  result = sub_1000783E4(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

char *sub_100078C48(uint64_t a1)
{
  return sub_1000782EC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_100078C5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005C88(&qword_10015A070);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1000783E4(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_100078D30(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  xpc_object_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];
  uint64_t v44;

  v3 = v2;
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    v5 = (char *)v2[6];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3[6]);
    v3[6] = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_40;
  }
  v23 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v24 = swift_allocObject(v23, 112, 7);
  *(_OWORD *)(v24 + 16) = xmmword_10010F380;
  v26 = v2[4];
  v25 = v2[5];
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  v27 = sub_100026838();
  *(_QWORD *)(v24 + 32) = v26;
  *(_QWORD *)(v24 + 40) = v25;
  *(_QWORD *)(v24 + 96) = &type metadata for UInt64;
  *(_QWORD *)(v24 + 104) = &protocol witness table for UInt64;
  *(_QWORD *)(v24 + 64) = v27;
  *(_QWORD *)(v24 + 72) = a2;
  sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  swift_bridgeObjectRetain(v25);
  v29 = (void *)static OS_os_log.default.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  os_log(_:dso:log:type:_:)("XPC Event %{public}s: Removing subscriber %llx", 46, 2, &_mh_execute_header, v29, v30, v24);

  result = swift_bridgeObjectRelease(v24);
  v5 = (char *)(v3 + 6);
  v31 = (char *)v3[6];
  v32 = *((_QWORD *)v31 + 2);
  if (!v32)
    goto LABEL_14;
  if (*((_QWORD *)v31 + 4) == a2)
  {
    v33 = 0;
  }
  else
  {
    if (v32 == 1)
    {
      v33 = 1;
      goto LABEL_34;
    }
    v41 = 5;
    while (1)
    {
      v33 = v41 - 4;
      if (*(_QWORD *)&v31[8 * v41] == a2)
        break;
      v42 = v41 - 3;
      if (__OFADD__(v33, 1))
        goto LABEL_38;
      ++v41;
      if (v42 == v32)
      {
        v33 = *((_QWORD *)v31 + 2);
        goto LABEL_34;
      }
    }
  }
  v34 = v33 + 1;
  if (__OFADD__(v33, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v34 == v32)
  {
LABEL_12:
    if ((uint64_t)v32 >= (uint64_t)v33)
    {
LABEL_34:
      sub_1000793E4(v33, v32);
      swift_beginAccess(v3 + 7, v43, 33, 0);
      sub_1000784B0(a2);
      return swift_endAccess(v43);
    }
    __break(1u);
LABEL_14:
    v33 = 0;
    goto LABEL_34;
  }
  if ((v34 & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
    return result;
  }
  v35 = v33 + 5;
  while (v35 - 4 < v32)
  {
    v38 = *(_QWORD *)&v31[8 * v35];
    if (v38 != a2)
    {
      if (v35 - 4 != v33)
      {
        if (v33 >= v32)
          goto LABEL_39;
        v39 = *(_QWORD *)&v31[8 * v33 + 32];
        v40 = swift_isUniquelyReferenced_nonNull_native(v31);
        *(_QWORD *)v5 = v31;
        if ((v40 & 1) == 0)
        {
          v31 = sub_100078C48((uint64_t)v31);
          *(_QWORD *)v5 = v31;
        }
        *(_QWORD *)&v31[8 * v33 + 32] = v38;
        *(_QWORD *)(*(_QWORD *)v5 + 8 * v35) = v39;
        v31 = *(char **)v5;
      }
      if (__OFADD__(v33++, 1))
        goto LABEL_37;
      v32 = *((_QWORD *)v31 + 2);
    }
    v37 = v35 - 3;
    ++v35;
    if (v37 == v32)
      goto LABEL_12;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  v5 = sub_1000782EC(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
  v3[6] = v5;
LABEL_4:
  v8 = *((_QWORD *)v5 + 2);
  v7 = *((_QWORD *)v5 + 3);
  if (v8 >= v7 >> 1)
  {
    v5 = sub_1000782EC((char *)(v7 > 1), v8 + 1, 1, v5);
    v3[6] = v5;
  }
  *((_QWORD *)v5 + 2) = v8 + 1;
  *(_QWORD *)&v5[8 * v8 + 32] = a2;
  v9 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10010F380;
  v12 = v3[4];
  v11 = v3[5];
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v13 = sub_100026838();
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v11;
  *(_QWORD *)(v10 + 96) = &type metadata for UInt64;
  *(_QWORD *)(v10 + 104) = &protocol witness table for UInt64;
  *(_QWORD *)(v10 + 64) = v13;
  *(_QWORD *)(v10 + 72) = a2;
  sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  swift_bridgeObjectRetain(v11);
  v15 = (void *)static OS_os_log.default.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)("XPC Event %{public}s: Pending subscriber %llx", 45, 2, &_mh_execute_header, v15, v16, v10);

  swift_bridgeObjectRelease(v10);
  v17 = xpc_dictionary_create(0, 0, 0);
  v18 = v3[2];
  v19 = v3[3];
  v20 = swift_allocObject(&unk_100149920, 32, 7);
  *(_QWORD *)(v20 + 16) = v3;
  *(_QWORD *)(v20 + 24) = a2;
  v43[4] = sub_10007950C;
  v44 = v20;
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 1107296256;
  v43[2] = sub_10006A9E8;
  v43[3] = &unk_100149938;
  v21 = _Block_copy(v43);
  v22 = v44;
  swift_unknownObjectRetain(v17);
  swift_retain(v3);
  swift_release(v22);
  xpc_event_publisher_fire_with_reply(v18, a2, v17, v19, v21);
  _Block_release(v21);
  return swift_unknownObjectRelease_n(v17, 2);
}

uint64_t sub_10007918C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007919C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000791A4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = a1;
  v3 = static os_log_type_t.error.getter(a1);
  v4 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10010F380;
  v7 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_100026838();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v6;
  *(_QWORD *)(v5 + 96) = &type metadata for Int32;
  *(_QWORD *)(v5 + 104) = &protocol witness table for Int32;
  *(_DWORD *)(v5 + 72) = v2;
  sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  swift_bridgeObjectRetain(v6);
  v9 = (void *)static OS_os_log.default.getter(v8);
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v9, "XPC Event Handler %{public}s error: %d", 38, 2, v5);

  return swift_bridgeObjectRelease(v5);
}

unint64_t sub_100079298()
{
  unint64_t result;

  result = qword_100159F40;
  if (!qword_100159F40)
  {
    result = swift_getWitnessTable(&unk_1001127A8, &type metadata for XPCEventSubscriberFlags);
    atomic_store(result, (unint64_t *)&qword_100159F40);
  }
  return result;
}

unint64_t sub_1000792E0()
{
  unint64_t result;

  result = qword_100159F48;
  if (!qword_100159F48)
  {
    result = swift_getWitnessTable(&unk_1001126E0, &type metadata for XPCEventSubscriberFlags);
    atomic_store(result, (unint64_t *)&qword_100159F48);
  }
  return result;
}

unint64_t sub_100079328()
{
  unint64_t result;

  result = qword_100159F50;
  if (!qword_100159F50)
  {
    result = swift_getWitnessTable(&unk_1001127E0, &type metadata for XPCEventSubscriberFlags);
    atomic_store(result, (unint64_t *)&qword_100159F50);
  }
  return result;
}

unint64_t sub_100079370()
{
  unint64_t result;

  result = qword_100159F58;
  if (!qword_100159F58)
  {
    result = swift_getWitnessTable(&unk_100112808, &type metadata for XPCEventSubscriberFlags);
    atomic_store(result, (unint64_t *)&qword_100159F58);
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCEventSubscriberFlags()
{
  return &type metadata for XPCEventSubscriberFlags;
}

uint64_t type metadata accessor for RealXPCEventPublisher()
{
  return objc_opt_self(_TtC10driverkitd21RealXPCEventPublisher);
}

unint64_t sub_1000793E4(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_1000782EC((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 8 * v6;
  v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13)
    result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000794E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007950C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  _BOOL4 value;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  const _xpc_type_s *type;
  const char *name;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[24];
  _OWORD v68[2];

  v4 = *(_QWORD **)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = v4 + 6;
  v6 = sub_100077F24(v3, v4[6]);
  if ((v6 & 1) == 0)
    goto LABEL_9;
  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 16);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_30;
  }
  if (*(_QWORD *)(v7 + 32) == v3)
  {
    v9 = 0;
    goto LABEL_5;
  }
  if (v8 == 1)
  {
    v9 = 1;
LABEL_30:
    sub_1000793E4(v9, v8);
    ObjectType = swift_getObjectType(a1);
    if (!sub_1000D789C(ObjectType))
    {
      v32 = sub_1000D7980();
      if (v33)
      {
        v34 = v32;
        v35 = v33;
        v36 = static os_log_type_t.error.getter(v32);
        v37 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v13 = swift_allocObject(v37, 152, 7);
        *(_OWORD *)(v13 + 16) = xmmword_100111CB0;
        v39 = v4[4];
        v38 = v4[5];
        *(_QWORD *)(v13 + 56) = &type metadata for String;
        v40 = sub_100026838();
        *(_QWORD *)(v13 + 32) = v39;
        *(_QWORD *)(v13 + 40) = v38;
        *(_QWORD *)(v13 + 96) = &type metadata for UInt64;
        *(_QWORD *)(v13 + 104) = &protocol witness table for UInt64;
        *(_QWORD *)(v13 + 64) = v40;
        *(_QWORD *)(v13 + 72) = v3;
        *(_QWORD *)(v13 + 136) = &type metadata for String;
        *(_QWORD *)(v13 + 144) = v40;
        *(_QWORD *)(v13 + 112) = v34;
        *(_QWORD *)(v13 + 120) = v35;
        sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
        swift_bridgeObjectRetain(v38);
        v18 = (void *)static OS_os_log.default.getter(v41);
        os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v18, "XPC Event %{public}s: Pending subscriber %llx replied with error %{public}s", 75, 2, v13);
      }
      else
      {
        type = xpc_get_type(a1);
        name = xpc_type_get_name(type);
        v57 = String.init(cString:)(name);
        v59 = v58;
        v60 = static os_log_type_t.error.getter(v57);
        v61 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v13 = swift_allocObject(v61, 152, 7);
        *(_OWORD *)(v13 + 16) = xmmword_100111CB0;
        v63 = v4[4];
        v62 = v4[5];
        *(_QWORD *)(v13 + 56) = &type metadata for String;
        v64 = sub_100026838();
        *(_QWORD *)(v13 + 32) = v63;
        *(_QWORD *)(v13 + 40) = v62;
        *(_QWORD *)(v13 + 96) = &type metadata for UInt64;
        *(_QWORD *)(v13 + 104) = &protocol witness table for UInt64;
        *(_QWORD *)(v13 + 64) = v64;
        *(_QWORD *)(v13 + 72) = v3;
        *(_QWORD *)(v13 + 136) = &type metadata for String;
        *(_QWORD *)(v13 + 144) = v64;
        *(_QWORD *)(v13 + 112) = v57;
        *(_QWORD *)(v13 + 120) = v59;
        sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
        swift_bridgeObjectRetain(v62);
        v18 = (void *)static OS_os_log.default.getter(v65);
        os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v18, "XPC Event %{public}s: Pending subscriber %llx replied with unexpected type %{public}s", 85, 2, v13);
      }
      goto LABEL_40;
    }
    memset(v68, 0, sizeof(v68));
    xpc_dictionary_get_audit_token(a1, v68);
    v27 = sub_1000900C8();
    v28 = String.utf8CString.getter(*v27);
    v29 = (void *)xpc_copy_entitlement_for_token(v28 + 32, v68);
    swift_release(v28);
    if (!v29 || (value = xpc_BOOL_get_value(v29), swift_unknownObjectRelease(v29), !value))
    {
      v31 = 0;
      goto LABEL_38;
    }
    if (qword_100162720 == -1)
    {
LABEL_34:
      v31 = qword_100175518;
LABEL_38:
      swift_beginAccess(v4 + 7, v67, 33, 0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4[7]);
      v66 = v4[7];
      v4[7] = 0x8000000000000000;
      sub_100078B1C(v31, v3, isUniquelyReferenced_nonNull_native);
      v43 = v4[7];
      v4[7] = v66;
      swift_bridgeObjectRelease(v43);
      swift_endAccess(v67);
      v44 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v45 = swift_allocObject(v44, 152, 7);
      *(_OWORD *)(v45 + 16) = xmmword_100111CB0;
      v47 = v4[4];
      v46 = v4[5];
      *(_QWORD *)(v45 + 56) = &type metadata for String;
      v48 = sub_100026838();
      *(_QWORD *)(v45 + 32) = v47;
      *(_QWORD *)(v45 + 40) = v46;
      *(_QWORD *)(v45 + 96) = &type metadata for UInt64;
      *(_QWORD *)(v45 + 104) = &protocol witness table for UInt64;
      *(_QWORD *)(v45 + 64) = v48;
      *(_QWORD *)(v45 + 72) = v3;
      swift_bridgeObjectRetain(v46);
      v49 = sub_10007787C(v31);
      *(_QWORD *)(v45 + 136) = &type metadata for String;
      *(_QWORD *)(v45 + 144) = v48;
      *(_QWORD *)(v45 + 112) = v49;
      *(_QWORD *)(v45 + 120) = v50;
      v51 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
      v52 = (void *)static OS_os_log.default.getter(v51);
      v53 = static os_log_type_t.default.getter(v52);
      os_log(_:dso:log:type:_:)("XPC Event %{public}s: Added new subscriber %llx (%{public}s)", 60, 2, &_mh_execute_header, v52, v53, v45);

      return swift_bridgeObjectRelease(v45);
    }
LABEL_47:
    swift_once(&qword_100162720, sub_1000777F4);
    goto LABEL_34;
  }
  v24 = 5;
  while (1)
  {
    v9 = v24 - 4;
    if (*(_QWORD *)(v7 + 8 * v24) == v3)
      break;
    v25 = v24 - 3;
    if (__OFADD__(v9, 1))
      goto LABEL_43;
    ++v24;
    if (v25 == v8)
    {
      v9 = *(_QWORD *)(*v5 + 16);
      goto LABEL_30;
    }
  }
LABEL_5:
  v10 = v9 + 1;
  if (__OFADD__(v9, 1))
    goto LABEL_45;
  if (v10 != v8)
  {
    if ((v10 & 0x8000000000000000) != 0)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v19 = v9 + 5;
    while (v19 - 4 < v8)
    {
      v21 = *(_QWORD *)(v7 + 8 * v19);
      if (v21 != v3)
      {
        if (v19 - 4 != v9)
        {
          if (v9 >= v8)
            goto LABEL_44;
          v22 = *(_QWORD *)(v7 + 32 + 8 * v9);
          v6 = swift_isUniquelyReferenced_nonNull_native(v7);
          *v5 = v7;
          if ((v6 & 1) == 0)
          {
            v6 = (uint64_t)sub_100078C48(v7);
            v7 = v6;
            *v5 = v6;
          }
          *(_QWORD *)(v7 + 8 * v9 + 32) = v21;
          *(_QWORD *)(*v5 + 8 * v19) = v22;
          v7 = *v5;
        }
        if (__OFADD__(v9++, 1))
          goto LABEL_42;
        v8 = *(_QWORD *)(v7 + 16);
      }
      v20 = v19 - 3;
      ++v19;
      if (v20 == v8)
        goto LABEL_7;
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_7:
  if ((uint64_t)v8 >= (uint64_t)v9)
    goto LABEL_30;
  __break(1u);
LABEL_9:
  v11 = static os_log_type_t.error.getter(v6);
  v12 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v13 = swift_allocObject(v12, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10010F380;
  v15 = v4[4];
  v14 = v4[5];
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  v16 = sub_100026838();
  *(_QWORD *)(v13 + 32) = v15;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 96) = &type metadata for UInt64;
  *(_QWORD *)(v13 + 104) = &protocol witness table for UInt64;
  *(_QWORD *)(v13 + 64) = v16;
  *(_QWORD *)(v13 + 72) = v3;
  sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  swift_bridgeObjectRetain(v14);
  v18 = (void *)static OS_os_log.default.getter(v17);
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v18, "XPC Event %{public}s: Unexpected reply from previously pending subscriber %llx", 78, 2, v13);
LABEL_40:

  return swift_bridgeObjectRelease(v13);
}

unint64_t sub_100079AE4()
{
  unint64_t result;

  result = qword_10015A080;
  if (!qword_10015A080)
  {
    result = swift_getWitnessTable(&unk_1001126A8, &type metadata for XPCEventSubscriberFlags);
    atomic_store(result, (unint64_t *)&qword_10015A080);
  }
  return result;
}

void sub_100079B28()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t (*sub_100079B50(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_100079B8C(uint64_t a1)
{
  return sub_10007A434(a1, "SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient returning approvals for:", 87);
}

void sub_100079BAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  int64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *object;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;

  v40 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)*sub_1000D2F94();
  v7 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v36 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v36 + 16) = xmmword_10010F050;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v35 = v1;
    v43 = _swiftEmptyArrayStorage;
    v34 = v6;
    v9 = v6;
    sub_10000C958(0, v8, 0);
    v10 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v38 = *(_QWORD *)(v3 + 72);
    v39 = v3;
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v11 = v40;
      v12 = v37(v5, v10, v40);
      v41 = 2314;
      v42 = 0xE200000000000000;
      v13._countAndFlagsBits = URL.path.getter(v12);
      object = v13._object;
      String.append(_:)(v13);
      swift_bridgeObjectRelease(object);
      v16 = v41;
      v15 = v42;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v11);
      v17 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_10000C958(0, v17[2] + 1, 1);
        v17 = v43;
      }
      v19 = v17[2];
      v18 = v17[3];
      if (v19 >= v18 >> 1)
      {
        sub_10000C958(v18 > 1, v19 + 1, 1);
        v17 = v43;
      }
      v17[2] = v19 + 1;
      v20 = &v17[2 * v19];
      v20[4] = v16;
      v20[5] = v15;
      v10 += v38;
      --v8;
    }
    while (v8);
    v6 = v34;
  }
  else
  {
    v21 = v6;
    v17 = _swiftEmptyArrayStorage;
  }
  v41 = (uint64_t)v17;
  v22 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v23 = sub_100013C48();
  v24 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v22, v23);
  v26 = v25;
  swift_bridgeObjectRelease(v17);
  v27 = (_QWORD *)v36;
  *(_QWORD *)(v36 + 56) = &type metadata for String;
  v28 = sub_100026838();
  v27[8] = v28;
  v27[4] = v24;
  v27[5] = v26;
  v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:type:_:)("gathering approvals for: %{public}s", 35, 2, &_mh_execute_header, v6, v29, v27);

  swift_bridgeObjectRelease(v27);
  v30 = sub_10002687C();
  v31 = (void *)static OS_os_log.default.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  os_log(_:dso:log:type:_:)("SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient cannot gather approvals from user", 96, 2, &_mh_execute_header, v31, v32, _swiftEmptyArrayStorage);

}

void sub_100079E7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;

  v34 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v7 = swift_allocObject(v6, 72, 7);
  v8 = (_QWORD *)v7;
  *(_OWORD *)(v7 + 16) = xmmword_10010F050;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v30[0] = v7;
    v30[1] = v1;
    v37 = _swiftEmptyArrayStorage;
    sub_10000C958(0, v9, 0);
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v12 = *(_QWORD *)(v3 + 72);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v12;
    v33 = v3;
    do
    {
      v13 = v34;
      v14 = v31(v5, v11, v34);
      v35 = 2314;
      v36 = 0xE200000000000000;
      v15._countAndFlagsBits = URL.path.getter(v14);
      object = v15._object;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(object);
      v18 = v35;
      v17 = v36;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v13);
      v10 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
      {
        sub_10000C958(0, v10[2] + 1, 1);
        v10 = v37;
      }
      v20 = v10[2];
      v19 = v10[3];
      if (v20 >= v19 >> 1)
      {
        sub_10000C958(v19 > 1, v20 + 1, 1);
        v10 = v37;
      }
      v10[2] = v20 + 1;
      v21 = &v10[2 * v20];
      v21[4] = v18;
      v21[5] = v17;
      v3 = v33;
      v11 += v32;
      --v9;
    }
    while (v9);
    v8 = (_QWORD *)v30[0];
  }
  v35 = (uint64_t)v10;
  v22 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v23 = sub_100013C48();
  v24 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v22, v23);
  v26 = v25;
  swift_bridgeObjectRelease(v10);
  v8[7] = &type metadata for String;
  v8[8] = sub_100026838();
  v8[4] = v24;
  v8[5] = v26;
  v27 = sub_10002687C();
  v28 = (void *)static OS_os_log.default.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:type:_:)("SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient cannot trigger rebuild for: %{public}s", 101, 2, &_mh_execute_header, v28, v29, v8);
  swift_bridgeObjectRelease(v8);

}

void sub_10007A0F0(uint64_t a1)
{
  sub_10007B8D0(a1, "SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient cannot update last seen times for: %{public}s", 108);
}

uint64_t sub_10007A110()
{
  return sub_10007B540("SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient returning a nil UAKL hash", 88);
}

uint64_t sub_10007A130(uint64_t a1)
{
  return sub_10007B5DC(a1, "SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient cannot find bundled kexts for: %{public}s", 104);
}

void sub_10007A150()
{
  sub_10007B748("SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient cannot trigger panic medic", 89);
}

void sub_10007A170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10007B7DC(a1, a2, a3, a4, "SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient cannot notify load of %{public}s", 95);
}

void sub_10007A190(uint64_t a1)
{
  sub_10007B8D0(a1, "SPKernelExtensionPolicy is unavailable, NullSystemPolicyClient cannot notify unsupported kexts at: %{public}s", 109);
}

_QWORD *sub_10007A1B4()
{
  uint64_t v0;
  _QWORD *result;

  result = (_QWORD *)swift_allocObject(v0, 40, 7);
  result[3] = 0;
  result[4] = 0;
  result[2] = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10007A1E4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 16));
}

uint64_t sub_10007A1F0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t sub_10007A218()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t sub_10007A240()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t sub_10007A268()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t sub_10007A290()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t sub_10007A2B8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t sub_10007A2E0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t sub_10007A308()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t sub_10007A330()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

uint64_t sub_10007A358(uint64_t a1)
{
  return sub_10007AA08(a1, type metadata accessor for NullSystemPolicyClient, (uint64_t)&off_100149A88);
}

uint64_t sub_10007A36C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_10015A098);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t (*sub_10007A3D8(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10007A414(uint64_t a1)
{
  return sub_10007A434(a1, "SPKernelExtensionPolicy is unavailable, AllowAllSystemPolicyClient returning approvals for:", 91);
}

uint64_t sub_10007A434(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  char *v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  const char *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;

  v6 = sub_100005C88(&qword_10015A088);
  v63 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  __chkstk_darwin(v6);
  v59 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v65 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)*sub_1000D2F94();
  v12 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v13 = swift_allocObject(v12, 72, 7);
  v56 = a1;
  v57 = (_QWORD *)v13;
  *(_OWORD *)(v13 + 16) = xmmword_10010F050;
  v14 = *(_QWORD *)(a1 + 16);
  v66 = v9;
  if (v14)
  {
    v54 = a2;
    v55 = a3;
    v69 = _swiftEmptyArrayStorage;
    v53 = v11;
    v15 = v11;
    sub_10000C958(0, v14, 0);
    v16 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v17 = *(_QWORD *)(v9 + 72);
    v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v61 = v17;
    v18 = v14;
    v62 = v8;
    do
    {
      v19 = v65;
      v20 = v60(v65, v16, v8);
      v67 = 2314;
      v68 = 0xE200000000000000;
      v21._countAndFlagsBits = URL.path.getter(v20);
      object = v21._object;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(object);
      v23 = v67;
      v24 = v68;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v19, v8);
      v25 = v69;
      if ((swift_isUniquelyReferenced_nonNull_native(v69) & 1) == 0)
      {
        sub_10000C958(0, v25[2] + 1, 1);
        v25 = v69;
      }
      v27 = v25[2];
      v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        sub_10000C958(v26 > 1, v27 + 1, 1);
        v25 = v69;
      }
      v25[2] = v27 + 1;
      v28 = &v25[2 * v27];
      v28[4] = v23;
      v28[5] = v24;
      v8 = v62;
      v16 += v61;
      --v18;
    }
    while (v18);
    v9 = v66;
    v29 = v54;
    a3 = v55;
    v11 = v53;
  }
  else
  {
    v30 = v11;
    v25 = _swiftEmptyArrayStorage;
    v29 = a2;
  }
  v67 = (uint64_t)v25;
  v31 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v32 = sub_100013C48();
  v33 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v31, v32);
  v35 = v34;
  swift_bridgeObjectRelease(v25);
  v36 = v57;
  v57[7] = &type metadata for String;
  v37 = sub_100026838();
  v36[8] = v37;
  v36[4] = v33;
  v36[5] = v35;
  v38 = static os_log_type_t.default.getter(v37);
  os_log(_:dso:log:type:_:)(v29, a3, 2, &_mh_execute_header, v11, v38, v36);

  swift_bridgeObjectRelease(v36);
  v39 = _swiftEmptyArrayStorage;
  if (v14)
  {
    v67 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10007C714(0, v14, 0);
    v40 = v56 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v41 = *(_QWORD *)(v9 + 72);
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v43 = (uint64_t)v59;
    do
    {
      v44 = v65;
      v42(v65, v40, v8);
      v45 = *(int *)(v64 + 48);
      v42((char *)v43, (uint64_t)v44, v8);
      *(_BYTE *)(v43 + v45) = 1;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v44, v8);
      v39 = (_QWORD *)v67;
      if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
      {
        sub_10007C714(0, v39[2] + 1, 1);
        v43 = (uint64_t)v59;
        v39 = (_QWORD *)v67;
      }
      v47 = v39[2];
      v46 = v39[3];
      if (v47 >= v46 >> 1)
      {
        sub_10007C714(v46 > 1, v47 + 1, 1);
        v43 = (uint64_t)v59;
        v39 = (_QWORD *)v67;
      }
      v39[2] = v47 + 1;
      sub_10007C730(v43, (uint64_t)v39+ ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(_QWORD *)(v63 + 72) * v47);
      v40 += v41;
      --v14;
      v9 = v66;
    }
    while (v14);
  }
  v48 = v39[2];
  if (v48)
  {
    sub_100005C88(&qword_10015A090);
    v49 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v48);
  }
  else
  {
    v49 = &_swiftEmptyDictionarySingleton;
  }
  v67 = (uint64_t)v49;
  swift_bridgeObjectRetain(v39);
  v50 = v58;
  sub_10007BCD4(v51, 1, &v67);
  if (v50)
  {
    result = swift_unexpectedError(v50, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v39);
    return v67;
  }
  return result;
}

uint64_t sub_10007A8C0(uint64_t a1)
{
  return sub_10007AF88(a1, 0xD000000000000064, 0x8000000100124C30);
}

uint64_t sub_10007A8EC(uint64_t a1, uint64_t a2)
{
  return sub_10007B28C(a1, a2, 97, 0xD00000000000005FLL, (void *)0x8000000100124CA0);
}

void sub_10007A91C(uint64_t a1)
{
  sub_10007B8D0(a1, "SPKernelExtensionPolicy is unavailable, AllowAllSystemPolicyClient cannot update last seen times for: %{public}s", 112);
}

uint64_t sub_10007A93C()
{
  return sub_10007B540("SPKernelExtensionPolicy is unavailable, AllowAllSystemPolicyClient returning a nil UAKL hash", 92);
}

uint64_t sub_10007A95C(uint64_t a1)
{
  return sub_10007B5DC(a1, "SPKernelExtensionPolicy is unavailable, AllowAllSystemPolicyClient cannot find bundled kexts for: %{public}s", 108);
}

void sub_10007A97C()
{
  sub_10007B748("SPKernelExtensionPolicy is unavailable, AllowAllSystemPolicyClient cannot trigger panic medic", 93);
}

void sub_10007A99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10007B7DC(a1, a2, a3, a4, "SPKernelExtensionPolicy is unavailable, AllowAllSystemPolicyClient cannot notify load of %{public}s", 99);
}

void sub_10007A9BC(uint64_t a1)
{
  sub_10007B8D0(a1, "SPKernelExtensionPolicy is unavailable, AllowAllSystemPolicyClient cannot notify unsupported kexts at: %{public}s", 113);
}

uint64_t sub_10007A9DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_10007AA08(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];

  v9[3] = a2();
  v9[4] = a3;
  v9[0] = v3;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v6);
  swift_retain(v3);
  return sub_10007A36C(v9, v6, v7);
}

uint64_t sub_10007AA74()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 24, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t sub_10007AABC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 24, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_10007AB0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 40;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100019E1C(v3, a1, &qword_10015A0A0);
}

uint64_t sub_10007AB5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 40;
  swift_beginAccess(v3, v5, 33, 0);
  sub_10007C7B8(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*sub_10007ABAC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 40, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10007ABE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  int64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t result;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;

  v3 = v2;
  v4 = v1;
  v49 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)*sub_1000D2F94();
  v10 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v45 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v45 + 16) = xmmword_10010F050;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v43 = v2;
    v44 = v1;
    v52 = _swiftEmptyArrayStorage;
    v41 = v9;
    v12 = v9;
    sub_10000C958(0, v11, 0);
    v13 = *(unsigned __int8 *)(v6 + 80);
    v42 = a1;
    v14 = a1 + ((v13 + 32) & ~v13);
    v47 = *(_QWORD *)(v6 + 72);
    v48 = v6;
    v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    do
    {
      v15 = v49;
      v16 = v46(v8, v14, v49);
      v50 = 2314;
      v51 = 0xE200000000000000;
      v17._countAndFlagsBits = URL.path.getter(v16);
      object = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      v20 = v50;
      v19 = v51;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v15);
      v21 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
      {
        sub_10000C958(0, v21[2] + 1, 1);
        v21 = v52;
      }
      v23 = v21[2];
      v22 = v21[3];
      if (v23 >= v22 >> 1)
      {
        sub_10000C958(v22 > 1, v23 + 1, 1);
        v21 = v52;
      }
      v21[2] = v23 + 1;
      v24 = &v21[2 * v23];
      v24[4] = v20;
      v24[5] = v19;
      v14 += v47;
      --v11;
    }
    while (v11);
    v3 = v43;
    v4 = v44;
    v9 = v41;
    a1 = v42;
  }
  else
  {
    v25 = v9;
    v21 = _swiftEmptyArrayStorage;
  }
  v50 = (uint64_t)v21;
  v26 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v27 = sub_100013C48();
  v28 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v26, v27);
  v30 = v29;
  swift_bridgeObjectRelease(v21);
  v31 = (_QWORD *)v45;
  *(_QWORD *)(v45 + 56) = &type metadata for String;
  v32 = sub_100026838();
  v31[8] = v32;
  v31[4] = v28;
  v31[5] = v30;
  v33 = static os_log_type_t.default.getter(v32);
  os_log(_:dso:log:type:_:)("SPKernelExtensionPolicy is unavailable, AllowARVOnlySystemPolicyClient returning approvals for all kexts in the ARV: %{public}s", 127, 2, &_mh_execute_header, v9, v33, v31);

  swift_bridgeObjectRelease(v31);
  swift_retain(v4);
  v34 = sub_10007C97C(a1, v4);
  result = swift_release(v4);
  if (!v3)
  {
    swift_retain(v4);
    v36 = sub_10007CC30((uint64_t)v34, v4);
    swift_bridgeObjectRelease(v34);
    swift_release(v4);
    v37 = v36[2];
    if (v37)
    {
      sub_100005C88(&qword_10015A090);
      v38 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v37);
    }
    else
    {
      v38 = &_swiftEmptyDictionarySingleton;
    }
    v50 = (uint64_t)v38;
    swift_bridgeObjectRetain(v36);
    sub_10007BCD4(v39, 1, &v50);
    swift_bridgeObjectRelease(v36);
    return v50;
  }
  return result;
}

uint64_t sub_10007AF5C(uint64_t a1)
{
  return sub_10007AF88(a1, 0xD000000000000068, 0x8000000100125020);
}

uint64_t sub_10007AF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;

  v45 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)*sub_1000D2F94();
  v10 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v11 = swift_allocObject(v10, 72, 7);
  v12 = (_QWORD *)v11;
  *(_OWORD *)(v11 + 16) = xmmword_10010F050;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v38 = (_QWORD *)v11;
    v40 = a2;
    v41 = a3;
    v48 = _swiftEmptyArrayStorage;
    v39 = v9;
    v14 = v9;
    sub_10000C958(0, v13, 0);
    v15 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v43 = *(_QWORD *)(v6 + 72);
    v44 = v6;
    v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    do
    {
      v16 = v45;
      v17 = v42(v8, v15, v45);
      v46 = 2314;
      v47 = 0xE200000000000000;
      v18._countAndFlagsBits = URL.path.getter(v17);
      object = v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(object);
      v21 = v46;
      v20 = v47;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v16);
      v22 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
      {
        sub_10000C958(0, v22[2] + 1, 1);
        v22 = v48;
      }
      v24 = v22[2];
      v23 = v22[3];
      if (v24 >= v23 >> 1)
      {
        sub_10000C958(v23 > 1, v24 + 1, 1);
        v22 = v48;
      }
      v22[2] = v24 + 1;
      v25 = &v22[2 * v24];
      v25[4] = v21;
      v25[5] = v20;
      v15 += v43;
      --v13;
    }
    while (v13);
    a2 = v40;
    a3 = v41;
    v12 = v38;
    v9 = v39;
  }
  else
  {
    v26 = v9;
    v22 = _swiftEmptyArrayStorage;
  }
  v46 = (uint64_t)v22;
  v27 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v28 = sub_100013C48();
  v29 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v27, v28);
  v31 = v30;
  swift_bridgeObjectRelease(v22);
  v12[7] = &type metadata for String;
  v32 = sub_100026838();
  v12[8] = v32;
  v12[4] = v29;
  v12[5] = v31;
  v33 = static os_log_type_t.default.getter(v32);
  os_log(_:dso:log:type:_:)("gathering approvals for: %{public}s", 35, 2, &_mh_execute_header, v9, v33, v12);

  swift_bridgeObjectRelease(v12);
  v34 = sub_1000122F8();
  v35 = swift_allocError(&type metadata for KMError, v34, 0, 0);
  *(_QWORD *)v36 = a2;
  *(_QWORD *)(v36 + 8) = a3;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(_QWORD *)(v36 + 64) = 0;
  *(_BYTE *)(v36 + 72) = 28;
  return swift_willThrow(v35);
}

uint64_t sub_10007B25C(uint64_t a1, uint64_t a2)
{
  return sub_10007B28C(a1, a2, 101, 0xD000000000000063, (void *)0x8000000100125090);
}

uint64_t sub_10007B28C(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;

  v40 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = 0;
  v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(a3);
  v12._countAndFlagsBits = a4;
  v12._object = a5;
  String.append(_:)(v12);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    v45 = _swiftEmptyArrayStorage;
    sub_10000C958(0, v13, 0);
    v15 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v38 = *(_QWORD *)(v9 + 72);
    v39 = v9;
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
    do
    {
      v16 = v40;
      v17 = v37(v11, v15, v40);
      v41 = 2314;
      v42 = 0xE200000000000000;
      v18._countAndFlagsBits = URL.path.getter(v17);
      object = v18._object;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(object);
      v21 = v41;
      v20 = v42;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v16);
      v14 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
      {
        sub_10000C958(0, v14[2] + 1, 1);
        v14 = v45;
      }
      v23 = v14[2];
      v22 = v14[3];
      if (v23 >= v22 >> 1)
      {
        sub_10000C958(v22 > 1, v23 + 1, 1);
        v14 = v45;
      }
      v14[2] = v23 + 1;
      v24 = &v14[2 * v23];
      v24[4] = v21;
      v24[5] = v20;
      v15 += v38;
      --v13;
    }
    while (v13);
  }
  v41 = (uint64_t)v14;
  v25 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v26 = sub_100013C48();
  v27 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v25, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v14);
  v30._countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v29);
  v31 = v43;
  v32 = v44;
  v33 = sub_1000122F8();
  v34 = swift_allocError(&type metadata for KMError, v33, 0, 0);
  *(_QWORD *)v35 = v31;
  *(_QWORD *)(v35 + 8) = v32;
  *(_OWORD *)(v35 + 16) = 0u;
  *(_OWORD *)(v35 + 32) = 0u;
  *(_OWORD *)(v35 + 48) = 0u;
  *(_QWORD *)(v35 + 64) = 0;
  *(_BYTE *)(v35 + 72) = 28;
  return swift_willThrow(v34);
}

void sub_10007B500(uint64_t a1)
{
  sub_10007B8D0(a1, "SPKernelExtensionPolicy is unavailable, AllowARVOnlySystemPolicyClient cannot update last seen times for: %{public}s", 116);
}

uint64_t sub_10007B520()
{
  return sub_10007B540("SPKernelExtensionPolicy is unavailable, AllowARVOnlySystemPolicyClient returning a nil UAKL hash", 96);
}

uint64_t sub_10007B540(const char *a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = sub_10002687C();
  v5 = (void *)static OS_os_log.default.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)(a1, a2, 2, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);

  return 0;
}

uint64_t sub_10007B5BC(uint64_t a1)
{
  return sub_10007B5DC(a1, "SPKernelExtensionPolicy is unavailable, AllowARVOnlySystemPolicyClient cannot find bundled kexts for: %{public}s", 112);
}

uint64_t sub_10007B5DC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10010F050;
  v8 = URL.path.getter(v7);
  v10 = v9;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_100026838();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v10;
  v11 = sub_10002687C();
  v12 = (void *)static OS_os_log.default.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)(a2, a3, 2, &_mh_execute_header, v12, v13, v7);
  swift_bridgeObjectRelease(v7);

  v14 = sub_100005C88(&qword_10015BB40);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(v14, v18 + *(_QWORD *)(v16 + 72), v17 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_10010F050;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v19 + v18, a1, v15);
  return v19;
}

void sub_10007B728()
{
  sub_10007B748("SPKernelExtensionPolicy is unavailable, AllowARVOnlySystemPolicyClient cannot trigger panic medic", 97);
}

void sub_10007B748(const char *a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = sub_10002687C();
  v5 = (void *)static OS_os_log.default.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)(a1, a2, 2, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);

}

void sub_10007B7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10007B7DC(a1, a2, a3, a4, "SPKernelExtensionPolicy is unavailable, AllowARVOnlySystemPolicyClient cannot notify load of %{public}s", 103);
}

void sub_10007B7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v10 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10010F050;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_100026838();
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  sub_10002687C();
  swift_bridgeObjectRetain(a2);
  v13 = (void *)static OS_os_log.default.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)(a5, a6, 2, &_mh_execute_header, v13, v14, v11);
  swift_bridgeObjectRelease(v11);

}

void sub_10007B8B0(uint64_t a1)
{
  sub_10007B8D0(a1, "SPKernelExtensionPolicy is unavailable, AllowARVOnlySystemPolicyClient cannot notify unsupported kexts at: %{public}s", 117);
}

void sub_10007B8D0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  void *object;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  const char *v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;

  v34 = a2;
  v38 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v33 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v33 + 16) = xmmword_10010F050;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v32[0] = a3;
    v32[1] = v3;
    v41 = _swiftEmptyArrayStorage;
    sub_10000C958(0, v10, 0);
    v12 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v13 = *(_QWORD *)(v6 + 72);
    v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v36 = v13;
    v37 = v6;
    do
    {
      v14 = v38;
      v15 = v35(v8, v12, v38);
      v39 = 2314;
      v40 = 0xE200000000000000;
      v16._countAndFlagsBits = URL.path.getter(v15);
      object = v16._object;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(object);
      v19 = v39;
      v18 = v40;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
      v11 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
      {
        sub_10000C958(0, v11[2] + 1, 1);
        v11 = v41;
      }
      v21 = v11[2];
      v20 = v11[3];
      if (v21 >= v20 >> 1)
      {
        sub_10000C958(v20 > 1, v21 + 1, 1);
        v11 = v41;
      }
      v11[2] = v21 + 1;
      v22 = &v11[2 * v21];
      v22[4] = v19;
      v22[5] = v18;
      v6 = v37;
      v12 += v36;
      --v10;
    }
    while (v10);
    a3 = v32[0];
  }
  v39 = (uint64_t)v11;
  v23 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v24 = sub_100013C48();
  v25 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v23, v24);
  v27 = v26;
  swift_bridgeObjectRelease(v11);
  v28 = (_QWORD *)v33;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v28[8] = sub_100026838();
  v28[4] = v25;
  v28[5] = v27;
  v29 = sub_10002687C();
  v30 = (void *)static OS_os_log.default.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  os_log(_:dso:log:type:_:)(v34, a3, 2, &_mh_execute_header, v30, v31, v28);
  swift_bridgeObjectRelease(v28);

}

uint64_t sub_10007BB4C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  sub_10007CE9C(v0 + 40);
  return swift_deallocClassInstance(v0, 80, 7);
}

double sub_10007BB80()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = swift_allocObject(v0, 80, 7);
  *(_QWORD *)(v1 + 16) = &_swiftEmptyArrayStorage;
  result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_QWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_10007BBC0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t sub_10007BBE8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t sub_10007BC10()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 200))();
}

uint64_t sub_10007BC38()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))();
}

uint64_t sub_10007BC60()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

uint64_t sub_10007BC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015A098);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t sub_10007BCD4(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  char v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(unint64_t, char *, uint64_t);
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005C88(&qword_10015A088);
  v12 = __chkstk_darwin(v11);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    return swift_bridgeObjectRelease(a1);
  LODWORD(v62) = a2;
  v59 = v3;
  v17 = *(int *)(v12 + 48);
  v58 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = a1 + v58;
  v64 = *(_QWORD *)(v13 + 72);
  v61 = a1;
  swift_bridgeObjectRetain(a1);
  sub_100019E1C(v18, (uint64_t)v15, &qword_10015A088);
  v60 = v8;
  v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v65 = v7;
  v66 = v19;
  v19((unint64_t)v10, v15, v7);
  v63 = v17;
  v20 = v15[v17];
  v21 = (_QWORD *)*a3;
  v23 = sub_100054924((uint64_t)v10);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_24;
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v62 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_10007C164();
      if ((v27 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v34 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v35 = v34[6];
    v62 = *(_QWORD *)(v60 + 72);
    v36 = v65;
    v66(v35 + v62 * v23, v10, v65);
    *(_BYTE *)(v34[7] + v23) = v20;
    v37 = v34[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v34[2] = v39;
    v40 = v16 - 1;
    if (v16 == 1)
      return swift_bridgeObjectRelease_n(v61, 2);
    v41 = v61 + v64 + v58;
    while (1)
    {
      sub_100019E1C(v41, (uint64_t)v15, &qword_10015A088);
      v66((unint64_t)v10, v15, v36);
      v42 = v15[v63];
      v43 = (_QWORD *)*a3;
      v45 = sub_100054924((uint64_t)v10);
      v46 = v43[2];
      v47 = (v44 & 1) == 0;
      v48 = v46 + v47;
      if (__OFADD__(v46, v47))
        break;
      v49 = v44;
      if (v43[3] < v48)
      {
        sub_10007C384(v48, 1);
        v50 = sub_100054924((uint64_t)v10);
        if ((v49 & 1) != (v51 & 1))
          goto LABEL_26;
        v45 = v50;
      }
      if ((v49 & 1) != 0)
        goto LABEL_10;
      v52 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v45 >> 6) + 64) |= 1 << v45;
      v36 = v65;
      v66(v52[6] + v62 * v45, v10, v65);
      *(_BYTE *)(v52[7] + v45) = v42;
      v53 = v52[2];
      v38 = __OFADD__(v53, 1);
      v54 = v53 + 1;
      if (v38)
        goto LABEL_25;
      v52[2] = v54;
      v41 += v64;
      if (!--v40)
        return swift_bridgeObjectRelease_n(v61, 2);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_10007C384(v26, v62 & 1);
  v28 = sub_100054924((uint64_t)v10);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    if ((v27 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v31 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v31);
    v69 = v31;
    swift_errorRetain(v31);
    v32 = sub_100005C88(&qword_10015AB50);
    if ((swift_dynamicCast(v32, &v69, v32, &type metadata for _MergeError, 0) & 1) == 0)
    {
      v33 = v61;
      swift_bridgeObjectRelease(v61);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v10, v65);
      swift_bridgeObjectRelease(v33);
      return swift_errorRelease(v69);
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v65);
  __break(1u);
LABEL_27:
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v55._object = (void *)0x8000000100122710;
  v55._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v55);
  _print_unlocked<A, B>(_:_:)(v10, &v67, v65, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v56._countAndFlagsBits = 39;
  v56._object = (void *)0xE100000000000000;
  String.append(_:)(v56);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v67, v68, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

void *sub_10007C164()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005C88(&qword_10015A090);
  v23 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v16) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_26;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10007C384(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100005C88(&qword_10015A090);
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    v41 = v10;
LABEL_44:
    result = swift_release(v41);
    *v3 = v12;
    return result;
  }
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v47 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v45 = v3;
  v46 = (unint64_t)(v13 + 63) >> 6;
  v17 = a2;
  v18 = v11 + 64;
  v49 = v10;
  result = swift_retain(v10);
  v20 = 0;
  HIDWORD(v44) = v17;
  v21 = 16;
  if ((v17 & 1) != 0)
    v21 = 32;
  v48 = v21;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_26;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v25 >= v46)
    {
      v42 = v49;
      swift_release(v49);
      v3 = v45;
      v26 = v47;
      if ((v44 & 0x100000000) != 0)
      {
LABEL_39:
        v43 = 1 << *(_BYTE *)(v42 + 32);
        if (v43 >= 64)
          bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v26 = -1 << v43;
        *(_QWORD *)(v42 + 16) = 0;
      }
LABEL_43:
      v41 = v42;
      goto LABEL_44;
    }
    v26 = v47;
    v27 = v47[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v46)
        goto LABEL_36;
      v27 = v47[v20];
      if (!v27)
        break;
    }
LABEL_25:
    v16 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_26:
    v29 = v49;
    v30 = *(_QWORD *)(v7 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + v48))(v9, *(_QWORD *)(v49 + 48) + v30 * v24, v6);
    v31 = *(_BYTE *)(*(_QWORD *)(v29 + 56) + v24);
    v32 = *(_QWORD *)(v12 + 40);
    v33 = sub_10007CEFC(&qword_100157E90, (uint64_t)&protocol conformance descriptor for URL);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v6, v33);
    v34 = -1 << *(_BYTE *)(v12 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v30 * v22, v9, v6);
    *(_BYTE *)(*(_QWORD *)(v12 + 56) + v22) = v31;
    ++*(_QWORD *)(v12 + 16);
  }
  v28 = v25 + 2;
  if (v28 >= v46)
  {
LABEL_36:
    v42 = v49;
    swift_release(v49);
    v3 = v45;
    if ((v44 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v27 = v47[v28];
  if (v27)
  {
    v20 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v20 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v20 >= v46)
      goto LABEL_36;
    v27 = v47[v20];
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

size_t sub_10007C714(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_10007C800(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10007C730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015A088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NullSystemPolicyClient()
{
  return objc_opt_self(_TtC10driverkitd22NullSystemPolicyClient);
}

uint64_t type metadata accessor for AllowAllSystemPolicyClient()
{
  return objc_opt_self(_TtC10driverkitd26AllowAllSystemPolicyClient);
}

uint64_t sub_10007C7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015A0A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

size_t sub_10007C800(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005C88(&qword_10015A3E0);
  v11 = *(_QWORD *)(sub_100005C88(&qword_10015A088) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = sub_100005C88(&qword_10015A088);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20);
  }
  swift_release(a4);
  return (size_t)v15;
}

char *sub_10007C97C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  unint64_t v36;
  void (*v37)(_QWORD *__return_ptr, size_t);
  char *v38;
  int64_t v39;
  char *v40;
  _QWORD v41[5];
  _QWORD v42[5];
  char *v43;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v40 = (char *)v34 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = (char *)_swiftEmptyArrayStorage;
  if (v12)
  {
    v43 = (char *)_swiftEmptyArrayStorage;
    v14 = sub_10003DEB4(0, v12, 0);
    v36 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v15 = a1 + v36;
    v37 = *(void (**)(_QWORD *__return_ptr, size_t))(*(_QWORD *)a2 + 128);
    v38 = v10;
    v16 = *(_QWORD *)(v7 + 72);
    v34[1] = a2;
    v35 = v16;
    while (1)
    {
      v37(v42, v14);
      v39 = v12;
      if (!v42[3])
        break;
      sub_100005C44((uint64_t)v42, (uint64_t)v41);
      sub_10007CE9C((uint64_t)v42);
      v17 = v3;
      v18 = v41[4];
      v19 = (char *)sub_100004DE4(v41, v41[3]);
      v20 = URL.path.getter(v19);
      v22 = v21;
      v13 = v19;
      v23 = (*(uint64_t (**)(uint64_t))(v18 + 152))(v20);
      v3 = v17;
      if (v17)
      {
        swift_bridgeObjectRelease(v22);
        sub_100005D08(v41);
        swift_release(v43);
        return v13;
      }
      v25 = v23;
      v26 = v24;
      swift_bridgeObjectRelease(v22);
      sub_100005D08(v41);
      v10 = v38;
      v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v38, v15, v6);
      if (!v26)
        goto LABEL_8;
LABEL_9:
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      URL.init(fileURLWithPath:)(v25, v26);
      swift_bridgeObjectRelease(v26);
      v13 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_10003DEB4(0, *((_QWORD *)v13 + 2) + 1, 1);
        v13 = v43;
      }
      v29 = v39;
      v31 = *((_QWORD *)v13 + 2);
      v30 = *((_QWORD *)v13 + 3);
      if (v31 >= v30 >> 1)
      {
        sub_10003DEB4(v30 > 1, v31 + 1, 1);
        v13 = v43;
      }
      *((_QWORD *)v13 + 2) = v31 + 1;
      v32 = v35;
      v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(&v13[v36 + v31 * v35], v40, v6);
      v43 = v13;
      v15 += v32;
      v12 = v29 - 1;
      v10 = v38;
      if (!v12)
        return v13;
    }
    sub_10007CE9C((uint64_t)v42);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v15, v6);
LABEL_8:
    v25 = URL.path.getter(v27);
    v26 = v28;
    goto LABEL_9;
  }
  return v13;
}

_QWORD *sub_10007CC30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *__return_ptr);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *__return_ptr);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  _QWORD *v38;

  v5 = sub_100005C88(&qword_10015A088);
  v31 = *(_QWORD *)(v5 - 8);
  v32 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v33 = v2;
    v38 = _swiftEmptyArrayStorage;
    sub_10007C714(0, v8, 0);
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v13 = *(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a2 + 128);
    v29 = v10;
    v30 = v13;
    v27 = *(_QWORD *)(v11 + 72);
    v28 = v11;
    do
    {
      v14 = URL.path.getter(v10);
      v16 = v15;
      v30(v37);
      if (v37[3])
      {
        sub_100005C44((uint64_t)v37, (uint64_t)v34);
        sub_10007CE9C((uint64_t)v37);
        v17 = v35;
        v18 = v36;
        v9 = sub_100004DE4(v34, v35);
        v19 = v33;
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 224))(v14, v16, v17, v18);
        if (v19)
        {
          swift_bridgeObjectRelease(v16);
          sub_100005D08(v34);
          swift_release(v38);
          return v9;
        }
        v21 = v20;
        v33 = 0;
        swift_bridgeObjectRelease(v16);
        sub_100005D08(v34);
      }
      else
      {
        swift_bridgeObjectRelease(v16);
        sub_10007CE9C((uint64_t)v37);
        v21 = 0;
      }
      v22 = *(int *)(v32 + 48);
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v7, v12, v29);
      v7[v22] = v21 & 1;
      v9 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
      {
        sub_10007C714(0, v9[2] + 1, 1);
        v9 = v38;
      }
      v24 = v9[2];
      v23 = v9[3];
      if (v24 >= v23 >> 1)
      {
        sub_10007C714(v23 > 1, v24 + 1, 1);
        v9 = v38;
      }
      v9[2] = v24 + 1;
      v10 = sub_10007C730((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v24);
      v12 += v27;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_10007CE9C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005C88(&qword_10015A0A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AllowARVOnlySystemPolicyClient()
{
  return objc_opt_self(_TtC10driverkitd30AllowARVOnlySystemPolicyClient);
}

uint64_t sub_10007CEFC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007CF3C()
{
  return sub_10007A268();
}

uint64_t sub_10007CF54()
{
  return sub_10007A218();
}

uint64_t sub_10007CF68()
{
  return sub_10007A240();
}

uint64_t sub_10007CF7C()
{
  return sub_10007A290();
}

uint64_t sub_10007CF90()
{
  return sub_10007A2E0();
}

uint64_t sub_10007CFA4()
{
  return sub_100078208();
}

uint64_t sub_10007CFB8()
{
  return sub_10007A330();
}

uint64_t sub_10007CFD4()
{
  return sub_10007A2B8();
}

uint64_t sub_10007CFE8()
{
  return sub_10007A308();
}

unint64_t sub_10007CFFC()
{
  return 0xD000000000000011;
}

uint64_t sub_10007D018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_10007DD28(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_10007D044(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007FE78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007D06C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007FE78();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10007D094@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10007DDAC(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10007D0BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  Swift::String v65;
  int64_t v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  Swift::String v79;
  void *object;
  Swift::String v81;
  __int128 v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  _BYTE v115[80];
  __int128 v116;
  uint64_t v117;
  _QWORD v118[3];
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6 = objc_msgSend(v5, "executablePath");

  if (!v6)
  {
    v44 = sub_1000122F8();
    v45 = swift_allocError(&type metadata for KMError, v44, 0, 0);
    *(_QWORD *)v46 = 0xD000000000000026;
    *(_QWORD *)(v46 + 8) = 0x80000001001254B0;
LABEL_17:
    *(_OWORD *)(v46 + 16) = 0u;
    *(_OWORD *)(v46 + 32) = 0u;
    *(_OWORD *)(v46 + 48) = 0u;
    *(_QWORD *)(v46 + 64) = 0;
    *(_BYTE *)(v46 + 72) = 33;
    return swift_willThrow(v45);
  }
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = a1[3];
  v11 = a1[4];
  sub_100004DE4(a1, v10);
  sub_10010731C(v10, v11);
  v12 = *((_QWORD *)&v100 + 1);
  v13 = v101;
  sub_100004DE4(&v99, *((uint64_t *)&v100 + 1));
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 112))(&v116, v7, v9, 1, v12, v13);
  swift_bridgeObjectRelease(v9);
  if (!v117)
  {
    sub_1000124F8((uint64_t)&v116, &qword_100158930);
    sub_100005D08(&v99);
    v47 = sub_1000122F8();
    v45 = swift_allocError(&type metadata for KMError, v47, 0, 0);
    *(_QWORD *)v46 = 0xD00000000000002ALL;
    *(_QWORD *)(v46 + 8) = 0x80000001001254E0;
    goto LABEL_17;
  }
  v121 = v2;
  v96 = a2;
  sub_100004E2C(&v116, (uint64_t)v118);
  sub_100005D08(&v99);
  v14 = a1[3];
  v15 = a1[4];
  sub_100004DE4(a1, v14);
  sub_100071700(v14, v15);
  v16 = *((_QWORD *)&v100 + 1);
  v17 = v101;
  sub_100004DE4(&v99, *((uint64_t *)&v100 + 1));
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 192))(v16, v17);
  v20 = v19;
  v22 = v21;
  sub_100005D08(&v99);
  v23 = a1[3];
  v24 = a1[4];
  sub_100004DE4(a1, v23);
  sub_100071700(v23, v24);
  v25 = *((_QWORD *)&v100 + 1);
  v26 = v101;
  sub_100004DE4(&v99, *((uint64_t *)&v100 + 1));
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 184))(v25, v26);
  v29 = v28;
  v31 = v30;
  sub_100005D08(&v99);
  v32 = sub_100005C88(&qword_10015A3F0);
  inited = swift_initStackObject(v32, v115);
  *(_OWORD *)(inited + 16) = xmmword_10010F380;
  *(_QWORD *)(inited + 32) = v18;
  *(_QWORD *)(inited + 40) = v20;
  *(_QWORD *)(inited + 48) = v22;
  *(_QWORD *)(inited + 56) = v27;
  *(_QWORD *)(inited + 64) = v29;
  *(_QWORD *)(inited + 72) = v31;
  v34 = (char *)_swiftEmptyArrayStorage;
  if (v20 != 1)
  {
    swift_bridgeObjectRetain(v20);
    v34 = sub_10007DC10(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v36 = *((_QWORD *)v34 + 2);
    v35 = *((_QWORD *)v34 + 3);
    if (v36 >= v35 >> 1)
      v34 = sub_10007DC10((char *)(v35 > 1), v36 + 1, 1, v34);
    *((_QWORD *)v34 + 2) = v36 + 1;
    v37 = &v34[24 * v36];
    *((_QWORD *)v37 + 4) = v18;
    *((_QWORD *)v37 + 5) = v20;
    *((_QWORD *)v37 + 6) = v22;
  }
  if (v29 != 1)
  {
    swift_bridgeObjectRetain(v29);
    if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      v34 = sub_10007DC10(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
    v39 = *((_QWORD *)v34 + 2);
    v38 = *((_QWORD *)v34 + 3);
    if (v39 >= v38 >> 1)
      v34 = sub_10007DC10((char *)(v38 > 1), v39 + 1, 1, v34);
    *((_QWORD *)v34 + 2) = v39 + 1;
    v40 = &v34[24 * v39];
    *((_QWORD *)v40 + 4) = v27;
    *((_QWORD *)v40 + 5) = v29;
    *((_QWORD *)v40 + 6) = v31;
  }
  swift_release(inited);
  if (sub_1000D2610())
  {
    swift_bridgeObjectRelease(v34);
    v41 = sub_1000122F8();
    v42 = swift_allocError(&type metadata for KMError, v41, 0, 0);
    *(_QWORD *)v43 = 0xD000000000000029;
    *(_QWORD *)(v43 + 8) = 0x8000000100125560;
LABEL_34:
    *(_OWORD *)(v43 + 16) = 0u;
    *(_OWORD *)(v43 + 32) = 0u;
    *(_OWORD *)(v43 + 48) = 0u;
    *(_QWORD *)(v43 + 64) = 0;
    *(_BYTE *)(v43 + 72) = 33;
    swift_willThrow(v42);
    return sub_100005D08(v118);
  }
  v49 = *((_QWORD *)v34 + 2);
  if (!v49)
  {
LABEL_26:
    *(_QWORD *)&v99 = 0;
    *((_QWORD *)&v99 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v65._countAndFlagsBits = 0xD00000000000004ALL;
    v65._object = (void *)0x8000000100125510;
    String.append(_:)(v65);
    v66 = *((_QWORD *)v34 + 2);
    if (v66)
    {
      *(_QWORD *)&v116 = _swiftEmptyArrayStorage;
      sub_10000C958(0, v66, 0);
      v67 = (_QWORD *)v116;
      v68 = v34;
      v69 = v34 + 52;
      do
      {
        v70 = *(_QWORD *)(v69 - 20);
        v71 = *(_QWORD *)(v69 - 12);
        v72 = *(_QWORD *)(v69 - 4);
        swift_bridgeObjectRetain(v71);
        v73 = sub_1000D3FDC(v70, v71, v72);
        v75 = v74;
        swift_bridgeObjectRelease(v71);
        *(_QWORD *)&v116 = v67;
        v77 = v67[2];
        v76 = v67[3];
        if (v77 >= v76 >> 1)
        {
          sub_10000C958(v76 > 1, v77 + 1, 1);
          v67 = (_QWORD *)v116;
        }
        v69 += 24;
        v67[2] = v77 + 1;
        v78 = &v67[2 * v77];
        v78[4] = v73;
        v78[5] = v75;
        --v66;
      }
      while (v66);
      swift_bridgeObjectRelease(v68);
    }
    else
    {
      swift_bridgeObjectRelease(v34);
      v67 = _swiftEmptyArrayStorage;
    }
    v79._countAndFlagsBits = Array.description.getter(v67, &type metadata for String);
    object = v79._object;
    String.append(_:)(v79);
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(object);
    v81._countAndFlagsBits = 46;
    v81._object = (void *)0xE100000000000000;
    String.append(_:)(v81);
    v82 = v99;
    v83 = sub_1000122F8();
    v42 = swift_allocError(&type metadata for KMError, v83, 0, 0);
    *(_OWORD *)v43 = v82;
    goto LABEL_34;
  }
  swift_bridgeObjectRetain(v34);
  v95 = v34;
  v50 = v34 + 52;
  while (1)
  {
    v51 = *(_QWORD *)(v50 - 12);
    v53 = v119;
    v52 = v120;
    v97 = *(_QWORD *)(v50 - 4);
    v98 = *(_QWORD *)(v50 - 20);
    sub_100004DE4(v118, v119);
    swift_bridgeObjectRetain(v51);
    v54 = sub_10008FA90();
    v55 = *v54;
    v56 = v54[1];
    v57 = v54[2];
    v58 = v54[3];
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v58);
    v59 = v55;
    v60 = v121;
    v61 = sub_1000E1020(v59, v56, v57, v58, v98, v51, v97, v53, v52);
    if (!v60)
      break;
    swift_errorRelease(v60);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v51);
    v121 = 0;
LABEL_21:
    v50 += 24;
    if (!--v49)
    {
      v34 = v95;
      swift_bridgeObjectRelease(v95);
      goto LABEL_26;
    }
  }
  v63 = v61;
  v64 = v62;
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v56);
  swift_bridgeObjectRelease(v51);
  if (v64 >> 60 == 15)
  {
    v121 = 0;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease_n(v95, 2);
  v84 = type metadata accessor for PropertyListDecoder(0);
  v85 = swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
  v86 = PropertyListDecoder.init()(v85);
  v87 = sub_10007DED8();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v99, &type metadata for KernelManagementConfiguration, v63, v64, &type metadata for KernelManagementConfiguration, v87);
  sub_100021610(v63, v64);
  swift_release(v86);
  v88 = v112;
  *(_OWORD *)(v96 + 192) = v111;
  *(_OWORD *)(v96 + 208) = v88;
  *(_OWORD *)(v96 + 224) = v113;
  *(_QWORD *)(v96 + 240) = v114;
  v89 = v108;
  *(_OWORD *)(v96 + 128) = v107;
  *(_OWORD *)(v96 + 144) = v89;
  v90 = v110;
  *(_OWORD *)(v96 + 160) = v109;
  *(_OWORD *)(v96 + 176) = v90;
  v91 = v104;
  *(_OWORD *)(v96 + 64) = v103;
  *(_OWORD *)(v96 + 80) = v91;
  v92 = v106;
  *(_OWORD *)(v96 + 96) = v105;
  *(_OWORD *)(v96 + 112) = v92;
  v93 = v100;
  *(_OWORD *)v96 = v99;
  *(_OWORD *)(v96 + 16) = v93;
  v94 = v102;
  *(_OWORD *)(v96 + 32) = v101;
  *(_OWORD *)(v96 + 48) = v94;
  return sub_100005D08(v118);
}

uint64_t sub_10007D8F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10007D930 + 4 * aP[a1]))(0x56726567616E614DLL, 0xEE006E6F69737265);
}

uint64_t sub_10007D930()
{
  return 0x61506C656E72654BLL;
}

uint64_t sub_10007D94C()
{
  return 0x6365746968637241;
}

unint64_t sub_10007D970()
{
  return 0xD000000000000014;
}

uint64_t sub_10007DAD4()
{
  return 0x6F69747065637845;
}

uint64_t sub_10007DAF4()
{
  unsigned __int8 *v0;

  return sub_10007D8F0(*v0);
}

uint64_t sub_10007DAFC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10007DF1C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10007DB20(_BYTE *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_10007DB2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007FD94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007DB54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007FD94();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10007DB7C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  sub_10007E640(a1, (uint64_t)v12);
  if (!v2)
  {
    v5 = v24;
    *(_OWORD *)(a2 + 192) = v23;
    *(_OWORD *)(a2 + 208) = v5;
    *(_OWORD *)(a2 + 224) = v25;
    *(_QWORD *)(a2 + 240) = v26;
    v6 = v20;
    *(_OWORD *)(a2 + 128) = v19;
    *(_OWORD *)(a2 + 144) = v6;
    v7 = v22;
    *(_OWORD *)(a2 + 160) = v21;
    *(_OWORD *)(a2 + 176) = v7;
    v8 = v16;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v8;
    v9 = v18;
    *(_OWORD *)(a2 + 96) = v17;
    *(_OWORD *)(a2 + 112) = v9;
    v10 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v10;
    result = *(double *)&v13;
    v11 = v14;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v11;
  }
  return result;
}

char *sub_10007DC10(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015A408);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_10007DD28(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001001257A0)
  {
    swift_bridgeObjectRelease(0x80000001001257A0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001257A0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

_QWORD *sub_10007DDAC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v3 = sub_100005C88(&qword_10015A410);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100004DE4(a1, v7);
  v10 = sub_10007FE78();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys, &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_100005D08(a1);
  }
  else
  {
    v11 = sub_100005C88(&qword_10015A418);
    v12 = sub_10007FEBC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = (_QWORD *)v15[1];
    sub_100005D08(a1);
  }
  return v9;
}

unint64_t sub_10007DED8()
{
  unint64_t result;

  result = qword_10015A3E8;
  if (!qword_10015A3E8)
  {
    result = swift_getWitnessTable(&unk_100112A50, &type metadata for KernelManagementConfiguration);
    atomic_store(result, (unint64_t *)&qword_10015A3E8);
  }
  return result;
}

uint64_t sub_10007DF1C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;

  if (a1 == 0x56726567616E614DLL && a2 == 0xEE006E6F69737265)
  {
    v5 = 0xEE006E6F69737265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x56726567616E614DLL, 0xEE006E6F69737265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x61506C656E72654BLL && a2 == 0xEA00000000006874)
  {
    v7 = 0xEA00000000006874;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61506C656E72654BLL, 0xEA00000000006874, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6365746968637241 && a2 == 0xED00007365727574)
  {
    v8 = 0xED00007365727574;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6365746968637241, 0xED00007365727574, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000014)
  {
    v9 = 0x8000000100125590;
    if (a2 == 0x8000000100125590)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100125590, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000016)
  {
    v10 = 0x80000001001255B0;
    if (a2 == 0x80000001001255B0)
      goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001001255B0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000001001255D0)
  {
    v11 = 0x80000001001255D0;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000001001255D0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001001255F0)
  {
    v12 = 0x80000001001255F0;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001001255F0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x8000000100125610)
  {
    v13 = 0x8000000100125610;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x8000000100125610, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0xD000000000000014)
  {
    v14 = 0x8000000100125640;
    if (a2 == 0x8000000100125640)
      goto LABEL_53;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100125640, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0xD000000000000016)
  {
    v15 = 0x8000000100125660;
    if (a2 == 0x8000000100125660)
      goto LABEL_58;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100125660, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_58:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100125680)
  {
    v16 = 0x8000000100125680;
LABEL_64:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100125680, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_64;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x80000001001256A0)
  {
    v17 = 0x80000001001256A0;
LABEL_70:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001001256A0, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_70;
  }
  if (a1 == 0xD000000000000021 && a2 == 0x80000001001256C0)
  {
    v18 = 0x80000001001256C0;
LABEL_76:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x80000001001256C0, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_76;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v19 = 0x80000001001256F0;
    if (a2 == 0x80000001001256F0)
      goto LABEL_81;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x80000001001256F0, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_81:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v20 = 0x8000000100125710;
    if (a2 == 0x8000000100125710)
      goto LABEL_86;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100125710, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_86:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if (a1 == 0xD000000000000023 && a2 == 0x8000000100125730)
  {
    v21 = 0x8000000100125730;
LABEL_92:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100125730, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_92;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100125760)
  {
    v22 = 0x8000000100125760;
LABEL_98:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100125760, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_98;
  }
  if (a1 == 0xD000000000000014)
  {
    v23 = 0x8000000100125780;
    if (a2 == 0x8000000100125780)
      goto LABEL_103;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100125780, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_103:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if (a1 == 0x6F69747065637845 && a2 == 0xEA0000000000736ELL)
  {
    swift_bridgeObjectRelease(0xEA0000000000736ELL);
    return 18;
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F69747065637845, 0xEA0000000000736ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v24 & 1) != 0)
      return 18;
    else
      return 19;
  }
}

