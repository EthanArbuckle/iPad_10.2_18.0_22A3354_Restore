_QWORD *sub_10007E640@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *result;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  _QWORD v112[31];
  char v113[9];
  uint64_t v114;

  v5 = sub_100005C88(&qword_10015A3F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v95 = a1;
  sub_100004DE4(a1, v9);
  v11 = sub_10007FD94();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KernelManagementConfiguration.CodingKeys, &type metadata for KernelManagementConfiguration.CodingKeys, v11, v9, v10);
  if (v2)
    return (_QWORD *)sub_100005D08(v95);
  v82 = a2;
  LOBYTE(v112[0]) = 0;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5, v12);
  LOBYTE(v112[0]) = 1;
  v80 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  v81 = v13;
  v15 = v14;
  v16 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  LOBYTE(v96) = 2;
  v17 = sub_10007FDD8();
  swift_bridgeObjectRetain(v15);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v96, v5, v16, v17);
  v94 = v15;
  v87 = v17;
  v18 = v112[0];
  LOBYTE(v112[0]) = 3;
  swift_bridgeObjectRetain(v18);
  v78 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  v79 = v18;
  LOBYTE(v112[0]) = 4;
  v20 = v19;
  swift_bridgeObjectRetain(v19);
  v21 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  v93 = v20;
  v77 = v21;
  LOBYTE(v112[0]) = 5;
  v23 = v22;
  swift_bridgeObjectRetain(v22);
  v24 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  v92 = v23;
  v76 = v24;
  LOBYTE(v112[0]) = 6;
  v26 = v25;
  swift_bridgeObjectRetain(v25);
  v27 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  v91 = v26;
  v75 = v27;
  LOBYTE(v112[0]) = 7;
  v29 = v28;
  swift_bridgeObjectRetain(v28);
  v30 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  v90 = v29;
  v74 = v30;
  LOBYTE(v96) = 8;
  v32 = v31;
  swift_bridgeObjectRetain(v31);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v96, v5, v16, v87);
  v89 = v32;
  LOBYTE(v96) = 9;
  v73 = v112[0];
  swift_bridgeObjectRetain(v112[0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v96, v5, v16, v87);
  LOBYTE(v96) = 10;
  v33 = v112[0];
  swift_bridgeObjectRetain(v112[0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v96, v5, v16, v87);
  LOBYTE(v96) = 11;
  v88 = v112[0];
  swift_bridgeObjectRetain(v112[0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v96, v5, v16, v87);
  v34 = v112[0];
  LOBYTE(v112[0]) = 12;
  v87 = v34;
  swift_bridgeObjectRetain(v34);
  v72 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  v86 = v35;
  LOBYTE(v112[0]) = 13;
  swift_bridgeObjectRetain(v35);
  v71 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  v85 = v36;
  LOBYTE(v112[0]) = 14;
  swift_bridgeObjectRetain(v36);
  v70 = KeyedDecodingContainer.decode(_:forKey:)(v112, v5);
  v84 = v37;
  LOBYTE(v112[0]) = 15;
  swift_bridgeObjectRetain(v37);
  v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v112, v5);
  v83 = v39;
  v40 = v38;
  LOBYTE(v112[0]) = 16;
  swift_bridgeObjectRetain(v39);
  v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v112, v5);
  v42 = v41;
  LOBYTE(v112[0]) = 17;
  swift_bridgeObjectRetain(v41);
  *(_QWORD *)&v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v112, v5);
  *((_QWORD *)&v68 + 1) = v43;
  v113[0] = 18;
  v44 = sub_10007FE34();
  swift_bridgeObjectRetain(*((_QWORD *)&v68 + 1));
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for KernelManagementConfiguration.ExceptionsConfiguration, v113, v5, &type metadata for KernelManagementConfiguration.ExceptionsConfiguration, v44);
  v67 = v33;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v65 = v114;
  *(_QWORD *)&v96 = v81;
  *((_QWORD *)&v96 + 1) = v80;
  v45 = v94;
  *(_QWORD *)&v97 = v94;
  *((_QWORD *)&v97 + 1) = v79;
  v46 = v92;
  *(_QWORD *)&v98 = v78;
  *((_QWORD *)&v98 + 1) = v93;
  *(_QWORD *)&v99 = v77;
  *((_QWORD *)&v99 + 1) = v92;
  v47 = v90;
  *(_QWORD *)&v100 = v76;
  *((_QWORD *)&v100 + 1) = v91;
  *(_QWORD *)&v101 = v75;
  *((_QWORD *)&v101 + 1) = v90;
  *(_QWORD *)&v102 = v74;
  *((_QWORD *)&v102 + 1) = v89;
  *(_QWORD *)&v103 = v73;
  *((_QWORD *)&v103 + 1) = v33;
  v48 = v33;
  *(_QWORD *)&v104 = v88;
  *((_QWORD *)&v104 + 1) = v87;
  *(_QWORD *)&v105 = v72;
  *((_QWORD *)&v105 + 1) = v86;
  *(_QWORD *)&v106 = v71;
  *((_QWORD *)&v106 + 1) = v85;
  *(_QWORD *)&v107 = v70;
  *((_QWORD *)&v107 + 1) = v84;
  v66 = v40;
  *(_QWORD *)&v108 = v40;
  *((_QWORD *)&v108 + 1) = v83;
  *(_QWORD *)&v109 = v69;
  *((_QWORD *)&v109 + 1) = v42;
  v49 = v42;
  v50 = *((_QWORD *)&v68 + 1);
  v110 = v68;
  v111 = v114;
  sub_1000126EC(&v96);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v79);
  swift_bridgeObjectRelease(v93);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v91);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v89);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v88);
  v51 = v87;
  swift_bridgeObjectRelease(v87);
  v52 = v86;
  swift_bridgeObjectRelease(v86);
  v53 = v85;
  swift_bridgeObjectRelease(v85);
  v54 = v84;
  swift_bridgeObjectRelease(v84);
  v55 = v83;
  swift_bridgeObjectRelease(v83);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v50);
  sub_100005D08(v95);
  v112[0] = v81;
  v112[1] = v80;
  v112[2] = v94;
  v112[3] = v79;
  v112[4] = v78;
  v112[5] = v93;
  v112[6] = v77;
  v112[7] = v92;
  v112[8] = v76;
  v112[9] = v91;
  v112[10] = v75;
  v112[11] = v90;
  v112[12] = v74;
  v112[13] = v89;
  v112[14] = v73;
  v112[15] = v67;
  v112[16] = v88;
  v112[17] = v51;
  v112[18] = v72;
  v112[19] = v52;
  v112[20] = v71;
  v112[21] = v53;
  v112[22] = v70;
  v112[23] = v54;
  v112[24] = v66;
  v112[25] = v55;
  v112[26] = v69;
  v112[27] = v49;
  v112[28] = v68;
  v112[29] = v50;
  v112[30] = v65;
  result = sub_100010B40(v112);
  v57 = v109;
  v58 = v82;
  *(_OWORD *)(v82 + 192) = v108;
  *(_OWORD *)(v58 + 208) = v57;
  *(_OWORD *)(v58 + 224) = v110;
  *(_QWORD *)(v58 + 240) = v111;
  v59 = v105;
  *(_OWORD *)(v58 + 128) = v104;
  *(_OWORD *)(v58 + 144) = v59;
  v60 = v107;
  *(_OWORD *)(v58 + 160) = v106;
  *(_OWORD *)(v58 + 176) = v60;
  v61 = v101;
  *(_OWORD *)(v58 + 64) = v100;
  *(_OWORD *)(v58 + 80) = v61;
  v62 = v103;
  *(_OWORD *)(v58 + 96) = v102;
  *(_OWORD *)(v58 + 112) = v62;
  v63 = v97;
  *(_OWORD *)v58 = v96;
  *(_OWORD *)(v58 + 16) = v63;
  v64 = v99;
  *(_OWORD *)(v58 + 32) = v98;
  *(_OWORD *)(v58 + 48) = v64;
  return result;
}

uint64_t destroy for KernelManagementConfiguration(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(a1[23]);
  swift_bridgeObjectRelease(a1[25]);
  swift_bridgeObjectRelease(a1[27]);
  swift_bridgeObjectRelease(a1[29]);
  return swift_bridgeObjectRelease(a1[30]);
}

uint64_t initializeWithCopy for KernelManagementConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v11 = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v11;
  *(_QWORD *)(a1 + 120) = v10;
  v12 = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 136) = v20;
  v19 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v19;
  v18 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v18;
  v17 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v17;
  v16 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v16;
  v15 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v15;
  v14 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v14;
  v21 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 240) = v21;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v21);
  return a1;
}

_QWORD *assignWithCopy for KernelManagementConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  v14 = a2[11];
  v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[12] = a2[12];
  v16 = a2[13];
  v17 = a1[13];
  a1[13] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a2[14];
  v19 = a1[14];
  a1[14] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a2[15];
  v21 = a1[15];
  a1[15] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a2[16];
  v23 = a1[16];
  a1[16] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a2[17];
  v25 = a1[17];
  a1[17] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  a1[18] = a2[18];
  v26 = a2[19];
  v27 = a1[19];
  a1[19] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  a1[20] = a2[20];
  v28 = a2[21];
  v29 = a1[21];
  a1[21] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  a1[22] = a2[22];
  v30 = a2[23];
  v31 = a1[23];
  a1[23] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  a1[24] = a2[24];
  v32 = a2[25];
  v33 = a1[25];
  a1[25] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  a1[26] = a2[26];
  v34 = a2[27];
  v35 = a1[27];
  a1[27] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  a1[28] = a2[28];
  v36 = a2[29];
  v37 = a1[29];
  a1[29] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v38 = a1[30];
  v39 = a2[30];
  a1[30] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v38);
  return a1;
}

__n128 initializeWithTake for KernelManagementConfiguration(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for KernelManagementConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
  v13 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 120));
  v14 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 152);
  v17 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 168);
  v19 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 184);
  v21 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 200);
  v23 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a2 + 216);
  v25 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v24;
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 232));
  v26 = *(_QWORD *)(a1 + 240);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for KernelManagementConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 248))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KernelManagementConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 248) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 248) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration()
{
  return &type metadata for KernelManagementConfiguration;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration.ExceptionsConfiguration()
{
  return &type metadata for KernelManagementConfiguration.ExceptionsConfiguration;
}

unint64_t sub_10007FD94()
{
  unint64_t result;

  result = qword_100162B30;
  if (!qword_100162B30)
  {
    result = swift_getWitnessTable(&unk_100112C84, &type metadata for KernelManagementConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100162B30);
  }
  return result;
}

unint64_t sub_10007FDD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158050;
  if (!qword_100158050)
  {
    v1 = sub_100011CE4((uint64_t *)&unk_10015A5D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100158050);
  }
  return result;
}

unint64_t sub_10007FE34()
{
  unint64_t result;

  result = qword_10015A400;
  if (!qword_10015A400)
  {
    result = swift_getWitnessTable(&unk_100112A28, &type metadata for KernelManagementConfiguration.ExceptionsConfiguration);
    atomic_store(result, (unint64_t *)&qword_10015A400);
  }
  return result;
}

unint64_t sub_10007FE78()
{
  unint64_t result;

  result = qword_100162B38[0];
  if (!qword_100162B38[0])
  {
    result = swift_getWitnessTable(&unk_100112C34, &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys);
    atomic_store(result, qword_100162B38);
  }
  return result;
}

unint64_t sub_10007FEBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A420;
  if (!qword_10015A420)
  {
    v1 = sub_100011CE4(&qword_10015A418);
    sub_10007FDD8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10015A420);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10007FF68 + 4 * byte_100112A13[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10007FF88 + 4 * byte_100112A18[v4]))();
}

_BYTE *sub_10007FF68(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10007FF88(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10007FF90(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10007FF98(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10007FFA0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10007FFA8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys()
{
  return &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for KernelManagementConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KernelManagementConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_1000800A0 + 4 * byte_100112A22[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_1000800D4 + 4 * byte_100112A1D[v4]))();
}

uint64_t sub_1000800D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000800DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000800E4);
  return result;
}

uint64_t sub_1000800F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000800F8);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_1000800FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100080104(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KernelManagementConfiguration.CodingKeys()
{
  return &type metadata for KernelManagementConfiguration.CodingKeys;
}

unint64_t sub_100080124()
{
  unint64_t result;

  result = qword_100162C40[0];
  if (!qword_100162C40[0])
  {
    result = swift_getWitnessTable(&unk_100112B54, &type metadata for KernelManagementConfiguration.CodingKeys);
    atomic_store(result, qword_100162C40);
  }
  return result;
}

unint64_t sub_10008016C()
{
  unint64_t result;

  result = qword_100162E50[0];
  if (!qword_100162E50[0])
  {
    result = swift_getWitnessTable(&unk_100112C0C, &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys);
    atomic_store(result, qword_100162E50);
  }
  return result;
}

unint64_t sub_1000801B4()
{
  unint64_t result;

  result = qword_100162F60;
  if (!qword_100162F60)
  {
    result = swift_getWitnessTable(&unk_100112B7C, &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100162F60);
  }
  return result;
}

unint64_t sub_1000801FC()
{
  unint64_t result;

  result = qword_100162F68[0];
  if (!qword_100162F68[0])
  {
    result = swift_getWitnessTable(&unk_100112BA4, &type metadata for KernelManagementConfiguration.ExceptionsConfiguration.CodingKeys);
    atomic_store(result, qword_100162F68);
  }
  return result;
}

unint64_t sub_100080244()
{
  unint64_t result;

  result = qword_100162FF0;
  if (!qword_100162FF0)
  {
    result = swift_getWitnessTable(&unk_100112AC4, &type metadata for KernelManagementConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100162FF0);
  }
  return result;
}

unint64_t sub_10008028C()
{
  unint64_t result;

  result = qword_100162FF8[0];
  if (!qword_100162FF8[0])
  {
    result = swift_getWitnessTable(&unk_100112AEC, &type metadata for KernelManagementConfiguration.CodingKeys);
    atomic_store(result, qword_100162FF8);
  }
  return result;
}

uint64_t sub_1000802D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::String v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void **aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  void *v60;
  void (*v61)();
  uint64_t v62;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  v54 = v2;
  v55 = v3;
  __chkstk_darwin(v2);
  v53 = (_QWORD *)((char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v11 - 8);
  v52 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v0 + 24);
  aBlock = *(void ***)(v0 + 16);
  v58 = v14;
  swift_bridgeObjectRetain(v14);
  v15._countAndFlagsBits = 47;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16 = aBlock;
  v17 = v58;
  aBlock = (void **)*(unsigned __int8 *)(v0
                                       + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_context);
  v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v20 = v19;
  aBlock = v16;
  v58 = v17;
  swift_bridgeObjectRetain(v17);
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v20);
  v22 = (uint64_t)aBlock;
  v23 = v58;
  v48[1] = sub_10008069C();
  v24 = sub_100080E34(0x3CuLL, v22, v23);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_bridgeObjectRelease(v23);
  v31 = static String._fromSubstring(_:)(v24, v26, v28, v30);
  v33 = v32;
  v34 = swift_bridgeObjectRelease(v30);
  static DispatchQoS.unspecified.getter(v34);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v35 = sub_100012534((unint64_t *)&qword_100159CE8, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v36 = sub_100005C88(&qword_100159CF0);
  v37 = sub_10007778C((unint64_t *)&qword_100159CF8, &qword_100159CF0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v10, &aBlock, v36, v37, v8, v35);
  (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v50);
  v38 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v31, v33, v13, v10, v7, 0);
  v61 = sub_100080EDC;
  v62 = v1;
  aBlock = _NSConcreteStackBlock;
  v58 = 1107296256;
  v59 = sub_10000B424;
  v60 = &unk_100149E58;
  v39 = _Block_copy(&aBlock);
  v40 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v40);
  v56 = _swiftEmptyArrayStorage;
  v41 = sub_100012534((unint64_t *)&qword_10015ABD0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v42 = sub_100005C88((uint64_t *)&unk_100159EB0);
  v43 = sub_10007778C((unint64_t *)&qword_10015ABE0, (uint64_t *)&unk_100159EB0);
  v44 = v53;
  v45 = v42;
  v46 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(v53, &v56, v45, v43, v54, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v44, v39);
  _Block_release(v39);

  (*(void (**)(_QWORD *, uint64_t))(v55 + 8))(v44, v46);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v13, v52);
  return swift_release(v62);
}

unint64_t sub_10008069C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159CE0;
  if (!qword_100159CE0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100159CE0);
  }
  return result;
}

Swift::Int sub_1000806D8()
{
  return OS_dispatch_semaphore.signal()();
}

_QWORD *sub_100080700@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_100080720(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;

  v6 = a3 & 1;
  v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  static Date.now.getter(v7);
  *(_QWORD *)(v7 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_semaphore) = dispatch_semaphore_create(0);
  *(_BYTE *)(v7 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_context) = v6;
  return v7;
}

uint64_t sub_100080798()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_timeInfo;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_semaphore));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100080800()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t sub_100080828()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t sub_100080850()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t sub_100080878(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  if (v4 == v6 && v5 == v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0);
}

uint64_t sub_1000808A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v0 = type metadata accessor for DextLaunchThreadManager();
  v1 = swift_allocObject(v0, 24, 7);
  if (os_variant_allows_internal_security_policies("kernelmanagerd"))
  {
    v2 = sub_100005C88(&qword_10015A428);
    v4 = sub_100050724(8);
    result = sub_100006090((uint64_t)&v4, v2);
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(v1 + 16) = result;
  qword_100175520 = v1;
  return result;
}

uint64_t *sub_100080924()
{
  if (qword_100163080 != -1)
    swift_once(&qword_100163080, sub_1000808A4);
  return &qword_100175520;
}

uint64_t sub_100080964(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v6 = a3 & 1;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v3 + 16);
  if (v12)
  {
    __chkstk_darwin(v9);
    v20[-4] = a1;
    v20[-3] = a2;
    LOBYTE(v20[-2]) = v6;
    swift_retain(v12);
    sub_100005C88(&qword_10015A428);
    sub_100005F34((void (*)(uint64_t))sub_100080F1C, (uint64_t)&v20[-6], v12);
    return swift_release(v12);
  }
  else
  {
    v14 = sub_1000D33DC();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v14, v7);
    v15 = swift_bridgeObjectRetain_n(a2, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v20[0] = swift_slowAlloc(32, -1);
      v22 = v20[0];
      *(_DWORD *)v18 = 136315394;
      swift_bridgeObjectRetain(a2);
      v21 = sub_1000055A0(a1, a2, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v18 + 12) = 2048;
      v21 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v18 + 14, v18 + 22);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Skipping addBreadcrumbForDextWithIdentifier for %s %ld", (uint8_t *)v18, 0x16u);
      v19 = v20[0];
      swift_arrayDestroy(v20[0], 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

uint64_t sub_100080BCC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v2 + 16);
  if (v10)
  {
    __chkstk_darwin(v7);
    v18[-2] = a1;
    v18[-1] = a2;
    swift_retain(v10);
    sub_100005C88(&qword_10015A428);
    sub_100005F34((void (*)(uint64_t))sub_100080FD8, (uint64_t)&v18[-4], v10);
    return swift_release(v10);
  }
  else
  {
    v12 = sub_1000D33DC();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v12, v5);
    v13 = swift_bridgeObjectRetain_n(a2, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.info.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v20 = v17;
      *(_DWORD *)v16 = 136315138;
      v18[0] = v16 + 4;
      swift_bridgeObjectRetain(a2);
      v19 = sub_1000055A0(a1, a2, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v18[0], v16 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Skipping removeBreadcrumbForDextWithIdentifier for %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_100080E10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

unint64_t sub_100080E34(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    result = String.index(_:offsetBy:limitedBy:)(v4 | (v3 << 16), -(uint64_t)result, 15, a2, a3);
    if ((v5 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

void sub_100080EDC()
{
  OS_dispatch_semaphore.wait()();
}

uint64_t sub_100080F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100080F14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100080F1C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(_BYTE *)(v1 + 32);
  v6 = type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata(0);
  v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  static Date.now.getter(v8);
  *(_QWORD *)(v7 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_semaphore) = dispatch_semaphore_create(0);
  *(_BYTE *)(v7 + OBJC_IVAR____TtCC10driverkitd23DextLaunchThreadManager27DextLaunchDebuggingMetadata_context) = v5;
  v9 = *a1;
  v11 = v7;
  (*(void (**)(uint64_t *))(*(_QWORD *)v9 + 184))(&v11);
  return swift_release(v7);
}

uint64_t sub_100080FD8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 192))(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_100081014()
{
  unint64_t result;

  result = qword_10015A430;
  if (!qword_10015A430)
  {
    result = swift_getWitnessTable(&unk_100112CEC, &type metadata for DextLaunchThreadManager.DextLaunchDebuggingMetadata.Context);
    atomic_store(result, (unint64_t *)&qword_10015A430);
  }
  return result;
}

uint64_t sub_100081058(uint64_t a1)
{
  uint64_t result;

  result = sub_100012534(&qword_10015A438, type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata, (uint64_t)&unk_100112DA8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata(uint64_t a1)
{
  uint64_t result;

  result = qword_100163310;
  if (!qword_100163310)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DextLaunchThreadManager.DextLaunchDebuggingMetadata);
  return result;
}

uint64_t type metadata accessor for DextLaunchThreadManager()
{
  return objc_opt_self(_TtC10driverkitd23DextLaunchThreadManager);
}

uint64_t sub_1000810F0()
{
  return type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata(0);
}

uint64_t sub_1000810F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100112E20;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = &unk_100112E38;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DextLaunchThreadManager.DextLaunchDebuggingMetadata.Context(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000811D4 + 4 * byte_100112CE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100081208 + 4 * byte_100112CE0[v4]))();
}

uint64_t sub_100081208(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100081210(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100081218);
  return result;
}

uint64_t sub_100081224(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008122CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100081230(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100081238(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DextLaunchThreadManager.DextLaunchDebuggingMetadata.Context()
{
  return &type metadata for DextLaunchThreadManager.DextLaunchDebuggingMetadata.Context;
}

uint64_t sub_100081254()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100081288(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release(v3);
}

uint64_t sub_1000812CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);

  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96);
  v2 = swift_retain(a1);
  return v4(v2);
}

uint64_t sub_1000812F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void (*v12)(id, uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  v1 = v0;
  v2 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 88);
  result = v2();
  if (result)
  {
    v4 = result;
    v5 = (_QWORD *)(result + 16);
    swift_beginAccess(result + 16, v16, 32, 0);
    v6 = *(_QWORD *)(v4 + 40);
    v7 = *(_QWORD *)(v4 + 48);
    sub_100004DE4(v5, v6);
    sub_10006AB2C(v6, v7);
    swift_endAccess(v16);
    swift_release(v4);
    v8 = v14;
    v9 = v15;
    sub_100004DE4(v13, v14);
    result = v2();
    if (result)
    {
      v10 = result;
      v11 = *(id *)(result + 64);
      swift_release(v10);
      v12 = *(void (**)(id, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v9 + 8);
      swift_retain(v1);
      v12(v11, sub_100081414, v1, v8, v9);

      swift_release(v1);
      return sub_100005D08(v13);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100081414()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

void sub_100081420(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const _xpc_type_s *type;
  const char *name;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;

  v2 = v1;
  type metadata accessor for XPCUtil();
  if (!sub_1000D7850(a1))
  {
    type = xpc_get_type(a1);
    name = xpc_type_get_name(type);
    v30 = String.init(cString:)(name);
    v32 = v31;
    v33 = static os_log_type_t.error.getter(v30);
    v34 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v35 = swift_allocObject(v34, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_10010F050;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    *(_QWORD *)(v35 + 64) = sub_100026838();
    *(_QWORD *)(v35 + 32) = v30;
    *(_QWORD *)(v35 + 40) = v32;
    v36 = sub_10002687C();
    v66 = (void *)static OS_os_log.default.getter(v36);
      102,
      2,
      v35);
    swift_bridgeObjectRelease(v35);

    return;
  }
  v4 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10010F050;
  v68 = 0;
  v69 = 0xE000000000000000;
  v67 = a1;
  v6 = sub_100005C88(&qword_10015A5C8);
  _print_unlocked<A, B>(_:_:)(&v67, &v68, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7 = v68;
  v8 = v69;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v9 = sub_100026838();
  *(_QWORD *)(v5 + 64) = v9;
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v8;
  v10 = sub_10002687C();
  v11 = (void *)static OS_os_log.default.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)("distnoted event, dictionary contents:\n%{public}s", 48, 2, &_mh_execute_header, v11, v12, v5);
  swift_bridgeObjectRelease(v5);

  v13 = (void *)swift_unknownObjectRetain(a1);
  v14 = sub_1000D7C10(v13);
  if (!v15)
  {
    v37 = (void *)swift_unknownObjectRetain(a1);
    v38 = sub_1000D7C1C(v37);
    if (!v39)
    {
      v60 = (void *)static OS_os_log.default.getter(v38);
      v61 = static os_log_type_t.default.getter(v60);
      os_log(_:dso:log:type:_:)("distnoted event, could not make info object", 43, 2, &_mh_execute_header, v60, v61, _swiftEmptyArrayStorage);

      return;
    }
    v16 = v39;
    if (!v38)
    {
      v40 = *(_QWORD *)(v39 + 16);
      if (v40)
      {
        v65 = v2;
        swift_bridgeObjectRetain(v39);
        v63 = v16;
        v41 = (uint64_t *)(v16 + 40);
        do
        {
          v42 = *(v41 - 1);
          v43 = *v41;
          v44 = swift_allocObject(v4, 72, 7);
          *(_OWORD *)(v44 + 16) = xmmword_10010F050;
          *(_QWORD *)(v44 + 56) = &type metadata for String;
          *(_QWORD *)(v44 + 64) = v9;
          *(_QWORD *)(v44 + 32) = v42;
          *(_QWORD *)(v44 + 40) = v43;
          swift_bridgeObjectRetain(v43);
          v46 = (void *)static OS_os_log.default.getter(v45);
          v47 = static os_log_type_t.default.getter(v46);
          os_log(_:dso:log:type:_:)("distnoted app uninstallation event, processing bundle: %{public}s", 65, 2, &_mh_execute_header, v46, v47, v44);
          swift_bridgeObjectRelease(v44);

          v41 += 2;
          --v40;
        }
        while (v40);
        v16 = v63;
        swift_bridgeObjectRelease(v63);
        v2 = v65;
      }
      v48 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 88))();
      if (v48)
      {
        v49 = v48;
        v27 = *(_QWORD *)(v48 + 72);
        swift_retain(v27);
        swift_release(v49);
        v68 = 0;
        v69 = 0xE000000000000000;
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease(v69);
        v68 = 0xD00000000000001ALL;
        v69 = 0x80000001001259C0;
        goto LABEL_19;
      }
LABEL_25:
      __break(1u);
      return;
    }
LABEL_20:
    v59 = (char *)v16;
    goto LABEL_21;
  }
  v16 = v15;
  if (v14)
    goto LABEL_20;
  v17 = *(_QWORD *)(v15 + 16);
  if (v17)
  {
    v64 = v2;
    swift_bridgeObjectRetain(v15);
    v62 = v16;
    v18 = (uint64_t *)(v16 + 40);
    do
    {
      v19 = *(v18 - 1);
      v20 = *v18;
      v21 = swift_allocObject(v4, 72, 7);
      *(_OWORD *)(v21 + 16) = xmmword_10010F050;
      *(_QWORD *)(v21 + 56) = &type metadata for String;
      *(_QWORD *)(v21 + 64) = v9;
      *(_QWORD *)(v21 + 32) = v19;
      *(_QWORD *)(v21 + 40) = v20;
      swift_bridgeObjectRetain(v20);
      v23 = (void *)static OS_os_log.default.getter(v22);
      v24 = static os_log_type_t.default.getter(v23);
      os_log(_:dso:log:type:_:)("distnoted app installation event, processing bundle: %{public}s", 63, 2, &_mh_execute_header, v23, v24, v21);
      swift_bridgeObjectRelease(v21);

      v18 += 2;
      --v17;
    }
    while (v17);
    v16 = v62;
    swift_bridgeObjectRelease(v62);
    v2 = v64;
  }
  v25 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 88))();
  if (!v25)
  {
    __break(1u);
    goto LABEL_25;
  }
  v26 = v25;
  v27 = *(_QWORD *)(v25 + 72);
  swift_retain(v27);
  swift_release(v26);
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(v69);
  v68 = 0xD000000000000018;
  v69 = 0x8000000100125A20;
LABEL_19:
  v67 = (void *)v16;
  v50 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v51 = sub_100013C48();
  v52 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v50, v51);
  v54 = v53;
  swift_bridgeObjectRelease(v16);
  v55._countAndFlagsBits = v52;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(v54);
  v56 = v68;
  v57 = (char *)v69;
  v58 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ApplicationManager();
  sub_1000CDD6C(v56, v57, v58, (uint64_t)&off_1001463D8);
  swift_release(v27);
  v59 = v57;
LABEL_21:
  swift_bridgeObjectRelease(v59);
}

uint64_t sub_10008195C()
{
  uint64_t v0;
  uint64_t result;

  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100081980(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 112))(*a1);
}

uint64_t type metadata accessor for ApplicationRequestSource()
{
  return objc_opt_self(_TtC10driverkitd24ApplicationRequestSource);
}

uint64_t sub_1000819CC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 32, 7);
  sub_100081A18(a1, a2);
  return v5;
}

uint64_t sub_100081A18(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  int v13;

  v3 = v2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v6 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10010F050;
  swift_retain(a1);
  v8 = a2;
  v9 = objc_msgSend(v8, "processIdentifier");
  *(_QWORD *)(v7 + 56) = &type metadata for Int32;
  *(_QWORD *)(v7 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v7 + 32) = v9;
  v10 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v11 = (void *)static OS_os_log.default.getter(v10);
  static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)("incoming connection from pid %d", v13);
  swift_bridgeObjectRelease(v7);

  swift_release(a1);
  return v3;
}

uint64_t sub_100081B18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(*(_QWORD *)(v3 + 16) + 64);
  v14 = (_QWORD *)swift_allocObject(&unk_100149FC8, 40, 7);
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_100081F2C;
  v25 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000B424;
  aBlock[3] = &unk_100149FE0;
  v15 = _Block_copy(aBlock);
  v16 = v13;
  swift_retain(v3);
  v17 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_100081F50();
  v19 = sub_100005C88((uint64_t *)&unk_100159EB0);
  v20 = sub_100081F98();
  dispatch thunk of SetAlgebra.init<A>(_:)(v8, &v23, v19, v20, v6, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v15);
  _Block_release(v15);

  (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v25);
}

uint64_t sub_100081CF8(uint64_t a1, void (*a2)(unint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[80];
  uint64_t v20;

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = static os_signpost_type_t.event.getter(v6);
  v10 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v11 = (void *)static OS_os_log.default.getter(v10);
  static OSSignpostID.exclusive.getter(v11);
  os_signpost(_:dso:log:name:signpostID:)(v9, &_mh_execute_header, v11, "dumpState(withReplyBlock:)", 26, 2, v8);

  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  v20 = a1;
  v12 = type metadata accessor for DriverKitDaemonXPCRequestDelegate();
  nullsub_1(v12, &off_10015A6F0, v13, v14);
  v20 = a1;
  sub_100074980(v12, (uint64_t)&off_10015A6F0);
  v15 = sub_1000995E4();
  v17 = v16;
  a2(v15);
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_100081F00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100081F2C()
{
  uint64_t v0;

  return sub_100081CF8(*(_QWORD *)(v0 + 16), *(void (**)(unint64_t))(v0 + 24));
}

uint64_t sub_100081F38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100081F48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100081F50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015ABD0;
  if (!qword_10015ABD0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10015ABD0);
  }
  return result;
}

unint64_t sub_100081F98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015ABE0;
  if (!qword_10015ABE0)
  {
    v1 = sub_100011CE4((uint64_t *)&unk_100159EB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015ABE0);
  }
  return result;
}

void sub_100082054(uint64_t a1, NSString a2, uint64_t a3, uint64_t a4)
{
  id v5;

  if (a2)
    a2 = String._bridgeToObjectiveC()();
  v5 = a2;
  (*(void (**)(uint64_t))(a4 + 16))(a4);

}

uint64_t sub_1000820A0(void (*a1)(uint64_t, unint64_t, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v2 = v1;
  v4 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v5 = (void *)static OS_os_log.default.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)("Incoming request for approval state", 35, 2, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);

  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 104);
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 336);
  v9 = swift_retain(v7);
  v10 = v8(v9);
  swift_release(v7);
  v11 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = PropertyListEncoder.init()();
  v19 = v10;
  v13 = sub_100082564();
  v15 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v19, &type metadata for ApprovalSettingsState, v13, v14);
  v17 = v16;
  swift_bridgeObjectRelease(v10);
  swift_release(v12);
  sub_1000122B4(v15, v17);
  a1(v15, v17, 0);
  sub_100011F40(v15, v17);
  return sub_100011F40(v15, v17);
}

unint64_t sub_100082564()
{
  unint64_t result;

  result = qword_10015A6D0;
  if (!qword_10015A6D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalSettingsState, &type metadata for ApprovalSettingsState);
    atomic_store(result, (unint64_t *)&qword_10015A6D0);
  }
  return result;
}

unint64_t sub_1000825A8()
{
  unint64_t result;

  result = qword_10015A6D8;
  if (!qword_10015A6D8)
  {
    result = swift_getWitnessTable(&unk_100110EA0, &type metadata for ApprovalsError);
    atomic_store(result, (unint64_t *)&qword_10015A6D8);
  }
  return result;
}

unint64_t sub_1000825EC()
{
  unint64_t result;

  result = qword_10015A6E0;
  if (!qword_10015A6E0)
  {
    result = swift_getWitnessTable(&unk_100114988, &type metadata for KMError);
    atomic_store(result, (unint64_t *)&qword_10015A6E0);
  }
  return result;
}

uint64_t sub_100082630(uint64_t a1)
{
  sub_1000391DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  return a1;
}

_QWORD *sub_1000826CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[2];
  char v18;
  _OWORD v19[2];
  char v20;

  v5 = v4;
  v10 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = PropertyListDecoder.init()();
  v12 = sub_100069B00();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v17, &type metadata for ApprovalDBEntry, a1, a2, &type metadata for ApprovalDBEntry, v12);
  swift_release(v11);
  v19[0] = v17[0];
  v19[1] = v17[1];
  v20 = v18;
  v13 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 96);
  type metadata accessor for ApprovalStateUpdateRequest(0);
  v14 = swift_allocObject(&unk_10014A018, 32, 7);
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  swift_retain(v13);
  sub_100067500(v19);
  swift_retain(a4);
  v15 = ApprovalStateUpdateRequest.__allocating_init(entry:callback:)((uint64_t)v19, (uint64_t)sub_100082AC0, v14);
  (*(void (**)(void))(*(_QWORD *)v13 + 304))();
  swift_release(v13);
  swift_release(v15);
  return sub_100067584(v19);
}

uint64_t sub_100082950(uint64_t a1, char a2, void (*a3)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;

  if ((a2 & 1) == 0)
    return ((uint64_t (*)(_QWORD))a3)(0);
  v6 = swift_errorRetain(a1);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10010F050;
  v17 = a1;
  swift_errorRetain(a1);
  v10 = sub_100005C88(&qword_10015AB50);
  v11 = String.init<A>(describing:)(&v17, v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_100026838();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  v14 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v15 = (void *)static OS_os_log.default.getter(v14);
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v15, "Error while enqueuing update to approval state: %{public}s", 58, 2, v9);
  swift_bridgeObjectRelease(v9);

  v16 = (void *)_convertErrorToNSError(_:)(a1);
  a3();

  return sub_100086008(a1, 1);
}

uint64_t sub_100082A9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100082AC0(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100082950(a1, a2 & 1, *(void (**)(void))(v2 + 16));
}

uint64_t sub_100082B68(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, void (*a7)(_QWORD, _QWORD, id), uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(__int128 *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  char v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD, id);
  uint64_t v73;
  id v74;
  uint64_t v75;
  void *v76;
  Swift::String v78;
  Swift::String v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  Swift::String v85;
  __int128 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  Swift::String v99;
  Swift::String v100;
  Swift::String v101;
  uint64_t v102;
  void *v103;
  void *v104;
  Swift::String v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned int v115;
  BOOL v116;
  char v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unsigned int v120;
  unsigned __int8 *v121;
  unsigned int v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  unsigned int v127;
  Swift::String v128;
  uint64_t (*v129)(uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  Swift::String v135;
  Swift::String v136;
  Swift::String v137;
  Swift::String v138;
  uint64_t v139;
  uint64_t v140;
  Swift::String v141;
  void *object;
  Swift::String v143;
  uint64_t v144;
  Swift::String v145;
  void *v146;
  Swift::String v147;
  Swift::String v148;
  void *v149;
  Swift::String v150;
  uint64_t v151;
  Swift::String v152;
  Swift::String v153;
  __int128 v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  char v159;
  char v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  void *v166;
  uint64_t v167;
  unint64_t v168;
  __int128 v169;
  uint64_t v170;
  void (*v171)(_QWORD, _QWORD, id);
  uint64_t v172[10];
  uint64_t v173;
  uint64_t v174[7];
  __int128 v175;
  __int128 v176;
  uint64_t v177;

  v170 = a8;
  v171 = a7;
  v168 = a6;
  *(_QWORD *)&v169 = a5;
  v13 = type metadata accessor for LookupSpec(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v161 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v175 = v8;
  v16 = type metadata accessor for DriverKitDaemonXPCRequestDelegate();
  nullsub_1(v16, &off_10015A6F0, v17, v18);
  v164 = v13;
  v165 = v15;
  v167 = a1;
  v166 = a2;
  v19 = v169;
  *(_QWORD *)&v175 = v8;
  sub_100074980(v16, (uint64_t)&off_10015A6F0);
  v20 = *(_QWORD **)(v8 + 16);
  swift_beginAccess(v20 + 2, v172, 32, 0);
  v21 = v20[5];
  v22 = v20[6];
  sub_100004DE4(v20 + 2, v21);
  sub_100071700(v21, v22);
  v23 = *((_QWORD *)&v176 + 1);
  v24 = v177;
  sub_100004DE4(&v175, *((uint64_t *)&v176 + 1));
  swift_endAccess(v172);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 80))(v23, v24);
  if (!v26)
  {
    sub_100005D08(&v175);
    goto LABEL_21;
  }
  v27 = v25;
  v28 = v26;
  sub_100005D08(&v175);
  v29 = sub_100090390(v27, v28, 0, 0);
  if (!v29)
  {
    v70 = sub_1000122F8();
    v66 = swift_allocError(&type metadata for KMError, v70, 0, 0);
    v68 = v66;
    *(_QWORD *)v67 = 0xD00000000000002DLL;
    *(_QWORD *)(v67 + 8) = 0x8000000100125D20;
    *(_OWORD *)(v67 + 16) = 0u;
    *(_OWORD *)(v67 + 32) = 0u;
    *(_OWORD *)(v67 + 48) = 0u;
    *(_QWORD *)(v67 + 64) = 0;
    v69 = 9;
    goto LABEL_23;
  }
  v30 = (unint64_t)v29;
  if (v29 == (_QWORD *)5)
  {
LABEL_21:
    v65 = sub_1000122F8();
    v66 = swift_allocError(&type metadata for KMError, v65, 0, 0);
    v68 = v66;
    *(_QWORD *)v67 = 0xD000000000000017;
    *(_QWORD *)(v67 + 8) = 0x8000000100125BC0;
    *(_OWORD *)(v67 + 16) = 0u;
    *(_OWORD *)(v67 + 32) = 0u;
    *(_OWORD *)(v67 + 48) = 0u;
    *(_QWORD *)(v67 + 64) = 0;
    v69 = 2;
LABEL_23:
    *(_BYTE *)(v67 + 72) = v69;
    swift_willThrow(v66);
    v71 = v68;
    goto LABEL_24;
  }
  v163 = (uint64_t)v20;
  v31 = sub_100097CC0();
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 144))(v31);
  swift_release(v31);
  sub_1000547A8(v32, (uint64_t)v174);
  swift_release(v32);
  v33 = v167;
  v34 = (uint64_t)v165;
  v35 = v166;
  *v165 = v167;
  *(_QWORD *)(v34 + 8) = v35;
  swift_storeEnumTagMultiPayload(v34, v164, 0);
  swift_bridgeObjectRetain(v35);
  v36 = (uint64_t *)sub_10005418C(v34);
  sub_100010C68(v174);
  sub_10005ACC8(v34);
  if (!v36)
  {
    *(_QWORD *)&v175 = 0;
    *((_QWORD *)&v175 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease(*((_QWORD *)&v175 + 1));
    *(_QWORD *)&v175 = 0xD000000000000029;
    *((_QWORD *)&v175 + 1) = 0x8000000100125BE0;
    v78._countAndFlagsBits = v33;
    v78._object = v35;
    String.append(_:)(v78);
    v79._countAndFlagsBits = 46;
    v79._object = (void *)0xE100000000000000;
    String.append(_:)(v79);
    v80 = v175;
    v81 = sub_1000122F8();
    v82 = swift_allocError(&type metadata for KMError, v81, 0, 0);
    *(_OWORD *)v83 = v80;
    *(_OWORD *)(v83 + 16) = 0u;
    *(_OWORD *)(v83 + 32) = 0u;
    *(_OWORD *)(v83 + 48) = 0u;
    *(_QWORD *)(v83 + 64) = 0;
    *(_BYTE *)(v83 + 72) = 10;
    swift_willThrow(v82);
    v71 = v82;
LABEL_31:
    sub_1000390EC(v30);
    goto LABEL_24;
  }
  v37 = v36[3];
  v38 = type metadata accessor for DriverExtension(0);
  v39 = (_QWORD *)swift_dynamicCastClass(v37, v38);
  if (!v39)
  {
    *(_QWORD *)&v175 = 0;
    *((_QWORD *)&v175 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(*((_QWORD *)&v175 + 1));
    *(_QWORD *)&v175 = 0x6F696E7365747845;
    *((_QWORD *)&v175 + 1) = 0xEA0000000000206ELL;
    v84._countAndFlagsBits = v167;
    v84._object = v35;
    String.append(_:)(v84);
    v85._countAndFlagsBits = 0xD00000000000001BLL;
    v85._object = (void *)0x8000000100125C10;
    String.append(_:)(v85);
    v86 = v175;
    v87 = sub_1000122F8();
    v88 = swift_allocError(&type metadata for KMError, v87, 0, 0);
    *(_OWORD *)v89 = v86;
    *(_OWORD *)(v89 + 16) = 0u;
    *(_OWORD *)(v89 + 32) = 0u;
    *(_OWORD *)(v89 + 48) = 0u;
    *(_QWORD *)(v89 + 64) = 0;
    *(_BYTE *)(v89 + 72) = 9;
    swift_willThrow(v88);
    v71 = v88;
    swift_release(v36);
    goto LABEL_31;
  }
  v161 = v39;
  v162 = v30;
  v164 = v37;
  swift_retain(v37);
  v40 = sub_100097CC0();
  v41 = *(_QWORD *)(v40 + 184);
  v165 = *(uint64_t **)(v40 + 176);
  swift_bridgeObjectRetain(v41);
  swift_release(v40);
  v42 = (uint64_t *)sub_10008F358();
  v43 = *v42;
  v44 = v42[1];
  v45 = *(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t, uint64_t, uint64_t, __n128))(*v36 + 312);
  v46 = swift_bridgeObjectRetain(v44);
  v47 = v165;
  v165 = v36;
  v45(&v175, v47, v41, v43, v44, v46);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v44);
  if (!*((_QWORD *)&v176 + 1))
  {
    sub_1000124F8((uint64_t)&v175, &qword_100158018);
    goto LABEL_33;
  }
  v48 = sub_100005C88(&qword_100158920);
  if ((swift_dynamicCast(v172, &v175, (char *)&type metadata for Any + 8, v48, 6) & 1) == 0)
  {
LABEL_33:
    v72 = v171;
    v90 = v162;
    v91 = v165;
    *(_QWORD *)&v175 = 0;
    *((_QWORD *)&v175 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v92._countAndFlagsBits = 0x6F69736E65747845;
    v92._object = (void *)0xEA0000000000206ELL;
    String.append(_:)(v92);
    v93._countAndFlagsBits = v167;
    v93._object = v166;
    String.append(_:)(v93);
    v94._countAndFlagsBits = 0xD000000000000028;
    v94._object = (void *)0x8000000100125C30;
    String.append(_:)(v94);
    v95 = v175;
    v96 = sub_1000122F8();
    v97 = swift_allocError(&type metadata for KMError, v96, 0, 0);
    *(_OWORD *)v98 = v95;
    *(_OWORD *)(v98 + 16) = 0u;
    *(_OWORD *)(v98 + 32) = 0u;
    *(_OWORD *)(v98 + 48) = 0u;
    *(_QWORD *)(v98 + 64) = 0;
    *(_BYTE *)(v98 + 72) = 9;
    swift_willThrow(v97);
    v71 = v97;
    swift_release(v91);
    swift_release(v164);
    sub_1000390EC(v90);
    goto LABEL_25;
  }
  v49 = v172[0];
  sub_100083B58(v172[0]);
  v51 = v50;
  swift_bridgeObjectRelease(v49);
  v52 = sub_100084ED0(v51);
  swift_bridgeObjectRelease(v51);
  v53 = (_QWORD *)a3;
  v54 = a4;
  v55 = sub_100083E04(a3, (uint64_t)a4, v52);
  v56 = v162;
  if ((v55 & 1) != 0)
  {
    swift_bridgeObjectRelease(v52);
    v57 = (void *)v168;
    if (!v168)
    {
      *(_QWORD *)&v175 = 0;
      swift_stdlib_random(&v175, 8);
      v110 = v175;
LABEL_76:
      v124 = v163;
      v172[0] = v163;
      v177 = 0;
      v175 = 0u;
      v176 = 0u;
      v125 = type metadata accessor for DriverKitDaemon();
      swift_retain(v124);
      v126 = v161;
      v127 = sub_1000CB2E8(v161, v53, (unint64_t)v54, (uint64_t (*)(void))v110, 0, 0, (uint64_t)&v175, v125, (uint64_t)&off_10014B488);
      sub_1000124F8((uint64_t)&v175, &qword_100158010);
      swift_release(v172[0]);
      *(_QWORD *)&v175 = 0;
      *((_QWORD *)&v175 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(76);
      v128._countAndFlagsBits = 0x646568636E75614CLL;
      v128._object = (void *)0xEE00207478656420;
      String.append(_:)(v128);
      v129 = *(uint64_t (**)(uint64_t))(*v126 + 144);
      v130 = v164;
      v131 = swift_retain(v164);
      v132 = v129(v131);
      v134 = v133;
      swift_release(v130);
      v135._countAndFlagsBits = v132;
      v135._object = v134;
      String.append(_:)(v135);
      swift_bridgeObjectRelease(v134);
      v136._object = (void *)0x8000000100125CC0;
      v136._countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v136);
      v137._countAndFlagsBits = (uint64_t)v53;
      v137._object = v54;
      String.append(_:)(v137);
      v138._countAndFlagsBits = 0x20676174202CLL;
      v138._object = (void *)0xE600000000000000;
      String.append(_:)(v138);
      v139 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v140 = swift_allocObject(v139, 72, 7);
      v169 = xmmword_10010F050;
      *(_OWORD *)(v140 + 16) = xmmword_10010F050;
      *(_QWORD *)(v140 + 56) = &type metadata for UInt64;
      *(_QWORD *)(v140 + 64) = &protocol witness table for UInt64;
      *(_QWORD *)(v140 + 32) = v110;
      v141._countAndFlagsBits = String.init(format:_:)(0x583230257830, 0xE600000000000000, v140);
      object = v141._object;
      String.append(_:)(v141);
      swift_bridgeObjectRelease(object);
      v143._countAndFlagsBits = 0xD000000000000010;
      v143._object = (void *)0x8000000100125CE0;
      String.append(_:)(v143);
      v144 = swift_allocObject(v139, 72, 7);
      *(_OWORD *)(v144 + 16) = v169;
      *(_QWORD *)(v144 + 56) = &type metadata for UInt32;
      *(_QWORD *)(v144 + 64) = &protocol witness table for UInt32;
      *(_DWORD *)(v144 + 32) = 0;
      v145._countAndFlagsBits = String.init(format:_:)(0x583230257830, 0xE600000000000000, v144);
      v146 = v145._object;
      String.append(_:)(v145);
      swift_bridgeObjectRelease(v146);
      v147._countAndFlagsBits = 0x20646970203ALL;
      v147._object = (void *)0xE600000000000000;
      String.append(_:)(v147);
      LODWORD(v172[0]) = v127;
      v148._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      v149 = v148._object;
      String.append(_:)(v148);
      swift_bridgeObjectRelease(v149);
      v150._countAndFlagsBits = 10;
      v150._object = (void *)0xE100000000000000;
      String.append(_:)(v150);
      v151 = *((_QWORD *)&v175 + 1);
      v171(v175, *((_QWORD *)&v175 + 1), 0);
      sub_1000390EC(v162);
      swift_bridgeObjectRelease(v151);
      swift_release(v165);
      return swift_release(v130);
    }
    v58 = HIBYTE(v168) & 0xF;
    v59 = v19;
    v60 = v19 & 0xFFFFFFFFFFFFLL;
    if ((v168 & 0x2000000000000000) != 0)
      v61 = HIBYTE(v168) & 0xF;
    else
      v61 = v19 & 0xFFFFFFFFFFFFLL;
    if (!v61)
    {
LABEL_74:
      swift_bridgeObjectRetain(v57);
      v63 = sub_100083F38(v59, (unint64_t)v57, 0x10uLL);
      if ((v123 & 1) == 0)
      {
LABEL_75:
        v110 = v63;
        goto LABEL_76;
      }
      *(_QWORD *)&v175 = 0;
      *((_QWORD *)&v175 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease(*((_QWORD *)&v175 + 1));
      *(_QWORD *)&v175 = 543646036;
      *((_QWORD *)&v175 + 1) = 0xE400000000000000;
      v152._countAndFlagsBits = v59;
      v152._object = v57;
      String.append(_:)(v152);
      v153._countAndFlagsBits = 0xD00000000000001ALL;
      v153._object = (void *)0x8000000100125D00;
      String.append(_:)(v153);
      v154 = v175;
      v155 = sub_1000122F8();
      v156 = swift_allocError(&type metadata for KMError, v155, 0, 0);
      *(_OWORD *)v157 = v154;
      *(_OWORD *)(v157 + 16) = 0u;
      *(_OWORD *)(v157 + 32) = 0u;
      *(_OWORD *)(v157 + 48) = 0u;
      *(_QWORD *)(v157 + 64) = 0;
      *(_BYTE *)(v157 + 72) = 9;
      swift_willThrow(v156);
      v71 = v156;
      sub_1000390EC(v162);
      swift_release(v165);
      swift_release(v164);
      goto LABEL_24;
    }
    if ((v168 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain(v168);
      v158 = sub_1000843EC(v19, (uint64_t)v57, 10);
      v160 = v159;
      swift_bridgeObjectRelease(v57);
      v54 = a4;
      v53 = (_QWORD *)a3;
      if ((v160 & 1) == 0)
      {
        v110 = (uint64_t)v158;
        goto LABEL_76;
      }
      v57 = (void *)v168;
      v59 = v19;
      goto LABEL_74;
    }
    if ((v168 & 0x2000000000000000) == 0)
    {
      if ((v19 & 0x1000000000000000) != 0)
        v62 = (unsigned __int8 *)((v168 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v62 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v19, v168);
      v63 = (uint64_t)sub_1000844D0(v62, v60, 10);
      if ((v64 & 1) == 0)
        goto LABEL_75;
      goto LABEL_74;
    }
    *(_QWORD *)&v175 = v19;
    *((_QWORD *)&v175 + 1) = v168 & 0xFFFFFFFFFFFFFFLL;
    if (v19 == 43)
    {
      if (!v58)
        goto LABEL_85;
      if (v58 == 1 || (BYTE1(v19) - 48) > 9u)
        goto LABEL_74;
      v111 = (BYTE1(v19) - 48);
      v113 = v58 - 2;
      if (v58 == 2)
        goto LABEL_58;
      v114 = (unsigned __int8 *)&v175 + 2;
      while (1)
      {
        v115 = *v114 - 48;
        if (v115 > 9)
          break;
        if (!is_mul_ok(v111, 0xAuLL)
          || (v116 = __CFADD__(10 * v111, v115), v111 = 10 * v111 + v115, v116))
        {
LABEL_78:
          v54 = a4;
          v53 = (_QWORD *)a3;
          v57 = (void *)v168;
          v59 = v19;
          goto LABEL_74;
        }
        v117 = 0;
        ++v114;
        --v113;
        v54 = a4;
        v53 = (_QWORD *)a3;
        v57 = (void *)v168;
        v59 = v19;
        if (!v113)
          goto LABEL_73;
      }
    }
    else
    {
      if (v19 == 45)
      {
        if (v58)
        {
          if (v58 == 1 || (BYTE1(v19) - 48) > 9u)
            goto LABEL_74;
          v111 = -(uint64_t)(BYTE1(v19) - 48);
          if (BYTE1(v19) == 48)
          {
            v112 = v58 - 2;
            if (v58 == 2)
            {
              v54 = a4;
              v53 = (_QWORD *)a3;
              v110 = -(uint64_t)(BYTE1(v19) - 48);
              goto LABEL_76;
            }
            v121 = (unsigned __int8 *)&v175 + 2;
            v54 = a4;
            v53 = (_QWORD *)a3;
            v57 = (void *)v168;
            v59 = v19;
            while (1)
            {
              v122 = *v121 - 48;
              if (v122 > 9)
                goto LABEL_72;
              if (!is_mul_ok(v111, 0xAuLL))
                goto LABEL_78;
              v116 = 10 * v111 >= v122;
              v111 = 10 * v111 - v122;
              if (!v116)
                goto LABEL_78;
              v117 = 0;
              ++v121;
              --v112;
              v54 = a4;
              v53 = (_QWORD *)a3;
              v57 = (void *)v168;
              v59 = v19;
              if (!v112)
                goto LABEL_73;
            }
          }
          goto LABEL_86;
        }
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        v54 = a4;
        v53 = (_QWORD *)a3;
        v57 = (void *)v168;
        v59 = v19;
        goto LABEL_74;
      }
      if (!v58 || (v19 - 48) > 9u)
        goto LABEL_74;
      v111 = (v19 - 48);
      v118 = v58 - 1;
      if (v58 == 1)
      {
LABEL_58:
        v110 = v111;
        goto LABEL_76;
      }
      v119 = (unsigned __int8 *)&v175 + 1;
      while (1)
      {
        v120 = *v119 - 48;
        if (v120 > 9)
          break;
        if (!is_mul_ok(v111, 0xAuLL))
          goto LABEL_78;
        v116 = __CFADD__(10 * v111, v120);
        v111 = 10 * v111 + v120;
        if (v116)
          goto LABEL_78;
        v117 = 0;
        ++v119;
        --v118;
        v54 = a4;
        v53 = (_QWORD *)a3;
        v57 = (void *)v168;
        v59 = v19;
        if (!v118)
          goto LABEL_73;
      }
    }
LABEL_72:
    v111 = 0;
    v117 = 1;
LABEL_73:
    v110 = v111;
    if ((v117 & 1) == 0)
      goto LABEL_76;
    goto LABEL_74;
  }
  *(_QWORD *)&v175 = 0;
  *((_QWORD *)&v175 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(71);
  v99._countAndFlagsBits = 0xD000000000000011;
  v99._object = (void *)0x8000000100125C60;
  String.append(_:)(v99);
  v100._countAndFlagsBits = a3;
  v100._object = a4;
  String.append(_:)(v100);
  v101._countAndFlagsBits = 0xD000000000000032;
  v101._object = (void *)0x8000000100125C80;
  String.append(_:)(v101);
  v102 = Set.description.getter(v52, &type metadata for String, &protocol witness table for String);
  v104 = v103;
  swift_bridgeObjectRelease(v52);
  v105._countAndFlagsBits = v102;
  v105._object = v104;
  String.append(_:)(v105);
  swift_bridgeObjectRelease(v104);
  v106 = v175;
  v107 = sub_1000122F8();
  v108 = swift_allocError(&type metadata for KMError, v107, 0, 0);
  *(_OWORD *)v109 = v106;
  *(_OWORD *)(v109 + 16) = 0u;
  *(_OWORD *)(v109 + 32) = 0u;
  *(_OWORD *)(v109 + 48) = 0u;
  *(_QWORD *)(v109 + 64) = 0;
  *(_BYTE *)(v109 + 72) = 9;
  swift_willThrow(v108);
  v71 = v108;
  swift_release(v165);
  swift_release(v164);
  sub_1000390EC(v56);
LABEL_24:
  v72 = v171;
LABEL_25:
  v173 = v71;
  swift_errorRetain(v71);
  v73 = sub_100005C88(&qword_10015AB50);
  if (swift_dynamicCast(v172, &v173, v73, &type metadata for KMError, 0))
  {
    swift_errorRelease(v71);
    sub_100051590((uint64_t)v172, (uint64_t)&v175);
    v74 = sub_1000B60F8();
    v72(0, 0, v74);

    sub_100082630((uint64_t)&v175);
    v75 = v173;
  }
  else
  {
    swift_errorRelease(v173);
    v76 = (void *)_convertErrorToNSError(_:)(v71);
    v72(0, 0, v76);

    v75 = v71;
  }
  return swift_errorRelease(v75);
}

void sub_100083B58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  if (v5)
    goto LABEL_10;
LABEL_16:
  if (!__OFADD__(v7++, 1))
  {
    if (v7 >= v6)
      goto LABEL_40;
    v20 = *(_QWORD *)(v2 + 8 * v7);
    if (v20)
    {
LABEL_28:
      v5 = (v20 - 1) & v20;
      for (i = __clz(__rbit64(v20)) + (v7 << 6); ; i = v10 | (v7 << 6))
      {
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
        swift_bridgeObjectRetain(v22);
        v23 = (uint64_t *)sub_10008F4D8();
        if (!*(_QWORD *)(v22 + 16))
          break;
        v24 = *v23;
        v25 = v23[1];
        swift_bridgeObjectRetain(v25);
        v26 = sub_100005DE8(v24, v25);
        if ((v27 & 1) != 0)
        {
          sub_100005D28(*(_QWORD *)(v22 + 56) + 32 * v26, (uint64_t)&v28);
        }
        else
        {
          v28 = 0u;
          v29 = 0u;
        }
        swift_bridgeObjectRelease(v25);
        if (!*((_QWORD *)&v29 + 1))
          goto LABEL_6;
        if ((swift_dynamicCast(&v30, &v28, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
          goto LABEL_7;
LABEL_8:
        swift_bridgeObjectRelease(v22);
        v9 = v31;
        if (v31)
        {
          v12 = v30;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
          v32 = v12;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v8 = sub_10000C500(0, v8[2] + 1, 1, v8);
          v14 = v8;
          v15 = v8[2];
          v16 = v14;
          v17 = v14[3];
          if (v15 >= v17 >> 1)
            v16 = sub_10000C500((_QWORD *)(v17 > 1), v15 + 1, 1, v16);
          v16[2] = v15 + 1;
          v18 = &v16[2 * v15];
          v8 = v16;
          v18[4] = v32;
          v18[5] = v9;
          if (!v5)
            goto LABEL_16;
        }
        else if (!v5)
        {
          goto LABEL_16;
        }
LABEL_10:
        v10 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
      }
      v28 = 0u;
      v29 = 0u;
LABEL_6:
      sub_1000124F8((uint64_t)&v28, &qword_100158018);
LABEL_7:
      v30 = 0;
      v31 = 0;
      goto LABEL_8;
    }
    v21 = v7 + 1;
    if (v7 + 1 >= v6)
      goto LABEL_40;
    v20 = *(_QWORD *)(v2 + 8 * v21);
    if (!v20)
    {
      v21 = v7 + 2;
      if (v7 + 2 >= v6)
        goto LABEL_40;
      v20 = *(_QWORD *)(v2 + 8 * v21);
      if (!v20)
      {
        v21 = v7 + 3;
        if (v7 + 3 >= v6)
          goto LABEL_40;
        v20 = *(_QWORD *)(v2 + 8 * v21);
        if (!v20)
        {
          v21 = v7 + 4;
          if (v7 + 4 < v6)
          {
            v20 = *(_QWORD *)(v2 + 8 * v21);
            if (v20)
              goto LABEL_27;
            while (1)
            {
              v7 = v21 + 1;
              if (__OFADD__(v21, 1))
                goto LABEL_42;
              if (v7 >= v6)
                break;
              v20 = *(_QWORD *)(v2 + 8 * v7);
              ++v21;
              if (v20)
                goto LABEL_28;
            }
          }
LABEL_40:
          swift_release(a1);
          return;
        }
      }
    }
LABEL_27:
    v7 = v21;
    goto LABEL_28;
  }
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t sub_100083E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100083F38(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  unsigned int v18;
  char v19;
  unint64_t v20;
  unsigned __int8 v21;
  BOOL v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 *v27;
  unsigned int v28;
  char v29;
  unint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 *v35;
  unsigned int v36;
  char v37;
  unint64_t v38;
  unsigned __int8 v39;
  char v40;
  _QWORD v41[3];

  if (a3 - 37 < 0xFFFFFFFFFFFFFFDDLL)
  {
    __break(1u);
LABEL_75:
    swift_bridgeObjectRelease(v3);
    return 0;
  }
  v3 = a2;
  v4 = HIBYTE(a2) & 0xF;
  v5 = result & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0)
    v6 = v4;
  else
    v6 = result & 0xFFFFFFFFFFFFLL;
  if (!v6)
    goto LABEL_75;
  if ((v3 & 0x1000000000000000) == 0)
  {
    if ((v3 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v8 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v3);
      v9 = sub_1000844D0(v8, v5, a3);
      v11 = v10 & 1;
      goto LABEL_11;
    }
    v41[0] = result;
    v41[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (v4)
      {
        v23 = v4 - 1;
        if (v23)
        {
          v13 = 0;
          v24 = a3 + 48;
          v25 = a3 + 55;
          v26 = a3 + 87;
          if (a3 > 0xA)
          {
            v24 = 58;
          }
          else
          {
            v26 = 97;
            v25 = 65;
          }
          v27 = (unsigned __int8 *)v41 + 1;
          v11 = 1;
          do
          {
            v28 = *v27;
            if (v28 < 0x30 || v28 >= v24)
            {
              if (v28 < 0x41 || v28 >= v25)
              {
                v9 = 0;
                if (v28 < 0x61 || v28 >= v26)
                  goto LABEL_11;
                v29 = -87;
              }
              else
              {
                v29 = -55;
              }
            }
            else
            {
              v29 = -48;
            }
            if (!is_mul_ok(v13, a3))
              goto LABEL_73;
            v30 = v13 * a3;
            v31 = v28 + v29;
            v22 = __CFADD__(v30, v31);
            v13 = v30 + v31;
            if (v22)
              goto LABEL_73;
            ++v27;
            --v23;
          }
          while (v23);
LABEL_72:
          v11 = 0;
          v9 = (unsigned __int8 *)v13;
          goto LABEL_11;
        }
        goto LABEL_73;
      }
    }
    else
    {
      if (result != 45)
      {
        if (v4)
        {
          v13 = 0;
          v32 = a3 + 48;
          v33 = a3 + 55;
          v34 = a3 + 87;
          if (a3 > 0xA)
          {
            v32 = 58;
          }
          else
          {
            v34 = 97;
            v33 = 65;
          }
          v35 = (unsigned __int8 *)v41;
          v11 = 1;
          while (1)
          {
            v36 = *v35;
            if (v36 < 0x30 || v36 >= v32)
            {
              if (v36 < 0x41 || v36 >= v33)
              {
                v9 = 0;
                if (v36 < 0x61 || v36 >= v34)
                  goto LABEL_11;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            if (!is_mul_ok(v13, a3))
              goto LABEL_73;
            v38 = v13 * a3;
            v39 = v36 + v37;
            v22 = __CFADD__(v38, v39);
            v13 = v38 + v39;
            if (v22)
              goto LABEL_73;
            ++v35;
            if (!--v4)
              goto LABEL_72;
          }
        }
        goto LABEL_73;
      }
      if (v4)
      {
        v12 = v4 - 1;
        if (v12)
        {
          v13 = 0;
          v14 = a3 + 48;
          v15 = a3 + 55;
          v16 = a3 + 87;
          if (a3 > 0xA)
          {
            v14 = 58;
          }
          else
          {
            v16 = 97;
            v15 = 65;
          }
          v17 = (unsigned __int8 *)v41 + 1;
          v11 = 1;
          while (1)
          {
            v18 = *v17;
            if (v18 < 0x30 || v18 >= v14)
            {
              if (v18 < 0x41 || v18 >= v15)
              {
                v9 = 0;
                if (v18 < 0x61 || v18 >= v16)
                  goto LABEL_11;
                v19 = -87;
              }
              else
              {
                v19 = -55;
              }
            }
            else
            {
              v19 = -48;
            }
            if (!is_mul_ok(v13, a3))
              break;
            v20 = v13 * a3;
            v21 = v18 + v19;
            v22 = v20 >= v21;
            v13 = v20 - v21;
            if (!v22)
              break;
            ++v17;
            if (!--v12)
              goto LABEL_72;
          }
        }
LABEL_73:
        v9 = 0;
        v11 = 1;
        goto LABEL_11;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  v9 = sub_1000843EC(result, v3, a3);
  v11 = v40;
LABEL_11:
  swift_bridgeObjectRelease(v3);
  if ((v11 & 1) != 0)
    return 0;
  else
    return (uint64_t)v9;
}

uint64_t sub_100084348()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100084374@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *a1 = v2;
  return swift_retain(v2);
}

id sub_100084384()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)v0 + 24);
}

__objc2_prot *sub_100084390()
{
  return &OBJC_PROTOCOL____TtP10driverkitd29DriverKitDaemonClientProtocol_;
}

uint64_t sub_10008439C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 96))(*a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for DriverKitDaemonXPCRequestDelegate()
{
  return objc_opt_self(_TtC10driverkitd33DriverKitDaemonXPCRequestDelegate);
}

unsigned __int8 *sub_1000843EC(uint64_t a1, uint64_t a2, int64_t a3)
{
  __n128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  v4 = swift_bridgeObjectRetain(a2);
  v5 = String.init<A>(_:)(&v15, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v4);
  v7 = v5;
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_100013FE8(v5, v6);
  v12 = v11;
  swift_bridgeObjectRelease(v8);
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }
LABEL_7:
  v13 = sub_1000844D0(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13;
}

unsigned __int8 *sub_1000844D0(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 v33;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v14 = v9 * a3;
              v15 = v11 + v12;
              v16 = v14 >= v15;
              v9 = v14 - v15;
              if (!v16)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      v26 = a3 + 48;
      v27 = a3 + 55;
      v28 = a3 + 87;
      if (a3 > 10)
      {
        v26 = 58;
      }
      else
      {
        v28 = 97;
        v27 = 65;
      }
      if (result)
      {
        v29 = 0;
        do
        {
          v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              v13 = 0;
              if (v30 < 0x61 || v30 >= v28)
                return (unsigned __int8 *)v13;
              v31 = -87;
            }
            else
            {
              v31 = -55;
            }
          }
          else
          {
            v31 = -48;
          }
          if (!is_mul_ok(v29, a3))
            return 0;
          v32 = v29 * a3;
          v33 = v30 + v31;
          v16 = __CFADD__(v32, v33);
          v29 = v32 + v33;
          if (v16)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  v17 = a2 - 1;
  if (a2 == 1)
    return 0;
  v18 = a3 + 48;
  v19 = a3 + 55;
  v20 = a3 + 87;
  if (a3 > 10)
  {
    v18 = 58;
  }
  else
  {
    v20 = 97;
    v19 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v21 = result + 1;
  do
  {
    v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        v13 = 0;
        if (v22 < 0x61 || v22 >= v20)
          return (unsigned __int8 *)v13;
        v23 = -87;
      }
      else
      {
        v23 = -55;
      }
    }
    else
    {
      v23 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v24 = v9 * a3;
    v25 = v22 + v23;
    v16 = __CFADD__(v24, v25);
    v9 = v24 + v25;
    if (v16)
      return 0;
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10008474C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Class isa;
  uint64_t v20;

  v4 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v5 = (void *)static OS_os_log.default.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)("Incoming request for approval state", 35, 2, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 336);
  v9 = swift_retain(v7);
  v10 = v8(v9);
  swift_release(v7);
  v11 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = PropertyListEncoder.init()();
  v20 = v10;
  v13 = sub_100082564();
  v15 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v20, &type metadata for ApprovalSettingsState, v13, v14);
  v17 = v16;
  swift_bridgeObjectRelease(v10);
  swift_release(v12);
  sub_1000122B4(v15, v17);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, _QWORD))(a2 + 16))(a2, isa, 0);

  sub_100011F40(v15, v17);
  return sub_100011F40(v15, v17);
}

uint64_t sub_100084C24(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[2];
  char v18;
  _OWORD v19[2];
  char v20;

  v8 = swift_allocObject(&unk_10014A040, 24, 7);
  *(_QWORD *)(v8 + 16) = a4;
  v9 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = _Block_copy(a4);
  v11 = PropertyListDecoder.init()(v10);
  v12 = sub_100069B00();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v17, &type metadata for ApprovalDBEntry, a1, a2, &type metadata for ApprovalDBEntry, v12);
  swift_release(v11);
  v19[0] = v17[0];
  v19[1] = v17[1];
  v20 = v18;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 96);
  type metadata accessor for ApprovalStateUpdateRequest(0);
  v14 = swift_allocObject(&unk_10014A068, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100085FCC;
  *(_QWORD *)(v14 + 24) = v8;
  swift_retain(v13);
  sub_100067500(v19);
  swift_retain(v8);
  v15 = ApprovalStateUpdateRequest.__allocating_init(entry:callback:)((uint64_t)v19, (uint64_t)sub_10008601C, v14);
  (*(void (**)(void))(*(_QWORD *)v13 + 304))();
  swift_release(v13);
  swift_release(v15);
  sub_100067584(v19);
  return swift_release(v8);
}

uint64_t sub_100084ED0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100075E20(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

void sub_100084F64(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t countAndFlagsBits;
  uint64_t v34;
  void *object;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void (*v47)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unint64_t v65;
  void (**v66)(_QWORD, _QWORD, _QWORD);
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  void *v78;
  Swift::String v79;
  Swift::String v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  Swift::String v86;
  Swift::String v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  Swift::String v93;
  Swift::String v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  uint64_t v103;
  void *v104;
  void *v105;
  Swift::String v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned int v117;
  BOOL v118;
  char v119;
  uint64_t v120;
  unsigned __int8 *v121;
  unsigned int v122;
  unsigned __int8 *v123;
  unsigned int v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  unsigned int v129;
  uint64_t *v130;
  unsigned int v131;
  Swift::String v132;
  uint64_t (*v133)(uint64_t);
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  Swift::String v139;
  Swift::String v140;
  Swift::String v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  Swift::String v145;
  void *v146;
  Swift::String v147;
  uint64_t v148;
  Swift::String v149;
  void *v150;
  Swift::String v151;
  Swift::String v152;
  void *v153;
  Swift::String v154;
  uint64_t v155;
  NSString v156;
  Swift::String v157;
  Swift::String v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 *v164;
  char v165;
  char v166;
  _QWORD *v167;
  _QWORD *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  Swift::String v173;
  uint64_t v174;
  unint64_t v175;
  __int128 v176;
  uint64_t v177[10];
  uint64_t v178;
  uint64_t v179[7];
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  char v183;
  uint64_t v184;

  *(_QWORD *)&v176 = a8;
  v175 = a6;
  v174 = a5;
  v13 = type metadata accessor for LookupSpec(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v167 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v180 = a7;
  v16 = type metadata accessor for DriverKitDaemonXPCRequestDelegate();
  nullsub_1(v16, &off_10015A6F0, v17, v18);
  v171 = v13;
  v172 = v15;
  v173._countAndFlagsBits = a1;
  v173._object = a2;
  v19 = v175;
  *(_QWORD *)&v180 = a7;
  sub_100074980(v16, (uint64_t)&off_10015A6F0);
  v170 = 0;
  v20 = *(_QWORD **)(a7 + 16);
  swift_beginAccess(v20 + 2, v177, 32, 0);
  v21 = v20[5];
  v22 = v20[6];
  sub_100004DE4(v20 + 2, v21);
  sub_100071700(v21, v22);
  v23 = *((_QWORD *)&v181 + 1);
  v24 = v182;
  sub_100004DE4(&v180, *((uint64_t *)&v181 + 1));
  swift_endAccess(v177);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 80))(v23, v24);
  if (!v26)
  {
    sub_100005D08(&v180);
    goto LABEL_22;
  }
  v27 = v25;
  v28 = v26;
  sub_100005D08(&v180);
  v29 = sub_100090390(v27, v28, 0, 0);
  if (!v29)
  {
    v74 = sub_1000122F8();
    v70 = swift_allocError(&type metadata for KMError, v74, 0, 0);
    v72 = v70;
    *(_QWORD *)v71 = 0xD00000000000002DLL;
    *(_QWORD *)(v71 + 8) = 0x8000000100125D20;
    *(_OWORD *)(v71 + 16) = 0u;
    *(_OWORD *)(v71 + 32) = 0u;
    *(_OWORD *)(v71 + 48) = 0u;
    *(_QWORD *)(v71 + 64) = 0;
    v73 = 9;
    goto LABEL_24;
  }
  v30 = (unint64_t)v29;
  if (v29 == (_QWORD *)5)
  {
LABEL_22:
    v69 = sub_1000122F8();
    v70 = swift_allocError(&type metadata for KMError, v69, 0, 0);
    v72 = v70;
    *(_QWORD *)v71 = 0xD000000000000017;
    *(_QWORD *)(v71 + 8) = 0x8000000100125BC0;
    *(_OWORD *)(v71 + 16) = 0u;
    *(_OWORD *)(v71 + 32) = 0u;
    *(_OWORD *)(v71 + 48) = 0u;
    *(_QWORD *)(v71 + 64) = 0;
    v73 = 2;
LABEL_24:
    *(_BYTE *)(v71 + 72) = v73;
    swift_willThrow(v70);
    v53 = v72;
    goto LABEL_25;
  }
  v31 = sub_100097CC0();
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 144))(v31);
  swift_release(v31);
  sub_1000547A8(v32, (uint64_t)v179);
  swift_release(v32);
  countAndFlagsBits = v173._countAndFlagsBits;
  v34 = (uint64_t)v172;
  object = v173._object;
  *v172 = v173._countAndFlagsBits;
  *(_QWORD *)(v34 + 8) = object;
  swift_storeEnumTagMultiPayload(v34, v171, 0);
  swift_bridgeObjectRetain(object);
  v36 = (_QWORD *)sub_10005418C(v34);
  sub_100010C68(v179);
  sub_10005ACC8(v34);
  if (v36)
  {
    v37 = (uint64_t *)v36[3];
    v38 = type metadata accessor for DriverExtension(0);
    v39 = (_QWORD *)swift_dynamicCastClass(v37, v38);
    if (v39)
    {
      v168 = v39;
      v169 = v30;
      v172 = v37;
      swift_retain(v37);
      v171 = (uint64_t)v20;
      v40 = sub_100097CC0();
      v41 = *(_QWORD *)(v40 + 176);
      v42 = *(_QWORD *)(v40 + 184);
      swift_bridgeObjectRetain(v42);
      swift_release(v40);
      v43 = (uint64_t *)sub_10008F358();
      v45 = *v43;
      v44 = v43[1];
      v46 = v36;
      v47 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*v36 + 312);
      v48 = swift_bridgeObjectRetain(v44);
      v49 = v45;
      v50 = v46;
      v47(&v180, v41, v42, v49, v44, v48);
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v44);
      if (*((_QWORD *)&v181 + 1))
      {
        v51 = sub_100005C88(&qword_100158920);
        if ((swift_dynamicCast(v177, &v180, (char *)&type metadata for Any + 8, v51, 6) & 1) != 0)
        {
          v52 = v177[0];
          v53 = v170;
          sub_100083B58(v177[0]);
          v55 = v54;
          swift_bridgeObjectRelease(v52);
          v56 = sub_100084ED0(v55);
          swift_bridgeObjectRelease(v55);
          v57 = (_QWORD *)a3;
          v58 = a4;
          if ((sub_100083E04(a3, (uint64_t)a4, v56) & 1) != 0)
          {
            swift_bridgeObjectRelease(v56);
            v167 = v50;
            if (!v19)
            {
              *(_QWORD *)&v180 = 0;
              swift_stdlib_random(&v180, 8);
              v112 = v180;
              v66 = (void (**)(_QWORD, _QWORD, _QWORD))v176;
LABEL_78:
              v126 = v171;
              v177[0] = v171;
              v182 = 0;
              v180 = 0u;
              v181 = 0u;
              v127 = type metadata accessor for DriverKitDaemon();
              swift_retain(v126);
              v128 = v168;
              v129 = sub_1000CB2E8(v168, v57, (unint64_t)v58, (uint64_t (*)(void))v112, 0, 0, (uint64_t)&v180, v127, (uint64_t)&off_10014B488);
              if (!v53)
              {
                v131 = v129;
                sub_1000124F8((uint64_t)&v180, &qword_100158010);
                swift_release(v177[0]);
                *(_QWORD *)&v180 = 0;
                *((_QWORD *)&v180 + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(76);
                v132._countAndFlagsBits = 0x646568636E75614CLL;
                v132._object = (void *)0xEE00207478656420;
                String.append(_:)(v132);
                v133 = *(uint64_t (**)(uint64_t))(*v128 + 144);
                v134 = v172;
                v135 = swift_retain(v172);
                v136 = v133(v135);
                v138 = v137;
                swift_release(v134);
                v139._countAndFlagsBits = v136;
                v139._object = v138;
                String.append(_:)(v139);
                swift_bridgeObjectRelease(v138);
                v140._object = (void *)0x8000000100125CC0;
                v140._countAndFlagsBits = 0xD000000000000017;
                String.append(_:)(v140);
                v141._countAndFlagsBits = (uint64_t)v57;
                v141._object = v58;
                String.append(_:)(v141);
                v142._countAndFlagsBits = 0x20676174202CLL;
                v142._object = (void *)0xE600000000000000;
                String.append(_:)(v142);
                v143 = sub_100005C88((uint64_t *)&unk_1001596E0);
                v144 = swift_allocObject(v143, 72, 7);
                v176 = xmmword_10010F050;
                *(_OWORD *)(v144 + 16) = xmmword_10010F050;
                *(_QWORD *)(v144 + 56) = &type metadata for UInt64;
                *(_QWORD *)(v144 + 64) = &protocol witness table for UInt64;
                *(_QWORD *)(v144 + 32) = v112;
                v145._countAndFlagsBits = String.init(format:_:)(0x583230257830, 0xE600000000000000, v144);
                v146 = v145._object;
                String.append(_:)(v145);
                swift_bridgeObjectRelease(v146);
                v147._countAndFlagsBits = 0xD000000000000010;
                v147._object = (void *)0x8000000100125CE0;
                String.append(_:)(v147);
                v148 = swift_allocObject(v143, 72, 7);
                *(_OWORD *)(v148 + 16) = v176;
                *(_QWORD *)(v148 + 56) = &type metadata for UInt32;
                *(_QWORD *)(v148 + 64) = &protocol witness table for UInt32;
                *(_DWORD *)(v148 + 32) = 0;
                v149._countAndFlagsBits = String.init(format:_:)(0x583230257830, 0xE600000000000000, v148);
                v150 = v149._object;
                String.append(_:)(v149);
                swift_bridgeObjectRelease(v150);
                v151._countAndFlagsBits = 0x20646970203ALL;
                v151._object = (void *)0xE600000000000000;
                String.append(_:)(v151);
                LODWORD(v177[0]) = v131;
                v152._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
                v153 = v152._object;
                String.append(_:)(v152);
                swift_bridgeObjectRelease(v153);
                v154._countAndFlagsBits = 10;
                v154._object = (void *)0xE100000000000000;
                String.append(_:)(v154);
                v155 = *((_QWORD *)&v180 + 1);
                v156 = String._bridgeToObjectiveC()();
                ((void (**)(_QWORD, NSString, _QWORD))v66)[2](v66, v156, 0);

                sub_1000390EC(v169);
                swift_bridgeObjectRelease(v155);
                swift_release(v167);
                swift_release(v134);
                return;
              }
              swift_release(v172);
              swift_release(v167);
              sub_1000390EC(v169);
              sub_1000124F8((uint64_t)&v180, &qword_100158010);
              v130 = &v184;
              goto LABEL_82;
            }
            v59 = (void *)v19;
            v60 = HIBYTE(v19) & 0xF;
            v61 = v174;
            v62 = v174 & 0xFFFFFFFFFFFFLL;
            if ((v19 & 0x2000000000000000) != 0)
              v63 = HIBYTE(v19) & 0xF;
            else
              v63 = v174 & 0xFFFFFFFFFFFFLL;
            if (!v63)
            {
              v65 = v169;
              v66 = (void (**)(_QWORD, _QWORD, _QWORD))v176;
              goto LABEL_76;
            }
            if ((v19 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRetain(v19);
              v164 = sub_1000843EC(v61, v19, 10);
              v166 = v165;
              swift_bridgeObjectRelease(v19);
              if ((v166 & 1) == 0)
              {
                v58 = a4;
                v66 = (void (**)(_QWORD, _QWORD, _QWORD))v176;
                v57 = (_QWORD *)a3;
                v112 = (uint64_t)v164;
                goto LABEL_78;
              }
              goto LABEL_92;
            }
            if ((v19 & 0x2000000000000000) == 0)
            {
              if ((v174 & 0x1000000000000000) != 0)
                v64 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
              else
                v64 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v174, v19);
              v65 = v169;
              v66 = (void (**)(_QWORD, _QWORD, _QWORD))v176;
              v67 = (uint64_t)sub_1000844D0(v64, v62, 10);
              if (v53)
              {
                _Block_release(v66);
                __break(1u);
                return;
              }
              if ((v68 & 1) == 0)
              {
LABEL_77:
                v112 = v67;
                goto LABEL_78;
              }
LABEL_76:
              swift_bridgeObjectRetain(v59);
              v67 = sub_100083F38(v61, (unint64_t)v59, 0x10uLL);
              if ((v125 & 1) != 0)
              {
                *(_QWORD *)&v180 = 0;
                *((_QWORD *)&v180 + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(32);
                swift_bridgeObjectRelease(*((_QWORD *)&v180 + 1));
                *(_QWORD *)&v180 = 543646036;
                *((_QWORD *)&v180 + 1) = 0xE400000000000000;
                v157._countAndFlagsBits = v61;
                v157._object = v59;
                String.append(_:)(v157);
                v158._countAndFlagsBits = 0xD00000000000001ALL;
                v158._object = (void *)0x8000000100125D00;
                String.append(_:)(v158);
                v160 = *((_QWORD *)&v180 + 1);
                v159 = v180;
                v161 = sub_1000122F8();
                v162 = swift_allocError(&type metadata for KMError, v161, 0, 0);
                *(_OWORD *)v163 = __PAIR128__(v160, v159);
                *(_OWORD *)(v163 + 16) = 0u;
                *(_OWORD *)(v163 + 32) = 0u;
                *(_OWORD *)(v163 + 48) = 0u;
                *(_QWORD *)(v163 + 64) = 0;
                *(_BYTE *)(v163 + 72) = 9;
                swift_willThrow(v162);
                v53 = v162;
                sub_1000390EC(v65);
                swift_release(v167);
                v130 = (uint64_t *)&v183;
LABEL_82:
                swift_release(*(v130 - 32));
                goto LABEL_26;
              }
              goto LABEL_77;
            }
            *(_QWORD *)&v180 = v174;
            *((_QWORD *)&v180 + 1) = v19 & 0xFFFFFFFFFFFFFFLL;
            if (v174 == 43)
            {
              if (!v60)
                goto LABEL_91;
              if (v60 == 1 || (BYTE1(v174) - 48) > 9u)
                goto LABEL_58;
              v113 = (BYTE1(v174) - 48);
              v115 = v60 - 2;
              if (v60 != 2)
              {
                v116 = (unsigned __int8 *)&v180 + 2;
                while (1)
                {
                  v117 = *v116 - 48;
                  if (v117 > 9)
                    goto LABEL_74;
                  if (!is_mul_ok(v113, 0xAuLL)
                    || (v118 = __CFADD__(10 * v113, v117),
                        v113 = 10 * v113 + v117,
                        v118))
                  {
LABEL_83:
                    v113 = 0;
                    v119 = 1;
                    v58 = a4;
                    v57 = (_QWORD *)a3;
                    v59 = (void *)v19;
                    v61 = v174;
                    goto LABEL_75;
                  }
                  v119 = 0;
                  ++v116;
                  --v115;
                  v58 = a4;
                  v57 = (_QWORD *)a3;
                  v59 = (void *)v19;
                  v61 = v174;
                  if (!v115)
                    goto LABEL_75;
                }
              }
            }
            else
            {
              if (v174 == 45)
              {
                if (v60)
                {
                  if (v60 != 1 && (BYTE1(v174) - 48) <= 9u)
                  {
                    v113 = -(uint64_t)(BYTE1(v174) - 48);
                    if (BYTE1(v174) == 48)
                    {
                      v114 = v60 - 2;
                      if (v60 == 2)
                      {
                        v58 = a4;
                        v66 = (void (**)(_QWORD, _QWORD, _QWORD))v176;
                        v57 = (_QWORD *)a3;
                        v112 = -(uint64_t)(BYTE1(v174) - 48);
                        goto LABEL_78;
                      }
                      v123 = (unsigned __int8 *)&v180 + 2;
                      v58 = a4;
                      v57 = (_QWORD *)a3;
                      v59 = (void *)v19;
                      v61 = v174;
                      while (1)
                      {
                        v124 = *v123 - 48;
                        if (v124 > 9)
                          break;
                        if (!is_mul_ok(v113, 0xAuLL))
                          goto LABEL_83;
                        v118 = 10 * v113 >= v124;
                        v113 = 10 * v113 - v124;
                        if (!v118)
                          goto LABEL_83;
                        v119 = 0;
                        ++v123;
                        --v114;
                        v58 = a4;
                        v57 = (_QWORD *)a3;
                        v59 = (void *)v19;
                        v61 = v174;
                        if (!v114)
                          goto LABEL_75;
                      }
LABEL_74:
                      v113 = 0;
                      v119 = 1;
LABEL_75:
                      v65 = v169;
                      v66 = (void (**)(_QWORD, _QWORD, _QWORD))v176;
                      v112 = v113;
                      if ((v119 & 1) == 0)
                        goto LABEL_78;
                      goto LABEL_76;
                    }
LABEL_92:
                    v58 = a4;
                    v66 = (void (**)(_QWORD, _QWORD, _QWORD))v176;
                    v57 = (_QWORD *)a3;
                    v59 = (void *)v19;
                    v65 = v169;
                    v61 = v174;
                    goto LABEL_76;
                  }
LABEL_58:
                  v65 = v169;
                  v66 = (void (**)(_QWORD, _QWORD, _QWORD))v176;
                  goto LABEL_76;
                }
                __break(1u);
LABEL_91:
                __break(1u);
                goto LABEL_92;
              }
              if (!v60 || (v174 - 48) > 9u)
                goto LABEL_58;
              v113 = (v174 - 48);
              v120 = v60 - 1;
              if (v60 != 1)
              {
                v121 = (unsigned __int8 *)&v180 + 1;
                while (1)
                {
                  v122 = *v121 - 48;
                  if (v122 > 9)
                    goto LABEL_74;
                  if (!is_mul_ok(v113, 0xAuLL))
                    goto LABEL_83;
                  v118 = __CFADD__(10 * v113, v122);
                  v113 = 10 * v113 + v122;
                  if (v118)
                    goto LABEL_83;
                  v119 = 0;
                  ++v121;
                  --v120;
                  v58 = a4;
                  v57 = (_QWORD *)a3;
                  v59 = (void *)v19;
                  v61 = v174;
                  if (!v120)
                    goto LABEL_75;
                }
              }
            }
            v66 = (void (**)(_QWORD, _QWORD, _QWORD))v176;
            v112 = v113;
            goto LABEL_78;
          }
          *(_QWORD *)&v180 = 0;
          *((_QWORD *)&v180 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(71);
          v100._countAndFlagsBits = 0xD000000000000011;
          v100._object = (void *)0x8000000100125C60;
          String.append(_:)(v100);
          v101._countAndFlagsBits = a3;
          v101._object = a4;
          String.append(_:)(v101);
          v102._countAndFlagsBits = 0xD000000000000032;
          v102._object = (void *)0x8000000100125C80;
          String.append(_:)(v102);
          v103 = Set.description.getter(v56, &type metadata for String, &protocol witness table for String);
          v105 = v104;
          swift_bridgeObjectRelease(v56);
          v106._countAndFlagsBits = v103;
          v106._object = v105;
          String.append(_:)(v106);
          swift_bridgeObjectRelease(v105);
          v108 = *((_QWORD *)&v180 + 1);
          v107 = v180;
          v109 = sub_1000122F8();
          v110 = swift_allocError(&type metadata for KMError, v109, 0, 0);
          *(_OWORD *)v111 = __PAIR128__(v108, v107);
          *(_OWORD *)(v111 + 16) = 0u;
          *(_OWORD *)(v111 + 32) = 0u;
          *(_OWORD *)(v111 + 48) = 0u;
          *(_QWORD *)(v111 + 64) = 0;
          *(_BYTE *)(v111 + 72) = 9;
          swift_willThrow(v110);
          v53 = v110;
          goto LABEL_35;
        }
      }
      else
      {
        sub_1000124F8((uint64_t)&v180, &qword_100158018);
      }
      *(_QWORD *)&v180 = 0;
      *((_QWORD *)&v180 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(52);
      v93._countAndFlagsBits = 0x6F69736E65747845;
      v93._object = (void *)0xEA0000000000206ELL;
      String.append(_:)(v93);
      String.append(_:)(v173);
      v94._countAndFlagsBits = 0xD000000000000028;
      v94._object = (void *)0x8000000100125C30;
      String.append(_:)(v94);
      v96 = *((_QWORD *)&v180 + 1);
      v95 = v180;
      v97 = sub_1000122F8();
      v98 = swift_allocError(&type metadata for KMError, v97, 0, 0);
      *(_OWORD *)v99 = __PAIR128__(v96, v95);
      *(_OWORD *)(v99 + 16) = 0u;
      *(_OWORD *)(v99 + 32) = 0u;
      *(_OWORD *)(v99 + 48) = 0u;
      *(_QWORD *)(v99 + 64) = 0;
      *(_BYTE *)(v99 + 72) = 9;
      swift_willThrow(v98);
      v53 = v98;
LABEL_35:
      swift_release(v50);
      swift_release(v172);
      sub_1000390EC(v169);
      goto LABEL_25;
    }
    *(_QWORD *)&v180 = 0;
    *((_QWORD *)&v180 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(*((_QWORD *)&v180 + 1));
    *(_QWORD *)&v180 = 0x6F696E7365747845;
    *((_QWORD *)&v180 + 1) = 0xEA0000000000206ELL;
    v86._countAndFlagsBits = countAndFlagsBits;
    v86._object = object;
    String.append(_:)(v86);
    v87._countAndFlagsBits = 0xD00000000000001BLL;
    v87._object = (void *)0x8000000100125C10;
    String.append(_:)(v87);
    v89 = *((_QWORD *)&v180 + 1);
    v88 = v180;
    v90 = sub_1000122F8();
    v91 = swift_allocError(&type metadata for KMError, v90, 0, 0);
    *(_OWORD *)v92 = __PAIR128__(v89, v88);
    *(_OWORD *)(v92 + 16) = 0u;
    *(_OWORD *)(v92 + 32) = 0u;
    *(_OWORD *)(v92 + 48) = 0u;
    *(_QWORD *)(v92 + 64) = 0;
    *(_BYTE *)(v92 + 72) = 9;
    swift_willThrow(v91);
    v53 = v91;
    swift_release(v36);
  }
  else
  {
    *(_QWORD *)&v180 = 0;
    *((_QWORD *)&v180 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease(*((_QWORD *)&v180 + 1));
    *(_QWORD *)&v180 = 0xD000000000000029;
    *((_QWORD *)&v180 + 1) = 0x8000000100125BE0;
    v79._countAndFlagsBits = countAndFlagsBits;
    v79._object = object;
    String.append(_:)(v79);
    v80._countAndFlagsBits = 46;
    v80._object = (void *)0xE100000000000000;
    String.append(_:)(v80);
    v82 = *((_QWORD *)&v180 + 1);
    v81 = v180;
    v83 = sub_1000122F8();
    v84 = swift_allocError(&type metadata for KMError, v83, 0, 0);
    *(_OWORD *)v85 = __PAIR128__(v82, v81);
    *(_OWORD *)(v85 + 16) = 0u;
    *(_OWORD *)(v85 + 32) = 0u;
    *(_OWORD *)(v85 + 48) = 0u;
    *(_QWORD *)(v85 + 64) = 0;
    *(_BYTE *)(v85 + 72) = 10;
    swift_willThrow(v84);
    v53 = v84;
  }
  sub_1000390EC(v30);
LABEL_25:
  v66 = (void (**)(_QWORD, _QWORD, _QWORD))v176;
LABEL_26:
  v178 = v53;
  swift_errorRetain(v53);
  v75 = sub_100005C88(&qword_10015AB50);
  if (swift_dynamicCast(v177, &v178, v75, &type metadata for KMError, 0))
  {
    swift_errorRelease(v53);
    sub_100051590((uint64_t)v177, (uint64_t)&v180);
    v76 = sub_1000B60F8();
    ((void (**)(_QWORD, _QWORD, id))v66)[2](v66, 0, v76);

    sub_100082630((uint64_t)&v180);
    v77 = v178;
  }
  else
  {
    swift_errorRelease(v178);
    v78 = (void *)_convertErrorToNSError(_:)(v53);
    ((void (**)(_QWORD, _QWORD, void *))v66)[2](v66, 0, v78);

    v77 = v53;
  }
  swift_errorRelease(v77);
}

uint64_t sub_100085FCC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100085FDC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100086000(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  sub_100082054(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_100086008(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_errorRelease();
  return result;
}

uint64_t sub_100086020()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "bundleIdentifier");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_100086084()
{
  id *v0;
  id v1;

  v1 = objc_msgSend(*v0, "URL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

}

uint64_t sub_1000860D0(uint64_t a1, uint64_t a2)
{
  return sub_100086140(a1, a2, (SEL *)&selRef_uniqueInstallIdentifier);
}

uint64_t sub_1000860DC()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "driverExtensionPaths");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);

  return v3;
}

uint64_t sub_100086134(uint64_t a1, uint64_t a2)
{
  return sub_100086140(a1, a2, (SEL *)&selRef_installSessionIdentifier);
}

uint64_t sub_100086140(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v4 = objc_msgSend(*v3, *a3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t sub_1000861A0()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, "localizedName");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t sub_1000861F4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v20;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v20 - v8;
  v10 = URL.pathComponents.getter(v7);
  v11 = URL.pathComponents.getter(v10);
  v12 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRelease(v11);
  if (v12)
  {
    if (*(_QWORD *)(v10 + 16) >= v12)
    {
      if (qword_100163320 == -1)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_12:
  swift_once(&qword_100163320, sub_100086A00);
LABEL_4:
  v13 = sub_100086A14(v2, (uint64_t)qword_100175540);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v13, v2);
  v14 = v12 - 1;
  if (v12 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(a1, v9, v2);
  }
  else
  {
    swift_bridgeObjectRetain(v10);
    v15 = (_QWORD *)(v10 + 56);
    do
    {
      v16 = *(v15 - 1);
      v17 = *v15;
      swift_bridgeObjectRetain(*v15);
      URL.appendingPathComponent(_:isDirectory:)(v16, v17, 1);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      v18 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v18(v9, v6, v2);
      swift_bridgeObjectRelease(v17);
      v15 += 2;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease(v10);
    v18(a1, v9, v2);
  }
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_100086398@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;

  v2 = (uint64_t *)sub_1000900EC();
  v3 = *v2;
  v4 = (void *)v2[1];
  swift_bridgeObjectRetain(v4);
  sub_1000D46C0(v3, v4, a1);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000863E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  Swift::String v19;
  void *object;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  void *v29;
  Swift::String v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void (*v68)(void);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE v75[80];
  _BYTE v76[80];
  uint64_t v77[9];
  char v78;
  uint64_t v79;

  v68 = *(void (**)(void))(*a1 + 168);
  v2 = ((uint64_t (*)(_QWORD *))v68)(a1);
  v3 = sub_100005C88(&qword_100158C08);
  v4 = swift_allocObject(v3, 48, 7);
  *(_OWORD *)(v4 + 16) = xmmword_10010F380;
  v5 = sub_10002BDAC();
  *(_QWORD *)(v4 + 32) = *v5;
  *(_QWORD *)(v4 + 40) = *sub_10002BE6C();
  v73 = v4;
  v6 = sub_100039BE8();
  v7 = sub_100005C88(&qword_10015A828);
  v8 = sub_1000898E8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v71, &v73, v7, v8, &type metadata for RealizedInfo.Flags, v6);
  v73 = v2;
  result = dispatch thunk of SetAlgebra.isSubset(of:)(&v73, &type metadata for RealizedInfo.Flags, v6);
  if ((result & 1) == 0)
  {
    v68();
    v10 = swift_allocObject(v3, 48, 7);
    *(_OWORD *)(v10 + 16) = xmmword_10010F380;
    *(_QWORD *)(v10 + 32) = *sub_10002BFCC();
    *(_QWORD *)(v10 + 40) = *sub_10002C17C();
    v73 = v10;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v71, &v73, v7, v8, &type metadata for RealizedInfo.Flags, v6);
    sub_100039BA0();
    dispatch thunk of RawRepresentable.rawValue.getter(&v79, &type metadata for RealizedInfo.Flags);
    v11 = sub_100039B14();
    dispatch thunk of OptionSet.init(rawValue:)(&v79, &type metadata for RealizedInfo.Flags, v11);
    dispatch thunk of SetAlgebra.formIntersection(_:)(&v71, &type metadata for RealizedInfo.Flags, v6);
    v12 = v73;
    dispatch thunk of SetAlgebra.init()(&v71, &type metadata for RealizedInfo.Flags, v6);
    v13 = sub_100039C30();
    v14 = a1;
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v73, &v71, &type metadata for RealizedInfo.Flags, v13) & 1) != 0)
    {
      v15 = (*(uint64_t (**)(void))(*a1 + 240))();
      v73 = 0;
      v74 = 0xE000000000000000;
      v16 = *(_QWORD *)(v15 + 16);
      if (v16)
      {
        v67 = v14;
        v70 = v15 + 32;
        v66 = v15;
        swift_bridgeObjectRetain(v15);
        v17 = 0;
        v18 = v5;
        v69 = v16;
        do
        {
          sub_100051590(v70 + 80 * v17, (uint64_t)v76);
          v25 = *(_QWORD *)(v70 + 80 * v17);
          sub_100051590((uint64_t)v76, (uint64_t)v77);
          if (v78)
          {
            sub_10008997C((uint64_t)v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000515CC);
            sub_1000B47F4();
            object = v19._object;
            v71 = 10;
            v72 = 0xE100000000000000;
            String.append(_:)(v19);
            v21 = object;
            v18 = v5;
            swift_bridgeObjectRelease(v21);
            v22 = v71;
            v23 = v72;
          }
          else
          {
            v71 = 0;
            v72 = 0xE000000000000000;
            v26 = *(_QWORD *)(v77[0] + 16);
            if (v26)
            {
              v27 = v77[0] + 32;
              sub_10008997C((uint64_t)v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000515CC);
              swift_bridgeObjectRetain(v25);
              do
              {
                sub_100051590(v27, (uint64_t)v75);
                sub_10008997C((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000515CC);
                sub_1000B47F4();
                v29 = v28._object;
                String.append(_:)(v28);
                swift_bridgeObjectRelease(v29);
                v30._countAndFlagsBits = 10;
                v30._object = (void *)0xE100000000000000;
                String.append(_:)(v30);
                swift_bridgeObjectRelease(0xE100000000000000);
                sub_10008997C((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000391DC);
                v27 += 80;
                --v26;
              }
              while (v26);
              sub_10008997C((uint64_t)v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000391DC);
              v22 = v71;
              v23 = v72;
              v18 = v5;
              v16 = v69;
            }
            else
            {
              swift_bridgeObjectRetain(v25);
              v22 = 0;
              v23 = 0xE000000000000000;
              v16 = v69;
            }
          }
          v24 = v23;
          String.append(_:)(*(Swift::String *)&v22);
          ++v17;
          swift_bridgeObjectRelease(v23);
          sub_10008997C((uint64_t)v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000391DC);
        }
        while (v17 != v16);
        v47 = swift_bridgeObjectRelease_n(v66, 2);
        v49 = v73;
        v48 = (void *)v74;
        v14 = v67;
        v50 = ((uint64_t (*)(uint64_t))v68)(v47);
      }
      else
      {
        v51 = swift_bridgeObjectRelease(v15);
        v49 = 0;
        v48 = (void *)0xE000000000000000;
        v18 = v5;
        v50 = ((uint64_t (*)(uint64_t))v68)(v51);
      }
      v73 = *v18;
      v71 = v50;
      if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v73, &type metadata for RealizedInfo.Flags, v6) & 1) != 0)
      {
        v71 = v14[3];
        v52 = type metadata accessor for OSExtension(0);
        v53 = sub_100089934();
        v73 = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
        v74 = v54;
        v55._countAndFlagsBits = 2618;
        v55._object = (void *)0xE200000000000000;
        String.append(_:)(v55);
        v56._countAndFlagsBits = v49;
        v56._object = v48;
        String.append(_:)(v56);
        swift_bridgeObjectRelease(v48);
        v57 = v73;
        v41 = v74;
        v58 = sub_1000122F8();
        v44 = swift_allocError(&type metadata for KMError, v58, 0, 0);
        *(_QWORD *)v45 = v57;
        v46 = 31;
      }
      else
      {
        v71 = v14[3];
        v59 = type metadata accessor for OSExtension(0);
        v60 = sub_100089934();
        v73 = dispatch thunk of CustomStringConvertible.description.getter(v59, v60);
        v74 = v61;
        v62._countAndFlagsBits = 2618;
        v62._object = (void *)0xE200000000000000;
        String.append(_:)(v62);
        v63._countAndFlagsBits = v49;
        v63._object = v48;
        String.append(_:)(v63);
        swift_bridgeObjectRelease(v48);
        v64 = v73;
        v41 = v74;
        v65 = sub_1000122F8();
        v44 = swift_allocError(&type metadata for KMError, v65, 0, 0);
        *(_QWORD *)v45 = v64;
        v46 = 17;
      }
    }
    else
    {
      v73 = 0;
      v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      v31 = v74;
      v71 = a1[3];
      v32 = v71;
      v33 = type metadata accessor for OSExtension(0);
      v34 = sub_100089934();
      swift_retain(v32);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v33, v34);
      v37 = v36;
      swift_release(v32);
      swift_bridgeObjectRelease(v31);
      v73 = v35;
      v74 = v37;
      v38._object = (void *)0x8000000100126420;
      v38._countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v38);
      v39._countAndFlagsBits = sub_10002C220(v12);
      v40 = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(v40);
      v42 = v73;
      v41 = v74;
      v43 = sub_1000122F8();
      v44 = swift_allocError(&type metadata for KMError, v43, 0, 0);
      *(_QWORD *)v45 = v42;
      v46 = 54;
    }
    *(_QWORD *)(v45 + 8) = v41;
    *(_OWORD *)(v45 + 16) = 0u;
    *(_OWORD *)(v45 + 32) = 0u;
    *(_OWORD *)(v45 + 48) = 0u;
    *(_QWORD *)(v45 + 64) = 0;
    *(_BYTE *)(v45 + 72) = v46;
    return swift_willThrow(v44);
  }
  return result;
}

uint64_t sub_100086A00(uint64_t a1)
{
  return sub_100086A40(a1, qword_100175540, (uint64_t (*)(void))sub_1000900EC);
}

uint64_t sub_100086A14(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100086A2C(uint64_t a1)
{
  return sub_100086A40(a1, qword_100175558, (uint64_t (*)(void))sub_1000900F8);
}

uint64_t sub_100086A40(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for URL(0);
  sub_1000899CC(v5, a2);
  sub_100086A14(v5, (uint64_t)a2);
  v6 = (uint64_t *)a3();
  v7 = *v6;
  v8 = v6[1];
  swift_bridgeObjectRetain(v8);
  URL.init(fileURLWithPath:)(v7, v8);
  return swift_bridgeObjectRelease(v8);
}

_QWORD *sub_100086AB0(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  id v53;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  __int128 v61;
  _QWORD v62[2];
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;

  v5 = v4;
  v6 = (_QWORD *)v3;
  v60 = a3;
  v9 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v10 = __chkstk_darwin(v9);
  v59 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v58 = (uint64_t)&v55 - v12;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_DWORD *)(v3 + 640);
  LODWORD(v66[0]) = *(_DWORD *)sub_1000A4494();
  LODWORD(v63[0]) = v17;
  v18 = sub_100012808();
  LOBYTE(v17) = dispatch thunk of SetAlgebra.isSuperset(of:)(v66, &type metadata for ExtensionManager.Settings.Flags, v18);
  sub_100005C44((uint64_t)a1, (uint64_t)v66);
  v69 = v6;
  if ((v17 & 1) != 0)
  {
    sub_100005D08(v66);
    sub_100005C44((uint64_t)a1, (uint64_t)v63);
LABEL_4:
    sub_100005D08(v63);
    goto LABEL_5;
  }
  v19 = v6[5];
  v20 = v6[6];
  sub_100004DE4(v6 + 2, v19);
  sub_100026A6C(v19, v20);
  v57 = v4;
  v21 = v64;
  v22 = v65;
  v55 = sub_100004DE4(v63, v64);
  v56 = a2;
  v23 = v14;
  v24 = v67;
  v25 = v68;
  sub_100004DE4(v66, v67);
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 64);
  v27 = v25;
  v14 = v23;
  v28 = v26(v24, v27);
  v29 = URL.path.getter(v28);
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v13);
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 48);
  v33 = v22;
  v5 = v57;
  LOBYTE(v29) = v32(v29, v31, v21, v33);
  v34 = v31;
  a2 = v56;
  swift_bridgeObjectRelease(v34);
  sub_100005D08(v63);
  sub_100005D08(v66);
  sub_100005C44((uint64_t)a1, (uint64_t)v63);
  if ((v29 & 1) != 0)
    goto LABEL_4;
  v46 = v64;
  v47 = v65;
  sub_100004DE4(v63, v64);
  v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 16))(v46, v47);
  v50 = v49;
  v62[0] = v48;
  v62[1] = v49;
  v61 = xmmword_100112F50;
  v51 = sub_100086EA0();
  v52 = dispatch thunk of static Equatable.== infix(_:_:)(v62, &v61, &type metadata for PackageType, v51);
  sub_100037510(v48, v50);
  sub_100005D08(v63);
  if ((v52 & 1) != 0)
  {
LABEL_5:
    v35 = a1[3];
    v36 = a1[4];
    sub_100004DE4(a1, v35);
    (*(void (**)(uint64_t, uint64_t))(v36 + 64))(v35, v36);
    v37 = (uint64_t *)sub_1000900EC();
    v38 = *v37;
    v39 = (void *)v37[1];
    swift_bridgeObjectRetain(v39);
    v40 = v14;
    v41 = v58;
    sub_1000D46C0(v38, v39, v58);
    swift_bridgeObjectRelease(v39);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v13);
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
    v42(v41, 0, 1, v13);
    v43 = (uint64_t)v59;
    v42((uint64_t)v59, 1, 1, v13);
    v44 = sub_1000268C0();
    v45 = (_QWORD *)sub_10002FAB4(a1, v44 & 1, v41, v43, a2, v60 & 1);
    sub_1000124F8(v43, (uint64_t *)&unk_10015BA60);
    sub_1000124F8(v41, (uint64_t *)&unk_10015BA60);
    if (!v5)
      sub_1000863E0(v45);
    return v45;
  }
  v45 = v69;
  v53 = sub_100086EE4(a1, a2, v60 & 1);
  if (!v5)
    return v53;
  return v45;
}

unint64_t sub_100086EA0()
{
  unint64_t result;

  result = qword_10015A820;
  if (!qword_10015A820)
  {
    result = swift_getWitnessTable(&unk_10011A340, &type metadata for PackageType);
    atomic_store(result, (unint64_t *)&qword_10015A820);
  }
  return result;
}

id sub_100086EE4(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  char **v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char **v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  char v51;
  unsigned __int8 *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  id v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  __int128 v78;
  char *v79;
  int v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unsigned int v84;
  char *v85;
  char *v86;
  id v87;
  void (*v88)(uint64_t, uint64_t);
  char **v89;
  id *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD v96[3];
  _QWORD v97[3];

  v80 = a3;
  v81 = a2;
  v4 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v5 = __chkstk_darwin(v4);
  v82 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v83 = (char *)&v74 - v7;
  v93 = type metadata accessor for URL(0);
  v95 = *(_QWORD *)(v93 - 8);
  v8 = __chkstk_darwin(v93);
  v79 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v94 = (char *)&v74 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v74 - v12;
  v14 = type metadata accessor for OSSignpostID(0);
  v91 = *(_QWORD *)(v14 - 8);
  v92 = v14;
  v15 = __chkstk_darwin(v14);
  v76 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v74 - v17;
  v19 = sub_1000D302C();
  v20 = OSSignpostID.init(log:)((id)*v19);
  LODWORD(v88) = static os_signpost_type_t.event.getter(v20);
  v90 = (id *)v19;
  v87 = (id)*v19;
  v21 = sub_100090188();
  v22 = *v21;
  v85 = v21[1];
  v86 = v22;
  v84 = *((unsigned __int8 *)v21 + 16);
  v75 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v23 = swift_allocObject(v75, 72, 7);
  v78 = xmmword_10010F050;
  *(_OWORD *)(v23 + 16) = xmmword_10010F050;
  v24 = a1[3];
  v25 = a1[4];
  sub_100004DE4(a1, v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 64))(v24, v25);
  v27 = URL.path.getter(v26);
  v29 = v28;
  v30 = *(void (**)(char *, uint64_t))(v95 + 8);
  v31 = v93;
  v30(v13, v93);
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  v77 = sub_100026838();
  *(_QWORD *)(v23 + 64) = v77;
  *(_QWORD *)(v23 + 32) = v27;
  *(_QWORD *)(v23 + 40) = v29;
  v32 = v87;
  os_signpost(_:dso:log:name:signpostID:_:_:)(v88, &_mh_execute_header, v87, v86, v85, v84, v18, "%{public}s", 10, 2, v23);

  v33 = v23;
  v34 = v31;
  swift_bridgeObjectRelease(v33);
  v35 = a1[3];
  v36 = a1[4];
  sub_100004DE4(a1, v35);
  v37 = v35;
  v38 = v94;
  (*(void (**)(uint64_t, uint64_t))(v36 + 64))(v37, v36);
  sub_1000861F4(v38);
  v30(v13, v34);
  v39 = v89;
  sub_100087888(a1, (uint64_t)v97);
  if (v39)
  {
    v40 = ((uint64_t (*)(char *, uint64_t))v30)(v38, v34);
    v41 = static os_signpost_type_t.end.getter(v40);
    v42 = *v21;
    v43 = v21[1];
    v44 = *((unsigned __int8 *)v21 + 16);
    v45 = *v90;
    os_signpost(_:dso:log:name:signpostID:)(v41, &_mh_execute_header, v45, v42, v43, v44, v18);
  }
  else
  {
    v87 = v13;
    v88 = (void (*)(uint64_t, uint64_t))v30;
    v89 = v21;
    v46 = a1[3];
    v47 = a1[4];
    sub_100004DE4(a1, v46);
    v48 = (uint64_t)v83;
    (*(void (**)(uint64_t, uint64_t))(v47 + 64))(v46, v47);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56);
    v49(v48, 0, 1, v34);
    v50 = (uint64_t)v82;
    v49((uint64_t)v82, 1, 1, v34);
    v51 = sub_1000268C0();
    v52 = (unsigned __int8 *)sub_10002FAB4(v97, v51 & 1, v48, v50, v81, v80 & 1);
    sub_1000124F8(v50, (uint64_t *)&unk_10015BA60);
    sub_1000124F8(v48, (uint64_t *)&unk_10015BA60);
    v53 = (_QWORD *)swift_retain(v52);
    sub_1000863E0(v53);
    v54 = (uint64_t)v94;
    sub_1000888A4(v97, (uint64_t)v94, (uint64_t)v96);
    type metadata accessor for OSExtension(0);
    v61 = sub_1000F4600(v96);
    v62 = v88;
    if (v61)
    {
      v63 = v61;
      type metadata accessor for RealizedInfo(0);
      v45 = (id)sub_10008972C(v63, v52);
      swift_release(v52);
      sub_100005D08(v96);
      swift_release(v52);
      v62(v54, v34);
      v64 = sub_100005D08(v97);
      v65 = static os_signpost_type_t.end.getter(v64);
      v66 = *v89;
      v67 = v89[1];
      v68 = *((unsigned __int8 *)v89 + 16);
      v69 = v18;
      v70 = *v90;
      os_signpost(_:dso:log:name:signpostID:)(v65, &_mh_execute_header, v70, v66, v67, v68, v69);

      (*(void (**)(char *, uint64_t))(v91 + 8))(v69, v92);
      return v45;
    }
    swift_release(v52);
    v71 = sub_1000122F8();
    v72 = swift_allocError(&type metadata for KMError, v71, 0, 0);
    *(_QWORD *)v73 = 0xD00000000000002DLL;
    *(_QWORD *)(v73 + 8) = 0x8000000100125F60;
    *(_OWORD *)(v73 + 16) = 0u;
    *(_OWORD *)(v73 + 32) = 0u;
    *(_OWORD *)(v73 + 48) = 0u;
    *(_QWORD *)(v73 + 64) = 0;
    *(_BYTE *)(v73 + 72) = 27;
    swift_willThrow(v72);
    sub_100005D08(v96);
    swift_release(v52);
    v62(v54, v34);
    v55 = sub_100005D08(v97);
    v56 = static os_signpost_type_t.end.getter(v55);
    v57 = *v89;
    v58 = v89[1];
    v59 = *((unsigned __int8 *)v89 + 16);
    v45 = *v90;
    os_signpost(_:dso:log:name:signpostID:)(v56, &_mh_execute_header, v45, v57, v58, v59, v18);
  }

  (*(void (**)(char *, uint64_t))(v91 + 8))(v18, v92);
  return v45;
}

uint64_t sub_100087888@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  Swift::String v57;
  Swift::String v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  Swift::String v72;
  Swift::String v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  uint64_t v84;
  char *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  uint64_t Path;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char **v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  Swift::String v158;
  void *object;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  id v176;
  char *v177;
  uint64_t (*v178)(char *, uint64_t);
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  __int128 v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;

  v3 = v2;
  v167 = a2;
  v170 = type metadata accessor for OSSignpostID(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v168 = (char *)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v178 = *(uint64_t (**)(char *, uint64_t))(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v171 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v172 = (char *)&v165 - v10;
  v11 = __chkstk_darwin(v9);
  v179 = (uint64_t *)((char *)&v165 - v12);
  v13 = __chkstk_darwin(v11);
  v177 = (char *)&v165 - v14;
  __chkstk_darwin(v13);
  v173 = (char *)&v165 - v15;
  LOBYTE(v184) = 0;
  v16 = v2 + 2;
  v17 = v2[5];
  v18 = v2[6];
  v183 = v16;
  sub_100004DE4(v16, v17);
  sub_10010731C(v17, v18);
  v19 = v189;
  sub_100004DE4(&v186, v188);
  if (qword_100163328 != -1)
    swift_once(&qword_100163328, sub_100086A2C);
  v20 = sub_100086A14(v6, (uint64_t)qword_100175558);
  v21 = URL.path.getter(v20);
  v23 = v22;
  v24 = (*(uint64_t (**)(uint64_t))(v19 + 136))(v21);
  swift_bridgeObjectRelease(v23);
  v25 = sub_100005D08(&v186);
  v181 = v3;
  v182 = a1;
  if ((v24 & 1) == 0)
  {
    v26 = v183;
    if ((v184 & 1) != 0)
    {
      v180 = v6;
LABEL_9:
      v34 = static os_log_type_t.error.getter(v25);
      v174 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v35 = swift_allocObject(v174, 72, 7);
      *(_OWORD *)(v35 + 16) = xmmword_10010F050;
      v36 = URL.path.getter(v35);
      v38 = v37;
      *(_QWORD *)(v35 + 56) = &type metadata for String;
      *(_QWORD *)(v35 + 64) = sub_100026838();
      *(_QWORD *)(v35 + 32) = v36;
      *(_QWORD *)(v35 + 40) = v38;
      v175 = sub_10002687C();
      v39 = static OS_os_log.default.getter(v175);
      os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v39, "Staging directory at %{public}s does not exist, attempting to create.", 69, 2, v35);

      v40 = swift_bridgeObjectRelease(v35);
      LODWORD(v39) = S_IRWXU.getter(v40);
      LODWORD(v34) = S_IRGRP.getter() | v39;
      LODWORD(v39) = S_IXGRP.getter();
      LODWORD(v39) = v34 | v39 | S_IROTH.getter();
      v41 = v39 | S_IXOTH.getter();
      v42 = v3[5];
      v43 = v3[6];
      sub_100004DE4(v26, v42);
      sub_10010731C(v42, v43);
      v44 = v188;
      v45 = v189;
      sub_100004DE4(&v186, v188);
      v46 = (uint64_t *)sub_1000900E0();
      v47 = *v46;
      v48 = v46[1];
      v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56);
      swift_bridgeObjectRetain(v48);
      v49(v20, v41, v47, v48, v44, v45);
      swift_bridgeObjectRelease(v48);
      sub_100005D08(&v186);
      v6 = v180;
      v3 = v181;
      a1 = v182;
      v26 = v183;
      goto LABEL_10;
    }
LABEL_8:
    v27 = static os_log_type_t.error.getter(v25);
    v28 = sub_10002687C();
    v29 = (void *)static OS_os_log.default.getter(v28);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v29, "Unexpected file where staging directory should be, attempting to remove", 71, 2, _swiftEmptyArrayStorage);

    v30 = v3[5];
    v31 = v3[6];
    sub_100004DE4(v26, v30);
    sub_10010731C(v30, v31);
    v32 = v188;
    v33 = v189;
    sub_100004DE4(&v186, v188);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 104))(v20, v32, v33);
    v180 = v6;
    v25 = sub_100005D08(&v186);
    v26 = v183;
    goto LABEL_9;
  }
  v26 = v183;
  if ((v184 & 1) == 0)
    goto LABEL_8;
LABEL_10:
  v50 = a1[3];
  v51 = a1[4];
  sub_100004DE4(a1, v50);
  v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 24))(v50, v51);
  if (!v53)
  {
    v186 = 0;
    v187 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(v187);
    v186 = 0x6120656C646E7542;
    v187 = 0xEA00000000002074;
    v65 = a1[3];
    v66 = a1[4];
    sub_100004DE4(a1, v65);
    v67 = v179;
    v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 64))(v65, v66);
    v69 = URL.path.getter(v68);
    v71 = v70;
    (*((void (**)(_QWORD *, uint64_t))v178 + 1))(v67, v6);
    v72._countAndFlagsBits = v69;
    v72._object = v71;
    String.append(_:)(v72);
    swift_bridgeObjectRelease(v71);
    v73._countAndFlagsBits = 0xD000000000000013;
    v73._object = (void *)0x8000000100126180;
    String.append(_:)(v73);
    v74 = v186;
    v75 = v187;
    v76 = sub_1000122F8();
    v62 = swift_allocError(&type metadata for KMError, v76, 0, 0);
    *(_QWORD *)v63 = v74;
    *(_QWORD *)(v63 + 8) = v75;
    *(_OWORD *)(v63 + 16) = 0u;
    *(_OWORD *)(v63 + 32) = 0u;
    *(_OWORD *)(v63 + 48) = 0u;
    *(_QWORD *)(v63 + 64) = 0;
    v64 = 27;
    goto LABEL_14;
  }
  v54 = v52;
  v55 = v53;
  v186 = v52;
  v187 = (unint64_t)v53;
  *(_QWORD *)&v184 = 47;
  *((_QWORD *)&v184 + 1) = 0xE100000000000000;
  v56 = sub_100026250();
  if ((StringProtocol.contains<A>(_:)(&v184, &type metadata for String, &type metadata for String, v56, v56) & 1) != 0)
  {
    v186 = 0;
    v187 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease(v187);
    v186 = 0xD000000000000012;
    v187 = 0x8000000100126270;
    v57._countAndFlagsBits = v54;
    v57._object = v55;
    String.append(_:)(v57);
    swift_bridgeObjectRelease(v55);
    v58._countAndFlagsBits = 0xD00000000000001CLL;
    v58._object = (void *)0x8000000100126290;
    String.append(_:)(v58);
    v59 = v186;
    v60 = v187;
    v61 = sub_1000122F8();
    v62 = swift_allocError(&type metadata for KMError, v61, 0, 0);
    *(_QWORD *)v63 = v59;
    *(_QWORD *)(v63 + 8) = v60;
    *(_OWORD *)(v63 + 16) = 0u;
    *(_OWORD *)(v63 + 32) = 0u;
    *(_OWORD *)(v63 + 48) = 0u;
    *(_QWORD *)(v63 + 64) = 0;
    v64 = 9;
LABEL_14:
    *(_BYTE *)(v63 + 72) = v64;
    return swift_willThrow(v62);
  }
  v78 = v3[5];
  v79 = v3[6];
  sub_100004DE4(v26, v78);
  sub_10010731C(v78, v79);
  v80 = v188;
  v81 = v189;
  sub_100004DE4(&v186, v188);
  if (qword_100163328 != -1)
    swift_once(&qword_100163328, sub_100086A2C);
  v82 = sub_100086A14(v6, (uint64_t)qword_100175558);
  *(_QWORD *)&v184 = v54;
  *((_QWORD *)&v184 + 1) = v55;
  v83._countAndFlagsBits = 0x5858585858582ELL;
  v83._object = (void *)0xE700000000000000;
  String.append(_:)(v83);
  v84 = *((_QWORD *)&v184 + 1);
  v85 = v177;
  v86 = v176;
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v81 + 80))(v82, v184, *((_QWORD *)&v184 + 1), v80, v81);
  swift_bridgeObjectRelease(v84);
  if (v86)
    return sub_100005D08(&v186);
  v87 = v182[3];
  v88 = v182[4];
  sub_100004DE4(v182, v87);
  v89 = (char *)v179;
  v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 64))(v87, v88);
  v91 = URL.lastPathComponent.getter(v90);
  v93 = v92;
  v94 = (void (*)(char *, uint64_t))*((_QWORD *)v178 + 1);
  v94(v89, v6);
  v95 = v173;
  URL.appendingPathComponent(_:)(v91, v93);
  swift_bridgeObjectRelease(v93);
  v94(v85, v6);
  v96 = sub_100005D08(&v186);
  Path = URL.deletingLastPathComponent()(v96);
  v98 = v172;
  URL.deletingLastPathComponent()(Path);
  v99 = ((uint64_t (*)(char *, uint64_t))v94)(v89, v6);
  v100 = URL.path.getter(v99);
  v102 = v101;
  v94(v98, v6);
  v103 = sub_1000900F8();
  v104 = v103[1];
  if (v100 == *v103 && v102 == v104)
  {
    v105 = swift_bridgeObjectRelease(v102);
  }
  else
  {
    v106 = _stringCompareWithSmolCheck(_:_:expecting:)(v100, v102, *v103, v104, 0);
    v105 = swift_bridgeObjectRelease(v102);
    if ((v106 & 1) == 0)
    {
      v150 = v181[5];
      v151 = v181[6];
      sub_100004DE4(v183, v150);
      sub_10010731C(v150, v151);
      v152 = v188;
      v153 = v189;
      sub_100004DE4(&v186, v188);
      (*(void (**)(char *, uint64_t, uint64_t))(v153 + 104))(v95, v152, v153);
      sub_100005D08(&v186);
      v186 = 0;
      v187 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      v157 = swift_bridgeObjectRelease(v187);
      v186 = 0xD000000000000029;
      v187 = 0x80000001001261A0;
      v158._countAndFlagsBits = URL.path.getter(v157);
      object = v158._object;
      String.append(_:)(v158);
      swift_bridgeObjectRelease(object);
      v160 = v186;
      v161 = v187;
      v162 = sub_1000122F8();
      v163 = swift_allocError(&type metadata for KMError, v162, 0, 0);
      *(_QWORD *)v164 = v160;
      *(_QWORD *)(v164 + 8) = v161;
      *(_OWORD *)(v164 + 16) = 0u;
      *(_OWORD *)(v164 + 32) = 0u;
      *(_OWORD *)(v164 + 48) = 0u;
      *(_QWORD *)(v164 + 64) = 0;
      *(_BYTE *)(v164 + 72) = 27;
      swift_willThrow(v163);
      return ((uint64_t (*)(char *, uint64_t))v94)(v95, v6);
    }
  }
  LODWORD(v177) = static os_signpost_type_t.event.getter(v105);
  v176 = (id)*sub_1000D302C();
  v107 = sub_100090188();
  v175 = (unint64_t)*v107;
  v174 = (uint64_t)v107[1];
  LODWORD(v172) = *((unsigned __int8 *)v107 + 16);
  v108 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v109 = swift_allocObject(v108, 112, 7);
  *(_OWORD *)(v109 + 16) = xmmword_10010F380;
  v110 = URL.path.getter(v109);
  v112 = v111;
  *(_QWORD *)(v109 + 56) = &type metadata for String;
  v166 = sub_100026838();
  *(_QWORD *)(v109 + 64) = v166;
  *(_QWORD *)(v109 + 32) = v110;
  *(_QWORD *)(v109 + 40) = v112;
  v178 = (uint64_t (*)(char *, uint64_t))v94;
  v113 = v182;
  v114 = v6;
  v180 = v6;
  v115 = v182[3];
  v116 = v182[4];
  sub_100004DE4(v182, v115);
  v117 = v179;
  v118 = (*(uint64_t (**)(uint64_t, uint64_t))(v116 + 64))(v115, v116);
  v119 = URL.path.getter(v118);
  v121 = v120;
  v122 = ((uint64_t (*)(_QWORD *, uint64_t))v94)(v117, v114);
  v123 = v166;
  *(_QWORD *)(v109 + 96) = &type metadata for String;
  *(_QWORD *)(v109 + 104) = v123;
  *(_QWORD *)(v109 + 72) = v119;
  *(_QWORD *)(v109 + 80) = v121;
  v124 = v168;
  static OSSignpostID.exclusive.getter(v122);
  v125 = v176;
  os_signpost(_:dso:log:name:signpostID:_:_:)(v177, &_mh_execute_header, v176, v175, v174, v172, v124, "Created %{public}s, copying files from %{public}s", 49, 2, v109);

  swift_bridgeObjectRelease(v109);
  (*(void (**)(char *, uint64_t))(v169 + 8))(v124, v170);
  v126 = v181[5];
  v127 = v181[6];
  sub_100004DE4(v183, v126);
  sub_10010731C(v126, v127);
  v128 = v188;
  v129 = v189;
  v179 = sub_100004DE4(&v186, v188);
  v130 = v113[3];
  v131 = v113[4];
  sub_100004DE4(v113, v130);
  v132 = v171;
  v133 = (*(uint64_t (**)(uint64_t, uint64_t))(v131 + 64))(v130, v131);
  v134 = URL.path.getter(v133);
  v136 = v135;
  v137 = v132;
  v138 = v173;
  v139 = v178(v137, v180);
  v140 = URL.path.getter(v139);
  v142 = v141;
  v143 = sub_100105630();
  sub_10010563C(v134, v136, v140, v142, v143, v128, v129);
  v144 = (void (*)(char *, uint64_t))v178;
  v145 = v180;
  swift_bridgeObjectRelease(v136);
  swift_bridgeObjectRelease(v142);
  sub_100005D08(&v186);
  v146 = v181[5];
  v147 = v181[6];
  sub_100004DE4(v183, v146);
  sub_10009C20C(v146, v147);
  v148 = v188;
  v149 = v189;
  sub_100004DE4(&v186, v188);
  (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v149 + 24))(&v184, v138, v148, v149);
  if (v185)
  {
    v144(v138, v145);
    sub_100004E2C(&v184, v167);
    return sub_100005D08(&v186);
  }
  sub_1000124F8((uint64_t)&v184, &qword_100157C78);
  sub_100005D08(&v186);
  v154 = sub_1000122F8();
  v155 = swift_allocError(&type metadata for KMError, v154, 0, 0);
  *(_QWORD *)v156 = 0xD000000000000028;
  *(_QWORD *)(v156 + 8) = 0x8000000100126240;
  *(_OWORD *)(v156 + 16) = 0u;
  *(_OWORD *)(v156 + 32) = 0u;
  *(_OWORD *)(v156 + 48) = 0u;
  *(_QWORD *)(v156 + 64) = 0;
  *(_BYTE *)(v156 + 72) = 27;
  swift_willThrow(v155);
  return ((uint64_t (*)(char *, uint64_t))v144)(v138, v145);
}

void sub_1000888A4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t Path;
  id v20;
  char **v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(_BYTE *, _QWORD *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  Swift::String v38;
  void *object;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_BYTE *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  uint64_t v84;
  Swift::String v85;
  void *v86;
  Swift::String v87;
  uint64_t v88;
  Swift::String v89;
  void *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(_BYTE *, uint64_t);
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  Swift::String v110;
  _BYTE *v111;
  uint64_t v112;
  Swift::String v113;
  void *v114;
  Swift::String v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE v122[12];
  unsigned int v123;
  _BYTE *v124;
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  _BYTE *v133;
  _QWORD *v134;
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v125 = a3;
  v138 = (_QWORD *)type metadata accessor for OSSignpostID(0);
  v133 = (_BYTE *)*(v138 - 1);
  __chkstk_darwin(v138);
  v6 = &v122[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for URL(0);
  v136 = *(_QWORD *)(v7 - 8);
  v137 = v7;
  v8 = __chkstk_darwin(v7);
  v126 = &v122[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v12 = &v122[-v11];
  __chkstk_darwin(v10);
  v14 = &v122[-v13];
  v15 = a1[3];
  v16 = a1[4];
  sub_100004DE4(a1, v15);
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 64);
  v135 = v14;
  v18 = v17(v15, v16);
  v130 = a2;
  Path = URL.deletingLastPathComponent()(v18);
  LODWORD(v132) = static os_signpost_type_t.event.getter(Path);
  v129 = sub_1000D302C();
  v20 = (id)*v129;
  v21 = sub_100090188();
  v22 = v21[1];
  v131 = *v21;
  v23 = *((unsigned __int8 *)v21 + 16);
  v127 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v24 = swift_allocObject(v127, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_10010F050;
  v25 = URL.path.getter(v24);
  v27 = v26;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  v28 = sub_100026838();
  v128 = v28;
  *(_QWORD *)(v24 + 64) = v28;
  *(_QWORD *)(v24 + 32) = v25;
  *(_QWORD *)(v24 + 40) = v27;
  static OSSignpostID.exclusive.getter(v28);
  v29 = v23;
  v30 = v139;
  os_signpost(_:dso:log:name:signpostID:_:_:)(v132, &_mh_execute_header, v20, v131, v22, v29, v6, "Ensuring parent directory %{public}s exists", 43, 2, v24);

  swift_bridgeObjectRelease(v24);
  v31 = (void (*)(_BYTE *, _QWORD *))*((_QWORD *)v133 + 1);
  v133 = v6;
  v31(v6, v138);
  v32 = v30[5];
  v33 = v30[6];
  sub_100004DE4(v30 + 2, v32);
  sub_10010731C(v32, v33);
  v34 = v144;
  v35 = v145;
  sub_100004DE4(&v142, v144);
  v36 = v134;
  (*(void (**)(_BYTE *, uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 48))(v12, 1, 0, v34, v35);
  if (v36)
  {
    sub_100005D08(&v142);
    v142 = 0;
    v143 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease(v143);
    v142 = 0xD000000000000022;
    v143 = 0x8000000100125FC0;
    *(_QWORD *)&v140 = v36;
    swift_errorRetain(v36);
    v37 = sub_100005C88(&qword_10015AB50);
    v38._countAndFlagsBits = String.init<A>(describing:)(&v140, v37);
    object = v38._object;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(object);
    v40 = v142;
    v41 = v143;
    v42 = sub_1000122F8();
    v43 = swift_allocError(&type metadata for KMError, v42, 0, 0);
    *(_QWORD *)v44 = v40;
    *(_QWORD *)(v44 + 8) = v41;
    *(_OWORD *)(v44 + 16) = 0u;
    *(_OWORD *)(v44 + 32) = 0u;
    *(_OWORD *)(v44 + 48) = 0u;
    *(_QWORD *)(v44 + 64) = 0;
    *(_BYTE *)(v44 + 72) = 27;
    swift_willThrow(v43);
    swift_errorRelease(v36);
    v45 = v137;
    v46 = *(void (**)(_BYTE *, uint64_t))(v136 + 8);
    v46(v12, v137);
    v47 = (uint64_t)v135;
    sub_1000893AC((uint64_t)v135, v30);
    v48 = v47;
    v49 = v45;
LABEL_3:
    v46((_BYTE *)v48, v49);
    return;
  }
  v124 = v12;
  v50 = sub_100005D08(&v142);
  v123 = static os_signpost_type_t.event.getter(v50);
  v51 = (id)*v129;
  v132 = *v21;
  v131 = v21[1];
  LODWORD(v129) = *((unsigned __int8 *)v21 + 16);
  v52 = swift_allocObject(v127, 112, 7);
  v134 = v30 + 2;
  v53 = (_QWORD *)v52;
  *(_OWORD *)(v52 + 16) = xmmword_10010F380;
  v54 = v51;
  v55 = (uint64_t)v135;
  v56 = URL.path.getter(v54);
  v57 = v128;
  v53[7] = &type metadata for String;
  v53[8] = v57;
  v53[4] = v56;
  v53[5] = v58;
  v59 = v130;
  v60 = URL.path.getter(v56);
  v53[12] = &type metadata for String;
  v53[13] = v57;
  v53[9] = v60;
  v53[10] = v61;
  v62 = v133;
  static OSSignpostID.exclusive.getter(v60);
  LOBYTE(v121) = 2;
  v63 = v139;
  os_signpost(_:dso:log:name:signpostID:_:_:)(v123, &_mh_execute_header, v54, v132, v131, v129, v62, "Moving %{public}s to final location at %{public}s", 49, v121, v53);

  v64 = v53;
  v65 = v63;
  swift_bridgeObjectRelease(v64);
  v31(v62, v138);
  v66 = v63[5];
  v67 = v63[6];
  sub_100004DE4(v134, v66);
  sub_10010731C(v66, v67);
  v68 = v144;
  v69 = v145;
  sub_100004DE4(&v142, v144);
  *(_QWORD *)&v140 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, __int128 *, uint64_t, uint64_t))(v69 + 88))(v59, v55, 0, 0, 0, &v140, v68, v69);
  v70 = v55;
  v71 = v65;
  v72 = (id)v140;
  sub_100005D08(&v142);
  v73 = v124;
  v74 = v136;
  if (!v72)
  {
    v142 = 0;
    v143 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v83._countAndFlagsBits = 0xD000000000000033;
    v83._object = (void *)0x8000000100126060;
    String.append(_:)(v83);
    v85._countAndFlagsBits = URL.path.getter(v84);
    v86 = v85._object;
    String.append(_:)(v85);
    swift_bridgeObjectRelease(v86);
    v87._countAndFlagsBits = 544175136;
    v87._object = (void *)0xE400000000000000;
    String.append(_:)(v87);
    v89._countAndFlagsBits = URL.path.getter(v88);
    v90 = v89._object;
    String.append(_:)(v89);
    swift_bridgeObjectRelease(v90);
    v91 = v142;
    v92 = v143;
    v93 = sub_1000122F8();
    v94 = swift_allocError(&type metadata for KMError, v93, 0, 0);
    *(_QWORD *)v95 = v91;
    *(_QWORD *)(v95 + 8) = v92;
    *(_OWORD *)(v95 + 16) = 0u;
    *(_OWORD *)(v95 + 32) = 0u;
    *(_OWORD *)(v95 + 48) = 0u;
    *(_QWORD *)(v95 + 64) = 0;
    *(_BYTE *)(v95 + 72) = 27;
    swift_willThrow(v94);
    v46 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
    v96 = v137;
    v46(v73, v137);
    sub_1000893AC(v70, v71);
    v48 = v70;
    v49 = v96;
    goto LABEL_3;
  }
  v138 = v72;
  v75 = static URL._unconditionallyBridgeFromObjectiveC(_:)(v72);
  v76 = URL.path.getter(v75);
  v78 = v77;
  v80 = URL.path.getter(v76);
  v81 = v79;
  v82 = v137;
  if (v76 == v80 && v78 == v79)
  {
    swift_bridgeObjectRelease_n(v78, 2);
  }
  else
  {
    v97 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v78, v80, v79, 0);
    swift_bridgeObjectRelease(v78);
    swift_bridgeObjectRelease(v81);
    if ((v97 & 1) == 0)
    {
      v106 = v71[5];
      v107 = v71[6];
      sub_100004DE4(v134, v106);
      sub_10010731C(v106, v107);
      v108 = v144;
      v109 = v145;
      sub_100004DE4(&v142, v144);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v109 + 104))(v126, v108, v109);
      sub_100005D08(&v142);
      v142 = 0;
      v143 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v110._countAndFlagsBits = 0xD00000000000002ALL;
      v110._object = (void *)0x80000001001260A0;
      String.append(_:)(v110);
      v111 = v126;
      v113._countAndFlagsBits = URL.path.getter(v112);
      v114 = v113._object;
      String.append(_:)(v113);
      swift_bridgeObjectRelease(v114);
      v115._countAndFlagsBits = 0x6974656C6544202ELL;
      v115._object = (void *)0xEB000000002E676ELL;
      String.append(_:)(v115);
      v116 = v142;
      v117 = v143;
      v118 = sub_1000122F8();
      v119 = swift_allocError(&type metadata for KMError, v118, 0, 0);
      *(_QWORD *)v120 = v116;
      *(_QWORD *)(v120 + 8) = v117;
      *(_OWORD *)(v120 + 16) = 0u;
      *(_OWORD *)(v120 + 32) = 0u;
      *(_OWORD *)(v120 + 48) = 0u;
      *(_QWORD *)(v120 + 64) = 0;
      *(_BYTE *)(v120 + 72) = 27;
      swift_willThrow(v119);
      v102 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
      v102(v111, v82);
      goto LABEL_14;
    }
  }
  v98 = v71[5];
  v99 = v71[6];
  sub_100004DE4(v134, v98);
  sub_10009C20C(v98, v99);
  v100 = v144;
  v101 = v145;
  sub_100004DE4(&v142, v144);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v101 + 24))(&v140, v59, v100, v101);
  if (!v141)
  {
    sub_1000124F8((uint64_t)&v140, &qword_100157C78);
    sub_100005D08(&v142);
    v103 = sub_1000122F8();
    v104 = swift_allocError(&type metadata for KMError, v103, 0, 0);
    *(_QWORD *)v105 = 0xD000000000000028;
    *(_QWORD *)(v105 + 8) = 0x80000001001260D0;
    *(_OWORD *)(v105 + 16) = 0u;
    *(_OWORD *)(v105 + 32) = 0u;
    *(_OWORD *)(v105 + 48) = 0u;
    *(_QWORD *)(v105 + 64) = 0;
    *(_BYTE *)(v105 + 72) = 27;
    swift_willThrow(v104);
    v102 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
    v102(v126, v82);
LABEL_14:
    v102(v124, v82);
    goto LABEL_15;
  }
  v102 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
  v102(v126, v82);
  v102(v124, v82);
  sub_100004E2C(&v140, v125);
  sub_100005D08(&v142);
LABEL_15:
  sub_1000893AC(v70, v71);
  v102((_BYTE *)v70, v82);

}

uint64_t sub_1000893AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char **v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;

  v3 = type metadata accessor for OSSignpostID(0);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.deletingLastPathComponent()(v8);
  v11 = a2[5];
  v12 = a2[6];
  v39 = a2 + 2;
  sub_100004DE4(a2 + 2, v11);
  sub_10010731C(v11, v12);
  v13 = v44;
  v14 = sub_100004DE4(v42, v43);
  v15 = URL.path.getter(v14);
  v17 = v16;
  LOBYTE(v11) = (*(uint64_t (**)(uint64_t))(v13 + 136))(v15);
  swift_bridgeObjectRelease(v17);
  v18 = sub_100005D08(v42);
  if ((v11 & 1) == 0)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v37 = v7;
  v38 = v6;
  v36 = static os_signpost_type_t.event.getter(v18);
  v19 = (id)*sub_1000D302C();
  v20 = sub_100090188();
  v22 = *v20;
  v21 = v20[1];
  v35 = *((unsigned __int8 *)v20 + 16);
  v34 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v23 = swift_allocObject(v34, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10010F050;
  v24 = URL.path.getter(v23);
  v26 = v25;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  v27 = sub_100026838();
  *(_QWORD *)(v23 + 64) = v27;
  *(_QWORD *)(v23 + 32) = v24;
  *(_QWORD *)(v23 + 40) = v26;
  static OSSignpostID.exclusive.getter(v27);
  os_signpost(_:dso:log:name:signpostID:_:_:)(v36, &_mh_execute_header, v19, v22, v21, v35, v5, "Removing temporary bundle at %{public}s", 39, 2, v23);

  swift_bridgeObjectRelease(v23);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v5, v41);
  v28 = a2[5];
  v29 = a2[6];
  sub_100004DE4(v39, v28);
  sub_10010731C(v28, v29);
  v30 = v43;
  v31 = v44;
  sub_100004DE4(v42, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v10, v30, v31);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v38);
  return sub_100005D08(v42);
}

uint64_t sub_10008972C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[12];
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  _BYTE v28[40];

  v26 = a1;
  v3 = sub_100005C88(&qword_100158918);
  __chkstk_darwin(v3);
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v6);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100019E1C((uint64_t)(a2 + 32), (uint64_t)v28, &qword_100158010);
  v24 = a2[72];
  v10 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 192))(v27, v9);
  v11 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)a2 + 216))(v10);
  v13 = v12;
  v15 = v14;
  sub_100019E1C((uint64_t)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_unstagedURL], (uint64_t)v8, (uint64_t *)&unk_10015BA60);
  v16 = *(_QWORD *)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex];
  v17 = a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_repoIndex + 8];
  sub_100019E1C((uint64_t)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_uuid], (uint64_t)v5, &qword_100158918);
  v18 = *(_QWORD *)&a2[OBJC_IVAR____TtC10driverkitd12RealizedInfo_bundleArches];
  v19 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 168);
  v20 = swift_bridgeObjectRetain(v18);
  v21 = v19(v20);
  return (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, _QWORD *, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, unsigned __int8, _BYTE *, uint64_t, uint64_t))(v25 + 264))(v26, v28, v24, v27, v11, v13, v15, v8, v16, v17, v5, v18, v21);
}

unint64_t sub_1000898E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A830;
  if (!qword_10015A830)
  {
    v1 = sub_100011CE4(&qword_10015A828);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015A830);
  }
  return result;
}

unint64_t sub_100089934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100157C90;
  if (!qword_100157C90)
  {
    v1 = type metadata accessor for OSExtension(255);
    result = swift_getWitnessTable(&unk_10011B468, v1);
    atomic_store(result, (unint64_t *)&qword_100157C90);
  }
  return result;
}

uint64_t sub_10008997C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 72);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v4);
  return a1;
}

uint64_t *sub_1000899CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100089A0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v4;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, _QWORD);
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  void (*v67)(_QWORD *, _QWORD);
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  void (*v73)(_QWORD *, _QWORD);
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD v85[4];
  _QWORD v86[10];
  _QWORD v87[2];
  _BYTE v88[64];
  _QWORD v89[11];

  v2 = (uint64_t *)v1;
  v4 = *(_DWORD *)(v1 + 640);
  LODWORD(v89[0]) = *(_DWORD *)sub_1000A4444();
  LODWORD(v86[0]) = v4;
  v5 = sub_100012808();
  v6 = dispatch thunk of SetAlgebra.isSuperset(of:)(v89, &type metadata for ExtensionManager.Settings.Flags, v5);
  v7 = (_QWORD *)*a1;
  if ((v6 & 1) != 0)
  {
    v8 = *sub_10002BDAC();
    v9 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*v7 + 184))(v89);
    v86[0] = v8;
    v87[0] = *v10;
    v11 = sub_100039BE8();
    dispatch thunk of SetAlgebra.intersection(_:)(v85, v86, &type metadata for RealizedInfo.Flags, v11);
    v12 = sub_100039C30();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v85, v86, &type metadata for RealizedInfo.Flags, v12) & 1) == 0)
    {
      v87[0] = v8;
      dispatch thunk of SetAlgebra.formUnion(_:)(v87, &type metadata for RealizedInfo.Flags, v11);
    }
    v9(v89, 0);
    return 1;
  }
  v14 = v7[3];
  v15 = type metadata accessor for KernelExtension(0);
  if (swift_dynamicCastClass(v14, v15))
  {
    swift_retain(v14);
    v16 = *sub_1000F60A0();
    swift_bridgeObjectRetain(v16);
    swift_release(v14);
    v17 = v2 + 20;
    v18 = v2 + 21;
    goto LABEL_10;
  }
  v19 = type metadata accessor for DriverExtension(0);
  if (swift_dynamicCastClass(v14, v19))
  {
    swift_retain(v14);
    v16 = *sub_1000F65DC();
    swift_bridgeObjectRetain(v16);
    swift_release(v14);
    v17 = v2 + 22;
    v18 = v2 + 23;
LABEL_10:
    v20 = *v18;
    v21 = *v17;
    swift_bridgeObjectRetain(*v18);
    v22 = sub_100005C88(&qword_10015A838);
    inited = swift_initStackObject(v22, v88);
    *(_OWORD *)(inited + 16) = xmmword_10010F050;
    v24 = sub_10008FA00();
    v26 = *(_QWORD *)v24;
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)(inited + 32) = v26;
    *(_QWORD *)(inited + 40) = v25;
    *(_QWORD *)(inited + 48) = v21;
    *(_QWORD *)(inited + 56) = v20;
    swift_bridgeObjectRetain(v25);
    v27 = sub_10002F578(inited);
    sub_100005C88(&qword_10015A840);
    v89[3] = type metadata accessor for RealizedInfo(0);
    v89[4] = &off_100146F08;
    v89[0] = v7;
    swift_retain(v7);
    v28 = sub_10008A780(v27);
    swift_bridgeObjectRelease(v27);
    v30 = sub_1000F9B4C((uint64_t)v89, v16, v28, v29);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v28);
    sub_100005D08(v89);
    if (!v30)
    {
      sub_10008AAE8((uint64_t)a1);
      v65 = (_QWORD *)*a1;
      v66 = *sub_10002BDAC();
      v67 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*v65 + 184))(v89);
      v86[0] = v66;
      v87[0] = *v68;
      v69 = sub_100039BE8();
      dispatch thunk of SetAlgebra.intersection(_:)(v85, v86, &type metadata for RealizedInfo.Flags, v69);
      v70 = sub_100039C30();
      v71 = dispatch thunk of static Equatable.== infix(_:_:)(v85, v86, &type metadata for RealizedInfo.Flags, v70);
      if ((v71 & 1) == 0)
      {
        v87[0] = v66;
        dispatch thunk of SetAlgebra.formUnion(_:)(v87, &type metadata for RealizedInfo.Flags, v69);
      }
      v67(v89, 0);
      sub_10008A3A8(a1);
      return 1;
    }
    v31 = (_QWORD *)*a1;
    v32 = *(_QWORD *)(*a1 + 24);
    v33 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 144);
    v34 = swift_retain(v32);
    v35 = (_QWORD *)v33(v34);
    v37 = v36;
    swift_release(v32);
    if ((unint64_t)v30 >> 62)
    {
      if (v30 >= 0)
        v72 = v30 & 0xFFFFFFFFFFFFFF8;
      else
        v72 = v30;
      swift_bridgeObjectRetain(v30);
      v38 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease(v30);
      if (v38)
        goto LABEL_13;
    }
    else
    {
      v38 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v38)
      {
LABEL_13:
        v89[0] = _swiftEmptyArrayStorage;
        sub_10000C958(0, v38 & ~(v38 >> 63), 0);
        if (v38 < 0)
        {
          __break(1u);
          v81 = sub_10008EC3C(0, v2[2] + 1, 1, v2);
          *v35 = v81;
          v48 = v81[2];
          v47 = v81[3];
          if (v48 >= v47 >> 1)
          {
            v81 = sub_10008EC3C((_QWORD *)(v47 > 1), v48 + 1, 1, v81);
            *v35 = v81;
          }
          v81[2] = v48 + 1;
          sub_100051590((uint64_t)v89, (uint64_t)&v81[10 * v48 + 4]);
          v49 = ((uint64_t (*)(_QWORD *, _QWORD))v89[0])(v85, 0);
          v50 = static os_log_type_t.error.getter(v49);
          v51 = sub_100005C88((uint64_t *)&unk_1001596E0);
          v52 = swift_allocObject(v51, 72, 7);
          *(_OWORD *)(v52 + 16) = xmmword_10010F050;
          sub_1000B47F4();
          v54 = v53;
          v56 = v55;
          *(_QWORD *)(v52 + 56) = &type metadata for String;
          *(_QWORD *)(v52 + 64) = sub_100026838();
          *(_QWORD *)(v52 + 32) = v54;
          *(_QWORD *)(v52 + 40) = v56;
          v57 = sub_10002687C();
          v58 = (void *)static OS_os_log.default.getter(v57);
          os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v58, "Validation Error: %{public}s", 28, 2, v52);
          sub_10008997C((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000391DC);
          swift_bridgeObjectRelease(v52);

          swift_errorRelease(v87[0]);
          goto LABEL_42;
        }
        v82 = v37;
        v83 = v35;
        v84 = a1;
        v39 = (_QWORD *)v89[0];
        if ((v30 & 0xC000000000000001) != 0)
        {
          v40 = 0;
          do
          {
            v41 = specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v30);
            v42 = *(_QWORD *)(v41 + 16);
            v43 = *(_QWORD *)(v41 + 24);
            swift_bridgeObjectRetain(v43);
            swift_unknownObjectRelease(v41);
            v89[0] = v39;
            v45 = v39[2];
            v44 = v39[3];
            if (v45 >= v44 >> 1)
            {
              sub_10000C958(v44 > 1, v45 + 1, 1);
              v39 = (_QWORD *)v89[0];
            }
            ++v40;
            v39[2] = v45 + 1;
            v46 = &v39[2 * v45];
            v46[4] = v42;
            v46[5] = v43;
          }
          while (v38 != v40);
        }
        else
        {
          v59 = v30 + 32;
          do
          {
            v60 = *(_QWORD *)(*(_QWORD *)v59 + 16);
            v61 = *(_QWORD *)(*(_QWORD *)v59 + 24);
            v89[0] = v39;
            v62 = v39[2];
            v63 = v39[3];
            swift_bridgeObjectRetain(v61);
            if (v62 >= v63 >> 1)
            {
              sub_10000C958(v63 > 1, v62 + 1, 1);
              v39 = (_QWORD *)v89[0];
            }
            v39[2] = v62 + 1;
            v64 = &v39[2 * v62];
            v64[4] = v60;
            v64[5] = v61;
            v59 += 8;
            --v38;
          }
          while (v38);
        }
        swift_bridgeObjectRelease(v30);
        v35 = v83;
        a1 = v84;
        v37 = v82;
LABEL_37:
        v73 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*v31 + 256))(v89);
        v75 = v74;
        v76 = (_QWORD *)*v74;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v74);
        *v75 = v76;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v76 = sub_10008EC3C(0, v76[2] + 1, 1, v76);
          *v75 = v76;
        }
        v79 = v76[2];
        v78 = v76[3];
        if (v79 >= v78 >> 1)
        {
          v76 = sub_10008EC3C((_QWORD *)(v78 > 1), v79 + 1, 1, v76);
          *v75 = v76;
        }
        v76[2] = v79 + 1;
        v80 = &v76[10 * v79];
        v80[4] = v35;
        v80[5] = v37;
        v80[6] = v39;
        *(_OWORD *)(v80 + 7) = 0u;
        *(_OWORD *)(v80 + 9) = 0u;
        *(_OWORD *)(v80 + 11) = 0u;
        *((_BYTE *)v80 + 104) = 18;
        v73(v89, 0);
LABEL_42:
        sub_10008A3A8(a1);
        return 0;
      }
    }
    swift_bridgeObjectRelease(v30);
    v39 = _swiftEmptyArrayStorage;
    goto LABEL_37;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002ALL, 0x8000000100126460, "driverkitd/Validation.swift", 27, 2, 43, 0);
  __break(1u);
  return result;
}

uint64_t sub_10008A3A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *, _QWORD);
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  uint64_t result;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  os_signpost_id_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[4];
  char v55;

  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  v48 = v3;
  v4 = __chkstk_darwin(v2);
  v46 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - v6;
  v8 = type metadata accessor for OSSignposter(0);
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  swift_retain(*a1);
  v12 = *sub_10002BDFC();
  v13 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v11 + 184))(v54);
  v53 = v12;
  v51 = *v14;
  v15 = sub_100039BE8();
  dispatch thunk of SetAlgebra.intersection(_:)(&v52, &v53, &type metadata for RealizedInfo.Flags, v15);
  v16 = sub_100039C30();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(&v52, &v53, &type metadata for RealizedInfo.Flags, v16) & 1) == 0)
  {
    v51 = v12;
    dispatch thunk of SetAlgebra.formUnion(_:)(&v51, &type metadata for RealizedInfo.Flags, v15);
  }
  v13(v54, 0);
  swift_release(v11);
  v17 = *(_QWORD *)(*a1 + 24);
  v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 144);
  v19 = swift_retain(v17);
  v45 = v18(v19);
  v21 = v20;
  swift_release(v17);
  v22 = sub_1000D3480();
  v24 = v49;
  v23 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v10, v22, v50);
  v25 = sub_1000901AC();
  v26 = *v25;
  v27 = *((_BYTE *)v25 + 16);
  v28 = swift_bridgeObjectRetain(v21);
  v29 = v7;
  v30 = static OSSignpostID.exclusive.getter(v28);
  v31 = OSSignposter.logHandle.getter(v30);
  v32 = static os_signpost_type_t.event.getter(v31);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_7;
  v44 = v32;
  if ((v27 & 1) == 0)
  {
    if (!v26)
    {
      swift_bridgeObjectRelease_n(v21, 2);
      __break(1u);
LABEL_7:
      swift_bridgeObjectRelease_n(v21, 2);

      (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v47);
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v10, v23);
    }
    goto LABEL_12;
  }
  if ((unint64_t)v26 >> 32)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v26 >> 11 == 27)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  if (v26 >> 16 > 0x10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v26 = &v55;
LABEL_12:
  v34 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v35 = v46;
  v36 = v29;
  v43 = v29;
  v37 = v47;
  v34(v46, v36, v47);
  v38 = (uint8_t *)swift_slowAlloc(12, -1);
  v39 = swift_slowAlloc(32, -1);
  v54[0] = v39;
  *(_DWORD *)v38 = 136315138;
  swift_bridgeObjectRetain(v21);
  v53 = sub_1000055A0(v45, v21, v54);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v38 + 4, v38 + 12);
  v40 = swift_bridgeObjectRelease_n(v21, 3);
  v41 = OSSignpostID.rawValue.getter(v40);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, (os_signpost_type_t)v44, v41, v26, "Validated: %s", v38, 0xCu);
  swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v39, -1, -1);
  swift_slowDealloc(v38, -1, -1);

  v42 = *(void (**)(char *, uint64_t))(v48 + 8);
  v42(v43, v37);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v10, v50);
  return ((uint64_t (*)(char *, uint64_t))v42)(v35, v37);
}

unint64_t sub_10008A780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t result;
  int64_t i;
  char *v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100005C88(&qword_100158248);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v41 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v40 = (unint64_t)(63 - v4) >> 6;
  v7 = &v47;
  v8 = &v49;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v11 = (char *)&type metadata for Any + 8;
  v12 = &type metadata for String;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v21 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v21 >= v40)
    goto LABEL_32;
  v22 = *(_QWORD *)(v41 + 8 * v21);
  v23 = i + 1;
  if (!v22)
  {
    v23 = i + 2;
    if (i + 2 >= v40)
      goto LABEL_32;
    v22 = *(_QWORD *)(v41 + 8 * v23);
    if (!v22)
    {
      v23 = i + 3;
      if (i + 3 >= v40)
        goto LABEL_32;
      v22 = *(_QWORD *)(v41 + 8 * v23);
      if (!v22)
      {
        v23 = i + 4;
        if (i + 4 >= v40)
          goto LABEL_32;
        v22 = *(_QWORD *)(v41 + 8 * v23);
        if (!v22)
        {
          v24 = i + 5;
          if (i + 5 < v40)
          {
            v22 = *(_QWORD *)(v41 + 8 * v24);
            if (v22)
            {
              v23 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v23 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_36;
              if (v23 >= v40)
                break;
              v22 = *(_QWORD *)(v41 + 8 * v23);
              ++v24;
              if (v22)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_100005DE0(v1);
          return (unint64_t)v3;
        }
      }
    }
  }
LABEL_26:
  v43 = (v22 - 1) & v22;
  v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    v25 = 16 * v20;
    v26 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v20);
    v28 = *v26;
    v27 = v26[1];
    v29 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v25);
    v30 = *v29;
    v31 = v29[1];
    v45 = v28;
    v46 = v27;
    v44[0] = v30;
    v44[1] = v31;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v31);
    swift_dynamicCast(v7, v44, v12, v11, 7);
    v32 = v45;
    v33 = v46;
    sub_100017464(v7, v8);
    sub_100017464(v8, v50);
    sub_100017464(v50, &v48);
    result = sub_100005DE8(v32, v33);
    v34 = result;
    if ((v35 & 1) != 0)
    {
      v42 = i;
      v13 = v8;
      v14 = v7;
      v15 = v1;
      v16 = v12;
      v17 = v11;
      v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *v18 = v32;
      v18[1] = v33;
      v11 = v17;
      v12 = v16;
      v1 = v15;
      v7 = v14;
      v8 = v13;
      i = v42;
      v19 = (_QWORD *)(v3[7] + 32 * v34);
      sub_100005D08(v19);
      result = (unint64_t)sub_100017464(&v48, v19);
      v6 = v43;
      if (!v43)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v36 = (uint64_t *)(v3[6] + 16 * result);
    *v36 = v32;
    v36[1] = v33;
    result = (unint64_t)sub_100017464(&v48, (_OWORD *)(v3[7] + 32 * result));
    v37 = v3[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_34;
    v3[2] = v39;
    v6 = v43;
    if (!v43)
      goto LABEL_11;
LABEL_10:
    v43 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_10008AAE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  Swift::String v26;
  unint64_t v27;
  Swift::String v28;
  void *object;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(__int128 *__return_ptr, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  Swift::String v60;
  Swift::Bool v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t inited;
  NSString *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  Swift::String v96;
  Swift::String v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  void *v102;
  uint64_t v103;
  Swift::String v104;
  Swift::Bool v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  Swift::String v110;
  void *v111;
  Swift::String v112;
  __int128 v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  Swift::String v121;
  uint64_t v122;
  uint64_t v123;
  Swift::String v124;
  void *v125;
  Swift::String v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  void *v138;
  uint64_t v139;
  Swift::String v140;
  Swift::Bool v141;
  Swift::String v142;
  Swift::String v143;
  Swift::String v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  Swift::String v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  Swift::String v160;
  uint64_t v161;
  uint64_t v162;
  Swift::String v163;
  void *v164;
  Swift::String v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  Swift::Int v169;
  uint64_t v170;
  void *v171;
  void *v172;
  Swift::String v173;
  __int128 v174;
  unint64_t v175;
  uint64_t v176;
  char v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  unint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  void *v216;
  uint64_t v217;
  Swift::String v218;
  Swift::Bool v219;
  Swift::String v220;
  Swift::String v221;
  uint64_t v222;
  Swift::String v223;
  Swift::String v224;
  Swift::String v225;
  Swift::String v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  _QWORD *v242;
  void (*v243)(char *, uint64_t);
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  __int128 v250;
  _QWORD v251[2];
  char v252;
  char v253[40];
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;

  v3 = v2;
  v4 = (_QWORD *)v1;
  v6 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v6);
  v249 = (char *)&v241 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  *(_QWORD *)&v250 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v248 = (char *)&v241 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v241 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v241 - v14;
  v16 = *(_DWORD *)(v1 + 640);
  LODWORD(v261) = *(_DWORD *)sub_1000A4854();
  LODWORD(v258) = v16;
  v17 = sub_100012808();
  v18 = dispatch thunk of SetAlgebra.isSuperset(of:)(&v261, &type metadata for ExtensionManager.Settings.Flags, v17);
  if ((v18 & 1) == 0)
  {
    v247 = v8;
    sub_10003A1E0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 24), (uint64_t)&v261);
    if (v265 == 1)
    {
      swift_release(v261);
      v261 = 0;
      v262 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v26._countAndFlagsBits = 0xD000000000000036;
      v26._object = (void *)0x80000001001268C0;
      String.append(_:)(v26);
LABEL_9:
      v27 = sub_100039AD0();
      v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for OSExtension.Location, v27);
      object = v28._object;
      String.append(_:)(v28);
      v30 = swift_bridgeObjectRelease(object);
      v32 = v261;
      v31 = v262;
      v33 = static os_log_type_t.info.getter(v30);
      v34 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v21 = swift_allocObject(v34, 72, 7);
      *(_OWORD *)(v21 + 16) = xmmword_10010F050;
      *(_QWORD *)(v21 + 56) = &type metadata for String;
      *(_QWORD *)(v21 + 64) = sub_100026838();
      *(_QWORD *)(v21 + 32) = v32;
      *(_QWORD *)(v21 + 40) = v31;
      sub_10002687C();
      v35 = swift_bridgeObjectRetain(v31);
      v25 = (void *)static OS_os_log.default.getter(v35);
      os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v25, "Finished extension FS validation with result: %{public}", 55, 2, v21);
      swift_bridgeObjectRelease(v31);
      goto LABEL_10;
    }
    sub_10003A258(&v261);
    sub_10003A1E0((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 24), (uint64_t)&v261);
    if (v265 == 2)
    {
      v261 = 0;
      v262 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease(v262);
      v261 = 0xD000000000000020;
      v262 = 0x8000000100126890;
      goto LABEL_9;
    }
    sub_10003A258(&v261);
    v36 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v37 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v36 + 112);
    v38 = swift_retain(v36);
    v37(&v258, v38);
    swift_release(v36);
    if (!v259)
    {
      sub_1000124F8((uint64_t)&v258, &qword_100157C78);
      v79 = sub_1000122F8();
      v80 = swift_allocError(&type metadata for KMError, v79, 0, 0);
      *(_QWORD *)v81 = 0xD000000000000020;
      *(_QWORD *)(v81 + 8) = 0x8000000100126500;
      *(_OWORD *)(v81 + 16) = 0u;
      *(_OWORD *)(v81 + 32) = 0u;
      *(_OWORD *)(v81 + 48) = 0u;
      *(_QWORD *)(v81 + 64) = 0;
      *(_BYTE *)(v81 + 72) = 19;
      v82 = swift_willThrow(v80);
LABEL_56:
      v19 = static os_log_type_t.info.getter(v82);
      v176 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v77 = swift_allocObject(v176, 72, 7);
      v21 = v77;
      v78 = xmmword_10010F050;
      goto LABEL_57;
    }
    sub_100004E2C(&v258, (uint64_t)&v261);
    v39 = v263;
    v40 = v264;
    sub_100004DE4(&v261, v263);
    v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 64))(v39, v40);
    v246 = URL.path.getter(v41);
    *(_QWORD *)&v245 = v42;
    v243 = *(void (**)(char *, uint64_t))(v250 + 8);
    v243(v15, v247);
    LODWORD(v258) = *(_DWORD *)sub_1000A4494();
    LODWORD(v254) = v16;
    v43 = dispatch thunk of SetAlgebra.isSuperset(of:)(&v258, &type metadata for ExtensionManager.Settings.Flags, v17);
    v244 = v3;
    if ((v43 & 1) == 0)
    {
      v44 = sub_100005C88((uint64_t *)&unk_100159E60);
      v45 = swift_allocObject(v44, 80, 7);
      *(_OWORD *)(v45 + 16) = xmmword_100111CB0;
      v46 = v4[50];
      *(_QWORD *)(v45 + 32) = v4[49];
      *(_QWORD *)(v45 + 40) = v46;
      v47 = v4[52];
      *(_QWORD *)(v45 + 48) = v4[51];
      *(_QWORD *)(v45 + 56) = v47;
      v48 = v4[54];
      *(_QWORD *)(v45 + 64) = v4[53];
      *(_QWORD *)(v45 + 72) = v48;
      v242 = (_QWORD *)v45;
      v50 = v263;
      v49 = v264;
      sub_100004DE4(&v261, v263);
      *(_QWORD *)&v241 = *(_QWORD *)(v49 + 16);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v48);
      v51 = ((uint64_t (*)(uint64_t, uint64_t))v241)(v50, v49);
      if (v52 == 1)
      {
        v98 = v242;
        v99 = v242[2];
        v100 = v245;
        if (v99)
        {
          swift_bridgeObjectRetain(v242);
          v101 = v98 + 5;
          do
          {
            v103 = *(v101 - 1);
            v102 = (void *)*v101;
            swift_bridgeObjectRetain(*v101);
            v104._countAndFlagsBits = v103;
            v104._object = v102;
            v105 = String.hasPrefix(_:)(v104);
            swift_bridgeObjectRelease(v102);
            if (v105)
            {
LABEL_19:
              v55 = v242;
              swift_bridgeObjectRelease(v242);
              goto LABEL_20;
            }
            v101 += 2;
            --v99;
          }
          while (v99);
          swift_bridgeObjectRelease(v100);
          v98 = v242;
          v106 = v242;
        }
        else
        {
          v106 = (_QWORD *)v245;
        }
        swift_bridgeObjectRelease(v106);
        *(_QWORD *)&v258 = 0;
        *((_QWORD *)&v258 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(112);
        v121._countAndFlagsBits = 0xD00000000000001DLL;
        v121._object = (void *)0x80000001001265A0;
        String.append(_:)(v121);
        v122 = v263;
        v123 = v264;
        sub_100004DE4(&v261, v263);
        v124._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v122, *(_QWORD *)(v123 + 8));
        v125 = v124._object;
        String.append(_:)(v124);
        swift_bridgeObjectRelease(v125);
        v126._countAndFlagsBits = 0xD00000000000004FLL;
        v126._object = (void *)0x80000001001265C0;
        String.append(_:)(v126);
        v254 = (unint64_t)v98;
        v127 = sub_100005C88((uint64_t *)&unk_10015A5D0);
        v128 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
        v129 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v127, v128);
        v131 = v130;
        v132 = v98;
        goto LABEL_52;
      }
      v53 = v52;
      v54 = v245;
      if (v52)
      {
        v107 = v51;
        swift_bridgeObjectRelease(v242);
        swift_bridgeObjectRelease(v54);
        sub_100037510(v107, v53);
        *(_QWORD *)&v258 = 0;
        *((_QWORD *)&v258 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(45);
        swift_bridgeObjectRelease(*((_QWORD *)&v258 + 1));
        *(_QWORD *)&v258 = 0x20656C646E7542;
        *((_QWORD *)&v258 + 1) = 0xE700000000000000;
        v108 = v263;
        v109 = v264;
        sub_100004DE4(&v261, v263);
        v110._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v108, *(_QWORD *)(v109 + 8));
        v111 = v110._object;
        String.append(_:)(v110);
        swift_bridgeObjectRelease(v111);
        v112._countAndFlagsBits = 0xD000000000000024;
        v112._object = (void *)0x8000000100126570;
        String.append(_:)(v112);
        v113 = v258;
        v114 = sub_1000122F8();
        v115 = swift_allocError(&type metadata for KMError, v114, 0, 0);
        *(_OWORD *)v116 = v113;
        *(_OWORD *)(v116 + 16) = 0u;
        *(_OWORD *)(v116 + 32) = 0u;
        *(_OWORD *)(v116 + 48) = 0u;
        *(_QWORD *)(v116 + 64) = 0;
        v117 = 9;
LABEL_54:
        *(_BYTE *)(v116 + 72) = v117;
        swift_willThrow(v115);
LABEL_55:
        v82 = sub_100005D08(&v261);
        goto LABEL_56;
      }
      v55 = v242;
      v56 = v242[2];
      if (v56)
      {
        swift_bridgeObjectRetain(v242);
        v57 = v55 + 5;
        while (1)
        {
          v59 = *(v57 - 1);
          v58 = (void *)*v57;
          swift_bridgeObjectRetain(*v57);
          v60._countAndFlagsBits = v59;
          v60._object = v58;
          v61 = String.hasPrefix(_:)(v60);
          swift_bridgeObjectRelease(v58);
          if (v61)
            break;
          v57 += 2;
          if (!--v56)
            goto LABEL_19;
        }
        swift_bridgeObjectRelease(v54);
        v159 = v242;
        swift_bridgeObjectRelease(v242);
        *(_QWORD *)&v258 = 0;
        *((_QWORD *)&v258 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(111);
        v160._countAndFlagsBits = 0xD00000000000001DLL;
        v160._object = (void *)0x80000001001265A0;
        String.append(_:)(v160);
        v161 = v263;
        v162 = v264;
        sub_100004DE4(&v261, v263);
        v163._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v161, *(_QWORD *)(v162 + 8));
        v164 = v163._object;
        String.append(_:)(v163);
        swift_bridgeObjectRelease(v164);
        v165._countAndFlagsBits = 0xD00000000000004ELL;
        v165._object = (void *)0x8000000100126840;
        String.append(_:)(v165);
        v254 = (unint64_t)v159;
        v166 = sub_100005C88((uint64_t *)&unk_10015A5D0);
        v167 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
        v129 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v166, v167);
        v131 = v168;
        v132 = v159;
LABEL_52:
        swift_bridgeObjectRelease(v132);
        v169 = sub_1000268B8();
        v170 = sub_1000D17DC(v169, v129, v131);
        v172 = v171;
        swift_bridgeObjectRelease(v131);
        v173._countAndFlagsBits = v170;
        v173._object = v172;
        String.append(_:)(v173);
        swift_bridgeObjectRelease(v172);
LABEL_53:
        v174 = v258;
        v175 = sub_1000122F8();
        v115 = swift_allocError(&type metadata for KMError, v175, 0, 0);
        *(_OWORD *)v116 = v174;
        *(_OWORD *)(v116 + 16) = 0u;
        *(_OWORD *)(v116 + 32) = 0u;
        *(_OWORD *)(v116 + 48) = 0u;
        *(_QWORD *)(v116 + 64) = 0;
        v117 = 19;
        goto LABEL_54;
      }
LABEL_20:
      swift_bridgeObjectRelease(v55);
    }
    v252 = 0;
    LODWORD(v258) = *(_DWORD *)sub_1000A48B4();
    LODWORD(v254) = v16;
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v258, &type metadata for ExtensionManager.Settings.Flags, v17) & 1) == 0)
    {
      v83 = (void *)v245;
      v84 = v246;
LABEL_27:
      v85 = v4[5];
      v86 = v4[6];
      sub_100004DE4(v4 + 2, v85);
      sub_10010731C(v85, v86);
      v87 = v259;
      v88 = v260;
      sub_100004DE4(&v258, v259);
      if (((*(uint64_t (**)(uint64_t, void *, char *, uint64_t, uint64_t))(v88 + 136))(v84, v83, &v252, v87, v88) & 1) != 0)
      {
        v89 = v252;
        sub_100005D08(&v258);
        if ((v89 & 1) != 0)
        {
          v90 = v4[5];
          v91 = v4[6];
          sub_100004DE4(v4 + 2, v90);
          sub_10010731C(v90, v91);
          v92 = v259;
          v93 = v260;
          sub_100004DE4(&v258, v259);
          v94 = v244;
          v95 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v93 + 224))(v84, v83, v92, v93);
          if (!v94)
          {
            v177 = v95;
            sub_100005C44((uint64_t)&v261, (uint64_t)&v254);
            v178 = v83;
            if ((v177 & 1) != 0)
            {
              v179 = v256;
              v180 = v257;
              sub_100004DE4(&v254, v256);
              v181 = (*(uint64_t (**)(uint64_t, uint64_t))(v180 + 16))(v179, v180);
              v183 = v182;
              LOBYTE(v180) = sub_1000D5460(0, 1, v181, v182);
              sub_100037510(v181, v183);
              sub_100005D08(&v254);
              v184 = sub_100005D08(&v258);
              if ((v180 & 1) != 0)
              {
                v185 = static os_log_type_t.info.getter(v184);
                v186 = sub_100005C88((uint64_t *)&unk_1001596E0);
                v187 = swift_allocObject(v186, 72, 7);
                v250 = xmmword_10010F050;
                *(_OWORD *)(v187 + 16) = xmmword_10010F050;
                *(_QWORD *)(v187 + 56) = &type metadata for String;
                v188 = sub_100026838();
                *(_QWORD *)(v187 + 64) = v188;
                *(_QWORD *)(v187 + 32) = v84;
                *(_QWORD *)(v187 + 40) = v83;
                v189 = sub_10002687C();
                v190 = (void *)static OS_os_log.default.getter(v189);
                os_log(_:dso:log:_:_:)(v185, &_mh_execute_header, v190, "Skipping dext bundle validation on ARV at %{public}s", 52, 2, v187);
                swift_bridgeObjectRelease(v187);

                v191 = sub_100005D08(&v261);
                v192 = static os_log_type_t.info.getter(v191);
                v21 = swift_allocObject(v186, 72, 7);
                *(_OWORD *)(v21 + 16) = v250;
                *(_QWORD *)(v21 + 56) = &type metadata for String;
                *(_QWORD *)(v21 + 64) = v188;
                *(_QWORD *)(v21 + 32) = 0xD000000000000026;
                *(_QWORD *)(v21 + 40) = 0x80000001001266C0;
                v25 = (void *)static OS_os_log.default.getter(v21);
                os_log(_:dso:log:_:_:)(v192, &_mh_execute_header, v25, "Finished extension FS validation with result: %{public}", 55, 2, v21);
                goto LABEL_10;
              }
            }
            else
            {
              sub_100005D08(&v254);
              sub_100005D08(&v258);
            }
            v193 = sub_100005C88((uint64_t *)&unk_1001596E0);
            v194 = swift_allocObject(v193, 72, 7);
            v245 = xmmword_10010F050;
            *(_OWORD *)(v194 + 16) = xmmword_10010F050;
            *(_QWORD *)(v194 + 56) = &type metadata for String;
            v195 = sub_100026838();
            *(_QWORD *)(v194 + 64) = v195;
            *(_QWORD *)(v194 + 32) = v84;
            *(_QWORD *)(v194 + 40) = v178;
            v196 = v178;
            v197 = sub_10002687C();
            v198 = swift_bridgeObjectRetain(v178);
            v246 = v197;
            v199 = (void *)static OS_os_log.default.getter(v198);
            v200 = static os_log_type_t.default.getter(v199);
            os_log(_:dso:log:type:_:)("Validating extension at %{public}s", 34, 2, &_mh_execute_header, v199, v200, v194);
            swift_bridgeObjectRelease(v194);

            v201 = (uint64_t)v248;
            URL.init(fileURLWithPath:)(v84, v196);
            swift_bridgeObjectRelease(v196);
            v202 = (uint64_t)v249;
            v203 = v247;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v250 + 56))(v249, 1, 1, v247);
            sub_10008C1EC(v201, v202);
            sub_1000124F8(v202, (uint64_t *)&unk_10015BA60);
            v243((char *)v201, v203);
            v204 = sub_100005D08(&v261);
            v19 = static os_log_type_t.info.getter(v204);
            v24 = swift_allocObject(v193, 72, 7);
            v21 = v24;
            *(_OWORD *)(v24 + 16) = v245;
            *(_QWORD *)(v24 + 56) = &type metadata for String;
            *(_QWORD *)(v24 + 64) = v195;
            *(_QWORD *)(v24 + 32) = 0xD000000000000015;
            *(_QWORD *)(v24 + 40) = 0x8000000100126660;
            goto LABEL_4;
          }
          swift_bridgeObjectRelease(v83);
          sub_100005D08(&v258);
          goto LABEL_55;
        }
      }
      else
      {
        sub_100005D08(&v258);
      }
      *(_QWORD *)&v258 = 0;
      *((_QWORD *)&v258 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease(*((_QWORD *)&v258 + 1));
      *(_QWORD *)&v258 = 0x5520656C646E7542;
      *((_QWORD *)&v258 + 1) = 0xEB00000000204C52;
      v96._countAndFlagsBits = v84;
      v96._object = v83;
      String.append(_:)(v96);
      swift_bridgeObjectRelease(v83);
      v97._countAndFlagsBits = 0xD000000000000013;
      v97._object = (void *)0x8000000100126610;
      String.append(_:)(v97);
      goto LABEL_53;
    }
    v62 = v4[5];
    v63 = v4[6];
    sub_100004DE4(v4 + 2, v62);
    sub_10010731C(v62, v63);
    v64 = v256;
    v65 = v257;
    v242 = sub_100004DE4(&v254, v256);
    v66 = v263;
    v67 = v264;
    sub_100004DE4(&v261, v263);
    (*(void (**)(uint64_t, uint64_t))(v67 + 64))(v66, v67);
    v68 = sub_100005C88(&qword_10015A848);
    inited = swift_initStackObject(v68, v253);
    v241 = xmmword_10010F050;
    *(_OWORD *)(inited + 16) = xmmword_10010F050;
    *(_QWORD *)(inited + 32) = NSURLIsSymbolicLinkKey;
    v70 = NSURLIsSymbolicLinkKey;
    v71 = sub_10008EE4C(inited);
    swift_setDeallocating(inited);
    type metadata accessor for URLResourceKey();
    swift_arrayDestroy(inited + 32, 1, v72);
    v73 = v244;
    (*(void (**)(__int128 *__return_ptr, char *, void *, uint64_t, uint64_t))(v65 + 192))(&v258, v13, v71, v64, v65);
    if (v73)
    {
      v243(v13, v247);
      swift_bridgeObjectRelease(v245);
      swift_bridgeObjectRelease(v71);
      v74 = (__int128 *)&v254;
LABEL_24:
      sub_100005D08(v74);
      v75 = sub_100005D08(&v261);
      v19 = static os_log_type_t.info.getter(v75);
      v76 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v77 = swift_allocObject(v76, 72, 7);
      v21 = v77;
      v78 = v241;
LABEL_57:
      *(_OWORD *)(v77 + 16) = v78;
      *(_QWORD *)(v77 + 56) = &type metadata for String;
      goto LABEL_58;
    }
    v243(v13, v247);
    swift_bridgeObjectRelease(v71);
    sub_100005D08(&v254);
    v118 = v259;
    v119 = v260;
    sub_100004DE4(&v258, v259);
    v120 = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 16))(v118, v119);
    v83 = (void *)v245;
    if ((v120 & 1) == 0)
    {
      v244 = 0;
      v84 = v246;
LABEL_41:
      sub_100005D08(&v258);
      goto LABEL_27;
    }
    v133 = v246;
    v254 = v246;
    v255 = v245;
    v251[0] = 3092014;
    v251[1] = 0xE300000000000000;
    v134 = sub_100026250();
    if ((StringProtocol.contains<A>(_:)(v251, &type metadata for String, &type metadata for String, v134, v134) & 1) != 0
      || (v135 = v4[48], (v136 = *(_QWORD *)(v135 + 16)) == 0))
    {
LABEL_50:
      v254 = 0;
      v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(115);
      v142._countAndFlagsBits = 0x5520656C646E7542;
      v142._object = (void *)0xEB00000000204C52;
      String.append(_:)(v142);
      v143._countAndFlagsBits = v133;
      v143._object = v83;
      String.append(_:)(v143);
      swift_bridgeObjectRelease(v83);
      v144._countAndFlagsBits = 0xD000000000000064;
      v144._object = (void *)0x80000001001266F0;
      String.append(_:)(v144);
      v145 = v4[48];
      v251[0] = v145;
      swift_bridgeObjectRetain(v145);
      v146 = sub_100005C88((uint64_t *)&unk_10015A5D0);
      v147 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
      v148 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v146, v147);
      v150 = v149;
      swift_bridgeObjectRelease(v145);
      v151._countAndFlagsBits = v148;
      v151._object = v150;
      String.append(_:)(v151);
      swift_bridgeObjectRelease(v150);
      v152 = v254;
      v153 = v255;
      v154 = sub_1000122F8();
      v155 = swift_allocError(&type metadata for KMError, v154, 0, 0);
      *(_QWORD *)v156 = v152;
      *(_QWORD *)(v156 + 8) = v153;
      *(_OWORD *)(v156 + 16) = 0u;
      *(_OWORD *)(v156 + 32) = 0u;
      *(_OWORD *)(v156 + 48) = 0u;
      *(_QWORD *)(v156 + 64) = 0;
      *(_BYTE *)(v156 + 72) = 19;
      swift_willThrow(v155);
      sub_100005D08(&v258);
      v157 = sub_100005D08(&v261);
      v19 = static os_log_type_t.info.getter(v157);
      v158 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v21 = swift_allocObject(v158, 72, 7);
      *(_OWORD *)(v21 + 16) = v241;
      *(_QWORD *)(v21 + 56) = &type metadata for String;
LABEL_58:
      *(_QWORD *)(v21 + 64) = sub_100026838();
      v22 = 0x726F727245;
      v23 = 0xE500000000000000;
      goto LABEL_3;
    }
    swift_bridgeObjectRetain(v4[48]);
    v137 = (_QWORD *)(v135 + 40);
    while (1)
    {
      v139 = *(v137 - 1);
      v138 = (void *)*v137;
      swift_bridgeObjectRetain(*v137);
      v140._countAndFlagsBits = v139;
      v140._object = v138;
      v141 = String.hasPrefix(_:)(v140);
      swift_bridgeObjectRelease(v138);
      if (v141)
        break;
      v137 += 2;
      if (!--v136)
      {
        swift_bridgeObjectRelease(v135);
        v133 = v246;
        goto LABEL_50;
      }
    }
    swift_bridgeObjectRelease(v135);
    v205 = v4[5];
    v206 = v4[6];
    sub_100004DE4(v4 + 2, v205);
    sub_10010731C(v205, v206);
    v207 = v256;
    v208 = v257;
    sub_100004DE4(&v254, v256);
    v209 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v208 + 152))(v246, v83, v207, v208);
    v211 = v210;
    if (v210)
    {
      v212 = v209;
      v244 = 0;
      sub_100005D08(&v254);
      v213 = v4[46];
      v214 = *(_QWORD *)(v213 + 16);
      if (v214)
      {
        swift_bridgeObjectRetain(v4[46]);
        v215 = (_QWORD *)(v213 + 40);
        while (1)
        {
          v217 = *(v215 - 1);
          v216 = (void *)*v215;
          swift_bridgeObjectRetain(*v215);
          v218._countAndFlagsBits = v217;
          v218._object = v216;
          v219 = String.hasPrefix(_:)(v218);
          swift_bridgeObjectRelease(v216);
          if (v219)
            break;
          v215 += 2;
          if (!--v214)
          {
            swift_bridgeObjectRelease(v213);
            goto LABEL_70;
          }
        }
        swift_bridgeObjectRelease(v213);
        v233 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v234 = swift_allocObject(v233, 112, 7);
        *(_OWORD *)(v234 + 16) = xmmword_10010F380;
        *(_QWORD *)(v234 + 56) = &type metadata for String;
        v235 = sub_100026838();
        v236 = v245;
        *(_QWORD *)(v234 + 32) = v246;
        *(_QWORD *)(v234 + 40) = v236;
        *(_QWORD *)(v234 + 96) = &type metadata for String;
        *(_QWORD *)(v234 + 104) = v235;
        *(_QWORD *)(v234 + 64) = v235;
        *(_QWORD *)(v234 + 72) = v212;
        *(_QWORD *)(v234 + 80) = v211;
        sub_10002687C();
        v237 = swift_bridgeObjectRetain(v211);
        v238 = (void *)static OS_os_log.default.getter(v237);
        v239 = static os_log_type_t.default.getter(v238);
        os_log(_:dso:log:type:_:)("Bundle URL %{public}s is a valid symlink to %{public}s", 54, 2, &_mh_execute_header, v238, v239, v234);
        swift_bridgeObjectRelease(v234);

        v240 = v212;
        v83 = v211;
        v84 = v240;
        goto LABEL_41;
      }
LABEL_70:
      v254 = 0;
      v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(96);
      v220._countAndFlagsBits = 0x5520656C646E7542;
      v220._object = (void *)0xEB00000000204C52;
      String.append(_:)(v220);
      v221._countAndFlagsBits = v246;
      v222 = v245;
      v221._object = (void *)v245;
      String.append(_:)(v221);
      swift_bridgeObjectRelease(v222);
      v223._countAndFlagsBits = 0xD000000000000011;
      v223._object = (void *)0x8000000100126790;
      String.append(_:)(v223);
      v224._countAndFlagsBits = v212;
      v224._object = v211;
      String.append(_:)(v224);
      swift_bridgeObjectRelease(v211);
      v225._countAndFlagsBits = 0xD000000000000040;
      v225._object = (void *)0x80000001001267B0;
      String.append(_:)(v225);
    }
    else
    {
      sub_100005D08(&v254);
      v254 = 0;
      v255 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease(v255);
      v254 = 0xD000000000000026;
      v255 = 0x8000000100126760;
      v226._countAndFlagsBits = v246;
      v227 = v245;
      v226._object = (void *)v245;
      String.append(_:)(v226);
      swift_bridgeObjectRelease(v227);
    }
    v228 = v254;
    v229 = v255;
    v230 = sub_1000122F8();
    v231 = swift_allocError(&type metadata for KMError, v230, 0, 0);
    *(_QWORD *)v232 = v228;
    *(_QWORD *)(v232 + 8) = v229;
    *(_OWORD *)(v232 + 16) = 0u;
    *(_OWORD *)(v232 + 32) = 0u;
    *(_OWORD *)(v232 + 48) = 0u;
    *(_QWORD *)(v232 + 64) = 0;
    *(_BYTE *)(v232 + 72) = 19;
    swift_willThrow(v231);
    v74 = &v258;
    goto LABEL_24;
  }
  v19 = static os_log_type_t.info.getter(v18);
  v20 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v21 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_10010F050;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = sub_100026838();
  v22 = 0xD000000000000015;
  v23 = 0x8000000100126900;
LABEL_3:
  *(_QWORD *)(v21 + 32) = v22;
  *(_QWORD *)(v21 + 40) = v23;
  v24 = sub_10002687C();
LABEL_4:
  v25 = (void *)static OS_os_log.default.getter(v24);
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v25, "Finished extension FS validation with result: %{public}", 55, 2, v21);
LABEL_10:
  swift_bridgeObjectRelease(v21);

}

uint64_t sub_10008C1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t, uint64_t, unint64_t);
  NSString *v47;
  NSString *v48;
  NSString *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  _QWORD *v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  uint64_t v89;
  unsigned int (*v90)(char *, uint64_t, uint64_t);
  void (*v91)(char *, unint64_t, uint64_t);
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  _QWORD *v104;

  v4 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v79 - v8;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v88 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v79 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v79 - v17;
  sub_100019E1C(a2, (uint64_t)v9, (uint64_t *)&unk_10015BA60);
  v19 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v89 = a1;
  v91 = v19;
  v19(v16, a1, v10);
  v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v90(v9, 1, v10) == 1)
  {
    v87 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v87(v18, v16, v10);
    v20 = sub_1000124F8((uint64_t)v9, (uint64_t *)&unk_10015BA60);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    v87 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v20 = ((uint64_t (*)(char *, char *, uint64_t))v87)(v18, v9, v10);
  }
  v104 = _swiftEmptyArrayStorage;
  v21 = URL.path.getter(v20);
  v23 = v22;
  v24 = v92;
  v25 = v86;
  sub_10008C8F4(v21, v22);
  if (v25)
  {
    swift_bridgeObjectRelease(v23);
    v103 = v25;
    swift_errorRetain(v25);
    v26 = sub_100005C88(&qword_10015AB50);
    if (swift_dynamicCast(&v93, &v103, v26, &type metadata for KMError, 0))
    {
      v27 = v93;
      v29 = v99;
      v28 = v100;
      v30 = v101;
      if (v102 == 19)
      {
        v79 = v94;
        v80 = v95;
        v81 = v96;
        v82 = v97;
        v86 = v98;
        swift_errorRelease(v25);
        v31 = v104;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v104);
        v83 = v29;
        v84 = (_QWORD *)v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v31 = sub_10008EC3C(0, v31[2] + 1, 1, v31);
        v34 = v31[2];
        v33 = v31[3];
        v35 = v86;
        if (v34 >= v33 >> 1)
        {
          v78 = sub_10008EC3C((_QWORD *)(v33 > 1), v34 + 1, 1, v31);
          v35 = v86;
          v31 = v78;
        }
        v85 = v18;
        v86 = v11;
        v31[2] = v34 + 1;
        v36 = &v31[10 * v34];
        v37 = v79;
        v36[4] = v27;
        v36[5] = v37;
        v38 = v81;
        v36[6] = v80;
        v36[7] = v38;
        v36[8] = v82;
        v36[9] = v35;
        v39 = v84;
        v36[10] = v83;
        v36[11] = v39;
        v36[12] = v30;
        *((_BYTE *)v36 + 104) = 19;
        v104 = v31;
        swift_errorRelease(v103);
        v24 = v92;
        goto LABEL_13;
      }
      sub_1000391DC(v93, v94, v95, v96, v97, v98, v99, v100, v101, v102);
    }
    v58 = swift_errorRelease(v103);
    goto LABEL_20;
  }
  v85 = v18;
  v86 = v11;
  swift_bridgeObjectRelease(v23);
LABEL_13:
  v41 = v24[5];
  v40 = v24[6];
  sub_100004DE4(v24 + 2, v41);
  sub_10010731C(v41, v40);
  v42 = v96;
  v43 = v97;
  v84 = sub_100004DE4(&v93, v96);
  v44 = sub_100005C88(&qword_10015A848);
  v45 = swift_allocObject(v44, 56, 7);
  *(_OWORD *)(v45 + 16) = xmmword_100111CB0;
  *(_QWORD *)(v45 + 32) = NSURLPathKey;
  *(_QWORD *)(v45 + 40) = NSURLIsDirectoryKey;
  *(_QWORD *)(v45 + 48) = NSURLIsSymbolicLinkKey;
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, unint64_t))(v43 + 24);
  v47 = NSURLPathKey;
  v48 = NSURLIsDirectoryKey;
  v49 = NSURLIsSymbolicLinkKey;
  v50 = v85;
  v51 = v46(v85, v45, 1, v42, v43);
  v85 = v50;
  swift_bridgeObjectRelease(v45);
  sub_100005D08(&v93);
  v52 = *(_QWORD *)(v51 + 16);
  v11 = v86;
  if (v52)
  {
    v53 = v51 + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80));
    v54 = (_QWORD *)v51;
    v55 = *(_QWORD *)(v86 + 72);
    v84 = v54;
    swift_bridgeObjectRetain(v54);
    v56 = (uint64_t)v88;
    while (1)
    {
      v91(v7, v53, v10);
      v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v57(v7, 0, 1, v10);
      if (v90(v7, 1, v10) == 1)
        break;
      v87((char *)v56, v7, v10);
      sub_10008CD74(v56, v92, v89, (uint64_t *)&v104);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v56, v10);
      v53 += v55;
      if (!--v52)
      {
        v51 = (uint64_t)v84;
        goto LABEL_24;
      }
    }
    v51 = (uint64_t)v84;
    v18 = v85;
  }
  else
  {
    v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56);
    swift_bridgeObjectRetain(v51);
LABEL_24:
    v57(v7, 1, 1, v10);
    v18 = v85;
  }
  swift_bridgeObjectRelease_n(v51, 2);
  v60 = v104;
  swift_bridgeObjectRetain(v104);
  v61 = sub_1000D2610();
  swift_bridgeObjectRelease(v60);
  if (v61)
    goto LABEL_21;
  if (v60[2] == 1)
  {
    v62 = v60[4];
    v63 = v60[5];
    v64 = (_QWORD *)v60[6];
    v65 = v60[7];
    v66 = v60[8];
    v67 = v60[9];
    v91 = (void (*)(char *, unint64_t, uint64_t))v60[10];
    v92 = v64;
    v90 = (unsigned int (*)(char *, uint64_t, uint64_t))v60[11];
    v86 = v11;
    v68 = v60[12];
    v69 = *((_BYTE *)v60 + 104);
    v70 = sub_1000122F8();
    swift_allocError(&type metadata for KMError, v70, 0, 0);
    *(_QWORD *)v71 = v62;
    *(_QWORD *)(v71 + 8) = v63;
    v73 = (uint64_t)v91;
    v72 = v92;
    *(_QWORD *)(v71 + 16) = v92;
    *(_QWORD *)(v71 + 24) = v65;
    *(_QWORD *)(v71 + 32) = v66;
    *(_QWORD *)(v71 + 40) = v67;
    v74 = (uint64_t)v90;
    *(_QWORD *)(v71 + 48) = v73;
    *(_QWORD *)(v71 + 56) = v74;
    *(_QWORD *)(v71 + 64) = v68;
    *(_BYTE *)(v71 + 72) = v69;
    v75 = sub_1000515CC(v62, v63, (uint64_t)v72, v65, v66, v67, v73, v74, v68, v69);
    swift_willThrow(v75);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v10);
    return swift_bridgeObjectRelease(v104);
  }
  v76 = sub_1000122F8();
  swift_allocError(&type metadata for KMError, v76, 0, 0);
  *(_QWORD *)v77 = v60;
  *(_OWORD *)(v77 + 8) = 0u;
  *(_OWORD *)(v77 + 24) = 0u;
  *(_OWORD *)(v77 + 40) = 0u;
  *(_OWORD *)(v77 + 56) = 0u;
  *(_BYTE *)(v77 + 72) = 0;
  v58 = swift_bridgeObjectRetain(v60);
LABEL_20:
  swift_willThrow(v58);
LABEL_21:
  (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  return swift_bridgeObjectRelease(v104);
}

uint64_t sub_10008C8F4(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  NSString *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  NSString *v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  NSString *v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  Swift::String v31;
  unint64_t v32;
  Swift::String v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  void *object;
  Swift::String v39;
  Swift::String v40;
  void *v41;
  Swift::String v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v6 = v2 + 2;
  v8 = v2[5];
  v7 = v2[6];
  sub_100004DE4(v6, v8);
  sub_10010731C(v8, v7);
  v9 = *((_QWORD *)&v45 + 1);
  v10 = v46;
  sub_100004DE4(&v44, *((uint64_t *)&v45 + 1));
  v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v10 + 72))(a1, a2, v9, v10);
  result = sub_100005D08(&v44);
  if (v3)
    return result;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_11;
  v13 = NSFileOwnerAccountID;
  v14 = sub_10001FDF0((uint64_t)v13);
  if ((v15 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(v11 + 56) + 32 * v14, (uint64_t)&v44);
  }
  else
  {
    v44 = 0u;
    v45 = 0u;
  }

  if (!*((_QWORD *)&v45 + 1))
    goto LABEL_12;
  if ((swift_dynamicCast(&v43, &v44, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
LABEL_20:
    swift_bridgeObjectRelease(v11);
    goto LABEL_21;
  }
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_11:
    v44 = 0u;
    v45 = 0u;
LABEL_12:
    swift_bridgeObjectRelease(v11);
LABEL_13:
    sub_1000124F8((uint64_t)&v44, &qword_100158018);
LABEL_21:
    *(_QWORD *)&v44 = 0;
    *((_QWORD *)&v44 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease(*((_QWORD *)&v44 + 1));
    *(_QWORD *)&v44 = 0xD000000000000026;
    *((_QWORD *)&v44 + 1) = 0x8000000100126920;
LABEL_22:
    v24 = a1;
    v25 = (unint64_t)a2;
LABEL_23:
    String.append(_:)(*(Swift::String *)&v24);
    v26 = v44;
    v27 = sub_1000122F8();
    v28 = swift_allocError(&type metadata for KMError, v27, 0, 0);
    *(_OWORD *)v29 = v26;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)(v29 + 48) = 0u;
    *(_QWORD *)(v29 + 64) = 0;
    *(_BYTE *)(v29 + 72) = 19;
    return swift_willThrow(v28);
  }
  v16 = v43;
  v17 = NSFileGroupOwnerAccountID;
  v18 = sub_10001FDF0((uint64_t)v17);
  if ((v19 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(v11 + 56) + 32 * v18, (uint64_t)&v44);
  }
  else
  {
    v44 = 0u;
    v45 = 0u;
  }

  if (!*((_QWORD *)&v45 + 1))
    goto LABEL_12;
  if ((swift_dynamicCast(&v43, &v44, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
    goto LABEL_20;
  v20 = v43;
  if (*(_QWORD *)(v11 + 16))
  {
    v21 = NSFilePosixPermissions;
    v22 = sub_10001FDF0((uint64_t)v21);
    if ((v23 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(v11 + 56) + 32 * v22, (uint64_t)&v44);
    }
    else
    {
      v44 = 0u;
      v45 = 0u;
    }

  }
  else
  {
    v44 = 0u;
    v45 = 0u;
  }
  swift_bridgeObjectRelease(v11);
  if (!*((_QWORD *)&v45 + 1))
    goto LABEL_13;
  if ((swift_dynamicCast(&v43, &v44, (char *)&type metadata for Any + 8, &type metadata for UInt16, 6) & 1) == 0)
    goto LABEL_21;
  if (v16 | v20)
  {
    *(_QWORD *)&v44 = 0;
    *((_QWORD *)&v44 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease(*((_QWORD *)&v44 + 1));
    *(_QWORD *)&v44 = 0xD000000000000013;
    *((_QWORD *)&v44 + 1) = 0x8000000100126950;
    v43 = v16;
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v37._object;
    String.append(_:)(v37);
    swift_bridgeObjectRelease(object);
    v39._countAndFlagsBits = 58;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    v43 = v20;
    v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v41 = v40._object;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v41);
    v42._countAndFlagsBits = 0xD000000000000015;
    v42._object = (void *)0x8000000100126970;
    String.append(_:)(v42);
    goto LABEL_22;
  }
  v30 = (unsigned __int16)v43;
  if ((S_IWOTH.getter() & v30) != 0 || (result = S_IWGRP.getter(), (result & v30) != 0))
  {
    *(_QWORD *)&v44 = 0;
    *((_QWORD *)&v44 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v31._countAndFlagsBits = 0xD000000000000014;
    v31._object = (void *)0x8000000100126990;
    String.append(_:)(v31);
    LOWORD(v43) = v30;
    v32 = sub_10008F0CC();
    v33._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v43, 8, 1, &type metadata for UInt16, v32);
    v34 = v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v34);
    v35._countAndFlagsBits = 544108320;
    v35._object = (void *)0xE400000000000000;
    String.append(_:)(v35);
    v36._countAndFlagsBits = a1;
    v36._object = a2;
    String.append(_:)(v36);
    v24 = 0xD000000000000024;
    v25 = 0x80000001001269B0;
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_10008CD74(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t inited;
  NSString *v14;
  NSString *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  Swift::String v41;
  void *object;
  Swift::Bool v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  Swift::String v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100[48];
  _QWORD v101[3];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v86 = a4;
  v88 = a3;
  v6 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v6);
  v87 = (unint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2[5];
  v9 = a2[6];
  sub_100004DE4(a2 + 2, v8);
  sub_10010731C(v8, v9);
  v10 = v93;
  v11 = v94;
  sub_100004DE4(&v90, v93);
  v12 = sub_100005C88(&qword_10015A848);
  inited = swift_initStackObject(v12, v100);
  *(_OWORD *)(inited + 16) = xmmword_10010F380;
  *(_QWORD *)(inited + 32) = NSURLIsDirectoryKey;
  *(_QWORD *)(inited + 40) = NSURLIsSymbolicLinkKey;
  v14 = NSURLIsDirectoryKey;
  v15 = NSURLIsSymbolicLinkKey;
  v16 = sub_10008EE4C(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey();
  swift_arrayDestroy(inited + 32, 2, v17);
  v18 = v89;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, void *, uint64_t, unint64_t))(v11 + 192))(v101, a1, v16, v10, v11);
  swift_bridgeObjectRelease(v16);
  result = sub_100005D08(&v90);
  if (!v18)
  {
    v20 = v87;
    v21 = v88;
    v22 = v102;
    v23 = v103;
    sub_100004DE4(v101, v102);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23) & 1) == 0)
    {
      v24 = v102;
      v25 = v103;
      sub_100004DE4(v101, v102);
      v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
      if ((v26 & 1) != 0)
      {
        URL.absoluteURL.getter();
        v37 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v20, 0, 1, v37);
        sub_10008C1EC(v21, v20);
        sub_1000124F8(v20, (uint64_t *)&unk_10015BA60);
        return sub_100005D08(v101);
      }
      v27 = URL.path.getter(v26);
      v29 = v28;
      sub_10008C8F4(v27, v28);
LABEL_9:
      swift_bridgeObjectRelease(v29);
      return sub_100005D08(v101);
    }
    v30 = a2[5];
    v31 = a2[6];
    sub_100004DE4(a2 + 2, v30);
    sub_10010731C(v30, v31);
    v32 = v94;
    v33 = sub_100004DE4(&v90, v93);
    v34 = URL.path.getter(v33);
    v36 = v35;
    v38 = (*(uint64_t (**)(uint64_t))(v32 + 152))(v34);
    v29 = v39;
    swift_bridgeObjectRelease(v36);
    if (v29)
    {
      v40 = sub_100005D08(&v90);
      v41._countAndFlagsBits = URL.path.getter(v40);
      object = v41._object;
      v43 = String.hasPrefix(_:)(v41);
      swift_bridgeObjectRelease(object);
      if (v43)
        goto LABEL_9;
      v90 = 0;
      v91 = 0xE000000000000000;
      _StringGuts.grow(_:)(103);
      v45._countAndFlagsBits = 0xD000000000000034;
      v45._object = (void *)0x8000000100126B30;
      String.append(_:)(v45);
      v47._countAndFlagsBits = URL.path.getter(v46);
      v48 = v47._object;
      String.append(_:)(v47);
      swift_bridgeObjectRelease(v48);
      v49._countAndFlagsBits = 0x2073746E696F7020;
      v49._object = (void *)0xEB00000000206F74;
      String.append(_:)(v49);
      v50._countAndFlagsBits = v38;
      v50._object = v29;
      String.append(_:)(v50);
      swift_bridgeObjectRelease(v29);
      v51._object = (void *)0x8000000100126B70;
      v51._countAndFlagsBits = 0xD000000000000022;
      String.append(_:)(v51);
    }
    else
    {
      sub_100005D08(&v90);
      v90 = 0;
      v91 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      v44 = swift_bridgeObjectRelease(v91);
      v90 = 0xD000000000000026;
      v91 = 0x8000000100126760;
    }
    v52._countAndFlagsBits = URL.path.getter(v44);
    v53 = v52._object;
    String.append(_:)(v52);
    swift_bridgeObjectRelease(v53);
    v54 = v90;
    v55 = v91;
    v56 = sub_1000122F8();
    v57 = swift_allocError(&type metadata for KMError, v56, 0, 0);
    *(_QWORD *)v58 = v54;
    *(_QWORD *)(v58 + 8) = v55;
    *(_OWORD *)(v58 + 16) = 0u;
    *(_OWORD *)(v58 + 32) = 0u;
    *(_OWORD *)(v58 + 48) = 0u;
    *(_QWORD *)(v58 + 64) = 0;
    *(_BYTE *)(v58 + 72) = 19;
    swift_willThrow(v57);
    v104 = v57;
    swift_errorRetain(v57);
    v59 = sub_100005C88(&qword_10015AB50);
    if (swift_dynamicCast(&v90, &v104, v59, &type metadata for KMError, 0))
    {
      v61 = v90;
      v60 = v91;
      v63 = v92;
      v62 = v93;
      v64 = v96;
      v89 = v97;
      v65 = v98;
      if (!v99)
      {
        v88 = v95;
        v87 = v94;
        swift_errorRelease(v57);
        v85 = v64;
        v76 = v86;
        v77 = *v86;
        swift_bridgeObjectRetain(*v86);
        v78 = sub_1000D252C(v61, v77);
        sub_1000391DC(v61, v60, v63, v62, v87, v88, v85, v89, v65, 0);
        swift_bridgeObjectRelease(v77);
        v79 = *v76;
        *v76 = v78;
        swift_bridgeObjectRelease(v79);
LABEL_21:
        swift_errorRelease(v104);
        return sub_100005D08(v101);
      }
      if (v99 == 19)
      {
        v87 = v94;
        v88 = v95;
        swift_errorRelease(v57);
        v66 = v86;
        v67 = (_QWORD *)*v86;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v86);
        *v66 = (uint64_t)v67;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v69 = v66;
        }
        else
        {
          v81 = sub_10008EC3C(0, v67[2] + 1, 1, v67);
          v69 = v86;
          v67 = v81;
          *v86 = (uint64_t)v81;
        }
        v71 = v67[2];
        v70 = v67[3];
        v72 = (uint64_t *)(v71 + 1);
        if (v71 >= v70 >> 1)
        {
          v86 = (uint64_t *)(v71 + 1);
          v85 = v64;
          v82 = v69;
          v83 = sub_10008EC3C((_QWORD *)(v70 > 1), v71 + 1, 1, v67);
          v72 = v86;
          v67 = v83;
          *v82 = (uint64_t)v83;
          v64 = v85;
        }
        v67[2] = v72;
        v73 = &v67[10 * v71];
        v73[4] = v61;
        v73[5] = v60;
        v73[6] = v63;
        v73[7] = v62;
        v74 = v88;
        v73[8] = v87;
        v73[9] = v74;
        v75 = v89;
        v73[10] = v64;
        v73[11] = v75;
        v73[12] = v65;
        *((_BYTE *)v73 + 104) = 19;
        goto LABEL_21;
      }
      sub_1000391DC(v90, v91, v92, v93, v94, v95, v96, v89, v98, v99);
    }
    v80 = swift_errorRelease(v104);
    swift_willThrow(v80);
    return sub_100005D08(v101);
  }
  return result;
}

uint64_t sub_10008D4A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  uint64_t (*v19)(_QWORD *);
  void (*v20)(_QWORD *, _QWORD);
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *, _QWORD);
  uint64_t *v31;
  unint64_t v32;
  uint64_t v34;
  void (*v35)(_QWORD *, _QWORD);
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD *, _QWORD);
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD *, _QWORD);
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t (*v60)(void);
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  const char *v64;
  uint64_t v65;
  void (*v66)(__int128 *, _QWORD);
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  Swift::String v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_QWORD *, _QWORD);
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  _QWORD v80[3];
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;

  v3 = swift_allocObject(&unk_10014A0F8, 32, 7);
  v4 = *(_DWORD *)(v1 + 640);
  LODWORD(v80[0]) = *(_DWORD *)sub_1000A43F4();
  LODWORD(v78) = v4;
  v5 = sub_100012808();
  v6 = dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for ExtensionManager.Settings.Flags, v5);
  v7 = (_QWORD *)*a1;
  v8 = *(uint64_t (**)(void))(*(_QWORD *)*a1 + 168);
  v9 = v8();
  v10 = sub_10002BFCC();
  if ((v6 & 1) != 0)
  {
    v80[0] = *v10;
    *(_QWORD *)&v78 = v9;
    v11 = sub_100039BE8();
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for RealizedInfo.Flags, v11) & 1) != 0
      || (v12 = v8(),
          v80[0] = *sub_10002C17C(),
          *(_QWORD *)&v78 = v12,
          (dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for RealizedInfo.Flags, v11) & 1) != 0))
    {
      *(_QWORD *)(v3 + 16) = 0xD000000000000018;
      *(_QWORD *)(v3 + 24) = 0x8000000100126AB0;
      sub_10008DE14((uint64_t)a1, v3);
      swift_release(v3);
      return 0;
    }
    else
    {
      v34 = *sub_10002BE6C();
      v35 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*v7 + 184))(v80);
      *(_QWORD *)&v78 = v34;
      v84 = *v36;
      dispatch thunk of SetAlgebra.intersection(_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v11);
      v37 = sub_100039C30();
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v37) & 1) == 0)
      {
        v84 = v34;
        dispatch thunk of SetAlgebra.formUnion(_:)(&v84, &type metadata for RealizedInfo.Flags, v11);
      }
      v35(v80, 0);
      *(_QWORD *)(v3 + 16) = 0xD000000000000022;
      *(_QWORD *)(v3 + 24) = 0x8000000100126AD0;
      sub_10008DE14((uint64_t)a1, v3);
      swift_release(v3);
      return 1;
    }
  }
  v80[0] = *v10;
  *(_QWORD *)&v78 = v9;
  v14 = sub_100039BE8();
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for RealizedInfo.Flags, v14) & 1) == 0)
  {
    v15 = v8();
    v80[0] = *sub_10002C17C();
    *(_QWORD *)&v78 = v15;
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for RealizedInfo.Flags, v14) & 1) == 0)
    {
      LODWORD(v80[0]) = *(_DWORD *)sub_1000A4674();
      LODWORD(v78) = v4;
      if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v80, &type metadata for ExtensionManager.Settings.Flags, v5) & 1) != 0)
      {
        v38 = v7[3];
        v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 208);
        v40 = swift_retain(v38);
        LOBYTE(v39) = v39(v40);
        swift_release(v38);
        if ((v39 & 1) != 0)
        {
          v41 = *sub_10002C0BC();
          v42 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*v7 + 184))(v80);
          *(_QWORD *)&v78 = v41;
          v84 = *v43;
          dispatch thunk of SetAlgebra.intersection(_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v14);
          v44 = sub_100039C30();
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v44) & 1) == 0)
          {
            v84 = v41;
            dispatch thunk of SetAlgebra.formUnion(_:)(&v84, &type metadata for RealizedInfo.Flags, v14);
          }
          v42(v80, 0);
          v45 = 0xD000000000000014;
          v46 = "Apple prefix trusted";
LABEL_31:
          *(_QWORD *)(v3 + 16) = v45;
          *(_QWORD *)(v3 + 24) = (unint64_t)(v46 - 32) | 0x8000000000000000;
LABEL_46:
          v72 = *a1;
          v73 = *sub_10002BE6C();
          v74 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v72 + 184))(v80);
          *(_QWORD *)&v78 = v73;
          v84 = *v75;
          dispatch thunk of SetAlgebra.intersection(_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v14);
          v76 = sub_100039C30();
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v76) & 1) == 0)
          {
            v84 = v73;
            dispatch thunk of SetAlgebra.formUnion(_:)(&v84, &type metadata for RealizedInfo.Flags, v14);
          }
          v74(v80, 0);
          v13 = 1;
          goto LABEL_14;
        }
      }
      sub_10003A1E0((uint64_t *)(v7[3] + 24), (uint64_t)v80);
      if (v83 == 1)
      {
        swift_release(v80[0]);
        v47 = v7[3];
        v48 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 208);
        v49 = swift_retain(v47);
        LOBYTE(v48) = v48(v49);
        swift_release(v47);
        if ((v48 & 1) == 0)
        {
          v16 = 0xD00000000000001ELL;
          v17 = "Third-party kext in collection";
          goto LABEL_8;
        }
        v50 = *sub_10002C0BC();
        v51 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*v7 + 184))(v80);
        *(_QWORD *)&v78 = v50;
        v84 = *v52;
        dispatch thunk of SetAlgebra.intersection(_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v14);
        v53 = sub_100039C30();
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v53) & 1) == 0)
        {
          v84 = v50;
          dispatch thunk of SetAlgebra.formUnion(_:)(&v84, &type metadata for RealizedInfo.Flags, v14);
        }
        v51(v80, 0);
        v45 = 0xD000000000000020;
        v46 = "Trusted Apple kext in collection";
        goto LABEL_31;
      }
      sub_10003A258(v80);
      v54 = *a1;
      sub_100019E1C(*a1 + 32, (uint64_t)&v78, &qword_100158010);
      if (!v79)
      {
        v16 = 0xD000000000000012;
        sub_1000124F8((uint64_t)&v78, &qword_100158010);
        v17 = "Bad code signature";
        goto LABEL_8;
      }
      sub_100004E2C(&v78, (uint64_t)v80);
      v55 = v81;
      v56 = v82;
      sub_100004DE4(v80, v81);
      v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 24))(v55, v56);
      if (v58)
      {
        v59 = v58;
        if (v58 != (void *)1)
        {
          v70 = v57;
          *(_QWORD *)&v78 = 0;
          *((_QWORD *)&v78 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(17);
          swift_bridgeObjectRelease(*((_QWORD *)&v78 + 1));
          *(_QWORD *)&v78 = 0x204449206D616554;
          *((_QWORD *)&v78 + 1) = 0xEF203A64696C6176;
          v71._countAndFlagsBits = v70;
          v71._object = v59;
          String.append(_:)(v71);
          sub_100017450(v70, (unint64_t)v59);
          v69 = *((_QWORD *)&v78 + 1);
          v63 = v78;
          goto LABEL_45;
        }
        v60 = *(uint64_t (**)(void))(*(_QWORD *)v54 + 168);
        v61 = ((uint64_t (*)(uint64_t))v60)(v57);
        *(_QWORD *)&v78 = *sub_10002C01C();
        v85 = v61;
        if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v78, &type metadata for RealizedInfo.Flags, v14) & 1) == 0)
        {
          v62 = v60();
          *(_QWORD *)&v78 = *sub_10002C06C();
          v85 = v62;
          if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v78, &type metadata for RealizedInfo.Flags, v14) & 1) == 0)
          {
            *(_QWORD *)(v3 + 16) = 0xD000000000000012;
            *(_QWORD *)(v3 + 24) = 0x80000001001269E0;
            sub_100005D08(v80);
            v16 = *(_QWORD *)(v3 + 16);
            v18 = *(_QWORD *)(v3 + 24);
            goto LABEL_9;
          }
        }
        v63 = 0xD000000000000016;
        v64 = "Exception list trusted";
      }
      else
      {
        v65 = *sub_10002C0BC();
        v66 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *))(*(_QWORD *)v54 + 184))(&v78);
        v85 = v65;
        v77 = *v67;
        dispatch thunk of SetAlgebra.intersection(_:)(&v84, &v85, &type metadata for RealizedInfo.Flags, v14);
        v68 = sub_100039C30();
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v84, &v85, &type metadata for RealizedInfo.Flags, v68) & 1) == 0)
        {
          v77 = v65;
          dispatch thunk of SetAlgebra.formUnion(_:)(&v77, &type metadata for RealizedInfo.Flags, v14);
        }
        v66(&v78, 0);
        v63 = 0xD000000000000017;
        v64 = "Platform binary trusted";
      }
      v69 = (unint64_t)(v64 - 32) | 0x8000000000000000;
LABEL_45:
      *(_QWORD *)(v3 + 16) = v63;
      *(_QWORD *)(v3 + 24) = v69;
      sub_100005D08(v80);
      goto LABEL_46;
    }
  }
  v16 = 0xD000000000000018;
  v17 = "Rejected by exclude list";
LABEL_8:
  v18 = (unint64_t)(v17 - 32) | 0x8000000000000000;
  *(_QWORD *)(v3 + 16) = v16;
  *(_QWORD *)(v3 + 24) = v18;
LABEL_9:
  v19 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)*a1 + 256);
  swift_bridgeObjectRetain(v18);
  v20 = (void (*)(_QWORD *, _QWORD))v19(v80);
  v22 = v21;
  v23 = (_QWORD *)*v21;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
  *v22 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = sub_10008EC3C(0, v23[2] + 1, 1, v23);
    *v22 = v23;
  }
  v26 = v23[2];
  v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    v23 = sub_10008EC3C((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
    *v22 = v23;
  }
  v23[2] = v26 + 1;
  v27 = &v23[10 * v26];
  v27[4] = v16;
  v27[5] = v18;
  *((_OWORD *)v27 + 3) = 0u;
  *((_OWORD *)v27 + 4) = 0u;
  *((_OWORD *)v27 + 5) = 0u;
  v27[12] = 0;
  *((_BYTE *)v27 + 104) = 31;
  v20(v80, 0);
  v13 = 0;
LABEL_14:
  v28 = *a1;
  swift_retain(*a1);
  v29 = *sub_10002BEBC();
  v30 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v28 + 184))(v80);
  *(_QWORD *)&v78 = v29;
  v84 = *v31;
  dispatch thunk of SetAlgebra.intersection(_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v14);
  v32 = sub_100039C30();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(&v85, &v78, &type metadata for RealizedInfo.Flags, v32) & 1) == 0)
  {
    v84 = v29;
    dispatch thunk of SetAlgebra.formUnion(_:)(&v84, &type metadata for RealizedInfo.Flags, v14);
  }
  v30(v80, 0);
  swift_release(v28);
  sub_10008DE14((uint64_t)a1, v3);
  swift_release(v3);
  return v13;
}

uint64_t sub_10008DE14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char **v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_signpost_id_t v36;
  os_log_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  v48 = type metadata accessor for OSSignpostID(0);
  v4 = *(_QWORD *)(v48 - 8);
  v5 = __chkstk_darwin(v48);
  v47 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - v7;
  v9 = type metadata accessor for OSSignposter(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 144);
  v15 = swift_retain(v13);
  v45 = v14(v15);
  v17 = v16;
  swift_release(v13);
  v18 = sub_1000D3480();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v18, v9);
  v19 = sub_1000901B8();
  v20 = *v19;
  v21 = *((_BYTE *)v19 + 16);
  swift_retain_n(a2, 2);
  v22 = swift_bridgeObjectRetain(v17);
  v23 = static OSSignpostID.exclusive.getter(v22);
  v24 = OSSignposter.logHandle.getter(v23);
  v46 = static os_signpost_type_t.event.getter(v24);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease_n(v17, 2);
    swift_release_n(a2, 2);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v48);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v42 = v24;
  v43 = v10;
  v44 = v9;
  if ((v21 & 1) != 0)
  {
    if ((unint64_t)v20 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v20 >> 11 == 27)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      if (v20 >> 16 <= 0x10)
      {
        v40 = &v53;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  if (!v20)
  {
LABEL_15:
    swift_bridgeObjectRelease_n(v17, 2);
    result = swift_release_n(a2, 2);
    __break(1u);
    return result;
  }
  v40 = v20;
LABEL_10:
  v27 = v47;
  v26 = v48;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v47, v8, v48);
  v28 = swift_slowAlloc(22, -1);
  v41 = v4;
  v29 = v28;
  v30 = v8;
  v31 = swift_slowAlloc(64, -1);
  v52 = v31;
  *(_DWORD *)v29 = 136315394;
  swift_bridgeObjectRetain(v17);
  v50 = sub_1000055A0(v45, v17, &v52);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v29 + 4, v29 + 12);
  swift_bridgeObjectRelease_n(v17, 3);
  *(_WORD *)(v29 + 12) = 2080;
  swift_beginAccess(a2 + 16, &v50, 0, 0);
  v32 = v26;
  v34 = *(_QWORD *)(a2 + 16);
  v33 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v33);
  v49 = sub_1000055A0(v34, v33, &v52);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v29 + 14, v29 + 22);
  swift_release_n(a2, 2);
  v35 = swift_bridgeObjectRelease(v33);
  v36 = OSSignpostID.rawValue.getter(v35);
  v37 = v42;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, (os_signpost_type_t)v46, v36, v40, "Authenticated: %s with result: %s", (uint8_t *)v29, 0x16u);
  swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v31, -1, -1);
  swift_slowDealloc(v29, -1, -1);

  v38 = *(void (**)(char *, uint64_t))(v41 + 8);
  v38(v30, v32);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v44);
  return ((uint64_t (*)(char *, uint64_t))v38)(v27, v32);
}

uint64_t sub_10008E1C8(uint64_t *a1)
{
  uint64_t v1;
  int v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD);
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *, _QWORD);
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];

  v3 = *(_DWORD *)(v1 + 640);
  LODWORD(v23[0]) = *(_DWORD *)sub_1000A44E4();
  LODWORD(v22) = v3;
  v4 = sub_100012808();
  v5 = dispatch thunk of SetAlgebra.isSuperset(of:)(v23, &type metadata for ExtensionManager.Settings.Flags, v4);
  v6 = *a1;
  if ((v5 & 1) != 0)
  {
    v7 = *sub_10002BF2C();
    v8 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v6 + 184))(v23);
    v22 = v7;
    v20 = *v9;
    v10 = sub_100039BE8();
    dispatch thunk of SetAlgebra.intersection(_:)(&v21, &v22, &type metadata for RealizedInfo.Flags, v10);
    v11 = sub_100039C30();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v22, &type metadata for RealizedInfo.Flags, v11) & 1) == 0)
    {
      v20 = v7;
      dispatch thunk of SetAlgebra.formUnion(_:)(&v20, &type metadata for RealizedInfo.Flags, v10);
    }
    v8(v23, 0);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v6 + 192))(v23);
    v12 = v23[3];
    sub_1000124F8((uint64_t)v23, &qword_100158910);
    if (!v12)
    {
      sub_10008E3C0(a1);
      return 0;
    }
    v13 = *a1;
    v14 = *sub_10002BF2C();
    v15 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v13 + 184))(v23);
    v22 = v14;
    v20 = *v16;
    v17 = sub_100039BE8();
    dispatch thunk of SetAlgebra.intersection(_:)(&v21, &v22, &type metadata for RealizedInfo.Flags, v17);
    v18 = sub_100039C30();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v22, &type metadata for RealizedInfo.Flags, v18) & 1) == 0)
    {
      v20 = v14;
      dispatch thunk of SetAlgebra.formUnion(_:)(&v20, &type metadata for RealizedInfo.Flags, v17);
    }
    v15(v23, 0);
    sub_10008E3C0(a1);
  }
  return 1;
}

uint64_t sub_10008E3C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_BYTE *, _QWORD);
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];

  v1 = *a1;
  swift_retain(*a1);
  v2 = *sub_10002BF7C();
  v3 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 184))(v11);
  v10 = v2;
  v8 = *v4;
  v5 = sub_100039BE8();
  dispatch thunk of SetAlgebra.intersection(_:)(&v9, &v10, &type metadata for RealizedInfo.Flags, v5);
  v6 = sub_100039C30();
  if ((dispatch thunk of static Equatable.== infix(_:_:)(&v9, &v10, &type metadata for RealizedInfo.Flags, v6) & 1) == 0)
  {
    v8 = v2;
    dispatch thunk of SetAlgebra.formUnion(_:)(&v8, &type metadata for RealizedInfo.Flags, v5);
  }
  v3(v11, 0);
  return swift_release(v1);
}

BOOL sub_10008E4AC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(_QWORD *, _QWORD);
  char *v13;
  uint64_t (*v14)(void);
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  void (*v42)(_QWORD *, _QWORD);
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(_QWORD *, _QWORD);
  uint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  _UNKNOWN **v82;
  _QWORD *v83;
  uint64_t (*v84)(_QWORD *);
  unint64_t v85;
  _QWORD *v86;
  _QWORD v87[4];
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[2];

  v2 = v1;
  v4 = sub_100005C88(&qword_100158C08);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100112440;
  v81 = sub_10002BFCC();
  *(_QWORD *)(v5 + 32) = *v81;
  v80 = sub_10002C01C();
  *(_QWORD *)(v5 + 40) = *v80;
  v79 = sub_10002C06C();
  *(_QWORD *)(v5 + 48) = *v79;
  v75 = sub_10002C17C();
  *(_QWORD *)(v5 + 56) = *v75;
  v90[0] = v5;
  v6 = sub_100039BE8();
  v7 = sub_100005C88(&qword_10015A828);
  v8 = sub_10001284C((unint64_t *)&qword_10015A830, &qword_10015A828, (uint64_t)&protocol conformance descriptor for [A]);
  v9 = dispatch thunk of SetAlgebra.init<A>(_:)(v87, v90, v7, v8, &type metadata for RealizedInfo.Flags, v6);
  v10 = v87[0];
  v11 = (_QWORD *)*a1;
  v89 = (*(uint64_t (**)(_QWORD *))(*v11 + 168))(v9);
  v90[0] = v10;
  sub_100039BA0();
  dispatch thunk of RawRepresentable.rawValue.getter(&v88, &type metadata for RealizedInfo.Flags);
  v77 = sub_100039B14();
  dispatch thunk of OptionSet.init(rawValue:)(&v88, &type metadata for RealizedInfo.Flags, v77);
  v85 = v6;
  dispatch thunk of SetAlgebra.formIntersection(_:)(v90, &type metadata for RealizedInfo.Flags, v6);
  v76 = v87[0];
  v86 = v11;
  v84 = *(uint64_t (**)(_QWORD *))(*v11 + 184);
  v12 = (void (*)(_QWORD *, _QWORD))v84(v87);
  v78 = v10;
  sub_10008EB30(v10);
  v12(v87, 0);
  v82 = sub_100026B44();
  v13 = (char *)v82[2];
  if (v13)
  {
    v14 = *(uint64_t (**)(void))(*v1 + 168);
    v15 = (unsigned __int8 *)(v82 + 4);
    v83 = v1;
    do
    {
      v17 = *v15++;
      v16 = v17;
      v18 = v14();
      if (*(_QWORD *)(v18 + 16) && (v19 = sub_100035478(v16), (v20 & 1) != 0))
      {
        v21 = *(_QWORD *)(v18 + 56) + 24 * v19;
        v22 = *(_QWORD *)(v21 + 8);
        v23 = *(_BYTE *)v21;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRelease(v18);
        v24 = sub_1000274B0((uint64_t)v86, v23, v22);
        v25 = swift_bridgeObjectRelease(v22);
        if ((v24 & 1) != 0)
        {
          v26 = static os_log_type_t.info.getter(v25);
          v27 = sub_100005C88((uint64_t *)&unk_1001596E0);
          v28 = swift_allocObject(v27, 112, 7);
          *(_OWORD *)(v28 + 16) = xmmword_10010F380;
          v29 = v86[3];
          v30 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 200);
          v31 = swift_retain(v29);
          v32 = v30(v31);
          v34 = v33;
          swift_release(v29);
          *(_QWORD *)(v28 + 56) = &type metadata for String;
          v35 = sub_100026838();
          *(_QWORD *)(v28 + 64) = v35;
          *(_QWORD *)(v28 + 32) = v32;
          *(_QWORD *)(v28 + 40) = v34;
          v36 = sub_100026B50(v16);
          *(_QWORD *)(v28 + 96) = &type metadata for String;
          *(_QWORD *)(v28 + 104) = v35;
          *(_QWORD *)(v28 + 72) = v36;
          *(_QWORD *)(v28 + 80) = v37;
          v38 = sub_10002687C();
          v39 = (void *)static OS_os_log.default.getter(v38);
          os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v39, "%{public}s matches %{public}s.", 30, 2, v28);
          swift_bridgeObjectRelease(v28);

          if (v16)
          {
            if (v16 == 1)
              v40 = v80;
            else
              v40 = v79;
          }
          else
          {
            v40 = v81;
          }
          v41 = *v40;
          v42 = (void (*)(_QWORD *, _QWORD))v84(v87);
          v90[0] = v41;
          v88 = *v43;
          dispatch thunk of SetAlgebra.intersection(_:)(&v89, v90, &type metadata for RealizedInfo.Flags, v85);
          v44 = sub_100039C30();
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v89, v90, &type metadata for RealizedInfo.Flags, v44) & 1) == 0)
          {
            v88 = v41;
            dispatch thunk of SetAlgebra.formUnion(_:)(&v88, &type metadata for RealizedInfo.Flags, v85);
          }
          v42(v87, 0);
          v2 = v83;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v18);
      }
      --v13;
    }
    while (v13);
  }
  v45 = swift_bridgeObjectRelease(v82);
  v46 = v2[62];
  if (v46 && *(_QWORD *)(v46 + 16))
  {
    v48 = v2[20];
    v47 = v2[21];
    swift_bridgeObjectRetain(v47);
    v49 = sub_100005DE8(v48, v47);
    if ((v50 & 1) != 0)
    {
      v51 = *(_QWORD **)(*(_QWORD *)(v46 + 56) + 8 * v49);
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRelease(v47);
      v52 = v86[3];
      v53 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 144);
      v54 = swift_retain(v52);
      v55 = v53(v54);
      v57 = v56;
      swift_release(v52);
      LOBYTE(v52) = sub_100034320(v55, v57, v51);
      swift_bridgeObjectRelease(v51);
      v45 = swift_bridgeObjectRelease(v57);
      if ((v52 & 1) != 0)
      {
        v58 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v59 = swift_allocObject(v58, 72, 7);
        *(_OWORD *)(v59 + 16) = xmmword_10010F050;
        v60 = v86[3];
        v61 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 200);
        v62 = swift_retain(v60);
        v63 = v61(v62);
        v65 = v64;
        swift_release(v60);
        *(_QWORD *)(v59 + 56) = &type metadata for String;
        *(_QWORD *)(v59 + 64) = sub_100026838();
        *(_QWORD *)(v59 + 32) = v63;
        *(_QWORD *)(v59 + 40) = v65;
        v66 = sub_10002687C();
        v67 = (void *)static OS_os_log.default.getter(v66);
        v68 = static os_log_type_t.default.getter(v67);
        os_log(_:dso:log:type:_:)("%{public}s found in built-in deny list", 38, 2, &_mh_execute_header, v67, v68, v59);
        swift_bridgeObjectRelease(v59);

        v69 = *v75;
        v70 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*v86 + 184))(v87);
        v90[0] = v69;
        v88 = *v71;
        dispatch thunk of SetAlgebra.intersection(_:)(&v89, v90, &type metadata for RealizedInfo.Flags, v85);
        v72 = sub_100039C30();
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v89, v90, &type metadata for RealizedInfo.Flags, v72) & 1) == 0)
        {
          v88 = v69;
          dispatch thunk of SetAlgebra.formUnion(_:)(&v88, &type metadata for RealizedInfo.Flags, v85);
        }
        v45 = v70(v87, 0);
      }
    }
    else
    {
      v45 = swift_bridgeObjectRelease(v47);
    }
  }
  v89 = (*(uint64_t (**)(uint64_t))(*v86 + 168))(v45);
  v90[0] = v78;
  dispatch thunk of RawRepresentable.rawValue.getter(&v88, &type metadata for RealizedInfo.Flags);
  dispatch thunk of OptionSet.init(rawValue:)(&v88, &type metadata for RealizedInfo.Flags, v77);
  dispatch thunk of SetAlgebra.formIntersection(_:)(v90, &type metadata for RealizedInfo.Flags, v85);
  v90[0] = v76;
  v73 = sub_100039C30();
  return (dispatch thunk of static Equatable.== infix(_:_:)(v87, v90, &type metadata for RealizedInfo.Flags, v73) & 1) == 0;
}

uint64_t sub_10008EB30(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = a1;
  v1 = sub_100039BE8();
  dispatch thunk of SetAlgebra.intersection(_:)(&v3, &v4, &type metadata for RealizedInfo.Flags, v1);
  if ((dispatch thunk of SetAlgebra.isEmpty.getter(&type metadata for RealizedInfo.Flags, v1) & 1) != 0)
    return 0;
  dispatch thunk of SetAlgebra.subtract(_:)(&v4, &type metadata for RealizedInfo.Flags, v1);
  return v3;
}

uint64_t sub_10008EBD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10008F1A0(&qword_10015A878, (uint64_t)&unk_10011C000);
  v3 = sub_10008F1A0(&qword_10015A880, (uint64_t)&unk_10011BFC0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_QWORD *sub_10008EC3C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005C88(&qword_100159410);
      v11 = (_QWORD *)swift_allocObject(v10, 80 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 80);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[10 * v8 + 4])
          memmove(v13, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10008ED58(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10008ED58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 80 * a1 + 32;
  v6 = a3 + 80 * v4;
  if (v5 >= v6 || v5 + 80 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_10008EE4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  Swift::Int v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005C88(&qword_10015A888);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v38 = v1;
    v39 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v39 + 8 * v4);
      v7 = *(_QWORD *)(v3 + 40);
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v10 = v9;
      Hasher.init(_seed:)(v40, v7);
      v11 = v6;
      String.hash(into:)(v40, v8, v10);
      v12 = Hasher._finalize()();
      result = (void *)swift_bridgeObjectRelease(v10);
      v14 = -1 << *(_BYTE *)(v3 + 32);
      v15 = v12 & ~v14;
      v16 = v15 >> 6;
      v17 = *(_QWORD *)(v5 + 8 * (v15 >> 6));
      v18 = 1 << v15;
      if (((1 << v15) & v17) != 0)
      {
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15));
        v21 = v20;
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        if (v19 == v22 && v21 == v23)
        {
LABEL_3:
          swift_bridgeObjectRelease_n(v21, 2);
LABEL_4:

          goto LABEL_5;
        }
        v25 = v23;
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0);
        swift_bridgeObjectRelease(v21);
        result = (void *)swift_bridgeObjectRelease(v25);
        if ((v26 & 1) != 0)
          goto LABEL_4;
        v27 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v27;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)(v5 + 8 * (v15 >> 6));
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15));
          v21 = v29;
          v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
          if (v28 == v30 && v21 == v31)
            goto LABEL_3;
          v33 = v31;
          v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v21, v30, v31, 0);
          swift_bridgeObjectRelease(v21);
          result = (void *)swift_bridgeObjectRelease(v33);
          if ((v34 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v16) = v18 | v17;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15) = v11;
      v35 = *(_QWORD *)(v3 + 16);
      v36 = __OFADD__(v35, 1);
      v37 = v35 + 1;
      if (v36)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v37;
LABEL_5:
      if (++v4 == v38)
        return (void *)v3;
    }
  }
  return &_swiftEmptySetSingleton;
}

void type metadata accessor for URLResourceKey()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10015A858)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_10014A120);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10015A858);
  }
}

unint64_t sub_10008F0CC()
{
  unint64_t result;

  result = qword_10015A850;
  if (!qword_10015A850)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_10015A850);
  }
  return result;
}

uint64_t sub_10008F110()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008F134()
{
  return sub_10008F1A0(&qword_10015A860, (uint64_t)&unk_100112FBC);
}

uint64_t sub_10008F158()
{
  return sub_10008F1A0(&qword_10015A868, (uint64_t)&unk_100112F90);
}

uint64_t sub_10008F17C()
{
  return sub_10008F1A0(&qword_10015A870, (uint64_t)&unk_100112FFC);
}

uint64_t sub_10008F1A0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for URLResourceKey();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008F1E0(uint64_t a1)
{
  return sub_10008F404(a1, (uint64_t *)&kCFBundleIdentifierKey, &qword_100175570, &qword_100175578);
}

uint64_t *sub_10008F1F8()
{
  if (qword_100163530 != -1)
    swift_once(&qword_100163530, sub_10008F1E0);
  return &qword_100175570;
}

uint64_t sub_10008F238(uint64_t a1)
{
  return sub_10008F404(a1, (uint64_t *)&kCFBundleExecutableKey, &qword_100175580, &qword_100175588);
}

uint64_t *sub_10008F250()
{
  if (qword_100163538 != -1)
    swift_once(&qword_100163538, sub_10008F238);
  return &qword_100175580;
}

uint64_t sub_10008F290(uint64_t a1)
{
  return sub_10008F404(a1, &_kCFBundlePackageTypeKey, &qword_100175590, &qword_100175598);
}

uint64_t *sub_10008F2A8()
{
  if (qword_100163540 != -1)
    swift_once(&qword_100163540, sub_10008F290);
  return &qword_100175590;
}

void *sub_10008F2E8()
{
  return &unk_10014A1A8;
}

uint64_t sub_10008F2F4(uint64_t a1)
{
  return sub_10008F404(a1, (uint64_t *)&kCFBundleNameKey, &qword_1001755A0, &qword_1001755A8);
}

uint64_t *sub_10008F30C()
{
  if (qword_100163548 != -1)
    swift_once(&qword_100163548, sub_10008F2F4);
  return &qword_1001755A0;
}

void *sub_10008F34C()
{
  return &unk_10014A1B8;
}

void *sub_10008F358()
{
  return &unk_10014A1C8;
}

void *sub_10008F364()
{
  return &unk_10014A1D8;
}

void *sub_10008F370()
{
  return &unk_10014A1E8;
}

void *sub_10008F37C()
{
  return &unk_10014A1F8;
}

void *sub_10008F388()
{
  return &unk_10014A208;
}

void *sub_10008F394()
{
  return &unk_10014A218;
}

void *sub_10008F3A0()
{
  return &unk_10014A228;
}

uint64_t sub_10008F3AC(uint64_t a1)
{
  return sub_10008F404(a1, (uint64_t *)&kCFBundleVersionKey, &qword_1001755B0, &qword_1001755B8);
}

uint64_t *sub_10008F3C4()
{
  if (qword_100163550 != -1)
    swift_once(&qword_100163550, sub_10008F3AC);
  return &qword_1001755B0;
}

uint64_t sub_10008F404(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a2;
  if (*a2)
  {
    result = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    *a3 = result;
    *a4 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_10008F43C()
{
  return &unk_10014A238;
}

void *sub_10008F448()
{
  return &unk_10014A248;
}

void *sub_10008F454()
{
  return &unk_10014A258;
}

void *sub_10008F460()
{
  return &unk_10014A268;
}

const char *sub_10008F46C()
{
  return "OSBundleUUID";
}

void *sub_10008F478()
{
  return &unk_10014A278;
}

void *sub_10008F484()
{
  return &unk_10014A288;
}

void *sub_10008F490()
{
  return &unk_10014A298;
}

void *sub_10008F49C()
{
  return &unk_10014A2A8;
}

void *sub_10008F4A8()
{
  return &unk_10014A2B8;
}

void *sub_10008F4B4()
{
  return &unk_10014A2C8;
}

void *sub_10008F4C0()
{
  return &unk_10014A2D8;
}

void *sub_10008F4CC()
{
  return &unk_1001130C8;
}

void *sub_10008F4D8()
{
  return &unk_10014A2E8;
}

void *sub_10008F4E4()
{
  return &unk_10014A2F8;
}

void *sub_10008F4F0()
{
  return &unk_10014A308;
}

const char *sub_10008F4FC()
{
  return "None";
}

const char *sub_10008F508()
{
  return "Apple";
}

void *sub_10008F514()
{
  return &unk_10014A318;
}

void *sub_10008F520()
{
  return &unk_1001130F8;
}

void *sub_10008F52C()
{
  return &unk_10014A328;
}

const char *sub_10008F538()
{
  return "OSBundlePath";
}

void *sub_10008F544()
{
  return &unk_100113118;
}

void *sub_10008F550()
{
  return &unk_10014A338;
}

void *sub_10008F55C()
{
  return &unk_10014A348;
}

void *sub_10008F568()
{
  return &unk_10014A358;
}

void *sub_10008F574()
{
  return &unk_10014A368;
}

void *sub_10008F580()
{
  return &unk_10014A378;
}

void *sub_10008F58C()
{
  return &unk_10014A388;
}

void *sub_10008F598()
{
  return &unk_10014A398;
}

void *sub_10008F5A4()
{
  return &unk_10014A3A8;
}

void *sub_10008F5B0()
{
  return &unk_10014A3B8;
}

void *sub_10008F5BC()
{
  return &unk_10014A3C8;
}

void *sub_10008F5C8()
{
  return &unk_10014A3D8;
}

void *sub_10008F5D4()
{
  return &unk_10014A3E8;
}

void *sub_10008F5E0()
{
  return &unk_10014A3F8;
}

const char *sub_10008F5EC()
{
  return "Send Resource";
}

void *sub_10008F5F8()
{
  return &unk_10014A408;
}

void *sub_10008F604()
{
  return &unk_10014A418;
}

void *sub_10008F610()
{
  return &unk_10014A428;
}

void *sub_10008F61C()
{
  return &unk_10014A438;
}

void *sub_10008F628()
{
  return &unk_10014A448;
}

void *sub_10008F634()
{
  return &unk_10014A458;
}

void *sub_10008F640()
{
  return &unk_10014A468;
}

const char *sub_10008F64C()
{
  return "Check In Token";
}

void *sub_10008F658()
{
  return &unk_10014A478;
}

const char *sub_10008F664()
{
  return "Unload";
}

void *sub_10008F670()
{
  return &unk_10014A488;
}

const char *sub_10008F67C()
{
  return "PageableKCName";
}

const char *sub_10008F688()
{
  return "AuxKCName";
}

const char *sub_10008F694()
{
  return "loadfilesetkc";
}

void *sub_10008F6A0()
{
  return &unk_10014A498;
}

void *sub_10008F6AC()
{
  return &unk_10014A4A8;
}

void *sub_10008F6B8()
{
  return &unk_10014A4B8;
}

void *sub_10008F6C4()
{
  return &unk_10014A4C8;
}

const char *sub_10008F6D0()
{
  return "LoadFromKC";
}

void *sub_10008F6DC()
{
  return &unk_10014A4D8;
}

void *sub_10008F6E8()
{
  return &unk_1001131A0;
}

void *sub_10008F6F4()
{
  return &unk_1001131B0;
}

const char *sub_10008F700()
{
  return "Auxiliary";
}

const char *sub_10008F70C()
{
  return "System";
}

const char *sub_10008F718()
{
  return "Primary";
}

const char *sub_10008F724()
{
  return "Codeless";
}

const char *sub_10008F730()
{
  return "Loaded State";
}

void *sub_10008F73C()
{
  return &unk_10014A4E8;
}

const char *sub_10008F748()
{
  return "DaemonReady";
}

void *sub_10008F754()
{
  return &unk_10014A4F8;
}

void *sub_10008F760()
{
  return &unk_10014A508;
}

void *sub_10008F76C()
{
  return &unk_10014A518;
}

const char *sub_10008F778()
{
  return "Get Dexts";
}

void *sub_10008F784()
{
  return &unk_10014A528;
}

_DWORD *sub_10008F790@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10008F79C(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_10008F7A4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_10008F7B8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_10008F7CC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10008F7E0(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_10008F810@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_10008F83C@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_10008F860(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_10008F874(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_10008F888(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_10008F89C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10008F8B0(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10008F8C4(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_10008F8D8(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_10008F8EC()
{
  _DWORD *v0;

  return *v0 == 0;
}

_DWORD *sub_10008F8FC(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

_DWORD *sub_10008F910@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_10008F920(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_10008F92C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10008F940@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v4;
  uint64_t result;

  v4 = sub_100091A44(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void *sub_10008F97C()
{
  return &unk_10014A538;
}

void *sub_10008F988()
{
  return &unk_10014A548;
}

void *sub_10008F994()
{
  return &unk_10014A558;
}

const char *sub_10008F9A0()
{
  return "IOMatchDefer";
}

void *sub_10008F9AC()
{
  return &unk_10014A568;
}

void *sub_10008F9B8()
{
  return &unk_10014A578;
}

void *sub_10008F9C4()
{
  return &unk_10014A588;
}

const char *sub_10008F9D0()
{
  return "_BootKCID";
}

const char *sub_10008F9DC()
{
  return "_PageableKCID";
}

const char *sub_10008F9E8()
{
  return "_PrelinkKCID";
}

const char *sub_10008F9F4()
{
  return "ManagerVersion";
}

const char *sub_10008FA00()
{
  return "arch";
}

void *sub_10008FA0C()
{
  return &unk_10014A598;
}

const char *sub_10008FA18()
{
  return "kern.bootargs";
}

const char *sub_10008FA24()
{
  return "kern.safeboot";
}

void *sub_10008FA30()
{
  return &unk_10014A5A8;
}

uint64_t sub_10008FA3C()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = nullsub_1(0x545845545F5FLL, 0xE600000000000000, 0x6769666E6F635F5FLL, 0xEE007473696C705FLL);
  qword_1001755C0 = result;
  *(_QWORD *)algn_1001755C8 = v1;
  qword_1001755D0 = v2;
  unk_1001755D8 = v3;
  return result;
}

uint64_t *sub_10008FA90()
{
  if (qword_100163560 != -1)
    swift_once(&qword_100163560, sub_10008FA3C);
  return &qword_1001755C0;
}

uint64_t sub_10008FAD0()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = nullsub_1(0x4E494C4552505F5FLL, 0xEE004F464E495F4BLL, 0x6F666E695F5FLL, 0xE600000000000000);
  qword_1001755E0 = result;
  *(_QWORD *)algn_1001755E8 = v1;
  qword_1001755F0 = v2;
  unk_1001755F8 = v3;
  return result;
}

uint64_t *sub_10008FB24()
{
  if (qword_100163568 != -1)
    swift_once(&qword_100163568, sub_10008FAD0);
  return &qword_1001755E0;
}

uint64_t sub_10008FB64()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = nullsub_1(0x4E494B4E494C5F5FLL, 0xEA00000000004F46, 0x6C6F626D79735F5FLL, 0xEC00000073746573);
  qword_100175600 = result;
  *(_QWORD *)algn_100175608 = v1;
  qword_100175610 = v2;
  unk_100175618 = v3;
  return result;
}

uint64_t *sub_10008FBBC()
{
  if (qword_100163578 != -1)
    swift_once(&qword_100163578, sub_10008FB64);
  return &qword_100175600;
}

uint64_t sub_10008FBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;

  result = nullsub_1(0x545845545F5FLL, 0xE600000000000000, a3, a4);
  qword_100175620 = result;
  *(_QWORD *)algn_100175628 = v5;
  return result;
}

uint64_t *sub_10008FC2C()
{
  if (qword_100163580 != -1)
    swift_once(&qword_100163580, sub_10008FBFC);
  return &qword_100175620;
}

uint64_t sub_10008FC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;

  result = nullsub_1(0x455F545845545F5FLL, 0xEB00000000434558, a3, a4);
  qword_100175630 = result;
  *(_QWORD *)algn_100175638 = v5;
  return result;
}

uint64_t *sub_10008FCA8()
{
  if (qword_100163588 != -1)
    swift_once(&qword_100163588, sub_10008FC6C);
  return &qword_100175630;
}

uint64_t sub_10008FCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;

  result = nullsub_1(0xD000000000000010, 0x8000000100127B40, a3, a4);
  qword_100175640 = result;
  *(_QWORD *)algn_100175648 = v5;
  return result;
}

uint64_t *sub_10008FD20()
{
  if (qword_100163590 != -1)
    swift_once(&qword_100163590, sub_10008FCE8);
  return &qword_100175640;
}

uint64_t sub_10008FD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;

  result = nullsub_1(0x535F415441445F5FLL, 0xEB000000004D5450, a3, a4);
  qword_100175650 = result;
  *(_QWORD *)algn_100175658 = v5;
  return result;
}

uint64_t *sub_10008FD9C()
{
  if (qword_100163598 != -1)
    swift_once(&qword_100163598, sub_10008FD60);
  return &qword_100175650;
}

uint64_t sub_10008FDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;

  result = nullsub_1(0x4E494C4552505F5FLL, 0xEE004F464E495F4BLL, a3, a4);
  qword_100175660 = result;
  *(_QWORD *)algn_100175668 = v5;
  return result;
}

uint64_t *sub_10008FE1C()
{
  if (qword_1001635A0 != -1)
    swift_once(&qword_1001635A0, sub_10008FDDC);
  return &qword_100175660;
}

uint64_t sub_10008FE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;

  result = nullsub_1(0x44454B4E494C5F5FLL, 0xEA00000000005449, a3, a4);
  qword_100175670 = result;
  *(_QWORD *)algn_100175678 = v5;
  return result;
}

uint64_t *sub_10008FE94()
{
  if (qword_1001635A8 != -1)
    swift_once(&qword_1001635A8, sub_10008FE5C);
  return &qword_100175670;
}

uint64_t sub_10008FED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;

  result = nullsub_1(0x5049454345525F5FLL, 0xEE004F464E495F54, a3, a4);
  qword_100175680 = result;
  *(_QWORD *)algn_100175688 = v5;
  return result;
}

uint64_t *sub_10008FF14()
{
  if (qword_1001635B0 != -1)
    swift_once(&qword_1001635B0, sub_10008FED4);
  return &qword_100175680;
}

void sub_10008FF54()
{
  qword_100175690 = (uint64_t)&off_10014A8D8;
}

uint64_t *sub_10008FF68()
{
  if (qword_1001635B8 != -1)
    swift_once(&qword_1001635B8, sub_10008FF54);
  return &qword_100175690;
}

void *sub_10008FFA8()
{
  return &unk_1001132B0;
}

void *sub_10008FFB4()
{
  return &unk_1001132B4;
}

void *sub_10008FFC0()
{
  return &unk_1001132B8;
}

void *sub_10008FFCC()
{
  return &unk_1001132BC;
}

void *sub_10008FFD8()
{
  return &unk_1001132C0;
}

const char *sub_10008FFE4()
{
  return "SymbolsSets";
}

const char *sub_10008FFF0()
{
  return "Symbols";
}

const char *sub_10008FFFC()
{
  return "SymbolName";
}

const char *sub_100090008()
{
  return "SymbolPrefix";
}

const char *sub_100090014()
{
  return "AliasTarget";
}

const char *sub_100090020()
{
  return "com.apple";
}

const char *sub_10009002C()
{
  return "com.apple.kpi.";
}

void *sub_100090038()
{
  return &unk_10014A5B8;
}

void *sub_100090044()
{
  return &unk_10014A5C8;
}

const char *sub_100090050()
{
  return "__kernel__";
}

const char *sub_10009005C()
{
  return "com.apple.txm";
}

const char *sub_100090068()
{
  return "com.apple.sptm";
}

void *sub_100090074()
{
  return &unk_10014A5D8;
}

void *sub_100090080()
{
  return &unk_10014A5E8;
}

void *sub_10009008C()
{
  return &unk_10014A5F8;
}

void *sub_100090098()
{
  return &unk_10014A608;
}

void *sub_1000900A4()
{
  return &unk_10014A618;
}

const char *sub_1000900B0()
{
  return "get-task-allow";
}

void *sub_1000900BC()
{
  return &unk_10014A628;
}

void *sub_1000900C8()
{
  return &unk_10014A638;
}

void *sub_1000900D4()
{
  return &unk_10014A648;
}

void *sub_1000900E0()
{
  return &unk_10014A658;
}

void *sub_1000900EC()
{
  return &unk_10014A668;
}

void *sub_1000900F8()
{
  return &unk_10014A678;
}

void *sub_100090104()
{
  return &unk_10014A688;
}

void *sub_100090110()
{
  return &unk_10014A698;
}

void *sub_10009011C()
{
  return &unk_10014A6A8;
}

void *sub_100090128()
{
  return &unk_10014A6B8;
}

void *sub_100090134()
{
  return &unk_10014A6C8;
}

void *sub_100090140()
{
  return &unk_10014A6D8;
}

void *sub_10009014C()
{
  return &unk_10014A6E8;
}

void *sub_100090158()
{
  return &unk_10014A6F8;
}

void *sub_100090164()
{
  return &unk_10014A708;
}

void *sub_100090170()
{
  return &unk_100113380;
}

const char *sub_10009017C()
{
  return "-restore";
}

char **sub_100090188()
{
  return &off_10014A718;
}

char **sub_100090194()
{
  return &off_10014A730;
}

char **sub_1000901A0()
{
  return &off_10014A748;
}

char **sub_1000901AC()
{
  return &off_10014A760;
}

char **sub_1000901B8()
{
  return &off_10014A778;
}

char **sub_1000901C4()
{
  return &off_10014A790;
}

char **sub_1000901D0()
{
  return &off_10014A7A8;
}

char **sub_1000901DC()
{
  return &off_10014A7C0;
}

char **sub_1000901E8()
{
  return &off_10014A7D8;
}

char **sub_1000901F4()
{
  return &off_10014A7F0;
}

char **sub_100090200()
{
  return &off_10014A808;
}

char **sub_10009020C()
{
  return &off_10014A820;
}

char **sub_100090218()
{
  return &off_10014A838;
}

char **sub_100090224()
{
  return &off_10014A850;
}

void *sub_100090230()
{
  return &unk_10014A868;
}

void *sub_10009023C()
{
  return &unk_10014A878;
}

void *sub_100090248()
{
  return &unk_10014A888;
}

void *sub_100090254()
{
  return &unk_10014A898;
}

void *sub_100090260()
{
  return &unk_10014A8A8;
}

const char *sub_10009026C()
{
  return "Name";
}

const char *sub_100090278()
{
  return "UserInfo";
}

const char *sub_100090284()
{
  return "isPlaceholder";
}

const char *sub_100090290()
{
  return "bundleIDs";
}

void sub_10009029C()
{
  qword_100175698 = (uint64_t)&off_10014A908;
}

uint64_t sub_1000902B0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100091890(&qword_1001635C0, &qword_100175698, (uint64_t)sub_10009029C, a1);
}

void sub_1000902CC()
{
  qword_1001756A0 = (uint64_t)&off_10014A930;
}

uint64_t *sub_1000902E0()
{
  if (qword_1001635C8 != -1)
    swift_once(&qword_1001635C8, sub_1000902CC);
  return &qword_1001756A0;
}

uint64_t sub_100090320@<X0>(uint64_t *a1@<X8>)
{
  return sub_100091890(&qword_1001635C8, &qword_1001756A0, (uint64_t)sub_1000902CC, a1);
}

void sub_10009033C()
{
  qword_1001756A8 = (uint64_t)&off_10014A958;
}

uint64_t *sub_100090350()
{
  if (qword_1001635D0 != -1)
    swift_once(&qword_1001635D0, sub_10009033C);
  return &qword_1001756A8;
}

_QWORD *sub_100090390(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  if (a1 == 0x657361656C6572 && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x657361656C6572, 0xE700000000000000, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(a4);
    return 0;
  }
  v10 = sub_100091A7C(a1, a2);
  if (v10 == 5)
  {
    swift_bridgeObjectRelease(a4);
  }
  else if (a4)
  {
    v12 = (_QWORD *)swift_allocObject(&unk_10014AA40, 40, 7);
    v12[2] = v10;
    v12[3] = a3;
    v12[4] = a4;
    return v12;
  }
  return (_QWORD *)v10;
}

uint64_t sub_10009046C(uint64_t a1)
{
  uint64_t v1;

  v1 = 0x657361656C6572;
  switch(a1)
  {
    case 0:
      return v1;
    case 1:
      v1 = 0x6D706F6C65766564;
      break;
    case 2:
      v1 = 0x6775626564;
      break;
    case 3:
      v1 = 0x6E6173616BLL;
      break;
    case 4:
      v1 = 0x6863726165736572;
      break;
    default:
      v1 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(*(_QWORD *)(a1 + 32));
      break;
  }
  return v1;
}

uint64_t sub_10009052C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = a1;
  switch(a1)
  {
    case 0:
      return v1;
    case 1:
      v1 = 0x706F6C657665645FLL;
      break;
    case 2:
      v1 = 0x67756265645FLL;
      break;
    case 3:
      v1 = 0x6E6173616B5FLL;
      break;
    case 4:
      v1 = 0x637261657365725FLL;
      break;
    default:
      v2 = *(_QWORD *)(a1 + 16);
      sub_1000377D4(v2);
      v1 = sub_10009052C(v2);
      sub_1000390FC(v2);
      break;
  }
  return v1;
}

uint64_t sub_100090604(uint64_t result)
{
  uint64_t v1;

  switch(result)
  {
    case 0:
      return result;
    case 1:
      result = 0x6D706F6C65766564;
      break;
    case 2:
      result = 0x6775626564;
      break;
    case 3:
      result = 0x6E6173616BLL;
      break;
    case 4:
      result = 0x6863726165736572;
      break;
    default:
      v1 = *(_QWORD *)(result + 24);
      swift_bridgeObjectRetain(*(_QWORD *)(result + 32));
      result = v1;
      break;
  }
  return result;
}

BOOL sub_1000906B4(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  switch((unint64_t)a1)
  {
    case 0uLL:
      if (!a2)
        return 0;
      v2 = 0;
      goto LABEL_14;
    case 1uLL:
      if (a2 == (_QWORD *)1)
        return 0;
      v2 = 1;
      goto LABEL_14;
    case 2uLL:
      if (a2 == (_QWORD *)2)
        return 0;
      v2 = 2;
      goto LABEL_14;
    case 3uLL:
      if (a2 == (_QWORD *)3)
        return 0;
      v2 = 3;
      goto LABEL_14;
    case 4uLL:
      if (a2 == (_QWORD *)4)
        return 0;
      v2 = 4;
      goto LABEL_14;
    default:
      if ((unint64_t)a2 >= 5)
      {
        v5 = (_QWORD *)a1[2];
        v6 = a1[3];
        v7 = a1[4];
        v8 = (_QWORD *)a2[2];
        v9 = a2[3];
        v10 = a2[4];
        sub_1000377D4((unint64_t)v5);
        sub_1000377D4((unint64_t)v8);
        if ((sub_100090820(v5, v8) & 1) != 0)
        {
          if (v6 == v9 && v7 == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0) & 1) != 0)
          {
            sub_1000390FC((unint64_t)v8);
            sub_1000390FC((unint64_t)v5);
            return 0;
          }
          v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 1);
        }
        else
        {
          v11 = sub_1000906B4(v5, v8);
        }
        v12 = v11;
        sub_1000390FC((unint64_t)v8);
        sub_1000390FC((unint64_t)v5);
        return v12 & 1;
      }
      v2 = 5;
LABEL_14:
      v3 = 5;
      if ((unint64_t)a2 < 5)
        v3 = (unint64_t)a2;
      return v2 < v3;
  }
}

uint64_t sub_100090820(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;

  switch((unint64_t)a1)
  {
    case 0uLL:
      if (a2)
        goto LABEL_18;
      goto LABEL_16;
    case 1uLL:
      if (a2 != (_QWORD *)1)
        goto LABEL_18;
      goto LABEL_16;
    case 2uLL:
      if (a2 != (_QWORD *)2)
        goto LABEL_18;
      goto LABEL_16;
    case 3uLL:
      if (a2 != (_QWORD *)3)
        goto LABEL_18;
      goto LABEL_16;
    case 4uLL:
      if (a2 != (_QWORD *)4)
        goto LABEL_18;
LABEL_16:
      result = 1;
      break;
    default:
      if ((unint64_t)a2 < 5)
        goto LABEL_18;
      v2 = a1[2];
      v3 = a1[3];
      v4 = a1[4];
      v5 = a2[2];
      v6 = a2[3];
      v7 = a2[4];
      sub_1000377D4(v2);
      sub_1000377D4(v5);
      if ((sub_100090820(v2, v5) & 1) != 0)
      {
        if (v3 == v6 && v4 == v7)
        {
          sub_1000390FC(v5);
          sub_1000390FC(v2);
          result = 1;
        }
        else
        {
          v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, v7, 0);
          sub_1000390FC(v5);
          sub_1000390FC(v2);
          result = v9 & 1;
        }
      }
      else
      {
        sub_1000390FC(v5);
        sub_1000390FC(v2);
LABEL_18:
        result = 0;
      }
      break;
  }
  return result;
}

BOOL sub_10009094C(_QWORD **a1, _QWORD **a2)
{
  return sub_1000906B4(*a1, *a2);
}

BOOL sub_100090958(_QWORD **a1, _QWORD **a2)
{
  return !sub_1000906B4(*a2, *a1);
}

BOOL sub_100090980(_QWORD **a1, _QWORD **a2)
{
  return !sub_1000906B4(*a1, *a2);
}

BOOL sub_1000909A4(_QWORD **a1, _QWORD **a2)
{
  return sub_1000906B4(*a2, *a1);
}

double sub_1000909B4@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  double result;

  if (qword_1001635D0 != -1)
    swift_once(&qword_1001635D0, sub_10009033C);
  v2 = qword_1001756A8;
  *a1 = qword_1001756A8;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100090A04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = 0x657361656C6572;
  switch(v1)
  {
    case 0:
      return v2;
    case 1:
      v2 = 0x6D706F6C65766564;
      break;
    case 2:
      v2 = 0x6775626564;
      break;
    case 3:
      v2 = 0x6E6173616BLL;
      break;
    case 4:
      v2 = 0x6863726165736572;
      break;
    default:
      v2 = *(_QWORD *)(v1 + 24);
      swift_bridgeObjectRetain(*(_QWORD *)(v1 + 32));
      break;
  }
  return v2;
}

uint64_t sub_100090AC8(_QWORD **a1, _QWORD **a2)
{
  return sub_100090820(*a1, *a2);
}

Swift::Int sub_100090AD4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x6E6567636BLL, 0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100090B20(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6E6567636BLL, 0xE500000000000000);
}

Swift::Int sub_100090B34(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x6E6567636BLL, 0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100090B7C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v5;
  uint64_t result;
  char v7;

  v3 = a1[1];
  if (*a1 == 0x6E6567636BLL && v3 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease(0xE500000000000000);
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6567636BLL, 0xE500000000000000, *a1, v3, 0);
    result = swift_bridgeObjectRelease(v3);
    v7 = v5 ^ 1;
  }
  *a2 = v7 & 1;
  return result;
}

void sub_100090C04(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6567636BLL;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_100090C1C()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100092798();
  v1 = sub_1000927DC();
  return sub_1000D3780(0, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756B0);
}

uint64_t sub_100090C64()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100092798();
  v1 = sub_1000927DC();
  return sub_1000D3780(1, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756B8);
}

uint64_t sub_100090CAC()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100092798();
  v1 = sub_1000927DC();
  return sub_1000D3780(3, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756C0);
}

uint64_t sub_100090CF4()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100092798();
  v1 = sub_1000927DC();
  return sub_1000D3780(4, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756C8);
}

uint64_t sub_100090D3C()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100092798();
  v1 = sub_1000927DC();
  return sub_1000D3780(5, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756D0);
}

uint64_t sub_100090D84()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100092798();
  v1 = sub_1000927DC();
  return sub_1000D3780(6, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756D8);
}

uint64_t sub_100090DCC()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100092798();
  v1 = sub_1000927DC();
  return sub_1000D3780(7, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756E0);
}

uint64_t sub_100090E14()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100092798();
  v1 = sub_1000927DC();
  return sub_1000D3780(8, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756E8);
}

uint64_t sub_100090E5C()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100092798();
  v1 = sub_1000927DC();
  return sub_1000D3780(9, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756F0);
}

uint64_t sub_100090EA4()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100092798();
  v1 = sub_1000927DC();
  return sub_1000D3780(10, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_1001756F8);
}

uint64_t sub_100090EEC()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100092798();
  v1 = sub_1000927DC();
  return sub_1000D3780(11, (uint64_t)&type metadata for KcgenModeOptions, v0, v1, (uint64_t)&qword_100175700);
}

uint64_t sub_100090F34(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;

  if (qword_1001635D8 != -1)
    swift_once(&qword_1001635D8, sub_100090C1C);
  if ((qword_1001756B0 & ~a1) != 0)
  {
    v2 = _swiftEmptyArrayStorage;
  }
  else
  {
    v2 = sub_10000C500(0, 1, 1, _swiftEmptyArrayStorage);
    v4 = v2[2];
    v3 = v2[3];
    if (v4 >= v3 >> 1)
      v2 = sub_10000C500((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v2[2] = v4 + 1;
    v5 = (char *)&v2[2 * v4];
    strcpy(v5 + 32, "kcgen enabled");
    *((_WORD *)v5 + 23) = -4864;
  }
  if (qword_1001635E0 != -1)
    swift_once(&qword_1001635E0, sub_100090C64);
  if ((qword_1001756B8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_10000C500((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[2 * v7];
    v8[4] = 0xD000000000000021;
    v8[5] = 0x8000000100127B10;
  }
  if (qword_1001635E8 != -1)
    swift_once(&qword_1001635E8, sub_100090CAC);
  if ((qword_1001756C0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v10 = v2[2];
    v9 = v2[3];
    if (v10 >= v9 >> 1)
      v2 = sub_10000C500((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
    v2[2] = v10 + 1;
    v11 = &v2[2 * v10];
    v11[4] = 0xD000000000000014;
    v11[5] = 0x8000000100127AF0;
  }
  if (qword_1001635F0 != -1)
    swift_once(&qword_1001635F0, sub_100090CF4);
  if ((qword_1001756C8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v13 = v2[2];
    v12 = v2[3];
    if (v13 >= v12 >> 1)
      v2 = sub_10000C500((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
    v2[2] = v13 + 1;
    v14 = &v2[2 * v13];
    v14[4] = 0xD000000000000021;
    v14[5] = 0x8000000100127AC0;
  }
  if (qword_1001635F8 != -1)
    swift_once(&qword_1001635F8, sub_100090D3C);
  if ((qword_1001756D0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v16 = v2[2];
    v15 = v2[3];
    if (v16 >= v15 >> 1)
      v2 = sub_10000C500((_QWORD *)(v15 > 1), v16 + 1, 1, v2);
    v2[2] = v16 + 1;
    v17 = &v2[2 * v16];
    v17[4] = 0xD000000000000024;
    v17[5] = 0x8000000100127A90;
  }
  if (qword_100163600 != -1)
    swift_once(&qword_100163600, sub_100090D84);
  if ((qword_1001756D8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v19 = v2[2];
    v18 = v2[3];
    if (v19 >= v18 >> 1)
      v2 = sub_10000C500((_QWORD *)(v18 > 1), v19 + 1, 1, v2);
    v2[2] = v19 + 1;
    v20 = &v2[2 * v19];
    v20[4] = 0xD00000000000001BLL;
    v20[5] = 0x8000000100127A70;
  }
  if (qword_100163608 != -1)
    swift_once(&qword_100163608, sub_100090DCC);
  if ((qword_1001756E0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v22 = v2[2];
    v21 = v2[3];
    if (v22 >= v21 >> 1)
      v2 = sub_10000C500((_QWORD *)(v21 > 1), v22 + 1, 1, v2);
    v2[2] = v22 + 1;
    v23 = &v2[2 * v22];
    v23[4] = 0xD000000000000037;
    v23[5] = 0x8000000100127A30;
  }
  if (qword_100163610 != -1)
    swift_once(&qword_100163610, sub_100090E14);
  if ((qword_1001756E8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v25 = v2[2];
    v24 = v2[3];
    if (v25 >= v24 >> 1)
      v2 = sub_10000C500((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
    v2[2] = v25 + 1;
    v26 = &v2[2 * v25];
    v26[4] = 0xD000000000000027;
    v26[5] = 0x8000000100127A00;
  }
  if (qword_100163618 != -1)
    swift_once(&qword_100163618, sub_100090E5C);
  if ((qword_1001756F0 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v28 = v2[2];
    v27 = v2[3];
    if (v28 >= v27 >> 1)
      v2 = sub_10000C500((_QWORD *)(v27 > 1), v28 + 1, 1, v2);
    v2[2] = v28 + 1;
    v29 = &v2[2 * v28];
    v29[4] = 0xD00000000000002CLL;
    v29[5] = 0x80000001001279D0;
  }
  if (qword_100163620 != -1)
    swift_once(&qword_100163620, sub_100090EA4);
  if ((qword_1001756F8 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v31 = v2[2];
    v30 = v2[3];
    if (v31 >= v30 >> 1)
      v2 = sub_10000C500((_QWORD *)(v30 > 1), v31 + 1, 1, v2);
    v2[2] = v31 + 1;
    v32 = &v2[2 * v31];
    v32[4] = 0xD000000000000027;
    v32[5] = 0x80000001001279A0;
  }
  if (qword_100163628 != -1)
    swift_once(&qword_100163628, sub_100090EEC);
  if ((qword_100175700 & ~a1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_10000C500(0, v2[2] + 1, 1, v2);
    v34 = v2[2];
    v33 = v2[3];
    if (v34 >= v33 >> 1)
      v2 = sub_10000C500((_QWORD *)(v33 > 1), v34 + 1, 1, v2);
    v2[2] = v34 + 1;
    v35 = &v2[2 * v34];
    v35[4] = 0xD000000000000026;
    v35[5] = 0x8000000100127970;
  }
  v36 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v37 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
  v38 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v36, v37);
  v40 = v39;
  swift_bridgeObjectRelease(v2);
  v41._countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v40);
  v42._countAndFlagsBits = 93;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  return 91;
}

uint64_t sub_1000917BC()
{
  uint64_t *v0;

  return sub_100090F34(*v0);
}

const char *sub_1000917C4()
{
  return "Copyright © ";
}

void *sub_1000917D0()
{
  return &unk_10014A8B8;
}

const char *sub_1000917DC()
{
  return "^[0-9]{4}$";
}

void *sub_1000917E8()
{
  return &unk_10014A8C8;
}

void sub_1000917F4()
{
  qword_100175708 = (uint64_t)&off_10014A9A0;
}

const char *sub_100091808()
{
  return "Root";
}

const char *sub_100091814()
{
  return "Console";
}

const char *sub_100091820()
{
  return "Local-Root";
}

const char *sub_10009182C()
{
  return "Network-Root";
}

const char *sub_100091838()
{
  return "DriverKit";
}

const char *sub_100091844()
{
  return "Safe Boot";
}

const char *sub_100091850()
{
  return "Auxiliary";
}

_QWORD *sub_10009185C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t sub_100091868@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100091874@<X0>(uint64_t *a1@<X8>)
{
  return sub_100091890(qword_100163638, &qword_100175708, (uint64_t)sub_1000917F4, a1);
}

uint64_t sub_100091890@<X0>(_QWORD *a1@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  _BYTE v8[24];

  if (*a1 != -1)
    swift_once(a1, a3);
  swift_beginAccess(a2, v8, 0, 0);
  v6 = *a2;
  *a4 = *a2;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_1000918F4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

Swift::Int sub_100091924()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_10009197C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000919C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void *sub_100091A14()
{
  return &unk_100113470;
}

void *sub_100091A20()
{
  return &unk_100113474;
}

void *sub_100091A2C()
{
  return &unk_100113478;
}

void *sub_100091A38()
{
  return &unk_10011347C;
}

uint64_t sub_100091A44(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100091A7C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (!a1 && a2 == 0xE000000000000000)
  {
    v4 = 0xE000000000000000;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0, 0xE000000000000000, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x6D706F6C65766564 && a2 == 0xEB00000000746E65)
  {
    v6 = 0xEB00000000746E65;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D706F6C65766564, 0xEB00000000746E65, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x6775626564 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6775626564, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0x6E6173616BLL && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6173616BLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_24;
  }
  if (a1 == 0x6863726165736572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6863726165736572, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100091C84()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1 >= 5)
    swift_release(v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

unint64_t sub_100091CBC()
{
  unint64_t result;

  result = qword_10015A890;
  if (!qword_10015A890)
  {
    result = swift_getWitnessTable(&unk_100113580, &type metadata for KextRequestFlags);
    atomic_store(result, (unint64_t *)&qword_10015A890);
  }
  return result;
}

unint64_t sub_100091D08()
{
  unint64_t result;

  result = qword_10015A898;
  if (!qword_10015A898)
  {
    result = swift_getWitnessTable(&unk_1001135B8, &type metadata for KextRequestFlags);
    atomic_store(result, (unint64_t *)&qword_10015A898);
  }
  return result;
}

unint64_t sub_100091D50()
{
  unint64_t result;

  result = qword_10015A8A0;
  if (!qword_10015A8A0)
  {
    result = swift_getWitnessTable(&unk_1001135E0, &type metadata for KextRequestFlags);
    atomic_store(result, (unint64_t *)&qword_10015A8A0);
  }
  return result;
}

unint64_t sub_100091D98()
{
  unint64_t result;

  result = qword_10015A8A8;
  if (!qword_10015A8A8)
  {
    result = swift_getWitnessTable(&unk_100113610, &type metadata for PageProtectionType);
    atomic_store(result, (unint64_t *)&qword_10015A8A8);
  }
  return result;
}

uint64_t sub_100091DDC()
{
  return sub_10001284C(&qword_10015A8B0, &qword_10015A8B8, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_100091E08()
{
  return sub_10001284C(&qword_10015A8C0, &qword_10015A8C8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100091E38()
{
  unint64_t result;

  result = qword_10015A8D0;
  if (!qword_10015A8D0)
  {
    result = swift_getWitnessTable(&unk_1001137C8, &type metadata for VariantKind);
    atomic_store(result, (unint64_t *)&qword_10015A8D0);
  }
  return result;
}

uint64_t sub_100091E7C()
{
  return sub_10001284C(&qword_10015A8D8, &qword_10015A8E0, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100091EAC()
{
  unint64_t result;

  result = qword_10015A8E8;
  if (!qword_10015A8E8)
  {
    result = swift_getWitnessTable(&unk_1001137F0, &type metadata for SecureBootPolicy);
    atomic_store(result, (unint64_t *)&qword_10015A8E8);
  }
  return result;
}

unint64_t sub_100091EF4()
{
  unint64_t result;

  result = qword_10015A8F0;
  if (!qword_10015A8F0)
  {
    result = swift_getWitnessTable(&unk_100113858, &type metadata for BootEnvironment);
    atomic_store(result, (unint64_t *)&qword_10015A8F0);
  }
  return result;
}

unint64_t sub_100091F3C()
{
  unint64_t result;

  result = qword_10015A8F8;
  if (!qword_10015A8F8)
  {
    result = swift_getWitnessTable(&unk_100113A20, &type metadata for KcgenModeOptions);
    atomic_store(result, (unint64_t *)&qword_10015A8F8);
  }
  return result;
}

unint64_t sub_100091F84()
{
  unint64_t result;

  result = qword_10015A900;
  if (!qword_10015A900)
  {
    result = swift_getWitnessTable(&unk_100113958, &type metadata for KcgenModeOptions);
    atomic_store(result, (unint64_t *)&qword_10015A900);
  }
  return result;
}

unint64_t sub_100091FCC()
{
  unint64_t result;

  result = qword_10015A908;
  if (!qword_10015A908)
  {
    result = swift_getWitnessTable(&unk_100113A58, &type metadata for KcgenModeOptions);
    atomic_store(result, (unint64_t *)&qword_10015A908);
  }
  return result;
}

unint64_t sub_100092014()
{
  unint64_t result;

  result = qword_10015A910;
  if (!qword_10015A910)
  {
    result = swift_getWitnessTable(&unk_100113A80, &type metadata for KcgenModeOptions);
    atomic_store(result, (unint64_t *)&qword_10015A910);
  }
  return result;
}

uint64_t sub_100092058()
{
  return sub_10001284C(&qword_10015A918, &qword_10015A920, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100092088()
{
  unint64_t result;

  result = qword_10015A928;
  if (!qword_10015A928)
  {
    result = swift_getWitnessTable(&unk_100113B20, &type metadata for OSBundleRequiredValue);
    atomic_store(result, (unint64_t *)&qword_10015A928);
  }
  return result;
}

ValueMetadata *type metadata accessor for InfoKeys()
{
  return &type metadata for InfoKeys;
}

ValueMetadata *type metadata accessor for DriverTeamIdentifierConstants()
{
  return &type metadata for DriverTeamIdentifierConstants;
}

ValueMetadata *type metadata accessor for MKextKeys()
{
  return &type metadata for MKextKeys;
}

ValueMetadata *type metadata accessor for LoadInfoKeys()
{
  return &type metadata for LoadInfoKeys;
}

ValueMetadata *type metadata accessor for KextRequestKeys()
{
  return &type metadata for KextRequestKeys;
}

ValueMetadata *type metadata accessor for KextRequestFlags()
{
  return &type metadata for KextRequestFlags;
}

ValueMetadata *type metadata accessor for PersonalityKeys()
{
  return &type metadata for PersonalityKeys;
}

ValueMetadata *type metadata accessor for PersonalityValues()
{
  return &type metadata for PersonalityValues;
}

ValueMetadata *type metadata accessor for CollectionKeys()
{
  return &type metadata for CollectionKeys;
}

ValueMetadata *type metadata accessor for ContextKeys()
{
  return &type metadata for ContextKeys;
}

ValueMetadata *type metadata accessor for EnvKeys()
{
  return &type metadata for EnvKeys;
}

ValueMetadata *type metadata accessor for PageProtectionType()
{
  return &type metadata for PageProtectionType;
}

ValueMetadata *type metadata accessor for SysctlKeys()
{
  return &type metadata for SysctlKeys;
}

ValueMetadata *type metadata accessor for MachO()
{
  return &type metadata for MachO;
}

ValueMetadata *type metadata accessor for SymbolSetKeys()
{
  return &type metadata for SymbolSetKeys;
}

ValueMetadata *type metadata accessor for KernelResourceIdentifier()
{
  return &type metadata for KernelResourceIdentifier;
}

ValueMetadata *type metadata accessor for KextExcludeListKeys()
{
  return &type metadata for KextExcludeListKeys;
}

ValueMetadata *type metadata accessor for EntitlementKeys()
{
  return &type metadata for EntitlementKeys;
}

ValueMetadata *type metadata accessor for StagingConstants()
{
  return &type metadata for StagingConstants;
}

ValueMetadata *type metadata accessor for PrebootStashingConstants()
{
  return &type metadata for PrebootStashingConstants;
}

ValueMetadata *type metadata accessor for MountedVolumeConstants()
{
  return &type metadata for MountedVolumeConstants;
}

ValueMetadata *type metadata accessor for DataStashingConstants()
{
  return &type metadata for DataStashingConstants;
}

ValueMetadata *type metadata accessor for DeveloperKitConstants()
{
  return &type metadata for DeveloperKitConstants;
}

ValueMetadata *type metadata accessor for MaxLengthConstants()
{
  return &type metadata for MaxLengthConstants;
}

ValueMetadata *type metadata accessor for TimeoutConstants()
{
  return &type metadata for TimeoutConstants;
}

ValueMetadata *type metadata accessor for NVRAMKeys()
{
  return &type metadata for NVRAMKeys;
}

ValueMetadata *type metadata accessor for LogSignposts()
{
  return &type metadata for LogSignposts;
}

ValueMetadata *type metadata accessor for LifeCycleLogSignPosts()
{
  return &type metadata for LifeCycleLogSignPosts;
}

ValueMetadata *type metadata accessor for ExtendedAttributeConstants()
{
  return &type metadata for ExtendedAttributeConstants;
}

ValueMetadata *type metadata accessor for DistNoteConstants()
{
  return &type metadata for DistNoteConstants;
}

uint64_t *initializeBufferWithCopyOfBuffer for VariantKind(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_retain(v3);
  *a1 = v3;
  return a1;
}

unint64_t destroy for VariantKind(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_release(result);
  return result;
}

unint64_t *assignWithCopy for VariantKind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_retain(v4);
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain(v4);
    swift_release(v3);
  }
  return a1;
}

unint64_t *assignWithTake for VariantKind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for VariantKind(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 4;
  if (v4 >= 6)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VariantKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 4;
  }
  return result;
}

uint64_t sub_100092498(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000924B0(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for VariantKind()
{
  return &type metadata for VariantKind;
}

uint64_t _s10driverkitd18PageProtectionTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10009252C + 4 * byte_1001130A3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100092560 + 4 * byte_10011309E[v4]))();
}

uint64_t sub_100092560(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100092568(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100092570);
  return result;
}

uint64_t sub_10009257C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100092584);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100092588(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100092590(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureBootPolicy()
{
  return &type metadata for SecureBootPolicy;
}

uint64_t storeEnumTagSinglePayload for BootEnvironment(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000925EC + 4 * byte_1001130A8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10009260C + 4 * byte_1001130AD[v4]))();
}

_BYTE *sub_1000925EC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10009260C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100092614(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10009261C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100092624(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10009262C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BootEnvironment()
{
  return &type metadata for BootEnvironment;
}

ValueMetadata *type metadata accessor for KcgenModeOptions()
{
  return &type metadata for KcgenModeOptions;
}

ValueMetadata *type metadata accessor for AppleCopyright()
{
  return &type metadata for AppleCopyright;
}

_QWORD *initializeBufferWithCopyOfBuffer for OSBundleRequiredValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for OSBundleRequiredValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for OSBundleRequiredValue(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for OSBundleRequiredValue(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OSBundleRequiredValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OSBundleRequiredValue()
{
  return &type metadata for OSBundleRequiredValue;
}

unint64_t sub_100092798()
{
  unint64_t result;

  result = qword_10015A930;
  if (!qword_10015A930)
  {
    result = swift_getWitnessTable(&unk_1001138F8, &type metadata for KcgenModeOptions);
    atomic_store(result, (unint64_t *)&qword_10015A930);
  }
  return result;
}

unint64_t sub_1000927DC()
{
  unint64_t result;

  result = qword_10015A938;
  if (!qword_10015A938)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10015A938);
  }
  return result;
}

unint64_t sub_100092820()
{
  unint64_t result;

  result = qword_10015A940;
  if (!qword_10015A940)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_10015A940);
  }
  return result;
}

uint64_t sub_100092874()
{
  return sub_1000929F0(&OBJC_IVAR____TtC10driverkitd15ApprovalManager_requests);
}

uint64_t sub_100092880(uint64_t a1)
{
  return sub_100092A40(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_requests);
}

uint64_t (*sub_10009288C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_requests, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000928D0()
{
  return sub_10004071C(&OBJC_IVAR____TtC10driverkitd15ApprovalManager_driverBinManager);
}

uint64_t sub_1000928DC(uint64_t a1)
{
  return sub_10004076C(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_driverBinManager);
}

uint64_t (*sub_1000928E8(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_driverBinManager, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10009292C()
{
  return sub_10004071C(&OBJC_IVAR____TtC10driverkitd15ApprovalManager_kernelStateManager);
}

uint64_t sub_100092938(uint64_t a1)
{
  return sub_10004076C(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_kernelStateManager);
}

uint64_t (*sub_100092944(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_kernelStateManager, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_100092988()
{
  return sub_10004071C(&OBJC_IVAR____TtC10driverkitd15ApprovalManager_applicationManager);
}

uint64_t sub_100092994(uint64_t a1)
{
  return sub_10004076C(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_applicationManager);
}

uint64_t (*sub_1000929A0(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_applicationManager, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000929E4()
{
  return sub_1000929F0(&OBJC_IVAR____TtC10driverkitd15ApprovalManager_subscribers);
}

uint64_t sub_1000929F0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE v4[24];

  v2 = (_QWORD *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  return swift_bridgeObjectRetain(*v2);
}

uint64_t sub_100092A34(uint64_t a1)
{
  return sub_100092A40(a1, &OBJC_IVAR____TtC10driverkitd15ApprovalManager_subscribers);
}

uint64_t sub_100092A40(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = *v4;
  *v4 = a1;
  return swift_bridgeObjectRelease(v5);
}

uint64_t (*sub_100092A8C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_subscribers, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_100092AD0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  sub_100092B24(a1, a2, a3);
  return v7;
}

uint64_t sub_100092B24(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_driverBinManager) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_kernelStateManager) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_applicationManager) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_subscribers) = _swiftEmptyArrayStorage;
  v6 = (_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_stateManagerQueue) = a1;
  v7 = v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_databasePath;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
  sub_100004E2C(a3, v3 + 16);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_requests) = _swiftEmptyArrayStorage;
  return v3;
}

uint64_t sub_100092C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for DriverBinManager(0);
    sub_1000CD228(v1, (uint64_t)&off_10014B320, v7, (uint64_t)&off_100147550);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100092C78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);

  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208);
  v2 = swift_retain(a1);
  return v4(v2);
}

uint64_t sub_100092CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 232);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for ApplicationManager();
    sub_1000CD228(v1, (uint64_t)&off_10014B320, v7, (uint64_t)&off_1001463D8);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100092D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_stateManagerQueue);
  v11 = swift_allocObject(&unk_10014B2B8, 32, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_100092F04;
  v21 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000B424;
  aBlock[3] = &unk_10014B2D0;
  v12 = _Block_copy(aBlock);
  swift_retain(v1);
  v13 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v13);
  v19 = _swiftEmptyArrayStorage;
  v14 = sub_100012534((unint64_t *)&qword_10015ABD0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_100005C88((uint64_t *)&unk_100159EB0);
  v16 = sub_100081F98();
  dispatch thunk of SetAlgebra.init<A>(_:)(v6, &v19, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v21);
}

uint64_t sub_100092EF8()
{
  return sub_100096808((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100092F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_BYTE *);
  void (*v3)(_BYTE *, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  _BYTE v11[32];

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(uint64_t (**)(_BYTE *))(**(_QWORD **)(v0 + 16) + 168);
  swift_retain(v1);
  v3 = (void (*)(_BYTE *, _QWORD))v2(v11);
  v5 = v4;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  v7 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v1);
  specialized Array._endMutation()(v8);
  v3(v11, 0);
  v9 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ApprovalManager(0);
  return sub_1000CDD6C(0xD00000000000001BLL, (char *)0x8000000100127D70, v9, (uint64_t)&off_10014B320);
}

uint64_t sub_100092FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100092FEC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100092FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_stateManagerQueue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 152))(result);
    (*(void (**)(void *))(*(_QWORD *)v0 + 160))(&_swiftEmptyArrayStorage);
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1000930D4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void (*v17)(_QWORD);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  char *result;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t (*v73)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t);
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76[5];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v66 - v8;
  v10 = __chkstk_darwin(v7);
  __chkstk_darwin(v10);
  v13 = (char *)&v66 - v12;
  v14 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
  if (v14)
  {
    v15 = *(void **)((char *)v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
LABEL_15:
    swift_bridgeObjectRetain(v14);
    return (char *)v15;
  }
  v74 = v11;
  v67 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB);
  v16 = sub_1000D31FC();
  v17 = *(void (**)(_QWORD))(v3 + 16);
  v72 = v16;
  v73 = (uint64_t (*)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))v17;
  v17(v13);
  v18 = swift_retain_n(v0, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v70 = v6;
  v71 = v9;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v68 = v2;
    v24 = v23;
    v76[0] = v23;
    v69 = 0;
    *(_DWORD *)v22 = 136315138;
    v25 = URL.path.getter(v23);
    v27 = v26;
    v75 = sub_1000055A0(v25, v26, v76);
    v14 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v22 + 4, v22 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Loading approvals database from %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v29 = v68;
    v28(v13, v68);
  }
  else
  {

    swift_release_n(v0, 2);
    v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v28(v13, v2);
    v29 = v2;
  }
  v30 = v1[5];
  v31 = v1[6];
  sub_100004DE4(v1 + 2, v30);
  sub_10010731C(v30, v31);
  v32 = v76[4];
  v33 = sub_100004DE4(v76, v76[3]);
  v34 = URL.path.getter(v33);
  v36 = v35;
  v37 = (*(uint64_t (**)(uint64_t))(v32 + 16))(v34);
  v39 = v38;
  swift_bridgeObjectRelease(v36);
  v40 = sub_100005D08(v76);
  if (v39 >> 60 != 15)
  {
    v55 = v73((void (*)(_QWORD, _QWORD))v74, v72, v29);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Loading approvals database, decoding data", v58, 2u);
      swift_slowDealloc(v58, -1, -1);
    }

    v28((char *)v74, v29);
    v59 = type metadata accessor for PropertyListDecoder(0);
    v60 = swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
    v61 = PropertyListDecoder.init()(v60);
    v62 = sub_100096564();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v76, &type metadata for ApprovalDB, v37, v39, &type metadata for ApprovalDB, v62);
    sub_100021610(v37, v39);
    swift_release(v61);
    v15 = (void *)v76[0];
    v63 = v76[1];
    v64 = v67;
    v65 = *v67;
    *v67 = v76[0];
    v64[1] = v63;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRelease(v65);
    goto LABEL_15;
  }
  v41 = errno.getter(v40);
  result = strerror(v41);
  if (result)
  {
    v43 = String.init(cString:)(result);
    v45 = v44;
    v46 = v71;
    v73((void (*)(_QWORD, _QWORD))v71, v72, v29);
    swift_bridgeObjectRetain(v45);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = swift_slowAlloc(12, -1);
      v74 = v28;
      v51 = v14;
      v52 = (uint8_t *)v50;
      v53 = swift_slowAlloc(32, -1);
      v76[0] = v53;
      *(_DWORD *)v52 = 136315138;
      swift_bridgeObjectRetain(v45);
      v75 = sub_1000055A0(v43, v45, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease_n(v45, 3);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "contentsOfFile failed to read approvals database: %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      v54 = v52;
      v14 = v51;
      swift_slowDealloc(v54, -1, -1);

      v74(v71, v29);
    }
    else
    {

      swift_bridgeObjectRelease_n(v45, 2);
      v28(v46, v29);
    }
    v15 = sub_10005E2A8();
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

char *sub_10009382C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *result;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  Swift::String v93;
  uint64_t v94;
  Swift::String v95;
  unint64_t v96;
  Swift::String v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t (*v105)(unint64_t, uint64_t, char *);
  uint64_t v106;
  char *v107;
  char v108;
  void (*v109)(unint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  void (*v128)(char *, char *);
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void (*v140)(char *, uint64_t);
  int64_t v141;
  unint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t (*v145)(unint64_t, char *, char *);
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  char *v158;
  int v159;
  uint64_t v160;
  char *v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  void (*v173)(char *, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  uint64_t v192;
  char *v193;
  char *v194;
  unint64_t v195;
  uint64_t v196;
  NSObject *v197;
  os_log_type_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  NSObject *v204;
  os_log_type_t v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  os_log_type_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  os_log_type_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  Swift::String v226;
  uint64_t v227;
  Swift::String v228;
  void *v229;
  Swift::String v230;
  unint64_t v231;
  Swift::String v232;
  void *v233;
  __int128 v234;
  _QWORD *v235;
  char v236;
  unint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  __int128 v249;
  char v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  NSObject *v254;
  os_log_type_t v255;
  uint64_t v256;
  uint64_t updated;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  uint64_t v272;
  Swift::String v273;
  uint64_t v274;
  uint64_t v275;
  Swift::String v276;
  void *object;
  Swift::String v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  _QWORD *v285;
  uint64_t v286;
  _QWORD *v287;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  char v295;
  BOOL v296;
  unint64_t v297;
  unint64_t v298;
  _QWORD *v299;
  BOOL v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  NSObject *v305;
  os_log_type_t v306;
  uint8_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  unint64_t v312;
  __n128 v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  NSObject *v319;
  uint64_t v320;
  uint8_t *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  NSObject *v337;
  os_log_type_t v338;
  uint8_t *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  int v347;
  uint64_t v348;
  void *v349;
  void *v350;
  uint64_t v351;
  char *v352;
  uint64_t v353;
  Swift::String v354;
  void *v355;
  Swift::String v356;
  Swift::String v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  NSObject *v364;
  os_log_type_t v365;
  uint8_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  _QWORD *v379;
  _QWORD *v380;
  _QWORD *v381;
  unint64_t v382;
  char *v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  char *v390;
  char *v391;
  char *v392;
  char *v393;
  char *v394;
  __int128 v395;
  uint64_t (*v396)(void);
  void *v397;
  uint64_t v398;
  void *v399;
  uint64_t v400;
  char *v401;
  char *v402;
  char *v403;
  char *v404;
  char *v405;
  unint64_t v406;
  char *v407;
  char *v408;
  char *v409;
  uint64_t v410;
  void *v411;
  char *v412;
  _QWORD *v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  void (*v417)(unint64_t, char *);
  char *v418;
  char *v419;
  __int128 v420;
  char *v421;
  _QWORD *v422;
  int64_t v423;
  _QWORD *v424;
  char *v425;
  char *v426;
  uint64_t v427;
  __int128 v428;
  uint64_t v429;
  unint64_t v430;
  char *v431;
  _QWORD *v432;
  char *v433;
  char *v434;
  uint64_t v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  __int128 v440;
  uint64_t v441;
  __int128 v442;
  __int128 v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  unint64_t v450;
  uint64_t v451[7];
  _QWORD v452[5];
  _QWORD v453[6];

  v1 = v0;
  v2 = sub_100005C88(&qword_100157EF0);
  __chkstk_darwin(v2);
  v426 = (char *)&v389 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v429 = type metadata accessor for DriverBinEntry(0);
  *(_QWORD *)&v428 = *(_QWORD *)(v429 - 8);
  v4 = __chkstk_darwin(v429);
  v431 = (char *)&v389 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v427 = (uint64_t)&v389 - v6;
  v435 = type metadata accessor for Logger(0);
  v438 = *(_QWORD *)(v435 - 8);
  v7 = __chkstk_darwin(v435);
  v392 = (char *)&v389 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (unint64_t)&v389 - v10;
  v12 = __chkstk_darwin(v9);
  v389 = (char *)&v389 - v13;
  v14 = __chkstk_darwin(v12);
  v390 = (char *)&v389 - v15;
  v16 = __chkstk_darwin(v14);
  v393 = (char *)&v389 - v17;
  v18 = __chkstk_darwin(v16);
  v425 = (char *)&v389 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (unint64_t)&v389 - v21;
  v23 = __chkstk_darwin(v20);
  v402 = (char *)&v389 - v24;
  v25 = __chkstk_darwin(v23);
  v409 = (char *)&v389 - v26;
  __chkstk_darwin(v25);
  v404 = (char *)&v389 - v27;
  v28 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v28);
  v405 = (char *)&v389 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v439 = type metadata accessor for URL(0);
  v30 = *(_QWORD **)(v439 - 8);
  v31 = __chkstk_darwin(v439);
  v391 = (char *)&v389 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v419 = (char *)&v389 - v34;
  v35 = __chkstk_darwin(v33);
  v407 = (char *)&v389 - v36;
  v37 = __chkstk_darwin(v35);
  v401 = (char *)&v389 - v38;
  v39 = __chkstk_darwin(v37);
  v408 = (char *)&v389 - v40;
  v41 = __chkstk_darwin(v39);
  v433 = (char *)&v389 - v42;
  v43 = __chkstk_darwin(v41);
  v403 = (char *)&v389 - v44;
  v45 = __chkstk_darwin(v43);
  v418 = (char *)&v389 - v46;
  __chkstk_darwin(v45);
  v436 = (char *)&v389 - v47;
  v48 = type metadata accessor for LookupSpec(0);
  v49 = __chkstk_darwin(v48);
  v51 = (char *)&v389 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = (*(uint64_t (**)(uint64_t))(*v0 + 344))(v49);
  v415 = v53;
  v416 = v52;
  v449 = sub_10005E2A8();
  v450 = v54;
  v396 = *(uint64_t (**)(void))(*v0 + 176);
  result = (char *)v396();
  if (!result)
    goto LABEL_158;
  v56 = result;
  v57 = (*(uint64_t (**)(char *))(*(_QWORD *)result + 360))(result);
  v437 = v58;
  v60 = v59;
  v61 = swift_release(v56);
  v62 = *(uint64_t (**)(uint64_t))(*v1 + 200);
  v434 = (char *)v1;
  result = (char *)v62(v61);
  if (result)
  {
    v63 = result;
    v64 = *((_QWORD *)result + 7);
    swift_retain(v64);
    v65 = swift_release(v63);
    v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 144))(v65);
    swift_release(v64);
    sub_1000547A8(v66, (uint64_t)v451);
    swift_release(v66);
    swift_storeEnumTagMultiPayload(v51, v48, 4);
    sub_1000533F4((uint64_t)v51);
    v68 = v67;
    sub_100010C68(v451);
    sub_100012490((uint64_t)v51, type metadata accessor for LookupSpec);
    if (v68)
      v69 = (unint64_t)v68;
    else
      v69 = (unint64_t)_swiftEmptyArrayStorage;
    v430 = v57;
    v423 = v60;
    v70 = sub_10003ACAC(v57);
    v410 = sub_100011D28(v70);
    swift_bridgeObjectRelease(v70);
    v72 = v69;
    v422 = (_QWORD *)v69;
    if (v69 >> 62)
      goto LABEL_147;
    v73 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      v74 = v435;
      v75 = (char *)v439;
      v76 = v431;
      v77 = (uint64_t)v405;
      v414 = v11;
      v432 = v30;
      v406 = v22;
      v78 = v423;
      if (!v73)
      {
        v424 = _swiftEmptyArrayStorage;
LABEL_36:
        v130 = v72;
        swift_bridgeObjectRelease(v410);
        swift_bridgeObjectRelease(v130);
        swift_bridgeObjectRelease(v78);
        v132 = 0;
        v133 = *(_QWORD *)(v430 + 64);
        v422 = (_QWORD *)(v430 + 64);
        v134 = 1 << *(_BYTE *)(v430 + 32);
        v135 = -1;
        if (v134 < 64)
          v135 = ~(-1 << v134);
        v11 = v135 & v133;
        v421 = v434 + 16;
        v423 = (unint64_t)(v134 + 63) >> 6;
        *(_QWORD *)&v131 = 136315138;
        v420 = v131;
        v418 = (char *)&type metadata for Any + 8;
        v411 = (void *)0x8000000100127B80;
        v412 = (char *)0x8000000100127C40;
        v417 = (void (*)(unint64_t, char *))((char *)&type metadata for () + 8);
        v413 = (_QWORD *)0x8000000100127C10;
        v136 = v429;
        v22 = (unint64_t)v433;
        if ((v135 & v133) != 0)
        {
LABEL_39:
          v137 = __clz(__rbit64(v11));
          v138 = (v11 - 1) & v11;
          v139 = v137 | (v132 << 6);
          goto LABEL_58;
        }
LABEL_42:
        v141 = v132 + 1;
        if (__OFADD__(v132, 1))
          goto LABEL_145;
        if (v141 >= v423)
          goto LABEL_90;
        v142 = v422[v141];
        ++v132;
        if (!v142)
        {
          v132 = v141 + 1;
          if (v141 + 1 >= v423)
            goto LABEL_90;
          v142 = v422[v132];
          if (!v142)
          {
            v132 = v141 + 2;
            if (v141 + 2 >= v423)
              goto LABEL_90;
            v142 = v422[v132];
            if (!v142)
            {
              v132 = v141 + 3;
              if (v141 + 3 >= v423)
                goto LABEL_90;
              v142 = v422[v132];
              if (!v142)
              {
                v143 = v141 + 4;
                if (v143 >= v423)
                {
LABEL_90:
                  swift_release(v430);
                  v437 = swift_allocObject(&unk_10014B308, 24, 7);
                  *(_QWORD *)(v437 + 16) = _swiftEmptyArrayStorage;
                  v242 = (*(uint64_t (**)(void))(*(_QWORD *)v434 + 312))();
                  v244 = v242;
                  if ((unint64_t)v242 >> 62)
                  {
                    if (v242 >= 0)
                      v242 &= 0xFFFFFFFFFFFFFF8uLL;
                    v245 = _CocoaArrayWrapper.endIndex.getter(v242);
                  }
                  else
                  {
                    v245 = *(_QWORD *)((v242 & 0xFFFFFFFFFFFFF8) + 0x10);
                  }
                  v246 = v438;
                  if (!v245)
                  {
                    v75 = 0;
                    goto LABEL_117;
                  }
                  if (v245 < 1)
                  {
                    __break(1u);
LABEL_155:
                    v30 = sub_10000C500(0, v30[2] + 1, 1, v30);
LABEL_121:
                    v298 = v30[2];
                    v297 = v30[3];
                    if (v298 >= v297 >> 1)
                      v30 = sub_10000C500((_QWORD *)(v297 > 1), v298 + 1, 1, v30);
                    v30[2] = v298 + 1;
                    v299 = &v30[2 * v298];
                    v299[4] = 0xD000000000000019;
                    v299[5] = 0x8000000100127C70;
                  }
                  else
                  {
                    v247 = 0;
                    v75 = 0;
                    v430 = v244 & 0xC000000000000001;
                    *(_QWORD *)&v243 = 136315394;
                    v428 = v243;
                    v426 = (char *)0x8000000100127C90;
                    v427 = (uint64_t)&type metadata for Any + 8;
                    v425 = (char *)0x8000000100127CB0;
                    v433 = (char *)v244;
                    v431 = (char *)v245;
                    do
                    {
                      if (v430)
                      {
                        v248 = specialized _ArrayBuffer._getElementSlowPath(_:)(v247, v244);
                      }
                      else
                      {
                        v248 = *(_QWORD *)(v244 + 8 * (_QWORD)v247 + 32);
                        swift_retain(v248);
                      }
                      v249 = *(_OWORD *)(v248 + 32);
                      v442 = *(_OWORD *)(v248 + 16);
                      v443 = v249;
                      LOBYTE(v444) = *(_BYTE *)(v248 + 48);
                      sub_100067500(&v442);
                      v250 = sub_10005FA44((uint64_t)&v442);
                      if (v75)
                      {
                        v436 = 0;
                        sub_100067584(&v442);
                        v251 = sub_1000D31FC();
                        v252 = v414;
                        (*(void (**)(unint64_t, uint64_t, uint64_t))(v246 + 16))(v414, v251, v74);
                        swift_retain(v248);
                        swift_errorRetain(v75);
                        swift_retain(v248);
                        v253 = swift_errorRetain(v75);
                        v254 = Logger.logObject.getter(v253);
                        v255 = static os_log_type_t.error.getter(v254);
                        if (os_log_type_enabled(v254, v255))
                        {
                          v256 = swift_slowAlloc(22, -1);
                          v429 = swift_slowAlloc(64, -1);
                          v445 = v429;
                          *(_DWORD *)v256 = v428;
                          *(_QWORD *)&v440 = v248;
                          updated = type metadata accessor for ApprovalStateUpdateRequest(0);
                          v258 = sub_100012534(&qword_10015A968, type metadata accessor for ApprovalStateUpdateRequest, (uint64_t)&protocol conformance descriptor for ApprovalStateUpdateRequest);
                          v259 = updated;
                          v246 = v438;
                          v260 = dispatch thunk of CustomStringConvertible.description.getter(v259, v258);
                          v262 = v261;
                          *(_QWORD *)(v256 + 4) = sub_1000055A0(v260, v261, &v445);
                          swift_release_n(v248, 2);
                          swift_bridgeObjectRelease(v262);
                          *(_WORD *)(v256 + 12) = 2080;
                          *(_QWORD *)&v440 = v75;
                          swift_errorRetain(v75);
                          v263 = sub_100005C88(&qword_10015AB50);
                          v264 = String.init<A>(describing:)(&v440, v263);
                          v266 = v265;
                          *(_QWORD *)(v256 + 14) = sub_1000055A0(v264, v265, &v445);
                          swift_bridgeObjectRelease(v266);
                          swift_errorRelease(v75);
                          swift_errorRelease(v75);
                          _os_log_impl((void *)&_mh_execute_header, v254, v255, "Failed to handle queued request %s: %s", (uint8_t *)v256, 0x16u);
                          v267 = v429;
                          swift_arrayDestroy(v429, 2, v427);
                          v268 = v267;
                          v269 = v435;
                          swift_slowDealloc(v268, -1, -1);
                          v270 = v256;
                          v74 = v269;
                          swift_slowDealloc(v270, -1, -1);

                          (*(void (**)(unint64_t, uint64_t))(v246 + 8))(v252, v269);
                        }
                        else
                        {
                          swift_release_n(v248, 2);
                          swift_errorRelease(v75);
                          swift_errorRelease(v75);

                          (*(void (**)(unint64_t, uint64_t))(v246 + 8))(v252, v74);
                        }
                        v283 = (uint64_t)v75;
                      }
                      else
                      {
                        v271 = v250;
                        sub_100067584(&v442);
                        if ((v271 & 1) != 0)
                        {
                          v272 = v74;
                          v445 = 0;
                          v446 = 0xE000000000000000;
                          _StringGuts.grow(_:)(61);
                          v273._countAndFlagsBits = 0xD000000000000017;
                          v273._object = v426;
                          String.append(_:)(v273);
                          *(_QWORD *)&v440 = v248;
                          v274 = type metadata accessor for ApprovalStateUpdateRequest(0);
                          v275 = sub_100012534(&qword_10015A968, type metadata accessor for ApprovalStateUpdateRequest, (uint64_t)&protocol conformance descriptor for ApprovalStateUpdateRequest);
                          v276._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v274, v275);
                          object = v276._object;
                          String.append(_:)(v276);
                          swift_bridgeObjectRelease(object);
                          v278._countAndFlagsBits = 0xD000000000000024;
                          v278._object = v425;
                          String.append(_:)(v278);
                          v279 = v445;
                          v280 = v446;
                          if ((swift_isUniquelyReferenced_nonNull_native(v424) & 1) == 0)
                            v424 = sub_10000C500(0, v424[2] + 1, 1, v424);
                          v282 = v424[2];
                          v281 = v424[3];
                          if (v282 >= v281 >> 1)
                            v424 = sub_10000C500((_QWORD *)(v281 > 1), v282 + 1, 1, v424);
                          v283 = 0;
                          v284 = v424;
                          v424[2] = v282 + 1;
                          v285 = &v284[2 * v282];
                          v285[4] = v279;
                          v285[5] = v280;
                          v436 = 0;
                          v246 = v438;
                          v74 = v272;
                        }
                        else
                        {
                          v283 = 0;
                          v436 = 0;
                        }
                      }
                      v286 = v437;
                      v287 = *(_QWORD **)(v437 + 16);
                      swift_retain(v248);
                      sub_100096678(v283, v75 != 0);
                      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v287);
                      *(_QWORD *)(v286 + 16) = v287;
                      v289 = v74;
                      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      {
                        v287 = sub_100096444(0, v287[2] + 1, 1, v287);
                        *(_QWORD *)(v437 + 16) = v287;
                      }
                      v291 = v287[2];
                      v290 = v287[3];
                      if (v291 >= v290 >> 1)
                        v287 = sub_100096444((_QWORD *)(v290 > 1), v291 + 1, 1, v287);
                      ++v247;
                      v287[2] = v291 + 1;
                      v292 = &v287[3 * v291];
                      v292[4] = v248;
                      v292[5] = v283;
                      *((_BYTE *)v292 + 48) = v75 != 0;
                      *(_QWORD *)(v437 + 16) = v287;
                      sub_100086008(v283, v75 != 0);
                      swift_release(v248);
                      v74 = v289;
                      v75 = v436;
                      v244 = (unint64_t)v433;
                    }
                    while (v431 != v247);
LABEL_117:
                    swift_bridgeObjectRelease(v244);
                    v11 = (unint64_t)v449;
                    v445 = (uint64_t)v449;
                    v446 = v450;
                    v293 = v416;
                    *(_QWORD *)&v440 = v416;
                    *((_QWORD *)&v440 + 1) = v415;
                    v294 = sub_100096684();
                    v295 = dispatch thunk of static Equatable.== infix(_:_:)(&v445, &v440, &type metadata for ApprovalDB, v294);
                    swift_bridgeObjectRelease(v293);
                    if ((v295 & 1) != 0)
                    {
                      v30 = v424;
                      v76 = v421;
                      goto LABEL_124;
                    }
                    v30 = v424;
                    swift_bridgeObjectRetain(v424);
                    v296 = sub_1000D2610();
                    swift_bridgeObjectRelease(v30);
                    v76 = v421;
                    if (v296)
                    {
                      if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) != 0)
                        goto LABEL_121;
                      goto LABEL_155;
                    }
                  }
LABEL_124:
                  swift_bridgeObjectRetain(v30);
                  v300 = sub_1000D2610();
                  swift_bridgeObjectRelease(v30);
                  if (v300)
                  {
                    v301 = v437;
                    sub_100095EB4(0, (uint64_t)v434, v437);
                    swift_bridgeObjectRelease(v11);
                    swift_release(v301);
                    v302 = 0;
LABEL_143:
                    swift_bridgeObjectRelease(v30);
                    return (char *)v302;
                  }
                  v303 = sub_1000D31FC();
                  v436 = *(char **)(v246 + 16);
                  v304 = ((uint64_t (*)(char *, uint64_t, uint64_t))v436)(v393, v303, v74);
                  v305 = Logger.logObject.getter(v304);
                  v306 = static os_log_type_t.default.getter(v305);
                  if (os_log_type_enabled(v305, v306))
                  {
                    v307 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v307 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v305, v306, "Saving appproval db, encoding", v307, 2u);
                    swift_slowDealloc(v307, -1, -1);
                  }

                  v438 = *(_QWORD *)(v246 + 8);
                  ((void (*)(char *, uint64_t))v438)(v393, v74);
                  v308 = type metadata accessor for PropertyListEncoder(0);
                  swift_allocObject(v308, *(unsigned int *)(v308 + 48), *(unsigned __int16 *)(v308 + 52));
                  v309 = PropertyListEncoder.init()();
                  v310 = v74;
                  v311 = v449;
                  v445 = (uint64_t)v449;
                  v446 = v450;
                  v312 = sub_1000966C8();
                  v313 = swift_bridgeObjectRetain(v311);
                  v314 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v445, &type metadata for ApprovalDB, v312, v313);
                  v316 = (uint64_t)v75;
                  if (v75)
                  {
                    swift_release(v309);
                    swift_bridgeObjectRelease(v311);
                    goto LABEL_138;
                  }
                  v431 = (char *)v314;
                  v433 = (char *)v315;
                  v424 = v30;
                  swift_release(v309);
                  swift_bridgeObjectRelease(v311);
                  v317 = v390;
                  v430 = v303;
                  v318 = ((uint64_t (*)(char *, uint64_t, uint64_t))v436)(v390, v303, v310);
                  v319 = Logger.logObject.getter(v318);
                  v320 = static os_log_type_t.default.getter(v319);
                  if (os_log_type_enabled(v319, (os_log_type_t)v320))
                  {
                    v321 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v321 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v319, (os_log_type_t)v320, "Writing new approval db contents", v321, 2u);
                    swift_slowDealloc(v321, -1, -1);
                  }

                  ((void (*)(char *, uint64_t))v438)(v317, v310);
                  v322 = v434;
                  v429 = (uint64_t)&v434[OBJC_IVAR____TtC10driverkitd15ApprovalManager_databasePath];
                  URL.appendingPathExtension(_:)(7824750, 0xE300000000000000);
                  v323 = v322[5];
                  v324 = v322[6];
                  sub_100004DE4(v76, v323);
                  sub_10010731C(v323, v324);
                  v325 = v447;
                  v326 = v448;
                  v327 = sub_100004DE4(&v445, v447);
                  v328 = URL.path.getter(v327);
                  v330 = v329;
                  v331 = (uint64_t)v431;
                  v332 = (unint64_t)v433;
                  sub_1000122B4((uint64_t)v431, (unint64_t)v433);
                  v333 = sub_10001B9E4((uint64_t)_swiftEmptyArrayStorage);
                  LOBYTE(v328) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v326 + 40))(v328, v330, v331, v332, v333, v325, v326);
                  swift_bridgeObjectRelease(v333);
                  sub_100011F40(v331, v332);
                  swift_bridgeObjectRelease(v330);
                  v334 = sub_100005D08(&v445);
                  if ((v328 & 1) != 0)
                  {
                    v335 = v389;
                    v336 = ((uint64_t (*)(char *, unint64_t, uint64_t))v436)(v389, v430, v435);
                    v337 = Logger.logObject.getter(v336);
                    v338 = static os_log_type_t.info.getter(v337);
                    if (os_log_type_enabled(v337, v338))
                    {
                      v339 = (uint8_t *)swift_slowAlloc(2, -1);
                      *(_WORD *)v339 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v337, v338, "Replacing old approval db contents", v339, 2u);
                      swift_slowDealloc(v339, -1, -1);
                    }

                    ((void (*)(char *, uint64_t))v438)(v335, v435);
                    v340 = v434;
                    v341 = *((_QWORD *)v434 + 5);
                    v342 = *((_QWORD *)v434 + 6);
                    v343 = v421;
                    sub_100004DE4(v421, v341);
                    sub_10010731C(v341, v342);
                    v344 = v447;
                    v345 = v448;
                    sub_100004DE4(&v445, v447);
                    v346 = v391;
                    (*(void (**)(uint64_t, char *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v345 + 88))(v429, v391, 0, 0, 0, 0, v344, v345);
                    sub_100005D08(&v445);
                    v375 = v340[5];
                    v376 = v340[6];
                    sub_100004DE4(v343, v375);
                    sub_10010731C(v375, v376);
                    v377 = v447;
                    v378 = v448;
                    sub_100004DE4(&v445, v447);
                    (*(void (**)(char *, uint64_t, uint64_t))(v378 + 104))(v346, v377, v378);
                    v379 = v432;
                    v380 = v424;
                    sub_100005D08(&v445);
                    v381 = v449;
                    v382 = v450;
                    v383 = v434;
                    v384 = &v434[OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB];
                    v385 = *(_QWORD *)&v434[OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB];
                    *v384 = v449;
                    v384[1] = v382;
                    swift_bridgeObjectRetain(v381);
                    swift_bridgeObjectRelease(v385);
                    v386 = v437;
                    sub_100095EB4(0, (uint64_t)v383, v437);
                    sub_100011F40((uint64_t)v431, (unint64_t)v433);
                    ((void (*)(char *, uint64_t))v379[1])(v346, v439);
                    swift_release(v386);
                    v302 = v380;
                  }
                  else
                  {
                    v347 = errno.getter(v334);
                    result = strerror(v347);
                    v303 = v430;
                    if (!result)
                      goto LABEL_160;
                    v348 = String.init(cString:)(result);
                    v350 = v349;
                    v445 = 0;
                    v446 = 0xE000000000000000;
                    _StringGuts.grow(_:)(30);
                    swift_bridgeObjectRelease(v446);
                    v445 = 0x6946657461657263;
                    v446 = 0xEB0000000020656CLL;
                    v351 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
                    v352 = v391;
                    v353 = v439;
                    v354._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v439, v351);
                    v355 = v354._object;
                    String.append(_:)(v354);
                    swift_bridgeObjectRelease(v355);
                    v356._countAndFlagsBits = 0x3A64656C69616620;
                    v356._object = (void *)0xEF206F6E72726520;
                    String.append(_:)(v356);
                    v357._countAndFlagsBits = v348;
                    v357._object = v350;
                    String.append(_:)(v357);
                    swift_bridgeObjectRelease(v350);
                    v358 = v445;
                    v359 = v446;
                    v360 = sub_1000122F8();
                    v316 = swift_allocError(&type metadata for KMError, v360, 0, 0);
                    *(_QWORD *)v361 = v358;
                    *(_QWORD *)(v361 + 8) = v359;
                    *(_OWORD *)(v361 + 16) = 0u;
                    *(_OWORD *)(v361 + 32) = 0u;
                    *(_OWORD *)(v361 + 48) = 0u;
                    *(_QWORD *)(v361 + 64) = 0;
                    *(_BYTE *)(v361 + 72) = 19;
                    swift_willThrow(v316);
                    sub_100011F40((uint64_t)v431, (unint64_t)v433);
                    ((void (*)(char *, uint64_t))v432[1])(v352, v353);
                    v310 = v435;
                    v30 = v424;
LABEL_138:
                    v362 = v392;
                    ((void (*)(char *, uint64_t, uint64_t))v436)(v392, v303, v310);
                    swift_errorRetain(v316);
                    v363 = swift_errorRetain(v316);
                    v364 = Logger.logObject.getter(v363);
                    v365 = static os_log_type_t.error.getter(v364);
                    if (os_log_type_enabled(v364, v365))
                    {
                      v424 = v30;
                      v366 = (uint8_t *)swift_slowAlloc(12, -1);
                      v367 = swift_slowAlloc(32, -1);
                      v445 = v367;
                      *(_DWORD *)v366 = v420;
                      *(_QWORD *)&v440 = v316;
                      swift_errorRetain(v316);
                      v368 = sub_100005C88(&qword_10015AB50);
                      v369 = String.init<A>(describing:)(&v440, v368);
                      v371 = v370;
                      *(_QWORD *)&v440 = sub_1000055A0(v369, v370, &v445);
                      v30 = v424;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, (char *)&v440 + 8, v366 + 4, v366 + 12);
                      swift_bridgeObjectRelease(v371);
                      swift_errorRelease(v316);
                      swift_errorRelease(v316);
                      _os_log_impl((void *)&_mh_execute_header, v364, v365, "Failed to write approval database during state update: %s", v366, 0xCu);
                      swift_arrayDestroy(v367, 1, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v367, -1, -1);
                      swift_slowDealloc(v366, -1, -1);

                      v372 = v392;
                      v373 = v435;
                    }
                    else
                    {
                      swift_errorRelease(v316);
                      swift_errorRelease(v316);

                      v372 = v362;
                      v373 = v310;
                    }
                    ((void (*)(char *, uint64_t))v438)(v372, v373);
                    swift_errorRetain(v316);
                    v374 = v437;
                    sub_100095EB4(v316, (uint64_t)v434, v437);
                    swift_errorRelease(v316);
                    swift_errorRelease(v316);
                    swift_release(v374);
                    swift_bridgeObjectRelease(v30);
                    v302 = 0;
                  }
                  v30 = v449;
                  goto LABEL_143;
                }
                v142 = v422[v143];
                if (!v142)
                {
                  while (1)
                  {
                    v132 = v143 + 1;
                    if (__OFADD__(v143, 1))
                      goto LABEL_146;
                    if (v132 >= v423)
                      goto LABEL_90;
                    v142 = v422[v132];
                    ++v143;
                    if (v142)
                      goto LABEL_57;
                  }
                }
                v132 = v143;
              }
            }
          }
        }
LABEL_57:
        v138 = (v142 - 1) & v142;
        v139 = __clz(__rbit64(v142)) + (v132 << 6);
LABEL_58:
        v436 = (char *)v138;
        v437 = v132;
        v144 = v427;
        sub_100012408(*(_QWORD *)(v430 + 56) + *(_QWORD *)(v428 + 72) * v139, v427, type metadata accessor for DriverBinEntry);
        sub_1000965EC(v144, (uint64_t)v76);
        v145 = (uint64_t (*)(unint64_t, char *, char *))v30[2];
        v146 = v145(v22, &v76[*(int *)(v136 + 28)], v75);
        result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v434 + 224))(v146);
        if (!result)
        {
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
          break;
        }
        v147 = result;
        v148 = (*(uint64_t (**)(void))(*(_QWORD *)result + 216))();
        swift_release(v147);
        v149 = &v76[*(int *)(v136 + 20)];
        v150 = type metadata accessor for ApplicationRecord(0);
        v151 = v150;
        v152 = (uint64_t *)&v149[*(int *)(v150 + 32)];
        v153 = *v152;
        v154 = v152[1];
        if (*(_QWORD *)(v148 + 16))
        {
          sub_1000122B4(v153, v154);
          v155 = sub_10000CF94(v153, v154);
          v157 = *(_QWORD *)(v151 - 8);
          v158 = v426;
          if ((v156 & 1) != 0)
          {
            sub_100012408(*(_QWORD *)(v148 + 56) + *(_QWORD *)(v157 + 72) * v155, (uint64_t)v426, type metadata accessor for ApplicationRecord);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v158, 0, 1, v151);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v157 + 56))(v426, 1, 1, v151);
          }
        }
        else
        {
          v157 = *(_QWORD *)(v150 - 8);
          v158 = v426;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v157 + 56))(v426, 1, 1, v150);
          sub_1000122B4(v153, v154);
        }
        swift_bridgeObjectRelease(v148);
        sub_100011F40(v153, v154);
        v159 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v157 + 48))(v158, 1, v151);
        sub_1000124F8((uint64_t)v158, &qword_100157EF0);
        if (v159 == 1)
        {
          v160 = sub_1000D31FC();
          v161 = v425;
          v74 = v435;
          (*(void (**)(char *, uint64_t, uint64_t))(v438 + 16))(v425, v160, v435);
          v162 = v419;
          v163 = (unint64_t)v433;
          v75 = (char *)v439;
          v164 = v145((unint64_t)v419, v433, (char *)v439);
          v165 = Logger.logObject.getter(v164);
          v166 = static os_log_type_t.info.getter(v165);
          if (os_log_type_enabled(v165, v166))
          {
            v167 = swift_slowAlloc(12, -1);
            v168 = v74;
            v169 = swift_slowAlloc(32, -1);
            v445 = v169;
            *(_DWORD *)v167 = v420;
            v170 = URL.path.getter(v169);
            v172 = v171;
            *(_QWORD *)(v167 + 4) = sub_1000055A0(v170, v171, &v445);
            swift_bridgeObjectRelease(v172);
            v30 = v432;
            v173 = (void (*)(char *, uint64_t))v432[1];
            v173(v162, v439);
            _os_log_impl((void *)&_mh_execute_header, v165, v166, "Skipping bundle at %s since containing application was removed", (uint8_t *)v167, 0xCu);
            swift_arrayDestroy(v169, 1, v418);
            v174 = v169;
            v74 = v168;
            swift_slowDealloc(v174, -1, -1);
            v175 = v167;
            v75 = (char *)v439;
            swift_slowDealloc(v175, -1, -1);

            (*(void (**)(char *, uint64_t))(v438 + 8))(v425, v168);
            goto LABEL_76;
          }
LABEL_74:

          v30 = v432;
          v173 = (void (*)(char *, uint64_t))v432[1];
          v173(v162, (uint64_t)v75);
          goto LABEL_75;
        }
        v176 = *((_QWORD *)v434 + 5);
        v177 = *((_QWORD *)v434 + 6);
        sub_100004DE4(v421, v176);
        sub_10009C20C(v176, v177);
        v178 = *((_QWORD *)&v443 + 1);
        v179 = v444;
        sub_100004DE4(&v442, *((uint64_t *)&v443 + 1));
        v180 = (unint64_t)v433;
        (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v179 + 24))(&v440, v433, v178, v179);
        if (v441)
        {
          sub_100004E2C(&v440, (uint64_t)&v445);
          sub_100005D08(&v442);
          v181 = v447;
          v182 = v448;
          sub_100004DE4(&v445, v447);
          v183 = (*(uint64_t (**)(uint64_t, uint64_t))(v182 + 24))(v181, v182);
          if (!v184)
          {
            v217 = sub_1000D31FC();
            v193 = v402;
            v74 = v435;
            (*(void (**)(char *, uint64_t, uint64_t))(v438 + 16))(v402, v217, v435);
            v194 = v401;
            v195 = (unint64_t)v433;
            v75 = (char *)v439;
            v218 = v145((unint64_t)v401, v433, (char *)v439);
            v197 = Logger.logObject.getter(v218);
            v219 = static os_log_type_t.error.getter(v197);
            if (!os_log_type_enabled(v197, v219))
              goto LABEL_40;
            v199 = swift_slowAlloc(12, -1);
            v200 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v442 = v200;
            *(_DWORD *)v199 = v420;
            v220 = URL.path.getter(v200);
            v222 = v221;
            *(_QWORD *)(v199 + 4) = sub_1000055A0(v220, v221, (uint64_t *)&v442);
            swift_bridgeObjectRelease(v222);
            v30 = v432;
            v140 = (void (*)(char *, uint64_t))v432[1];
            v140(v194, v439);
            v204 = v197;
            v205 = v219;
            v206 = "Bundle at %s does not have a bundle identifier";
LABEL_81:
            _os_log_impl((void *)&_mh_execute_header, v204, v205, v206, (uint8_t *)v199, 0xCu);
            swift_arrayDestroy(v200, 1, (char *)&type metadata for Any + 8);
            v223 = v200;
            v74 = v435;
            swift_slowDealloc(v223, -1, -1);
            v224 = v199;
            v75 = (char *)v439;
            swift_slowDealloc(v224, -1, -1);

LABEL_41:
            (*(void (**)(char *, uint64_t))(v438 + 8))(v193, v74);
            v140((char *)v195, (uint64_t)v75);
            v76 = v431;
            sub_100012490((uint64_t)v431, type metadata accessor for DriverBinEntry);
            v22 = v195;
            v11 = (unint64_t)v436;
            v132 = v437;
            sub_100005D08(&v445);
            v136 = v429;
            if (v11)
              goto LABEL_39;
            goto LABEL_42;
          }
          v185 = v183;
          v186 = v184;
          v187 = (uint64_t)v449;
          v188 = (uint64_t *)&v149[*(int *)(v151 + 28)];
          v189 = *v188;
          v190 = v188[1];
          swift_bridgeObjectRetain(v449);
          sub_1000122B4(v189, v190);
          v191 = sub_10005E2B8(v185, v186, v189, v190, v187);
          sub_100011F40(v189, v190);
          swift_bridgeObjectRelease(v187);
          if (v191 != 3)
          {
            swift_bridgeObjectRelease(v186);
            v192 = sub_1000D31FC();
            v193 = v409;
            v74 = v435;
            (*(void (**)(char *, uint64_t, uint64_t))(v438 + 16))(v409, v192, v435);
            v194 = v408;
            v195 = (unint64_t)v433;
            v75 = (char *)v439;
            v196 = v145((unint64_t)v408, v433, (char *)v439);
            v197 = Logger.logObject.getter(v196);
            v198 = static os_log_type_t.info.getter(v197);
            if (os_log_type_enabled(v197, v198))
            {
              v199 = swift_slowAlloc(12, -1);
              v200 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v442 = v200;
              *(_DWORD *)v199 = v420;
              v201 = URL.path.getter(v200);
              v203 = v202;
              *(_QWORD *)(v199 + 4) = sub_1000055A0(v201, v202, (uint64_t *)&v442);
              swift_bridgeObjectRelease(v203);
              v30 = v432;
              v140 = (void (*)(char *, uint64_t))v432[1];
              v140(v194, v439);
              v204 = v197;
              v205 = v198;
              v206 = "Skipping bundle at %s, already inserted into approvals database";
              goto LABEL_81;
            }
LABEL_40:

            v30 = v432;
            v140 = (void (*)(char *, uint64_t))v432[1];
            v140(v194, (uint64_t)v75);
            goto LABEL_41;
          }
          sub_1000122B4(v189, v190);
          v225 = sub_10005E2B8(v185, v186, v189, v190, v416);
          sub_100011F40(v189, v190);
          if (v225 == 3)
          {
            *(_QWORD *)&v442 = 0;
            *((_QWORD *)&v442 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(69);
            v226._countAndFlagsBits = 0xD000000000000026;
            v226._object = v412;
            String.append(_:)(v226);
            v227 = sub_100012534(&qword_100157EB8, type metadata accessor for DriverBinEntry, (uint64_t)&unk_1001105E8);
            v228._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v429, v227);
            v229 = v228._object;
            String.append(_:)(v228);
            swift_bridgeObjectRelease(v229);
            v230._countAndFlagsBits = 0xD00000000000001BLL;
            v230._object = v411;
            String.append(_:)(v230);
            LOBYTE(v440) = 0;
            v231 = sub_1000965A8();
            v232._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for ApprovalState, v231);
            v233 = v232._object;
            String.append(_:)(v232);
            swift_bridgeObjectRelease(v233);
            v234 = v442;
            v235 = v424;
            v236 = swift_isUniquelyReferenced_nonNull_native(v424);
            v22 = (unint64_t)v433;
            v410 = v234;
            if ((v236 & 1) == 0)
              v235 = sub_10000C500(0, v235[2] + 1, 1, v235);
            v238 = v235[2];
            v237 = v235[3];
            v424 = v235;
            if (v238 >= v237 >> 1)
              v424 = sub_10000C500((_QWORD *)(v237 > 1), v238 + 1, 1, v424);
            v225 = 0;
            v239 = v424;
            v424[2] = v238 + 1;
            v240 = &v239[2 * v238];
            v240[4] = v410;
            v240[5] = *((_QWORD *)&v234 + 1);
            v30 = v432;
          }
          else
          {
            v30 = v432;
            v22 = (unint64_t)v433;
          }
          sub_1000122B4(v189, v190);
          v241 = ApprovalDBEntry.init(driverIdentifier:source:approvalState:)(v185, v186, v189, v190, v225, (uint64_t)v453);
          __chkstk_darwin(v241);
          sub_1000BC904((uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/ApprovalManager.swift", 99, 2, 165, (uint64_t)v421, 0xD000000000000026, (unint64_t)v413, (void (*)(__n128))sub_100096630);
          v75 = (char *)v439;
          ((void (*)(unint64_t, uint64_t))v30[1])(v22, v439);
          v76 = v431;
          sub_100012490((uint64_t)v431, type metadata accessor for DriverBinEntry);
          sub_100067584(v453);
          sub_100005D08(&v445);
          v74 = v435;
        }
        else
        {
          sub_1000124F8((uint64_t)&v440, &qword_100157C78);
          sub_100005D08(&v442);
          v207 = sub_1000D31FC();
          v163 = v180;
          v161 = (char *)v406;
          v74 = v435;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v438 + 16))(v406, v207, v435);
          v162 = v407;
          v75 = (char *)v439;
          v208 = v145((unint64_t)v407, (char *)v180, (char *)v439);
          v165 = Logger.logObject.getter(v208);
          v209 = static os_log_type_t.error.getter(v165);
          if (!os_log_type_enabled(v165, v209))
            goto LABEL_74;
          v210 = swift_slowAlloc(12, -1);
          v211 = swift_slowAlloc(32, -1);
          v445 = v211;
          *(_DWORD *)v210 = v420;
          v212 = URL.path.getter(v211);
          v214 = v213;
          *(_QWORD *)(v210 + 4) = sub_1000055A0(v212, v213, &v445);
          swift_bridgeObjectRelease(v214);
          v30 = v432;
          v173 = (void (*)(char *, uint64_t))v432[1];
          v173(v162, v439);
          _os_log_impl((void *)&_mh_execute_header, v165, v209, "Bundle at %s is invalid", (uint8_t *)v210, 0xCu);
          swift_arrayDestroy(v211, 1, (char *)&type metadata for Any + 8);
          v215 = v211;
          v74 = v435;
          swift_slowDealloc(v215, -1, -1);
          v216 = v210;
          v75 = (char *)v439;
          swift_slowDealloc(v216, -1, -1);

LABEL_75:
          (*(void (**)(char *, uint64_t))(v438 + 8))(v161, v74);
LABEL_76:
          v173((char *)v163, (uint64_t)v75);
          v76 = v431;
          sub_100012490((uint64_t)v431, type metadata accessor for DriverBinEntry);
          v22 = v163;
        }
        v11 = (unint64_t)v436;
        v132 = v437;
        v136 = v429;
        if (v436)
          goto LABEL_39;
        goto LABEL_42;
      }
      v413 = v434 + 16;
      v424 = _swiftEmptyArrayStorage;
      v421 = (char *)(v72 & 0xC000000000000001);
      v22 = 4;
      v400 = 0xD000000000000017;
      v399 = (void *)0x8000000100127B60;
      v398 = 0xD00000000000001BLL;
      v397 = (void *)0x8000000100127B80;
      v411 = (void *)0x8000000100127C10;
      v412 = (char *)&type metadata for () + 8;
      *(_QWORD *)&v71 = 136315394;
      v395 = v71;
      v394 = (char *)&type metadata for Any + 8;
      v11 = (unint64_t)v418;
      v79 = (uint64_t)v436;
      *(_QWORD *)&v420 = v73;
      while (1)
      {
        v86 = v22 - 4;
        if (!v421)
          break;
        v87 = specialized _ArrayBuffer._getElementSlowPath(_:)(v22 - 4, v72);
        v88 = v22 - 3;
        if (__OFADD__(v86, 1))
          goto LABEL_144;
LABEL_18:
        v437 = v88;
        (*(void (**)(void))(**(_QWORD **)(v87 + 24) + 152))();
        if (((unsigned int (*)(uint64_t, uint64_t, char *))v30[6])(v77, 1, v75) == 1)
        {
          v89 = sub_1000124F8(v77, (uint64_t *)&unk_10015BA60);
LABEL_20:
          v90 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v87 + 24) + 144))(v89);
          v92 = v91;
          v82 = sub_10005E2B8(v90, v91, 0, 0xF000000000000000, v416);
          swift_bridgeObjectRelease(v92);
          if (v82 == 3)
          {
            v445 = 0;
            v446 = 0xE000000000000000;
            _StringGuts.grow(_:)(54);
            v93._object = v399;
            v93._countAndFlagsBits = v400;
            String.append(_:)(v93);
            *(_QWORD *)&v442 = v87;
            v94 = type metadata accessor for RealizedInfo(0);
            _print_unlocked<A, B>(_:_:)(&v442, &v445, v94, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
            v95._object = v397;
            v95._countAndFlagsBits = v398;
            String.append(_:)(v95);
            LOBYTE(v442) = 1;
            v96 = sub_1000965A8();
            v97._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for ApprovalState, v96);
            v98 = v97._object;
            String.append(_:)(v97);
            swift_bridgeObjectRelease(v98);
            v99 = v445;
            v100 = v446;
            if ((swift_isUniquelyReferenced_nonNull_native(v424) & 1) == 0)
              v424 = sub_10000C500(0, v424[2] + 1, 1, v424);
            v102 = v424[2];
            v101 = v424[3];
            if (v102 >= v101 >> 1)
              v424 = sub_10000C500((_QWORD *)(v101 > 1), v102 + 1, 1, v424);
            v80 = v424;
            v424[2] = v102 + 1;
            v81 = &v80[2 * v102];
            v81[4] = v99;
            v81[5] = v100;
            v82 = 1;
            v11 = (unint64_t)v418;
          }
          v83 = (*(uint64_t (**)(void))(**(_QWORD **)(v87 + 24) + 144))();
          v85 = ApprovalDBEntry.init(driverIdentifier:source:approvalState:)(v83, v84, 0, 0xF000000000000000, v82, (uint64_t)v452);
          __chkstk_darwin(v85);
          sub_1000BC904((uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/ApprovalManager.swift", 99, 2, 127, (uint64_t)v413, 0xD000000000000026, (unint64_t)v411, (void (*)(__n128))sub_100096A8C);
          swift_release(v87);
          sub_100067584(v452);
          v75 = (char *)v439;
          v74 = v435;
          v79 = (uint64_t)v436;
          goto LABEL_12;
        }
        ((void (*)(uint64_t, uint64_t, char *))v30[4])(v79, v77, v75);
        v103 = sub_10000B2A0(v79, v410);
        v104 = v79;
        v105 = (uint64_t (*)(unint64_t, uint64_t, char *))v30[2];
        v106 = v105(v11, v104, v75);
        if ((v103 & 1) != 0)
        {
          v417 = (void (*)(unint64_t, char *))v30[1];
          v417(v11, v75);
        }
        else
        {
          result = (char *)((uint64_t (*)(uint64_t))v396)(v106);
          if (!result)
            goto LABEL_157;
          v107 = result;
          v108 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 392))(v11);
          swift_release(v107);
          v109 = (void (*)(unint64_t, uint64_t))v30[1];
          v110 = v439;
          v109(v11, v439);
          if ((v108 & 1) == 0)
          {
            v89 = ((uint64_t (*)(char *, uint64_t))v109)(v436, v110);
            v30 = v432;
            goto LABEL_20;
          }
          v417 = (void (*)(unint64_t, char *))v109;
          v75 = (char *)v110;
        }
        v111 = sub_1000D31FC();
        v112 = v404;
        v113 = v435;
        (*(void (**)(char *, uint64_t, uint64_t))(v438 + 16))(v404, v111, v435);
        v114 = v403;
        v105((unint64_t)v403, (uint64_t)v436, v75);
        v115 = swift_retain_n(v87, 2);
        v116 = v113;
        v117 = Logger.logObject.getter(v115);
        v118 = static os_log_type_t.info.getter(v117);
        if (os_log_type_enabled(v117, v118))
        {
          v119 = swift_slowAlloc(22, -1);
          v120 = swift_slowAlloc(64, -1);
          v445 = v120;
          *(_DWORD *)v119 = v395;
          v121 = (*(uint64_t (**)(void))(**(_QWORD **)(v87 + 24) + 144))();
          v123 = v122;
          *(_QWORD *)(v119 + 4) = sub_1000055A0(v121, v122, &v445);
          swift_release_n(v87, 2);
          v124 = swift_bridgeObjectRelease(v123);
          *(_WORD *)(v119 + 12) = 2080;
          v125 = URL.path.getter(v124);
          v127 = v126;
          *(_QWORD *)(v119 + 14) = sub_1000055A0(v125, v126, &v445);
          swift_bridgeObjectRelease(v127);
          v128 = (void (*)(char *, char *))v417;
          v417((unint64_t)v114, (char *)v439);
          _os_log_impl((void *)&_mh_execute_header, v117, v118, "Skipping third party driver %s at %s during first approvals database update pass", (uint8_t *)v119, 0x16u);
          swift_arrayDestroy(v120, 2, v394);
          v129 = v120;
          v75 = (char *)v439;
          swift_slowDealloc(v129, -1, -1);
          swift_slowDealloc(v119, -1, -1);
          swift_release(v87);

          v74 = v435;
          (*(void (**)(char *, uint64_t))(v438 + 8))(v112, v435);
        }
        else
        {

          v128 = (void (*)(char *, char *))v417;
          v417((unint64_t)v114, v75);
          swift_release_n(v87, 3);
          (*(void (**)(char *, uint64_t))(v438 + 8))(v112, v116);
          v74 = v116;
        }
        v79 = (uint64_t)v436;
        v128(v436, v75);
        v76 = v431;
        v30 = v432;
        v77 = (uint64_t)v405;
        v11 = (unint64_t)v418;
LABEL_12:
        v72 = (uint64_t)v422;
        v78 = v423;
        ++v22;
        if (v437 == (_QWORD)v420)
          goto LABEL_36;
      }
      v87 = *(_QWORD *)(v72 + 8 * v22);
      swift_retain(v87);
      v88 = v22 - 3;
      if (!__OFADD__(v86, 1))
        goto LABEL_18;
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      if (v72 < 0)
        v387 = v72;
      else
        v387 = v72 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v72);
      v388 = _CocoaArrayWrapper.endIndex.getter(v387);
      swift_bridgeObjectRelease(v422);
      v73 = v388;
      v72 = (uint64_t)v422;
    }
  }
  __break(1u);
LABEL_160:
  __break(1u);
  return result;
}

uint64_t sub_100095EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_10014B368, 32, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a1;
  aBlock[4] = sub_100096840;
  v22 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000B424;
  aBlock[3] = &unk_10014B380;
  v13 = _Block_copy(aBlock);
  swift_retain(a3);
  v14 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v14);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_100012534((unint64_t *)&qword_10015ABD0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100005C88((uint64_t *)&unk_100159EB0);
  v17 = sub_100081F98();
  dispatch thunk of SetAlgebra.init<A>(_:)(v7, &v20, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v22);
}

uint64_t sub_1000960A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t updated;
  uint64_t v19;
  Swift::String v20;
  void *v21;
  unint64_t v22;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
  v3 = sub_100060AA0(v2);
  swift_bridgeObjectRelease(v2);
  v22 = v3;
  _StringGuts.grow(_:)(20);
  v4 = swift_bridgeObjectRelease(0xE000000000000000);
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152);
  v6 = v5(v4);
  v7 = v6;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 >= 0)
      v6 &= 0xFFFFFFFFFFFFFF8uLL;
    _CocoaArrayWrapper.endIndex.getter(v6);
  }
  swift_bridgeObjectRelease(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = 58;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD000000000000011;
  v11._object = (void *)0x8000000100127CE0;
  String.append(_:)(v11);
  v12 = swift_bridgeObjectRelease(0x8000000100127CE0);
  result = v5(v12);
  v14 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(result);
    v15 = result;
    if (!result)
      goto LABEL_16;
  }
  else
  {
    v15 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
    {
LABEL_16:
      swift_bridgeObjectRelease(v14);
      return v22;
    }
  }
  if (v15 >= 1)
  {
    v16 = 0;
    do
    {
      if ((v14 & 0xC000000000000001) != 0)
      {
        v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v14);
      }
      else
      {
        v17 = *(_QWORD *)(v14 + 8 * v16 + 32);
        swift_retain(v17);
      }
      ++v16;
      updated = type metadata accessor for ApprovalStateUpdateRequest(0);
      v19 = sub_100012534(&qword_10015A968, type metadata accessor for ApprovalStateUpdateRequest, (uint64_t)&protocol conformance descriptor for ApprovalStateUpdateRequest);
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(updated, v19);
      v21 = v20._object;
      String.append(_:)(v20);
      swift_release(v17);
      swift_bridgeObjectRelease(v21);
    }
    while (v15 != v16);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000962D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100005D08((_QWORD *)(v0 + 16));
  v1 = v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_databasePath;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_requests));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_driverBinManager));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_kernelStateManager));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_applicationManager));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_subscribers));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager__approvalDB));
  return v0;
}

uint64_t sub_100096394()
{
  uint64_t v0;

  sub_1000962D8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

id sub_1000963B8()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10driverkitd15ApprovalManager_stateManagerQueue);
}

uint64_t sub_1000963C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t sub_1000963D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

void (*sub_1000963E0(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 264))();
  return sub_10000C4BC;
}

uint64_t sub_10009642C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t sub_100096438()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

_QWORD *sub_100096444(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005C88(&qword_10015AB20);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100096980(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

unint64_t sub_100096564()
{
  unint64_t result;

  result = qword_10015A948;
  if (!qword_10015A948)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDB, &type metadata for ApprovalDB);
    atomic_store(result, (unint64_t *)&qword_10015A948);
  }
  return result;
}

unint64_t sub_1000965A8()
{
  unint64_t result;

  result = qword_10015A950;
  if (!qword_10015A950)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalState, &type metadata for ApprovalState);
    atomic_store(result, (unint64_t *)&qword_10015A950);
  }
  return result;
}

uint64_t sub_1000965EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DriverBinEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100096630()
{
  uint64_t v0;

  return sub_10005EE48(*(_QWORD **)(v0 + 24));
}

uint64_t sub_100096654()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100096678(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_errorRetain();
  return result;
}

unint64_t sub_100096684()
{
  unint64_t result;

  result = qword_10015A958;
  if (!qword_10015A958)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDB, &type metadata for ApprovalDB);
    atomic_store(result, (unint64_t *)&qword_10015A958);
  }
  return result;
}

unint64_t sub_1000966C8()
{
  unint64_t result;

  result = qword_10015A960;
  if (!qword_10015A960)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDB, &type metadata for ApprovalDB);
    atomic_store(result, (unint64_t *)&qword_10015A960);
  }
  return result;
}

uint64_t sub_10009670C()
{
  return type metadata accessor for ApprovalManager(0);
}

uint64_t type metadata accessor for ApprovalManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1001644C8;
  if (!qword_1001644C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApprovalManager);
  return result;
}

uint64_t sub_100096750(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = "(";
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_100113F00;
    v4[5] = &unk_100113F00;
    v4[6] = &unk_100113F00;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = &unk_100113F18;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000967FC()
{
  return sub_100096808((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_100096808(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, 32, 7);
}

uint64_t sub_100096840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  _BYTE v13[24];

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  result = swift_beginAccess(v2 + 16, v13, 0, 0);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(v4);
    for (i = (unsigned __int8 *)(v4 + 48); ; i += 24)
    {
      v8 = *((_QWORD *)i - 2);
      v9 = *((_QWORD *)i - 1);
      v10 = *i;
      v12 = *(void (**)(uint64_t, uint64_t))(v8 + 56);
      v11 = *(_QWORD *)(v8 + 64);
      swift_retain(v8);
      if (v10 == 1)
      {
        sub_100096678(v9, 1);
        swift_retain(v11);
        v12(v9, 1);
        sub_100086008(v9, 1);
        swift_release(v11);
        v7 = v8;
      }
      else
      {
        if (v1)
        {
          swift_errorRetain(v1);
          swift_retain(v11);
          v12(v1, 1);
          swift_release(v11);
          swift_release(v8);
          swift_errorRelease(v1);
          goto LABEL_5;
        }
        swift_retain(v11);
        v12(v9, 0);
        swift_release(v8);
        v7 = v11;
      }
      swift_release(v7);
LABEL_5:
      if (!--v5)
        return swift_bridgeObjectRelease(v4);
    }
  }
  return result;
}

uint64_t sub_100096980(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100005C88(&qword_10015AB28);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_100096A8C()
{
  return sub_100096630();
}

uint64_t sub_100096AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v36 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v36 - v13;
  v15 = URL.pathExtension.getter(v12);
  v17 = v16;
  if (v15 == 0x6775626564 && v16 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v18(v14, a1, v4);
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 0x6775626564, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(v17);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v14, a1, v4);
    if ((v19 & 1) == 0)
    {
      v21 = URL.pathExtension.getter(v20);
      if (v21 != 0x6D706F6C65766564 || v22 != 0xEB00000000746E65)
      {
        v24 = v22;
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0x6D706F6C65766564, 0xEB00000000746E65, 0);
        swift_bridgeObjectRelease(v24);
        goto LABEL_12;
      }
      swift_bridgeObjectRelease(0xEB00000000746E65);
    }
  }
  v25 = 1;
LABEL_12:
  v26 = *(void (**)(char *, uint64_t))(v5 + 8);
  v26(v14, v4);
  v27 = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v11, a1, v4);
  if ((v25 & 1) != 0)
  {
LABEL_20:
    v33 = ((uint64_t (*)(char *, uint64_t))v26)(v11, v4);
    goto LABEL_21;
  }
  v28 = URL.pathExtension.getter(v27);
  if (v28 == 0x6E6173616BLL && v29 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    goto LABEL_20;
  }
  v31 = v29;
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, 0x6E6173616BLL, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v31);
  v33 = ((uint64_t (*)(char *, uint64_t))v26)(v11, v4);
  if ((v32 & 1) != 0)
  {
LABEL_21:
    URL.deletingPathExtension()(v33);
    URL.appendingPathExtension(_:)(0x736564696C65, 0xE600000000000000);
    v26(v8, v4);
    v34 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, v34, 1, v4);
  }
  v34 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, v34, 1, v4);
}

uint64_t sub_100096D4C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, char *);
  char *v75;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  _QWORD v85[3];
  uint64_t v86;
  uint64_t v87;

  v2 = v1;
  v4 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v4);
  v84 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v83 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v77 - v10;
  v82 = a1;
  URL.appendingPathExtension(_:)(0x736564696C65, 0xE600000000000000);
  v12 = v2 + 2;
  v13 = v2[5];
  v14 = v2[6];
  sub_100004DE4(v2 + 2, v13);
  sub_10010731C(v13, v14);
  v15 = v87;
  v16 = sub_100004DE4(v85, v86);
  v17 = URL.path.getter(v16);
  v19 = v18;
  v20 = (*(uint64_t (**)(uint64_t))(v15 + 16))(v17);
  v22 = v21;
  swift_bridgeObjectRelease(v19);
  if (v22 >> 60 == 15)
  {
    v23 = v2;
    v24 = v83;
    v25 = (uint64_t)v84;
    v81 = v11;
    v26 = v7;
    v27 = sub_100005D08(v85);
    v28 = errno.getter(v27);
    if ((_DWORD)v28 != 2)
    {
      v29 = v28;
      v30 = static os_log_type_t.error.getter(v28);
      v31 = (void *)*sub_1000D2D14();
      v32 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v33 = swift_allocObject(v32, 112, 7);
      *(_OWORD *)(v33 + 16) = xmmword_10010F380;
      v34 = v31;
      v35 = v81;
      v36 = URL.path.getter(v34);
      v38 = v37;
      *(_QWORD *)(v33 + 56) = &type metadata for String;
      *(_QWORD *)(v33 + 64) = sub_100026838();
      *(_QWORD *)(v33 + 32) = v36;
      *(_QWORD *)(v33 + 40) = v38;
      *(_QWORD *)(v33 + 96) = &type metadata for Int32;
      *(_QWORD *)(v33 + 104) = &protocol witness table for Int32;
      *(_DWORD *)(v33 + 72) = v29;

      swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v6);
      return 0;
    }
    sub_100096AA8(v82, v25);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v25, 1, v6) == 1)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v81, v6);
      sub_1000976A0(v25);
      return 0;
    }
    v80 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v24, v25, v6);
    v84 = (char *)v6;
    v39 = v23[5];
    v40 = v23[6];
    sub_100004DE4(v12, v39);
    sub_10010731C(v39, v40);
    v41 = v87;
    v42 = sub_100004DE4(v85, v86);
    v43 = URL.path.getter(v42);
    v45 = v44;
    v20 = (*(uint64_t (**)(uint64_t))(v41 + 16))(v43);
    v47 = v46;
    swift_bridgeObjectRelease(v45);
    v48 = sub_100005D08(v85);
    v49 = v81;
    if (v47 >> 60 == 15)
    {
      v50 = errno.getter(v48);
      v78 = v50;
      v79 = static os_log_type_t.error.getter(v50);
      v51 = (void *)*sub_1000D2D14();
      v52 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v53 = swift_allocObject(v52, 152, 7);
      *(_OWORD *)(v53 + 16) = xmmword_100111CB0;
      v54 = v51;
      v55 = URL.path.getter(v54);
      v57 = v56;
      *(_QWORD *)(v53 + 56) = &type metadata for String;
      v58 = sub_100026838();
      *(_QWORD *)(v53 + 64) = v58;
      *(_QWORD *)(v53 + 32) = v55;
      *(_QWORD *)(v53 + 40) = v57;
      v59 = URL.path.getter(v58);
      *(_QWORD *)(v53 + 96) = &type metadata for String;
      *(_QWORD *)(v53 + 104) = v58;
      *(_QWORD *)(v53 + 72) = v59;
      *(_QWORD *)(v53 + 80) = v60;
      *(_QWORD *)(v53 + 136) = &type metadata for Int32;
      *(_QWORD *)(v53 + 144) = &protocol witness table for Int32;
      v61 = v79;
      *(_DWORD *)(v53 + 112) = v78;

      v62 = v53;
    }
    else
    {
      v79 = static os_log_type_t.default.getter(v48);
      v63 = (void *)*sub_1000D2D14();
      v64 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v65 = swift_allocObject(v64, 112, 7);
      *(_OWORD *)(v65 + 16) = xmmword_10010F380;
      v66 = v63;
      v67 = URL.path.getter(v66);
      v69 = v68;
      *(_QWORD *)(v65 + 56) = &type metadata for String;
      v70 = sub_100026838();
      *(_QWORD *)(v65 + 64) = v70;
      *(_QWORD *)(v65 + 32) = v67;
      *(_QWORD *)(v65 + 40) = v69;
      v71 = URL.path.getter(v70);
      *(_QWORD *)(v65 + 96) = &type metadata for String;
      *(_QWORD *)(v65 + 104) = v70;
      *(_QWORD *)(v65 + 72) = v71;
      *(_QWORD *)(v65 + 80) = v72;

      v62 = v65;
    }
    swift_bridgeObjectRelease(v62);
    v73 = v24;
    v74 = *(void (**)(char *, char *))(v80 + 8);
    v75 = v84;
    v74(v73, v84);
    v74(v49, v75);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    sub_100005D08(v85);
  }
  return v20;
}

_QWORD *sub_100097274(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v54[16];
  uint64_t v55;
  unint64_t v56;

  v2 = type metadata accessor for CharacterSet(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v54[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v6);
  v8 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100096D4C(a1);
  if (v10 >> 60 == 15)
  {
    v11 = static os_log_type_t.default.getter(v9);
    v12 = (void *)*sub_1000D2D14();
    v13 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_10010F050;
    v15 = v12;
    v16 = URL.path.getter(v15);
    v18 = v17;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_100026838();
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v18;

    v19 = v14;
LABEL_3:
    swift_bridgeObjectRelease(v19);
    return _swiftEmptyArrayStorage;
  }
  v20 = v9;
  v21 = v10;
  v55 = v9;
  v56 = v10;
  static String.Encoding.utf8.getter(v9);
  v22 = sub_10009765C();
  v23 = String.init<A>(bytes:encoding:)(&v55, v8, &type metadata for Data, v22);
  if (!v24)
  {
    v45 = static os_log_type_t.error.getter(v23);
    v46 = (void *)*sub_1000D2D14();
    v47 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v48 = swift_allocObject(v47, 72, 7);
    *(_OWORD *)(v48 + 16) = xmmword_10010F050;
    v49 = v46;
    v50 = URL.path.getter(v49);
    v52 = v51;
    *(_QWORD *)(v48 + 56) = &type metadata for String;
    *(_QWORD *)(v48 + 64) = sub_100026838();
    *(_QWORD *)(v48 + 32) = v50;
    *(_QWORD *)(v48 + 40) = v52;

    swift_bridgeObjectRelease(v48);
    sub_100021610(v20, v21);
    return _swiftEmptyArrayStorage;
  }
  v25 = v24;
  v55 = v23;
  v56 = v24;
  static CharacterSet.whitespacesAndNewlines.getter();
  v26 = sub_100026250();
  v27 = StringProtocol.trimmingCharacters(in:)(v5, &type metadata for String, v26);
  v29 = v28;
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  v30 = swift_bridgeObjectRelease(v25);
  v55 = 32;
  v56 = 0xE100000000000000;
  __chkstk_darwin(v30);
  *(_QWORD *)&v54[-16] = &v55;
  swift_bridgeObjectRetain(v29);
  v31 = sub_100029078(0x7FFFFFFFFFFFFFFFLL, 1, sub_10002BD14, (uint64_t)&v54[-32], v27, v29);
  swift_bridgeObjectRelease(v29);
  v32 = *((_QWORD *)v31 + 2);
  if (!v32)
  {
    sub_100021610(v20, v21);
    v19 = (uint64_t)v31;
    goto LABEL_3;
  }
  v55 = (uint64_t)_swiftEmptyArrayStorage;
  sub_10000C958(0, v32, 0);
  v33 = v55;
  v34 = v31 + 56;
  do
  {
    v35 = *(v34 - 3);
    v36 = *(v34 - 2);
    v37 = *(v34 - 1);
    v38 = *v34;
    swift_bridgeObjectRetain(*v34);
    v39 = static String._fromSubstring(_:)(v35, v36, v37, v38);
    v41 = v40;
    swift_bridgeObjectRelease(v38);
    v55 = v33;
    v43 = *(_QWORD *)(v33 + 16);
    v42 = *(_QWORD *)(v33 + 24);
    if (v43 >= v42 >> 1)
    {
      sub_10000C958(v42 > 1, v43 + 1, 1);
      v33 = v55;
    }
    *(_QWORD *)(v33 + 16) = v43 + 1;
    v44 = v33 + 16 * v43;
    *(_QWORD *)(v44 + 32) = v39;
    *(_QWORD *)(v44 + 40) = v41;
    v34 += 4;
    --v32;
  }
  while (v32);
  sub_100021610(v20, v21);
  swift_bridgeObjectRelease(v31);
  return (_QWORD *)v33;
}

unint64_t sub_10009765C()
{
  unint64_t result;

  result = qword_10015AB30;
  if (!qword_10015AB30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10015AB30);
  }
  return result;
}

uint64_t sub_1000976A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005C88((uint64_t *)&unk_10015BA60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000976E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 24, 7);
  sub_100097714();
  return v1;
}

uint64_t sub_100097714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _UNKNOWN **v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];

  v1 = v0;
  *(_QWORD *)(v0 + 16) = sub_100099C18((uint64_t)_swiftEmptyArrayStorage);
  v39[3] = type metadata accessor for DriverKitDaemonSideEffects();
  v39[4] = &off_10014B428;
  v39[0] = v0;
  v2 = type metadata accessor for RealBundleResolver();
  swift_retain(v0);
  v36 = sub_1000052C0();
  sub_10009C128((uint64_t)v39, v2, (uint64_t)&off_10014B5A0);
  swift_release(v36);
  v3 = objc_allocWithZone((Class)NSFileManager);
  v4 = objc_msgSend(v3, "init", v36, v39[0]);
  v5 = sub_100005D68(0, &qword_10015AB40, NSFileManager_ptr);
  sub_100107238((uint64_t)v39, v5, (uint64_t)&off_100150950);

  v6 = type metadata accessor for RealKernelClient();
  sub_100071174();
  v8 = v7;
  sub_10007161C((uint64_t)v39, v6, (uint64_t)&off_1001488A0);
  swift_release(v8);
  v9 = type metadata accessor for RealDaemonLauncher();
  v10 = sub_1000052C0();
  sub_10006A1D8((uint64_t)v39, v9, (uint64_t)&off_100148438);
  swift_release(v10);
  type metadata accessor for RealCodeSigningResolver();
  sub_1000DE9B0();
  v12 = v11;
  sub_1000DEAC8((uint64_t)v39);
  swift_release(v12);
  type metadata accessor for NullSystemPolicyClient();
  v13 = sub_10007A1B4();
  sub_10007A358((uint64_t)v39);
  swift_release(v13);
  v14 = type metadata accessor for EmbeddedSIPStatus();
  v15 = sub_1000052C0();
  sub_100026988((uint64_t)v39, v14, (uint64_t)&off_100146918);
  swift_release(v15);
  v16 = type metadata accessor for RealDistNote();
  v17 = sub_1000052C0();
  sub_10006AA48((uint64_t)v39, v16, (uint64_t)&off_100148498);
  swift_release(v17);
  type metadata accessor for MinimalDeveloperKitClient();
  sub_10010AECC();
  v19 = v18;
  sub_10010A974((uint64_t)v39);
  swift_release(v19);
  v20 = type metadata accessor for RealApprovalsXPCPublisher();
  v21 = sub_10010B07C();
  sub_10010AED4((uint64_t)v39, v20, (uint64_t)&off_100150FC8);
  swift_release(v21);
  v22 = type metadata accessor for RealDeviceProperties();
  v23 = sub_1000052C0();
  sub_100104E00((uint64_t)v39, v22, (uint64_t)&off_1001508F8);
  swift_release(v23);
  v24 = type metadata accessor for RealCoreAnalyticsClient();
  v37 = sub_1000052C0();
  sub_100005470((uint64_t)v39, v24, (uint64_t)&off_100145CD8);
  swift_release(v37);
  if ((sub_1000D7F90() & 1) != 0)
  {
    v25 = type metadata accessor for RestoreOSFeatureFlagsClient();
    v26 = sub_1000052C0();
    sub_10003A868((uint64_t)v39, v25, (uint64_t)&off_100147250);
    swift_release(v26);
    v27 = type metadata accessor for NullRunningBoardSupport();
    v28 = sub_1000052C0();
    sub_100013318((uint64_t)v39, v27, (uint64_t)&off_100145F88);
    swift_release(v28);
    v29 = type metadata accessor for NullLaunchServices();
    v30 = sub_1000052C0();
    v31 = &off_1001471F8;
  }
  else
  {
    v32 = type metadata accessor for RealFeatureFlagsClient();
    v38 = sub_1000052C0();
    sub_10003A868((uint64_t)v39, v32, (uint64_t)&off_100147228);
    swift_release(v38);
    v33 = objc_msgSend(objc_allocWithZone((Class)RunningBoardSupport), "init", v38);
    v34 = sub_100005D68(0, &qword_10015AB48, &off_100145478);
    sub_100013318((uint64_t)v39, v34, (uint64_t)&off_100145F68);

    v29 = type metadata accessor for RealLaunchServices();
    v30 = sub_1000052C0();
    v31 = &off_100147210;
  }
  sub_10003A35C((uint64_t)v39, v29, (uint64_t)v31);
  swift_release(v30);
  sub_100005D08(v39);
  return v1;
}

uint64_t sub_100097B90()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_100097BB4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

void (*sub_100097BDC(_QWORD *a1))(_QWORD *)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 104))();
  return sub_1000128F0;
}

uint64_t sub_100097C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000D4E08(a1, a3, a2, a4, a5);
}

uint64_t sub_100097C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000D501C(a1, a2, a4, a3, a5);
}

void (*sub_100097C4C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD *)
{
  _QWORD *v10;

  v10 = malloc(0x28uLL);
  *a1 = v10;
  v10[4] = sub_1000D5058(v10, a2, a4, a3, a5);
  return sub_1000128F0;
}

uint64_t sub_100097CC0()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 80) + 56));
}

uint64_t sub_100097CCC()
{
  sub_100005D68(0, (unint64_t *)&qword_100159CE0, OS_dispatch_queue_ptr);
  return static OS_dispatch_queue.main.getter();
}

uint64_t *sub_100097D04(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;

  swift_allocObject(v3, 128, 7);
  v7 = sub_100099D38(a1, a2, a3);

  return v7;
}

unint64_t sub_100097D60()
{
  return 0xD000000000000014;
}

uint64_t sub_100097D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  _BYTE v9[24];
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = os_transaction_create("com.apple.driverkitd.kernel-requests");
  v10 = sub_10006B73C();
  v3 = (_QWORD *)(v0 + 16);
  swift_beginAccess(v3, v9, 32, 0);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  sub_100004DE4(v3, v4);
  sub_100071700(v4, v5);
  swift_endAccess(v9);
  sub_10006AFEC(v8, (uint64_t)&type metadata for KernelRequests.GetRequests, (uint64_t)&off_100159898, (uint64_t)&v11);
  sub_100005D08(v8);
  swift_bridgeObjectRelease(v10);
  v6 = v11;
  sub_100097F54(v11, v2);
  swift_bridgeObjectRelease(v6);
  return swift_unknownObjectRelease(v2);
}

uint64_t sub_100097F54(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ValueMetadata *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  Swift::String v72;
  __int128 v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v91;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  ValueMetadata *v107;
  _UNKNOWN **v108;
  __int128 aBlock;
  uint64_t (*v110)(uint64_t);
  void *v111;
  uint64_t (*v112)();
  _QWORD *v113;
  _QWORD v114[2];
  __int128 v115;
  uint64_t v116;
  uint64_t v117;

  v94 = a2;
  v101 = *v2;
  v100 = type metadata accessor for DispatchWorkItemFlags(0);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v98 = (uint64_t *)((char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v97 = type metadata accessor for DispatchQoS(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v95 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v106 = _swiftEmptyArrayStorage;
  v6 = "LaunchRequestish";
  *(_QWORD *)&v105 = *(_QWORD *)(a1 + 16);
  if ((_QWORD)v105)
  {
    swift_bridgeObjectRetain(a1);
    v7 = 0;
    v104 = xmmword_10010F380;
    *(_QWORD *)&v103 = (char *)&type metadata for Any + 8;
    do
    {
      v8 = *(_QWORD *)(a1 + 8 * v7 + 32);
      swift_bridgeObjectRetain(v8);
      sub_10006B2F0(v9, &v115);
      swift_bridgeObjectRelease(v8);
      if (v116)
      {
        sub_100004E2C(&v115, (uint64_t)&aBlock);
        sub_100004E2C(&aBlock, (uint64_t)&v115);
        v10 = (_QWORD *)v106;
        if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0)
        {
          v10 = sub_100099A5C(0, v10[2] + 1, 1, v10, &qword_10015ADB8, (uint64_t *)&unk_10015AB60);
          *(_QWORD *)&v106 = v10;
        }
        v12 = v10[2];
        v11 = v10[3];
        if (v12 >= v11 >> 1)
          *(_QWORD *)&v106 = sub_100099A5C((_QWORD *)(v11 > 1), v12 + 1, 1, v10, &qword_10015ADB8, (uint64_t *)&unk_10015AB60);
        v13 = v116;
        v14 = v117;
        v15 = sub_100005C1C((uint64_t)&v115, v116);
        __chkstk_darwin(v15);
        v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v18 + 16))(v17);
        sub_100099B94(v12, (uint64_t)v17, (uint64_t *)&v106, v13, v14, (uint64_t (*)(_QWORD *, uint64_t))sub_100004E2C);
        sub_100005D08(&v115);
        v6 = "LaunchRequestish";
      }
      else
      {
        sub_1000124F8((uint64_t)&v115, &qword_10015AB58);
        v6 = "LaunchRequestish";
      }
      ++v7;
    }
    while ((_QWORD)v105 != v7);
    swift_bridgeObjectRelease(a1);
    v19 = (_QWORD *)v106;
  }
  else
  {
    v19 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)&v104 = swift_allocObject(&unk_10014B3C0, 24, 7);
  *(_QWORD *)(v104 + 16) = _swiftEmptyArrayStorage;
  v20 = v19[2];
  v21 = v102;
  if (!v20)
  {
    v77 = v19;
    goto LABEL_45;
  }
  v93 = v19;
  v22 = (uint64_t)(v19 + 4);
  v105 = *((_OWORD *)v6 + 56);
  v103 = xmmword_10010F050;
  v92 = (void *)0x8000000100127F80;
  do
  {
    sub_100005C44(v22, (uint64_t)&aBlock);
    sub_100005C44((uint64_t)&aBlock, (uint64_t)&v115);
    v24 = sub_100005C88((uint64_t *)&unk_10015AB60);
    if (swift_dynamicCast(&v106, &v115, v24, &type metadata for KernelRequests.DextLaunch, 0))
    {
      v25 = v106;
      v26 = sub_100098E9C(v106);
      v28 = v27;
      v114[0] = v21;
      sub_1000A2468(v25, v26, v27, v101, (uint64_t)&off_10014B470);
      swift_bridgeObjectRelease(v28);
      sub_100005D08(&aBlock);
      swift_bridgeObjectRelease(v25);
      sub_100005D08(&v115);
    }
    else
    {
      if (swift_dynamicCast(v114, &v115, v24, &type metadata for KernelRequests.RequestExit, 0))
      {
        v42 = v114[0];
        v43 = v104;
        v44 = *(_QWORD **)(v104 + 16);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
        *(_QWORD *)(v43 + 16) = v44;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v44 = sub_100099A5C(0, v44[2] + 1, 1, v44, &qword_10015ADB8, (uint64_t *)&unk_10015AB60);
          *(_QWORD *)(v104 + 16) = v44;
        }
        v47 = v44[2];
        v46 = v44[3];
        v48 = v47 + 1;
        if (v47 >= v46 >> 1)
        {
          v44 = sub_100099A5C((_QWORD *)(v46 > 1), v47 + 1, 1, v44, &qword_10015ADB8, (uint64_t *)&unk_10015AB60);
          *(_QWORD *)(v104 + 16) = v44;
        }
        v108 = &off_1001487A0;
        v23 = &type metadata for KernelRequests.RequestExit;
        goto LABEL_16;
      }
      if (swift_dynamicCast(&v106, &v115, v24, &type metadata for KernelRequests.LoadNotification, 0))
      {
        v49 = v106;
        v114[0] = v106;
        v50 = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.LoadNotification, (uint64_t)&off_100148720);
        if (v51)
        {
          v53 = v50;
          v54 = v51;
          v55 = sub_100080924();
          v56 = *v55;
          v57 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)*v55 + 104);
          swift_retain(*v55);
          v57(v53, v54);
          swift_bridgeObjectRelease(v54);
          swift_release(v56);
        }
        v58 = static os_log_type_t.debug.getter(v52);
        v59 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v60 = swift_allocObject(v59, 72, 7);
        *(_OWORD *)(v60 + 16) = v103;
        v114[0] = v49;
        v61 = String.init<A>(describing:)(v114, &type metadata for KernelRequests.LoadNotification);
        v63 = v62;
        *(_QWORD *)(v60 + 56) = &type metadata for String;
        *(_QWORD *)(v60 + 64) = sub_100026838();
        *(_QWORD *)(v60 + 32) = v61;
        *(_QWORD *)(v60 + 40) = v63;
        v64 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
        v65 = (void *)static OS_os_log.default.getter(v64);
        os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, v65, "Ignoring load notification: %{public}s", 38, 2, v60);
        swift_bridgeObjectRelease(v60);

        goto LABEL_17;
      }
      if (swift_dynamicCast(v114, &v115, v24, &type metadata for KernelRequests.UnloadNotification, 0))
      {
        v42 = v114[0];
        v66 = v104;
        v44 = *(_QWORD **)(v104 + 16);
        v67 = swift_isUniquelyReferenced_nonNull_native(v44);
        *(_QWORD *)(v66 + 16) = v44;
        if ((v67 & 1) == 0)
        {
          v44 = sub_100099A5C(0, v44[2] + 1, 1, v44, &qword_10015ADB8, (uint64_t *)&unk_10015AB60);
          *(_QWORD *)(v104 + 16) = v44;
        }
        v47 = v44[2];
        v68 = v44[3];
        v48 = v47 + 1;
        if (v47 >= v68 >> 1)
        {
          v44 = sub_100099A5C((_QWORD *)(v68 > 1), v47 + 1, 1, v44, &qword_10015ADB8, (uint64_t *)&unk_10015AB60);
          *(_QWORD *)(v104 + 16) = v44;
        }
        v108 = &off_100148750;
        v23 = &type metadata for KernelRequests.UnloadNotification;
LABEL_16:
        v107 = v23;
        *(_QWORD *)&v106 = v42;
        v44[2] = v48;
        sub_100004E2C(&v106, (uint64_t)&v44[5 * v47 + 4]);
LABEL_17:
        sub_100005D08(&aBlock);
        sub_100005D08(&v115);
        goto LABEL_18;
      }
      if (swift_dynamicCast(v114, &v115, v24, &type metadata for KernelRequests.DextUpdateNotification, 0))
      {
        v42 = v114[0];
        v69 = v104;
        v44 = *(_QWORD **)(v104 + 16);
        v70 = swift_isUniquelyReferenced_nonNull_native(v44);
        *(_QWORD *)(v69 + 16) = v44;
        if ((v70 & 1) == 0)
        {
          v44 = sub_100099A5C(0, v44[2] + 1, 1, v44, &qword_10015ADB8, (uint64_t *)&unk_10015AB60);
          *(_QWORD *)(v104 + 16) = v44;
        }
        v47 = v44[2];
        v71 = v44[3];
        v48 = v47 + 1;
        if (v47 >= v71 >> 1)
        {
          v44 = sub_100099A5C((_QWORD *)(v71 > 1), v47 + 1, 1, v44, &qword_10015ADB8, (uint64_t *)&unk_10015AB60);
          *(_QWORD *)(v104 + 16) = v44;
        }
        v108 = &off_100148850;
        v23 = &type metadata for KernelRequests.DextUpdateNotification;
        goto LABEL_16;
      }
      *(_QWORD *)&v106 = 0;
      *((_QWORD *)&v106 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      v72._countAndFlagsBits = 0xD000000000000013;
      v72._object = v92;
      String.append(_:)(v72);
      _print_unlocked<A, B>(_:_:)(&aBlock, &v106, v24, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v73 = v106;
      v74 = sub_1000122F8();
      v75 = swift_allocError(&type metadata for KMError, v74, 0, 0);
      *(_OWORD *)v76 = v73;
      *(_OWORD *)(v76 + 16) = 0u;
      *(_OWORD *)(v76 + 32) = 0u;
      *(_OWORD *)(v76 + 48) = 0u;
      *(_QWORD *)(v76 + 64) = 0;
      *(_BYTE *)(v76 + 72) = 9;
      swift_willThrow(v75);
      v29 = sub_100005D08(&v115);
      v30 = static os_log_type_t.error.getter(v29);
      v31 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v32 = swift_allocObject(v31, 112, 7);
      *(_OWORD *)(v32 + 16) = v105;
      sub_100005C44((uint64_t)&aBlock, (uint64_t)&v115);
      v33 = String.init<A>(describing:)(&v115, v24);
      v35 = v34;
      *(_QWORD *)(v32 + 56) = &type metadata for String;
      v36 = sub_100026838();
      *(_QWORD *)(v32 + 64) = v36;
      *(_QWORD *)(v32 + 32) = v33;
      *(_QWORD *)(v32 + 40) = v35;
      *(_QWORD *)&v115 = v75;
      swift_errorRetain(v75);
      v37 = sub_100005C88(&qword_10015AB50);
      v38 = String.init<A>(describing:)(&v115, v37);
      *(_QWORD *)(v32 + 96) = &type metadata for String;
      *(_QWORD *)(v32 + 104) = v36;
      *(_QWORD *)(v32 + 72) = v38;
      *(_QWORD *)(v32 + 80) = v39;
      v40 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
      v41 = (void *)static OS_os_log.default.getter(v40);
      os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v41, "Error occurred while handling request \"%{public}s\": %{public}s", 62, 2, v32);
      swift_bridgeObjectRelease(v32);

      swift_errorRelease(v75);
      sub_100005D08(&aBlock);
      v21 = v102;
    }
LABEL_18:
    v22 += 40;
    --v20;
  }
  while (v20);
  v77 = v93;
LABEL_45:
  swift_bridgeObjectRelease(v77);
  v78 = (_QWORD *)swift_allocObject(&unk_10014B3E8, 40, 7);
  v79 = v94;
  v80 = v104;
  v78[2] = v94;
  v78[3] = v80;
  v78[4] = v21;
  v112 = sub_10009A630;
  v113 = v78;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v110 = sub_10000B424;
  v111 = &unk_10014B400;
  v81 = _Block_copy(&aBlock);
  swift_unknownObjectRetain(v79);
  swift_retain(v80);
  v82 = swift_retain(v21);
  v83 = v95;
  static DispatchQoS.unspecified.getter(v82);
  *(_QWORD *)&v115 = _swiftEmptyArrayStorage;
  v84 = sub_100012534((unint64_t *)&qword_10015ABD0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v85 = sub_100005C88((uint64_t *)&unk_100159EB0);
  v86 = sub_100081F98();
  v87 = v98;
  v88 = v100;
  dispatch thunk of SetAlgebra.init<A>(_:)(v98, &v115, v85, v86, v100, v84);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v83, v87, v81);
  _Block_release(v81);
  (*(void (**)(_QWORD *, uint64_t))(v99 + 8))(v87, v88);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v83, v97);
  v89 = v113;
  swift_release(v80);
  return swift_release(v89);
}

uint64_t sub_100098BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t *v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _QWORD v23[3];

  v4 = v3;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v23[-1] - v12;
  v23[0] = v4;
  (*(void (**)(_QWORD *))(v14 + 24))(v23);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15(v13, a1, a2);
  v16 = (uint64_t *)(v4 + 56);
  swift_beginAccess(v4 + 56, v23, 1, 0);
  v17 = *(_QWORD **)(v4 + 56);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
  *(_QWORD *)(v4 + 56) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = sub_100099A5C(0, v17[2] + 1, 1, v17, &qword_10015ADA8, &qword_10015ADB0);
    *v16 = (uint64_t)v17;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
    *v16 = (uint64_t)sub_100099A5C((_QWORD *)(v19 > 1), v20 + 1, 1, v17, &qword_10015ADA8, &qword_10015ADB0);
  v15(v11, (uint64_t)v13, a2);
  sub_100099B94(v20, (uint64_t)v11, v16, a2, *(_QWORD *)(a3 + 8), (uint64_t (*)(_QWORD *, uint64_t))sub_100004E2C);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, a2);
}

uint64_t sub_100098D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t);
  void (*v7)(char *, uint64_t, uint64_t);
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  swift_beginAccess(v0 + 56, v12, 0, 0);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
    do
    {
      sub_100005C44(v3, (uint64_t)v9);
      v4 = v10;
      v5 = v11;
      sub_100004DE4(v9, v10);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      sub_100005D08(v9);
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  v6 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for KernelStateManager();
  sub_1000CDD6C(0xD000000000000011, (char *)0x8000000100128010, v6, (uint64_t)&off_100145E78);
  v7 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ActivationStateManager();
  return sub_1000CDD6C(0xD000000000000014, (char *)0x8000000100128030, v7, (uint64_t)&off_10014B650);
}

uint64_t sub_100098E9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD v63[2];
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[3];
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[24];
  _QWORD v76[6];
  int64_t v77;

  v3 = v1;
  v5 = type metadata accessor for ApplicationRecord(0);
  __chkstk_darwin(v5);
  v64 = (_QWORD *)((char *)v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = type metadata accessor for DriverBinEntry(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v8 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005C88(&qword_100157EF8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v63 - v13;
  v76[0] = a1;
  v15 = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148630);
  if (!v16)
  {
    v58 = sub_1000122F8();
    v59 = swift_allocError(&type metadata for KMError, v58, 0, 0);
    *(_QWORD *)v60 = 0xD00000000000002FLL;
    *(_QWORD *)(v60 + 8) = 0x8000000100128050;
    *(_OWORD *)(v60 + 16) = 0u;
    *(_OWORD *)(v60 + 32) = 0u;
    *(_OWORD *)(v60 + 48) = 0u;
    *(_QWORD *)(v60 + 64) = 0;
    *(_BYTE *)(v60 + 72) = 9;
    swift_willThrow(v59);
    return a1;
  }
  v17 = v16;
  v63[1] = v2;
  v18 = v15;
  v19 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v20 = swift_allocObject(v19, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_10010F050;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = sub_100026838();
  v66 = v18;
  *(_QWORD *)(v20 + 32) = v18;
  *(_QWORD *)(v20 + 40) = v17;
  sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v70 = v17;
  swift_bridgeObjectRetain(v17);
  v22 = (void *)static OS_os_log.default.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  os_log(_:dso:log:type:_:)("Figuring out dext launch context: %{public}s", 44, 2, &_mh_execute_header, v22, v23, v20);
  swift_bridgeObjectRelease(v20);

  v24 = (*(uint64_t (**)(void))(**(_QWORD **)(v3 + 88) + 360))();
  v25 = *(_QWORD *)(v24 + 64);
  v65 = v24 + 64;
  v69 = v24;
  v26 = 1 << *(_BYTE *)(v24 + 32);
  result = swift_bridgeObjectRelease(v27);
  v77 = 0;
  v29 = -1;
  if (v26 < 64)
    v29 = ~(-1 << v26);
  v30 = v29 & v25;
  v31 = (_QWORD *)(v3 + 16);
  v67 = (unint64_t)(v26 + 63) >> 6;
  v63[0] = v67 - 1;
  while (1)
  {
    if (v30)
    {
      v34 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      v35 = v34 | (v77 << 6);
LABEL_9:
      v36 = v69;
      v37 = *(_QWORD *)(v69 + 48);
      v38 = type metadata accessor for UUID(0);
      (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v12, v37 + *(_QWORD *)(*(_QWORD *)(v38 - 8) + 72) * v35, v38);
      v39 = *(_QWORD *)(v36 + 56) + *(_QWORD *)(v68 + 72) * v35;
      v40 = sub_100005C88((uint64_t *)&unk_10015ABF0);
      sub_100012408(v39, (uint64_t)&v12[*(int *)(v40 + 48)], type metadata accessor for DriverBinEntry);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v12, 0, 1, v40);
      goto LABEL_28;
    }
    v41 = v77 + 1;
    if (__OFADD__(v77, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v41 < v67)
    {
      v42 = *(_QWORD *)(v65 + 8 * v41);
      if (v42)
        goto LABEL_13;
      v43 = v77 + 2;
      ++v77;
      if (v41 + 1 < v67)
      {
        v42 = *(_QWORD *)(v65 + 8 * v43);
        if (v42)
          goto LABEL_16;
        v77 = v41 + 1;
        if (v41 + 2 < v67)
        {
          v42 = *(_QWORD *)(v65 + 8 * (v41 + 2));
          if (v42)
          {
            v41 += 2;
            goto LABEL_13;
          }
          v43 = v41 + 3;
          v77 = v41 + 2;
          if (v41 + 3 < v67)
            break;
        }
      }
    }
LABEL_27:
    v44 = sub_100005C88((uint64_t *)&unk_10015ABF0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v12, 1, 1, v44);
    v30 = 0;
LABEL_28:
    sub_1000260AC((uint64_t)v12, (uint64_t)v14, &qword_100157EF8);
    v45 = sub_100005C88((uint64_t *)&unk_10015ABF0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v14, 1, v45) == 1)
    {
      swift_bridgeObjectRelease(v70);
      swift_release(v69);
      return 0;
    }
    sub_1000965EC((uint64_t)&v14[*(int *)(v45 + 48)], (uint64_t)v8);
    swift_beginAccess(v31, v75, 32, 0);
    v46 = *(_QWORD *)(v3 + 40);
    v47 = *(_QWORD *)(v3 + 48);
    v48 = v3;
    sub_100004DE4(v31, v46);
    sub_10009C20C(v46, v47);
    swift_endAccess(v75);
    v49 = v73;
    v50 = v74;
    sub_100004DE4(v72, v73);
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t, uint64_t))(v50 + 24))(v76, &v8[*(int *)(v71 + 28)], v49, v50);
    sub_100005D08(v72);
    sub_100019E1C((uint64_t)v76, (uint64_t)v72, &qword_100157C78);
    v51 = v73;
    if (!v73)
    {
      sub_1000124F8((uint64_t)v72, &qword_100157C78);
LABEL_35:
      v57 = v70;
      swift_bridgeObjectRetain(v70);
      sub_1000124F8((uint64_t)v76, &qword_100157C78);
      swift_bridgeObjectRelease(v57);
      swift_bridgeObjectRelease(0);
      v3 = v48;
      goto LABEL_6;
    }
    v52 = v74;
    sub_100004DE4(v72, v73);
    v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 24))(v51, v52);
    v55 = v54;
    sub_100005D08(v72);
    if (!v55)
      goto LABEL_35;
    v3 = v48;
    v56 = v70;
    if (v53 == v66 && v55 == v70)
    {
      sub_1000124F8((uint64_t)v76, &qword_100157C78);
      swift_bridgeObjectRelease(v56);
      swift_release(v69);
      swift_bridgeObjectRelease(v55);
LABEL_39:
      v61 = v64;
      sub_100012408((uint64_t)&v8[*(int *)(v71 + 20)], (uint64_t)v64, type metadata accessor for ApplicationRecord);
      sub_100012490((uint64_t)v8, type metadata accessor for DriverBinEntry);
      a1 = *v61;
      swift_bridgeObjectRetain(v61[1]);
      sub_100012490((uint64_t)v61, type metadata accessor for ApplicationRecord);
      v62 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v14, v62);
      return a1;
    }
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, v66, v70, 0);
    sub_1000124F8((uint64_t)v76, &qword_100157C78);
    swift_bridgeObjectRelease(v55);
    if ((v32 & 1) != 0)
    {
      swift_bridgeObjectRelease(v70);
      swift_release(v69);
      goto LABEL_39;
    }
LABEL_6:
    sub_100012490((uint64_t)v8, type metadata accessor for DriverBinEntry);
    v33 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v14, v33);
  }
  v42 = *(_QWORD *)(v65 + 8 * v43);
  if (v42)
  {
LABEL_16:
    v41 = v43;
LABEL_13:
    v30 = (v42 - 1) & v42;
    v35 = __clz(__rbit64(v42)) + (v41 << 6);
    v77 = v41;
    goto LABEL_9;
  }
  while (1)
  {
    v41 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v41 >= v67)
    {
      v77 = v63[0];
      goto LABEL_27;
    }
    v42 = *(_QWORD *)(v65 + 8 * v41);
    ++v43;
    if (v42)
      goto LABEL_13;
  }
LABEL_42:
  __break(1u);
  return result;
}

unint64_t sub_1000995E4()
{
  _QWORD **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  void *v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  void *v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  void *v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  void *v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;
  void *v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  void *v36;
  Swift::String v38;
  unint64_t v39;
  unint64_t v40;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = 0xD00000000000001ELL;
  v40 = 0x80000001001280B0;
  static Date.now.getter(v3);
  v6 = sub_100012534((unint64_t *)&qword_10015AC00, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v9._countAndFlagsBits = 10;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v38._countAndFlagsBits = (*(uint64_t (**)(void))(*v0[9] + 304))();
  v38._object = v10;
  v11._countAndFlagsBits = 10;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12 = v38._object;
  String.append(_:)(v38);
  v13 = swift_bridgeObjectRelease(v12);
  v38._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[11] + 384))(v13);
  v38._object = v14;
  v15._countAndFlagsBits = 10;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16 = v38._object;
  String.append(_:)(v38);
  v17 = swift_bridgeObjectRelease(v16);
  v38._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[12] + 360))(v17);
  v38._object = v18;
  v19._countAndFlagsBits = 10;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20 = v38._object;
  String.append(_:)(v38);
  v21 = swift_bridgeObjectRelease(v20);
  v38._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[10] + 424))(v21);
  v38._object = v22;
  v23._countAndFlagsBits = 10;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = v38._object;
  String.append(_:)(v38);
  v25 = swift_bridgeObjectRelease(v24);
  v38._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[13] + 352))(v25);
  v38._object = v26;
  v27._countAndFlagsBits = 10;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28 = v38._object;
  String.append(_:)(v38);
  v29 = swift_bridgeObjectRelease(v28);
  v38._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[14] + 200))(v29);
  v38._object = v30;
  v31._countAndFlagsBits = 10;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32 = v38._object;
  String.append(_:)(v38);
  v33 = swift_bridgeObjectRelease(v32);
  v38._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*v0[15] + 192))(v33);
  v38._object = v34;
  v35._countAndFlagsBits = 10;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  v36 = v38._object;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v36);
  return v39;
}

uint64_t sub_100099884()
{
  uint64_t v0;

  sub_100005D08((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));
  return v0;
}

uint64_t sub_1000998E8()
{
  uint64_t v0;

  sub_100099884();
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t sub_100099908()
{
  return sub_100097D7C();
}

uint64_t sub_100099928@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = *v1 + 16;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100005C44(v3, a1);
}

uint64_t sub_100099974()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) + 56));
}

id sub_100099984()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)v0 + 64);
}

unint64_t sub_100099990(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1000999C0(a1, v3);
}

unint64_t sub_1000999C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

_QWORD *sub_100099A5C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100005C88(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  if ((v8 & 1) != 0)
  {
    if (v14 != a4 || v14 + 4 >= &a4[5 * v11 + 4])
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
  }
  else
  {
    sub_100005C88(a6);
    swift_arrayInitWithCopy(v14 + 4);
  }
  swift_bridgeObjectRelease(a4);
  return v14;
}

uint64_t sub_100099B94(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD *, uint64_t))
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[5];

  v14[3] = a4;
  v14[4] = a5;
  v11 = sub_100005BE0(v14);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v11, a2, a4);
  v12 = *a3;
  *(_QWORD *)(v12 + 16) = a1 + 1;
  return a6(v14, v12 + 40 * a1 + 32);
}

unint64_t sub_100099C18(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005C88((uint64_t *)&unk_10015BB50);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = a1 + 32; ; i += 40)
    {
      sub_100019E1C(i, (uint64_t)&v11, (uint64_t *)&unk_10015ADD0);
      v5 = v11;
      result = sub_100099990(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = (unint64_t)sub_100017464(&v12, (_OWORD *)(v3[7] + 32 * result));
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t type metadata accessor for DriverKitDaemonSideEffects()
{
  return objc_opt_self(_TtC10driverkitd26DriverKitDaemonSideEffects);
}

uint64_t *sub_100099D38(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  _QWORD *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  void (*v43)(__int128 *);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t);
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  _UNKNOWN **v131;
  _OWORD v132[2];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;

  v4 = v3;
  v8 = *v4;
  v9 = type metadata accessor for URL(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[7] = (uint64_t)_swiftEmptyArrayStorage;
  sub_100005C44(a1, (uint64_t)(v4 + 2));
  v4[8] = (uint64_t)a2;
  sub_1000260AC(a3, (uint64_t)v132, (uint64_t *)&unk_10015ADC0);
  v12 = sub_10009ACBC((uint64_t)v132);
  v125 = (_QWORD *)a1;
  v126 = v8;
  if ((_DWORD)v12 == 1)
  {
    __chkstk_darwin(v12);
    v13 = a2;
    sub_1000BC904((uint64_t)"/Library/Caches/com.apple.xbs/Sources/KernelManagement_executables/driverkitd/DriverKitDaemon.swift", 99, 2, 66, a1, 0xD00000000000001BLL, 0x8000000100128390, (void (*)(__n128))sub_10009ACD4);
    v119 = v158;
    v120 = v157;
    v117 = v160;
    v118 = v159;
    v115 = v162;
    v116 = v161;
    v113 = v164;
    v114 = v163;
    v111 = v166;
    v112 = v165;
    v109 = v169;
    v110 = v168;
    v107 = v170;
    v108 = v167;
    v105 = v172;
    v106 = v171;
    v103 = v174;
    v104 = v173;
    v101 = v176;
    v102 = v175;
    v14 = v177;
    v15 = v178;
    v127 = v179;
    v16 = v180;
    v17 = v181;
    v128 = v182;
    if (v178)
      goto LABEL_3;
LABEL_6:
    v18 = v14;
    v22 = (uint64_t *)sub_1000DF608();
    v23 = *v22;
    v121 = v22[1];
    v122 = v23;
    swift_bridgeObjectRetain(v121);
    v19 = v15;
    if (v16)
      goto LABEL_4;
    goto LABEL_7;
  }
  v119 = v132[1];
  v120 = v132[0];
  v117 = v134;
  v118 = v133;
  v115 = v136;
  v116 = v135;
  v113 = v138;
  v114 = v137;
  v111 = v140;
  v112 = v139;
  v109 = v143;
  v110 = v142;
  v107 = v144;
  v108 = v141;
  v105 = v146;
  v106 = v145;
  v103 = v148;
  v104 = v147;
  v14 = v151;
  v101 = v150;
  v102 = v149;
  v15 = v152;
  v127 = v153;
  v16 = v154;
  v20 = v155;
  v128 = v156;
  v21 = a2;
  v17 = v20;
  if (!v15)
    goto LABEL_6;
LABEL_3:
  v18 = v14;
  v121 = v15;
  v122 = v14;
  v19 = v15;
  if (v16)
  {
LABEL_4:
    v123 = v16;
    v124 = v127;
    goto LABEL_8;
  }
LABEL_7:
  swift_bridgeObjectRetain(v19);
  v24 = (uint64_t *)sub_1000DF614();
  v25 = *v24;
  v19 = v24[1];
  v123 = v19;
  v124 = v25;
LABEL_8:
  swift_bridgeObjectRetain(v19);
  v26 = v16;
  v27 = v128;
  if ((_QWORD)v128)
  {
    v28 = v17;
    v29 = v128;
  }
  else
  {
    swift_bridgeObjectRetain(v16);
    v30 = (uint64_t *)sub_1000DF620();
    v28 = *v30;
    v26 = v30[1];
    v29 = v26;
  }
  swift_bridgeObjectRetain(v26);
  v157 = v120;
  v158 = v119;
  v159 = v118;
  v160 = v117;
  v161 = v116;
  v162 = v115;
  v163 = v114;
  v164 = v113;
  v165 = v112;
  v166 = v111;
  v168 = v110;
  v169 = v109;
  v167 = v108;
  v170 = v107;
  v171 = v106;
  v172 = v105;
  v173 = v104;
  v174 = v103;
  v175 = v102;
  v176 = v101;
  v177 = v18;
  v178 = v15;
  v179 = v127;
  v180 = v16;
  v181 = v17;
  v182 = v128;
  type metadata accessor for ActivationStateManager();
  v31 = (void *)v4[8];
  v32 = v125;
  sub_100005C44((uint64_t)v125, (uint64_t)&v129);
  swift_bridgeObjectRetain(v27);
  v33 = v31;
  v4[15] = sub_1000A1760((uint64_t)v33, &v129);
  type metadata accessor for ApplicationManager();
  v34 = v33;
  URL.init(fileURLWithPath:)(v28, v29);
  swift_bridgeObjectRelease(v29);
  sub_100005C44((uint64_t)v32, (uint64_t)&v129);
  v4[9] = sub_10001C418((uint64_t)v34, (uint64_t)v11, &v129);
  type metadata accessor for KernelStateManager();
  sub_100005C44((uint64_t)v32, (uint64_t)&v129);
  v35 = (id)v4[8];
  v4[10] = sub_100006A18(&v157, &v129, v35);
  type metadata accessor for DriverBinManager(0);
  v36 = v35;
  v37 = v121;
  URL.init(fileURLWithPath:)(v122, v121);
  swift_bridgeObjectRelease(v37);
  sub_100005C44((uint64_t)v32, (uint64_t)&v129);
  v4[11] = sub_1000408D8((uint64_t)v36, (uint64_t)v11, &v129);
  type metadata accessor for ApprovalManager(0);
  v38 = (id)v4[8];
  v39 = v123;
  URL.init(fileURLWithPath:)(v124, v123);
  swift_bridgeObjectRelease(v39);
  sub_100005C44((uint64_t)v32, (uint64_t)&v129);
  v4[12] = sub_100092AD0((uint64_t)v38, (uint64_t)v11, &v129);
  type metadata accessor for ApprovalSettingsStateManager();
  v40 = (void *)v4[8];
  sub_100005C44((uint64_t)v32, (uint64_t)&v129);
  v41 = v40;
  v4[13] = sub_1000FDC04(v41, &v129);
  type metadata accessor for ActiveDriversStateManager();
  sub_100005C44((uint64_t)v32, (uint64_t)&v129);
  v4[14] = (uint64_t)sub_100022B18((uint64_t)v41, &v129);
  v42 = v4[10];
  v130 = v126;
  v131 = &off_10014B488;
  *(_QWORD *)&v129 = v4;
  v43 = *(void (**)(__int128 *))(*(_QWORD *)v42 + 400);
  swift_retain(v4);
  v43(&v129);
  sub_100005D08(&v129);
  v44 = v4[9];
  v45 = v4[15];
  v46 = *(void (**)(uint64_t))(*(_QWORD *)v44 + 288);
  swift_retain(v44);
  v47 = swift_retain(v45);
  v46(v47);
  swift_release(v44);
  swift_release(v45);
  v48 = v4[11];
  v49 = v4[9];
  v50 = *(void (**)(uint64_t))(*(_QWORD *)v48 + 264);
  swift_retain(v48);
  v51 = swift_retain(v49);
  v50(v51);
  swift_release(v48);
  swift_release(v49);
  v52 = v4[11];
  v53 = v4[14];
  v54 = *(void (**)(uint64_t))(*(_QWORD *)v52 + 272);
  swift_retain(v52);
  v55 = swift_retain(v53);
  v54(v55);
  swift_release(v52);
  swift_release(v53);
  v57 = v4[11];
  v56 = v4[12];
  v58 = *(void (**)(uint64_t))(*(_QWORD *)v56 + 280);
  swift_retain(v56);
  v59 = swift_retain(v57);
  v58(v59);
  swift_release(v56);
  swift_release(v57);
  v60 = v4[12];
  v61 = v4[10];
  v62 = *(void (**)(uint64_t))(*(_QWORD *)v60 + 288);
  swift_retain(v60);
  v63 = swift_retain(v61);
  v62(v63);
  swift_release(v60);
  swift_release(v61);
  v64 = v4[12];
  v65 = v4[9];
  v66 = *(void (**)(uint64_t))(*(_QWORD *)v64 + 296);
  swift_retain(v64);
  v67 = swift_retain(v65);
  v66(v67);
  swift_release(v64);
  swift_release(v65);
  v68 = v4[10];
  v69 = v4[15];
  v70 = *(void (**)(uint64_t))(*(_QWORD *)v68 + 392);
  swift_retain(v68);
  v71 = swift_retain(v69);
  v70(v71);
  swift_release(v68);
  swift_release(v69);
  v73 = v4[9];
  v72 = v4[10];
  v74 = *(void (**)(uint64_t))(*(_QWORD *)v72 + 376);
  swift_retain(v72);
  v75 = swift_retain(v73);
  v74(v75);
  swift_release(v72);
  swift_release(v73);
  v76 = v4[10];
  v77 = v4[12];
  v78 = *(void (**)(uint64_t))(*(_QWORD *)v76 + 360);
  swift_retain(v76);
  v79 = swift_retain(v77);
  v78(v79);
  swift_release(v76);
  swift_release(v77);
  v80 = v4[10];
  v81 = v4[11];
  v82 = *(void (**)(uint64_t))(*(_QWORD *)v80 + 368);
  swift_retain(v80);
  v83 = swift_retain(v81);
  v82(v83);
  swift_release(v80);
  swift_release(v81);
  v84 = v4[10];
  v85 = v4[14];
  v86 = *(void (**)(uint64_t))(*(_QWORD *)v84 + 384);
  swift_retain(v84);
  v87 = swift_retain(v85);
  v86(v87);
  swift_release(v84);
  swift_release(v85);
  v88 = v4[13];
  v89 = v4[11];
  v90 = *(void (**)(uint64_t))(*(_QWORD *)v88 + 304);
  swift_retain(v88);
  v91 = swift_retain(v89);
  v90(v91);
  swift_release(v88);
  swift_release(v89);
  v93 = v4[12];
  v92 = v4[13];
  v94 = *(void (**)(uint64_t))(*(_QWORD *)v92 + 320);
  swift_retain(v92);
  v95 = swift_retain(v93);
  v94(v95);
  swift_release(v92);
  swift_release(v93);
  v96 = v4[13];
  v97 = v4[10];
  v98 = *(void (**)(uint64_t))(*(_QWORD *)v96 + 312);
  swift_retain(v96);
  v99 = swift_retain(v97);
  v98(v99);
  swift_release(v96);
  swift_release(v97);
  (*(void (**)(uint64_t))(*(_QWORD *)v4[13] + 328))(v4[9]);
  sub_100005D08(v32);
  return v4;
}

uint64_t sub_10009A5D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009A5FC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10009A630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  void (*active)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD v65[5];
  _QWORD v66[5];
  _BYTE v67[32];

  v1 = *(_QWORD *)(v0 + 24);
  swift_beginAccess(v1 + 16, v67, 0, 0);
  result = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = result + 32;
    v60 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRetain(result);
    v61 = 0;
    v5 = &type metadata for String;
    do
    {
      sub_100005C44(v4, (uint64_t)v66);
      sub_100005C44((uint64_t)v66, (uint64_t)v65);
      v6 = sub_100005C88((uint64_t *)&unk_10015AB60);
      if ((swift_dynamicCast(&v62, v65, v6, &type metadata for KernelRequests.RequestExit, 0) & 1) != 0)
      {
        sub_100005D08(v66);
        swift_bridgeObjectRelease(v62);
        v61 = 1;
      }
      else if (swift_dynamicCast(&v64, v65, v6, &type metadata for KernelRequests.DextUpdateNotification, 0))
      {
        v7 = v64;
        v8 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v9 = swift_allocObject(v8, 112, 7);
        *(_OWORD *)(v9 + 16) = xmmword_10010F380;
        v10 = sub_10006CB64(v7);
        if (!v11)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          swift_bridgeObjectRelease(v7);
          __break(1u);
LABEL_28:
          v53 = sub_1000D7F90();
          if ((v53 & 1) != 0)
          {
            v54 = static os_log_type_t.error.getter(v53);
            v55 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
            v56 = (void *)static OS_os_log.default.getter(v55);
            os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, v56, "(NOT AN ERROR) Kernel requested shutdown. Goodbye!", 50, 2, _swiftEmptyArrayStorage);
          }
          else
          {
            v57 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
            v56 = (void *)static OS_os_log.default.getter(v57);
            v58 = static os_log_type_t.default.getter(v56);
            os_log(_:dso:log:type:_:)("Kernel requested shutdown. Goodbye!", 35, 2, &_mh_execute_header, v56, v58, _swiftEmptyArrayStorage);
          }

          exit(0);
        }
        v12 = v10;
        v13 = v11;
        *(_QWORD *)(v9 + 56) = v5;
        v14 = sub_100026838();
        *(_QWORD *)(v9 + 64) = v14;
        *(_QWORD *)(v9 + 32) = v12;
        *(_QWORD *)(v9 + 40) = v13;
        v15 = sub_10006CB70(v7);
        if (v16 >> 60 == 15)
          goto LABEL_26;
        v17 = v15;
        v18 = v16;
        v19 = sub_100013834(v15, v16);
        v21 = v20;
        sub_100021610(v17, v18);
        v22 = v5;
        *(_QWORD *)(v9 + 96) = v5;
        *(_QWORD *)(v9 + 104) = v14;
        *(_QWORD *)(v9 + 72) = v19;
        *(_QWORD *)(v9 + 80) = v21;
        v23 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
        v24 = (void *)static OS_os_log.default.getter(v23);
        v25 = static os_log_type_t.default.getter(v24);
        os_log(_:dso:log:type:_:)("Received update notification for bundle ID %{public}s, unique ID %{public}s", 75, 2, &_mh_execute_header, v24, v25, v9);
        swift_bridgeObjectRelease(v9);

        v62 = 0;
        v63 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease(v63);
        v62 = 0xD000000000000021;
        v63 = 0x80000001001282F0;
        v26 = sub_10006CB64(v7);
        v28 = v27;
        swift_bridgeObjectRelease(v7);
        if (v28)
          v29 = v26;
        else
          v29 = 0x296C696E28;
        if (!v28)
          v28 = 0xE500000000000000;
        v30 = v28;
        String.append(_:)(*(Swift::String *)&v29);
        swift_bridgeObjectRelease(v28);
        v31 = v62;
        v32 = (char *)v63;
        active = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ActiveDriversStateManager();
        sub_1000CDD6C(v31, v32, active, (uint64_t)&off_100146760);
        swift_bridgeObjectRelease(v32);
        sub_100005D08(v66);
        v5 = v22;
      }
      else
      {
        if (!swift_dynamicCast(&v64, v65, v6, &type metadata for KernelRequests.UnloadNotification, 0))
        {
          v62 = 0;
          v63 = 0xE000000000000000;
          _StringGuts.grow(_:)(34);
          v59._countAndFlagsBits = 0xD000000000000020;
          v59._object = (void *)0x8000000100128190;
          String.append(_:)(v59);
          _print_unlocked<A, B>(_:_:)(v66, &v62, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v62, v63, "driverkitd/DriverKitDaemon.swift", 32, 2, 214, 0);
          __break(1u);
          return result;
        }
        v7 = v64;
        v34 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v35 = swift_allocObject(v34, 72, 7);
        *(_OWORD *)(v35 + 16) = xmmword_10010F050;
        v62 = v7;
        v36 = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.UnloadNotification, (uint64_t)&off_100148770);
        if (!v37)
          goto LABEL_27;
        v38 = v36;
        v39 = v37;
        *(_QWORD *)(v35 + 56) = v5;
        *(_QWORD *)(v35 + 64) = sub_100026838();
        *(_QWORD *)(v35 + 32) = v38;
        *(_QWORD *)(v35 + 40) = v39;
        v40 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
        v41 = (void *)static OS_os_log.default.getter(v40);
        v42 = static os_log_type_t.default.getter(v41);
        os_log(_:dso:log:type:_:)("Received unload notification for bundle ID %{public}s", 53, 2, &_mh_execute_header, v41, v42, v35);
        swift_bridgeObjectRelease(v35);

        v62 = 0;
        v63 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease(v63);
        v62 = 0xD000000000000021;
        v63 = 0x8000000100128200;
        v43 = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.UnloadNotification, (uint64_t)&off_100148770);
        v44 = v5;
        v46 = v45;
        swift_bridgeObjectRelease(v7);
        if (v46)
          v47 = v43;
        else
          v47 = 0x296C696E28;
        if (!v46)
          v46 = 0xE500000000000000;
        v48 = v46;
        String.append(_:)(*(Swift::String *)&v47);
        swift_bridgeObjectRelease(v46);
        v49 = v62;
        v50 = (char *)v63;
        v51 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ActiveDriversStateManager();
        sub_1000CDD6C(v49, v50, v51, (uint64_t)&off_100146760);
        v52 = v50;
        v5 = v44;
        swift_bridgeObjectRelease(v52);
        sub_100005D08(v66);
      }
      sub_100005D08(v65);
      v4 += 40;
      --v3;
    }
    while (v3);
    result = swift_bridgeObjectRelease(v60);
    if ((v61 & 1) != 0)
      goto LABEL_28;
  }
  return result;
}

uint64_t sub_10009AC84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009AC94(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for DriverKitDaemon()
{
  return objc_opt_self(_TtC10driverkitd15DriverKitDaemon);
}

uint64_t sub_10009ACBC(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_10009ACD4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  sub_10007D0BC(*(_QWORD **)(v1 + 16), (uint64_t)v12);
  if (!v2)
  {
    v5 = v24;
    *(_OWORD *)(a1 + 192) = v23;
    *(_OWORD *)(a1 + 208) = v5;
    *(_OWORD *)(a1 + 224) = v25;
    *(_QWORD *)(a1 + 240) = v26;
    v6 = v20;
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v6;
    v7 = v22;
    *(_OWORD *)(a1 + 160) = v21;
    *(_OWORD *)(a1 + 176) = v7;
    v8 = v16;
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 80) = v8;
    v9 = v18;
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 112) = v9;
    v10 = v12[1];
    *(_OWORD *)a1 = v12[0];
    *(_OWORD *)(a1 + 16) = v10;
    result = *(double *)&v13;
    v11 = v14;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v11;
  }
  return result;
}

uint64_t sub_10009AD6C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(a2 + 32))();
  if (result)
    return sub_1000D51CC(result);
  return result;
}

uint64_t sub_10009AD98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  _QWORD v31[2];
  uint64_t v32;
  unint64_t v33;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  v9 = v8;
  swift_bridgeObjectRelease(v8);
  if (v9)
    v10 = 0x6261747563657865;
  else
    v10 = 0x7373656C65646F63;
  if (v9)
    v11 = 0xEA0000000000656CLL;
  else
    v11 = 0xE800000000000000;
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v33);
  v32 = v10;
  v33 = v11;
  v12._countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v15 = v14;
  v31[0] = v13;
  v31[1] = v14;
  v16 = sub_10009C258();
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for PackageType, v16);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  sub_100037510(v13, v15);
  v19._countAndFlagsBits = 0x20656C646E756220;
  v19._object = (void *)0xE800000000000000;
  String.append(_:)(v19);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  if (v21)
  {
    v22 = v21;
  }
  else
  {
    v20 = 0x296C696E28;
    v22 = 0xE500000000000000;
  }
  v23 = v22;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease(v22);
  v24._countAndFlagsBits = 544497952;
  v24._object = (void *)0xE400000000000000;
  String.append(_:)(v24);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  v26 = URL.path.getter(v25);
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v29._countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28);
  return v32;
}

void sub_10009AFB4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_retainAutorelease(v1), "_cfBundle");
  if (v6)
  {
    v7 = v6;
    v8 = (void *)_CFBundleCopyInfoPlistURL();

    if (v8)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v8);

      v9 = Data.init(contentsOf:options:)(v5, 0);
      v11 = v10;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_1000D13B4(v9, v11);
      sub_100011F40(v9, v11);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10009B0E0()
{
  void *v0;
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend(objc_retainAutorelease(v0), "_cfBundle");
  if (v1)
  {
    v2 = v1;
    v3 = (id)_CFBundleCopyInfoPlistURL();

    if (v3)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v3);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10009B154(uint64_t a1, uint64_t a2)
{
  return sub_10009B16C(a1, a2, (SEL *)&selRef_infoDictionary);
}

uint64_t sub_10009B160(uint64_t a1, uint64_t a2)
{
  return sub_10009B16C(a1, a2, (SEL *)&selRef_localizedInfoDictionary);
}

uint64_t sub_10009B16C(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v4 = objc_msgSend(*v3, *a3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  return v6;
}

void sub_10009B1D4()
{
  sub_10009AFB4();
}

uint64_t sub_10009B1F4(uint64_t a1, uint64_t a2)
{
  return sub_100012F48(a1, a2, (SEL *)&selRef_executablePath);
}

void sub_10009B200()
{
  id *v0;
  id v1;

  v1 = objc_msgSend(*v0, "bundleURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v1);

}

void sub_10009B24C()
{
  sub_10009B0E0();
}

uint64_t sub_10009B26C@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, "builtInPlugInsURL");
  if (v3)
  {
    v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for URL(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for URL(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

uint64_t sub_10009B2F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10009B310(a1, a2, a3, a4);
}

uint64_t sub_10009B310(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  NSString v5;
  NSString v6;
  id v7;
  uint64_t v8;

  v5 = a4;
  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = 0;
  if (a4)
LABEL_3:
    v5 = String._bridgeToObjectiveC()();
LABEL_4:
  v7 = objc_msgSend(v4, "pathForResource:ofType:", v6, v5);

  if (!v7)
    return 0;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v8;
}

uint64_t sub_10009B3BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void **v4;
  NSString v5;
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;

  v5 = a4;
  v6 = *v4;
  if (!a2)
  {
    v7 = 0;
    if (!a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = String._bridgeToObjectiveC()();
  if (v5)
LABEL_3:
    v5 = String._bridgeToObjectiveC()();
LABEL_4:
  v8 = objc_msgSend(v6, "pathsForResourcesOfType:inDirectory:", v7, v5);

  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for String);
  return v9;
}

uint64_t sub_10009B45C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  CFURLRef v3;
  CFURLRef v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = CFBundleCopyBuiltInPlugInsURL(*(CFBundleRef *)(v1 + 16));
  if (v3)
  {
    v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for URL(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for URL(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

uint64_t sub_10009B4D4(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __CFBundle *v13;
  __CFString *v14;
  CFURLRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v7 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v21 - v11;
  v13 = *(__CFBundle **)(v4 + 16);
  if (a2)
    a2 = (__CFString *)String._bridgeToObjectiveC()();
  if (a4)
    v14 = (__CFString *)String._bridgeToObjectiveC()();
  else
    v14 = 0;
  v15 = CFBundleCopyResourceURL(v13, a2, v14, 0);

  if (v15)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v16 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 0, 1, v16);
  }
  else
  {
    v16 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
  }
  sub_10009C384((uint64_t)v10, (uint64_t)v12);
  type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16);
  if ((_DWORD)v18 == 1)
  {

    sub_1000124F8((uint64_t)v12, (uint64_t *)&unk_10015BA60);
    return 0;
  }
  else
  {
    v19 = URL.path.getter(v18);

    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
  }
  return v19;
}

_QWORD *sub_10009B698(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSURL *v15;
  const __CFURL *v16;
  const __CFURL *v17;
  __CFString *v18;
  CFArrayRef v19;
  _QWORD *v20;
  _QWORD *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v38;

  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v35 - v13;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 168))(v12);
  URL._bridgeToObjectiveC()(v15);
  v17 = v16;
  v37 = *(void (**)(char *, uint64_t))(v8 + 8);
  v37(v14, v7);
  if (a2)
    a2 = (__CFString *)String._bridgeToObjectiveC()();
  if (a4)
    v18 = (__CFString *)String._bridgeToObjectiveC()();
  else
    v18 = 0;
  v19 = CFBundleCopyResourceURLsOfTypeInDirectory(v17, a2, v18);

  if (!v19)
    return _swiftEmptyArrayStorage;
  v38 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v19, &v38, v7);

  v20 = v38;
  v21 = _swiftEmptyArrayStorage;
  if (v38)
  {
    v22 = v38[2];
    if (v22)
    {
      v38 = _swiftEmptyArrayStorage;
      sub_10000C958(0, v22, 0);
      v23 = (char *)v20 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      v24 = *(_QWORD *)(v8 + 72);
      v35 = v20;
      v36 = v24;
      v25 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 16);
      do
      {
        v26 = v25(v11, v23, v7);
        v27 = URL.path.getter(v26);
        v29 = v28;
        v37(v11, v7);
        v21 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
        {
          sub_10000C958(0, v21[2] + 1, 1);
          v21 = v38;
        }
        v31 = v21[2];
        v30 = v21[3];
        if (v31 >= v30 >> 1)
        {
          sub_10000C958(v30 > 1, v31 + 1, 1);
          v21 = v38;
        }
        v21[2] = v31 + 1;
        v32 = &v21[2 * v31];
        v32[4] = v27;
        v32[5] = v29;
        v23 += v36;
        --v22;
      }
      while (v22);
      v33 = v35;
    }
    else
    {
      v33 = v38;
    }
    swift_bridgeObjectRelease(v33);
  }
  return v21;
}

CFStringRef sub_10009B8F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  CFStringRef result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
  if (!v1)
  {
    v10 = 0u;
    v11 = 0u;
    goto LABEL_12;
  }
  v2 = v1;
  result = kCFBundleIdentifierKey;
  if (!kCFBundleIdentifierKey)
  {
    __break(1u);
    return result;
  }
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFBundleIdentifierKey);
  v6 = v5;
  if (!*(_QWORD *)(v2 + 16) || (v7 = sub_100005DE8(v4, v5), (v8 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v2);
    goto LABEL_12;
  }
  sub_100005D28(*(_QWORD *)(v2 + 56) + 32 * v7, (uint64_t)&v10);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_12:
    sub_1000124F8((uint64_t)&v10, &qword_100158018);
    return 0;
  }
  if (swift_dynamicCast(&v9, &v10, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return (CFStringRef)v9;
  else
    return 0;
}

id sub_10009B9F0()
{
  return sub_10009BA08((uint64_t (*)(_QWORD))&CFBundleGetInfoDictionary);
}

id sub_10009B9FC()
{
  return sub_10009BA08((uint64_t (*)(_QWORD))&CFBundleGetLocalInfoDictionary);
}

id sub_10009BA08(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  id result;
  void *v3;
  uint64_t v4;

  result = (id)a1(*(_QWORD *)(v1 + 16));
  if (result)
  {
    v3 = result;
    v4 = 0;
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(result, &v4, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    return (id)v4;
  }
  return result;
}

uint64_t sub_10009BA74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(_QWORD *)v0 + 152))();
  v6 = Data.init(contentsOf:options:)(v4, 0);
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v9 = sub_1000D13B4(v6, v8);
  sub_100011F40(v6, v8);
  objc_autoreleasePoolPop(v5);
  return v9;
}

void sub_10009BB7C()
{
  sub_10009BCEC((uint64_t (*)(_QWORD))&__CFBundleCopyInfoPlistURL);
}

uint64_t sub_10009BB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  CFURLRef v7;
  CFURLRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v14 - v5;
  v7 = CFBundleCopyExecutableURL(*(CFBundleRef *)(v0 + 16));
  if (v7)
  {
    v8 = v7;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v7);

    v9 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 0, 1, v9);
  }
  else
  {
    v9 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  }
  sub_10009C384((uint64_t)v4, (uint64_t)v6);
  type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9);
  if ((_DWORD)v11 == 1)
  {
    sub_1000124F8((uint64_t)v6, (uint64_t *)&unk_10015BA60);
    return 0;
  }
  else
  {
    v12 = URL.path.getter(v11);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v6, v9);
  }
  return v12;
}

void sub_10009BCE0()
{
  sub_10009BCEC((uint64_t (*)(_QWORD))&CFBundleCopyBundleURL);
}

void sub_10009BCEC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v2 = a1(*(_QWORD *)(v1 + 16));
  if (v2)
  {
    v3 = (id)v2;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10009BD34()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_10009BD58()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t sub_10009BD80()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t sub_10009BDA8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t sub_10009BDD0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t sub_10009BDF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t sub_10009BE20()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t sub_10009BE48(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100114028, a1);
  return sub_10009AD98(a1, WitnessTable);
}

double sub_10009BE7C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  v4 = type metadata accessor for URL(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  v8 = sub_10009C29C((uint64_t)v6);
  if (v8)
  {
    v9 = v8;
    *(_QWORD *)(a2 + 24) = type metadata accessor for UncachedBundle();
    *(_QWORD *)(a2 + 32) = sub_10009C484(&qword_10015ADE8, v10, (uint64_t (*)(uint64_t))type metadata accessor for UncachedBundle, (uint64_t)&unk_100114028);
    *(_QWORD *)a2 = v9;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

double sub_10009BF3C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v6 = type metadata accessor for URL(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a2);
  URL.init(fileURLWithPath:)(a1, a2);
  swift_bridgeObjectRelease(a2);
  v9 = sub_10009C29C((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    *(_QWORD *)(a3 + 24) = type metadata accessor for UncachedBundle();
    *(_QWORD *)(a3 + 32) = sub_10009C484(&qword_10015ADE8, v11, (uint64_t (*)(uint64_t))type metadata accessor for UncachedBundle, (uint64_t)&unk_100114028);
    *(_QWORD *)a3 = v10;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

double sub_10009C00C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  NSString v4;
  id v5;
  double result;

  swift_bridgeObjectRetain(a1);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a1);
  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleWithIdentifier:", v4);

  if (v5)
  {
    *(_QWORD *)(a2 + 24) = sub_10009C3CC();
    *(_QWORD *)(a2 + 32) = sub_10009C484(&qword_10015ADF8, 255, (uint64_t (*)(uint64_t))sub_10009C3CC, (uint64_t)&unk_10011400C);
    *(_QWORD *)a2 = v5;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10009C0CC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t sub_10009C0F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t sub_10009C11C(uint64_t a1, uint64_t a2)
{
  return sub_10009C128(a1, a2, (uint64_t)&off_10014B5A0);
}

uint64_t sub_10009C128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_10009C1A0(v10, v7, v8);
}

uint64_t sub_10009C1A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_10015AE00);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_10009C20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015AE00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

unint64_t sub_10009C258()
{
  unint64_t result;

  result = qword_10015ADE0;
  if (!qword_10015ADE0)
  {
    result = swift_getWitnessTable(&unk_10011A368, &type metadata for PackageType);
    atomic_store(result, (unint64_t *)&qword_10015ADE0);
  }
  return result;
}

uint64_t sub_10009C29C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSURL *v4;
  void *v5;
  void *v6;
  void *Unique;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;

  v2 = type metadata accessor for UncachedBundle();
  v3 = swift_allocObject(v2, 24, 7);
  URL._bridgeToObjectiveC()(v4);
  v6 = v5;
  Unique = (void *)_CFBundleCreateUnique(0, v5);

  v8 = type metadata accessor for URL(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  if (Unique)
  {
    v10 = Unique;
    v9(a1, v8);

    *(_QWORD *)(v3 + 16) = v10;
  }
  else
  {
    v9(a1, v8);
    swift_deallocPartialClassInstance(v3, v2, 24, 7);
    return 0;
  }
  return v3;
}

uint64_t type metadata accessor for UncachedBundle()
{
  return objc_opt_self(_TtC10driverkitd14UncachedBundle);
}

uint64_t sub_10009C384(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88((uint64_t *)&unk_10015BA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10009C3CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015ADF0;
  if (!qword_10015ADF0)
  {
    v1 = objc_opt_self(NSBundle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015ADF0);
  }
  return result;
}

uint64_t sub_10009C408(uint64_t a1)
{
  uint64_t result;

  result = sub_10009C484(&qword_10015AE08, 255, (uint64_t (*)(uint64_t))sub_10009C3CC, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009C448(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10009C484(&qword_10015AE10, a2, (uint64_t (*)(uint64_t))type metadata accessor for UncachedBundle, (uint64_t)&unk_100114044);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009C484(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for RealBundleResolver()
{
  return objc_opt_self(_TtC10driverkitd18RealBundleResolver);
}

void type metadata accessor for CFBundle()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10015AFB8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_10014B5E8);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10015AFB8);
  }
}

uint64_t sub_10009C538(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  Swift::String v104;
  void *object;
  Swift::String v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  _QWORD v113[3];
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t *v117;

  v5 = v4;
  v112 = a2;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v110 = v3;
  v111 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(_DWORD *)(v3 + 640);
  LODWORD(v113[0]) = *sub_1000A4914();
  LODWORD(v117) = v12;
  v13 = sub_100012808();
  if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v113, &type metadata for ExtensionManager.Settings.Flags, v13) & 1) != 0)
  {
    if ((a3 & 1) == 0)
    {
      v14 = type metadata accessor for DriverExtension(0);
      if (!swift_dynamicCastClass(v11, v14))
      {
        v15 = (*(uint64_t (**)(void))(*v11 + 144))();
        v17 = v16;
        v18 = sub_100026B2C();
        v19 = v18[1];
        if (v15 == *v18 && v17 == v19)
        {
          swift_bridgeObjectRelease(v17);
        }
        else
        {
          v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, *v18, v19, 0);
          swift_bridgeObjectRelease(v17);
          if ((v21 & 1) == 0)
          {
            v22 = type metadata accessor for KernelExtension(0);
            if (!swift_dynamicCastClass(v11, v22)
              || ((*(uint64_t (**)(void))(*v11 + 216))() & 1) == 0
              || ((*(uint64_t (**)(void))(*v11 + 136))() & 1) == 0)
            {
              if (!swift_dynamicCastClass(v11, v22))
                goto LABEL_54;
              sub_10003A1E0(v11 + 3, (uint64_t)v113);
              if (v116 != 2)
              {
                sub_10003A258(v113);
                goto LABEL_54;
              }
              if (LOBYTE(v113[0]) == 4
                || (LOBYTE(v117) = 2,
                    v23 = sub_1000262B0(),
                    (dispatch thunk of static Equatable.== infix(_:_:)(v113, &v117, &type metadata for CollectionKind, v23) & 1) != 0))
              {
LABEL_54:
                if (swift_dynamicCastClass(v11, v22))
                {
                  v86 = (*(uint64_t (**)(void))(*v11 + 216))();
                  v87 = v86;
                  v88 = static os_log_type_t.error.getter(v86);
                  v89 = sub_100005C88((uint64_t *)&unk_1001596E0);
                  v90 = swift_allocObject(v89, 72, 7);
                  *(_OWORD *)(v90 + 16) = xmmword_10010F050;
                  v91 = (*(uint64_t (**)(void))(*v11 + 200))();
                  v93 = v92;
                  *(_QWORD *)(v90 + 56) = &type metadata for String;
                  *(_QWORD *)(v90 + 64) = sub_100026838();
                  *(_QWORD *)(v90 + 32) = v91;
                  *(_QWORD *)(v90 + 40) = v93;
                  v94 = sub_10002687C();
                  v95 = (void *)static OS_os_log.default.getter(v94);
                  if ((v87 & 1) != 0)
                    os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v95, "error: tried to insert an invalid codeless kext in restricted lookup table: %{public}s", 86, 2, v90);
                  else
                    os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v95, "error: tried to insert an invalid codeful kernel extension in the restricted lookup table: %{public}s", 101, 2, v90);
                }
                else
                {
                  v96 = static os_log_type_t.error.getter(0);
                  v97 = sub_100005C88((uint64_t *)&unk_1001596E0);
                  v90 = swift_allocObject(v97, 72, 7);
                  *(_OWORD *)(v90 + 16) = xmmword_10010F050;
                  v98 = (*(uint64_t (**)(void))(*v11 + 200))();
                  v100 = v99;
                  *(_QWORD *)(v90 + 56) = &type metadata for String;
                  *(_QWORD *)(v90 + 64) = sub_100026838();
                  *(_QWORD *)(v90 + 32) = v98;
                  *(_QWORD *)(v90 + 40) = v100;
                  v101 = sub_10002687C();
                  v95 = (void *)static OS_os_log.default.getter(v101);
                  os_log(_:dso:log:_:_:)(v96, &_mh_execute_header, v95, "error: tried to insert an invalid ext in restricted lookup table: %{public}s", 76, 2, v90);
                }
                swift_bridgeObjectRelease(v90);

                v113[0] = 0;
                v113[1] = 0xE000000000000000;
                _StringGuts.grow(_:)(47);
                swift_bridgeObjectRelease(v113[1]);
                strcpy((char *)v113, "Cannot insert ");
                HIBYTE(v113[1]) = -18;
                v117 = v11;
                v102 = type metadata accessor for OSExtension(0);
                v103 = sub_100012534((unint64_t *)&qword_100157C90, type metadata accessor for OSExtension, (uint64_t)&unk_10011B468);
                v104._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v102, v103);
                object = v104._object;
                String.append(_:)(v104);
                swift_bridgeObjectRelease(object);
                v106._object = (void *)0x80000001001284A0;
                v106._countAndFlagsBits = 0xD00000000000001FLL;
                String.append(_:)(v106);
                v107 = v113[0];
                v84 = v113[1];
                v108 = sub_1000122F8();
                v82 = swift_allocError(&type metadata for KMError, v108, 0, 0);
                *(_QWORD *)v83 = v107;
                v85 = 68;
                goto LABEL_60;
              }
            }
          }
        }
      }
    }
    v24 = type metadata accessor for DriverExtension(0);
    v25 = swift_dynamicCastClass(v11, v24);
    if (v25)
    {
      v26 = static os_log_type_t.info.getter(v25);
      v109 = v9;
      v27 = v26;
      v28 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v29 = swift_allocObject(v28, 72, 7);
      *(_OWORD *)(v29 + 16) = xmmword_10010F050;
      v30 = (*(uint64_t (**)(void))(*v11 + 200))();
      v32 = v31;
      *(_QWORD *)(v29 + 56) = &type metadata for String;
      *(_QWORD *)(v29 + 64) = sub_100026838();
      *(_QWORD *)(v29 + 32) = v30;
      *(_QWORD *)(v29 + 40) = v32;
      v33 = sub_10002687C();
      v34 = (void *)static OS_os_log.default.getter(v33);
      v35 = v27;
      v5 = v4;
      v9 = v109;
      os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v34, "trying to insert a dext in KernelManagerDaemonLoadableExtTable: %{public}s", 74, 2, v29);
    }
    else
    {
      v109 = v4;
      v36 = type metadata accessor for KernelExtension(0);
      if (swift_dynamicCastClass(v11, v36))
      {
        v37 = (*(uint64_t (**)(void))(*v11 + 216))();
        v38 = static os_log_type_t.debug.getter();
        v39 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v29 = swift_allocObject(v39, 72, 7);
        *(_OWORD *)(v29 + 16) = xmmword_10010F050;
        v40 = (*(uint64_t (**)(void))(*v11 + 200))();
        v42 = v41;
        *(_QWORD *)(v29 + 56) = &type metadata for String;
        *(_QWORD *)(v29 + 64) = sub_100026838();
        *(_QWORD *)(v29 + 32) = v40;
        *(_QWORD *)(v29 + 40) = v42;
        v43 = sub_10002687C();
        v34 = (void *)static OS_os_log.default.getter(v43);
        if ((v37 & 1) != 0)
          os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v34, "inserting a valid codeless kext in restricted lookup table: %{public}s", 70, 2, v29);
        else
          os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v34, "inserting a valid codeful kernel extension in restricted lookup table: %{public}s", 81, 2, v29);
      }
      else
      {
        v44 = static os_log_type_t.debug.getter();
        v45 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v29 = swift_allocObject(v45, 72, 7);
        *(_OWORD *)(v29 + 16) = xmmword_10010F050;
        v46 = (*(uint64_t (**)(void))(*v11 + 200))();
        v48 = v47;
        *(_QWORD *)(v29 + 56) = &type metadata for String;
        *(_QWORD *)(v29 + 64) = sub_100026838();
        *(_QWORD *)(v29 + 32) = v46;
        *(_QWORD *)(v29 + 40) = v48;
        v49 = sub_10002687C();
        v34 = (void *)static OS_os_log.default.getter(v49);
        os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v34, "inserting to insert an unknown but valid extension into restricted lookup table: %{public}s", 91, 2, v29);
      }
      v5 = v109;
    }
    swift_bridgeObjectRelease(v29);

  }
  v50 = (*(uint64_t (**)(void))(*v11 + 144))();
  v52 = v51;
  v53 = sub_100026B2C();
  v54 = v53[1];
  if (v50 == *v53 && v52 == v54)
  {
    v57 = swift_bridgeObjectRelease(v52);
  }
  else
  {
    v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v52, *v53, v54, 0);
    v57 = swift_bridgeObjectRelease(v52);
    if ((v56 & 1) == 0)
      return sub_1000523E8(a1);
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*v11 + 112))(v113, v57);
  v58 = v114;
  if (!v114)
  {
    sub_1000124F8((uint64_t)v113, &qword_100157C78);
    sub_100026B38();
    return sub_1000523E8(a1);
  }
  v59 = v115;
  sub_100004DE4(v113, v114);
  v60 = v111;
  v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 64))(v58, v59);
  v62 = URL.path.getter(v61);
  v64 = v63;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v60, v8);
  sub_100005D08(v113);
  v65 = sub_100026B38();
  if (!v64)
    return sub_1000523E8(a1);
  v66 = v65[1];
  if (v62 == *v65 && v64 == v66)
  {
    v67 = swift_bridgeObjectRelease(v64);
  }
  else
  {
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v64, *v65, v66, 0);
    v67 = swift_bridgeObjectRelease(v64);
    if ((v68 & 1) == 0)
      return sub_1000523E8(a1);
  }
  v69 = (*(uint64_t (**)(uint64_t))(*v11 + 192))(v67);
  v70 = (*(uint64_t (**)(void))(*(_QWORD *)v110 + 168))();
  sub_10009CE34(v70);
  v72 = v71;
  v74 = v73;
  v75 = swift_bridgeObjectRelease(v70);
  if (!v72)
  {
    if (v69 >= 1)
      goto LABEL_46;
    return sub_1000523E8(a1);
  }
  v75 = swift_bridgeObjectRelease(v72);
  if (v74 >= v69)
    return sub_1000523E8(a1);
LABEL_46:
  if (((*(uint64_t (**)(uint64_t))(*v11 + 136))(v75) & 1) != 0)
    return sub_1000523E8(a1);
  v77 = type metadata accessor for KernelExtension(0);
  v78 = swift_dynamicCastClass(v11, v77);
  if (!v78)
  {
    v81 = sub_1000122F8();
    v82 = swift_allocError(&type metadata for KMError, v81, 0, 0);
    *(_QWORD *)v83 = 0xD00000000000003ELL;
    v84 = 0x8000000100128410;
    v85 = 44;
LABEL_60:
    *(_QWORD *)(v83 + 8) = v84;
    *(_OWORD *)(v83 + 16) = 0u;
    *(_OWORD *)(v83 + 32) = 0u;
    *(_OWORD *)(v83 + 48) = 0u;
    *(_QWORD *)(v83 + 64) = 0;
    *(_BYTE *)(v83 + 72) = v85;
    return swift_willThrow(v82);
  }
  v79 = v78;
  swift_retain(v11);
  v80 = sub_10009CEC4(v79, v112);
  result = swift_release(v11);
  if (!v5)
  {
    swift_bridgeObjectRelease(v80);
    return sub_1000523E8(a1);
  }
  return result;
}

uint64_t sub_10009CE34(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_1000109E8(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_1000A0D84(result, v3, 0, a1);
  swift_bridgeObjectRetain(v6);
  return v5;
}

uint64_t sub_10009CEC4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  _UNKNOWN **v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD v86[2];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[3];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v4 = v2;
  v7 = static os_log_type_t.info.getter(a1);
  v8 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10010F050;
  v10 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 200))();
  v12 = v11;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_100026838();
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v12;
  v13 = sub_10002687C();
  v14 = (void *)static OS_os_log.default.getter(v13);
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v14, "Reading exclude list from %{public}s", 36, 2, v9);
  swift_bridgeObjectRelease(v9);

  v15 = sub_100026B44();
  swift_retain(a1);
  v16 = sub_1000A0DE4((uint64_t)v15, a1);
  swift_bridgeObjectRelease(v15);
  result = swift_release(a1);
  if (v3)
    return result;
  v85 = v4;
  v18 = v16[2];
  if (v18)
  {
    sub_100005C88(&qword_10015AFC0);
    v19 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v18);
  }
  else
  {
    v19 = &_swiftEmptyDictionarySingleton;
  }
  v20 = v4;
  v89[0] = (uint64_t)v19;
  v21 = swift_bridgeObjectRetain(v16);
  sub_10009ED40(v21, 1, v89);
  v80 = v8;
  swift_bridgeObjectRelease(v16);
  v22 = *(void (**)(void))(*v4 + 176);
  v81 = swift_retain(v89[0]);
  v22();
  v92 = (uint64_t)&_swiftEmptySetSingleton;
  v23 = *(_QWORD *)(a2 + 24);
  if ((v23 & 0xC000000000000001) != 0)
  {
    if (v23 < 0)
      v24 = *(_QWORD *)(a2 + 24);
    else
      v24 = v23 & 0xFFFFFFFFFFFFFF8;
    v84 = 0;
    v25 = 0;
    v26 = 0;
    v27 = __CocoaDictionary.makeIterator()(v24) | 0x8000000000000000;
  }
  else
  {
    v28 = -1 << *(_BYTE *)(v23 + 32);
    v25 = ~v28;
    v84 = v23 + 64;
    v29 = -v28;
    if (v29 < 64)
      v30 = ~(-1 << v29);
    else
      v30 = -1;
    v26 = v30 & *(_QWORD *)(v23 + 64);
    v27 = *(_QWORD *)(a2 + 24);
  }
  v31 = swift_bridgeObjectRetain(v23);
  v32 = 0;
  v83 = (unint64_t)(v25 + 64) >> 6;
  v82 = (char *)&type metadata for Swift.AnyObject + 8;
  while ((v27 & 0x8000000000000000) != 0)
  {
    v37 = __CocoaDictionary.Iterator.next()(v31);
    if (!v37)
    {
      v20 = v85;
      goto LABEL_44;
    }
    v39 = v37;
    v40 = v38;
    v88 = v37;
    v41 = type metadata accessor for OSExtension(0);
    swift_unknownObjectRetain(v39);
    swift_dynamicCast(v89, &v88, v82, v41, 7);
    v42 = v89[0];
    swift_unknownObjectRelease(v39);
    v88 = v40;
    v25 = type metadata accessor for RealizedInfo(0);
    swift_unknownObjectRetain(v40);
    swift_dynamicCast(v89, &v88, v82, v25, 7);
    v43 = v89[0];
    swift_unknownObjectRelease(v40);
    v36 = v32;
    v34 = v26;
    v20 = v85;
    if (!v42)
      goto LABEL_44;
LABEL_38:
    swift_release(v42);
    v88 = v43;
    v48 = sub_10008E4AC(&v88);
    v49 = v88;
    if (!v48)
      goto LABEL_15;
    v25 = *(_QWORD *)(*(_QWORD *)v88 + 168);
    v50 = swift_retain(v88);
    v51 = ((uint64_t (*)(uint64_t))v25)(v50);
    swift_release(v49);
    v52 = sub_100005C88(&qword_100158C08);
    v53 = swift_allocObject(v52, 48, 7);
    *(_OWORD *)(v53 + 16) = xmmword_10010F380;
    *(_QWORD *)(v53 + 32) = *sub_10002BFCC();
    *(_QWORD *)(v53 + 40) = *sub_10002C17C();
    v87 = v53;
    v54 = sub_100039BE8();
    v55 = sub_100005C88(&qword_10015A828);
    v56 = sub_1000898E8();
    dispatch thunk of SetAlgebra.init<A>(_:)(v89, &v87, v55, v56, &type metadata for RealizedInfo.Flags, v54);
    v86[1] = v51;
    v87 = v89[0];
    v20 = v85;
    sub_100039BA0();
    dispatch thunk of RawRepresentable.rawValue.getter(v86, &type metadata for RealizedInfo.Flags);
    v57 = sub_100039B14();
    dispatch thunk of OptionSet.init(rawValue:)(v86, &type metadata for RealizedInfo.Flags, v57);
    dispatch thunk of SetAlgebra.formIntersection(_:)(&v87, &type metadata for RealizedInfo.Flags, v54);
    dispatch thunk of SetAlgebra.init()(&v87, &type metadata for RealizedInfo.Flags, v54);
    v58 = sub_100039C30();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v89, &v87, &type metadata for RealizedInfo.Flags, v58) & 1) != 0)
      goto LABEL_15;
    v59 = *(_QWORD *)(v49 + 24);
    v25 = *(_QWORD *)(*(_QWORD *)v59 + 112);
    v60 = swift_retain(v59);
    ((void (*)(uint64_t *__return_ptr, uint64_t))v25)(v89, v60);
    swift_release(v59);
    v61 = v90;
    sub_1000124F8((uint64_t)v89, &qword_100157C78);
    if (v61)
    {
      v25 = *(_QWORD *)(v49 + 24);
      swift_retain(v25);
      sub_10009F0C0(v89, v25);
      v62 = v89[0];
      swift_release(v49);
      v33 = v62;
    }
    else
    {
LABEL_15:
      v33 = v49;
    }
    v31 = swift_release(v33);
    v32 = v36;
    v26 = v34;
  }
  if (v26)
  {
    v34 = (v26 - 1) & v26;
    v35 = __clz(__rbit64(v26)) | (v32 << 6);
    v36 = v32;
    goto LABEL_37;
  }
  v44 = v32 + 1;
  if (__OFADD__(v32, 1))
  {
    __break(1u);
    result = swift_unexpectedError(v25, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
    return result;
  }
  if (v44 >= v83)
    goto LABEL_44;
  v45 = *(_QWORD *)(v84 + 8 * v44);
  v36 = v32 + 1;
  if (v45)
    goto LABEL_36;
  v36 = v32 + 2;
  if (v32 + 2 >= v83)
    goto LABEL_44;
  v45 = *(_QWORD *)(v84 + 8 * v36);
  if (v45)
    goto LABEL_36;
  v36 = v32 + 3;
  if (v32 + 3 >= v83)
    goto LABEL_44;
  v45 = *(_QWORD *)(v84 + 8 * v36);
  if (v45)
    goto LABEL_36;
  v36 = v32 + 4;
  if (v32 + 4 >= v83)
    goto LABEL_44;
  v45 = *(_QWORD *)(v84 + 8 * v36);
  if (v45)
  {
LABEL_36:
    v34 = (v45 - 1) & v45;
    v35 = __clz(__rbit64(v45)) + (v36 << 6);
LABEL_37:
    v47 = 8 * v35;
    v42 = *(_QWORD *)(*(_QWORD *)(v27 + 48) + v47);
    v43 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + v47);
    swift_retain(v42);
    swift_retain(v43);
    if (!v42)
      goto LABEL_44;
    goto LABEL_38;
  }
  v46 = v32 + 5;
  while (v83 != v46)
  {
    v45 = *(_QWORD *)(v84 + 8 * v46++);
    if (v45)
    {
      v36 = v46 - 1;
      goto LABEL_36;
    }
  }
LABEL_44:
  v63 = sub_100005DE0(v27);
  v64 = v92;
  if ((v92 & 0xC000000000000001) != 0)
  {
    if (v92 < 0)
      v65 = v92;
    else
      v65 = v92 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v92);
    v66 = __CocoaSet.count.getter(v65);
    v63 = swift_bridgeObjectRelease(v64);
  }
  else
  {
    v66 = *(_QWORD *)(v92 + 16);
  }
  if (v66)
  {
    v67 = static os_log_type_t.info.getter(v63);
    v68 = swift_allocObject(v80, 72, 7);
    v69 = (_QWORD *)v68;
    *(_OWORD *)(v68 + 16) = xmmword_10010F050;
    if ((v64 & 0xC000000000000001) != 0)
    {
      if (v64 < 0)
        v70 = v64;
      else
        v70 = v64 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v64);
      v71 = __CocoaSet.count.getter(v70);
      v68 = swift_bridgeObjectRelease(v64);
    }
    else
    {
      v71 = *(_QWORD *)(v64 + 16);
    }
    v69[7] = &type metadata for Int;
    v69[8] = &protocol witness table for Int;
    v69[4] = v71;
    v72 = (void *)static OS_os_log.default.getter(v68);
    os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v72, "reporting %d newly unsupported kexts to syspolicyd after AKEL update:", v79);
    swift_bridgeObjectRelease(v69);

    v74 = v20[5];
    v73 = v20[6];
    sub_100004DE4(v20 + 2, v74);
    sub_10007BC88(v74, v73);
    v75 = v90;
    v76 = v91;
    sub_100004DE4(v89, v90);
    v77 = swift_bridgeObjectRetain(v64);
    v78 = sub_10009E78C(v77);
    swift_bridgeObjectRelease_n(v64, 2);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v76 + 88))(v78, v75, v76);
    swift_bridgeObjectRelease(v78);
    sub_100005D08(v89);
  }
  else
  {
    swift_bridgeObjectRelease(v64);
  }
  return v81;
}

uint64_t sub_10009D694(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *, _QWORD);
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;

  v4 = v2;
  v7 = *(_OWORD *)(a2 + 16);
  v45 = *(_OWORD *)a2;
  v46 = v7;
  v47 = *(_OWORD *)(a2 + 32);
  v48 = *(_QWORD *)(a2 + 48);
  v8 = (_QWORD *)*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
  v9 = sub_100051E88(v8);
  swift_release(v9);
  if (v9)
  {
    v10 = sub_1000122F8();
    v11 = swift_allocError(&type metadata for KMError, v10, 0, 0);
    *(_QWORD *)v12 = 0xD00000000000003BLL;
    *(_QWORD *)(v12 + 8) = 0x8000000100128770;
LABEL_5:
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_QWORD *)(v12 + 64) = 0;
    *(_BYTE *)(v12 + 72) = 9;
    return swift_willThrow(v11);
  }
  v13 = *(_QWORD *)a2;
  swift_retain(a1);
  swift_bridgeObjectRetain(v13);
  v15 = sub_1000A0F00(v14, a1);
  swift_bridgeObjectRelease(v13);
  swift_release(a1);
  if ((v15 & 1) != 0)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease(0xE000000000000000);
    v16 = type metadata accessor for URL(0);
    v17 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    v20._countAndFlagsBits = 0xD000000000000017;
    v20._object = (void *)0x80000001001287D0;
    String.append(_:)(v20);
    v21 = sub_1000122F8();
    v11 = swift_allocError(&type metadata for KMError, v21, 0, 0);
    *(_QWORD *)v12 = 0xD000000000000016;
    *(_QWORD *)(v12 + 8) = 0x80000001001287B0;
    goto LABEL_5;
  }
  result = sub_100032DD0(a1);
  if (!v3)
  {
    v23 = result;
    v24 = sub_100097274(a1 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path);
    v25 = v4[160];
    LODWORD(v43) = *(_DWORD *)sub_1000A4764();
    LODWORD(v44[0]) = v25;
    v26 = sub_100012808();
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)(&v43, &type metadata for ExtensionManager.Settings.Flags, v26) & 1) == 0)
      __asm { BR              X9 }
    v27 = swift_retain(v23);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
    v29 = *(_QWORD *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v28 = *(_QWORD *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v29 >= v28 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
    v42 = v23;
    v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v23);
    specialized Array._endMutation()(v30);
    v31 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v4 + 256))(&v43);
    v32 = v24[2];
    if (v32)
    {
      v33 = v24 + 5;
      do
      {
        v34 = *(v33 - 1);
        v35 = *v33;
        swift_bridgeObjectRetain(*v33);
        sub_100075E20(v44, v34, v35);
        swift_bridgeObjectRelease(v44[1]);
        v33 += 2;
        --v32;
      }
      while (v32);
    }
    swift_bridgeObjectRelease(v24);
    v31(&v43, 0);
    v36 = *(_QWORD *)(v23 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions);
    if ((unint64_t)v36 >> 62)
    {
      if (v36 < 0)
        v40 = *(_QWORD *)(v23 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions);
      else
        v40 = v36 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*(_QWORD *)(v23 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions), 2);
      v37 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v36);
    }
    else
    {
      v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v23 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_extensions));
    }
    if (v37)
    {
      if (v37 < 1)
      {
        __break(1u);
        v41 = type metadata accessor for OSExtension(0);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v41);
        __break(1u);
        JUMPOUT(0x10009DEBCLL);
      }
      v38 = 0;
      v49 = v36 & 0xC000000000000001;
      do
      {
        if (v49)
        {
          v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v36);
        }
        else
        {
          v39 = *(_QWORD *)(v36 + 8 * v38 + 32);
          swift_retain(v39);
        }
        sub_10009C538(v39, a2, 0);
        swift_release(v39);
        ++v38;
      }
      while (v37 != v38);
    }
    swift_bridgeObjectRelease(v36);
    return v42;
  }
  return result;
}

uint64_t sub_10009DECC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[3];
  uint64_t v19;
  char v20;

  v5 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v5;
  v18[2] = *(_OWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 48);
  sub_10005A758(v18);
  v6 = sub_100051E88(a1);
  sub_100010C68((uint64_t *)v18);
  result = swift_release(v6);
  if (v6)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(0xE000000000000000);
    v20 = *(_BYTE *)(a3 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
    v8 = sub_10004F8F0();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for CollectionKind, v8);
    object = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(object);
    v11._countAndFlagsBits = 0x20726574666120;
    v11._object = (void *)0xE700000000000000;
    String.append(_:)(v11);
    v20 = (char)a1;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for CollectionKind, v8);
    v13 = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v13);
    v14._countAndFlagsBits = 46;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15 = sub_1000122F8();
    v16 = swift_allocError(&type metadata for KMError, v15, 0, 0);
    *(_QWORD *)v17 = 0x6120746F6E6E6143;
    *(_QWORD *)(v17 + 8) = 0xEB00000000206464;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_QWORD *)(v17 + 64) = 0;
    *(_BYTE *)(v17 + 72) = 9;
    return swift_willThrow(v16);
  }
  return result;
}

uint64_t *sub_10009E070(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t *result;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  Swift::String v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  void *v41;
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  void *object;
  Swift::String v57;
  uint64_t v58;
  Swift::String v59;
  void *v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  Swift::String v64;
  void *v65;
  Swift::String v66;
  uint64_t v67;
  Swift::String v68;
  void *v69;
  Swift::String v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD v80[3];
  uint64_t v81;
  _QWORD *v82;

  v77 = a5;
  v9 = sub_100005C88(&qword_100158918);
  __chkstk_darwin(v9);
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_OWORD *)(a4 + 16);
  v80[0] = *(_OWORD *)a4;
  v80[1] = v16;
  v80[2] = *(_OWORD *)(a4 + 32);
  v81 = *(_QWORD *)(a4 + 48);
  sub_10005A758(v80);
  v17 = sub_100051E88(a2);
  result = sub_100010C68((uint64_t *)v80);
  if (v17)
  {
    sub_10004DB34(a1, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_1000124F8((uint64_t)v11, &qword_100158918);
      v19 = v77;
      v20 = sub_1000D4214(*((_BYTE *)v77 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
      v22 = v21;
      v78 = 0;
      v79 = 0xE000000000000000;
      v23 = v17;
      _StringGuts.grow(_:)(30);
      v24 = v79;
      v82 = v19;
      v25 = type metadata accessor for KernelCollection(0);
      v26 = sub_100012534(&qword_100158928, type metadata accessor for KernelCollection, (uint64_t)&unk_100110900);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
      v29 = v28;
      swift_bridgeObjectRelease(v24);
      v78 = v27;
      v79 = v29;
      v30._countAndFlagsBits = 0xD00000000000001CLL;
      v30._object = (void *)0x80000001001287F0;
      String.append(_:)(v30);
      v31 = v78;
      v32 = v79;
      v33 = sub_1000122F8();
      v34 = swift_allocError(&type metadata for KMError, v33, 0, 0);
      *(_QWORD *)v35 = v20;
      *(_QWORD *)(v35 + 8) = v22;
      *(_QWORD *)(v35 + 16) = v31;
      *(_QWORD *)(v35 + 24) = v32;
      *(_OWORD *)(v35 + 32) = 0u;
      *(_OWORD *)(v35 + 48) = 0u;
      *(_QWORD *)(v35 + 64) = 0;
      *(_BYTE *)(v35 + 72) = 6;
      swift_willThrow(v34);
      return (uint64_t *)swift_release(v23);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
      if ((static UUID.== infix(_:_:)(v15, (char *)v17 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_uuid) & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        return (uint64_t *)swift_release(v17);
      }
      else
      {
        v48 = v77;
        v76 = sub_1000D4214(*((_BYTE *)v77 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind));
        v50 = v49;
        v78 = 0;
        v79 = 0xE000000000000000;
        v51 = v17;
        _StringGuts.grow(_:)(52);
        v52._countAndFlagsBits = 0x6120746F6E6E6143;
        v52._object = (void *)0xEB00000000206464;
        String.append(_:)(v52);
        v82 = v48;
        v53 = type metadata accessor for KernelCollection(0);
        v54 = sub_100012534(&qword_100158928, type metadata accessor for KernelCollection, (uint64_t)&unk_100110900);
        v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v53, v54);
        object = v55._object;
        String.append(_:)(v55);
        swift_bridgeObjectRelease(object);
        v57._object = (void *)0x8000000100128810;
        v57._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v57);
        v59._countAndFlagsBits = UUID.uuidString.getter(v58);
        v60 = v59._object;
        String.append(_:)(v59);
        swift_bridgeObjectRelease(v60);
        v61._countAndFlagsBits = 0x207361202CLL;
        v61._object = (void *)0xE500000000000000;
        String.append(_:)(v61);
        v82 = v17;
        v62 = type metadata accessor for RealizedKernelCollection(0);
        v63 = sub_100012534(&qword_10015AFC8, type metadata accessor for RealizedKernelCollection, (uint64_t)&unk_1001100D4);
        v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v62, v63);
        v65 = v64._object;
        String.append(_:)(v64);
        swift_bridgeObjectRelease(v65);
        v66._countAndFlagsBits = 0x4955552073616820;
        v66._object = (void *)0xEA00000000002044;
        String.append(_:)(v66);
        v68._countAndFlagsBits = UUID.uuidString.getter(v67);
        v69 = v68._object;
        String.append(_:)(v68);
        swift_bridgeObjectRelease(v69);
        v70._countAndFlagsBits = 10530;
        v70._object = (void *)0xE200000000000000;
        String.append(_:)(v70);
        v71 = v78;
        v72 = v79;
        v73 = sub_1000122F8();
        v74 = swift_allocError(&type metadata for KMError, v73, 0, 0);
        *(_QWORD *)v75 = v76;
        *(_QWORD *)(v75 + 8) = v50;
        *(_QWORD *)(v75 + 16) = v71;
        *(_QWORD *)(v75 + 24) = v72;
        *(_OWORD *)(v75 + 32) = 0u;
        *(_OWORD *)(v75 + 48) = 0u;
        *(_QWORD *)(v75 + 64) = 0;
        *(_BYTE *)(v75 + 72) = 6;
        swift_willThrow(v74);
        swift_release(v51);
        return (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      }
    }
  }
  else if ((a3 & 1) == 0)
  {
    v78 = 0;
    v79 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease(v79);
    v78 = 0x6120746F6E6E6143;
    v79 = 0xEB00000000206464;
    LOBYTE(v82) = *((_BYTE *)v77 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
    v36 = sub_10004F8F0();
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for CollectionKind, v36);
    v38 = v37._object;
    String.append(_:)(v37);
    swift_bridgeObjectRelease(v38);
    v39._countAndFlagsBits = 0x74756F6874697720;
    v39._object = (void *)0xE900000000000020;
    String.append(_:)(v39);
    LOBYTE(v82) = (_BYTE)a2;
    v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for CollectionKind, v36);
    v41 = v40._object;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v41);
    v42._countAndFlagsBits = 46;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    v43 = v78;
    v44 = v79;
    v45 = sub_1000122F8();
    v46 = swift_allocError(&type metadata for KMError, v45, 0, 0);
    *(_QWORD *)v47 = v43;
    *(_QWORD *)(v47 + 8) = v44;
    *(_OWORD *)(v47 + 16) = 0u;
    *(_OWORD *)(v47 + 32) = 0u;
    *(_OWORD *)(v47 + 48) = 0u;
    *(_QWORD *)(v47 + 64) = 0;
    *(_BYTE *)(v47 + 72) = 9;
    return (uint64_t *)swift_willThrow(v46);
  }
  return result;
}

_QWORD *sub_10009E620(_QWORD *a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  _QWORD v18[10];
  uint64_t v19;
  _BYTE v20[80];

  v9 = sub_100086AB0(a1, a2, a3);
  v10 = v9;
  if (v5)
  {
    v19 = v5;
    swift_errorRetain(v5);
    v11 = sub_100005C88(&qword_10015AB50);
    v12 = swift_dynamicCast(v18, &v19, v11, &type metadata for KMError, 6);
    if ((v12 & 1) != 0)
    {
      sub_100051590((uint64_t)v18, (uint64_t)v20);
      type metadata accessor for OSExtension(0);
      v13 = sub_1000F4600(a1);
      if (!v13)
      {
        swift_willThrow(0);
        sub_10008997C((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000391DC);
        return v10;
      }
      v14 = v13;
      swift_retain(v13);
      sub_10008997C((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000515CC);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a5 + 8));
      v18[0] = *(_QWORD *)(a5 + 8);
      *(_QWORD *)(a5 + 8) = 0x8000000000000000;
      sub_1000A0AC8((uint64_t)v20, v14, isUniquelyReferenced_nonNull_native);
      v16 = *(_QWORD *)(a5 + 8);
      *(_QWORD *)(a5 + 8) = v18[0];
      swift_release_n(v14, 2);
      swift_bridgeObjectRelease(v16);
      v12 = sub_10008997C((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000391DC);
    }
    swift_willThrow(v12);
  }
  else
  {
    sub_10009C538((uint64_t)v9, a5, a4 & 1);
  }
  return v10;
}

_QWORD *sub_10009E78C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[6];
  uint64_t v67;

  v2 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v2);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v62 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v54 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v52 = (char *)&v51 - v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = __CocoaSet.makeIterator()(v9);
    v11 = type metadata accessor for OSExtension(0);
    v12 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
    result = Set.Iterator.init(_cocoa:)(v66, v10, v11, v12);
    a1 = v66[0];
    v59 = v66[1];
    v14 = v66[2];
    v15 = v66[3];
    v16 = v66[4];
  }
  else
  {
    v17 = -1 << *(_BYTE *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 56);
    v59 = a1 + 56;
    v14 = ~v17;
    v19 = -v17;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    else
      v20 = -1;
    v16 = v20 & v18;
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v15 = 0;
  }
  v61 = v5;
  v57 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v53 = v14;
  v55 = _swiftEmptyArrayStorage;
  v58 = (unint64_t)(v14 + 64) >> 6;
  v60 = xmmword_10010F050;
  v56 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    v21 = v15;
    if ((a1 & 0x8000000000000000) == 0)
      break;
    v24 = __CocoaSet.Iterator.next()(result);
    if (!v24)
      goto LABEL_44;
    v25 = v24;
    v67 = v24;
    v26 = type metadata accessor for OSExtension(0);
    swift_unknownObjectRetain(v25);
    swift_dynamicCast(v63, &v67, v56, v26, 7);
    v27 = v63[0];
    v28 = swift_unknownObjectRelease(v25);
    if (!v27)
      goto LABEL_44;
LABEL_34:
    v32 = a1;
    v33 = static os_log_type_t.info.getter(v28);
    v34 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v35 = swift_allocObject(v34, 72, 7);
    *(_OWORD *)(v35 + 16) = v60;
    v36 = (*(uint64_t (**)(void))(*(_QWORD *)v27 + 200))();
    v38 = v37;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    *(_QWORD *)(v35 + 64) = sub_100026838();
    *(_QWORD *)(v35 + 32) = v36;
    *(_QWORD *)(v35 + 40) = v38;
    v39 = sub_10002687C();
    v40 = (void *)static OS_os_log.default.getter(v39);
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v40, "\t%{public}s", 11, 2, v35);
    swift_bridgeObjectRelease(v35);

    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v27 + 112))(v63);
    v41 = v64;
    if (v64)
    {
      v42 = v65;
      sub_100004DE4(v63, v64);
      (*(void (**)(uint64_t, uint64_t))(v42 + 64))(v41, v42);
      v44 = v61;
      v43 = v62;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v4, 0, 1, v61);
      sub_100005D08(v63);
    }
    else
    {
      sub_1000124F8((uint64_t)v63, &qword_100157C78);
      v44 = v61;
      v43 = v62;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v4, 1, 1, v61);
    }
    swift_release(v27);
    a1 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v4, 1, v44) == 1)
    {
      result = (_QWORD *)sub_1000124F8((uint64_t)v4, (uint64_t *)&unk_10015BA60);
    }
    else
    {
      v45 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      v46 = v52;
      v45(v52, v4, v44);
      v45(v54, v46, v44);
      if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
        v55 = (_QWORD *)sub_10000C60C(0, v55[2] + 1, 1, (unint64_t)v55);
      v48 = v55[2];
      v47 = v55[3];
      if (v48 >= v47 >> 1)
        v55 = (_QWORD *)sub_10000C60C(v47 > 1, v48 + 1, 1, (unint64_t)v55);
      v49 = v54;
      v50 = v55;
      v55[2] = v48 + 1;
      result = (_QWORD *)((uint64_t (*)(char *, char *, uint64_t))v45)((char *)v50+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(_QWORD *)(v62 + 72) * v48, v49, v44);
    }
  }
  if (v16)
  {
    v22 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v23 = v22 | (v15 << 6);
LABEL_33:
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v23);
    v28 = swift_retain(v27);
    if (!v27)
      goto LABEL_44;
    goto LABEL_34;
  }
  v29 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    if (v29 >= v58)
      goto LABEL_44;
    v30 = *(_QWORD *)(v59 + 8 * v29);
    ++v15;
    if (!v30)
    {
      v15 = v21 + 2;
      if (v21 + 2 >= v58)
        goto LABEL_44;
      v30 = *(_QWORD *)(v59 + 8 * v15);
      if (!v30)
      {
        v15 = v21 + 3;
        if (v21 + 3 >= v58)
          goto LABEL_44;
        v30 = *(_QWORD *)(v59 + 8 * v15);
        if (!v30)
        {
          v15 = v21 + 4;
          if (v21 + 4 >= v58)
            goto LABEL_44;
          v30 = *(_QWORD *)(v59 + 8 * v15);
          if (!v30)
          {
            v15 = v21 + 5;
            if (v21 + 5 >= v58)
              goto LABEL_44;
            v30 = *(_QWORD *)(v59 + 8 * v15);
            if (!v30)
            {
              v31 = v21 + 6;
              while (v58 != v31)
              {
                v30 = *(_QWORD *)(v59 + 8 * v31++);
                if (v30)
                {
                  v15 = v31 - 1;
                  goto LABEL_32;
                }
              }
LABEL_44:
              sub_100005DE0(a1);
              return v55;
            }
          }
        }
      }
    }
LABEL_32:
    v16 = (v30 - 1) & v30;
    v23 = __clz(__rbit64(v30)) + (v15 << 6);
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

uint64_t sub_10009ED40(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  char v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *i;
  char v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return swift_bridgeObjectRelease(a1);
  v6 = *(_BYTE *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v45 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain(a1);
  v50 = v6;
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain(v8);
  v11 = sub_100035478(v6);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_10009FFB8();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    *(_BYTE *)(v21[6] + v11) = v6;
    v22 = v21[7] + 24 * v11;
    *(_BYTE *)v22 = v7;
    *(_QWORD *)(v22 + 8) = v8;
    *(_QWORD *)(v22 + 16) = v45;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = (_QWORD *)(a1 + 88); ; i += 4)
    {
      v29 = *((_BYTE *)i - 16);
      v8 = *(i - 1);
      v30 = *i;
      v50 = *((_BYTE *)i - 24);
      v28 = v50;
      v31 = (_QWORD *)*a3;
      swift_bridgeObjectRetain(v8);
      v32 = sub_100035478(v50);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_1000A03C0(v36, 1);
        v32 = sub_100035478(v50);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      *(_BYTE *)(v39[6] + v32) = v28;
      v40 = v39[7] + 24 * v32;
      *(_BYTE *)v40 = v29;
      *(_QWORD *)(v40 + 8) = v8;
      *(_QWORD *)(v40 + 16) = v30;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v39[2] = v42;
      if (!--v26)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1000A03C0(v14, a2 & 1);
  v16 = sub_100035478(v6);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v19);
    v49 = v19;
    swift_errorRetain(v19);
    v20 = sub_100005C88(&qword_10015AB50);
    if ((swift_dynamicCast(v20, &v49, v20, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease_n(a1, 2);
      return swift_errorRelease(v49);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ExceptionList.ExceptionType);
  __break(1u);
LABEL_26:
  v47 = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x8000000100122710;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)(&v50, &v47, &type metadata for ExceptionList.ExceptionType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v47, v48, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009F0C0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v32 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v30 = v9;
      v10 = type metadata accessor for OSExtension(0);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v24 = sub_10009F388(v7, result + 1);
    v31 = v24;
    v25 = *(_QWORD *)(v24 + 16);
    if (*(_QWORD *)(v24 + 24) <= v25)
    {
      v28 = v25 + 1;
      swift_retain(a2);
      sub_10009F5A8(v28);
      v26 = v31;
    }
    else
    {
      v26 = v24;
      swift_retain(a2);
    }
    sub_10009F8B8(a2, v26);
    v29 = *v3;
    *v3 = v26;
    swift_bridgeObjectRelease(v29);
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  v13 = type metadata accessor for OSExtension(0);
  v14 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
  swift_bridgeObjectRetain(v6);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v32;
    v31 = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain(v21);
    sub_10009F984(v22, v17, isUniquelyReferenced_nonNull_native);
    v23 = *v2;
    *v2 = v31;
    swift_bridgeObjectRelease(v23);
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_100012534(&qword_100159420, type metadata accessor for OSExtension, (uint64_t)&unk_10011B490);
  while (1)
  {
    v31 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v31, &v32, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  v27 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  *a1 = v27;
  swift_retain(v27);
  return 0;
}

uint64_t sub_10009F388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    sub_100005C88(&qword_10015AFD0);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v25 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for OSExtension(0);
      do
      {
        v23 = v7;
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v25;
        v18 = *(_QWORD *)(v25 + 16);
        if (*(_QWORD *)(v25 + 24) <= v18)
        {
          sub_10009F5A8(v18 + 1);
          v4 = v25;
        }
        v9 = v24;
        v23 = v24;
        v10 = *(_QWORD *)(v4 + 40);
        v11 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
        result = dispatch thunk of Hashable._rawHashValue(seed:)(v10, v8, v11);
        v13 = v4 + 56;
        v14 = -1 << *(_BYTE *)(v4 + 32);
        v15 = result & ~v14;
        v16 = v15 >> 6;
        if (((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6))) != 0)
        {
          v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v19 = 0;
          v20 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v21 = v16 == v20;
            if (v16 == v20)
              v16 = 0;
            v19 |= v21;
            v22 = *(_QWORD *)(v13 + 8 * v16);
          }
          while (v22 == -1);
          v17 = __clz(__rbit64(~v22)) + (v16 << 6);
        }
        *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v4;
}

uint64_t sub_10009F5A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_10015AFD0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v31 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v31)
          goto LABEL_36;
        v17 = v32[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v31)
            goto LABEL_36;
          v17 = v32[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v31)
              goto LABEL_36;
            v17 = v32[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v31)
              {
LABEL_36:
                swift_release(v3);
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v32[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v31)
                    goto LABEL_36;
                  v17 = v32[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
      v20 = *(_QWORD *)(v6 + 40);
      v21 = type metadata accessor for OSExtension(0);
      v22 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
      result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v10 + 8 * v25);
        }
        while (v29 == -1);
        v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t sub_10009F8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = type metadata accessor for OSExtension(0);
  v6 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_10009F984(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = result;
  v21 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10009F5A8(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_10009FB2C();
      goto LABEL_12;
    }
    sub_10009FCD4(v9);
  }
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v4 = type metadata accessor for OSExtension(0);
  v12 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
  result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  v13 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v14 = ~v13;
    v15 = sub_100012534(&qword_100159420, type metadata accessor for OSExtension, (uint64_t)&unk_10011B490);
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      result = dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21, v4, v15);
      if ((result & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v14;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = v6;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v16 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
  return result;
}

void *sub_10009FB2C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100005C88(&qword_10015AFD0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)swift_retain(v17);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10009FCD4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_10015AFD0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v30 = v2;
  v31 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v32 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v32)
      goto LABEL_36;
    v17 = *(_QWORD *)(v31 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_36;
      v17 = *(_QWORD *)(v31 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_36;
        v17 = *(_QWORD *)(v31 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
    v20 = *(_QWORD *)(v6 + 40);
    v21 = type metadata accessor for OSExtension(0);
    v22 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
    swift_retain(v19);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v10 + 8 * v25);
      }
      while (v29 == -1);
      v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v31 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v17 = *(_QWORD *)(v31 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

void *sub_10009FFB8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_100005C88(&qword_10015AFC0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 24 * v15;
    v17 = *(_BYTE *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v20 = *(_QWORD *)(v4 + 56) + 24 * v15;
    *(_BYTE *)v20 = v17;
    *(_QWORD *)(v20 + 8) = v18;
    *(_QWORD *)(v20 + 16) = v19;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000A016C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void *__src;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;

  sub_100005C88(&qword_100159418);
  v33 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    v31 = v1;
    v32 = v3;
    result = (void *)swift_release(v31);
    *v33 = v32;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 64);
  v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  v37 = v3;
  if (v6)
  {
    result = memmove(result, __src, 8 * v5);
    v3 = v37;
  }
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v35 = (unint64_t)(v8 + 63) >> 6;
  v36 = v1;
  while (1)
  {
    if (v10)
    {
      v38 = (v10 - 1) & v10;
      v39 = v7;
      v11 = __clz(__rbit64(v10)) | (v7 << 6);
      v1 = v36;
      v3 = v37;
      goto LABEL_12;
    }
    v27 = v7 + 1;
    v1 = v36;
    v3 = v37;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v35)
      goto LABEL_26;
    v28 = *((_QWORD *)__src + v27);
    v29 = v7 + 1;
    if (!v28)
    {
      v29 = v7 + 2;
      if (v7 + 2 >= v35)
        goto LABEL_26;
      v28 = *((_QWORD *)__src + v29);
      if (!v28)
        break;
    }
LABEL_25:
    v38 = (v28 - 1) & v28;
    v39 = v29;
    v11 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_12:
    v12 = 8 * v11;
    v13 = *(_QWORD *)(v1 + 56);
    v14 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v11);
    v15 = 80 * v11;
    v16 = *(_QWORD *)(v13 + v15);
    v17 = *(_QWORD *)(v13 + v15 + 8);
    v18 = *(_QWORD *)(v13 + v15 + 16);
    v19 = *(_QWORD *)(v13 + v15 + 24);
    v20 = *(_QWORD *)(v13 + v15 + 32);
    v21 = *(_QWORD *)(v13 + v15 + 40);
    v22 = *(_QWORD *)(v13 + v15 + 48);
    v23 = *(_QWORD *)(v13 + v15 + 56);
    v24 = *(_QWORD *)(v13 + v15 + 64);
    v25 = *(_BYTE *)(v13 + v15 + 72);
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + v12) = v14;
    v26 = *(_QWORD *)(v3 + 56) + v15;
    *(_QWORD *)v26 = v16;
    *(_QWORD *)(v26 + 8) = v17;
    *(_QWORD *)(v26 + 16) = v18;
    *(_QWORD *)(v26 + 24) = v19;
    *(_QWORD *)(v26 + 32) = v20;
    *(_QWORD *)(v26 + 40) = v21;
    *(_QWORD *)(v26 + 48) = v22;
    *(_QWORD *)(v26 + 56) = v23;
    *(_QWORD *)(v26 + 64) = v24;
    *(_BYTE *)(v26 + 72) = v25;
    swift_retain(v14);
    result = (void *)sub_1000515CC(v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
    v10 = v38;
    v7 = v39;
  }
  v30 = v7 + 3;
  if (v7 + 3 >= v35)
    goto LABEL_26;
  v28 = *((_QWORD *)__src + v30);
  if (v28)
  {
    v29 = v7 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v35)
      goto LABEL_26;
    v28 = *((_QWORD *)__src + v29);
    ++v30;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000A03C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_10015AFC0);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v39 = v3;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v40)
      break;
    v25 = v41;
    v26 = v41[v24];
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v40)
        goto LABEL_36;
      v26 = v41[v14];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v40)
        {
LABEL_36:
          swift_release(v5);
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v41[v27];
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v40)
              goto LABEL_36;
            v26 = v41[v14];
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = *(_QWORD *)(v5 + 56);
    v33 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v23);
    v34 = (char *)(v32 + 24 * v23);
    v35 = *v34;
    v37 = *((_QWORD *)v34 + 1);
    v36 = *((_QWORD *)v34 + 2);
    if ((v43 & 1) == 0)
      swift_bridgeObjectRetain(v37);
    v15 = *(_QWORD *)(v8 + 40);
    v16 = sub_10003A28C();
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v15, &type metadata for ExceptionList.ExceptionType, v16);
    v17 = -1 << *(_BYTE *)(v8 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v20) = v33;
    v21 = *(_QWORD *)(v8 + 56) + 24 * v20;
    *(_BYTE *)v21 = v35;
    *(_QWORD *)(v21 + 8) = v37;
    *(_QWORD *)(v21 + 16) = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v39;
  v25 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1000A06E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  _QWORD *v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  int64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_100159418);
  v55 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v53 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v51 = v3;
  v52 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  v54 = v5;
  while (1)
  {
    if (v11)
    {
      v28 = __clz(__rbit64(v11));
      v29 = (v11 - 1) & v11;
      v56 = v14;
      v30 = v28 | (v14 << 6);
      goto LABEL_34;
    }
    v31 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v31 >= v52)
      break;
    v32 = v53;
    v33 = v53[v31];
    v34 = v14 + 1;
    if (!v33)
    {
      v34 = v14 + 2;
      if (v14 + 2 >= v52)
        goto LABEL_36;
      v33 = v53[v34];
      if (!v33)
      {
        v35 = v14 + 3;
        if (v14 + 3 >= v52)
        {
LABEL_36:
          swift_release(v5);
          v3 = v51;
          if ((v55 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v33 = v53[v35];
        if (!v33)
        {
          while (1)
          {
            v34 = v35 + 1;
            if (__OFADD__(v35, 1))
              goto LABEL_45;
            if (v34 >= v52)
              goto LABEL_36;
            v33 = v53[v34];
            ++v35;
            if (v33)
              goto LABEL_33;
          }
        }
        v34 = v14 + 3;
      }
    }
LABEL_33:
    v29 = (v33 - 1) & v33;
    v56 = v34;
    v30 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_34:
    v57 = v29;
    v40 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v30);
    v41 = *(_QWORD *)(v5 + 56) + 80 * v30;
    v43 = *(_QWORD *)v41;
    v42 = *(_QWORD *)(v41 + 8);
    v44 = *(_QWORD *)(v41 + 16);
    v45 = *(_QWORD *)(v41 + 24);
    v46 = *(_QWORD *)(v41 + 32);
    v47 = *(_QWORD *)(v41 + 40);
    v48 = *(_QWORD *)(v41 + 48);
    v49 = *(_QWORD *)(v41 + 56);
    v62 = *(_QWORD *)(v41 + 64);
    v61 = *(_BYTE *)(v41 + 72);
    v60 = v40;
    if ((v55 & 1) == 0)
    {
      swift_retain(v40);
      sub_1000515CC(v43, v42, v44, v45, v46, v47, v48, v49, v62, v61);
    }
    v58 = v49;
    v59 = v48;
    v15 = v47;
    v16 = v45;
    v17 = v44;
    v18 = *(_QWORD *)(v8 + 40);
    v19 = type metadata accessor for OSExtension(0);
    v20 = sub_100012534(&qword_100158938, type metadata accessor for OSExtension, (uint64_t)&unk_10011B4B8);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v19, v20);
    v21 = -1 << *(_BYTE *)(v8 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      v26 = v58;
      v25 = v59;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v21) >> 6;
      v26 = v58;
      v25 = v59;
      do
      {
        if (++v23 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v23 == v37;
        if (v23 == v37)
          v23 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v12 + 8 * v23);
      }
      while (v39 == -1);
      v24 = __clz(__rbit64(~v39)) + (v23 << 6);
    }
    *(_QWORD *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v24) = v60;
    v27 = *(_QWORD *)(v8 + 56) + 80 * v24;
    *(_QWORD *)v27 = v43;
    *(_QWORD *)(v27 + 8) = v42;
    *(_QWORD *)(v27 + 16) = v17;
    *(_QWORD *)(v27 + 24) = v16;
    v14 = v56;
    *(_QWORD *)(v27 + 32) = v46;
    *(_QWORD *)(v27 + 40) = v15;
    *(_QWORD *)(v27 + 48) = v25;
    *(_QWORD *)(v27 + 56) = v26;
    *(_QWORD *)(v27 + 64) = v62;
    *(_BYTE *)(v27 + 72) = v61;
    ++*(_QWORD *)(v8 + 16);
    v5 = v54;
    v11 = v57;
  }
  swift_release(v5);
  v3 = v51;
  v32 = v53;
  if ((v55 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v50 = 1 << *(_BYTE *)(v5 + 32);
  if (v50 >= 64)
    bzero(v32, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v32 = -1 << v50;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1000A0AC8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100054894(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return sub_1000A1034(a1, v16[7] + 80 * v10);
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000A016C();
      goto LABEL_7;
    }
    sub_1000A06E4(v13, a3 & 1);
    v18 = sub_100054894(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return sub_1000A1034(a1, v16[7] + 80 * v10);
LABEL_11:
      sub_1000A0BE0(v10, a2, a1, v16);
      return swift_retain(a2);
    }
  }
  v20 = type metadata accessor for OSExtension(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_1000A0BE0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_100051590(a3, a4[7] + 80 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

_QWORD *sub_1000A0C48(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1000A0C64(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1000A0C64(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015AFD8);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[4 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100005C88(&qword_10015AFE0);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release(a4);
  return v11;
}

uint64_t sub_1000A0D84(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(unsigned __int8 *)(*(_QWORD *)(a4 + 56) + 24 * result);
LABEL_8:
  __break(1u);
  return result;
}

_QWORD *sub_1000A0DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  unsigned __int8 *v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_1000A0C48(0, v3, 0);
    v6 = (unsigned __int8 *)(a1 + 32);
    v20 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v8 = *v6++;
      v7 = v8;
      v9 = swift_bridgeObjectRetain(v20);
      v10 = sub_100027EAC(v9, v8);
      if (v2)
        break;
      v13 = v10;
      v14 = v11;
      v15 = v12;
      v17 = _swiftEmptyArrayStorage[2];
      v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1)
        sub_1000A0C48((_QWORD *)(v16 > 1), v17 + 1, 1);
      _swiftEmptyArrayStorage[2] = v17 + 1;
      v18 = &_swiftEmptyArrayStorage[4 * v17];
      *((_BYTE *)v18 + 32) = v7;
      *((_BYTE *)v18 + 40) = v13;
      v18[6] = v14;
      v18[7] = v15;
      if (!--v3)
        return _swiftEmptyArrayStorage;
    }
    swift_release(_swiftEmptyArrayStorage);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000A0F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    a2 += OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
    v5 = 4;
    while (1)
    {
      v6 = v5 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      v8 = v5 - 3;
      if (__OFADD__(v6, 1))
        goto LABEL_12;
LABEL_9:
      v9 = static URL.== infix(_:_:)(*(_QWORD *)(v7 + OBJC_IVAR____TtC10driverkitd24RealizedKernelCollection_collection)+ OBJC_IVAR____TtC10driverkitd16KernelCollection_path, a2);
      swift_release(v7);
      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4)
          continue;
      }
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(a1 + 8 * v5);
    swift_retain(v7);
    v8 = v5 - 3;
    if (!__OFADD__(v6, 1))
      goto LABEL_9;
LABEL_12:
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  }
  v9 = 0;
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return v9 & 1;
}

uint64_t sub_1000A1034(uint64_t a1, uint64_t a2)
{
  assignWithTake for KMError(a2, a1);
  return a2;
}

uint64_t (*sub_1000A1070(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 64, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000A10AC()
{
  uint64_t v0;
  int v1;
  char v2;

  v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 == 2)
  {
    v2 = sub_1000A10E0();
    *(_BYTE *)(v0 + 72) = v2 & 1;
  }
  else
  {
    v2 = v1 & 1;
  }
  return v2 & 1;
}

uint64_t sub_1000A10E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for Logger(0);
  v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v9 = sub_10006B73C();
  v3 = v0 + 2;
  v5 = v0[5];
  v4 = v0[6];
  sub_100004DE4(v3, v5);
  sub_100071700(v5, v4);
  sub_10006AFEC(&v8, (uint64_t)&type metadata for KernelRequests.GetDaemonActive, (uint64_t)&off_100159988, v6);
  sub_100005D08(&v8);
  swift_bridgeObjectRelease(v9);
  return 1;
}

uint64_t sub_1000A1760(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 73, 7);
  *(_BYTE *)(v5 + 72) = 2;
  *(_QWORD *)(v5 + 56) = a1;
  *(_QWORD *)(v5 + 64) = _swiftEmptyArrayStorage;
  sub_100004E2C(a2, v5 + 16);
  return v5;
}

_UNKNOWN **sub_1000A17C0()
{
  uint64_t v0;
  char v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;

  v1 = sub_1000A10E0();
  v2 = *(unsigned __int8 *)(v0 + 72);
  v5 = v2 == 2;
  v3 = v2 & 1;
  v4 = v1 & 1;
  v5 = !v5 && v4 == v3;
  if (v5)
    return 0;
  *(_BYTE *)(v0 + 72) = v4;
  return &off_10014B620;
}

unint64_t sub_1000A1804()
{
  uint64_t v0;
  char v1;
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
  v2 = (v1 & 1) == 0;
  if ((v1 & 1) != 0)
    v3 = 0x6574617669746361;
  else
    v3 = 0x6974636120746F6ELL;
  if (v2)
    v4 = 0xED00006465746176;
  else
    v4 = 0xE900000000000064;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 0x68206E6F6D656144;
  v6._object = (void *)0xEB00000000207361;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(0xEB00000000207361);
  return 0xD00000000000001CLL;
}

uint64_t sub_1000A18E0()
{
  uint64_t v0;

  sub_100005D08((_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 73, 7);
}

uint64_t type metadata accessor for ActivationStateManager()
{
  return objc_opt_self(_TtC10driverkitd22ActivationStateManager);
}

void sub_1000A1934(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  void *object;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL4 v102;
  unint64_t v103;
  __int128 v104;
  void *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[8];
  _QWORD *v115;

  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a7 + 8) + 16))(a6);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 144))(v11);
  swift_release(v11);
  sub_1000547A8(v12, (uint64_t)v114);
  swift_release(v12);
  v13 = (uint64_t)v114;
  v14 = sub_100053200(a1, (uint64_t)a2);
  sub_100010C68(v114);
  if (!v14)
    goto LABEL_59;
  v106 = a5;
  v108 = a1;
  v115 = _swiftEmptyArrayStorage;
  if ((unint64_t)v14 >> 62)
  {
    if (v14 >= 0)
      v25 = v14 & 0xFFFFFFFFFFFFFF8;
    else
      v25 = v14;
    swift_bridgeObjectRetain(v14);
    v15 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v14);
    v107 = a3;
    if (v15)
      goto LABEL_4;
  }
  else
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v107 = a3;
    if (v15)
    {
LABEL_4:
      if (v15 >= 1)
      {
        v105 = a2;
        v16 = 0;
        while (1)
        {
          if ((v14 & 0xC000000000000001) != 0)
          {
            v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v14);
          }
          else
          {
            v17 = *(_QWORD *)(v14 + 8 * v16 + 32);
            swift_retain(v17);
          }
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v17 + 24) + 112))(&v110);
          v18 = v112;
          if (v112)
          {
            v19 = v113;
            sub_100004DE4(&v110, v112);
            (*(void (**)(uint64_t, uint64_t))(v19 + 56))(v18, v19);
            v21 = v20;
            sub_100005D08(&v110);
            v22 = swift_bridgeObjectRelease(v21);
            if (v21)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
              v23 = v115[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
              v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v17);
              specialized ContiguousArray._endMutation()(v24);
              goto LABEL_8;
            }
          }
          else
          {
            sub_1000124F8((uint64_t)&v110, &qword_100157C78);
          }
          swift_release(v17);
LABEL_8:
          if (v15 == ++v16)
          {
            swift_bridgeObjectRelease(v14);
            v14 = (int64_t)v115;
            a2 = v105;
            goto LABEL_21;
          }
        }
      }
      __break(1u);
      goto LABEL_62;
    }
  }
  swift_bridgeObjectRelease(v14);
  v14 = (int64_t)_swiftEmptyArrayStorage;
LABEL_21:
  v26 = v14 < 0 || (v14 & 0x4000000000000000) != 0;
  if (!v26)
  {
    v27 = *(_QWORD *)(v14 + 16);
    if (v27 > 0)
      goto LABEL_26;
    goto LABEL_58;
  }
  swift_bridgeObjectRetain(v14);
  v27 = _CocoaArrayWrapper.endIndex.getter(v93);
  swift_release(v14);
  if (v27 <= 0)
  {
LABEL_58:
    swift_release(v14);
    a1 = v108;
LABEL_59:
    v110 = 0;
    v111 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v94._countAndFlagsBits = 0xD000000000000027;
    v94._object = (void *)0x80000001001288B0;
    String.append(_:)(v94);
    swift_bridgeObjectRetain(a2);
    v95._countAndFlagsBits = a1;
    v95._object = a2;
    String.append(_:)(v95);
    swift_bridgeObjectRelease(a2);
    v96._object = (void *)0x80000001001288E0;
    v96._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v96);
    v97 = v110;
    v98 = v111;
    v99 = sub_1000122F8();
    v45 = swift_allocError(&type metadata for KMError, v99, 0, 0);
    *(_QWORD *)v46 = v97;
    *(_QWORD *)(v46 + 8) = v98;
    *(_OWORD *)(v46 + 16) = 0u;
    *(_OWORD *)(v46 + 32) = 0u;
    *(_OWORD *)(v46 + 48) = 0u;
    *(_QWORD *)(v46 + 64) = 0;
    v47 = 10;
    goto LABEL_60;
  }
LABEL_26:
  v102 = v26;
  v28 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v29 = swift_allocObject(v28, 112, 7);
  v104 = xmmword_10010F380;
  *(_OWORD *)(v29 + 16) = xmmword_10010F380;
  *(_QWORD *)(v29 + 56) = &type metadata for Int;
  *(_QWORD *)(v29 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v29 + 32) = v27;
  v30 = &type metadata for String;
  *(_QWORD *)(v29 + 96) = &type metadata for String;
  v31 = sub_100026838();
  *(_QWORD *)(v29 + 104) = v31;
  *(_QWORD *)(v29 + 72) = v108;
  *(_QWORD *)(v29 + 80) = a2;
  sub_10002687C();
  swift_bridgeObjectRetain(a2);
  v33 = (void *)static OS_os_log.default.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  os_log(_:dso:log:type:_:)("Found %{public}d dexts with bundle identifier %{public}s", 56, 2, &_mh_execute_header, v33, v34, v29);
  swift_bridgeObjectRelease(v29);

  if (a4 >> 60 == 15)
  {
    v35 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_10010F050;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    *(_QWORD *)(v35 + 64) = v31;
    *(_QWORD *)(v35 + 32) = v108;
    *(_QWORD *)(v35 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    v37 = (void *)static OS_os_log.default.getter(v36);
    v38 = static os_log_type_t.default.getter(v37);
    os_log(_:dso:log:type:_:)("No unique identifier available to disambiguate between dexts of bundle identifier %{public}s", 92, 2, &_mh_execute_header, v37, v38, v35);
    swift_bridgeObjectRelease(v35);

    if ((v106 & 1) == 0)
    {
      v58 = swift_allocObject(v28, 72, 7);
      *(_OWORD *)(v58 + 16) = xmmword_10010F050;
      *(_QWORD *)(v58 + 56) = &type metadata for String;
      *(_QWORD *)(v58 + 64) = v31;
      v103 = v31;
      *(_QWORD *)(v58 + 32) = v108;
      *(_QWORD *)(v58 + 40) = a2;
      swift_bridgeObjectRetain(a2);
      v60 = (void *)static OS_os_log.default.getter(v59);
      v61 = static os_log_type_t.default.getter(v60);
      os_log(_:dso:log:type:_:)("Arbitrarily picking first dext with bundle idenfier %{public}s", 62, 2, &_mh_execute_header, v60, v61, v58);
      swift_bridgeObjectRelease(v58);

      if (v102)
      {
        swift_bridgeObjectRetain(v14);
        v63 = _CocoaArrayWrapper.endIndex.getter(v62);
        swift_release(v14);
        if (!v63)
          goto LABEL_56;
      }
      else if (!*(_QWORD *)(v14 + 16))
      {
LABEL_56:
        swift_release(v14);
        return;
      }
      if ((v14 & 0xC000000000000001) != 0)
        goto LABEL_68;
      if (*(_QWORD *)(v14 + 16))
      {
        v55 = a2;
        v56 = *(_QWORD *)(v14 + 32);
        swift_retain(v56);
        goto LABEL_45;
      }
      __break(1u);
      goto LABEL_70;
    }
    swift_release(v14);
    v110 = 0;
    v111 = 0xE000000000000000;
    _StringGuts.grow(_:)(93);
    v39._countAndFlagsBits = 0xD000000000000036;
    v39._object = (void *)0x8000000100128A30;
    String.append(_:)(v39);
    v40._countAndFlagsBits = v108;
    v40._object = a2;
    String.append(_:)(v40);
    v41._countAndFlagsBits = 0xD000000000000025;
    v41._object = (void *)0x8000000100128A70;
    String.append(_:)(v41);
    v42 = v110;
    v43 = v111;
    v44 = sub_1000122F8();
    v45 = swift_allocError(&type metadata for KMError, v44, 0, 0);
    *(_QWORD *)v46 = v42;
    *(_QWORD *)(v46 + 8) = v43;
    *(_OWORD *)(v46 + 16) = 0u;
    *(_OWORD *)(v46 + 32) = 0u;
    *(_OWORD *)(v46 + 48) = 0u;
    *(_QWORD *)(v46 + 64) = 0;
    v47 = 50;
LABEL_60:
    *(_BYTE *)(v46 + 72) = v47;
    swift_willThrow(v45);
    return;
  }
  v101 = v28;
  v48 = swift_allocObject(v28, 112, 7);
  *(_OWORD *)(v48 + 16) = xmmword_10010F380;
  sub_1000122B4(v107, a4);
  v49 = sub_100013834(v107, a4);
  *(_QWORD *)(v48 + 56) = &type metadata for String;
  *(_QWORD *)(v48 + 64) = v31;
  *(_QWORD *)(v48 + 32) = v49;
  *(_QWORD *)(v48 + 40) = v50;
  *(_QWORD *)(v48 + 96) = &type metadata for String;
  *(_QWORD *)(v48 + 104) = v31;
  v103 = v31;
  *(_QWORD *)(v48 + 72) = v108;
  *(_QWORD *)(v48 + 80) = a2;
  swift_bridgeObjectRetain(a2);
  v52 = (void *)static OS_os_log.default.getter(v51);
  v53 = static os_log_type_t.default.getter(v52);
  os_log(_:dso:log:type:_:)("Using unique id %{public}s to pick dext matching bundle identifier %{public}s", 77, 2, &_mh_execute_header, v52, v53, v48);
  swift_bridgeObjectRelease(v48);

  swift_retain(v14);
  sub_10002B23C(v107, a4);
  v13 = (uint64_t)sub_1000A34D4(v14, v107, a4);
  sub_100021610(v107, a4);
  swift_release(v14);
  if (!((unint64_t)v13 >> 62))
  {
    v54 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_31;
  }
LABEL_62:
  if (v13 < 0)
    v100 = v13;
  else
    v100 = v13 & 0xFFFFFFFFFFFFFF8;
  v54 = _CocoaArrayWrapper.endIndex.getter(v100);
LABEL_31:
  v28 = v101;
  v31 = v103;
  if (v54)
  {
    if ((v13 & 0xC000000000000001) != 0)
    {
      v55 = a2;
      v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
      swift_bridgeObjectRelease(v13);
      v57 = v107;
      goto LABEL_35;
    }
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v55 = a2;
      v56 = *(_QWORD *)(v13 + 32);
      swift_retain(v56);
      swift_bridgeObjectRelease(v13);
      v57 = v107;
LABEL_35:
      sub_100021610(v57, a4);
LABEL_45:
      swift_release(v14);
LABEL_46:
      v80 = swift_allocObject(v28, 112, 7);
      *(_OWORD *)(v80 + 16) = v104;
      *(_QWORD *)(v80 + 56) = &type metadata for String;
      *(_QWORD *)(v80 + 64) = v31;
      *(_QWORD *)(v80 + 32) = v108;
      *(_QWORD *)(v80 + 40) = v55;
      v81 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v56 + 24) + 200);
      swift_bridgeObjectRetain(v55);
      v82 = swift_retain(v56);
      v83 = v81(v82);
      *(_QWORD *)(v80 + 96) = &type metadata for String;
      *(_QWORD *)(v80 + 104) = v31;
      *(_QWORD *)(v80 + 72) = v83;
      *(_QWORD *)(v80 + 80) = v84;
      v85 = (void *)static OS_os_log.default.getter(v83);
      v86 = static os_log_type_t.default.getter(v85);
      os_log(_:dso:log:type:_:)("Picked matching dext for bundle identifier %{public}s: %{public}s", 65, 2, &_mh_execute_header, v85, v86, v80);
      swift_release(v56);
      swift_bridgeObjectRelease(v80);

      return;
    }
    __break(1u);
LABEL_68:
    v55 = a2;
    v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
    swift_release(v14);
    v31 = v103;
    goto LABEL_46;
  }
  v64 = swift_bridgeObjectRelease(v13);
  v65 = static os_log_type_t.error.getter(v64);
  v66 = swift_allocObject(v101, 112, 7);
  *(_OWORD *)(v66 + 16) = v104;
  *(_QWORD *)(v66 + 56) = &type metadata for String;
  *(_QWORD *)(v66 + 64) = v103;
  *(_QWORD *)(v66 + 32) = v108;
  *(_QWORD *)(v66 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v67 = sub_100013834(v107, a4);
  *(_QWORD *)(v66 + 96) = &type metadata for String;
  *(_QWORD *)(v66 + 104) = v103;
  *(_QWORD *)(v66 + 72) = v67;
  *(_QWORD *)(v66 + 80) = v68;
  v69 = (void *)static OS_os_log.default.getter(v67);
  os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v69, "No dexts with bundle identifier %{public}s matched unique id %{public}s", 71, 2, v66);
  swift_bridgeObjectRelease(v66);

  if ((v106 & 1) != 0)
  {
    swift_release(v14);
    v110 = 0;
    v111 = 0xE000000000000000;
    _StringGuts.grow(_:)(68);
    v70._countAndFlagsBits = 0xD000000000000029;
    v70._object = (void *)0x8000000100128B40;
    String.append(_:)(v70);
    v71._countAndFlagsBits = v108;
    v71._object = a2;
    String.append(_:)(v71);
    v72._countAndFlagsBits = 0xD000000000000017;
    v72._object = (void *)0x8000000100128B70;
    String.append(_:)(v72);
    v73._countAndFlagsBits = sub_100013834(v107, a4);
    object = v73._object;
    String.append(_:)(v73);
    swift_bridgeObjectRelease(object);
    v75 = v110;
    v76 = v111;
    v77 = sub_1000122F8();
    v78 = swift_allocError(&type metadata for KMError, v77, 0, 0);
    *(_QWORD *)v79 = v75;
    *(_QWORD *)(v79 + 8) = v76;
    *(_OWORD *)(v79 + 16) = 0u;
    *(_OWORD *)(v79 + 32) = 0u;
    *(_OWORD *)(v79 + 48) = 0u;
    *(_QWORD *)(v79 + 64) = 0;
    *(_BYTE *)(v79 + 72) = 10;
    swift_willThrow(v78);
    sub_100021610(v107, a4);
    return;
  }
  v87 = swift_allocObject(v101, 72, 7);
  *(_OWORD *)(v87 + 16) = xmmword_10010F050;
  *(_QWORD *)(v87 + 56) = &type metadata for String;
  *(_QWORD *)(v87 + 64) = v103;
  *(_QWORD *)(v87 + 32) = v108;
  *(_QWORD *)(v87 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v89 = (void *)static OS_os_log.default.getter(v88);
  v90 = static os_log_type_t.default.getter(v89);
  os_log(_:dso:log:type:_:)("Arbitrarily picking first dext with bundle idenfier %{public}s", 62, 2, &_mh_execute_header, v89, v90, v87);
  swift_bridgeObjectRelease(v87);

  if (v102)
  {
    swift_bridgeObjectRetain(v14);
    v92 = _CocoaArrayWrapper.endIndex.getter(v91);
    swift_release(v14);
  }
  else
  {
    v92 = *(_QWORD *)(v14 + 16);
  }
  v60 = (void *)a4;
  v30 = (void *)v107;
  if (!v92)
  {
    sub_100021610(v107, a4);
    goto LABEL_56;
  }
  if ((v14 & 0xC000000000000001) != 0)
  {
LABEL_70:
    v55 = a2;
    v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
    goto LABEL_54;
  }
  if (*(_QWORD *)(v14 + 16))
  {
    v55 = a2;
    v56 = *(_QWORD *)(v14 + 32);
    swift_retain(v56);
LABEL_54:
    sub_100021610((uint64_t)v30, (unint64_t)v60);
    swift_release(v14);
    goto LABEL_46;
  }
  __break(1u);
}

uint64_t sub_1000A2468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  void *v25;
  _QWORD *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char **v32;
  char *v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  void *object;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  Swift::String v90;
  uint64_t v91;
  uint64_t v92;
  Swift::String v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  Swift::String v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t);
  uint64_t v140;
  int v141;
  unint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  char v160;
  uint64_t (*v161)(void);
  char v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  mach_port_name_t v167;
  char v168;
  uint64_t (*v169)(void);
  char v170;
  mach_port_name_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  unsigned int v176;
  char *v177;
  char *v178;
  uint64_t v179;
  id v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD v188[3];
  uint64_t v189;
  _QWORD *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;

  v183 = a3;
  v186 = a4;
  v182 = a2;
  v8 = type metadata accessor for OSSignpostID(0);
  v196 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v172 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005C88(&qword_10015B0F0);
  inited = swift_initStackObject(v11, &v195);
  *(_OWORD *)(inited + 16) = xmmword_10010FE50;
  v191 = a1;
  v13 = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148630);
  if (v14)
  {
    v15 = &type metadata for String;
  }
  else
  {
    v13 = 0;
    v15 = 0;
    *(_QWORD *)(inited + 48) = 0;
  }
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 56) = v15;
  v16 = sub_10006C330(a1);
  if (v17)
  {
    v18 = &type metadata for String;
  }
  else
  {
    v16 = 0;
    v18 = 0;
    *(_QWORD *)(inited + 80) = 0;
  }
  *(_QWORD *)(inited + 64) = v16;
  *(_QWORD *)(inited + 72) = v17;
  *(_QWORD *)(inited + 88) = v18;
  v19 = sub_10006C33C(a1);
  v187 = v5;
  if ((v20 & 1) != 0)
  {
    v21 = 0;
    v19 = 0;
    *(_QWORD *)(inited + 104) = 0;
    *(_QWORD *)(inited + 112) = 0;
  }
  else
  {
    v21 = &type metadata for UInt64;
  }
  v22 = inited + 32;
  *(_QWORD *)(inited + 120) = v21;
  *(_QWORD *)(inited + 96) = v19;
  v23 = (_QWORD *)(inited + 128);
  v24 = sub_10006C350(a1);
  v185 = a5;
  if (v24 == 2)
  {
    v25 = 0;
    *v23 = 0;
    *(_QWORD *)(inited + 136) = 0;
    *(_QWORD *)(inited + 144) = 0;
  }
  else
  {
    *(_BYTE *)v23 = v24 & 1;
    v25 = &type metadata for Bool;
  }
  *(_QWORD *)(inited + 152) = v25;
  v26 = (_QWORD *)(inited + 160);
  v27 = sub_10006C430(a1);
  if ((v27 & 0x100000000) != 0)
  {
    v28 = 0;
    *v26 = 0;
    *(_QWORD *)(inited + 168) = 0;
    *(_QWORD *)(inited + 176) = 0;
  }
  else
  {
    *(_DWORD *)v26 = v27;
    v28 = &type metadata for UInt32;
  }
  *(_QWORD *)(inited + 184) = v28;
  swift_bridgeObjectRetain(inited);
  sub_1000A3780(inited + 32, (uint64_t)&v191);
  if (!v193)
    goto LABEL_26;
  sub_1000124F8((uint64_t)&v191, &qword_100158018);
  sub_1000A3780(inited + 64, (uint64_t)&v191);
  if (!v193
    || (sub_1000124F8((uint64_t)&v191, &qword_100158018), sub_1000A3780(inited + 96, (uint64_t)&v191), !v193)
    || (sub_1000124F8((uint64_t)&v191, &qword_100158018), sub_1000A3780(inited + 128, (uint64_t)&v191), !v193)
    || (sub_1000124F8((uint64_t)&v191, &qword_100158018), sub_1000A3780(inited + 160, (uint64_t)&v191), !v193))
  {
LABEL_26:
    swift_bridgeObjectRelease(inited);
    v46 = sub_1000122F8();
    v47 = swift_allocError(&type metadata for KMError, v46, 0, 0);
    *(_OWORD *)v48 = xmmword_100114170;
    *(_OWORD *)(v48 + 16) = 0u;
    *(_OWORD *)(v48 + 32) = 0u;
    *(_OWORD *)(v48 + 48) = 0u;
    *(_QWORD *)(v48 + 64) = 0;
    *(_BYTE *)(v48 + 72) = 9;
    swift_willThrow(v47);
    sub_1000124F8((uint64_t)&v191, &qword_100158018);
    swift_setDeallocating(inited);
    v49 = *(_QWORD *)(inited + 16);
    v50 = sub_100005C88(&qword_100158018);
    return swift_arrayDestroy(inited + 32, v49, v50);
  }
  sub_1000124F8((uint64_t)&v191, &qword_100158018);
  swift_bridgeObjectRelease(inited);
  swift_setDeallocating(inited);
  v29 = *(_QWORD *)(inited + 16);
  v30 = sub_100005C88(&qword_100158018);
  v31 = swift_arrayDestroy(v22, v29, v30);
  LODWORD(v179) = static os_signpost_type_t.event.getter(v31);
  v180 = (id)*sub_1000D302C();
  v32 = sub_1000901D0();
  v33 = *v32;
  v177 = v32[1];
  v178 = v33;
  v176 = *((unsigned __int8 *)v32 + 16);
  v175 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v34 = swift_allocObject(v175, 192, 7);
  v174 = xmmword_100112440;
  *(_OWORD *)(v34 + 16) = xmmword_100112440;
  v191 = a1;
  result = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148630);
  if (!v36)
  {
    __break(1u);
    goto LABEL_86;
  }
  v37 = result;
  v38 = v36;
  *(_QWORD *)(v34 + 56) = &type metadata for String;
  v39 = sub_100026838();
  *(_QWORD *)(v34 + 64) = v39;
  *(_QWORD *)(v34 + 32) = v37;
  *(_QWORD *)(v34 + 40) = v38;
  result = sub_10006C330(a1);
  if (!v40)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  *(_QWORD *)(v34 + 96) = &type metadata for String;
  *(_QWORD *)(v34 + 104) = v39;
  v181 = v39;
  *(_QWORD *)(v34 + 72) = result;
  *(_QWORD *)(v34 + 80) = v40;
  result = sub_10006C33C(a1);
  if ((v41 & 1) != 0)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  *(_QWORD *)(v34 + 136) = &type metadata for UInt64;
  *(_QWORD *)(v34 + 144) = &protocol witness table for UInt64;
  *(_QWORD *)(v34 + 112) = result;
  v42 = sub_10006C520(a1);
  if (v43 >> 60 == 15)
  {
    v44 = (uint64_t *)(v34 + 152);
    v45 = v181;
    *(_QWORD *)(v34 + 176) = &type metadata for String;
    *(_QWORD *)(v34 + 184) = v45;
  }
  else
  {
    v51 = v42;
    v52 = v43;
    v173 = sub_100013834(v42, v43);
    v54 = v53;
    v42 = sub_100021610(v51, v52);
    v44 = (uint64_t *)(v34 + 152);
    v55 = v181;
    *(_QWORD *)(v34 + 176) = &type metadata for String;
    *(_QWORD *)(v34 + 184) = v55;
    if (v54)
    {
      *v44 = v173;
      v56 = v196;
      v57 = v180;
      v58 = v179;
      goto LABEL_30;
    }
  }
  v56 = v196;
  v57 = v180;
  v58 = v179;
  *v44 = 0x7571696E75206F6ELL;
  v54 = 0xEC00000044492065;
LABEL_30:
  *(_QWORD *)(v34 + 160) = v54;
  static OSSignpostID.exclusive.getter(v42);
  os_signpost(_:dso:log:name:signpostID:_:_:)(v58, &_mh_execute_header, v57, v178, v177, v176, v10, "%{public}s %{public}s 0x%llx %{public}s", 39, 2, v34);

  swift_bridgeObjectRelease(v34);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v10, v8);
  result = sub_10006C430(a1);
  if ((result & 0x100000000) != 0)
  {
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v59 = result;
  if (*(_DWORD *)sub_1000D4DFC() == (_DWORD)result || *(_DWORD *)sub_1000D4DF0() == (_DWORD)v59)
  {
    v191 = 0;
    v192 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(v192);
    v191 = 0xD00000000000001DLL;
    v192 = 0x8000000100128C70;
    LODWORD(v188[0]) = v59;
    v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
    object = v60._object;
    String.append(_:)(v60);
    swift_bridgeObjectRelease(object);
    v62 = v191;
    v63 = v192;
    v64 = sub_1000122F8();
    v65 = swift_allocError(&type metadata for KMError, v64, 0, 0);
    *(_QWORD *)v66 = v62;
    *(_QWORD *)(v66 + 8) = v63;
    *(_OWORD *)(v66 + 16) = 0u;
    *(_OWORD *)(v66 + 32) = 0u;
    *(_OWORD *)(v66 + 48) = 0u;
    *(_QWORD *)(v66 + 64) = 0;
    *(_BYTE *)(v66 + 72) = 9;
    return swift_willThrow(v65);
  }
  v191 = a1;
  result = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148630);
  if (!v67)
    goto LABEL_89;
  v68 = result;
  v69 = v67;
  v70 = sub_10006C520(a1);
  v72 = v71;
  v73 = v184;
  sub_1000A1934(v68, v69, v70, v71, 0, v186, v185);
  if (v73)
  {
    sub_100021610(v70, v72);
    swift_bridgeObjectRelease(v69);
    return mach_port_deallocate(mach_task_self_, v59);
  }
  v75 = v74;
  sub_100021610(v70, v72);
  swift_bridgeObjectRelease(v69);
  if (!v75)
  {
    v191 = 0;
    v192 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v90._object = (void *)0x80000001001288B0;
    v90._countAndFlagsBits = 0xD000000000000027;
    String.append(_:)(v90);
    v188[0] = a1;
    result = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148630);
    if (v91)
    {
      v92 = v91;
      String.append(_:)(*(Swift::String *)&result);
      swift_bridgeObjectRelease(v92);
      v93._countAndFlagsBits = 0xD000000000000015;
      v93._object = (void *)0x80000001001288E0;
      String.append(_:)(v93);
      v94 = v191;
      v95 = v192;
      v96 = sub_1000122F8();
      v97 = swift_allocError(&type metadata for KMError, v96, 0, 0);
      *(_QWORD *)v98 = v94;
      *(_QWORD *)(v98 + 8) = v95;
      *(_OWORD *)(v98 + 16) = 0u;
      *(_OWORD *)(v98 + 32) = 0u;
      *(_OWORD *)(v98 + 48) = 0u;
      *(_QWORD *)(v98 + 64) = 0;
      *(_BYTE *)(v98 + 72) = 10;
      swift_willThrow(v97);
      return mach_port_deallocate(mach_task_self_, v59);
    }
    goto LABEL_91;
  }
  v76 = *(void **)(v75 + 24);
  v77 = type metadata accessor for DriverExtension(0);
  v78 = swift_dynamicCastClass(v76, v77);
  if (!v78)
  {
    v191 = 0;
    v192 = 0xE000000000000000;
    swift_retain(v75);
    v99 = v75;
    _StringGuts.grow(_:)(67);
    v100._object = (void *)0x80000001001288B0;
    v100._countAndFlagsBits = 0xD000000000000027;
    String.append(_:)(v100);
    v188[0] = a1;
    result = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148630);
    if (v101)
    {
      v102 = v101;
      String.append(_:)(*(Swift::String *)&result);
      swift_bridgeObjectRelease(v102);
      v103._countAndFlagsBits = 0xD00000000000001ALL;
      v103._object = (void *)0x8000000100128BC0;
      String.append(_:)(v103);
      v104 = v191;
      v105 = v192;
      v106 = sub_1000122F8();
      v107 = swift_allocError(&type metadata for KMError, v106, 0, 0);
      *(_QWORD *)v108 = v104;
      *(_QWORD *)(v108 + 8) = v105;
      *(_OWORD *)(v108 + 16) = 0u;
      *(_OWORD *)(v108 + 32) = 0u;
      *(_OWORD *)(v108 + 48) = 0u;
      *(_QWORD *)(v108 + 64) = 0;
      *(_BYTE *)(v108 + 72) = 10;
      swift_willThrow(v107);
      swift_release_n(v99, 2);
      return mach_port_deallocate(mach_task_self_, v59);
    }
    goto LABEL_92;
  }
  v79 = (_QWORD *)v78;
  v196 = v75;
  swift_retain(v75);
  swift_retain(v76);
  v80 = sub_1000D7F90();
  v180 = v76;
  v184 = v79;
  if ((v80 & 1) == 0)
  {
    v81 = swift_allocObject(v175, 192, 7);
    *(_OWORD *)(v81 + 16) = v174;
    v191 = a1;
    result = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148630);
    if (!v109)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    v110 = v181;
    *(_QWORD *)(v81 + 56) = &type metadata for String;
    *(_QWORD *)(v81 + 64) = v110;
    *(_QWORD *)(v81 + 32) = result;
    *(_QWORD *)(v81 + 40) = v109;
    result = sub_10006C330(a1);
    if (!v111)
    {
LABEL_97:
      __break(1u);
      goto LABEL_98;
    }
    *(_QWORD *)(v81 + 96) = &type metadata for String;
    *(_QWORD *)(v81 + 104) = v110;
    *(_QWORD *)(v81 + 72) = result;
    *(_QWORD *)(v81 + 80) = v111;
    result = sub_10006C33C(a1);
    if ((v112 & 1) != 0)
    {
LABEL_98:
      __break(1u);
      goto LABEL_99;
    }
    *(_QWORD *)(v81 + 136) = &type metadata for UInt64;
    *(_QWORD *)(v81 + 144) = &protocol witness table for UInt64;
    *(_QWORD *)(v81 + 112) = result;
    v113 = sub_10006C520(a1);
    if (v114 >> 60 == 15)
    {
      v115 = (uint64_t *)(v81 + 152);
      v116 = v181;
      *(_QWORD *)(v81 + 176) = &type metadata for String;
      *(_QWORD *)(v81 + 184) = v116;
    }
    else
    {
      v124 = v113;
      v125 = v114;
      v126 = sub_100013834(v113, v114);
      v128 = v127;
      sub_100021610(v124, v125);
      v115 = (uint64_t *)(v81 + 152);
      v129 = v181;
      *(_QWORD *)(v81 + 176) = &type metadata for String;
      *(_QWORD *)(v81 + 184) = v129;
      if (v128)
      {
        *v115 = v126;
LABEL_60:
        *(_QWORD *)(v81 + 160) = v128;
        v130 = sub_10002687C();
        v131 = (void *)static OS_os_log.default.getter(v130);
        v132 = static os_log_type_t.default.getter(v131);
        os_log(_:dso:log:type:_:)("Launching dext %{public}s %{public}s 0x%llx %{public}s", 54, 2, &_mh_execute_header, v131, v132, v81);
        goto LABEL_64;
      }
    }
    *v115 = 0x7571696E75206F6ELL;
    v128 = 0xEC00000044492065;
    goto LABEL_60;
  }
  LODWORD(v179) = static os_log_type_t.error.getter(v80);
  v81 = swift_allocObject(v175, 192, 7);
  *(_OWORD *)(v81 + 16) = v174;
  v191 = a1;
  result = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148630);
  if (!v82)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v83 = v181;
  *(_QWORD *)(v81 + 56) = &type metadata for String;
  *(_QWORD *)(v81 + 64) = v83;
  *(_QWORD *)(v81 + 32) = result;
  *(_QWORD *)(v81 + 40) = v82;
  result = sub_10006C330(a1);
  if (!v84)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  *(_QWORD *)(v81 + 96) = &type metadata for String;
  *(_QWORD *)(v81 + 104) = v83;
  *(_QWORD *)(v81 + 72) = result;
  *(_QWORD *)(v81 + 80) = v84;
  result = sub_10006C33C(a1);
  if ((v85 & 1) != 0)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  *(_QWORD *)(v81 + 136) = &type metadata for UInt64;
  *(_QWORD *)(v81 + 144) = &protocol witness table for UInt64;
  *(_QWORD *)(v81 + 112) = result;
  v86 = sub_10006C520(a1);
  if (v87 >> 60 == 15)
  {
    v88 = (uint64_t *)(v81 + 152);
    v89 = v181;
    *(_QWORD *)(v81 + 176) = &type metadata for String;
    *(_QWORD *)(v81 + 184) = v89;
LABEL_62:
    *v88 = 0x7571696E75206F6ELL;
    v122 = 0xEC00000044492065;
    goto LABEL_63;
  }
  v117 = v86;
  v118 = v87;
  v119 = v59;
  v120 = sub_100013834(v86, v87);
  v122 = v121;
  sub_100021610(v117, v118);
  v88 = (uint64_t *)(v81 + 152);
  v123 = v181;
  *(_QWORD *)(v81 + 176) = &type metadata for String;
  *(_QWORD *)(v81 + 184) = v123;
  if (!v122)
  {
    v59 = v119;
    goto LABEL_62;
  }
  *v88 = v120;
  v59 = v119;
LABEL_63:
  *(_QWORD *)(v81 + 160) = v122;
  v133 = sub_10002687C();
  v131 = (void *)static OS_os_log.default.getter(v133);
  os_log(_:dso:log:_:_:)(v179, &_mh_execute_header, v131, "(NOT AN ERROR) Launching dext %{public}s %{public}s 0x%llx %{public}s", 69, 2, v81);
LABEL_64:
  swift_bridgeObjectRelease(v81);

  v134 = sub_100080924();
  v135 = *v134;
  v191 = a1;
  swift_retain(v135);
  result = sub_10006AEE0((uint64_t)&type metadata for KernelRequests.DextLaunch, (uint64_t)&off_100148630);
  if (!v136)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v137 = v136;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v135 + 96))(result, v136, 0);
  swift_release(v135);
  swift_bridgeObjectRelease(v137);
  v138 = *(_QWORD *)(v185 + 8);
  v139 = *(uint64_t (**)(uint64_t, uint64_t))(v138 + 16);
  v140 = v139(v186, v138);
  v141 = *(_DWORD *)(v140 + 640);
  swift_release(v140);
  LODWORD(v191) = *(_DWORD *)sub_1000A49B8();
  LODWORD(v188[0]) = v141;
  v142 = sub_100012808();
  v143 = dispatch thunk of SetAlgebra.isSuperset(of:)(&v191, &type metadata for ExtensionManager.Settings.Flags, v142);
  v181 = (unint64_t)v134;
  if ((v143 & 1) == 0 || v183 == 1)
  {
    result = sub_10006C330(a1);
    if (v157)
    {
      v158 = (_QWORD *)result;
      v159 = v157;
      v185 = v59;
      result = sub_10006C33C(a1);
      if ((v160 & 1) == 0)
      {
        v161 = (uint64_t (*)(void))result;
        result = sub_10006C350(a1);
        if (result != 2)
        {
          v162 = result;
          result = sub_10006C430(a1);
          if ((result & 0x100000000) == 0)
          {
            v163 = v196;
            sub_1000CB2E8(v184, v158, v159, v161, v162 & 1, result, v196 + 32, v186, v138);
            swift_bridgeObjectRelease(v159);
            swift_release(v180);
            swift_release_n(v163, 2);
            goto LABEL_83;
          }
          goto LABEL_102;
        }
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  if (v183)
  {
    result = sub_10006C330(a1);
    v179 = result;
    if (v144)
    {
      v145 = v144;
      v185 = v59;
      result = sub_10006C33C(a1);
      if ((v146 & 1) == 0)
      {
        v147 = result;
        result = sub_10006C350(a1);
        if (result != 2)
        {
          v148 = result;
          result = sub_10006C430(a1);
          if ((result & 0x100000000) == 0)
          {
            v149 = v186;
            sub_1000CC4B8(v184, v179, v145, v147, v148 & 1, result, v196 + 32, v182, v183, v186, v138);
            swift_bridgeObjectRelease(v145);
            (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v138 + 8))(&v191, v149, v138);
            v150 = v193;
            v151 = v194;
            sub_100004DE4(&v191, v193);
            sub_100005554(v150, v151);
            v152 = v189;
            v184 = v190;
            sub_100004DE4(v188, v189);
            v153 = v139(v149, v138);
            v154 = *(_QWORD *)(v153 + 160);
            v155 = *(_QWORD *)(v153 + 168);
            swift_bridgeObjectRetain(v155);
            swift_release(v153);
            v156 = v196;
            sub_100016848(v196, v154, v155, v152, (uint64_t)v184);
            swift_bridgeObjectRelease(v155);
            swift_release(v180);
            swift_release_n(v156, 2);
            sub_100005D08(v188);
            sub_100005D08(&v191);
LABEL_83:
            v171 = v185;
            return mach_port_deallocate(mach_task_self_, v171);
          }
          goto LABEL_106;
        }
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  result = sub_10006C330(a1);
  if (!v164)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  v165 = (_QWORD *)result;
  v166 = v164;
  v167 = v59;
  result = sub_10006C33C(a1);
  if ((v168 & 1) != 0)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  v169 = (uint64_t (*)(void))result;
  result = sub_10006C350(a1);
  if (result == 2)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  v170 = result;
  result = sub_10006C430(a1);
  if ((result & 0x100000000) == 0)
  {
    sub_1000CB2E8(v184, v165, v166, v169, v170 & 1, result, v196 + 32, v186, v138);
    swift_bridgeObjectRelease(v166);
    swift_release(v180);
    swift_release_n(v196, 2);
    v171 = v167;
    return mach_port_deallocate(mach_task_self_, v171);
  }
LABEL_110:
  __break(1u);
  return result;
}

_QWORD *sub_1000A34D4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];
  __int128 v31;
  __int128 v32;
  _QWORD *v33;

  v5 = a1;
  v33 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_27;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      v7 = 0;
      v28 = v5 & 0xFFFFFFFFFFFFFF8;
      v29 = v5 & 0xC000000000000001;
      v27 = v5;
      while (v29)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        v9 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_24:
          __break(1u);
          return v33;
        }
LABEL_10:
        v10 = sub_1000268C0();
        v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 288))(0, 0, v10 & 1);
        v12 = (uint64_t *)sub_10008F4E4();
        if (*(_QWORD *)(v11 + 16))
        {
          v14 = *v12;
          v13 = v12[1];
          swift_bridgeObjectRetain(v13);
          v15 = sub_100005DE8(v14, v13);
          if ((v16 & 1) != 0)
          {
            sub_100005D28(*(_QWORD *)(v11 + 56) + 32 * v15, (uint64_t)&v31);
          }
          else
          {
            v31 = 0u;
            v32 = 0u;
          }
          swift_bridgeObjectRelease(v13);
        }
        else
        {
          v31 = 0u;
          v32 = 0u;
        }
        swift_bridgeObjectRelease(v11);
        if (*((_QWORD *)&v32 + 1))
        {
          if ((swift_dynamicCast(v30, &v31, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
          {
            v17 = v6;
            v18 = v30[0];
            v19 = v30[1];
            sub_1000122B4(a2, a3);
            sub_1000122B4(v18, v19);
            sub_100021198(v18, v19);
            v21 = v20;
            sub_100011F40(a2, a3);
            sub_100011F40(v18, v19);
            v22 = sub_100011F40(v18, v19);
            if ((v21 & 1) != 0)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
              v23 = v33[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
              v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v8);
              specialized ContiguousArray._endMutation()(v24);
            }
            else
            {
              swift_release(v8);
            }
            v6 = v17;
            v5 = v27;
            goto LABEL_6;
          }
        }
        else
        {
          sub_1000124F8((uint64_t)&v31, &qword_100158018);
        }
        sub_1000122B4(a2, a3);
        sub_100021610(0, 0xF000000000000000);
        sub_100021610(a2, a3);
        swift_release(v8);
LABEL_6:
        ++v7;
        if (v9 == v6)
          return v33;
      }
      if (v7 < *(_QWORD *)(v28 + 16))
        break;
      __break(1u);
LABEL_27:
      if (v5 < 0)
        v26 = v5;
      else
        v26 = v5 & 0xFFFFFFFFFFFFFF8;
      v6 = _CocoaArrayWrapper.endIndex.getter(v26);
      if (!v6)
        return _swiftEmptyArrayStorage;
    }
    v8 = *(_QWORD *)(v5 + 8 * v7 + 32);
    swift_retain(v8);
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_24;
    goto LABEL_10;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000A3780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_100158018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for DextLaunchContext(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DextLaunchContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1000A386C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000A3884(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DextLaunchContext()
{
  return &type metadata for DextLaunchContext;
}

int main(int argc, const char **argv, const char **envp)
{
  sub_1000D7F44(0xD00000000000001FLL, 0x8000000100128C90, (void (*)(uint64_t))sub_1000A38E8);
  dispatch_main();
}

uint64_t sub_1000A38EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _opaque_pthread_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char **v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void (*v16);
  __int16 v17;
  void *v18;
  void (*v19);
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  NSString v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  char **v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  Swift::String v74;
  void *object;
  Swift::String v76;
  Swift::String v77;
  void *v78;
  Swift::String v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  int v87;
  int v88;
  sched_param v89;
  __int128 v90;
  uint64_t v91;
  _UNKNOWN **v92;
  _QWORD v93[31];
  _QWORD v94[3];
  void *v95;
  void (*v96);
  uint64_t v97;

  v0 = type metadata accessor for OSSignpostID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = 0;
  v4 = pthread_self();
  v88 = 4;
  pthread_set_qos_class_self_np(QOS_CLASS_USER_INTERACTIVE, 0);
  pthread_getschedparam(v4, &v88, &v89);
  v88 = 4;
  v89.sched_priority = 50;
  v5 = pthread_setschedparam(v4, 4, &v89);
  v6 = static os_signpost_type_t.begin.getter(v5);
  v82 = sub_1000D2EF0();
  v7 = (id)*v82;
  v8 = sub_100090218();
  v9 = *v8;
  v10 = v8[1];
  v11 = *((unsigned __int8 *)v8 + 16);
  static OSSignpostID.exclusive.getter(v8);
  os_signpost(_:dso:log:name:signpostID:)(v6, &_mh_execute_header, v7, v9, v10, v11, v3);

  v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v83 = v3;
  v85 = v12;
  v12(v3, v0);
  v13 = type metadata accessor for DriverKitDaemonSideEffects();
  v14 = sub_1000976E0();
  v93[0] = v14;
  sub_100071700(v13, (uint64_t)&off_10014B428);
  v15 = v95;
  v16 = v96;
  sub_100004DE4(v94, (uint64_t)v95);
  v17 = (*((uint64_t (**)(void *, void (*)))v16 + 14))(v15, v16);
  sub_100005D08(v94);
  if ((v17 & 0x100) == 0)
  {
    *(_QWORD *)&v90 = v14;
    sub_10010731C(v13, (uint64_t)&off_10014B428);
    v18 = v95;
    v19 = v96;
    sub_100004DE4(v94, (uint64_t)v95);
    (*((void (**)(__int128 *__return_ptr, uint64_t, unint64_t, void *, void (*)))v19
     + 21))(&v90, 0x6E6F632F7665642FLL, 0xEC000000656C6F73, v18, v19);
    if (v91)
    {
      sub_100004E2C(&v90, (uint64_t)v93);
      sub_100005D08(v94);
      sub_100005C44((uint64_t)v93, (uint64_t)&v90);
      v20 = swift_allocObject(&unk_10014B730, 56, 7);
      sub_100004E2C(&v90, v20 + 16);
      v96 = sub_1000A42F0;
      v97 = v20;
      v94[0] = _NSConcreteStackBlock;
      v94[1] = 1107296256;
      v94[2] = sub_1000A4384;
      v95 = &unk_10014B748;
      v21 = _Block_copy(v94);
      swift_release(v97);
      v22 = (id)os_log_set_hook(v17, v21);
      _Block_release(v21);
      sub_100005D08(v93);
      if (v22)
        _Block_release(v22);
    }
    else
    {
      sub_1000A428C((uint64_t)&v90);
      sub_100005D08(v94);
    }
  }
  v23 = sub_1000D7F90();
  if ((v23 & 1) != 0)
  {
    v24 = static os_log_type_t.error.getter(v23);
    v25 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v26 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v26 + 16) = xmmword_10010F050;
    *(_QWORD *)(v26 + 56) = &type metadata for String;
    *(_QWORD *)(v26 + 64) = sub_100026838();
    *(_QWORD *)(v26 + 32) = 0xD000000000000020;
    *(_QWORD *)(v26 + 40) = 0x8000000100122460;
    v27 = sub_10002687C();
    v28 = (void *)static OS_os_log.default.getter(v27);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v28, "(NOT AN ERROR) Starting driverkitd (%{public}s)", 47, 2, v26);
  }
  else
  {
    v29 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v26 = swift_allocObject(v29, 72, 7);
    *(_OWORD *)(v26 + 16) = xmmword_10010F050;
    *(_QWORD *)(v26 + 56) = &type metadata for String;
    *(_QWORD *)(v26 + 64) = sub_100026838();
    *(_QWORD *)(v26 + 32) = 0xD000000000000020;
    *(_QWORD *)(v26 + 40) = 0x8000000100122460;
    v30 = sub_10002687C();
    v28 = (void *)static OS_os_log.default.getter(v30);
    v31 = static os_log_type_t.default.getter(v28);
    os_log(_:dso:log:type:_:)("Starting driverkitd (%{public}s)", 32, 2, &_mh_execute_header, v28, v31, v26);
  }
  swift_bridgeObjectRelease(v26);

  type metadata accessor for DriverKitDaemon();
  v32 = sub_100097D60();
  v34 = v33;
  v35 = String.utf8CString.getter(v32);
  swift_bridgeObjectRelease(v34);
  LODWORD(v34) = _set_user_dir_suffix(v35 + 32);
  swift_release(v35);
  if ((_DWORD)v34)
  {
    v84 = v0;
    v91 = v13;
    v92 = &off_10014B428;
    *(_QWORD *)&v90 = v14;
    sub_1000A4218((uint64_t)v93);
    sub_1000A4244((uint64_t)v93, (uint64_t)v94);
    swift_retain(v14);
    v36 = (void *)sub_100097CCC();
    v37 = sub_100097D04((uint64_t)&v90, v36, (uint64_t)v94);
    v87 = *(_DWORD *)sub_1000D4DFC();
    v38 = bootstrap_check_in(bootstrap_port, "com.apple.KernelManagementPingServer", (mach_port_t *)&v87);
    v81 = v14;
    if (!(_DWORD)v38)
    {
      v39 = sub_100005C88(&qword_10015B0F8);
      v40 = sub_100073568(v87);
      *(_QWORD *)&v90 = v40;
      v41 = sub_10001284C(&qword_10015B100, &qword_10015B0F8, (uint64_t)&unk_1001124EC);
      sub_100098BE4((uint64_t)&v90, v39, v41);
      swift_release(v40);
      v42 = type metadata accessor for ApplicationRequestSource();
      v43 = sub_10008195C();
      *(_QWORD *)&v90 = v43;
      sub_100098BE4((uint64_t)&v90, v42, (uint64_t)&off_10015A5E0);
      v44 = swift_release(v43);
      v45 = static os_signpost_type_t.event.getter(v44);
      v46 = sub_10002687C();
      v47 = (void *)static OS_os_log.default.getter(v46);
      v48 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v49 = swift_allocObject(v48, 72, 7);
      *(_OWORD *)(v49 + 16) = xmmword_10010F050;
      v50 = (uint64_t *)DriverKitDaemonXPC.serverName.unsafeMutableAddressor();
      v51 = *v50;
      v52 = v50[1];
      *(_QWORD *)(v49 + 56) = &type metadata for String;
      *(_QWORD *)(v49 + 64) = sub_100026838();
      *(_QWORD *)(v49 + 32) = v51;
      *(_QWORD *)(v49 + 40) = v52;
      swift_bridgeObjectRetain(v52);
      v53 = v83;
      static OSSignpostID.exclusive.getter(v54);
      os_signpost(_:dso:log:name:signpostID:_:_:)(v45, &_mh_execute_header, v47, "daemonInit()", 12, 2, v53, "Server name: %{public}s", 23, 2, v49);

      swift_bridgeObjectRelease(v49);
      v85(v53, v84);
      v55 = sub_100005C88(&qword_10015B108);
      v56 = v50[1];
      v57 = objc_allocWithZone((Class)NSXPCListener);
      swift_bridgeObjectRetain(v56);
      v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v56);
      v59 = objc_msgSend(v57, "initWithMachServiceName:", v58);

      v80 = sub_1000743E4(v59, 0xD000000000000027, 0x8000000100128DA0);
      *(_QWORD *)&v90 = v80;
      v60 = sub_10001284C(&qword_10015B110, &qword_10015B108, (uint64_t)&unk_100112518);
      sub_100098BE4((uint64_t)&v90, v55, v60);
      v61 = v81;
      v86 = v81;
      sub_10010AFB8(v13, (uint64_t)&off_10014B428);
      v62 = sub_100005C88(&qword_10015B118);
      v63 = type metadata accessor for RealApprovalsXPCPublisher();
      swift_dynamicCast(&v86, &v90, v62, v63, 7);
      v64 = v86;
      *(_QWORD *)&v90 = v86;
      sub_100098BE4((uint64_t)&v90, v63, (uint64_t)&off_10015C908);
      v65 = sub_100098D7C();
      v66 = static os_signpost_type_t.end.getter(v65);
      v67 = (id)*v82;
      v68 = sub_100090224();
      v69 = *v68;
      v70 = v68[1];
      v71 = *((unsigned __int8 *)v68 + 16);
      static OSSignpostID.exclusive.getter(v68);
      os_signpost(_:dso:log:name:signpostID:)(v66, &_mh_execute_header, v67, v69, v70, v71, v53);
      swift_release(v61);
      swift_release(v37);

      swift_release(v64);
      return ((uint64_t (*)(char *, uint64_t))v85)(v53, v84);
    }
    v73 = v38;
    *(_QWORD *)&v90 = 0;
    *((_QWORD *)&v90 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(*((_QWORD *)&v90 + 1));
    *(_QWORD *)&v90 = 0xD00000000000001BLL;
    *((_QWORD *)&v90 + 1) = 0x8000000100128D50;
    LODWORD(v86) = v73;
    v74._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v74._object;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(object);
    v76._countAndFlagsBits = 10272;
    v76._object = (void *)0xE200000000000000;
    String.append(_:)(v76);
    v77._countAndFlagsBits = sub_1000D1320(v73);
    v78 = v77._object;
    String.append(_:)(v77);
    swift_bridgeObjectRelease(v78);
    v79._countAndFlagsBits = 41;
    v79._object = (void *)0xE100000000000000;
    String.append(_:)(v79);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v90, *((_QWORD *)&v90 + 1), "driverkitd/main.swift", 21, 2, 61, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001CLL, 0x8000000100128D00, "driverkitd/main.swift", 21, 2, 53, 0);
  }
  __break(1u);
  return result;
}

double sub_1000A4218(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 240) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000A4244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88((uint64_t *)&unk_10015ADC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A428C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005C88(&qword_10015B120);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A42CC()
{
  uint64_t v0;

  sub_100005D08((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000A42F0(unsigned __int8 a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = os_log_copy_decorated_message(a1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v1 + 2;
    v5 = String.init(cString:)(v2);
    v7 = v6;
    v9 = v1[5];
    v8 = v1[6];
    sub_100004DE4(v4, v9);
    sub_1001053D4(v5, v7, v9, v8);
    swift_bridgeObjectRelease(v7);
    free(v3);
  }
}

uint64_t sub_1000A4384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v6(a2, a3);
  return swift_release(v5);
}

uint64_t sub_1000A43CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A43DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000A43E4(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&unk_100175748, 0);
}

void *sub_1000A43F4()
{
  if (qword_100164660 != -1)
    swift_once(&qword_100164660, sub_1000A43E4);
  return &unk_100175748;
}

uint64_t sub_1000A4434(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&unk_10017574C, 1);
}

void *sub_1000A4444()
{
  if (qword_100164668 != -1)
    swift_once(&qword_100164668, sub_1000A4434);
  return &unk_10017574C;
}

uint64_t sub_1000A4484(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&unk_100175750, 2);
}

void *sub_1000A4494()
{
  if (qword_100164670 != -1)
    swift_once(&qword_100164670, sub_1000A4484);
  return &unk_100175750;
}

uint64_t sub_1000A44D4(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&unk_100175754, 3);
}

void *sub_1000A44E4()
{
  if (qword_100164678 != -1)
    swift_once(&qword_100164678, sub_1000A44D4);
  return &unk_100175754;
}

uint64_t sub_1000A4524(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&dword_100175758, 4);
}

int *sub_1000A4534()
{
  if (qword_100164680 != -1)
    swift_once(&qword_100164680, sub_1000A4524);
  return &dword_100175758;
}

uint64_t sub_1000A4574(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&dword_10017575C, 5);
}

int *sub_1000A4584()
{
  if (qword_100164688 != -1)
    swift_once(&qword_100164688, sub_1000A4574);
  return &dword_10017575C;
}

uint64_t sub_1000A45C4(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&dword_100175760, 6);
}

int *sub_1000A45D4()
{
  if (qword_100164690 != -1)
    swift_once(&qword_100164690, sub_1000A45C4);
  return &dword_100175760;
}

uint64_t sub_1000A4614(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&dword_100175764, 7);
}

int *sub_1000A4624()
{
  if (qword_100164698 != -1)
    swift_once(&qword_100164698, sub_1000A4614);
  return &dword_100175764;
}

uint64_t sub_1000A4664(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&unk_100175768, 8);
}

void *sub_1000A4674()
{
  if (qword_1001646A0 != -1)
    swift_once(&qword_1001646A0, sub_1000A4664);
  return &unk_100175768;
}

uint64_t sub_1000A46B4(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&dword_10017576C, 9);
}

int *sub_1000A46C4()
{
  if (qword_1001646A8 != -1)
    swift_once(&qword_1001646A8, sub_1000A46B4);
  return &dword_10017576C;
}

uint64_t sub_1000A4704(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&unk_100175770, 10);
}

void *sub_1000A4714()
{
  if (qword_1001646B0 != -1)
    swift_once(&qword_1001646B0, sub_1000A4704);
  return &unk_100175770;
}

uint64_t sub_1000A4754(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&unk_100175774, 11);
}

void *sub_1000A4764()
{
  if (qword_1001646B8 != -1)
    swift_once(&qword_1001646B8, sub_1000A4754);
  return &unk_100175774;
}

uint64_t sub_1000A47A4(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&unk_100175778, 12);
}

void *sub_1000A47B4()
{
  if (qword_1001646C0 != -1)
    swift_once(&qword_1001646C0, sub_1000A47A4);
  return &unk_100175778;
}

uint64_t sub_1000A47F4(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&dword_100175780, 14);
}

int *sub_1000A4804()
{
  if (qword_1001646D0 != -1)
    swift_once(&qword_1001646D0, sub_1000A47F4);
  return &dword_100175780;
}

uint64_t sub_1000A4844(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&unk_100175784, 15);
}

void *sub_1000A4854()
{
  if (qword_1001646D8 != -1)
    swift_once(&qword_1001646D8, sub_1000A4844);
  return &unk_100175784;
}

uint64_t sub_1000A4894(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&dword_100175788, 16);
}

uint64_t sub_1000A48A4(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&unk_100175790, 18);
}

void *sub_1000A48B4()
{
  if (qword_1001646F0 != -1)
    swift_once(&qword_1001646F0, sub_1000A48A4);
  return &unk_100175790;
}

uint64_t sub_1000A48F4(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&dword_100175794, 19);
}

uint64_t sub_1000A4904(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&dword_100175798, 20);
}

int *sub_1000A4914()
{
  if (qword_100164700 != -1)
    swift_once(&qword_100164700, sub_1000A4904);
  return &dword_100175798;
}

uint64_t sub_1000A4954(uint64_t a1)
{
  return sub_1000A4964(a1, (uint64_t)&unk_10017579C, 21);
}

uint64_t sub_1000A4964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;

  v5 = sub_1000771DC();
  v6 = sub_100092820();
  return sub_1000D3780(a3, (uint64_t)&type metadata for ExtensionManager.Settings.Flags, v5, v6, a2);
}

void *sub_1000A49B8()
{
  if (qword_100164708 != -1)
    swift_once(&qword_100164708, sub_1000A4954);
  return &unk_10017579C;
}

uint64_t sub_1000A49F8()
{
  uint64_t *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  void *object;
  Swift::String v16;
  Swift::String v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  Swift::String v25;

  _StringGuts.grow(_:)(132);
  v1._countAndFlagsBits = 0x203A686372610A5BLL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  v2 = *v0;
  v3 = (void *)v0[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0x6E61697261760A2CLL;
  v5._object = (void *)0xEB00000000203A74;
  String.append(_:)(v5);
  v6 = v0[2];
  v7 = (void *)v0[3];
  swift_bridgeObjectRetain(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 0x6C656E72656B0A2CLL;
  v9._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v9);
  v10 = v0[4];
  v11 = (void *)v0[5];
  swift_bridgeObjectRetain(v11);
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v13._object = (void *)0x8000000100128E50;
  v13._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v13);
  v14._countAndFlagsBits = Array.description.getter(v0[6], &type metadata for String);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._countAndFlagsBits = 0xD000000000000011;
  v16._object = (void *)0x8000000100128E70;
  String.append(_:)(v16);
  v17._countAndFlagsBits = Array.description.getter(v0[7], &type metadata for String);
  v18 = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v18);
  v19._object = (void *)0x8000000100128E90;
  v19._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v19);
  v20._countAndFlagsBits = Array.description.getter(v0[8], &type metadata for String);
  v21 = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v21);
  v22._object = (void *)0x8000000100128EB0;
  v22._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v22);
  v23._countAndFlagsBits = Array.description.getter(v0[9], &type metadata for String);
  v24 = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v24);
  v25._countAndFlagsBits = 6097452;
  v25._object = (void *)0xE300000000000000;
  String.append(_:)(v25);
  return 0;
}

uint64_t sub_1000A4C38(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A4C64
                                                            + 4 * asc_1001141A0[a1]))(1751347809, 0xE400000000000000);
}

uint64_t sub_1000A4C64()
{
  return 0x746E6169726176;
}

uint64_t sub_1000A4C7C()
{
  return 0x6C656E72656BLL;
}

unint64_t sub_1000A4C90()
{
  return 0xD000000000000013;
}

uint64_t sub_1000A4CE8()
{
  unsigned __int8 *v0;

  return sub_1000A4C38(*v0);
}

uint64_t sub_1000A4CF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B0F64(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A4D14(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1000A4D20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A4FBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A4D48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A4FBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A4D70(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v1;
  v5 = sub_100005C88(&qword_10015B130);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_1000A4FBC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys, &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v22) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v22) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v22, v5);
    v16 = v3[4];
    v17 = v3[5];
    LOBYTE(v22) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v22, v5);
    v22 = v3[6];
    HIBYTE(v21) = 3;
    v18 = sub_100005C88((uint64_t *)&unk_10015A5D0);
    v19 = sub_100017BA4(&qword_100158038, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v18, v19);
    v22 = v3[7];
    HIBYTE(v21) = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v18, v19);
    v22 = v3[8];
    HIBYTE(v21) = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v18, v19);
    v22 = v3[9];
    HIBYTE(v21) = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000A4FBC()
{
  unint64_t result;

  result = qword_100164718[0];
  if (!qword_100164718[0])
  {
    result = swift_getWitnessTable(&unk_100114608, &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys);
    atomic_store(result, qword_100164718);
  }
  return result;
}

__n128 sub_1000A5000@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  sub_1000B1238(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1000A5048(_QWORD *a1)
{
  return sub_1000A4D70(a1);
}

uint64_t sub_1000A5060()
{
  return 0;
}

__n128 sub_1000A506C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26)
{
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  __n128 v46;
  __int128 v47;
  _OWORD v52[5];
  _OWORD v53[2];
  uint64_t v54;

  sub_1000260AC(a24, (uint64_t)v53, &qword_10015B140);
  v46 = (__n128)v53[1];
  v47 = v53[0];
  v31 = v54;
  sub_1000260AC(a21, (uint64_t)v52, &qword_10015B138);
  v32 = *(_OWORD *)(a19 + 208);
  *(_OWORD *)(a9 + 384) = *(_OWORD *)(a19 + 192);
  *(_OWORD *)(a9 + 400) = v32;
  *(_OWORD *)(a9 + 416) = *(_OWORD *)(a19 + 224);
  v33 = *(_QWORD *)(a19 + 240);
  v34 = *(_OWORD *)(a19 + 144);
  *(_OWORD *)(a9 + 320) = *(_OWORD *)(a19 + 128);
  *(_OWORD *)(a9 + 336) = v34;
  v35 = *(_OWORD *)(a19 + 176);
  *(_OWORD *)(a9 + 352) = *(_OWORD *)(a19 + 160);
  *(_OWORD *)(a9 + 368) = v35;
  v36 = *(_OWORD *)(a19 + 80);
  *(_OWORD *)(a9 + 256) = *(_OWORD *)(a19 + 64);
  *(_OWORD *)(a9 + 272) = v36;
  v37 = *(_OWORD *)(a19 + 112);
  *(_OWORD *)(a9 + 288) = *(_OWORD *)(a19 + 96);
  *(_OWORD *)(a9 + 304) = v37;
  v38 = *(_OWORD *)(a19 + 16);
  *(_OWORD *)(a9 + 192) = *(_OWORD *)a19;
  *(_OWORD *)(a9 + 208) = v38;
  v39 = *(_OWORD *)(a19 + 48);
  *(_OWORD *)(a9 + 224) = *(_OWORD *)(a19 + 32);
  *(_OWORD *)(a9 + 240) = v39;
  v40 = v52[0];
  v41 = v52[1];
  v42 = v52[2];
  v43 = v52[3];
  v44 = v52[4];
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(_OWORD *)(a9 + 112) = a13;
  *(_OWORD *)(a9 + 128) = a14;
  *(_OWORD *)(a9 + 144) = a15;
  *(_OWORD *)(a9 + 160) = a16;
  *(_QWORD *)(a9 + 176) = a17;
  *(_QWORD *)(a9 + 184) = a18;
  *(_QWORD *)(a9 + 432) = v33;
  *(_QWORD *)(a9 + 440) = a20;
  *(_OWORD *)(a9 + 448) = v40;
  *(_OWORD *)(a9 + 464) = v41;
  *(_OWORD *)(a9 + 480) = v42;
  *(_OWORD *)(a9 + 496) = v43;
  *(_OWORD *)(a9 + 512) = v44;
  *(_QWORD *)(a9 + 528) = a22;
  *(_QWORD *)(a9 + 536) = a23;
  result = v46;
  *(_OWORD *)(a9 + 544) = v47;
  *(__n128 *)(a9 + 560) = v46;
  *(_QWORD *)(a9 + 576) = v31;
  *(_DWORD *)(a9 + 584) = a25;
  *(_BYTE *)(a9 + 588) = a26;
  return result;
}

uint64_t sub_1000A5250()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 648, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 648));
}

uint64_t sub_1000A5284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 648, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 648);
  *(_QWORD *)(v1 + 648) = a1;
  return swift_release(v3);
}

uint64_t (*sub_1000A52C8(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 648, a1, 33, 0);
  return j_j__swift_endAccess;
}

unint64_t sub_1000A5304(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_10015AFC0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v17 = v1;
  v6 = (_QWORD *)(v1 + 56);
  while (1)
  {
    v7 = *((_BYTE *)v6 - 24);
    v8 = *((_BYTE *)v6 - 16);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v10);
    result = sub_1000AE1F0(v7, (uint64_t (*)(void))sub_10003A28C, (uint64_t)&type metadata for ExceptionList.ExceptionType, (uint64_t (*)(void))sub_10002B50C);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    v13 = v4[7] + 24 * result;
    *(_BYTE *)v13 = v8;
    *(_QWORD *)(v13 + 8) = v10;
    *(_QWORD *)(v13 + 16) = v9;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v16;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v17;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A5448(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    result = sub_100005DE8(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000A555C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_10015B3F8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v7 = *((_BYTE *)v6 - 8);
    v8 = *v6;
    swift_retain(*v6);
    result = sub_1000AE1F0(v7, (uint64_t (*)(void))sub_10004F934, (uint64_t)&type metadata for CollectionKind, (uint64_t (*)(void))sub_1000262B0);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(_QWORD *)(v4[7] + 8 * result) = v8;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000A5698()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 656, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 656));
}

uint64_t sub_1000A56CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 656, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 656);
  *(_QWORD *)(v1 + 656) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000A5710(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 656, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000A574C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 664, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 664));
}

uint64_t sub_1000A5780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 664, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 664);
  *(_QWORD *)(v1 + 664) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000A57C4(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 664, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000A5800()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 696, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 696));
}

uint64_t sub_1000A5834(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 696, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 696);
  *(_QWORD *)(v1 + 696) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000A5878(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 696, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000A58B4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 728, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 728));
}

uint64_t sub_1000A58E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 728, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 728);
  *(_QWORD *)(v1 + 728) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000A592C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 728, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000A5968()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 736, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 736);
}

uint64_t sub_1000A5998(char a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 736, v4, 1, 0);
  *(_BYTE *)(v1 + 736) = a1;
  return result;
}

uint64_t (*sub_1000A59D4(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 736, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000A5A10(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, 737, 7);
  sub_1000A5A64(a1, a2);
  return v5;
}

uint64_t sub_1000A5A64(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  char **v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  void *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  NSObject *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t (*v89)(char *, uint64_t, uint64_t);
  char **v90;
  char *v91;
  char v92;
  uint64_t v93;
  os_signpost_type_t v94;
  NSObject *v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  void (*v101)(char *, char *, uint64_t);
  char *v102;
  uint8_t *v103;
  os_signpost_id_t v104;
  os_signpost_type_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  Swift::String v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  void *v132;
  Swift::String v133;
  Swift::String v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  void *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char v147;
  NSObject *v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  char *v156;
  uint8_t *v157;
  os_signpost_id_t v158;
  void (*v159)(char *, uint64_t);
  char **v160;
  char *v161;
  char v162;
  uint64_t v163;
  NSObject *v164;
  char *v165;
  void (*v166)(char *, uint64_t);
  char *v167;
  uint8_t *v168;
  os_signpost_id_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  char *v180;
  NSObject *v181;
  uint64_t v182;
  char *v183;
  NSObject *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint8_t *v196;
  os_signpost_id_t v197;
  void (*v198)(char *, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _BOOL4 v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  Swift::String v208;
  __int128 v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t result;
  char *v214;
  char *v215;
  const char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char **v220;
  uint64_t (*v221)(char *, uint64_t, uint64_t);
  char *v222;
  char *v223;
  int v224;
  char *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char **v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t (*v240)(char *, uint64_t, uint64_t);
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  __int128 v246;
  uint64_t v247;
  __int128 v248[2];
  __int128 v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258[37];
  char v259[24];
  char v260[24];
  char v261;
  char v262;
  char v263;
  char v264;

  v3 = (char **)v2;
  v6 = type metadata accessor for OSSignpostError(0);
  v218 = *(_QWORD *)(v6 - 8);
  v219 = v6;
  v7 = __chkstk_darwin(v6);
  v214 = (char *)&v214 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v216 = (char *)&v214 - v9;
  v10 = type metadata accessor for OSSignpostID(0);
  v227 = *(_QWORD *)(v10 - 8);
  v228 = v10;
  v11 = __chkstk_darwin(v10);
  v215 = (char *)&v214 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v226 = (char *)&v214 - v14;
  v15 = __chkstk_darwin(v13);
  v223 = (char *)&v214 - v16;
  v17 = __chkstk_darwin(v15);
  v229 = (char *)&v214 - v18;
  __chkstk_darwin(v17);
  v230 = (char *)&v214 - v19;
  v236 = type metadata accessor for OSSignposter(0);
  v232 = *(_QWORD *)(v236 - 8);
  v20 = __chkstk_darwin(v236);
  v217 = (char *)&v214 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v225 = (char *)&v214 - v23;
  v24 = __chkstk_darwin(v22);
  v222 = (char *)&v214 - v25;
  __chkstk_darwin(v24);
  v231 = (char *)&v214 - v26;
  v27 = type metadata accessor for URL(0);
  v234 = *(_QWORD *)(v27 - 8);
  v235 = v27;
  __chkstk_darwin(v27);
  v233 = (char *)&v214 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + 656) = sub_1000A5304((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v2 + 664) = sub_1000A5448((uint64_t)_swiftEmptyArrayStorage, &qword_10015B3E8);
  *(_QWORD *)(v2 + 680) = 0;
  *(_QWORD *)(v2 + 672) = 0;
  *(_BYTE *)(v2 + 688) = 0;
  *(_QWORD *)(v2 + 696) = sub_1000A5448((uint64_t)_swiftEmptyArrayStorage, &qword_100158C38);
  *(_QWORD *)(v2 + 712) = 0;
  *(_QWORD *)(v2 + 704) = 0;
  *(_BYTE *)(v2 + 720) = 0;
  *(_QWORD *)(v2 + 728) = &_swiftEmptySetSingleton;
  *(_BYTE *)(v2 + 736) = 0;
  v238 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v29 = swift_allocObject(v238, 72, 7);
  v246 = xmmword_10010F050;
  *(_OWORD *)(v29 + 16) = xmmword_10010F050;
  v30 = sub_1000A71DC();
  v32 = v31;
  *(_QWORD *)(v29 + 56) = &type metadata for String;
  v245 = sub_100026838();
  *(_QWORD *)(v29 + 64) = v245;
  *(_QWORD *)(v29 + 32) = v30;
  *(_QWORD *)(v29 + 40) = v32;
  v244 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v33 = (void *)static OS_os_log.default.getter(v244);
  v34 = static os_log_type_t.default.getter(v33);
  os_log(_:dso:log:type:_:)("Initializing with settings: %{private}s", 39, 2, &_mh_execute_header, v33, v34, v29);
  swift_bridgeObjectRelease(v29);

  v241 = a1;
  sub_100005C44((uint64_t)a1, (uint64_t)(v3 + 2));
  memcpy(v3 + 7, a2, 0x24DuLL);
  sub_100037524(a2);
  v35 = sub_1000517B8();
  v44 = sub_1000517C4();
  v36 = sub_100051E38();
  v37 = sub_100051E44();
  v38 = sub_100051E50();
  v39 = sub_100051E5C();
  v40 = sub_100051E68();
  v41 = v39;
  v42 = a2;
  sub_100051E74((uint64_t)v35, v44, (uint64_t)v36, v37, v38, v41, v40, v258);
  v43 = (uint64_t (*)(char *, uint64_t, uint64_t))(v3 + 81);
  v3[81] = (char *)sub_100006090((uint64_t)v258, (uint64_t)&type metadata for LookupTable);
  LODWORD(v44) = a2[146];
  if (qword_100164688 != -1)
    goto LABEL_102;
  while (1)
  {
    v237 = v3;
    v239 = v42;
    v224 = v44;
    v221 = v43;
    if ((dword_10017575C & ~(_DWORD)v44) == 0)
      break;
    v45 = sub_1000902E0();
    swift_beginAccess(v45, v260, 0, 0);
    v46 = *v45;
    *(_QWORD *)&v258[0] = v46;
    swift_bridgeObjectRetain_n(v46, 2);
    v47 = v243;
    sub_1000AE7DC((char **)v258);
    v243 = v47;
    v48 = v238;
    if (v47)
      goto LABEL_120;
    swift_bridgeObjectRelease(v46);
    v242 = *(_QWORD *)&v258[0];
    v240 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v258[0] + 16);
    if (!v240)
    {
LABEL_24:
      swift_release(v242);
      break;
    }
    swift_beginAccess(v43, v259, 0, 0);
    v43 = 0;
    while (1)
    {
      v54 = *((_BYTE *)v43 + v242 + 32);
      v44 = swift_allocObject(v48, 72, 7);
      *(_OWORD *)(v44 + 16) = v246;
      v55 = sub_1000D4214(v54);
      v56 = v245;
      *(_QWORD *)(v44 + 56) = &type metadata for String;
      *(_QWORD *)(v44 + 64) = v56;
      *(_QWORD *)(v44 + 32) = v55;
      *(_QWORD *)(v44 + 40) = v57;
      v58 = (void *)static OS_os_log.default.getter(v55);
      v59 = static os_log_type_t.default.getter(v58);
      os_log(_:dso:log:type:_:)("Looking for the %{public}s", 26, 2, &_mh_execute_header, v58, v59, v44);
      swift_bridgeObjectRelease(v44);

      if (qword_100164710 != -1)
        swift_once(&qword_100164710, sub_1000AE120);
      v60 = qword_1001757A0;
      if (!*(_QWORD *)(qword_1001757A0 + 16))
        break;
      v61 = sub_1000AE1F0(v54, (uint64_t (*)(void))sub_10004F934, (uint64_t)&type metadata for CollectionKind, (uint64_t (*)(void))sub_1000262B0);
      if ((v62 & 1) == 0)
        goto LABEL_101;
      v63 = *(NSObject **)(*(_QWORD *)(v60 + 56) + 8 * v61);
      memcpy(v258, v42, 0x24DuLL);
      sub_100037524(v42);
      swift_retain(v63);
      swift_getAtKeyPath(v258, v63);
      sub_100038E40(v42);
      v64 = v255;
      if (v255)
      {
        v65 = v254;
        v66 = v241[3];
        v67 = v241[4];
        sub_100004DE4(v241, v66);
        sub_10010731C(v66, v67);
        v68 = v256;
        v69 = v257;
        sub_100004DE4(&v254, v256);
        (*(void (**)(__int128 *__return_ptr, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v69 + 112))(&v251, v65, v64, 1, v68, v69);
        if (v252)
        {
          sub_100004E2C(&v251, (uint64_t)v258);
          sub_100005D08(&v254);
          v70 = *((_QWORD *)&v258[1] + 1);
          v71 = *(_QWORD *)&v258[2];
          sub_100004DE4(v258, *((uint64_t *)&v258[1] + 1));
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v71 + 80))(&v249, v70, v71);
          sub_100005C44((uint64_t)v258, (uint64_t)v248);
          if (v250)
          {
            sub_100005D08(v248);
            sub_100004E2C(&v249, (uint64_t)&v251);
          }
          else
          {
            sub_100004E2C(v248, (uint64_t)&v251);
            sub_1000124F8((uint64_t)&v249, &qword_100158930);
          }
          v78 = v252;
          v79 = v253;
          sub_100004DE4(&v251, v252);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v79 + 72))(&v254, v78, v79);
          sub_100005D08(&v251);
          v80 = v233;
          URL.init(fileURLWithPath:)(v65, v64);
          v81 = v64;
          v82 = v80;
          v83 = swift_bridgeObjectRelease(v81);
          v84 = (uint64_t)v237[81];
          __chkstk_darwin(v83);
          v3 = &v214 - 8;
          v42 = v239;
          *(&v214 - 6) = v85;
          *(&v214 - 5) = (char *)v42;
          *(&v214 - 4) = v82;
          *((_BYTE *)&v214 - 24) = v54;
          *(&v214 - 2) = (char *)&v254;
          type metadata accessor for RealizedKernelCollection(0);
          swift_retain(v84);
          v86 = v243;
          sub_100005F34((void (*)(uint64_t))sub_1000B1DC4, (uint64_t)(&v214 - 8), v84);
          v243 = v86;
          if (v86)
          {
            swift_release(v63);
            sub_100038E40(v42);
            v90 = v237;
            swift_release(v237);
            swift_release(v242);
            swift_release(v84);
            (*(void (**)(char *, uint64_t))(v234 + 8))(v82, v235);
            sub_100005D08(&v254);
            goto LABEL_38;
          }
          swift_release(v84);
          swift_release(v63);
          swift_release(v247);
          (*(void (**)(char *, uint64_t))(v234 + 8))(v82, v235);
          sub_100005D08(&v254);
          sub_100005D08(v258);
          v48 = v238;
        }
        else
        {
          sub_1000124F8((uint64_t)&v251, &qword_100158930);
          sub_100005D08(&v254);
          v72 = sub_100026294(v54, 2);
          v48 = v238;
          if (!v72)
          {
            if (qword_100164680 != -1)
              swift_once(&qword_100164680, sub_1000A4524);
            if ((dword_100175758 & ~v224) != 0)
            {
              swift_release(v242);
              v90 = v237;
              swift_release(v237);
              *(_QWORD *)&v258[0] = 0;
              *((_QWORD *)&v258[0] + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(37);
              swift_bridgeObjectRelease(*((_QWORD *)&v258[0] + 1));
              *(_QWORD *)&v258[0] = 0xD000000000000023;
              *((_QWORD *)&v258[0] + 1) = 0x8000000100128FA0;
              v208._countAndFlagsBits = v65;
              v208._object = v64;
              String.append(_:)(v208);
              swift_bridgeObjectRelease(v64);
              v209 = v258[0];
              v210 = sub_1000122F8();
              v211 = swift_allocError(&type metadata for KMError, v210, 0, 0);
              *(_OWORD *)v212 = v209;
              *(_OWORD *)(v212 + 16) = 0u;
              *(_OWORD *)(v212 + 32) = 0u;
              *(_OWORD *)(v212 + 48) = 0u;
              *(_QWORD *)(v212 + 64) = 0;
              *(_BYTE *)(v212 + 72) = 9;
              swift_willThrow(v211);
              sub_100038E40(v239);
              goto LABEL_96;
            }
          }
          swift_bridgeObjectRelease(v64);
          v3 = (char **)swift_allocObject(v48, 72, 7);
          *((_OWORD *)v3 + 1) = v246;
          v73 = sub_1000D4214(v54);
          v74 = v245;
          v3[7] = (char *)&type metadata for String;
          v3[8] = (char *)v74;
          v3[4] = (char *)v73;
          v3[5] = v75;
          v76 = (void *)static OS_os_log.default.getter(v73);
          v77 = static os_log_type_t.default.getter(v76);
          os_log(_:dso:log:type:_:)("Skipping %{public}s, cannot map", 31, 2, &_mh_execute_header, v76, v77, v3);
          swift_release(v63);
          swift_bridgeObjectRelease(v3);

          v42 = v239;
        }
      }
      else
      {
        v3 = (char **)swift_allocObject(v48, 72, 7);
        *((_OWORD *)v3 + 1) = v246;
        v49 = sub_1000D4214(v54);
        v50 = v245;
        v3[7] = (char *)&type metadata for String;
        v3[8] = (char *)v50;
        v3[4] = (char *)v49;
        v3[5] = v51;
        v52 = (void *)static OS_os_log.default.getter(v49);
        v53 = static os_log_type_t.default.getter(v52);
        os_log(_:dso:log:type:_:)("Skipping %{public}s, manager settings does not contain a path to it", 67, 2, &_mh_execute_header, v52, v53, v3);
        swift_release(v63);
        swift_bridgeObjectRelease(v3);

      }
      v43 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)v43 + 1);
      if (v240 == v43)
        goto LABEL_24;
    }
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    swift_once(&qword_100164688, sub_1000A4574);
  }
  v87 = v230;
  v88 = sub_1000D3480();
  v89 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v232 + 16);
  v235 = v88;
  v240 = v89;
  ((void (*)(char *))v89)(v231);
  v90 = sub_1000901E8();
  v91 = *v90;
  v92 = *((_BYTE *)v90 + 16);
  v93 = static OSSignpostID.exclusive.getter(v90);
  v63 = OSSignposter.logHandle.getter(v93);
  v94 = static os_signpost_type_t.begin.getter(v63);
  v95 = v63;
  v96 = OS_os_log.signpostsEnabled.getter();
  v220 = v90;
  if ((v96 & 1) == 0)
    goto LABEL_29;
  if ((v92 & 1) != 0)
  {
    if ((unint64_t)v91 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v91 >> 11 == 27)
      {
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }
      if (v91 >> 16 <= 0x10)
      {
        v91 = &v261;
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_105:
    swift_once(&qword_1001646D0, sub_1000A47F4);
LABEL_81:
    if ((dword_100175780 & ~(_DWORD)v87) != 0)
    {
      v199 = v243;
      (*((void (**)(void))*v90 + 50))();
      if (v199)
      {
        sub_100038E40(v239);
        swift_release(v90);
        swift_release(v242);
LABEL_96:
        v176 = (uint64_t)v63;
        goto LABEL_97;
      }
      LODWORD(v91) = (_DWORD)v87;
      v243 = 0;
    }
    else
    {
      LODWORD(v91) = (_DWORD)v87;
    }
    v95 = (v90 + 87);
    sub_100005C44((uint64_t)v241, (uint64_t)v258);
    v200 = swift_allocObject(&unk_10014B780, 56, 7);
    sub_100004E2C(v258, v200 + 16);
    swift_beginAccess(v90 + 83, &v254, 1, 0);
    v201 = (uint64_t)v90[84];
    v202 = (uint64_t)v90[85];
    v90[84] = (char *)sub_1000B17C4;
    v90[85] = (char *)v200;
    *((_BYTE *)v90 + 688) = 1;
    sub_1000B1DB4(v201, v202);
    if (qword_100164690 != -1)
      swift_once(&qword_100164690, sub_1000A45C4);
    if ((dword_100175760 & ~(_DWORD)v91) == 0)
    {
      v203 = 1;
LABEL_92:
      sub_100005C44((uint64_t)v241, (uint64_t)v258);
      v204 = swift_allocObject(&unk_10014B7A8, 648, 7);
      v205 = v239;
      memcpy((void *)(v204 + 16), v239, 0x24DuLL);
      sub_100004E2C(v258, v204 + 608);
      swift_beginAccess(v95, v258, 33, 0);
      v206 = (uint64_t)v90[88];
      v207 = (uint64_t)v90[89];
      sub_100037524(v205);
      swift_retain(v204);
      sub_1000B1DB4(v206, v207);
      v90[88] = (char *)sub_1000B1BB4;
      v90[89] = (char *)v204;
      if (v203)
        *((_BYTE *)v90 + 720) = 1;
      swift_endAccess(v258);
      sub_100038E40(v239);
      swift_release(v242);
      swift_release(v246);
      swift_release(v204);
      sub_100005D08(v241);
      return (uint64_t)v90;
    }
    if (qword_100164698 == -1)
    {
LABEL_91:
      v203 = (dword_100175764 & ~(_DWORD)v91) == 0;
      goto LABEL_92;
    }
LABEL_113:
    swift_once(&qword_100164698, sub_1000A4614);
    goto LABEL_91;
  }
  if (!v91)
  {
    __break(1u);
LABEL_29:

    v97 = v227;
    v98 = v228;
    v99 = *(char **)(v227 + 16);
    v100 = v229;
    goto LABEL_35;
  }
LABEL_34:
  v98 = v228;
  v101 = *(void (**)(char *, char *, uint64_t))(v227 + 16);
  v102 = v229;
  v101(v229, v230, v228);
  v103 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v103 = 0;
  v104 = OSSignpostID.rawValue.getter(v103);
  v105 = v94;
  v100 = v102;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v63, v105, v104, v91, "", v103, 2u);
  v99 = (char *)v101;
  swift_slowDealloc(v103, -1, -1);

  v97 = v227;
  v87 = v230;
  (*(void (**)(char *, uint64_t))(v227 + 8))(v100, v98);
LABEL_35:
  v230 = v99;
  ((void (*)(char *, char *, uint64_t))v99)(v100, v87, v98);
  v106 = type metadata accessor for OSSignpostIntervalState(0);
  v107 = *(unsigned int *)(v106 + 48);
  v108 = *(unsigned __int16 *)(v106 + 52);
  v227 = v106;
  swift_allocObject(v106, v107, v108);
  v242 = OSSignpostIntervalState.init(id:isOpen:)(v100, 1);
  v234 = *(_QWORD *)(v97 + 8);
  ((void (*)(char *, uint64_t))v234)(v87, v98);
  v109 = *(void (**)(char *, uint64_t))(v232 + 8);
  v109(v231, v236);
  v111 = v42[18];
  v110 = v42[19];
  v112 = (uint64_t *)sub_100026B38();
  v113 = *v112;
  v114 = v112[1];
  swift_bridgeObjectRetain(v114);
  v115 = sub_1000D1BE4(v113, v114);
  v117 = v116;
  swift_bridgeObjectRelease(v114);
  *(_QWORD *)&v258[0] = v111;
  *((_QWORD *)&v258[0] + 1) = v110;
  swift_bridgeObjectRetain(v110);
  v118._countAndFlagsBits = v115;
  v118._object = v117;
  String.append(_:)(v118);
  swift_bridgeObjectRelease(v117);
  v119 = v258[0];
  v120 = v241[3];
  v121 = v241[4];
  sub_100004DE4(v241, v120);
  sub_10009C20C(v120, v121);
  v122 = v256;
  v123 = v257;
  sub_100004DE4(&v254, v256);
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(v123 + 16))(&v251, v119, *((_QWORD *)&v119 + 1), v122, v123);
  swift_bridgeObjectRelease(*((_QWORD *)&v119 + 1));
  v124 = v223;
  if (v252)
  {
    sub_100004E2C(&v251, (uint64_t)v258);
    sub_100005D08(&v254);
    v125 = swift_beginAccess(v221, &v251, 0, 0);
    v90 = v237;
    v126 = (uint64_t)v237[81];
    __chkstk_darwin(v125);
    *(&v214 - 2) = (char *)v90;
    *(&v214 - 1) = (char *)v258;
    type metadata accessor for RealizedInfo(0);
    swift_retain(v126);
    v127 = v243;
    sub_100005F34((void (*)(uint64_t))sub_1000B47E0, (uint64_t)(&v214 - 4), v126);
    v243 = v127;
    if (v127)
    {
      sub_100038E40(v239);
      swift_release(v90);
      swift_release(v242);
      swift_release(v126);
LABEL_38:
      sub_100005D08(v258);
      goto LABEL_98;
    }
    v233 = (char *)v109;
    swift_release(v126);
    swift_release(v254);
    sub_100005D08(v258);
  }
  else
  {
    v233 = (char *)v109;
    sub_1000124F8((uint64_t)&v251, &qword_100157C78);
    sub_100005D08(&v254);
    v128 = sub_100005C88(&qword_10015B148);
    v129 = swift_allocObject(v128, 64, 7);
    *(_OWORD *)(v129 + 16) = v246;
    *(_QWORD *)&v258[0] = 0;
    *((_QWORD *)&v258[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease(*((_QWORD *)&v258[0] + 1));
    *(_QWORD *)&v258[0] = 0x3A676E696E726157;
    *((_QWORD *)&v258[0] + 1) = 0xE900000000000020;
    v130 = (uint64_t *)sub_100026B2C();
    v131 = *v130;
    v132 = (void *)v130[1];
    swift_bridgeObjectRetain(v132);
    v133._countAndFlagsBits = v131;
    v133._object = v132;
    String.append(_:)(v133);
    swift_bridgeObjectRelease(v132);
    v134._countAndFlagsBits = 0x746F6E2073617720;
    v134._object = (void *)0xEF21646E756F6620;
    String.append(_:)(v134);
    v135 = v258[0];
    *(_QWORD *)(v129 + 56) = &type metadata for String;
    *(_OWORD *)(v129 + 32) = v135;
    print(_:separator:terminator:)(v129, 32, 0xE100000000000000, 10, 0xE100000000000000);
    v136 = swift_bridgeObjectRelease(v129);
    v137 = static os_log_type_t.error.getter(v136);
    v138 = swift_allocObject(v238, 72, 7);
    *(_OWORD *)(v138 + 16) = v246;
    v140 = *v130;
    v139 = v130[1];
    v141 = v245;
    *(_QWORD *)(v138 + 56) = &type metadata for String;
    *(_QWORD *)(v138 + 64) = v141;
    *(_QWORD *)(v138 + 32) = v140;
    *(_QWORD *)(v138 + 40) = v139;
    swift_bridgeObjectRetain(v139);
    v143 = (void *)static OS_os_log.default.getter(v142);
    os_log(_:dso:log:_:_:)(v137, &_mh_execute_header, v143, "Warning: %{public}s was not found!", 34, 2, v138);
    swift_bridgeObjectRelease(v138);

  }
  v144 = v222;
  v90 = (char **)v236;
  v145 = v240(v222, v235, v236);
  v146 = *v220;
  v147 = *((_BYTE *)v220 + 16);
  v148 = OSSignposter.logHandle.getter(v145);
  v149 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v246) = static os_signpost_type_t.end.getter(v149);
  v95 = v148;
  v150 = OS_os_log.signpostsEnabled.getter();
  v151 = v228;
  if ((v150 & 1) == 0)
  {

    ((void (*)(char *, uint64_t))v234)(v124, v151);
    ((void (*)(char *, char **))v233)(v144, v90);
    goto LABEL_54;
  }
  if ((v147 & 1) != 0)
  {
    v91 = (char *)v216;
    if (!((unint64_t)v146 >> 32))
    {
      v152 = v218;
      v95 = v219;
      if (v146 >> 11 == 27)
      {
        __break(1u);
        goto LABEL_115;
      }
      if (v146 >> 16 > 0x10)
      {
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      v146 = &v262;
      goto LABEL_50;
    }
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  v91 = (char *)v216;
  if (!v146)
  {
    __break(1u);
    goto LABEL_107;
  }
  v152 = v218;
  v95 = v219;
LABEL_50:
  v153 = v242;
  v154 = swift_retain(v242);
  checkForErrorAndConsumeState(state:)(v154);
  swift_release(v153);
  if ((*(unsigned int (**)(char *, NSObject *))(v152 + 88))(v91, v95) == enum case for OSSignpostError.doubleEnd(_:))
  {
    v155 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, NSObject *))(v152 + 8))(v91, v95);
    v155 = "";
  }
  v156 = v229;
  ((void (*)(char *, char *, uint64_t))v230)(v229, v124, v151);
  v157 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v157 = 0;
  v158 = OSSignpostID.rawValue.getter(v157);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v148, (os_signpost_type_t)v246, v158, v146, v155, v157, 2u);
  swift_slowDealloc(v157, -1, -1);

  v159 = (void (*)(char *, uint64_t))v234;
  ((void (*)(char *, uint64_t))v234)(v124, v151);
  v90 = (char **)v236;
  ((void (*)(char *, uint64_t))v233)(v222, v236);
  v159(v156, v151);
LABEL_54:
  v240(v225, v235, (uint64_t)v90);
  v160 = sub_100090200();
  v161 = *v160;
  v162 = *((_BYTE *)v160 + 16);
  v163 = static OSSignpostID.exclusive.getter(v160);
  v164 = OSSignposter.logHandle.getter(v163);
  LODWORD(v91) = static os_signpost_type_t.begin.getter(v164);
  v95 = v164;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    v165 = v229;
    v90 = (char **)v230;
    v91 = (char *)v226;
    v166 = (void (*)(char *, uint64_t))v234;
    goto LABEL_64;
  }
  LODWORD(v246) = (_DWORD)v91;
  if ((v162 & 1) != 0)
  {
    if ((unint64_t)v161 >> 32)
    {
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
    v91 = (char *)v226;
    v90 = (char **)v230;
    if (v161 >> 11 != 27)
    {
      if (v161 >> 16 <= 0x10)
      {
        v161 = &v263;
        goto LABEL_63;
      }
      goto LABEL_111;
    }
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  v90 = (char **)v230;
  if (!v161)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  v91 = (char *)v226;
LABEL_63:
  v167 = v229;
  ((void (*)(char *, char *, uint64_t))v90)(v229, v91, v151);
  v168 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v168 = 0;
  v169 = OSSignpostID.rawValue.getter(v168);
  v170 = v161;
  v165 = v167;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v164, (os_signpost_type_t)v246, v169, v170, "", v168, 2u);
  swift_slowDealloc(v168, -1, -1);

  v166 = (void (*)(char *, uint64_t))v234;
  ((void (*)(char *, uint64_t))v234)(v167, v151);
LABEL_64:
  v171 = v227;
  ((void (*)(char *, char *, uint64_t))v90)(v165, v91, v151);
  swift_allocObject(v171, *(unsigned int *)(v171 + 48), *(unsigned __int16 *)(v171 + 52));
  v172 = OSSignpostIntervalState.init(id:isOpen:)(v165, 1);
  v166(v91, v151);
  v173 = v236;
  v174 = v233;
  ((void (*)(char *, uint64_t))v233)(v225, v236);
  v90 = v237;
  v175 = v243;
  (*((void (**)(_QWORD, uint64_t))*v237 + 49))(0, 1);
  if (v175)
  {
    sub_100038E40(v239);
    swift_release(v90);
    swift_release(v242);
    v176 = v172;
LABEL_97:
    swift_release(v176);
LABEL_98:
    sub_100005D08(v241);
    return (uint64_t)v90;
  }
  v233 = v174;
  v243 = 0;
  v87 = v217;
  v177 = v240(v217, v235, v173);
  v245 = (unint64_t)*v160;
  v178 = *((_BYTE *)v160 + 16);
  v179 = OSSignposter.logHandle.getter(v177);
  v180 = v215;
  *(_QWORD *)&v246 = v172;
  v181 = v179;
  v182 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v244) = static os_signpost_type_t.end.getter(v182);
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    ((void (*)(char *, uint64_t))v234)(v180, v228);
    ((void (*)(char *, uint64_t))v233)(v87, v173);
    LODWORD(v87) = v224;
    goto LABEL_80;
  }
  if ((v178 & 1) == 0)
  {
    v183 = v217;
    if (v245)
    {
      v184 = v181;
      v186 = v218;
      v185 = v219;
      v187 = v214;
LABEL_76:
      v188 = v246;
      v189 = swift_retain(v246);
      checkForErrorAndConsumeState(state:)(v189);
      swift_release(v188);
      if ((*(unsigned int (**)(char *, uint64_t))(v186 + 88))(v187, v185) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v190 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v186 + 8))(v187, v185);
        v190 = "";
      }
      LODWORD(v87) = v224;
      v191 = v165;
      v192 = v180;
      v193 = v165;
      v194 = v180;
      v195 = v228;
      ((void (*)(char *, char *, uint64_t))v230)(v191, v192, v228);
      v196 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v196 = 0;
      v197 = OSSignpostID.rawValue.getter(v196);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v184, (os_signpost_type_t)v244, v197, (const char *)v245, v190, v196, 2u);
      swift_slowDealloc(v196, -1, -1);

      v198 = (void (*)(char *, uint64_t))v234;
      ((void (*)(char *, uint64_t))v234)(v194, v195);
      ((void (*)(char *, uint64_t))v233)(v183, v236);
      v198(v193, v195);
      v90 = v237;
LABEL_80:
      v63 = v246;
      if (qword_1001646D0 == -1)
        goto LABEL_81;
      goto LABEL_105;
    }
    goto LABEL_116;
  }
  v183 = v217;
  if (HIDWORD(v245))
  {
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  v184 = v181;
  v186 = v218;
  v185 = v219;
  v187 = v214;
  if (v245 >> 11 != 27)
  {
    if (WORD1(v245) <= 0x10u)
    {
      v245 = (unint64_t)&v264;
      goto LABEL_76;
    }
    goto LABEL_118;
  }
LABEL_119:
  __break(1u);
LABEL_120:
  result = swift_release(*(_QWORD *)&v258[0]);
  __break(1u);
  return result;
}

uint64_t sub_1000A71DC()
{
  _QWORD *v0;
  _QWORD *v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  _QWORD *v60;
  id v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  Swift::String v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  id v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  void *v96;
  void *v97;
  Swift::String v98;
  Swift::String v99;
  uint64_t v100;
  void *v101;
  void *v102;
  Swift::String v103;
  Swift::String v104;
  uint64_t v105;
  void *v106;
  Swift::String v107;
  Swift::String v108;
  unint64_t v109;
  _QWORD *v110;
  Swift::String v111;
  void *object;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[40];
  char v122[8];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD v134[3];
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v1 = v0;
  v134[0] = 0;
  v134[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(270);
  v2._countAndFlagsBits = 0xD000000000000011;
  v2._object = (void *)0x8000000100128FF0;
  String.append(_:)(v2);
  v3 = v0[2];
  if (v3)
  {
    v4 = v0[1];
    v5 = (void *)v0[2];
  }
  else
  {
    v5 = (void *)0xE500000000000000;
    v4 = 0x296C696E28;
  }
  swift_bridgeObjectRetain(v3);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0x3A6D65747379530ALL;
  v7._object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  v8 = v0[4];
  if (v8)
  {
    v9 = v0[3];
    v10 = (void *)v0[4];
  }
  else
  {
    v10 = (void *)0xE500000000000000;
    v9 = 0x296C696E28;
  }
  swift_bridgeObjectRetain(v8);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0x61696C697875410ALL;
  v12._object = (void *)0xEC000000203A7972;
  String.append(_:)(v12);
  v13 = v0[6];
  if (v13)
  {
    v14 = v0[5];
    v15 = (void *)v0[6];
  }
  else
  {
    v15 = (void *)0xE500000000000000;
    v14 = 0x296C696E28;
  }
  swift_bridgeObjectRetain(v13);
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15);
  v17._countAndFlagsBits = 0xD000000000000010;
  v17._object = (void *)0x8000000100129010;
  String.append(_:)(v17);
  v126 = v0[9];
  v134[0] = v126;
  swift_bridgeObjectRetain(v126);
  v18 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  v19 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
  v20 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v18, v19);
  v22 = v21;
  sub_10005C73C(&v126);
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v24._countAndFlagsBits = 0x20656C646E75420ALL;
  v24._object = (void *)0xEF203A7368746150;
  String.append(_:)(v24);
  v125 = v0[10];
  v134[0] = v125;
  swift_bridgeObjectRetain(v125);
  v25 = sub_100005C88(&qword_10015B150);
  v26 = sub_10001284C(&qword_10015B158, &qword_10015B150, (uint64_t)&protocol conformance descriptor for Set<A>);
  v27 = sub_100026250();
  v28 = Sequence<>.joined(separator:)(8236, 0xE200000000000000, v25, v26, v27);
  v30 = v29;
  sub_10005C73C(&v125);
  v31._countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v30);
  v32._countAndFlagsBits = 0xD000000000000015;
  v32._object = (void *)0x8000000100129030;
  String.append(_:)(v32);
  v124 = v0[11];
  v134[0] = v124;
  swift_bridgeObjectRetain(v124);
  v33 = Sequence<>.joined(separator:)(8236, 0xE200000000000000, v25, v26, v27);
  v35 = v34;
  sub_10005C73C(&v124);
  v36._countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v35);
  v37._object = (void *)0x8000000100129050;
  v37._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v37);
  v123 = v0[12];
  v134[0] = v123;
  swift_bridgeObjectRetain(v123);
  v119 = v19;
  v120 = v18;
  v38 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v18, v19);
  v40 = v39;
  sub_10005C73C(&v123);
  v41._countAndFlagsBits = v38;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v40);
  v42._countAndFlagsBits = 0xD000000000000017;
  v42._object = (void *)0x8000000100129070;
  String.append(_:)(v42);
  v43 = v0[13];
  v44 = (void *)v0[14];
  swift_bridgeObjectRetain(v44);
  v45._countAndFlagsBits = v43;
  v45._object = v44;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v44);
  v46._object = (void *)0x8000000100129090;
  v46._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v46);
  v47 = v0[15];
  v48 = (void *)v0[16];
  swift_bridgeObjectRetain(v48);
  v49._countAndFlagsBits = v47;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v48);
  v50._countAndFlagsBits = 0x746E61697261560ALL;
  v50._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v50);
  sub_1000260AC((uint64_t)(v0 + 17), (uint64_t)v122, &qword_10015B160);
  sub_1000260AC((uint64_t)v122, (uint64_t)&v127, &qword_10015B160);
  if (v127 == 5)
  {
    v51 = 0xE500000000000000;
    v52 = 0x296C696E28;
  }
  else
  {
    v52 = sub_10009046C(v127);
    v51 = v53;
  }
  v54 = v51;
  String.append(_:)(*(Swift::String *)&v52);
  swift_bridgeObjectRelease(v51);
  v55._countAndFlagsBits = 0x7265746C69460A0ALL;
  v55._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v55);
  sub_1000260AC((uint64_t)(v0 + 68), (uint64_t)v121, &qword_10015B140);
  sub_1000260AC((uint64_t)v121, (uint64_t)v134, &qword_10015B140);
  if (!v134[0])
  {
    v70 = (void *)0xE500000000000000;
    v71 = 0x296C696E28;
    goto LABEL_32;
  }
  v56 = v135;
  v136 = v135;
  if ((unint64_t)v135 >> 62)
  {
    if (v135 >= 0)
      v72 = v135 & 0xFFFFFFFFFFFFFF8;
    else
      v72 = v135;
    swift_bridgeObjectRetain(v135);
    v57 = _CocoaArrayWrapper.endIndex.getter(v72);
    if (v57)
      goto LABEL_16;
  }
  else
  {
    v57 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v135);
    if (v57)
    {
LABEL_16:
      v132 = _swiftEmptyArrayStorage;
      result = sub_10000C958(0, v57 & ~(v57 >> 63), 0);
      if (v57 < 0)
      {
        __break(1u);
        goto LABEL_59;
      }
      v113 = v26;
      v115 = v25;
      v117 = v1;
      v59 = 0;
      v60 = v132;
      do
      {
        if ((v56 & 0xC000000000000001) != 0)
          v61 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v59, v56);
        else
          v61 = *(id *)(v56 + 8 * v59 + 32);
        v62 = v61;
        v63 = objc_msgSend(v61, "predicateFormat");
        v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        v66 = v65;

        v132 = v60;
        v68 = v60[2];
        v67 = v60[3];
        if (v68 >= v67 >> 1)
        {
          sub_10000C958(v67 > 1, v68 + 1, 1);
          v60 = v132;
        }
        ++v59;
        v60[2] = v68 + 1;
        v69 = &v60[2 * v68];
        v69[4] = v64;
        v69[5] = v66;
      }
      while (v57 != v59);
      sub_10005C73C(&v136);
      v25 = v115;
      v1 = v117;
      v26 = v113;
      goto LABEL_31;
    }
  }
  sub_10005C73C(&v136);
  v60 = _swiftEmptyArrayStorage;
LABEL_31:
  v132 = v60;
  v71 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v120, v119);
  v70 = v73;
  swift_bridgeObjectRelease(v60);
LABEL_32:
  v74._countAndFlagsBits = v71;
  v74._object = v70;
  String.append(_:)(v74);
  swift_bridgeObjectRelease(v70);
  v75._countAndFlagsBits = 0x207265746C69460ALL;
  v75._object = (void *)0xED0000203A6C6C41;
  String.append(_:)(v75);
  sub_1000260AC((uint64_t)v121, (uint64_t)&v132, &qword_10015B140);
  if (v132)
  {
    v76 = v133;
    v137 = v133;
    if ((unint64_t)v133 >> 62)
    {
      if (v133 >= 0)
        v91 = v133 & 0xFFFFFFFFFFFFFF8;
      else
        v91 = v133;
      swift_bridgeObjectRetain(v133);
      v77 = _CocoaArrayWrapper.endIndex.getter(v91);
      if (v77)
      {
LABEL_35:
        v130 = _swiftEmptyArrayStorage;
        result = sub_10000C958(0, v77 & ~(v77 >> 63), 0);
        if ((v77 & 0x8000000000000000) == 0)
        {
          v114 = v26;
          v116 = v25;
          v118 = v1;
          v78 = 0;
          v79 = v130;
          do
          {
            if ((v76 & 0xC000000000000001) != 0)
              v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v78, v76);
            else
              v80 = *(id *)(v76 + 8 * v78 + 32);
            v81 = v80;
            v82 = objc_msgSend(v80, "predicateFormat");
            v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
            v85 = v84;

            v130 = v79;
            v87 = v79[2];
            v86 = v79[3];
            if (v87 >= v86 >> 1)
            {
              sub_10000C958(v86 > 1, v87 + 1, 1);
              v79 = v130;
            }
            ++v78;
            v79[2] = v87 + 1;
            v88 = &v79[2 * v87];
            v88[4] = v83;
            v88[5] = v85;
          }
          while (v77 != v78);
          sub_10005C73C(&v137);
          v25 = v116;
          v1 = v118;
          v26 = v114;
          goto LABEL_50;
        }
LABEL_59:
        __break(1u);
        return result;
      }
    }
    else
    {
      v77 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v133);
      if (v77)
        goto LABEL_35;
    }
    sub_10005C73C(&v137);
    v79 = _swiftEmptyArrayStorage;
LABEL_50:
    v130 = v79;
    v90 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v120, v119);
    v89 = v92;
    swift_bridgeObjectRelease(v79);
    goto LABEL_51;
  }
  v89 = (void *)0xE500000000000000;
  v90 = 0x296C696E28;
LABEL_51:
  v93._countAndFlagsBits = v90;
  v93._object = v89;
  String.append(_:)(v93);
  swift_bridgeObjectRelease(v89);
  v94._countAndFlagsBits = 0x203A6564696C450ALL;
  v94._object = (void *)0xE800000000000000;
  String.append(_:)(v94);
  sub_1000260AC((uint64_t)v121, (uint64_t)&v130, &qword_10015B140);
  if (v130)
  {
    v138 = v131;
    v128 = v131;
    swift_bridgeObjectRetain(v131);
    v95 = Sequence<>.joined(separator:)(8236, 0xE200000000000000, v25, v26, v27);
    v97 = v96;
    sub_10005C73C(&v138);
  }
  else
  {
    v97 = (void *)0xE500000000000000;
    v95 = 0x296C696E28;
  }
  v98._countAndFlagsBits = v95;
  v98._object = v97;
  String.append(_:)(v98);
  swift_bridgeObjectRelease(v97);
  v99._countAndFlagsBits = 0x616E6F6974704F0ALL;
  v99._object = (void *)0xEB00000000203A6CLL;
  String.append(_:)(v99);
  sub_1000260AC((uint64_t)v121, (uint64_t)&v128, &qword_10015B140);
  if (v128)
  {
    v139 = v129;
    swift_bridgeObjectRetain(v129);
    v100 = Sequence<>.joined(separator:)(8236, 0xE200000000000000, v25, v26, v27);
    v102 = v101;
    sub_10005C73C(&v139);
  }
  else
  {
    v102 = (void *)0xE500000000000000;
    v100 = 0x296C696E28;
  }
  v103._countAndFlagsBits = v100;
  v103._object = v102;
  String.append(_:)(v103);
  swift_bridgeObjectRelease(v102);
  v104._countAndFlagsBits = 0x656D756C6F560A0ALL;
  v104._object = (void *)0xEF203A746F6F5220;
  String.append(_:)(v104);
  v105 = v1[18];
  v106 = (void *)v1[19];
  swift_bridgeObjectRetain(v106);
  v107._countAndFlagsBits = v105;
  v107._object = v106;
  String.append(_:)(v107);
  swift_bridgeObjectRelease(v106);
  v108._countAndFlagsBits = 0x203A7367616C460ALL;
  v108._object = (void *)0xE800000000000000;
  String.append(_:)(v108);
  v109 = sub_1000771DC();
  v110 = (_QWORD *)sub_1000B1DE8();
  v111._countAndFlagsBits = sub_1000D3978((uint64_t)&type metadata for ExtensionManager.Settings.Flags, v109, v110);
  object = v111._object;
  String.append(_:)(v111);
  swift_bridgeObjectRelease(object);
  return 0;
}

uint64_t sub_1000A7C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25[2];
  uint64_t v26;

  v23 = a1;
  v24 = a2;
  v22 = a7;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KernelCollection(0);
  v15 = *a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  v16 = a3[13];
  v17 = a3[14];
  sub_100005C44(a6, (uint64_t)v25);
  swift_bridgeObjectRetain(v17);
  v18 = sub_10004D63C(v15, (uint64_t)v14, v16, v17, a5, v25);
  v19 = v26;
  v20 = sub_10009D694(v18, v23);
  result = swift_release(v18);
  if (!v19)
    *v22 = v20;
  return result;
}

void (*sub_1000A7D74(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_1000AF334(v6, a2, a3);
  return sub_100029040;
}

uint64_t sub_1000A7DE0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_100004DE4(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 72))(v1, v2);
}

uint64_t sub_1000A7E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];

  v2 = v0;
  v3 = v0 + 664;
  swift_beginAccess(v3, v12, 33, 0);
  v4 = *(void (**)(uint64_t))(v2 + 672);
  if (v4)
  {
    if ((*(_BYTE *)(v2 + 688) & 1) != 0)
    {
      v5 = *(_QWORD *)(v2 + 680);
      swift_retain(v5);
      v6 = v3;
      v7 = v5;
      v4(v6);
      if (v1)
      {
        swift_endAccess(v12);
        sub_1000B1DB4((uint64_t)v4, v5);
        return v7;
      }
      sub_1000B1DB4((uint64_t)v4, v5);
    }
    v8 = swift_endAccess(v12);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 192))(v8);
    sub_1000A7F74(v9);
    v7 = v10;
    swift_bridgeObjectRelease(v9);
    return v7;
  }
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(0xE000000000000000);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000020, 0x80000001001290D0, "driverkitd/Manager.swift", 24, 2, 695, 0);
  __break(1u);
  return result;
}

void sub_1000A7F74(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[9];
  __int128 v34[2];
  _QWORD *v35;

  v2 = &_swiftEmptyDictionarySingleton;
  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  v35 = &_swiftEmptyDictionarySingleton;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & v3;
  v8 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  if (!v7)
    goto LABEL_8;
LABEL_5:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    if (*(_QWORD *)(v12 + 16))
    {
      v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = v17[1];
      v32 = *v17;
      sub_100005C44(v12 + 32, (uint64_t)v34);
      v19 = v2[2];
      if (v2[3] <= v19)
      {
        v20 = v19 + 1;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v12);
        sub_1000AFA64(v20, 1);
        v2 = v35;
      }
      else
      {
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v12);
      }
      Hasher.init(_seed:)(v33, v2[5]);
      String.hash(into:)(v33, v32, v18);
      v21 = Hasher._finalize()();
      v22 = v2 + 8;
      v23 = -1 << *((_BYTE *)v2 + 32);
      v24 = v21 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~v2[(v24 >> 6) + 8]) == 0)
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v23) >> 6;
        while (++v25 != v28 || (v27 & 1) == 0)
        {
          v29 = v25 == v28;
          if (v25 == v28)
            v25 = 0;
          v27 |= v29;
          v30 = v22[v25];
          if (v30 != -1)
          {
            v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            goto LABEL_37;
          }
        }
        goto LABEL_41;
      }
      v26 = __clz(__rbit64((-1 << v24) & ~v2[(v24 >> 6) + 8])) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_37:
      *(_QWORD *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      v31 = (_QWORD *)(v2[6] + 16 * v26);
      *v31 = v32;
      v31[1] = v18;
      sub_100004E2C(v34, v2[7] + 40 * v26);
      ++v2[2];
      swift_bridgeObjectRelease(v12);
      if (v7)
        goto LABEL_5;
    }
    else if (v7)
    {
      goto LABEL_5;
    }
LABEL_8:
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v13 >= v8)
      goto LABEL_39;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    v15 = v9 + 1;
    if (!v14)
    {
      v15 = v9 + 2;
      if (v9 + 2 >= v8)
        goto LABEL_39;
      v14 = *(_QWORD *)(v4 + 8 * v15);
      if (!v14)
      {
        v15 = v9 + 3;
        if (v9 + 3 >= v8)
          goto LABEL_39;
        v14 = *(_QWORD *)(v4 + 8 * v15);
        if (!v14)
        {
          v15 = v9 + 4;
          if (v9 + 4 >= v8)
            goto LABEL_39;
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_23:
    v7 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v15 << 6);
    v9 = v15;
  }
  v16 = v9 + 5;
  if (v9 + 5 >= v8)
  {
LABEL_39:
    sub_100005DE0(a1);
    return;
  }
  v14 = *(_QWORD *)(v4 + 8 * v16);
  if (v14)
  {
    v15 = v9 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v8)
      goto LABEL_39;
    v14 = *(_QWORD *)(v4 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_23;
  }
LABEL_42:
  __break(1u);
}

uint64_t sub_1000A8284()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  swift_beginAccess(v0 + 696, v5, 33, 0);
  v2 = *(void (**)(uint64_t))(v0 + 704);
  if (v2)
  {
    if ((*(_BYTE *)(v0 + 720) & 1) != 0)
    {
      v3 = *(_QWORD *)(v0 + 712);
      swift_retain(v3);
      v2(v0 + 696);
      if (v1)
      {
        swift_endAccess(v5);
        return sub_1000B1DB4((uint64_t)v2, v3);
      }
      sub_1000B1DB4((uint64_t)v2, v3);
    }
    return swift_endAccess(v5);
  }
  else
  {
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease(0xE000000000000000);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000020, 0x80000001001290D0, "driverkitd/Manager.swift", 24, 2, 695, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A839C(char a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v46;
  __int128 v47[2];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v5 = v4;
  v10 = type metadata accessor for URL(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v4 + 2;
  v14 = v4[5];
  v15 = v5[6];
  sub_100004DE4(v13, v14);
  sub_10010731C(v14, v15);
  v17 = v52;
  v16 = v53;
  sub_100004DE4(&v51, v52);
  (*(void (**)(__int128 *__return_ptr, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v16 + 112))(&v48, a2, a3, 1, v17, v16);
  if (v49)
  {
    sub_100004E2C(&v48, (uint64_t)&v54);
    sub_100005D08(&v51);
    if ((a4 & 1) != 0)
    {
      v18 = v56;
      v19 = v57;
      sub_100004DE4(&v54, v56);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v19 + 80))(&v51, v18, v19);
      sub_100005C44((uint64_t)&v54, (uint64_t)v47);
      if (v52)
      {
        sub_100005D08(v47);
        sub_100004E2C(&v51, (uint64_t)&v48);
      }
      else
      {
        sub_100004E2C(v47, (uint64_t)&v48);
        sub_1000124F8((uint64_t)&v51, &qword_100158930);
      }
      v30 = v49;
      v31 = v50;
      sub_100004DE4(&v48, v49);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v31 + 72))(&v51, v30, v31);
      sub_100005D08(&v48);
    }
    else
    {
      sub_100005C44((uint64_t)&v54, (uint64_t)&v51);
    }
    v32 = type metadata accessor for KernelCollection(0);
    v33 = v5[7];
    URL.init(fileURLWithPath:)(a2, a3);
    v34 = v5[20];
    v35 = v5[21];
    sub_100005C44((uint64_t)&v51, (uint64_t)&v48);
    swift_bridgeObjectRetain(v35);
    v26 = sub_10004D63C(v33, (uint64_t)v12, v34, v35, a1, &v48);
    v36 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v37 = swift_allocObject(v36, 72, 7);
    *(_OWORD *)(v37 + 16) = xmmword_10010F050;
    *(_QWORD *)&v48 = v26;
    v38 = sub_100012534(&qword_100158928, type metadata accessor for KernelCollection, (uint64_t)&unk_100110900);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v32, v38);
    v41 = v40;
    *(_QWORD *)(v37 + 56) = &type metadata for String;
    *(_QWORD *)(v37 + 64) = sub_100026838();
    *(_QWORD *)(v37 + 32) = v39;
    *(_QWORD *)(v37 + 40) = v41;
    v42 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    v43 = (void *)static OS_os_log.default.getter(v42);
    v44 = static os_log_type_t.default.getter(v43);
    os_log(_:dso:log:type:_:)("loaded collection: %{public}s", 29, 2, &_mh_execute_header, v43, v44, v37);
    swift_bridgeObjectRelease(v37);

    sub_100005D08(&v51);
    sub_100005D08(&v54);
  }
  else
  {
    sub_1000124F8((uint64_t)&v48, &qword_100158930);
    sub_100005D08(&v51);
    v54 = 0;
    v55 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(v55);
    v54 = 0xD00000000000001ALL;
    v55 = 0x8000000100129100;
    LOBYTE(v51) = a1;
    v20 = sub_10004F8F0();
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for CollectionKind, v20);
    object = v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    v23._countAndFlagsBits = 0x7463656C6C6F6320;
    v23._object = (void *)0xEF207461206E6F69;
    String.append(_:)(v23);
    v24._countAndFlagsBits = a2;
    v24._object = a3;
    String.append(_:)(v24);
    v25 = v54;
    v26 = v55;
    v27 = sub_1000122F8();
    v28 = swift_allocError(&type metadata for KMError, v27, 0, 0);
    *(_QWORD *)v29 = v25;
    *(_QWORD *)(v29 + 8) = v26;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)(v29 + 48) = 0u;
    *(_QWORD *)(v29 + 64) = 0;
    *(_BYTE *)(v29 + 72) = 10;
    swift_willThrow(v28);
  }
  return v26;
}

uint64_t sub_1000A87A4()
{
  return sub_1000A8834(0, 0xD00000000000002FLL, 0x8000000100129140);
}

uint64_t sub_1000A87D4()
{
  return sub_1000A8834(1u, 0xD000000000000028, 0x8000000100129170);
}

uint64_t sub_1000A8804()
{
  return sub_1000A8834(2u, 0xD000000000000031, 0x80000001001291A0);
}

uint64_t sub_1000A8834(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = sub_1000D4214(a1);
  v7 = v6;
  v8 = sub_1000122F8();
  v9 = swift_allocError(&type metadata for KMError, v8, 0, 0);
  *(_QWORD *)v10 = v5;
  *(_QWORD *)(v10 + 8) = v7;
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_QWORD *)(v10 + 64) = 0;
  *(_BYTE *)(v10 + 72) = 6;
  return swift_willThrow(v9);
}

uint64_t sub_1000A88B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = sub_1000D4214(0);
  v2 = v1;
  v3 = sub_1000122F8();
  v4 = swift_allocError(&type metadata for KMError, v3, 0, 0);
  *(_QWORD *)v5 = v0;
  *(_QWORD *)(v5 + 8) = v2;
  *(_QWORD *)(v5 + 16) = 0xD00000000000002FLL;
  *(_QWORD *)(v5 + 24) = 0x8000000100129140;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_QWORD *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 72) = 6;
  return swift_willThrow(v4);
}

_QWORD *sub_1000A8948()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v1 = v0;
  v2 = (_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  sub_100004DE4(v2, v3);
  sub_100071700(v3, v4);
  v5 = v21;
  v6 = v22;
  sub_100004DE4(v20, v21);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v5, v6);
  if (v8)
  {
    v9 = v7;
    v10 = v8;
    sub_100005D08(v20);
    result = sub_100090390(v9, v10, 0, 0);
    if (result != (_QWORD *)5)
      return result;
  }
  else
  {
    sub_100005D08(v20);
  }
  v12 = *(_QWORD *)(v1 + 40);
  v13 = *(_QWORD *)(v1 + 48);
  sub_100004DE4(v2, v12);
  sub_100071700(v12, v13);
  v14 = v21;
  v15 = v22;
  sub_100004DE4(v20, v21);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 80))(v14, v15);
  if (!v17)
  {
    sub_100005D08(v20);
    return 0;
  }
  v18 = v16;
  v19 = v17;
  sub_100005D08(v20);
  result = sub_100090390(v18, v19, 0, 0);
  if (result == (_QWORD *)5)
    return 0;
  return result;
}

_QWORD *sub_1000A8A98(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v28 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v28 - v14;
  URL.init(fileURLWithPath:)(a1, a2);
  v16 = v3[14];
  v29 = v3[15];
  v30 = v16;
  URL.appendingPathComponent(_:)(v16, v29);
  v17 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  v18 = v17(v10, v6);
  URL.deletingLastPathComponent()(v18);
  v17(v13, v6);
  v19 = v3[5];
  v20 = v3[6];
  sub_100004DE4(v3 + 2, v19);
  sub_10010731C(v19, v20);
  v21 = v32;
  v22 = v33;
  v23 = sub_100004DE4(v31, v32);
  v24 = v34;
  (*(void (**)(char *, uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 48))(v15, 1, 0, v21, v22);
  if (v24)
  {
    v17(v15, v6);
    sub_100005D08(v31);
  }
  else
  {
    sub_100005D08(v31);
    v25 = sub_1000A8948();
    URL.init(fileURLWithPath:)(v30, v29);
    sub_1000377D4((unint64_t)v25);
    sub_1000D460C((uint64_t)v25, (uint64_t)v13);
    sub_1000390FC((unint64_t)v25);
    v26 = v17(v10, v6);
    v23 = (_QWORD *)URL.path.getter(v26);
    sub_1000390FC((unint64_t)v25);
    v17(v13, v6);
    v17(v15, v6);
  }
  return v23;
}

uint64_t sub_1000A8CA8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  int64_t v32;
  char *v33;
  char *v34;
  char v35;
  int64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  char v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  void (*v75)(int64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  int64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t (*v85)(uint64_t, unint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  void *object;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char v104;
  int v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  Swift::String v109;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  char *v168;
  int64_t v169;
  uint64_t v170;
  uint64_t v171;
  int64_t v172;
  _QWORD v173[5];
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;

  v156 = a2;
  v155 = a1;
  v153 = sub_100005C88(&qword_10015B170);
  __chkstk_darwin(v153);
  v154 = (uint64_t)&v152 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v5 = __chkstk_darwin(v4);
  v164 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  *(_QWORD *)&v166 = (char *)&v152 - v7;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v168 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v170 = (uint64_t)&v152 - v13;
  v14 = __chkstk_darwin(v12);
  v161 = (char *)&v152 - v15;
  v16 = __chkstk_darwin(v14);
  v169 = (int64_t)&v152 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v152 - v18;
  v163 = v2;
  v20 = *(_QWORD *)(v2 + 128);
  v21 = *(_QWORD *)(v20 + 16);
  v22 = (uint64_t)_swiftEmptyArrayStorage;
  if (v21)
  {
    v175 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v20);
    sub_10003DEB4(0, v21, 0);
    v22 = v175;
    v23 = (_QWORD *)(v20 + 40);
    do
    {
      v25 = *(v23 - 1);
      v24 = *v23;
      swift_bridgeObjectRetain(*v23);
      URL.init(fileURLWithPath:)(v25, v24);
      swift_bridgeObjectRelease(v24);
      v175 = v22;
      v27 = *(_QWORD *)(v22 + 16);
      v26 = *(_QWORD *)(v22 + 24);
      v28 = v22;
      if (v27 >= v26 >> 1)
      {
        sub_10003DEB4(v26 > 1, v27 + 1, 1);
        v28 = v175;
      }
      v23 += 2;
      *(_QWORD *)(v28 + 16) = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v28+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v27, v19, v8);
      --v21;
      v22 = v28;
    }
    while (v21);
    swift_bridgeObjectRelease(v20);
  }
  v29 = *(_QWORD *)(v163 + 136);
  v30 = *(_QWORD *)(v29 + 16);
  v31 = _swiftEmptyArrayStorage;
  v171 = v8;
  v172 = v9;
  v162 = v22;
  if (v30)
  {
    v175 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v29);
    sub_10003DEB4(0, v30, 0);
    v31 = (_QWORD *)v175;
    v32 = sub_100045CA4(v29);
    v34 = v33;
    v22 = v35 & 1;
    v167 = v29 + 56;
    v36 = v169;
    do
    {
      if (v32 < 0 || v32 >= 1 << *(_BYTE *)(v29 + 32))
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      if (((*(_QWORD *)(v167 + (((unint64_t)v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
        goto LABEL_63;
      if (*(_DWORD *)(v29 + 36) != (_DWORD)v34)
        goto LABEL_64;
      v37 = (uint64_t *)(*(_QWORD *)(v29 + 48) + 16 * v32);
      v38 = *v37;
      v39 = v37[1];
      swift_bridgeObjectRetain(v39);
      URL.init(fileURLWithPath:)(v38, v39);
      swift_bridgeObjectRelease(v39);
      v175 = (uint64_t)v31;
      v41 = v31[2];
      v40 = v31[3];
      if (v41 >= v40 >> 1)
      {
        sub_10003DEB4(v40 > 1, v41 + 1, 1);
        v31 = (_QWORD *)v175;
      }
      v31[2] = v41 + 1;
      v9 = v172;
      v42 = (unint64_t)v31
          + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
          + *(_QWORD *)(v172 + 72) * v41;
      v8 = v171;
      (*(void (**)(unint64_t, int64_t, uint64_t))(v172 + 32))(v42, v36, v171);
      v43 = sub_100045D44(v32, (int)v34, v22 & 1, v29);
      v32 = v43;
      v34 = (char *)v44;
      v22 = v45 & 1;
      --v30;
    }
    while (v30);
    sub_10004AF40(v43, v44, v45 & 1);
    swift_bridgeObjectRelease(v29);
    v22 = v162;
  }
  v36 = sub_100011D28((uint64_t)v31);
  swift_bridgeObjectRelease(v31);
  v179 = v36;
  v29 = v163;
  LODWORD(v36) = *(_DWORD *)(v163 + 640);
  v34 = v164;
  v30 = v166;
  if (qword_1001646E0 != -1)
    goto LABEL_68;
  while (1)
  {
    v46 = "LaunchRequestish";
    if ((dword_100175788 & ~(_DWORD)v36) != 0)
    {
      v47 = *(_QWORD *)(v29 + 40);
      v48 = *(_QWORD *)(v29 + 48);
      sub_100004DE4((_QWORD *)(v29 + 16), v47);
      sub_100071700(v47, v48);
      v49 = v177;
      v50 = v178;
      sub_100004DE4(&v175, v177);
      v51 = sub_10006B880();
      swift_bridgeObjectRetain(*v51);
      sub_10006BD04(2);
      v173[3] = &type metadata for KernelRequests.GetLoaded;
      v173[4] = &off_100148550;
      v173[0] = v52;
      v53 = sub_100005C88(&qword_100158920);
      v54 = v165;
      sub_10006B0B8(v173, v53, v49, v53, v50, (uint64_t)&v174);
      if (v54)
      {
        sub_100005D08(v173);
        sub_100005D08(&v175);
        v55 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v56 = swift_allocObject(v55, 72, 7);
        *(_OWORD *)(v56 + 16) = xmmword_10010F050;
        v175 = v54;
        swift_errorRetain(v54);
        v57 = sub_100005C88(&qword_10015AB50);
        v58 = String.init<A>(describing:)(&v175, v57);
        v60 = v59;
        *(_QWORD *)(v56 + 56) = &type metadata for String;
        *(_QWORD *)(v56 + 64) = sub_100026838();
        *(_QWORD *)(v56 + 32) = v58;
        *(_QWORD *)(v56 + 40) = v60;
        v61 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
        v62 = (void *)static OS_os_log.default.getter(v61);
        v63 = static os_log_type_t.default.getter(v62);
        os_log(_:dso:log:type:_:)("Could not search for bundles in auxKC: %{public}s", 49, 2, &_mh_execute_header, v62, v63, v56);
        swift_bridgeObjectRelease(v56);

        swift_errorRelease(v54);
        v165 = 0;
      }
      else
      {
        sub_100005D08(v173);
        v64 = v174;
        sub_100005D08(&v175);
        sub_1000A9BFC(v64);
        v66 = v65;
        v165 = 0;
        swift_bridgeObjectRelease(v64);
        v67 = *(_QWORD *)(v66 + 16);
        if (v67)
        {
          v68 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
          v160 = v66;
          v69 = v66 + v68;
          v167 = *(_QWORD *)(v9 + 72);
          v169 = *(_QWORD *)(v9 + 16);
          v9 = v172;
          v70 = v161;
          ((void (*)(int64_t, unint64_t, uint64_t))v169)(v30, v69, v8);
          while (1)
          {
            v75 = *(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
            v75(v30, 0, 1, v8);
            if ((*(unsigned int (**)(int64_t, uint64_t, uint64_t))(v9 + 48))(v30, 1, v8) == 1)
            {
              swift_bridgeObjectRelease(v160);
              v29 = v163;
              v22 = v162;
              v46 = "LaunchRequestish";
              goto LABEL_34;
            }
            v76 = (*(uint64_t (**)(char *, int64_t, uint64_t))(v9 + 32))(v70, v30, v8);
            __chkstk_darwin(v76);
            *(&v152 - 2) = (uint64_t)v70;
            v77 = v162;
            swift_bridgeObjectRetain(v162);
            v78 = v165;
            v79 = sub_1000AA06C((uint64_t (*)(char *))sub_1000B234C, (uint64_t)(&v152 - 4), v77);
            v165 = v78;
            v80 = sub_1000D2610();
            swift_bridgeObjectRelease(v79);
            if (v80)
            {
              v71 = v168;
              ((void (*)(char *, char *, uint64_t))v169)(v168, v70, v8);
              v72 = v170;
              sub_10000E064(v170, v71);
              v73 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
              v74 = v72;
              v30 = v166;
              v73(v74, v8);
              v73((uint64_t)v70, v8);
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v9 + 8))(v70, v8);
            }
            v69 += v167;
            --v67;
            v34 = v164;
            if (!v67)
              break;
            ((void (*)(int64_t, unint64_t, uint64_t))v169)(v30, v69, v8);
          }
          v9 = v172;
          v22 = v162;
          v46 = "LaunchRequestish";
          v66 = v160;
          v75(v30, 1, 1, v8);
        }
        else
        {
          v46 = "LaunchRequestish";
          (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v30, 1, 1, v8);
        }
        swift_bridgeObjectRelease(v66);
      }
      v29 = v163;
    }
LABEL_34:
    v167 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v81 = swift_allocObject(v167, 72, 7);
    v166 = *((_OWORD *)v46 + 5);
    v161 = (char *)v81;
    *(_OWORD *)(v81 + 16) = v166;
    v82 = *(_QWORD *)(v22 + 16);
    v83 = _swiftEmptyArrayStorage;
    if (v82)
    {
      v173[0] = _swiftEmptyArrayStorage;
      sub_10000C958(0, v82, 0);
      v84 = v22 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v169 = *(_QWORD *)(v9 + 72);
      v85 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
      do
      {
        v86 = v170;
        v87 = v85(v170, v84, v8);
        v175 = 2314;
        v176 = 0xE200000000000000;
        v88._countAndFlagsBits = URL.path.getter(v87);
        object = v88._object;
        String.append(_:)(v88);
        swift_bridgeObjectRelease(object);
        v90 = v175;
        v9 = v176;
        (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v86, v8);
        v83 = (_QWORD *)v173[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v173[0]) & 1) == 0)
        {
          sub_10000C958(0, v83[2] + 1, 1);
          v83 = (_QWORD *)v173[0];
        }
        v92 = v83[2];
        v91 = v83[3];
        if (v92 >= v91 >> 1)
        {
          sub_10000C958(v91 > 1, v92 + 1, 1);
          v83 = (_QWORD *)v173[0];
        }
        v83[2] = v92 + 1;
        v93 = &v83[2 * v92];
        v93[4] = v90;
        v93[5] = v9;
        v84 += v169;
        --v82;
        v8 = v171;
      }
      while (v82);
      v29 = v163;
      v34 = v164;
    }
    v175 = (uint64_t)v83;
    v94 = sub_100005C88((uint64_t *)&unk_10015A5D0);
    v95 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
    v160 = v94;
    v159 = v95;
    v96 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v94, v95);
    v98 = v97;
    swift_bridgeObjectRelease(v83);
    v99 = v161;
    *((_QWORD *)v161 + 7) = &type metadata for String;
    v158 = sub_100026838();
    v99[8] = v158;
    v99[4] = v96;
    v99[5] = v98;
    v157 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    v100 = (void *)static OS_os_log.default.getter(v157);
    v101 = static os_log_type_t.default.getter(v100);
    os_log(_:dso:log:type:_:)("finding bundles in repositories: %{public}s", 43, 2, &_mh_execute_header, v100, v101, v99);
    swift_bridgeObjectRelease(v99);

    v161 = (char *)swift_allocObject(v167, 72, 7);
    *((_OWORD *)v161 + 1) = v166;
    v102 = v179;
    v36 = *(_QWORD *)(v179 + 16);
    v22 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v36)
      break;
    v173[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v179);
    sub_10000C958(0, v36, 0);
    v29 = sub_100045CA4(v102);
    v34 = v103;
    v167 = v102 + 56;
    v105 = v104 & 1;
    v30 = v172;
    *(_QWORD *)&v166 = v102;
    while ((v29 & 0x8000000000000000) == 0 && v29 < 1 << *(_BYTE *)(v102 + 32))
    {
      if (((*(_QWORD *)(v167 + (((unint64_t)v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
        goto LABEL_66;
      if (*(_DWORD *)(v102 + 36) != (_DWORD)v34)
        goto LABEL_67;
      LODWORD(v169) = v105;
      v106 = v170;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v170, *(_QWORD *)(v102 + 48) + *(_QWORD *)(v30 + 72) * v29, v8);
      v107 = v168;
      v108 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 32))(v168, v106, v8);
      v175 = 2314;
      v176 = 0xE200000000000000;
      v109._countAndFlagsBits = URL.path.getter(v108);
      v110 = v109._object;
      String.append(_:)(v109);
      swift_bridgeObjectRelease(v110);
      v111 = v8;
      v113 = v175;
      v112 = v176;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v107, v111);
      v22 = v173[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v173[0]) & 1) == 0)
      {
        sub_10000C958(0, *(_QWORD *)(v22 + 16) + 1, 1);
        v22 = v173[0];
      }
      v115 = *(_QWORD *)(v22 + 16);
      v114 = *(_QWORD *)(v22 + 24);
      v9 = v115 + 1;
      if (v115 >= v114 >> 1)
      {
        sub_10000C958(v114 > 1, v115 + 1, 1);
        v22 = v173[0];
      }
      *(_QWORD *)(v22 + 16) = v9;
      v116 = v22 + 16 * v115;
      *(_QWORD *)(v116 + 32) = v113;
      *(_QWORD *)(v116 + 40) = v112;
      v102 = v166;
      v117 = sub_100045D44(v29, (int)v34, v169 & 1, v166);
      v29 = v117;
      v34 = (char *)v118;
      v105 = v119 & 1;
      --v36;
      v8 = v171;
      v30 = v172;
      if (!v36)
      {
        sub_10004AF40(v117, v118, v105);
        swift_bridgeObjectRelease(v102);
        v29 = v163;
        v34 = v164;
        goto LABEL_55;
      }
    }
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    swift_once(&qword_1001646E0, sub_1000A4894);
  }
  v30 = v172;
LABEL_55:
  v175 = v22;
  v120 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v160, v159);
  v122 = v121;
  v123 = swift_bridgeObjectRelease(v22);
  v124 = v161;
  v125 = v158;
  *((_QWORD *)v161 + 7) = &type metadata for String;
  v124[8] = v125;
  v124[4] = v120;
  v124[5] = v122;
  v126 = (void *)static OS_os_log.default.getter(v123);
  v127 = static os_log_type_t.default.getter(v126);
  os_log(_:dso:log:type:_:)("finding bundles at additional paths: %{public}s", 47, 2, &_mh_execute_header, v126, v127, v124);
  swift_bridgeObjectRelease(v124);

  swift_retain(v29);
  v128 = v162;
  v129 = v165;
  v130 = sub_1000B1E2C(v162, (_QWORD *)v29);
  if (v129)
  {
    swift_release(v29);
    v131 = v179;
    swift_bridgeObjectRelease(v128);
    swift_bridgeObjectRelease(v131);
  }
  else
  {
    v132 = (uint64_t)v130;
    swift_bridgeObjectRelease(v128);
    swift_release(v29);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v34, 1, 1, v8);
    v133 = v29 + 16;
    v134 = (uint64_t)v34;
    v135 = v179;
    v136 = sub_1000AE844(v179);
    swift_bridgeObjectRelease(v135);
    v137 = sub_1000268B8();
    v138 = sub_1000D6320(v133, (uint64_t)v136, v137);
    swift_release(v136);
    v139 = v153;
    v140 = *(int *)(v153 + 48);
    v141 = v154;
    sub_1000260AC(v134, v154, (uint64_t *)&unk_10015BA60);
    *(_QWORD *)(v141 + v140) = v138;
    v142 = sub_1000D253C(v141, v132, v139);
    swift_bridgeObjectRelease(v132);
    sub_1000124F8(v141, &qword_10015B170);
    v143 = *(_QWORD *)(v142 + 16);
    if (v143)
    {
      sub_100005C88(&qword_10015B178);
      v144 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v143);
    }
    else
    {
      v144 = &_swiftEmptyDictionarySingleton;
    }
    v175 = (uint64_t)v144;
    swift_bridgeObjectRetain(v142);
    sub_1000B035C(v145, 1, &v175);
    swift_bridgeObjectRelease(v142);
    v146 = v175;
    v147 = (_QWORD *)v163;
    swift_retain(v163);
    v148 = v155;
    v149 = v156;
    sub_1000B2318(v155, v156);
    sub_1000B2068((uint64_t)_swiftEmptyArrayStorage, v146, v148, v149, v147);
    v131 = v150;
    swift_release(v147);
    sub_1000B233C(v148, v149);
    swift_release(v146);
  }
  return v131;
}

void sub_1000A9BFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v2 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v51 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v41 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v40 = (char *)&v39 - v8;
  v9 = *(_QWORD *)(a1 + 64);
  v45 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v46 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  v42 = (char *)_swiftEmptyArrayStorage;
  v43 = (char *)&type metadata for Any + 8;
  v44 = a1;
  if (v12)
    goto LABEL_10;
LABEL_16:
  v24 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v24 < v46)
    {
      v25 = *(_QWORD *)(v45 + 8 * v24);
      ++v13;
      if (v25)
        goto LABEL_31;
      v13 = v24 + 1;
      if (v24 + 1 >= v46)
        goto LABEL_41;
      v25 = *(_QWORD *)(v45 + 8 * v13);
      if (v25)
        goto LABEL_31;
      v13 = v24 + 2;
      if (v24 + 2 >= v46)
        goto LABEL_41;
      v25 = *(_QWORD *)(v45 + 8 * v13);
      if (v25)
        goto LABEL_31;
      v13 = v24 + 3;
      if (v24 + 3 >= v46)
        goto LABEL_41;
      v25 = *(_QWORD *)(v45 + 8 * v13);
      if (v25)
      {
LABEL_31:
        v12 = (v25 - 1) & v25;
        for (i = __clz(__rbit64(v25)) + (v13 << 6); ; i = v16 | (v13 << 6))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * i + 8);
          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
          type metadata accessor for OSExtension(0);
          swift_bridgeObjectRetain(v27);
          swift_bridgeObjectRetain(v28);
          v30 = sub_1000F4C24(v29);
          if (!v30)
            goto LABEL_7;
          v31 = v30;
          v32 = *(_QWORD *)(v30 + 16);
          v33 = (uint64_t *)sub_10008F538();
          if (!*(_QWORD *)(v32 + 16))
            break;
          v34 = *v33;
          v35 = v33[1];
          swift_bridgeObjectRetain(v35);
          v36 = sub_100005DE8(v34, v35);
          if ((v37 & 1) != 0)
          {
            sub_100005D28(*(_QWORD *)(v32 + 56) + 32 * v36, (uint64_t)&v49);
          }
          else
          {
            v49 = 0u;
            v50 = 0u;
          }
          swift_bridgeObjectRelease(v35);
          a1 = v44;
          if (!*((_QWORD *)&v50 + 1))
            goto LABEL_6;
          if (!swift_dynamicCast(&v47, &v49, v43, &type metadata for String, 6))
          {
            swift_release(v31);
            goto LABEL_7;
          }
          v38 = v48;
          URL.init(fileURLWithPath:)(v47, v48);
          swift_release(v31);
          swift_bridgeObjectRelease(v38);
          v14 = 0;
LABEL_8:
          v15 = v51;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v4, v14, 1, v5);
          swift_bridgeObjectRelease(v28);
          swift_bridgeObjectRelease(v27);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v4, 1, v5) == 1)
          {
            sub_1000124F8((uint64_t)v4, (uint64_t *)&unk_10015BA60);
            if (!v12)
              goto LABEL_16;
          }
          else
          {
            v18 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
            v19 = v40;
            v18(v40, v4, v5);
            v18(v41, v19, v5);
            if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
              v42 = (char *)sub_10000C60C(0, *((_QWORD *)v42 + 2) + 1, 1, (unint64_t)v42);
            v21 = *((_QWORD *)v42 + 2);
            v20 = *((_QWORD *)v42 + 3);
            if (v21 >= v20 >> 1)
              v42 = (char *)sub_10000C60C(v20 > 1, v21 + 1, 1, (unint64_t)v42);
            v22 = v41;
            v23 = v42;
            *((_QWORD *)v42 + 2) = v21 + 1;
            v18(&v23[((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v21], v22, v5);
            a1 = v44;
            if (!v12)
              goto LABEL_16;
          }
LABEL_10:
          v16 = __clz(__rbit64(v12));
          v12 &= v12 - 1;
        }
        v49 = 0u;
        v50 = 0u;
LABEL_6:
        swift_release(v31);
        sub_1000124F8((uint64_t)&v49, &qword_100158018);
LABEL_7:
        v14 = 1;
        goto LABEL_8;
      }
      v26 = v24 + 4;
      if (v26 < v46)
      {
        v25 = *(_QWORD *)(v45 + 8 * v26);
        if (v25)
        {
          v13 = v26;
          goto LABEL_31;
        }
        while (1)
        {
          v13 = v26 + 1;
          if (__OFADD__(v26, 1))
            goto LABEL_43;
          if (v13 >= v46)
            break;
          v25 = *(_QWORD *)(v45 + 8 * v13);
          ++v26;
          if (v25)
            goto LABEL_31;
        }
      }
    }
LABEL_41:
    swift_release(a1);
    return;
  }
  __break(1u);
LABEL_43:
  __break(1u);
}

uint64_t sub_1000AA06C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  char *v35;
  _QWORD *v36;

  v4 = v3;
  v33 = a1;
  v34 = a2;
  v6 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v31 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v11);
  v35 = (char *)&v26 - v14;
  v36 = _swiftEmptyArrayStorage;
  v32 = *(_QWORD *)(a3 + 16);
  if (v32)
  {
    v15 = 0;
    v30 = a3;
    while (v15 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v17 = *(_QWORD *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9);
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v29(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
        goto LABEL_17;
      v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v19 = v35;
      v18(v35, v8, v9);
      v20 = v33(v19);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
        swift_bridgeObjectRelease(v30);
        return swift_release(v36);
      }
      if ((v20 & 1) != 0)
      {
        v18(v31, v35, v9);
        v21 = v36;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
        v28 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10003DEB4(0, v21[2] + 1, 1);
          v21 = v36;
        }
        v24 = v21[2];
        v23 = v21[3];
        v25 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          v27 = v24 + 1;
          sub_10003DEB4(v23 > 1, v24 + 1, 1);
          v25 = v27;
          v21 = v36;
        }
        v21[2] = v25;
        result = ((uint64_t (*)(char *, char *, uint64_t))v18)((char *)v21 + v16 + v24 * v17, v31, v9);
        v36 = v21;
        v4 = v28;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v35, v9);
      }
      a3 = v30;
      if (v32 == ++v15)
      {
        v29(v8, 1, 1, v9);
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_17:
    swift_bridgeObjectRelease(a3);
    sub_1000124F8((uint64_t)v8, (uint64_t *)&unk_10015BA60);
    return (uint64_t)v36;
  }
  return result;
}

uint64_t sub_1000AA338(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[3];
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[3];
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;

  v66 = a3;
  v85 = a1;
  v71 = sub_100005C88(&qword_10015B188);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v73 = (uint64_t)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for URL(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v63 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005C88(&qword_10015B3B0);
  v11 = __chkstk_darwin(v10);
  v69 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v59 - v14;
  v16 = *(int *)(v13 + 48);
  sub_100019E1C(a2, (uint64_t)&v59 - v14, (uint64_t *)&unk_10015BA60);
  v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)&v15[v16] = v17;
  swift_bridgeObjectRetain(v17);
  sub_1000124F8((uint64_t)v15, (uint64_t *)&unk_10015BA60);
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v67 = a5 + 2;
    v60 = v17;
    v19 = v17 + 32;
    v62 = a4;
    v61 = a2;
    while (1)
    {
      sub_100005C44(v19, (uint64_t)v82);
      if (a4 == 3)
        goto LABEL_7;
      v20 = v83;
      v21 = v84;
      sub_100004DE4(v82, v83);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
      v24 = v23;
      *(_QWORD *)&v79 = v22;
      *((_QWORD *)&v79 + 1) = v23;
      v76[0] = v66;
      v76[1] = a4;
      v25 = sub_100086EA0();
      v26 = dispatch thunk of static Equatable.== infix(_:_:)(&v79, v76, &type metadata for PackageType, v25);
      sub_100037510(v22, v24);
      if ((v26 & 1) != 0)
      {
LABEL_7:
        v27 = v83;
        v28 = v84;
        sub_100004DE4(v82, v83);
        v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v27, v28);
        if (v30 == 1)
        {
          v31 = a5[5];
          v32 = a5[6];
          v33 = a5;
          sub_100004DE4(v67, v31);
          sub_10010731C(v31, v32);
          v34 = v80;
          v35 = v81;
          v68 = sub_100004DE4(&v79, v80);
          v36 = v83;
          v37 = v84;
          sub_100004DE4(v82, v83);
          v38 = v63;
          v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 64))(v36, v37);
          v40 = URL.path.getter(v39);
          v42 = v41;
          (*(void (**)(char *, uint64_t))(v64 + 8))(v38, v65);
          v43 = v72;
          v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 152))(v40, v42, v34, v35);
          v72 = v43;
          if (v43)
          {
            swift_bridgeObjectRelease(v42);
            swift_bridgeObjectRelease(v60);
            sub_100005D08(&v79);
            return sub_100005D08(v82);
          }
          v46 = v44;
          v47 = v45;
          swift_bridgeObjectRelease(v42);
          if (v47)
          {
            sub_100005D08(&v79);
            a5 = v33;
            v48 = v33[5];
            v49 = v33[6];
            sub_100004DE4(v67, v48);
            sub_10009C20C(v48, v49);
            v50 = v77;
            v51 = v78;
            sub_100004DE4(v76, v77);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 16))(&v74, v46, v47, v50, v51);
            swift_bridgeObjectRelease(v47);
            if (v75)
            {
              sub_100004E2C(&v74, (uint64_t)&v79);
              sub_100005D08(v76);
              sub_100005D08(v82);
              sub_100004E2C(&v79, (uint64_t)v82);
            }
            else
            {
              sub_1000124F8((uint64_t)&v74, &qword_100157C78);
              sub_100005D08(v76);
            }
          }
          else
          {
            sub_100005D08(&v79);
            a5 = v33;
          }
          a4 = v62;
          a2 = v61;
        }
        else
        {
          sub_100037510(v29, v30);
        }
        v52 = v69;
        sub_100019E1C(a2, v69, (uint64_t *)&unk_10015BA60);
        v53 = v73 + *(int *)(v71 + 48);
        sub_1000260AC(v52, v73, (uint64_t *)&unk_10015BA60);
        sub_100005C44((uint64_t)v82, v53);
        v54 = (_QWORD *)*v85;
        if ((swift_isUniquelyReferenced_nonNull_native(*v85) & 1) == 0)
          v54 = (_QWORD *)sub_1000B0A84(0, v54[2] + 1, 1, v54);
        v56 = v54[2];
        v55 = v54[3];
        if (v56 >= v55 >> 1)
          v54 = (_QWORD *)sub_1000B0A84(v55 > 1, v56 + 1, 1, v54);
        v54[2] = v56 + 1;
        sub_1000260AC(v73, (uint64_t)v54+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(_QWORD *)(v70 + 72) * v56, &qword_10015B188);
        *v85 = v54;
      }
      sub_100005D08(v82);
      v19 += 40;
      if (!--v18)
      {
        v57 = v60;
        return swift_bridgeObjectRelease(v57);
      }
    }
  }
  v57 = v17;
  return swift_bridgeObjectRelease(v57);
}

uint64_t sub_1000AA8B8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  _QWORD v51[5];
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  __int128 v55;
  __int128 *v56;
  uint64_t v57;
  __int128 *v58;
  _QWORD *v59;
  uint64_t v60;
  int64_t v61;
  __int128 v62;
  uint64_t v63;
  _QWORD v64[5];
  _QWORD v65[5];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;

  v2 = v0;
  result = (*(uint64_t (**)(void))(*v0 + 296))();
  if (v1)
    return result;
  v4 = 0;
  v57 = result;
  v6 = *(_QWORD *)(result + 64);
  result += 64;
  v5 = v6;
  v53 = result;
  v7 = 1 << *(_BYTE *)(result - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v5;
  v59 = v0 + 2;
  v56 = &v67;
  v58 = (__int128 *)&v72;
  v54 = (unint64_t)(v7 + 63) >> 6;
  v52 = v54 - 1;
  v55 = xmmword_10010F380;
  while (1)
  {
    if (v9)
    {
      v29 = __clz(__rbit64(v9));
      v30 = (v9 - 1) & v9;
      v31 = v29 | (v4 << 6);
      goto LABEL_9;
    }
    v35 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v35 < v54)
    {
      v36 = *(_QWORD *)(v53 + 8 * v35);
      if (v36)
        goto LABEL_13;
      v4 += 2;
      if (v35 + 1 >= v54)
      {
        v4 = v35;
        goto LABEL_18;
      }
      v36 = *(_QWORD *)(v53 + 8 * v4);
      if (v36)
      {
        ++v35;
        goto LABEL_13;
      }
      if (v35 + 2 < v54)
        break;
    }
LABEL_18:
    v30 = 0;
    v69 = 0;
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
LABEL_19:
    sub_1000260AC((uint64_t)&v66, (uint64_t)&v70, &qword_10015B180);
    v37 = v71;
    if (!v71)
      return swift_release(v57);
    v73 = v30;
    v61 = v4;
    v60 = v70;
    sub_100004E2C(v58, (uint64_t)&v66);
    v38 = v2[5];
    v39 = v2[6];
    sub_100004DE4(v59, v38);
    sub_10009C20C(v38, v39);
    v40 = v2;
    v41 = v64[4];
    sub_100004DE4(v64, v64[3]);
    v43 = *((_QWORD *)&v67 + 1);
    v42 = v68;
    sub_100004DE4(&v66, *((uint64_t *)&v67 + 1));
    v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v43, v42);
    v46 = v45;
    (*(void (**)(__int128 *__return_ptr, uint64_t))(v41 + 16))(&v62, v44);
    swift_bridgeObjectRelease(v46);
    if (v63)
    {
      sub_100004E2C(&v62, (uint64_t)v65);
      v47 = sub_100005D08(v64);
      v48 = (*(uint64_t (**)(uint64_t))(*v40 + 144))(v47);
      __chkstk_darwin(v48);
      v51[2] = v40;
      v51[3] = v65;
      type metadata accessor for RealizedInfo(0);
      sub_100005F34((void (*)(uint64_t))sub_1000B23C0, (uint64_t)v51, v48);
      v2 = v40;
      v49 = v64[0];
      swift_bridgeObjectRelease(v37);
      swift_release(v48);
      swift_release(v49);
      sub_100005D08(v65);
      v4 = v61;
    }
    else
    {
      sub_1000124F8((uint64_t)&v62, &qword_100157C78);
      sub_100005D08(v64);
      strcpy((char *)v65, "No bundle at ");
      HIWORD(v65[1]) = -4864;
      v10 = *((_QWORD *)&v67 + 1);
      v11 = v68;
      sub_100004DE4(&v66, *((uint64_t *)&v67 + 1));
      v12._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
      object = v12._object;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(object);
      v14 = v65[0];
      v15 = v65[1];
      v16 = sub_1000122F8();
      v17 = swift_allocError(&type metadata for KMError, v16, 0, 0);
      *(_QWORD *)v18 = v14;
      *(_QWORD *)(v18 + 8) = v15;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_QWORD *)(v18 + 64) = 0;
      *(_BYTE *)(v18 + 72) = 10;
      v19 = swift_willThrow(v17);
      v2 = v40;
      v4 = v61;
      v20 = static os_log_type_t.error.getter(v19);
      v21 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v22 = swift_allocObject(v21, 112, 7);
      *(_OWORD *)(v22 + 16) = v55;
      *(_QWORD *)(v22 + 56) = &type metadata for String;
      v23 = sub_100026838();
      *(_QWORD *)(v22 + 64) = v23;
      *(_QWORD *)(v22 + 32) = v60;
      *(_QWORD *)(v22 + 40) = v37;
      v65[0] = v17;
      swift_errorRetain(v17);
      v24 = sub_100005C88(&qword_10015AB50);
      v25 = String.init<A>(describing:)(v65, v24);
      *(_QWORD *)(v22 + 96) = &type metadata for String;
      *(_QWORD *)(v22 + 104) = v23;
      *(_QWORD *)(v22 + 72) = v25;
      *(_QWORD *)(v22 + 80) = v26;
      v27 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
      v28 = (void *)static OS_os_log.default.getter(v27);
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v28, "Couldn't load bundle '%{public}s' from history: %{public}s", 58, 2, v22);
      swift_bridgeObjectRelease(v22);

      swift_errorRelease(v17);
    }
    result = sub_100005D08(&v66);
    v9 = v73;
  }
  v36 = *(_QWORD *)(v53 + 8 * (v35 + 2));
  if (v36)
  {
    v35 += 2;
    goto LABEL_13;
  }
  v50 = v35 + 3;
  if (v35 + 3 >= v54)
  {
    v4 = v35 + 2;
    goto LABEL_18;
  }
  v36 = *(_QWORD *)(v53 + 8 * v50);
  if (v36)
  {
    v35 += 3;
LABEL_13:
    v30 = (v36 - 1) & v36;
    v31 = __clz(__rbit64(v36)) + (v35 << 6);
    v4 = v35;
LABEL_9:
    v32 = *(_QWORD *)(v57 + 56);
    v33 = (_QWORD *)(*(_QWORD *)(v57 + 48) + 16 * v31);
    v34 = v33[1];
    *(_QWORD *)&v66 = *v33;
    *((_QWORD *)&v66 + 1) = v34;
    sub_100005C44(v32 + 40 * v31, (uint64_t)v56);
    swift_bridgeObjectRetain(v34);
    goto LABEL_19;
  }
  while (1)
  {
    v35 = v50 + 1;
    if (__OFADD__(v50, 1))
      break;
    if (v35 >= v54)
    {
      v4 = v52;
      goto LABEL_18;
    }
    v36 = *(_QWORD *)(v53 + 8 * v35);
    ++v50;
    if (v36)
      goto LABEL_13;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000AAEBC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;

  v7 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = sub_1000268C0();
  v12 = sub_1000268C0();
  v13 = sub_10009E620(a2, (uint64_t)v9, v11 & 1, v12 & 1, a1);
  result = sub_1000124F8((uint64_t)v9, (uint64_t *)&unk_10015BA60);
  if (!v3)
    *a3 = v13;
  return result;
}

uint64_t sub_1000AAFB0(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  __int128 *v37;
  char *v38;
  uint64_t v39;
  _QWORD v40[8];

  v38 = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005C88(&qword_10015B188);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v39;
  result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 376))(a1, v38);
  if (!v15)
  {
    v38 = v14;
    v33 = v7;
    v34 = v5;
    v17 = *(_QWORD *)(result + 16);
    if (v17)
    {
      v32 = v4;
      v18 = *(int *)(v11 + 48);
      v19 = (uint64_t)v38;
      v37 = (__int128 *)&v38[v18];
      v20 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v27 = result;
      v21 = result + v20;
      v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144);
      v35 = *(_QWORD *)(v12 + 72);
      v36 = v22;
      v30 = xmmword_10010F380;
      v28 = xmmword_10010F050;
      v31 = v10;
      v29 = v2;
      do
      {
        sub_100019E1C(v21, v19, &qword_10015B188);
        sub_1000260AC(v19, (uint64_t)v10, (uint64_t *)&unk_10015BA60);
        v23 = sub_100004E2C(v37, (uint64_t)v40);
        v24 = v36(v23);
        __chkstk_darwin(v24);
        *(&v26 - 4) = v2;
        *(&v26 - 3) = (uint64_t)v40;
        v25 = v10;
        type metadata accessor for RealizedInfo(0);
        sub_100005F34((void (*)(uint64_t))sub_1000B23D8, (uint64_t)(&v26 - 6), v24);
        swift_release(v24);
        swift_release(v40[7]);
        sub_1000124F8((uint64_t)v10, (uint64_t *)&unk_10015BA60);
        v19 = (uint64_t)v38;
        sub_100005D08(v40);
        v21 += v35;
        --v17;
      }
      while (v17);
      result = v27;
    }
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_1000AB6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  char **v24;
  char *v25;
  char v26;
  uint64_t v27;
  NSObject *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint8_t *v34;
  os_signpost_id_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  NSObject *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  char *v57;
  uint64_t v58;
  uint8_t *v59;
  os_signpost_id_t v60;
  char **v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  void (*v64)(uint64_t, uint64_t);
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char v76;
  char v77;

  v70 = type metadata accessor for OSSignpostError(0);
  v72 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v71 = (char *)&v61 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v61 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v61 - v10;
  v75 = type metadata accessor for OSSignposter(0);
  v12 = *(_QWORD *)(v75 - 8);
  v13 = __chkstk_darwin(v75);
  __chkstk_darwin(v13);
  v16 = (char *)&v61 - v15;
  v17 = *(_DWORD *)(v0 + 640);
  if (qword_100164700 != -1)
  {
    v67 = v14;
    swift_once(&qword_100164700, sub_1000A4904);
    v14 = v67;
  }
  if ((dword_100175798 & ~v17) == 0)
  {
    v18 = sub_1000122F8();
    v19 = swift_allocError(&type metadata for KMError, v18, 0, 0);
    *(_QWORD *)v20 = 0xD000000000000096;
    *(_QWORD *)(v20 + 8) = 0x8000000100129340;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_QWORD *)(v20 + 64) = 0;
    *(_BYTE *)(v20 + 72) = 50;
    return swift_willThrow(v19);
  }
  v67 = v14;
  v68 = v9;
  v73 = v2;
  v69 = v0;
  v22 = sub_1000D3480();
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v62 = v22;
  v63 = v23;
  ((void (*)(char *))v23)(v16);
  v24 = sub_10009020C();
  v25 = *v24;
  v61 = v24;
  v26 = *((_BYTE *)v24 + 16);
  v27 = static OSSignpostID.exclusive.getter(v24);
  v28 = OSSignposter.logHandle.getter(v27);
  LODWORD(v64) = static os_signpost_type_t.begin.getter(v28);
  result = OS_os_log.signpostsEnabled.getter();
  v66 = v6;
  if ((result & 1) == 0)
    goto LABEL_9;
  if ((v26 & 1) != 0)
  {
    if ((unint64_t)v25 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v25 >> 11 == 27)
      {
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      if (v25 >> 16 <= 0x10)
      {
        v25 = &v76;
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
  if (!v25)
  {
    __break(1u);
LABEL_9:

    v29 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v30 = v73;
    v31 = v68;
    v29(v68, v11, v73);
    goto LABEL_15;
  }
LABEL_14:
  v65 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v32 = v68;
  v33 = v73;
  v65(v68, v11, v73);
  v34 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v34 = 0;
  v35 = OSSignpostID.rawValue.getter(v34);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, (os_signpost_type_t)v64, v35, v25, "", v34, 2u);
  swift_slowDealloc(v34, -1, -1);

  v31 = v32;
  v30 = v33;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v33);
  v29 = v65;
  v65(v32, v11, v33);
LABEL_15:
  v36 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v37 = OSSignpostIntervalState.init(id:isOpen:)(v31, 1);
  v38 = *(void (**)(char *, uint64_t))(v3 + 8);
  v38(v11, v30);
  v39 = *(void (**)(char *, uint64_t))(v12 + 8);
  v40 = v16;
  v41 = v75;
  v39(v40, v75);
  v42 = v69;
  v43 = v74;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v69 + 392))(0, 3);
  if (v43)
    return swift_release(v37);
  v64 = (void (*)(uint64_t, uint64_t))v39;
  v65 = v29;
  v44 = v67;
  v45 = v63(v67, v62, v41);
  v74 = *v61;
  v46 = *((_BYTE *)v61 + 16);
  v47 = OSSignposter.logHandle.getter(v45);
  v48 = v66;
  v49 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v63) = static os_signpost_type_t.end.getter(v49);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    v38(v48, v73);
    v64(v44, v75);
LABEL_29:
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 272))(1);
    return swift_release(v37);
  }
  if ((v46 & 1) == 0)
  {
    v51 = v71;
    v50 = v72;
    v52 = v66;
    if (v74)
    {
      v53 = v70;
LABEL_25:
      v54 = swift_retain(v37);
      checkForErrorAndConsumeState(state:)(v54);
      swift_release(v37);
      v55 = v37;
      if ((*(unsigned int (**)(char *, uint64_t))(v50 + 88))(v51, v53) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v56 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v53);
        v56 = "";
      }
      v57 = v68;
      v58 = v73;
      v65(v68, v52, v73);
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      v60 = OSSignpostID.rawValue.getter(v59);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, (os_signpost_type_t)v63, v60, v74, v56, v59, 2u);
      swift_slowDealloc(v59, -1, -1);

      v38(v52, v58);
      v64(v67, v75);
      v38(v57, v58);
      v42 = v69;
      v37 = v55;
      goto LABEL_29;
    }
    goto LABEL_34;
  }
  v51 = v71;
  v50 = v72;
  v52 = v66;
  if ((unint64_t)v74 >> 32)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v53 = v70;
  if (v74 >> 11 != 27)
  {
    if (v74 >> 16 <= 0x10)
    {
      v74 = &v77;
      goto LABEL_25;
    }
    goto LABEL_36;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000ABC8C()
{
  uint64_t v0;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
  if ((result & 1) == 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
  return result;
}

uint64_t sub_1000ABCD0()
{
  char **v0;
  char **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char **v56;
  char *v57;
  char v58;
  char *v59;
  uint64_t v60;
  NSObject *v61;
  void (*v62)(char *, char *, uint64_t);
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  uint8_t *v68;
  os_signpost_id_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char v80;
  NSObject *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  const char *v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  int v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  const char *v94;
  char *v95;
  uint64_t v96;
  uint8_t *v97;
  os_signpost_id_t v98;
  char **v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char **v105;
  char *v106;
  char *v107;
  char *v108;
  void (*v109)(char *, char *, uint64_t);
  char *v110;
  uint64_t v111;
  char *v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  _QWORD v118[3];
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  char v124;

  v1 = v0;
  v102 = type metadata accessor for OSSignpostError(0);
  v104 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v103 = (char *)&v99 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for OSSignpostID(0);
  v109 = *(void (**)(char *, char *, uint64_t))(v111 - 8);
  v3 = __chkstk_darwin(v111);
  v107 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v99 - v6;
  __chkstk_darwin(v5);
  v110 = (char *)&v99 - v8;
  v9 = type metadata accessor for OSSignposter(0);
  v113 = *(void (**)(char *, uint64_t))(v9 - 8);
  v114 = v9;
  v10 = __chkstk_darwin(v9);
  v106 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v112 = (char *)&v99 - v13;
  v14 = static os_log_type_t.info.getter(v12);
  v15 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
  v16 = (void *)static OS_os_log.default.getter(v15);
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v16, "AKEL has been updated", 21, 2, _swiftEmptyArrayStorage);

  v17 = (uint64_t)v1[25];
  v18 = (unint64_t)v1[26];
  v19 = (uint64_t *)sub_100026B38();
  v20 = *v19;
  v21 = v19[1];
  swift_bridgeObjectRetain(v21);
  v22 = sub_1000D1BE4(v20, v21);
  v24 = v23;
  swift_bridgeObjectRelease(v21);
  v121 = v17;
  v122 = v18;
  swift_bridgeObjectRetain(v18);
  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  v26 = v121;
  v27 = v122;
  v28 = (uint64_t)v1[5];
  v29 = (uint64_t)v1[6];
  sub_100004DE4(v1 + 2, v28);
  sub_10009C20C(v28, v29);
  v31 = v119;
  v30 = v120;
  sub_100004DE4(v118, v119);
  (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v30 + 16))(&v116, v26, v27, v31, v30);
  swift_bridgeObjectRelease(v27);
  if (v117)
  {
    sub_100004E2C(&v116, (uint64_t)&v121);
    v32 = sub_100005D08(v118);
    v33 = (*((uint64_t (**)(uint64_t))*v1 + 18))(v32);
    __chkstk_darwin(v33);
    *(&v99 - 2) = v1;
    *(&v99 - 1) = (char **)&v121;
    type metadata accessor for RealizedInfo(0);
    v34 = v115;
    sub_100005F34((void (*)(uint64_t))sub_1000B2450, (uint64_t)(&v99 - 4), v33);
    v35 = v34;
    if (v34)
    {
      sub_100005D08(&v121);
      return swift_release(v33);
    }
    v108 = v7;
    swift_release(v33);
    swift_release(v118[0]);
    sub_100005D08(&v121);
  }
  else
  {
    v108 = v7;
    sub_1000124F8((uint64_t)&v116, &qword_100157C78);
    sub_100005D08(v118);
    v37 = sub_100005C88(&qword_10015B148);
    v38 = swift_allocObject(v37, 64, 7);
    v101 = xmmword_10010F050;
    *(_OWORD *)(v38 + 16) = xmmword_10010F050;
    v121 = 0;
    v122 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease(v122);
    v121 = 0x3A676E696E726157;
    v122 = 0xE900000000000020;
    v39 = (uint64_t *)sub_100026B2C();
    v41 = *v39;
    v40 = (void *)v39[1];
    swift_bridgeObjectRetain(v40);
    v42._countAndFlagsBits = v41;
    v42._object = v40;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(v40);
    v43._countAndFlagsBits = 0x746F6E2073617720;
    v43._object = (void *)0xEF21646E756F6620;
    String.append(_:)(v43);
    v44 = v121;
    v45 = v122;
    *(_QWORD *)(v38 + 56) = &type metadata for String;
    *(_QWORD *)(v38 + 32) = v44;
    *(_QWORD *)(v38 + 40) = v45;
    print(_:separator:terminator:)(v38, 32, 0xE100000000000000, 10, 0xE100000000000000);
    v46 = swift_bridgeObjectRelease(v38);
    v47 = static os_log_type_t.error.getter(v46);
    v48 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v49 = swift_allocObject(v48, 72, 7);
    *(_OWORD *)(v49 + 16) = v101;
    v51 = *v39;
    v50 = v39[1];
    *(_QWORD *)(v49 + 56) = &type metadata for String;
    *(_QWORD *)(v49 + 64) = sub_100026838();
    *(_QWORD *)(v49 + 32) = v51;
    *(_QWORD *)(v49 + 40) = v50;
    swift_bridgeObjectRetain(v50);
    v53 = (void *)static OS_os_log.default.getter(v52);
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v53, "Warning: %{public}s was not found!", 34, 2, v49);
    swift_bridgeObjectRelease(v49);

    v35 = v115;
  }
  v54 = sub_1000D3480();
  v55 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v113 + 2);
  v55(v112, v54, v114);
  v56 = sub_1000901F4();
  v57 = *v56;
  v99 = v56;
  v58 = *((_BYTE *)v56 + 16);
  v59 = v110;
  v60 = static OSSignpostID.exclusive.getter(v56);
  v61 = OSSignposter.logHandle.getter(v60);
  LODWORD(v115) = static os_signpost_type_t.begin.getter(v61);
  result = OS_os_log.signpostsEnabled.getter();
  v105 = v1;
  *(_QWORD *)&v101 = v55;
  v100 = v54;
  if ((result & 1) == 0)
    goto LABEL_10;
  if ((v58 & 1) != 0)
  {
    if ((unint64_t)v57 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v57 >> 11 == 27)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      if (v57 >> 16 <= 0x10)
      {
        v57 = &v123;
        goto LABEL_15;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
  if (!v57)
  {
    __break(1u);
LABEL_10:

    v62 = v109;
    v63 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v109 + 2);
    v64 = v111;
    v65 = v108;
    v63(v108, v59, v111);
    goto LABEL_16;
  }
LABEL_15:
  v62 = v109;
  v66 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v109 + 2);
  v67 = v108;
  v64 = v111;
  v66(v108, v59, v111);
  v68 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v68 = 0;
  v69 = OSSignpostID.rawValue.getter(v68);
  v70 = v57;
  v65 = v67;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v61, (os_signpost_type_t)v115, v69, v70, "", v68, 2u);
  swift_slowDealloc(v68, -1, -1);

  (*((void (**)(char *, uint64_t))v62 + 1))(v67, v64);
  v63 = v66;
  v66(v67, v59, v64);
LABEL_16:
  v71 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
  v72 = OSSignpostIntervalState.init(id:isOpen:)(v65, 1);
  v73 = (void (*)(char *, uint64_t))*((_QWORD *)v62 + 1);
  v73(v59, v64);
  v74 = v65;
  v75 = (void (*)(char *, uint64_t))*((_QWORD *)v113 + 1);
  v76 = v114;
  v75(v112, v114);
  (*((void (**)(_QWORD, uint64_t))*v105 + 49))(0, 3);
  if (v35)
    return swift_release(v72);
  v112 = (char *)v73;
  v113 = v75;
  v109 = v63;
  v108 = v74;
  v115 = 0;
  v77 = v106;
  v78 = ((uint64_t (*)(char *, uint64_t, uint64_t))v101)(v106, v100, v76);
  v79 = *v99;
  v80 = *((_BYTE *)v99 + 16);
  v81 = OSSignposter.logHandle.getter(v78);
  v82 = v107;
  v83 = OSSignpostIntervalState.signpostID.getter();
  LODWORD(v110) = static os_signpost_type_t.end.getter(v83);
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    ((void (*)(char *, uint64_t))v112)(v82, v64);
    v113(v77, v76);
    return swift_release(v72);
  }
  if ((v80 & 1) != 0)
  {
    v84 = v106;
    v85 = v104;
    v86 = v103;
    if (!((unint64_t)v79 >> 32))
    {
      v88 = v102;
      if (v79 >> 11 == 27)
      {
LABEL_37:
        __break(1u);
        return result;
      }
      if (v79 >> 16 <= 0x10)
      {
        v87 = &v124;
        goto LABEL_27;
      }
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v84 = v106;
  v85 = v104;
  v86 = v103;
  if (!v79)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v87 = v79;
  v88 = v102;
LABEL_27:
  v89 = v81;
  v90 = swift_retain(v72);
  checkForErrorAndConsumeState(state:)(v90);
  swift_release(v72);
  v91 = (*(uint64_t (**)(char *, uint64_t))(v85 + 88))(v86, v88);
  v92 = (void (*)(char *, uint64_t))v112;
  v93 = v72;
  if (v91 == enum case for OSSignpostError.doubleEnd(_:))
  {
    v94 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v88);
    v94 = "";
  }
  v95 = v108;
  v96 = v111;
  v109(v108, v107, v111);
  v97 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v97 = 0;
  v98 = OSSignpostID.rawValue.getter(v97);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v89, (os_signpost_type_t)v110, v98, v87, v94, v97, 2u);
  swift_slowDealloc(v97, -1, -1);

  v92(v107, v96);
  v113(v84, v114);
  swift_release(v93);
  return ((uint64_t (*)(char *, uint64_t))v92)(v95, v96);
}

uint64_t sub_1000AC630@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;

  v7 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = sub_1000268C0();
  v12 = sub_10009E620(a2, (uint64_t)v9, 1, v11 & 1, a1);
  result = sub_1000124F8((uint64_t)v9, (uint64_t *)&unk_10015BA60);
  if (!v3)
    *a3 = v12;
  return result;
}

void sub_1000AC71C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[14];
  uint64_t v9;
  uint64_t v10;
  char *v11;

  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v8[13] = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005C88(&qword_100158BF0);
  __chkstk_darwin(v3);
  v11 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005C88(&qword_100158918);
  v6 = __chkstk_darwin(v5);
  v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  __asm { BR              X10 }
}

uint64_t sub_1000AC87C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void (*v105)(uint64_t, _QWORD *, unint64_t, uint64_t, uint64_t);
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  Swift::String v119;
  void *object;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;

  *(_QWORD *)(v8 - 336) = v6;
  result = (*(uint64_t (**)(void))(*v2 + 320))();
  if (!v4)
  {
    v10 = result;
    *(_QWORD *)(v8 - 352) = v3;
    v11 = v5;
    *(_QWORD *)(v8 - 328) = 0;
    sub_100005C44(result + OBJC_IVAR____TtC10driverkitd16KernelCollection_data, v8 - 136);
    swift_release(v10);
    *(_BYTE *)(v8 - 273) = 0;
    v12 = v2[5];
    v13 = v2[6];
    *(_QWORD *)(v8 - 320) = v2 + 2;
    sub_100004DE4(v2 + 2, v12);
    sub_10010731C(v12, v13);
    v14 = *(_QWORD *)(v7 + 32);
    v15 = sub_100004DE4((_QWORD *)(v8 - 176), *(_QWORD *)(v8 - 152));
    v16 = URL.path.getter(v15);
    v18 = v17;
    LOBYTE(v12) = (*(uint64_t (**)(uint64_t))(v14 + 136))(v16);
    swift_bridgeObjectRelease(v18);
    sub_100005D08((_QWORD *)(v8 - 176));
    if ((v12 & 1) == 0)
    {
      v20 = v11;
      v21 = *(_QWORD **)(v8 - 320);
LABEL_19:
      v86 = v2[5];
      v87 = v2[6];
      sub_100004DE4(v21, v86);
      sub_10010731C(v86, v87);
      v88 = *(_QWORD *)(v8 - 144);
      v89 = sub_100004DE4((_QWORD *)(v8 - 176), *(_QWORD *)(v8 - 152));
      v90 = URL.path.getter(v89);
      v92 = v91;
      (*(void (**)(uint64_t))(v88 + 40))(v90);
      swift_bridgeObjectRelease(v92);
      sub_100005D08((_QWORD *)(v8 - 176));
      v93 = v2[5];
      v94 = v2[6];
      sub_100004DE4(v21, v93);
      sub_10010731C(v93, v94);
      v95 = *(_QWORD *)(v8 - 184);
      v96 = sub_100004DE4((_QWORD *)(v8 - 216), *(_QWORD *)(v8 - 192));
      v97 = URL.path.getter(v96);
      v99 = v98;
      (*(void (**)(uint64_t))(v95 + 168))(v97);
      swift_bridgeObjectRelease(v99);
      if (*(_QWORD *)(v8 - 232))
      {
        *(_QWORD *)(v8 - 344) = v20;
        sub_100004E2C((__int128 *)(v8 - 256), v8 - 176);
        sub_100005D08((_QWORD *)(v8 - 216));
        v100 = *(_QWORD *)(v8 - 152);
        v101 = *(_QWORD *)(v8 - 144);
        sub_100004DE4((_QWORD *)(v8 - 176), v100);
        sub_100005C44(v8 - 136, v8 - 216);
        v102 = sub_100005C88(&qword_10015B190);
        swift_dynamicCast(v8 - 256, v8 - 216, v102, &type metadata for Data, 7);
        v103 = *(_QWORD *)(v8 - 256);
        v104 = *(_QWORD *)(v8 - 248);
        *(_QWORD *)(v8 - 272) = v103;
        *(_QWORD *)(v8 - 264) = v104;
        v105 = *(void (**)(uint64_t, _QWORD *, unint64_t, uint64_t, uint64_t))(v101 + 56);
        v106 = sub_1000B2468();
        v105(v8 - 272, &type metadata for Data, v106, v100, v101);
        sub_100011F40(v103, v104);
        v107 = *(_QWORD *)(v8 - 152);
        v108 = *(_QWORD *)(v8 - 144);
        sub_100004DE4((_QWORD *)(v8 - 176), v107);
        (*(void (**)(uint64_t, uint64_t))(v108 + 64))(v107, v108);
        v109 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v110 = swift_allocObject(v109, 72, 7);
        *(_OWORD *)(v110 + 16) = xmmword_10010F050;
        v111 = URL.path.getter(v110);
        v113 = v112;
        *(_QWORD *)(v110 + 56) = &type metadata for String;
        *(_QWORD *)(v110 + 64) = sub_100026838();
        *(_QWORD *)(v110 + 32) = v111;
        *(_QWORD *)(v110 + 40) = v113;
        v114 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
        v115 = (void *)static OS_os_log.default.getter(v114);
        v116 = static os_log_type_t.default.getter(v115);
        os_log(_:dso:log:type:_:)("wrote unwrapped kernel collection to %{public}s", 47, 2, &_mh_execute_header, v115, v116, v110);
        swift_bridgeObjectRelease(v110);

        goto LABEL_21;
      }
      sub_1000124F8(v8 - 256, &qword_10015B120);
      sub_100005D08((_QWORD *)(v8 - 216));
      *(_QWORD *)(v8 - 176) = 0;
      *(_QWORD *)(v8 - 168) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      v118 = swift_bridgeObjectRelease(*(_QWORD *)(v8 - 168));
      *(_QWORD *)(v8 - 176) = 0xD00000000000002BLL;
      *(_QWORD *)(v8 - 168) = 0x8000000100129440;
      v119._countAndFlagsBits = URL.path.getter(v118);
      object = v119._object;
      String.append(_:)(v119);
      swift_bridgeObjectRelease(object);
      v121 = *(_QWORD *)(v8 - 176);
      v122 = *(_QWORD *)(v8 - 168);
      v123 = sub_1000122F8();
      v59 = swift_allocError(&type metadata for KMError, v123, 0, 0);
      *(_QWORD *)v60 = v121;
      *(_QWORD *)(v60 + 8) = v122;
      *(_OWORD *)(v60 + 16) = 0u;
      *(_OWORD *)(v60 + 32) = 0u;
      *(_OWORD *)(v60 + 48) = 0u;
      *(_QWORD *)(v60 + 64) = 0;
      v61 = 19;
LABEL_23:
      *(_BYTE *)(v60 + 72) = v61;
      swift_willThrow(v59);
      v117 = (_QWORD *)(v8 - 136);
      return sub_100005D08(v117);
    }
    if ((*(_BYTE *)(v8 - 273) & 1) != 0)
    {
      v19 = *(_QWORD *)(v8 - 328);
      v20 = v11;
      v21 = *(_QWORD **)(v8 - 320);
LABEL_17:
      v82 = v2[5];
      v83 = v2[6];
      sub_100004DE4(v21, v82);
      sub_10010731C(v82, v83);
      v84 = *(_QWORD *)(v8 - 152);
      v85 = *(_QWORD *)(v8 - 144);
      sub_100004DE4((_QWORD *)(v8 - 176), v84);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 104))(v20, v84, v85);
      if (v19)
      {
LABEL_21:
        sub_100005D08((_QWORD *)(v8 - 136));
        v117 = (_QWORD *)(v8 - 176);
        return sub_100005D08(v117);
      }
      sub_100005D08((_QWORD *)(v8 - 176));
      goto LABEL_19;
    }
    v22 = sub_100005C88((uint64_t *)&unk_1001596E0);
    *(_QWORD *)(v8 - 360) = v22;
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v8 - 384) = xmmword_10010F050;
    *(_OWORD *)(v23 + 16) = xmmword_10010F050;
    v24 = v11;
    v25 = URL.path.getter(v23);
    v27 = v26;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    v28 = sub_100026838();
    *(_QWORD *)(v8 - 400) = v28;
    *(_QWORD *)(v23 + 64) = v28;
    *(_QWORD *)(v23 + 32) = v25;
    *(_QWORD *)(v23 + 40) = v27;
    v29 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    *(_QWORD *)(v8 - 392) = v29;
    v30 = (void *)static OS_os_log.default.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    os_log(_:dso:log:type:_:)("unwrapped kernel collection already present at %{public}s", 57, 2, &_mh_execute_header, v30, v31, v23);
    swift_bridgeObjectRelease(v23);

    v32 = v2[5];
    v33 = v2[6];
    v21 = *(_QWORD **)(v8 - 320);
    sub_100004DE4(v21, v32);
    sub_10010731C(v32, v33);
    v34 = *(_QWORD *)(v8 - 184);
    v35 = sub_100004DE4((_QWORD *)(v8 - 216), *(_QWORD *)(v8 - 192));
    *(_QWORD *)(v8 - 344) = v24;
    v36 = URL.path.getter(v35);
    v38 = v37;
    (*(void (**)(uint64_t))(v34 + 112))(v36);
    swift_bridgeObjectRelease(v38);
    if (!*(_QWORD *)(v8 - 232))
    {
      sub_1000124F8(v8 - 256, &qword_100158930);
      sub_100005D08((_QWORD *)(v8 - 216));
      *(_QWORD *)(v8 - 176) = 0;
      *(_QWORD *)(v8 - 168) = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease(*(_QWORD *)(v8 - 168));
      *(_QWORD *)(v8 - 176) = 0xD000000000000026;
      *(_QWORD *)(v8 - 168) = 0x80000001001294E0;
      v52 = type metadata accessor for URL(0);
      v53 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
      v55 = v54._object;
      String.append(_:)(v54);
      swift_bridgeObjectRelease(v55);
      v56 = *(_QWORD *)(v8 - 176);
      v57 = *(_QWORD *)(v8 - 168);
      v58 = sub_1000122F8();
      v59 = swift_allocError(&type metadata for KMError, v58, 0, 0);
      *(_QWORD *)v60 = v56;
      *(_QWORD *)(v60 + 8) = v57;
      *(_OWORD *)(v60 + 16) = 0u;
      *(_OWORD *)(v60 + 32) = 0u;
      *(_OWORD *)(v60 + 48) = 0u;
      *(_QWORD *)(v60 + 64) = 0;
      v61 = 58;
      goto LABEL_23;
    }
    sub_100004E2C((__int128 *)(v8 - 256), v8 - 176);
    sub_100005D08((_QWORD *)(v8 - 216));
    v39 = v2[5];
    v40 = v2[6];
    sub_100004DE4(v21, v39);
    sub_100071700(v39, v40);
    v41 = *(_QWORD *)(v8 - 192);
    v42 = *(_QWORD *)(v8 - 184);
    sub_100004DE4((_QWORD *)(v8 - 216), v41);
    v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 184))(v41, v42);
    v45 = v44;
    v47 = v46;
    sub_100005D08((_QWORD *)(v8 - 216));
    v20 = *(_QWORD *)(v8 - 344);
    if (v45 == 1)
    {
      v48 = sub_1000122F8();
      v49 = swift_allocError(&type metadata for KMError, v48, 0, 0);
      *(_QWORD *)v50 = 0xD000000000000027;
      *(_QWORD *)(v50 + 8) = 0x8000000100129510;
      *(_OWORD *)(v50 + 16) = 0u;
      *(_OWORD *)(v50 + 32) = 0u;
      *(_OWORD *)(v50 + 48) = 0u;
      *(_QWORD *)(v50 + 64) = 0;
      *(_BYTE *)(v50 + 72) = 16;
      v51 = swift_willThrow(v49);
      v19 = 0;
LABEL_15:
      v69 = static os_log_type_t.error.getter(v51);
      v70 = swift_allocObject(*(_QWORD *)(v8 - 360), 72, 7);
      *(_OWORD *)(v70 + 16) = *(_OWORD *)(v8 - 384);
      *(_QWORD *)(v8 - 216) = v49;
      swift_errorRetain(v49);
      v71 = sub_100005C88(&qword_10015AB50);
      v72 = String.init<A>(describing:)(v8 - 216, v71);
      v73 = *(_QWORD *)(v8 - 400);
      *(_QWORD *)(v70 + 56) = &type metadata for String;
      *(_QWORD *)(v70 + 64) = v73;
      *(_QWORD *)(v70 + 32) = v72;
      *(_QWORD *)(v70 + 40) = v74;
      v75 = v49;
      v76 = (void *)static OS_os_log.default.getter(v72);
      os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v76, "Unable to determine if pre-existing unwrapped kernelcollection has unchanged: %{public}s", 88, 2, v70);
      swift_bridgeObjectRelease(v70);

      swift_errorRelease(v75);
LABEL_16:
      v77 = swift_allocObject(*(_QWORD *)(v8 - 360), 72, 7);
      *(_OWORD *)(v77 + 16) = *(_OWORD *)(v8 - 384);
      v78 = URL.path.getter(v77);
      *(_QWORD *)(v77 + 56) = &type metadata for String;
      *(_QWORD *)(v77 + 64) = v73;
      *(_QWORD *)(v77 + 32) = v78;
      *(_QWORD *)(v77 + 40) = v79;
      v80 = (void *)static OS_os_log.default.getter(v78);
      v81 = static os_log_type_t.default.getter(v80);
      os_log(_:dso:log:type:_:)("removing pre-existing unwrapped kernelcollection at %{public}s", 62, 2, &_mh_execute_header, v80, v81, v77);
      swift_bridgeObjectRelease(v77);

      sub_100005D08((_QWORD *)(v8 - 176));
      goto LABEL_17;
    }
    v62 = *(_QWORD *)(v8 - 152);
    v63 = *(_QWORD *)(v8 - 144);
    sub_100004DE4((_QWORD *)(v8 - 176), v62);
    v64 = *(_QWORD *)(v8 - 328);
    sub_1000E2470(v43, v45, v47, v62, v63, *(_QWORD *)(v8 - 352));
    v49 = v64;
    if (v64)
    {
      v51 = sub_100072744(v43, v45);
LABEL_14:
      v19 = 0;
      v20 = *(_QWORD *)(v8 - 344);
      v21 = *(_QWORD **)(v8 - 320);
      goto LABEL_15;
    }
    *(_QWORD *)(v8 - 416) = 0;
    v65 = *(_QWORD *)(v8 - 112);
    v66 = *(_QWORD *)(v8 - 104);
    sub_100004DE4((_QWORD *)(v8 - 136), v65);
    v67 = *(_QWORD *)(v8 - 336);
    *(_QWORD *)(v8 - 408) = v43;
    *(_QWORD *)(v8 - 328) = v47;
    v68 = *(_QWORD *)(v8 - 416);
    sub_1000E2470(v43, v45, v47, v65, v66, v67);
    v19 = v68;
    if (v68)
    {
      sub_1000124F8(*(_QWORD *)(v8 - 352), &qword_100158918);
      v51 = sub_100072744(*(_QWORD *)(v8 - 408), v45);
      v49 = v68;
      goto LABEL_14;
    }
    sub_100072744(*(_QWORD *)(v8 - 408), v45);
    v124 = *(int *)(v0 + 48);
    v125 = *(_QWORD *)(v8 - 288);
    v126 = v125 + v124;
    sub_100019E1C(*(_QWORD *)(v8 - 352), v125, &qword_100158918);
    *(_QWORD *)(v8 - 336) = v67;
    sub_100019E1C(v67, v126, &qword_100158918);
    v127 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 296) + 48);
    v128 = *(_QWORD *)(v8 - 304);
    v129 = v127(v125, 1, v128);
    v20 = *(_QWORD *)(v8 - 344);
    v21 = *(_QWORD **)(v8 - 320);
    if (v129 == 1)
    {
      v130 = v127(v126, 1, v128);
      v131 = *(_QWORD *)(v8 - 360);
      if (v130 == 1)
      {
        sub_1000124F8(*(_QWORD *)(v8 - 288), &qword_100158918);
LABEL_34:
        v141 = swift_allocObject(v131, 72, 7);
        *(_OWORD *)(v141 + 16) = *(_OWORD *)(v8 - 384);
        v142 = URL.path.getter(v141);
        v143 = *(_QWORD *)(v8 - 400);
        *(_QWORD *)(v141 + 56) = &type metadata for String;
        *(_QWORD *)(v141 + 64) = v143;
        *(_QWORD *)(v141 + 32) = v142;
        *(_QWORD *)(v141 + 40) = v144;
        v145 = (void *)static OS_os_log.default.getter(v142);
        v146 = static os_log_type_t.default.getter(v145);
        os_log(_:dso:log:type:_:)("pre-existing unwrapped kernelcollection at %{public}s is still valid", 68, 2, &_mh_execute_header, v145, v146, v141);
        swift_bridgeObjectRelease(v141);

        sub_1000124F8(*(_QWORD *)(v8 - 336), &qword_100158918);
        sub_1000124F8(*(_QWORD *)(v8 - 352), &qword_100158918);
        goto LABEL_21;
      }
    }
    else
    {
      sub_100019E1C(v125, v1, &qword_100158918);
      *(_QWORD *)(v8 - 328) = v126;
      if (v127(v126, 1, v128) != 1)
      {
        v138 = *(_QWORD *)(v8 - 312);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 296) + 32))(v138, *(_QWORD *)(v8 - 328), v128);
        v139 = sub_100012534(&qword_100158BF8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        *(_DWORD *)(v8 - 328) = dispatch thunk of static Equatable.== infix(_:_:)(v1, v138, v128, v139);
        v140 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 296) + 8);
        v140(v138, v128);
        v140(v1, v128);
        sub_1000124F8(v125, &qword_100158918);
        v131 = *(_QWORD *)(v8 - 360);
        if ((*(_DWORD *)(v8 - 328) & 1) != 0)
          goto LABEL_34;
LABEL_32:
        v132 = swift_allocObject(v131, 72, 7);
        *(_OWORD *)(v132 + 16) = *(_OWORD *)(v8 - 384);
        v133 = URL.path.getter(v132);
        v134 = *(_QWORD *)(v8 - 400);
        *(_QWORD *)(v132 + 56) = &type metadata for String;
        *(_QWORD *)(v132 + 64) = v134;
        *(_QWORD *)(v132 + 32) = v133;
        *(_QWORD *)(v132 + 40) = v135;
        v136 = (void *)static OS_os_log.default.getter(v133);
        v137 = static os_log_type_t.default.getter(v136);
        os_log(_:dso:log:type:_:)("pre-existing unwrapped kernelcollection at %{public}s is stale", 62, 2, &_mh_execute_header, v136, v137, v132);
        swift_bridgeObjectRelease(v132);

        v73 = v134;
        sub_1000124F8(*(_QWORD *)(v8 - 336), &qword_100158918);
        sub_1000124F8(*(_QWORD *)(v8 - 352), &qword_100158918);
        goto LABEL_16;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 296) + 8))(v1, v128);
      v131 = *(_QWORD *)(v8 - 360);
    }
    sub_1000124F8(*(_QWORD *)(v8 - 288), &qword_100158BF0);
    goto LABEL_32;
  }
  return result;
}

uint64_t sub_1000AD984(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[10];
  __int128 v11;
  _BYTE v12[24];
  int v13;

  v10[3] = a1;
  v2 = type metadata accessor for URL(0);
  v10[7] = *(_QWORD *)(v2 - 8);
  v10[8] = v2;
  v3 = __chkstk_darwin(v2);
  v10[5] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v10[6] = (char *)v10 - v5;
  v6 = sub_1000902E0();
  result = swift_beginAccess(v6, v12, 0, 0);
  v8 = *v6;
  v9 = *(_QWORD *)(*v6 + 16);
  if (v9)
  {
    v10[9] = v1;
    swift_bridgeObjectRetain(v8);
    v13 = 0;
    v10[2] = v9 - 1;
    v11 = xmmword_10010F050;
    if (*(_QWORD *)(v8 + 16))
      __asm { BR              X8 }
    __break(1u);
    JUMPOUT(0x1000ADCC8);
  }
  return result;
}

BOOL sub_1000ADCD8()
{
  uint64_t v0;
  int v1;
  int v2;
  _BOOL4 v4;

  v1 = *(_DWORD *)(v0 + 640);
  if (qword_1001646F8 != -1)
    swift_once(&qword_1001646F8, sub_1000A48F4);
  v2 = *(unsigned __int8 *)(v0 + 644);
  if (v2 == 2)
    return 0;
  v4 = (v2 & 1) == 0;
  return (dword_100175794 & ~v1) != 0 && v4;
}

_QWORD *sub_1000ADD48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[74];

  sub_100005D08(v0 + 2);
  memcpy(v6, v0 + 7, 0x24DuLL);
  sub_100038E40(v6);
  swift_release(v0[81]);
  swift_bridgeObjectRelease(v0[82]);
  v1 = v0[84];
  v2 = v0[85];
  swift_bridgeObjectRelease(v0[83]);
  sub_1000B1DB4(v1, v2);
  v3 = v0[88];
  v4 = v0[89];
  swift_bridgeObjectRelease(v0[87]);
  sub_1000B1DB4(v3, v4);
  swift_bridgeObjectRelease(v0[91]);
  return v0;
}

uint64_t sub_1000ADDE4()
{
  uint64_t v0;

  sub_1000ADD48();
  return swift_deallocClassInstance(v0, 737, 7);
}

uint64_t sub_1000ADE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  Class v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  Class isa;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  if (!a3)
    goto LABEL_13;
  v6 = v3[4];
  sub_100005D68(0, &qword_10015B128, NSPredicate_ptr);
  if (sub_1000D2610())
    goto LABEL_13;
  v28 = a1;
  v29 = a2;
  v30 = v3;
  if ((unint64_t)v6 >> 62)
    goto LABEL_44;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v6);
  if (v7)
    goto LABEL_5;
  do
  {
LABEL_12:
    swift_bridgeObjectRelease(v6);
    a2 = v29;
    v3 = v30;
    a1 = v28;
LABEL_13:
    v14 = v3[2];
    if (*(_QWORD *)(v14 + 16) && (sub_100083E04(a1, a2, v14) & 1) != 0)
      return 0;
    if (*(_QWORD *)(*v3 + 16))
      return (sub_100083E04(a1, a2, *v3) & 1) == 0;
    v16 = v3[1];
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = sub_100083E04(a1, a2, v16);
      if ((v17 & 1) != 0)
        result = 1;
      else
        result = 2;
      if (!a3 || (v17 & 1) != 0)
        return result;
    }
    else if (!a3)
    {
      return 2;
    }
    v19 = v3[3];
    sub_100005D68(0, &qword_10015B128, NSPredicate_ptr);
    if (sub_1000D2610())
      return 2;
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0)
        v27 = v19;
      else
        v27 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v19);
      v20 = _CocoaArrayWrapper.endIndex.getter(v27);
      if (!v20)
      {
LABEL_38:
        swift_bridgeObjectRelease(v19);
        return 2;
      }
    }
    else
    {
      v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v19);
      if (!v20)
        goto LABEL_38;
    }
    v6 = 4;
    while (1)
    {
      v21 = (v19 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v19)
          : *(id *)(v19 + 8 * v6);
      v22 = v21;
      v23 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v25 = objc_msgSend(v22, "evaluateWithObject:", isa);

      if (!v25)
      {
        v18 = v19;
        goto LABEL_26;
      }
      ++v6;
      if (v23 == v20)
        goto LABEL_38;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    if (v6 < 0)
      v26 = v6;
    else
      v26 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v26);
  }
  while (!v7);
LABEL_5:
  v8 = 4;
  while (1)
  {
    if ((v6 & 0xC000000000000001) != 0)
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6);
    else
      v9 = *(id *)(v6 + 8 * v8);
    v10 = v9;
    v11 = v8 - 3;
    if (__OFADD__(v8 - 4, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    v12 = Dictionary._bridgeToObjectiveC()().super.isa;
    v13 = objc_msgSend(v10, "evaluateWithObject:", v12);

    if (!v13)
      break;
    ++v8;
    if (v11 == v7)
      goto LABEL_12;
  }
  v18 = v6;
LABEL_26:
  swift_bridgeObjectRelease(v18);
  return 1;
}

unint64_t sub_1000AE120()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t result;
  uint64_t v3;

  v0 = sub_100005C88(&qword_10015B3F0);
  inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_100111CB0;
  *(_BYTE *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_100114680);
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = swift_getKeyPath(&unk_1001146A0);
  *(_BYTE *)(inited + 64) = 2;
  *(_QWORD *)(inited + 72) = swift_getKeyPath(&unk_1001146C0);
  result = sub_1000A555C(inited);
  qword_1001757A0 = result;
  return result;
}

uint64_t sub_1000AE1B8()
{
  const void *v0;
  _BYTE v2[589];

  memcpy(v2, v0, sizeof(v2));
  return sub_1000A71DC();
}

unint64_t sub_1000AE1F0(char a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(v4 + 40);
  v9 = a2();
  v10 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, a3, v9);
  return sub_1000AE3E4(a1, v10, a4, a3);
}

unint64_t sub_1000AE26C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  Swift::Int v12;
  _QWORD v15[9];

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v8);
  v10 = (char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v15, *(_QWORD *)(v2 + 40));
  sub_100019E1C(a1, (uint64_t)v10, (uint64_t *)&unk_10015BA60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v11 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v15, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v12 = Hasher._finalize()();
  return sub_1000AE4B0(a1, v12);
}

unint64_t sub_1000AE3E4(char a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v11;
  char v12;

  v12 = a1;
  v5 = -1 << *(_BYTE *)(v4 + 32);
  v6 = a2 & ~v5;
  if (((*(_QWORD *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v8 = ~v5;
    v9 = a3();
    do
    {
      v11 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v6);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v11, &v12, a4, v9) & 1) != 0)
        break;
      v6 = (v6 + 1) & v8;
    }
    while (((*(_QWORD *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t sub_1000AE4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v35 = a1;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005C88(&qword_100159408);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v12 = __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  v16 = (char *)&v29 - v15;
  v17 = v3 + 64;
  v36 = v3;
  v18 = -1 << *(_BYTE *)(v3 + 32);
  v19 = a2 & ~v18;
  if (((*(_QWORD *)(v3 + 64 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
  {
    v32 = v14;
    v33 = ~v18;
    v34 = *(_QWORD *)(v13 + 72);
    v29 = v8;
    v31 = v3 + 64;
    while (1)
    {
      sub_100019E1C(*(_QWORD *)(v36 + 48) + v34 * v19, (uint64_t)v16, (uint64_t *)&unk_10015BA60);
      v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_100019E1C((uint64_t)v16, (uint64_t)v10, (uint64_t *)&unk_10015BA60);
      sub_100019E1C(v35, v20, (uint64_t *)&unk_10015BA60);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
      if (v21(v10, 1, v5) == 1)
        break;
      v22 = v32;
      sub_100019E1C((uint64_t)v10, v32, (uint64_t *)&unk_10015BA60);
      if (v21((char *)v20, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v22, v5);
        v17 = v31;
LABEL_4:
        sub_1000124F8((uint64_t)v10, &qword_100159408);
        sub_1000124F8((uint64_t)v16, (uint64_t *)&unk_10015BA60);
        goto LABEL_5;
      }
      v23 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v30, v20, v5);
      v24 = sub_100012534(&qword_100157E98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v23, v5, v24);
      v26 = *(void (**)(char *, uint64_t))(v6 + 8);
      v27 = v23;
      v8 = v29;
      v26(v27, v5);
      v26((char *)v22, v5);
      sub_1000124F8((uint64_t)v10, (uint64_t *)&unk_10015BA60);
      sub_1000124F8((uint64_t)v16, (uint64_t *)&unk_10015BA60);
      v17 = v31;
      if ((v25 & 1) != 0)
        return v19;
LABEL_5:
      v19 = (v19 + 1) & v33;
      if (((*(_QWORD *)(v17 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        return v19;
    }
    if (v21((char *)v20, 1, v5) == 1)
    {
      sub_1000124F8((uint64_t)v10, (uint64_t *)&unk_10015BA60);
      sub_1000124F8((uint64_t)v16, (uint64_t *)&unk_10015BA60);
      return v19;
    }
    goto LABEL_4;
  }
  return v19;
}

uint64_t sub_1000AE7DC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1000B0F50((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_1000AE93C(v5);
  *a1 = v2;
  return result;
}

_QWORD *sub_1000AE844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100005C88(&qword_10015BB40);
  v4 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain(a1);
      v11 = sub_1000B0C00(&v12, (uint64_t)v8 + v7, v1, a1);
      sub_100005DE0(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AE93C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  Swift::Int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  char *v14;
  char v15;
  unint64_t v16;
  int v17;
  Swift::Int v18;
  char v19;
  Swift::Int v20;
  Swift::Int v21;
  char v22;
  uint64_t v23;
  Swift::Int v24;
  unint64_t v25;
  char *v26;
  char v27;
  Swift::Int v28;
  char *v29;
  char v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  Swift::Int *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  Swift::Int v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t *v95;
  Swift::Int v96;
  _QWORD *v97;
  uint64_t v98;
  Swift::Int v99;
  _BYTE *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;

  v2 = v1;
  v3 = a1;
  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_139;
    if (v4)
      return sub_1000AF00C(0, v4, 1, v3);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_138;
  v98 = result;
  if (v4 <= 1)
  {
    v100 = &_swiftEmptyArrayStorage[4];
    v97 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      v11 = _swiftEmptyArrayStorage[2];
      v10 = (char *)_swiftEmptyArrayStorage;
      if (v11 < 2)
        goto LABEL_114;
      goto LABEL_101;
    }
  }
  else
  {
    v7 = v6 >> 1;
    result = static Array._allocateBufferUninitialized(minimumCapacity:)(v6 >> 1, &type metadata for CollectionKind);
    *(_QWORD *)(result + 16) = v7;
    v97 = (_QWORD *)result;
    v100 = (_BYTE *)(result + 32);
  }
  v8 = 0;
  v9 = *v3;
  v95 = v3;
  v96 = v4 - 2;
  v10 = (char *)_swiftEmptyArrayStorage;
  v99 = v4;
  while (1)
  {
    v12 = v8++;
    if (v8 < v4)
    {
      v13 = v4;
      v14 = v10;
      v15 = *(_BYTE *)(v9 + v12);
      v107 = *(_BYTE *)(v9 + v8);
      v106 = v15;
      v16 = sub_1000B479C();
      result = dispatch thunk of static Comparable.< infix(_:_:)(&v107, &v106, &type metadata for CollectionKind, v16);
      v17 = result;
      v8 = v12 + 2;
      if (v12 + 2 >= v13)
      {
LABEL_21:
        v10 = v14;
        if ((v17 & 1) == 0)
          goto LABEL_31;
      }
      else
      {
        v18 = v12;
        while (1)
        {
          v19 = *(_BYTE *)(v9 + v18 + 1);
          v105 = *(_BYTE *)(v9 + v18 + 2);
          v104 = v19;
          result = dispatch thunk of static Comparable.< infix(_:_:)(&v105, &v104, &type metadata for CollectionKind, v16);
          if (((v17 ^ result) & 1) != 0)
            break;
          if (v96 == ++v18)
          {
            v8 = v99;
            goto LABEL_21;
          }
        }
        v8 = v18 + 2;
        v10 = v14;
        if ((v17 & 1) == 0)
        {
LABEL_31:
          v4 = v99;
          goto LABEL_32;
        }
      }
      v4 = v99;
      if (v8 < v12)
        goto LABEL_140;
      if (v12 < v8)
      {
        v20 = v8 - 1;
        v21 = v12;
        do
        {
          if (v21 != v20)
          {
            if (!v9)
              goto LABEL_145;
            v22 = *(_BYTE *)(v9 + v21);
            *(_BYTE *)(v9 + v21) = *(_BYTE *)(v9 + v20);
            *(_BYTE *)(v9 + v20) = v22;
          }
          v64 = ++v21 < v20--;
        }
        while (v64);
      }
    }
LABEL_32:
    if (v8 >= v4)
      goto LABEL_47;
    if (__OFSUB__(v8, v12))
      goto LABEL_137;
    if (v8 - v12 >= v98)
    {
LABEL_47:
      v23 = v2;
      goto LABEL_48;
    }
    if (__OFADD__(v12, v98))
      goto LABEL_141;
    if (v12 + v98 < v4)
      v4 = v12 + v98;
    if (v4 < v12)
      break;
    v23 = v2;
    if (v8 != v4)
    {
      v24 = v12;
      v102 = v10;
      v25 = sub_1000B479C();
      v26 = (char *)(v9 + v8);
      do
      {
        v27 = *(_BYTE *)(v9 + v8);
        v28 = v24;
        v29 = v26;
        do
        {
          v30 = *(v29 - 1);
          v109 = v27;
          v108 = v30;
          result = dispatch thunk of static Comparable.< infix(_:_:)(&v109, &v108, &type metadata for CollectionKind, v25);
          if ((result & 1) == 0)
            break;
          if (!v9)
            goto LABEL_143;
          v27 = *v29;
          *v29 = *(v29 - 1);
          *(v29 - 1) = v27;
          ++v28;
          --v29;
        }
        while (v8 != v28);
        ++v8;
        ++v26;
      }
      while (v8 != v4);
      v8 = v4;
      v10 = v102;
      v12 = v24;
      if (v4 < v24)
        goto LABEL_132;
      goto LABEL_49;
    }
LABEL_48:
    if (v8 < v12)
      goto LABEL_132;
LABEL_49:
    v31 = v10;
    result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) != 0)
    {
      v10 = v31;
    }
    else
    {
      result = (uint64_t)sub_1000592AC(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
      v10 = (char *)result;
    }
    v33 = *((_QWORD *)v10 + 2);
    v32 = *((_QWORD *)v10 + 3);
    v11 = v33 + 1;
    v101 = v23;
    if (v33 >= v32 >> 1)
    {
      result = (uint64_t)sub_1000592AC((char *)(v32 > 1), v33 + 1, 1, v10);
      v10 = (char *)result;
    }
    *((_QWORD *)v10 + 2) = v11;
    v34 = v10 + 32;
    v35 = (Swift::Int *)&v10[16 * v33 + 32];
    *v35 = v12;
    v35[1] = v8;
    if (v33)
    {
      v103 = (uint64_t)v10;
      while (1)
      {
        v36 = v11 - 1;
        if (v11 >= 4)
        {
          v41 = &v34[2 * v11];
          v42 = *(v41 - 8);
          v43 = *(v41 - 7);
          v47 = __OFSUB__(v43, v42);
          v44 = v43 - v42;
          if (v47)
            goto LABEL_121;
          v46 = *(v41 - 6);
          v45 = *(v41 - 5);
          v47 = __OFSUB__(v45, v46);
          v39 = v45 - v46;
          v40 = v47;
          if (v47)
            goto LABEL_122;
          v48 = v11 - 2;
          v49 = &v34[2 * v11 - 4];
          v51 = *v49;
          v50 = v49[1];
          v47 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          if (v47)
            goto LABEL_123;
          v47 = __OFADD__(v39, v52);
          v53 = v39 + v52;
          if (v47)
            goto LABEL_125;
          if (v53 >= v44)
          {
            v71 = &v34[2 * v36];
            v73 = *v71;
            v72 = v71[1];
            v47 = __OFSUB__(v72, v73);
            v74 = v72 - v73;
            if (v47)
              goto LABEL_131;
            v64 = v39 < v74;
            goto LABEL_86;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v65 = *((_QWORD *)v10 + 4);
            v66 = *((_QWORD *)v10 + 5);
            v47 = __OFSUB__(v66, v65);
            v58 = v66 - v65;
            v59 = v47;
            goto LABEL_80;
          }
          v38 = *((_QWORD *)v10 + 4);
          v37 = *((_QWORD *)v10 + 5);
          v47 = __OFSUB__(v37, v38);
          v39 = v37 - v38;
          v40 = v47;
        }
        if ((v40 & 1) != 0)
          goto LABEL_124;
        v48 = v11 - 2;
        v54 = &v34[2 * v11 - 4];
        v56 = *v54;
        v55 = v54[1];
        v57 = __OFSUB__(v55, v56);
        v58 = v55 - v56;
        v59 = v57;
        if (v57)
          goto LABEL_126;
        v60 = &v34[2 * v36];
        v62 = *v60;
        v61 = v60[1];
        v47 = __OFSUB__(v61, v62);
        v63 = v61 - v62;
        if (v47)
          goto LABEL_128;
        if (__OFADD__(v58, v63))
          goto LABEL_130;
        if (v58 + v63 >= v39)
        {
          v64 = v39 < v63;
LABEL_86:
          if (v64)
            v36 = v48;
          goto LABEL_88;
        }
LABEL_80:
        if ((v59 & 1) != 0)
          goto LABEL_127;
        v67 = &v34[2 * v36];
        v69 = *v67;
        v68 = v67[1];
        v47 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v47)
          goto LABEL_129;
        if (v70 < v58)
          goto LABEL_14;
LABEL_88:
        v75 = v36 - 1;
        if (v36 - 1 >= v11)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v9)
          goto LABEL_144;
        v76 = v8;
        v77 = v9;
        v78 = &v34[2 * v75];
        v79 = v34;
        v80 = *v78;
        v81 = v79;
        v82 = v36;
        v83 = &v79[2 * v36];
        v84 = v83[1];
        v85 = v77;
        result = sub_1000AF0EC((_BYTE *)(v77 + *v78), (_BYTE *)(v77 + *v83), v77 + v84, v100);
        if (v101)
        {
LABEL_99:
          v87 = (char *)v103;
          goto LABEL_115;
        }
        if (v84 < v80)
          goto LABEL_118;
        if (v82 > *(_QWORD *)(v103 + 16))
          goto LABEL_119;
        *v78 = v80;
        v81[2 * v75 + 1] = v84;
        v86 = *(_QWORD *)(v103 + 16);
        if (v82 >= v86)
          goto LABEL_120;
        v34 = v81;
        v11 = v86 - 1;
        result = (uint64_t)memmove(v83, v83 + 2, 16 * (v86 - 1 - v82));
        v10 = (char *)v103;
        *(_QWORD *)(v103 + 16) = v86 - 1;
        v9 = v85;
        v8 = v76;
        if (v86 <= 2)
          goto LABEL_14;
      }
    }
    v11 = 1;
LABEL_14:
    v4 = v99;
    v2 = v101;
    if (v8 >= v99)
    {
      v3 = v95;
      if (v11 < 2)
      {
LABEL_114:
        v87 = v10;
LABEL_115:
        swift_bridgeObjectRelease(v87);
        v97[2] = 0;
        return swift_bridgeObjectRelease(v97);
      }
LABEL_101:
      v88 = *v3;
      while (1)
      {
        v89 = v11 - 2;
        if (v11 < 2)
          goto LABEL_133;
        if (!v88)
          goto LABEL_146;
        v103 = (uint64_t)v10;
        v90 = *(_QWORD *)&v10[16 * v89 + 32];
        v91 = *(_QWORD *)&v10[16 * v11 + 24];
        result = sub_1000AF0EC((_BYTE *)(v88 + v90), (_BYTE *)(v88 + *(_QWORD *)&v10[16 * v11 + 16]), v88 + v91, v100);
        if (v2)
          goto LABEL_99;
        if (v91 < v90)
          goto LABEL_134;
        result = swift_isUniquelyReferenced_nonNull_native(v103);
        if ((result & 1) != 0)
        {
          v92 = (char *)v103;
        }
        else
        {
          result = (uint64_t)sub_1000593A4(v103);
          v92 = (char *)result;
        }
        if (v89 >= *((_QWORD *)v92 + 2))
          goto LABEL_135;
        v93 = &v92[16 * v89 + 32];
        *(_QWORD *)v93 = v90;
        *((_QWORD *)v93 + 1) = v91;
        v94 = *((_QWORD *)v92 + 2);
        if (v11 > v94)
          goto LABEL_136;
        result = (uint64_t)memmove(&v92[16 * v11 + 16], &v92[16 * v11 + 32], 16 * (v94 - v11));
        v10 = v92;
        *((_QWORD *)v92 + 2) = v94 - 1;
        v11 = v94 - 1;
        if (v94 <= 2)
          goto LABEL_114;
      }
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
  return result;
}

uint64_t sub_1000AF00C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  char v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = sub_1000B479C();
    v9 = (char *)(v7 + v4);
LABEL_5:
    v10 = *(_BYTE *)(v7 + v4);
    v11 = v6;
    v12 = v9;
    while (1)
    {
      v13 = *(v12 - 1);
      v15 = v10;
      v14 = v13;
      result = dispatch thunk of static Comparable.< infix(_:_:)(&v15, &v14, &type metadata for CollectionKind, v8);
      if ((result & 1) == 0)
      {
LABEL_4:
        ++v4;
        ++v9;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v10 = *v12;
      *v12 = *(v12 - 1);
      *(v12 - 1) = v10;
      ++v11;
      --v12;
      if (v4 == v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AF0EC(_BYTE *__dst, _BYTE *__src, unint64_t a3, _BYTE *a4)
{
  _BYTE *v4;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  char v12;
  _BYTE *v13;
  BOOL v14;
  _BYTE *v15;
  char v16;
  _BYTE *v17;
  _BYTE *v18;
  BOOL v19;
  unint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = a3 - (_QWORD)__src;
  if (__src - __dst < (uint64_t)(a3 - (_QWORD)__src))
  {
    if (a4 != __dst || __src <= a4)
      memmove(a4, __dst, v8);
    v10 = &v4[v8];
    if ((unint64_t)v6 >= a3 || v8 < 1)
    {
LABEL_16:
      v6 = v7;
      if (v7 != v4)
        goto LABEL_40;
      goto LABEL_39;
    }
    v11 = sub_1000B479C();
    while (1)
    {
      v12 = *v4;
      v23 = *v6;
      v22 = v12;
      if ((dispatch thunk of static Comparable.< infix(_:_:)(&v23, &v22, &type metadata for CollectionKind, v11) & 1) == 0)
        break;
      v13 = v6;
      v14 = v7 == v6++;
      if (!v14)
        goto LABEL_13;
LABEL_14:
      ++v7;
      if (v4 >= v10 || (unint64_t)v6 >= a3)
        goto LABEL_16;
    }
    v13 = v4;
    v14 = v7 == v4++;
    if (v14)
      goto LABEL_14;
LABEL_13:
    *v7 = *v13;
    goto LABEL_14;
  }
  if (a4 != __src || a3 <= (unint64_t)a4)
    memmove(a4, __src, a3 - (_QWORD)__src);
  v10 = &v4[v9];
  if (v7 >= v6 || v9 < 1)
  {
LABEL_38:
    if (v6 != v4)
      goto LABEL_40;
    goto LABEL_39;
  }
  v21 = sub_1000B479C();
  v15 = (_BYTE *)(a3 - 1);
  while (1)
  {
    v17 = v6 - 1;
    v16 = *(v6 - 1);
    v18 = v15 + 1;
    v25 = *(v10 - 1);
    v24 = v16;
    if ((dispatch thunk of static Comparable.< infix(_:_:)(&v25, &v24, &type metadata for CollectionKind, v21) & 1) != 0)
    {
      if (v18 == v6)
      {
        v19 = v15 >= v6--;
        if (v19)
          goto LABEL_35;
        goto LABEL_36;
      }
      --v6;
LABEL_35:
      *v15 = *v17;
      goto LABEL_36;
    }
    v17 = v10 - 1;
    if (v18 != v10)
    {
      --v10;
      goto LABEL_35;
    }
    v19 = v15 >= v10--;
    if (v19)
      goto LABEL_35;
LABEL_36:
    if (v6 <= v7)
      break;
    --v15;
    if (v10 <= v4)
      goto LABEL_38;
  }
  if (v6 != v4)
  {
LABEL_40:
    memmove(v6, v4, v10 - v4);
    return 1;
  }
LABEL_39:
  if (v6 >= v10)
    goto LABEL_40;
  return 1;
}

void (*sub_1000AF334(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;

  v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  v7[9] = sub_10002AAA4(v7);
  v7[10] = sub_1000AF3C4(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10002972C;
}

void (*sub_1000AF3C4(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_100005DE8(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_10002AA68;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1000B01A8();
      goto LABEL_7;
    }
    sub_1000AF750(v16, a4 & 1);
    v20 = sub_100005DE8(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000AF4F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v3 = v2;
  v6 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100005C88(&qword_10015B178);
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  if (*(_QWORD *)(v10 + 16))
  {
    v28 = v3;
    v12 = 1 << *(_BYTE *)(v10 + 32);
    v13 = (_QWORD *)(v10 + 64);
    v14 = -1;
    if (v12 < 64)
      v14 = ~(-1 << v12);
    v15 = v14 & *(_QWORD *)(v10 + 64);
    v16 = (unint64_t)(v12 + 63) >> 6;
    result = swift_retain(v10);
    v18 = 0;
    while (1)
    {
      if (v15)
      {
        v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v21 = v20 | (v18 << 6);
      }
      else
      {
        v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
        if (v22 >= v16)
          goto LABEL_25;
        v23 = v13[v22];
        ++v18;
        if (!v23)
        {
          v18 = v22 + 1;
          if (v22 + 1 >= v16)
            goto LABEL_25;
          v23 = v13[v18];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v16)
            {
LABEL_25:
              swift_release(v10);
              if ((a2 & 1) == 0)
              {
                result = swift_release(v10);
                v3 = v28;
                goto LABEL_32;
              }
              v26 = 1 << *(_BYTE *)(v10 + 32);
              if (v26 >= 64)
                bzero((void *)(v10 + 64), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v13 = -1 << v26;
              v3 = v28;
              *(_QWORD *)(v10 + 16) = 0;
              break;
            }
            v23 = v13[v24];
            if (!v23)
            {
              while (1)
              {
                v18 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_34;
                if (v18 >= v16)
                  goto LABEL_25;
                v23 = v13[v18];
                ++v24;
                if (v23)
                  goto LABEL_22;
              }
            }
            v18 = v24;
          }
        }
LABEL_22:
        v15 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      v25 = *(_QWORD *)(v10 + 48) + *(_QWORD *)(v7 + 72) * v21;
      if ((a2 & 1) != 0)
      {
        sub_1000260AC(v25, (uint64_t)v9, (uint64_t *)&unk_10015BA60);
        v19 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v21);
      }
      else
      {
        sub_100019E1C(v25, (uint64_t)v9, (uint64_t *)&unk_10015BA60);
        v19 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v21);
        swift_bridgeObjectRetain(v19);
      }
      result = sub_1000AFD88((uint64_t)v9, v19, v11);
    }
  }
  result = swift_release(v10);
LABEL_32:
  *v3 = v11;
  return result;
}

Swift::Int sub_1000AF750(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_10015B3E8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000AFA64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_10015B3C8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v36)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v36)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v18);
    if ((v38 & 1) != 0)
    {
      sub_100004E2C(v26, (uint64_t)v40);
    }
    else
    {
      sub_100005C44((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = sub_100004E2C(v40, *(_QWORD *)(v8 + 56) + 40 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1000AFD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t result;
  _QWORD v19[9];

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v19, *(_QWORD *)(a3 + 40));
  sub_100019E1C(a1, (uint64_t)v13, (uint64_t *)&unk_10015BA60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    Hasher._combine(_:)(1u);
    v14 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v19, v6, v14);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v15 = Hasher._finalize()();
  v16 = _HashTable.nextHole(atOrAfter:)(v15 & ~(-1 << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1 << *(_BYTE *)(a3 + 32)));
  *(_QWORD *)(a3 + 64 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
  result = sub_1000260AC(a1, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v11 + 72) * v16, (uint64_t *)&unk_10015BA60);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v16) = a2;
  ++*(_QWORD *)(a3 + 16);
  return result;
}

void sub_1000AFF68()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v26 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005C88(&qword_10015B178);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_25:
    *v1 = v7;
    return;
  }
  v24 = v1;
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v14)
      goto LABEL_23;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_23;
      v21 = *(_QWORD *)(v25 + 8 * v10);
      if (!v21)
        break;
    }
LABEL_22:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_9:
    v17 = *(_QWORD *)(v26 + 72) * v16;
    sub_100019E1C(*(_QWORD *)(v5 + 48) + v17, (uint64_t)v4, (uint64_t *)&unk_10015BA60);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    sub_1000260AC((uint64_t)v4, *(_QWORD *)(v7 + 48) + v17, (uint64_t *)&unk_10015BA60);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    swift_bridgeObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v14)
  {
LABEL_23:
    swift_release(v5);
    v1 = v24;
    goto LABEL_25;
  }
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_23;
    v21 = *(_QWORD *)(v25 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
}

void sub_1000B01A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100005C88(&qword_10015B3E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1000B035C(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v7 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005C88(&qword_10015B170);
  v12 = __chkstk_darwin(v11);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    return swift_bridgeObjectRelease(a1);
  v62 = a1;
  v63 = v8;
  v17 = a2;
  v61 = v3;
  v18 = *(int *)(v12 + 48);
  v19 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v59 = v7;
  v60 = v19;
  v20 = a1 + v19;
  v65 = *(_QWORD *)(v13 + 72);
  swift_bridgeObjectRetain(a1);
  sub_100019E1C(v20, (uint64_t)v15, &qword_10015B170);
  sub_1000260AC((uint64_t)v15, (uint64_t)v10, (uint64_t *)&unk_10015BA60);
  v64 = v18;
  v21 = *(_QWORD *)&v15[v18];
  v66 = a3;
  v22 = *a3;
  v24 = sub_1000AE26C((uint64_t)v10);
  v25 = *(_QWORD *)(v22 + 16);
  v26 = (v23 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
    goto LABEL_24;
  v28 = v23;
  if (*(_QWORD *)(v22 + 24) >= v27)
  {
    if ((v17 & 1) != 0)
    {
      v31 = v63;
      if ((v23 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1000AFF68();
      v31 = v63;
      if ((v28 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v36 = (_QWORD *)*v66;
    *(_QWORD *)(*v66 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    v37 = v36[6];
    v63 = *(_QWORD *)(v31 + 72);
    sub_1000260AC((uint64_t)v10, v37 + v63 * v24, (uint64_t *)&unk_10015BA60);
    *(_QWORD *)(v36[7] + 8 * v24) = v21;
    v38 = v36[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v36[2] = v40;
    v41 = v16 - 1;
    if (!v41)
      return swift_bridgeObjectRelease_n(v62, 2);
    v42 = v62 + v65 + v60;
    v43 = (uint64_t *)&unk_10015BA60;
    while (1)
    {
      sub_100019E1C(v42, (uint64_t)v15, &qword_10015B170);
      v44 = v43;
      sub_1000260AC((uint64_t)v15, (uint64_t)v10, v43);
      v21 = *(_QWORD *)&v15[v64];
      v45 = (_QWORD *)*v66;
      v47 = sub_1000AE26C((uint64_t)v10);
      v48 = v45[2];
      v49 = (v46 & 1) == 0;
      v50 = v48 + v49;
      if (__OFADD__(v48, v49))
        break;
      v51 = v46;
      if (v45[3] < v50)
      {
        sub_1000AF4F0(v50, 1);
        v52 = sub_1000AE26C((uint64_t)v10);
        if ((v51 & 1) != (v53 & 1))
          goto LABEL_26;
        v47 = v52;
      }
      if ((v51 & 1) != 0)
        goto LABEL_10;
      v54 = (_QWORD *)*v66;
      *(_QWORD *)(*v66 + 8 * (v47 >> 6) + 64) |= 1 << v47;
      v43 = v44;
      sub_1000260AC((uint64_t)v10, v54[6] + v63 * v47, v44);
      *(_QWORD *)(v54[7] + 8 * v47) = v21;
      v55 = v54[2];
      v39 = __OFADD__(v55, 1);
      v56 = v55 + 1;
      if (v39)
        goto LABEL_25;
      v54[2] = v56;
      v42 += v65;
      if (!--v41)
        return swift_bridgeObjectRelease_n(v62, 2);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_1000AF4F0(v27, v17 & 1);
  v29 = sub_1000AE26C((uint64_t)v10);
  if ((v28 & 1) == (v30 & 1))
  {
    v24 = v29;
    v31 = v63;
    if ((v28 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v33 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v33);
    v69 = v33;
    swift_errorRetain(v33);
    v34 = sub_100005C88(&qword_10015AB50);
    if ((swift_dynamicCast(v34, &v69, v34, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v21);
      v35 = v62;
      swift_bridgeObjectRelease(v62);
      sub_1000124F8((uint64_t)v10, (uint64_t *)&unk_10015BA60);
      swift_bridgeObjectRelease(v35);
      return swift_errorRelease(v69);
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v59);
  __break(1u);
LABEL_27:
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v57._object = (void *)0x8000000100122710;
  v57._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v57);
  _print_unlocked<A, B>(_:_:)(v10, &v67, v59, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v58._countAndFlagsBits = 39;
  v58._object = (void *)0xE100000000000000;
  String.append(_:)(v58);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v67, v68, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

size_t sub_1000B0804(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_1000B0820(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

size_t sub_1000B0820(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005C88(&qword_10015B3C0);
  v11 = *(_QWORD *)(sub_100005C88(&qword_10015B170) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = sub_100005C88(&qword_10015B170);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20);
  }
  swift_release(a4);
  return (size_t)v15;
}

char *sub_1000B099C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015B408);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_release(a4);
  return v11;
}

size_t sub_1000B0A84(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005C88(&qword_10015B3B8);
  v11 = *(_QWORD *)(sub_100005C88(&qword_10015B188) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = sub_100005C88(&qword_10015B188);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20);
  }
  swift_bridgeObjectRelease(a4);
  return (size_t)v15;
}

uint64_t sub_1000B0C00(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v41 = *(_QWORD *)(v11 - 8);
  result = __chkstk_darwin(v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 56;
  v14 = *(_QWORD *)(a4 + 56);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 56;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_1000124F8((uint64_t)v10, (uint64_t *)&unk_10015BA60);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

char *sub_1000B0F50(uint64_t a1)
{
  return sub_1000B099C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000B0F64(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 1751347809 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1751347809, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746E6169726176 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E6169726176, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6C656E72656BLL && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C656E72656BLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000013)
  {
    v9 = 0x80000001001297A0;
    if (a2 == 0x80000001001297A0)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001001297A0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x6465726975716572 && a2 == 0xED00007368746150)
  {
    v10 = 0xED00007368746150;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465726975716572, 0xED00007368746150, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD000000000000013)
  {
    v11 = 0x80000001001297C0;
    if (a2 == 0x80000001001297C0)
      goto LABEL_36;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001001297C0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001001297E0)
  {
    swift_bridgeObjectRelease(0x80000001001297E0);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001001297E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1000B1238@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v5 = sub_100005C88(&qword_10015B410);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_1000A4FBC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys, &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys, v11, v9, v10);
  if (v2)
  {
    sub_100005D08(a1);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE000000000000000);
    return swift_bridgeObjectRelease(0xE600000000000000);
  }
  else
  {
    LOBYTE(v41) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    v14 = v13;
    LOBYTE(v41) = 1;
    swift_bridgeObjectRetain(v13);
    v37 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    v39 = v14;
    LOBYTE(v41) = 2;
    v16 = v15;
    swift_bridgeObjectRetain(v15);
    v17 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    v38 = v18;
    v33 = v17;
    v36 = v16;
    v19 = sub_100005C88((uint64_t *)&unk_10015A5D0);
    v40 = 3;
    v20 = sub_100017BA4((unint64_t *)&qword_100158050, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v38);
    v34 = v20;
    v35 = v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19, &v40, v5, v19, v20);
    v21 = v41;
    v40 = 4;
    swift_bridgeObjectRetain(v41);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, &v40, v5, v35, v34);
    v32 = a2;
    v22 = v41;
    v40 = 5;
    swift_bridgeObjectRetain(v41);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, &v40, v5, v35, v34);
    v31 = v12;
    v23 = v41;
    v40 = 6;
    swift_bridgeObjectRetain(v41);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, &v40, v5, v35, v34);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v24 = v41;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    sub_100005D08(a1);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v22);
    v25 = v21;
    swift_bridgeObjectRelease(v21);
    v26 = v38;
    swift_bridgeObjectRelease(v38);
    v27 = v36;
    swift_bridgeObjectRelease(v36);
    v28 = v39;
    result = swift_bridgeObjectRelease(v39);
    v30 = v32;
    *v32 = v31;
    v30[1] = v28;
    v30[2] = v37;
    v30[3] = v27;
    v30[4] = v33;
    v30[5] = v26;
    v30[6] = v25;
    v30[7] = v22;
    v30[8] = v23;
    v30[9] = v24;
  }
  return result;
}

uint64_t type metadata accessor for Updatable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000639C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Updatable);
}

uint64_t sub_1000B17A0()
{
  uint64_t v0;

  sub_100005D08((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000B17C4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *);
  _QWORD *v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v32[4];
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v3 = v1 + 2;
  v4 = v1[5];
  v5 = v1[6];
  sub_100004DE4(v3, v4);
  sub_10007BC88(v4, v5);
  v6 = v37;
  v7 = v38;
  sub_100004DE4(v36, v37);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  v9 = v8;
  v10 = &_swiftEmptyDictionarySingleton;
  v39 = &_swiftEmptyDictionarySingleton;
  v11 = *(_QWORD *)(v8 + 16);
  if (v11)
  {
    v31 = a1;
    v12 = v8 + 32;
    v30 = v8;
    swift_bridgeObjectRetain(v8);
    do
    {
      sub_100005C44(v12, (uint64_t)v33);
      v13 = v34;
      v14 = v35;
      sub_100004DE4(v33, v34);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
      v17 = v16;
      v32[0] = v15;
      v32[1] = v16;
      v18 = sub_100005C88(&qword_10015B3D0);
      sub_1000D5550((uint64_t)v32, (uint64_t)&v39, (uint64_t)&type metadata for String, v18, (uint64_t)&protocol witness table for String);
      swift_bridgeObjectRelease(v17);
      v19 = v34;
      v20 = v35;
      sub_100004DE4(v33, v34);
      v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
      v23 = v22;
      v24 = sub_1000A7D74(v32, v21, v22);
      if (*v25)
      {
        KeyPath = swift_getKeyPath(&unk_100114658);
        v27 = sub_100005C88(&qword_10015B3D8);
        v28 = sub_100012534(&qword_10015B3E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        sub_1000D1D90(1, KeyPath, (uint64_t)v33, v27, v28);
        swift_release(KeyPath);
      }
      ((void (*)(_QWORD *, _QWORD))v24)(v32, 0);
      swift_bridgeObjectRelease(v23);
      sub_100005D08(v33);
      v12 += 40;
      --v11;
    }
    while (v11);
    v9 = v30;
    swift_bridgeObjectRelease(v30);
    v10 = v39;
    a1 = v31;
  }
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(v9);
  result = sub_100005D08(v36);
  *a1 = v10;
  return result;
}

uint64_t sub_1000B1A08()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  v1 = v0[19];
  if (v1 >= 6)
    swift_release(v1);
  swift_bridgeObjectRelease(v0[21]);
  swift_bridgeObjectRelease(v0[22]);
  swift_bridgeObjectRelease(v0[23]);
  swift_bridgeObjectRelease(v0[25]);
  swift_bridgeObjectRelease(v0[28]);
  swift_bridgeObjectRelease(v0[29]);
  swift_bridgeObjectRelease(v0[31]);
  swift_bridgeObjectRelease(v0[33]);
  swift_bridgeObjectRelease(v0[35]);
  swift_bridgeObjectRelease(v0[37]);
  swift_bridgeObjectRelease(v0[39]);
  swift_bridgeObjectRelease(v0[40]);
  swift_bridgeObjectRelease(v0[41]);
  swift_bridgeObjectRelease(v0[42]);
  swift_bridgeObjectRelease(v0[43]);
  swift_bridgeObjectRelease(v0[45]);
  swift_bridgeObjectRelease(v0[47]);
  swift_bridgeObjectRelease(v0[49]);
  swift_bridgeObjectRelease(v0[51]);
  swift_bridgeObjectRelease(v0[53]);
  swift_bridgeObjectRelease(v0[55]);
  swift_bridgeObjectRelease(v0[56]);
  swift_bridgeObjectRelease(v0[57]);
  v2 = v0[59];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v0[61]);
    swift_bridgeObjectRelease(v0[63]);
    swift_bridgeObjectRelease(v0[64]);
    swift_bridgeObjectRelease(v0[65]);
    swift_bridgeObjectRelease(v0[66]);
    swift_bridgeObjectRelease(v0[67]);
  }
  swift_bridgeObjectRelease(v0[69]);
  v3 = v0[70];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v0[71]);
    swift_bridgeObjectRelease(v0[72]);
    swift_bridgeObjectRelease(v0[73]);
    swift_bridgeObjectRelease(v0[74]);
  }
  sub_100005D08(v0 + 76);
  return swift_deallocObject(v0, 648, 7);
}

uint64_t sub_1000B1BB4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t v24;

  v3 = v2;
  v5 = (_QWORD *)(v1 + 608);
  v6 = *sub_10006B880();
  swift_bridgeObjectRetain(v6);
  v7 = *sub_10006B994();
  v8 = *(_DWORD *)(v1 + 600);
  v9 = qword_100164698;
  swift_bridgeObjectRetain(v7);
  if (v9 != -1)
    swift_once(&qword_100164698, sub_1000A4614);
  sub_1000D25F0(v7, (dword_100175764 & ~v8) == 0, v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  sub_1000268C0();
  sub_10006BD04(4);
  v23 = v10;
  v11 = *(_QWORD *)(v1 + 632);
  v12 = *(_QWORD *)(v1 + 640);
  sub_100004DE4(v5, v11);
  sub_100071700(v11, v12);
  sub_10006AFEC(v22, (uint64_t)&type metadata for KernelRequests.GetLoaded, (uint64_t)&off_1001598C8, (uint64_t)&v24);
  sub_100005D08(v22);
  result = swift_bridgeObjectRelease(v23);
  if (!v3)
  {
    swift_bridgeObjectRelease(*a1);
    v14 = v24;
    *a1 = v24;
    v16 = static os_log_type_t.debug.getter(v15);
    v17 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_10010F050;
    v19 = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v18 + 56) = &type metadata for Int;
    *(_QWORD *)(v18 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v18 + 32) = v19;
    v20 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    v21 = (void *)static OS_os_log.default.getter(v20);
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v21, "Updated loaded info for %d extensions.", LODWORD(v22[0]));

    return swift_bridgeObjectRelease(v18);
  }
  return result;
}

uint64_t sub_1000B1DB4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_1000B1DC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1000A7C58(a1, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48), a2);
}

unint64_t sub_1000B1DE8()
{
  unint64_t result;

  result = qword_10015B168;
  if (!qword_10015B168)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_10015B168);
  }
  return result;
}

_QWORD *sub_1000B1E2C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v5 = sub_100005C88(&qword_10015B170);
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v36 = _swiftEmptyArrayStorage;
    sub_1000B0804(0, v8, 0);
    v9 = v36;
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v13 = a2 + 2;
    v14 = a2[53];
    v15 = a2[54];
    v35 = v14;
    v28 = *(_QWORD *)(v11 + 72);
    v31 = v11;
    v32 = v10;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v30 = v13;
    while (1)
    {
      v16 = v32;
      v29(v7, v12, v32);
      v17 = 1;
      v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v7, 0, 1, v16);
      v19 = URL.path.getter(v18);
      v21 = v20;
      if (v19 != v35 || (v22 = v15, v21 != v15))
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v35, v15, 0);
        v22 = v21;
      }
      swift_bridgeObjectRelease(v22);
      v23 = sub_1000268B8();
      v24 = sub_1000D5D6C(v30, v12, v23, (v17 & 1) == 0);
      if (v2)
        break;
      *(_QWORD *)&v7[*(int *)(v34 + 48)] = v24;
      v36 = v9;
      v26 = v9[2];
      v25 = v9[3];
      if (v26 >= v25 >> 1)
      {
        sub_1000B0804(v25 > 1, v26 + 1, 1);
        v9 = v36;
      }
      v9[2] = v26 + 1;
      sub_1000260AC((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72) * v26, &qword_10015B170);
      v12 += v28;
      if (!--v8)
        return v9;
    }
    sub_1000124F8((uint64_t)v7, (uint64_t *)&unk_10015BA60);
    swift_release(v36);
  }
  return v9;
}

void sub_1000B2068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v30 = a4;
  v31 = a5;
  v29 = a3;
  v28 = sub_100005C88(&qword_10015B3B0);
  v8 = __chkstk_darwin(v28);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v26 - v11;
  v32 = a1;
  v13 = *(_QWORD *)(a2 + 64);
  v26 = a2 + 64;
  v14 = 1 << *(_BYTE *)(a2 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v27 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v17 = 0;
  if (!v16)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    v23 = *(_QWORD *)(a2 + 48);
    v24 = sub_100005C88((uint64_t *)&unk_10015BA60);
    sub_100019E1C(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * i, (uint64_t)v12, (uint64_t *)&unk_10015BA60);
    v25 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    *(_QWORD *)&v12[*(int *)(v28 + 48)] = v25;
    sub_1000260AC((uint64_t)v12, (uint64_t)v10, &qword_10015B3B0);
    swift_bridgeObjectRetain(v25);
    sub_1000AA338(&v32, (uint64_t)v10, v29, v30, v31);
    if (v5)
    {
      swift_bridgeObjectRelease(v32);
      sub_1000124F8((uint64_t)v10, &qword_10015B3B0);
      swift_release(a2);
      return;
    }
    sub_1000124F8((uint64_t)v10, &qword_10015B3B0);
    if (v16)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v27)
      goto LABEL_26;
    v21 = *(_QWORD *)(v26 + 8 * v17);
    if (!v21)
      break;
LABEL_17:
    v16 = (v21 - 1) & v21;
  }
  v22 = v17 + 1;
  if (v17 + 1 >= v27)
    goto LABEL_26;
  v21 = *(_QWORD *)(v26 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 2;
  if (v17 + 2 >= v27)
    goto LABEL_26;
  v21 = *(_QWORD *)(v26 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 3;
  if (v17 + 3 >= v27)
    goto LABEL_26;
  v21 = *(_QWORD *)(v26 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 4;
  if (v17 + 4 >= v27)
  {
LABEL_26:
    swift_release(a2);
    return;
  }
  v21 = *(_QWORD *)(v26 + 8 * v22);
  if (v21)
  {
LABEL_16:
    v17 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v27)
      goto LABEL_26;
    v21 = *(_QWORD *)(v26 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1000B2318(uint64_t a1, unint64_t a2)
{
  if (a2 != 3)
    return sub_1000B2328(a1, a2);
  return a1;
}

uint64_t sub_1000B2328(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1000B233C(uint64_t a1, unint64_t a2)
{
  if (a2 != 3)
    return sub_100037510(a1, a2);
  return a1;
}

uint64_t sub_1000B234C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = URL.path.getter(a1);
  v3 = v2;
  v4 = URL.path.getter(v1);
  v6 = v5;
  v7 = sub_100032C6C(v4, v5, v1, v3);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v7 & 1;
}

uint64_t sub_1000B23C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1000AAEBC(a1, *(_QWORD **)(v2 + 24), a2);
}

_QWORD *sub_1000B23D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD *result;

  v6 = *(_QWORD **)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = sub_1000268C0();
  v9 = sub_1000268C0();
  result = sub_10009E620(v6, v7, v8 & 1, v9 & 1, a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_1000B2450@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1000AC630(a1, *(_QWORD **)(v2 + 24), a2);
}

unint64_t sub_1000B2468()
{
  unint64_t result;

  result = qword_10015B198;
  if (!qword_10015B198)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10015B198);
  }
  return result;
}

unint64_t sub_1000B24B8()
{
  unint64_t result;

  result = qword_10015B1A0;
  if (!qword_10015B1A0)
  {
    result = swift_getWitnessTable(&unk_100114310, &type metadata for ExtensionManager.Settings.Flags);
    atomic_store(result, (unint64_t *)&qword_10015B1A0);
  }
  return result;
}

unint64_t sub_1000B2500()
{
  unint64_t result;

  result = qword_10015B1A8;
  if (!qword_10015B1A8)
  {
    result = swift_getWitnessTable(&unk_100114338, &type metadata for ExtensionManager.Settings.Flags);
    atomic_store(result, (unint64_t *)&qword_10015B1A8);
  }
  return result;
}

uint64_t type metadata accessor for ExtensionManager()
{
  return objc_opt_self(_TtC10driverkitd16ExtensionManager);
}

uint64_t destroy for ExtensionManager.Settings(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  v2 = a1[17];
  if (v2 >= 6)
    swift_release(v2);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(a1[23]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[27]);
  swift_bridgeObjectRelease(a1[29]);
  swift_bridgeObjectRelease(a1[31]);
  swift_bridgeObjectRelease(a1[33]);
  swift_bridgeObjectRelease(a1[35]);
  swift_bridgeObjectRelease(a1[37]);
  swift_bridgeObjectRelease(a1[38]);
  swift_bridgeObjectRelease(a1[39]);
  swift_bridgeObjectRelease(a1[40]);
  swift_bridgeObjectRelease(a1[41]);
  swift_bridgeObjectRelease(a1[43]);
  swift_bridgeObjectRelease(a1[45]);
  swift_bridgeObjectRelease(a1[47]);
  swift_bridgeObjectRelease(a1[49]);
  swift_bridgeObjectRelease(a1[51]);
  swift_bridgeObjectRelease(a1[53]);
  swift_bridgeObjectRelease(a1[54]);
  swift_bridgeObjectRelease(a1[55]);
  v3 = a1[57];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[59]);
    swift_bridgeObjectRelease(a1[61]);
    swift_bridgeObjectRelease(a1[62]);
    swift_bridgeObjectRelease(a1[63]);
    swift_bridgeObjectRelease(a1[64]);
    swift_bridgeObjectRelease(a1[65]);
  }
  swift_bridgeObjectRelease(a1[67]);
  result = a1[68];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[69]);
    swift_bridgeObjectRelease(a1[70]);
    swift_bridgeObjectRelease(a1[71]);
    return swift_bridgeObjectRelease(a1[72]);
  }
  return result;
}

uint64_t initializeWithCopy for ExtensionManager.Settings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v6;
  v9 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v8;
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  v15 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v14;
  v17 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v16;
  v56 = *(_QWORD *)(a2 + 128);
  v58 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v56;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v56);
  if (v58 >= 5)
  {
    if (v58 == 5)
    {
      *(_QWORD *)(a1 + 136) = 5;
    }
    else
    {
      *(_QWORD *)(a1 + 136) = v58;
      swift_retain(v58);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 136) = v58;
  }
  v18 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v18;
  v20 = *(_QWORD *)(a2 + 160);
  v19 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v20;
  *(_QWORD *)(a1 + 168) = v19;
  v21 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v21;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  v22 = *(_QWORD *)(a2 + 208);
  v44 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v22;
  *(_QWORD *)(a1 + 216) = v44;
  v23 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v23;
  v24 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v24;
  v25 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v25;
  v26 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v26;
  v43 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v43;
  v45 = *(_QWORD *)(a2 + 304);
  v46 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v45;
  *(_QWORD *)(a1 + 312) = v46;
  v47 = *(_QWORD *)(a2 + 320);
  v54 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v47;
  *(_QWORD *)(a1 + 328) = v54;
  v53 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v53;
  v52 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v52;
  v51 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v51;
  v50 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v50;
  v49 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v49;
  v48 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v48;
  v55 = *(_QWORD *)(a2 + 432);
  v57 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = v55;
  *(_QWORD *)(a1 + 440) = v57;
  v59 = *(_QWORD *)(a2 + 456);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v57);
  if (v59)
  {
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 456) = v59;
    v27 = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = v27;
    v28 = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 488) = v28;
    v29 = *(_QWORD *)(a2 + 496);
    v30 = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 496) = v29;
    *(_QWORD *)(a1 + 504) = v30;
    v31 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 512) = v31;
    v32 = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 520) = v32;
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
  }
  else
  {
    v33 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v33;
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    v34 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v34;
  }
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  v35 = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 536) = v35;
  v36 = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRetain(v35);
  if (v36)
  {
    *(_QWORD *)(a1 + 544) = v36;
    v37 = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 552) = v37;
    v38 = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 560) = v38;
    v39 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 568) = v39;
    v40 = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a1 + 576) = v40;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
  }
  else
  {
    v41 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v41;
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  }
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 588) = *(_BYTE *)(a2 + 588);
  return a1;
}

uint64_t assignWithCopy for ExtensionManager.Settings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  _OWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v20 = *(_QWORD *)(a2 + 112);
  v21 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v22 = *(_QWORD *)(a2 + 128);
  v23 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = (_QWORD *)(a1 + 136);
  v25 = *(_QWORD *)(a1 + 136);
  v26 = *(_QWORD *)(a2 + 136);
  if (v25 == 5)
  {
    if (v26 < 5)
    {
LABEL_3:
      *v24 = v26;
      goto LABEL_16;
    }
    if (v26 == 5)
    {
      v27 = 5;
LABEL_15:
      *v24 = v27;
      goto LABEL_16;
    }
LABEL_11:
    *v24 = v26;
    swift_retain(v26);
    goto LABEL_16;
  }
  if (v26 == 5)
  {
    sub_1000B323C((unint64_t *)(a1 + 136));
LABEL_14:
    v27 = *(_QWORD *)(a2 + 136);
    goto LABEL_15;
  }
  if (v25 < 5)
  {
    if (v26 < 5)
      goto LABEL_3;
    goto LABEL_11;
  }
  if (v26 < 5)
  {
    swift_release(*(_QWORD *)(a1 + 136));
    goto LABEL_14;
  }
  *v24 = v26;
  swift_retain(v26);
  swift_release(v25);
LABEL_16:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v28 = *(_QWORD *)(a2 + 152);
  v29 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(a2 + 160);
  v31 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(a2 + 168);
  v33 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v34 = *(_QWORD *)(a2 + 184);
  v35 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v36 = *(_QWORD *)(a2 + 208);
  v37 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v38 = *(_QWORD *)(a2 + 216);
  v39 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v40 = *(_QWORD *)(a2 + 232);
  v41 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v42 = *(_QWORD *)(a2 + 248);
  v43 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v44 = *(_QWORD *)(a2 + 264);
  v45 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v46 = *(_QWORD *)(a2 + 280);
  v47 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v48 = *(_QWORD *)(a2 + 296);
  v49 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  v50 = *(_QWORD *)(a2 + 304);
  v51 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  v52 = *(_QWORD *)(a2 + 312);
  v53 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  v54 = *(_QWORD *)(a2 + 320);
  v55 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = *(_QWORD *)(a2 + 328);
  v57 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  v58 = *(_QWORD *)(a2 + 344);
  v59 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  v60 = *(_QWORD *)(a2 + 360);
  v61 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  v62 = *(_QWORD *)(a2 + 376);
  v63 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  v64 = *(_QWORD *)(a2 + 392);
  v65 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  v66 = *(_QWORD *)(a2 + 408);
  v67 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  v68 = *(_QWORD *)(a2 + 424);
  v69 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease(v69);
  v70 = *(_QWORD *)(a1 + 432);
  v71 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 432) = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v70);
  v72 = *(_QWORD *)(a1 + 440);
  v73 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 440) = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v72);
  v74 = (_OWORD *)(a1 + 448);
  v75 = (_OWORD *)(a2 + 448);
  v76 = *(_QWORD *)(a1 + 456);
  v77 = *(_QWORD *)(a2 + 456);
  if (v76)
  {
    if (v77)
    {
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      v78 = *(_QWORD *)(a2 + 456);
      *(_QWORD *)(a1 + 456) = v78;
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRelease(v76);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      v79 = *(_QWORD *)(a2 + 472);
      v80 = *(_QWORD *)(a1 + 472);
      *(_QWORD *)(a1 + 472) = v79;
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRelease(v80);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      v81 = *(_QWORD *)(a2 + 488);
      v82 = *(_QWORD *)(a1 + 488);
      *(_QWORD *)(a1 + 488) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease(v82);
      v83 = *(_QWORD *)(a2 + 496);
      v84 = *(_QWORD *)(a1 + 496);
      *(_QWORD *)(a1 + 496) = v83;
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRelease(v84);
      v85 = *(_QWORD *)(a2 + 504);
      v86 = *(_QWORD *)(a1 + 504);
      *(_QWORD *)(a1 + 504) = v85;
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRelease(v86);
      v87 = *(_QWORD *)(a2 + 512);
      v88 = *(_QWORD *)(a1 + 512);
      *(_QWORD *)(a1 + 512) = v87;
      swift_bridgeObjectRetain(v87);
      swift_bridgeObjectRelease(v88);
      v89 = *(_QWORD *)(a2 + 520);
      v90 = *(_QWORD *)(a1 + 520);
      *(_QWORD *)(a1 + 520) = v89;
      swift_bridgeObjectRetain(v89);
      swift_bridgeObjectRelease(v90);
    }
    else
    {
      sub_1000B3270((_QWORD *)(a1 + 448));
      *v74 = *v75;
      v98 = *(_OWORD *)(a2 + 512);
      v100 = *(_OWORD *)(a2 + 464);
      v99 = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
      *(_OWORD *)(a1 + 512) = v98;
      *(_OWORD *)(a1 + 464) = v100;
      *(_OWORD *)(a1 + 480) = v99;
    }
  }
  else if (v77)
  {
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    v91 = *(_QWORD *)(a2 + 456);
    *(_QWORD *)(a1 + 456) = v91;
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    v92 = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 472) = v92;
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    v93 = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 488) = v93;
    v94 = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 496) = v94;
    v95 = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 504) = v95;
    v96 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 512) = v96;
    v97 = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 520) = v97;
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v95);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v97);
  }
  else
  {
    *v74 = *v75;
    v101 = *(_OWORD *)(a2 + 464);
    v102 = *(_OWORD *)(a2 + 480);
    v103 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v103;
    *(_OWORD *)(a1 + 464) = v101;
    *(_OWORD *)(a1 + 480) = v102;
  }
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  v104 = *(_QWORD *)(a2 + 536);
  v105 = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 536) = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v105);
  v106 = (_OWORD *)(a1 + 544);
  v107 = (_OWORD *)(a2 + 544);
  v108 = *(_QWORD *)(a1 + 544);
  v109 = *(_QWORD *)(a2 + 544);
  if (v108)
  {
    if (v109)
    {
      *(_QWORD *)(a1 + 544) = v109;
      swift_bridgeObjectRetain(v109);
      swift_bridgeObjectRelease(v108);
      v110 = *(_QWORD *)(a2 + 552);
      v111 = *(_QWORD *)(a1 + 552);
      *(_QWORD *)(a1 + 552) = v110;
      swift_bridgeObjectRetain(v110);
      swift_bridgeObjectRelease(v111);
      v112 = *(_QWORD *)(a2 + 560);
      v113 = *(_QWORD *)(a1 + 560);
      *(_QWORD *)(a1 + 560) = v112;
      swift_bridgeObjectRetain(v112);
      swift_bridgeObjectRelease(v113);
      v114 = *(_QWORD *)(a2 + 568);
      v115 = *(_QWORD *)(a1 + 568);
      *(_QWORD *)(a1 + 568) = v114;
      swift_bridgeObjectRetain(v114);
      swift_bridgeObjectRelease(v115);
      v116 = *(_QWORD *)(a2 + 576);
      v117 = *(_QWORD *)(a1 + 576);
      *(_QWORD *)(a1 + 576) = v116;
      swift_bridgeObjectRetain(v116);
      swift_bridgeObjectRelease(v117);
    }
    else
    {
      sub_1000B3294((_QWORD *)(a1 + 544));
      v122 = *(_QWORD *)(a2 + 576);
      v123 = *(_OWORD *)(a2 + 560);
      *v106 = *v107;
      *(_OWORD *)(a1 + 560) = v123;
      *(_QWORD *)(a1 + 576) = v122;
    }
  }
  else if (v109)
  {
    *(_QWORD *)(a1 + 544) = v109;
    v118 = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 552) = v118;
    v119 = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 560) = v119;
    v120 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 568) = v120;
    v121 = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a1 + 576) = v121;
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRetain(v119);
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRetain(v121);
  }
  else
  {
    v124 = *v107;
    v125 = *(_OWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    *v106 = v124;
    *(_OWORD *)(a1 + 560) = v125;
  }
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 588) = *(_BYTE *)(a2 + 588);
  return a1;
}

unint64_t *sub_1000B323C(unint64_t *a1)
{
  destroy for VariantKind(a1);
  return a1;
}

_QWORD *sub_1000B3270(_QWORD *a1)
{
  destroy for ExtensionManager.Settings.BuildManifest(a1);
  return a1;
}

_QWORD *sub_1000B3294(_QWORD *a1)
{
  destroy for ExtensionManager.Settings.ExtensionFilter(a1);
  return a1;
}

void *initializeWithTake for ExtensionManager.Settings(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x24DuLL);
}

uint64_t assignWithTake for ExtensionManager.Settings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 128);
  v18 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v17;
  swift_bridgeObjectRelease(v18);
  v20 = (unint64_t *)(a1 + 136);
  v19 = *(_QWORD *)(a1 + 136);
  v21 = *(_QWORD *)(a2 + 136);
  if (v19 == 5)
  {
    if (v21 == 5)
      v21 = 5;
    goto LABEL_10;
  }
  if (v21 == 5)
  {
    sub_1000B323C((unint64_t *)(a1 + 136));
LABEL_9:
    v21 = *(_QWORD *)(a2 + 136);
    goto LABEL_10;
  }
  if (v19 < 5)
  {
LABEL_10:
    *v20 = v21;
    goto LABEL_11;
  }
  if (v21 < 5)
  {
    swift_release(v19);
    goto LABEL_9;
  }
  *v20 = v21;
  swift_release(v19);
LABEL_11:
  v22 = *(_QWORD *)(a2 + 152);
  v23 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v22;
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease(v25);
  v26 = *(_QWORD *)(a2 + 184);
  v27 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v26;
  swift_bridgeObjectRelease(v27);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  v28 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(a2 + 232);
  v31 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(a2 + 248);
  v33 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(a2 + 264);
  v35 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v34;
  swift_bridgeObjectRelease(v35);
  v36 = *(_QWORD *)(a2 + 280);
  v37 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v36;
  swift_bridgeObjectRelease(v37);
  v38 = *(_QWORD *)(a2 + 296);
  v39 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v38;
  swift_bridgeObjectRelease(v39);
  v40 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRelease(v40);
  v41 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_bridgeObjectRelease(v41);
  v42 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRelease(v42);
  v43 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRelease(v43);
  v44 = *(_QWORD *)(a2 + 344);
  v45 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v44;
  swift_bridgeObjectRelease(v45);
  v46 = *(_QWORD *)(a2 + 360);
  v47 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v46;
  swift_bridgeObjectRelease(v47);
  v48 = *(_QWORD *)(a2 + 376);
  v49 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v48;
  swift_bridgeObjectRelease(v49);
  v50 = *(_QWORD *)(a2 + 392);
  v51 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v50;
  swift_bridgeObjectRelease(v51);
  v52 = *(_QWORD *)(a2 + 408);
  v53 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v52;
  swift_bridgeObjectRelease(v53);
  v54 = *(_QWORD *)(a2 + 424);
  v55 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v54;
  swift_bridgeObjectRelease(v55);
  v56 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  swift_bridgeObjectRelease(v56);
  v57 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  swift_bridgeObjectRelease(v57);
  v58 = *(_QWORD *)(a1 + 456);
  if (v58)
  {
    v59 = *(_QWORD *)(a2 + 456);
    if (v59)
    {
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 456) = v59;
      swift_bridgeObjectRelease(v58);
      v60 = *(_QWORD *)(a2 + 472);
      v61 = *(_QWORD *)(a1 + 472);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      *(_QWORD *)(a1 + 472) = v60;
      swift_bridgeObjectRelease(v61);
      v62 = *(_QWORD *)(a2 + 488);
      v63 = *(_QWORD *)(a1 + 488);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      *(_QWORD *)(a1 + 488) = v62;
      swift_bridgeObjectRelease(v63);
      v64 = *(_QWORD *)(a1 + 496);
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      swift_bridgeObjectRelease(v64);
      v65 = *(_QWORD *)(a1 + 504);
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      swift_bridgeObjectRelease(v65);
      v66 = *(_QWORD *)(a1 + 512);
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      swift_bridgeObjectRelease(v66);
      v67 = *(_QWORD *)(a1 + 520);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      swift_bridgeObjectRelease(v67);
      goto LABEL_16;
    }
    sub_1000B3270((_QWORD *)(a1 + 448));
  }
  v68 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v68;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  v69 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v69;
LABEL_16:
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  v70 = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  swift_bridgeObjectRelease(v70);
  v71 = *(_QWORD *)(a1 + 544);
  if (!v71)
  {
LABEL_20:
    v77 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v77;
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    goto LABEL_21;
  }
  v72 = *(_QWORD *)(a2 + 544);
  if (!v72)
  {
    sub_1000B3294((_QWORD *)(a1 + 544));
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 544) = v72;
  swift_bridgeObjectRelease(v71);
  v73 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  swift_bridgeObjectRelease(v73);
  v74 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  swift_bridgeObjectRelease(v74);
  v75 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  swift_bridgeObjectRelease(v75);
  v76 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  swift_bridgeObjectRelease(v76);
LABEL_21:
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 588) = *(_BYTE *)(a2 + 588);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 589))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 588) = 0;
    *(_DWORD *)(result + 584) = 0;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 589) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 589) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings()
{
  return &type metadata for ExtensionManager.Settings;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.Flags()
{
  return &type metadata for ExtensionManager.Settings.Flags;
}

uint64_t destroy for ExtensionManager.Settings.ExtensionFilter(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t *initializeWithCopy for ExtensionManager.Settings.ExtensionFilter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  a1[4] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for ExtensionManager.Settings.ExtensionFilter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[4];
  v13 = a1[4];
  a1[4] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

_QWORD *assignWithTake for ExtensionManager.Settings.ExtensionFilter(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  v6 = a1[4];
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings.ExtensionFilter(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings.ExtensionFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.ExtensionFilter()
{
  return &type metadata for ExtensionManager.Settings.ExtensionFilter;
}

uint64_t destroy for ExtensionManager.Settings.BuildManifest(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  return swift_bridgeObjectRelease(a1[9]);
}

_QWORD *initializeWithCopy for ExtensionManager.Settings.BuildManifest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[6];
  v7 = a2[7];
  a1[6] = v6;
  a1[7] = v7;
  v8 = a2[8];
  v9 = a2[9];
  a1[8] = v8;
  a1[9] = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *assignWithCopy for ExtensionManager.Settings.BuildManifest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a2[9];
  v17 = a1[9];
  a1[9] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

__n128 initializeWithTake for ExtensionManager.Settings.BuildManifest(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

_QWORD *assignWithTake for ExtensionManager.Settings.BuildManifest(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(a1[7]);
  v9 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v9);
  v10 = a1[9];
  a1[9] = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.BuildManifest()
{
  return &type metadata for ExtensionManager.Settings.BuildManifest;
}

uint64_t sub_1000B3D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1000B3D8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001144F8;
    v4[2] = &unk_100114510;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_1000B3E0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = v12;
      swift_retain(v12);
    }
    *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  }
  return v4;
}

uint64_t sub_1000B3EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  result = (*(uint64_t (**)(void))(v3 + 8))();
  v5 = (_QWORD *)((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL)
    return swift_release(v5[1]);
  return result;
}

uint64_t sub_1000B3F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v9;
    swift_retain(v9);
  }
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t sub_1000B3FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v12 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)v7 = v9;
      *(_QWORD *)(v7 + 8) = v12;
      swift_retain(v12);
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v7 = *(_OWORD *)v8;
    goto LABEL_8;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release(*(_QWORD *)(v7 + 8));
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  swift_retain(v10);
  swift_release(v11);
LABEL_8:
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t sub_1000B4088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v9;
  }
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t sub_1000B4108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v12 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)v7 = v9;
      *(_QWORD *)(v7 + 8) = v12;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v7 = *(_OWORD *)v8;
    goto LABEL_8;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release(*(_QWORD *)(v7 + 8));
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  swift_release(v11);
LABEL_8:
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  return a1;
}

uint64_t sub_1000B41C0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v14 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((v14 + 1) >= 2)
        return v14;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 17;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000B4248 + 4 * byte_1001141B4[v12]))();
  }
}

void sub_1000B42E4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_1000B4400()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1000B4484);
}

void sub_1000B4408(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000B4410);
  JUMPOUT(0x1000B4484);
}

void sub_1000B4458()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000B4484);
}

void sub_1000B4460()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000B4484);
}

uint64_t sub_1000B4468(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x1000B4474);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x1000B4484);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings.ExtensionFilter.FilterMatch(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000B44E8 + 4 * byte_1001141C8[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000B451C + 4 * byte_1001141C3[v4]))();
}

uint64_t sub_1000B451C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B4524(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B452CLL);
  return result;
}

uint64_t sub_1000B4538(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B4540);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000B4544(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B454C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.ExtensionFilter.FilterMatch()
{
  return &type metadata for ExtensionManager.Settings.ExtensionFilter.FilterMatch;
}

uint64_t getEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionManager.Settings.BuildManifest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000B4644 + 4 * byte_1001141D2[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000B4678 + 4 * byte_1001141CD[v4]))();
}

uint64_t sub_1000B4678(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B4680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B4688);
  return result;
}

uint64_t sub_1000B4694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B469CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000B46A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B46A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExtensionManager.Settings.BuildManifest.CodingKeys()
{
  return &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys;
}

unint64_t sub_1000B46C8()
{
  unint64_t result;

  result = qword_100164E20[0];
  if (!qword_100164E20[0])
  {
    result = swift_getWitnessTable(&unk_1001145E0, &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys);
    atomic_store(result, qword_100164E20);
  }
  return result;
}

unint64_t sub_1000B4710()
{
  unint64_t result;

  result = qword_100164F30;
  if (!qword_100164F30)
  {
    result = swift_getWitnessTable(&unk_100114550, &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164F30);
  }
  return result;
}

unint64_t sub_1000B4758()
{
  unint64_t result;

  result = qword_100164F38[0];
  if (!qword_100164F38[0])
  {
    result = swift_getWitnessTable(&unk_100114578, &type metadata for ExtensionManager.Settings.BuildManifest.CodingKeys);
    atomic_store(result, qword_100164F38);
  }
  return result;
}

unint64_t sub_1000B479C()
{
  unint64_t result;

  result = qword_10015B400;
  if (!qword_10015B400)
  {
    result = swift_getWitnessTable(&unk_10011A2D0, &type metadata for CollectionKind);
    atomic_store(result, (unint64_t *)&qword_10015B400);
  }
  return result;
}

uint64_t sub_1000B47E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000B2450(a1, a2);
}

void sub_1000B47F4()
{
  uint64_t v0;
  _BYTE v1[168];

  sub_100051590(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1000B4858(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,OSStatus status,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;
  Swift::String v54;

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(0xE000000000000000);
  String.append(_:)(v54);
  return v52 + 19;
}

void sub_1000B591C()
{
  JUMPOUT(0x1000B58ECLL);
}

void sub_1000B5940()
{
  JUMPOUT(0x1000B58ECLL);
}

void sub_1000B5960()
{
  JUMPOUT(0x1000B5974);
}

void sub_1000B5980()
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(0xE000000000000000);
  JUMPOUT(0x1000B59A8);
}

id sub_1000B60F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  NSString v12;
  Class isa;
  id v14;
  uint64_t v16;

  static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
  v2 = v1;
  v3 = sub_100005C88(&qword_100158230);
  inited = swift_initStackObject(v3, &v16);
  *(_OWORD *)(inited + 16) = xmmword_10010F050;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v5;
  sub_10008997C(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000515CC);
  sub_1000B47F4();
  v7 = v6;
  v9 = v8;
  sub_10008997C(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000391DC);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = v9;
  v10 = sub_1000159E8(inited);
  v11 = objc_allocWithZone((Class)NSError);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  v14 = objc_msgSend(v11, "initWithDomain:code:userInfo:", v12, 5, isa);

  return v14;
}

uint64_t sub_1000B6240()
{
  return 12383;
}

uint64_t sub_1000B6250(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCD2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6278(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCD2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B62A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B62D4 + 4 * word_100114710[a1]))(0x656C7069746C756DLL, 0xE800000000000000);
}

uint64_t sub_1000B62D4()
{
  return 0x6C61697265736564;
}

unint64_t sub_1000B62F8()
{
  return 0xD000000000000013;
}

uint64_t sub_1000B6A40()
{
  return 0x5264696C61766E69;
}

uint64_t sub_1000B6A80()
{
  return 0x74754F64656D6974;
}

uint64_t sub_1000B6A94()
{
  return 2037609826;
}

uint64_t sub_1000B6AA4()
{
  return 0x74656D6874697261;
}

uint64_t sub_1000B6AC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD810();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6AEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD810();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6B14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDA74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6B3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDA74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6B64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD4E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6B8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD4E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6BB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCE80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6BDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCE80();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6C04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCD70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6C2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCD70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6C54()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E656449726570;
  else
    return 12383;
}

uint64_t sub_1000B6C90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000BE1E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B6CB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD964();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6CDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD964();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6D04()
{
  _BYTE *v0;

  if (*v0)
    return 12639;
  else
    return 12383;
}

uint64_t sub_1000B6D20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C0528(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B6D44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD458();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6D6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD458();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6D94()
{
  unsigned __int8 *v0;

  return sub_1000B62A0(*v0);
}

uint64_t sub_1000B6D9C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000BE2E0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000B6DC0(_BYTE *a1@<X8>)
{
  *a1 = 74;
}

uint64_t sub_1000B6DCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCCE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6DF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCCE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6E1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDF80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6E44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDF80();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6E6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDFC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6E94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDFC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6EBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD788();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6EE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD788();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6F0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCDF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6F34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCDF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6F5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD3D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B6F84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD3D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B6FAC()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 1953066351;
}

uint64_t sub_1000B6FE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C01AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B7008(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDD60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7030(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDD60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7058(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE118();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7080(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE118();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B70A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD128();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B70D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD128();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B70F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCF90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7120(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCF90();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7148(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD524();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7170(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD524();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7198(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDB84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B71C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDB84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B71E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE04C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7210(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE04C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7238(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD568();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7260(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD568();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7288(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD238();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B72B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD238();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B72D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD49C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7300(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD49C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7328(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE008();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7350(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE008();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7378(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD0E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B73A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD0E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B73C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDBC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B73F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDBC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7418(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDB40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7440(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDB40();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7468(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDA30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7490(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDA30();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B74B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD348();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B74E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD348();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7508(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD1F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7530(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD1F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7558(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD27C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7580(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD27C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B75A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD38C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B75D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD38C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B75F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDC94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7620(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDC94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7648()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x5664657269736564;
  if (*v0 != 1)
    v1 = 0x65566C6175746361;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t sub_1000B76C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C0288(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B76E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDCD8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B770C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDCD8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7734(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD6BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B775C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD6BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7784(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD304();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B77AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD304();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B77D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDEB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B77FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDEB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7824(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD678();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B784C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD678();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7874(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDC0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B789C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDC0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B78C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCE3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B78EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCE3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7914(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD05C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B793C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD05C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7964(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDE2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B798C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDE2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B79B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE0D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B79DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE0D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7A04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE090();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7A2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE090();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7A54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD018();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7A7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD018();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7AA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD5F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7ACC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD5F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7AF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD744();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7B1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD744();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7B44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD1B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7B6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD1B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7B94()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x696669746E656469;
}

uint64_t sub_1000B7BD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C0430(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B7BFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDD1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7C24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDD1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7C4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD0A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7C74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD0A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7C9C()
{
  return 0x73726F727265;
}

uint64_t sub_1000B7CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x73726F727265 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease(0xE600000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73726F727265, 0xE600000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000B7D3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE15C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7D64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BE15C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7D8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDE70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7DB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDE70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7DDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDAB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7E04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDAB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7E2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCFD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7E54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCFD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7E7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDDE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7EA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDDE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7ECC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDAFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7EF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDAFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7F1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD2C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7F44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD2C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7F6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDF3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7F94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDF3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B7FBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD5AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B7FE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD5AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B800C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD7CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8034(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD7CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B805C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDEF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8084(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDEF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B80AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD920();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B80D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD920();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B80FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD700();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8124(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD700();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B814C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCF4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8174(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCF4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B819C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCF08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B81C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCF08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B81EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCEC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8214(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCEC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B823C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD8DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8264(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD8DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B828C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCDB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B82B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BCDB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B82DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD414();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8304(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD414();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B832C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD898();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8354(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD898();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B837C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD854();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B83A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD854();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B83CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD634();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B83F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD634();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B841C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD16C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8444(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BD16C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B846C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease(0xE200000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000B84E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDC50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B8510(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000BDC50();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000B8538(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD v80[71];
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  _BYTE v231[80];

  v226 = sub_100005C88(&qword_10015B418);
  v80[70] = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v225 = (char *)v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = sub_100005C88(&qword_10015B420);
  v80[69] = *(_QWORD *)(v224 - 8);
  __chkstk_darwin(v224);
  v223 = (char *)v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = sub_100005C88(&qword_10015B428);
  v80[68] = *(_QWORD *)(v222 - 8);
  __chkstk_darwin(v222);
  v221 = (char *)v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = sub_100005C88(&qword_10015B430);
  v80[67] = *(_QWORD *)(v220 - 8);
  __chkstk_darwin(v220);
  v219 = (char *)v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = sub_100005C88(&qword_10015B438);
  v80[66] = *(_QWORD *)(v218 - 8);
  __chkstk_darwin(v218);
  v217 = (char *)v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = sub_100005C88(&qword_10015B440);
  v80[65] = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v215 = (char *)v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_100005C88(&qword_10015B448);
  v80[64] = *(_QWORD *)(v214 - 8);
  __chkstk_darwin(v214);
  v213 = (char *)v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = sub_100005C88(&qword_10015B450);
  v80[63] = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v211 = (char *)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = sub_100005C88(&qword_10015B458);
  v80[62] = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210);
  v209 = (char *)v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = sub_100005C88(&qword_10015B460);
  v80[61] = *(_QWORD *)(v208 - 8);
  __chkstk_darwin(v208);
  v207 = (char *)v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100005C88(&qword_10015B468);
  v80[60] = *(_QWORD *)(v206 - 8);
  __chkstk_darwin(v206);
  v205 = (char *)v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_100005C88(&qword_10015B470);
  v80[59] = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v203 = (char *)v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_100005C88(&qword_10015B478);
  v80[58] = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v201 = (char *)v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_100005C88(&qword_10015B480);
  v80[57] = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v199 = (char *)v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_100005C88(&qword_10015B488);
  v80[56] = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v197 = (char *)v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100005C88(&qword_10015B490);
  v80[55] = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v195 = (char *)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100005C88(&qword_10015B498);
  v80[54] = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v193 = (char *)v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100005C88(&qword_10015B4A0);
  v80[53] = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v191 = (char *)v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100005C88(&qword_10015B4A8);
  v80[52] = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v189 = (char *)v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100005C88(&qword_10015B4B0);
  v80[51] = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v187 = (char *)v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100005C88(&qword_10015B4B8);
  v80[50] = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v184 = (char *)v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100005C88(&qword_10015B4C0);
  v80[49] = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v183 = (char *)v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_100005C88(&qword_10015B4C8);
  v80[48] = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v181 = (char *)v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100005C88(&qword_10015B4D0);
  v80[47] = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v179 = (char *)v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100005C88(&qword_10015B4D8);
  v80[46] = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v177 = (char *)v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100005C88(&qword_10015B4E0);
  v80[45] = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v174 = (char *)v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_100005C88(&qword_10015B4E8);
  v80[43] = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v171 = (char *)v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100005C88(&qword_10015B4F0);
  v80[44] = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v172 = (char *)v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100005C88(&qword_10015B4F8);
  v80[42] = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v168 = (char *)v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100005C88(&qword_10015B500);
  v80[40] = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v165 = (char *)v80 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100005C88(&qword_10015B508);
  v80[41] = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v166 = (char *)v80 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100005C88(&qword_10015B510);
  v80[39] = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v163 = (char *)v80 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100005C88(&qword_10015B518);
  v80[38] = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v161 = (char *)v80 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_100005C88(&qword_10015B520);
  v80[37] = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v159 = (char *)v80 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_100005C88(&qword_10015B528);
  v80[36] = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v157 = (char *)v80 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100005C88(&qword_10015B530);
  v80[35] = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v155 = (char *)v80 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100005C88(&qword_10015B538);
  v80[34] = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v153 = (char *)v80 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100005C88(&qword_10015B540);
  v80[33] = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v151 = (char *)v80 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100005C88(&qword_10015B548);
  v80[32] = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v149 = (char *)v80 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100005C88(&qword_10015B550);
  v80[31] = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v147 = (char *)v80 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100005C88(&qword_10015B558);
  v80[30] = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v145 = (char *)v80 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100005C88(&qword_10015B560);
  v80[29] = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v142 = (char *)v80 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100005C88(&qword_10015B568);
  v80[28] = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v141 = (char *)v80 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100005C88(&qword_10015B570);
  v80[27] = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v138 = (char *)v80 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100005C88(&qword_10015B578);
  v80[25] = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v135 = (char *)v80 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100005C88(&qword_10015B580);
  v80[24] = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v133 = (char *)v80 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100005C88(&qword_10015B588);
  v80[26] = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v137 = (char *)v80 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100005C88(&qword_10015B590);
  v80[23] = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v131 = (char *)v80 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100005C88(&qword_10015B598);
  v80[22] = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v129 = (char *)v80 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100005C88(&qword_10015B5A0);
  v80[21] = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v127 = (char *)v80 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100005C88(&qword_10015B5A8);
  v80[20] = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v125 = (char *)v80 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100005C88(&qword_10015B5B0);
  v80[19] = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v122 = (char *)v80 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100005C88(&qword_10015B5B8);
  v80[17] = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v119 = (char *)v80 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100005C88(&qword_10015B5C0);
  v80[16] = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v117 = (char *)v80 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100005C88(&qword_10015B5C8);
  v80[18] = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v120 = (char *)v80 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100005C88(&qword_10015B5D0);
  v80[13] = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (char *)v80 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100005C88(&qword_10015B5D8);
  v80[12] = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v108 = (char *)v80 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100005C88(&qword_10015B5E0);
  v80[15] = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v114 = (char *)v80 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100005C88(&qword_10015B5E8);
  v80[11] = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v107 = (char *)v80 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100005C88(&qword_10015B5F0);
  v80[14] = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v112 = (char *)v80 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100005C88(&qword_10015B5F8);
  v80[10] = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v105 = (char *)v80 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100005C88(&qword_10015B600);
  v80[9] = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v103 = (char *)v80 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100005C88(&qword_10015B608);
  v80[8] = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v101 = (char *)v80 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100005C88(&qword_10015B610);
  v80[7] = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v98 = (char *)v80 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100005C88(&qword_10015B618);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v93 = (char *)v80 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100005C88(&qword_10015B620);
  v80[6] = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v97 = (char *)v80 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100005C88(&qword_10015B628);
  v80[4] = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v90 = (char *)v80 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100005C88(&qword_10015B630);
  v80[5] = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v91 = (char *)v80 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100005C88(&qword_10015B638);
  v80[2] = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)v80 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100005C88(&qword_10015B640);
  v80[1] = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v84 = (char *)v80 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100005C88(&qword_10015B648);
  v80[3] = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)v80 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100005C88(&qword_10015B650);
  v80[0] = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v82 = (char *)v80 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100005C88(&qword_10015B658);
  __chkstk_darwin(v81);
  v74 = sub_100005C88(&qword_10015B660);
  __chkstk_darwin(v74);
  v229 = sub_100005C88(&qword_10015B668);
  v227 = *(_QWORD *)(v229 - 8);
  __chkstk_darwin(v229);
  v76 = (char *)v80 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = a1[3];
  v77 = a1[4];
  sub_100004DE4(a1, v78);
  v79 = sub_1000BCCE8();
  v230 = v76;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KMError.CodingKeys, &type metadata for KMError.CodingKeys, v79, v78, v77);
  sub_100051590(v228, (uint64_t)v231);
  __asm { BR              X10 }
}

uint64_t sub_1000B9D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(v3 - 168);
  *(_BYTE *)(v3 - 224) = 0;
  v5 = sub_1000BE15C();
  v6 = *(_QWORD *)(v3 - 240);
  v7 = *(_QWORD *)(v3 - 232);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for KMError.MultipleCodingKeys, v3 - 224, v6, &type metadata for KMError.MultipleCodingKeys, v5);
  *(_QWORD *)(v3 - 224) = v4;
  v8 = sub_100005C88(&qword_10015B688);
  v9 = sub_1000CB234(&qword_10015B690, (void (*)(void))sub_1000BE1A0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 224, v10, v2, v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 264) + 8))(v7, v6);
}

uint64_t sub_1000BC290@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[80];

  result = sub_1000C05E8(a1, (uint64_t)v5);
  if (!v2)
    return sub_100051590((uint64_t)v5, a2);
  return result;
}

void sub_1000BC2D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_100051590(v1, (uint64_t)&v3);
  sub_1000B8538(a1);
}

void sub_1000BC320()
{
  uint64_t v0;
  uint64_t v1;

  sub_100051590(v0, (uint64_t)&v1);
  sub_1000B47F4();
}

uint64_t sub_1000BC354(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  _BYTE v13[80];

  sub_100051590(a1, (uint64_t)v13);
  sub_100051590(a2, (uint64_t)&v12);
  sub_1000B47F4();
  v4 = v3;
  v6 = v5;
  sub_1000B47F4();
  v9 = v8;
  if (v4 == v7 && v6 == v8)
  {
    v10 = 1;
    v9 = v6;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000BC3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  _BYTE v13[80];

  sub_100051590(a1, (uint64_t)v13);
  sub_100051590(a2, (uint64_t)&v12);
  sub_1000B47F4();
  v4 = v3;
  v6 = v5;
  sub_1000B47F4();
  v9 = v8;
  if (v4 == v7 && v6 == v8)
  {
    v10 = 0;
    v9 = v6;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 1);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000BC4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;
  _BYTE v14[80];

  sub_100051590(a1, (uint64_t)&v13);
  sub_100051590(a2, (uint64_t)v14);
  sub_1000B47F4();
  v4 = v3;
  v6 = v5;
  sub_1000B47F4();
  v9 = v8;
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
    v10 = 1;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 1);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v9);
    v10 = v11 ^ 1;
  }
  return v10 & 1;
}

uint64_t sub_1000BC558(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;
  _BYTE v14[80];

  sub_100051590(a1, (uint64_t)v14);
  sub_100051590(a2, (uint64_t)&v13);
  sub_1000B47F4();
  v4 = v3;
  v6 = v5;
  sub_1000B47F4();
  v9 = v8;
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
    v10 = 1;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 1);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v9);
    v10 = v11 ^ 1;
  }
  return v10 & 1;
}

uint64_t sub_1000BC60C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  _BYTE v13[80];

  sub_100051590(a1, (uint64_t)&v12);
  sub_100051590(a2, (uint64_t)v13);
  sub_1000B47F4();
  v4 = v3;
  v6 = v5;
  sub_1000B47F4();
  v9 = v8;
  if (v4 == v7 && v6 == v8)
  {
    v10 = 0;
    v9 = v6;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 1);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000BC6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  NSString v24;
  Class isa;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _BYTE v36[80];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;

  sub_100019E1C(a4, (uint64_t)&v37, &qword_10015B6A0);
  if (!v38)
    goto LABEL_6;
  sub_100004E2C(&v37, (uint64_t)v40);
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
  v14 = v13;
  v15 = sub_100005C88(&qword_100158230);
  inited = swift_initStackObject(v15, v36);
  *(_OWORD *)(inited + 16) = xmmword_10010F050;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v17;
  sub_10008997C(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000515CC);
  sub_1000B47F4();
  v19 = v18;
  v21 = v20;
  sub_10008997C(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000391DC);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v19;
  *(_QWORD *)(inited + 56) = v21;
  v22 = sub_1000159E8(inited);
  v23 = objc_allocWithZone((Class)NSError);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  v26 = objc_msgSend(v23, "initWithDomain:code:userInfo:", v24, 5, isa);

  v27 = (unint64_t)objc_msgSend(v26, "code");
  if ((v27 & 0x8000000000000000) != 0)
  {
LABEL_5:
    __break(1u);
LABEL_6:
    sub_1000C66C0((uint64_t)&v37);
    goto LABEL_7;
  }
  v28 = v41;
  v29 = v42;
  sub_100004DE4(v40, v41);
  sub_100071700(v28, v29);
  v30 = v38;
  v31 = v39;
  sub_100004DE4(&v37, v38);
  LOBYTE(v30) = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 64))(v30, v31);
  sub_100005D08(&v37);
  if ((v30 & 1) != 0)
  {
    v32 = String.utf8CString.getter(a1);
    abort_with_reason(5, v27, v32 + 32, 0);
    goto LABEL_5;
  }
LABEL_7:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, a1, a2, a5, a6, a7, a8, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000BC904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, void (*a8)(__n128))
{
  unint64_t v9;
  __n128 v10;

  if (a7)
    v9 = a7;
  else
    v9 = 0x800000010012A2A0;
  v10 = swift_bridgeObjectRetain(a7);
  a8(v10);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_1000BCAF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v25[12];
  int v26;

  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for POSIXError(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = errno.getter(v8);
  result = POSIXErrorCode.init(rawValue:)(v11);
  if ((result & 0x100000000) != 0 && (result = POSIXErrorCode.init(rawValue:)(106), (result & 0x100000000) != 0))
  {
    __break(1u);
  }
  else
  {
    v26 = result;
    v13 = sub_10006A308((uint64_t)_swiftEmptyArrayStorage);
    v14 = sub_10006A6CC();
    v15 = _BridgedStoredNSError.init(_:userInfo:)(&v26, v13, v6, v14);
    v16 = static os_signpost_type_t.event.getter(v15);
    v17 = (void *)*sub_1000D2DB8();
    v18 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_10010F050;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
    v20 = v17;
    v21 = String.init<A>(describing:)(v10, v6);
    v23 = v22;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_100026838();
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v23;
    static OSSignpostID.exclusive.getter();
    v24 = 2;
    os_signpost(_:dso:log:name:signpostID:_:_:)(v16, &_mh_execute_header, v20, "globalError", 11, 2, v5, "Encountered error: %{public}s", 29, v24, v19);

    swift_bridgeObjectRelease(v19);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

unint64_t sub_1000BCCE8()
{
  unint64_t result;

  result = qword_100164FE0;
  if (!qword_100164FE0)
  {
    result = swift_getWitnessTable(&unk_10011A088, &type metadata for KMError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FE0);
  }
  return result;
}

unint64_t sub_1000BCD2C()
{
  unint64_t result;

  result = qword_100164FE8;
  if (!qword_100164FE8)
  {
    result = swift_getWitnessTable(&unk_10011A038, &type metadata for KMError.ArithmeticCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FE8);
  }
  return result;
}

unint64_t sub_1000BCD70()
{
  unint64_t result;

  result = qword_100164FF0;
  if (!qword_100164FF0)
  {
    result = swift_getWitnessTable(&unk_100119FE8, &type metadata for KMError.BusyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FF0);
  }
  return result;
}

unint64_t sub_1000BCDB4()
{
  unint64_t result;

  result = qword_100164FF8;
  if (!qword_100164FF8)
  {
    result = swift_getWitnessTable(&unk_100119F98, &type metadata for KMError.TimedOutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100164FF8);
  }
  return result;
}

unint64_t sub_1000BCDF8()
{
  unint64_t result;

  result = qword_100165000;
  if (!qword_100165000)
  {
    result = swift_getWitnessTable(&unk_100119F48, &type metadata for KMError.ConnectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165000);
  }
  return result;
}

unint64_t sub_1000BCE3C()
{
  unint64_t result;

  result = qword_100165008;
  if (!qword_100165008)
  {
    result = swift_getWitnessTable(&unk_100119EF8, &type metadata for KMError.InvalidRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165008);
  }
  return result;
}

unint64_t sub_1000BCE80()
{
  unint64_t result;

  result = qword_100165010;
  if (!qword_100165010)
  {
    result = swift_getWitnessTable(&unk_100119EA8, &type metadata for KMError.BuildManifestNotFoundErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165010);
  }
  return result;
}

unint64_t sub_1000BCEC4()
{
  unint64_t result;

  result = qword_100165018;
  if (!qword_100165018)
  {
    result = swift_getWitnessTable(&unk_100119E58, &type metadata for KMError.SystemExtensionsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165018);
  }
  return result;
}

unint64_t sub_1000BCF08()
{
  unint64_t result;

  result = qword_100165020;
  if (!qword_100165020)
  {
    result = swift_getWitnessTable(&unk_100119E08, &type metadata for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165020);
  }
  return result;
}

unint64_t sub_1000BCF4C()
{
  unint64_t result;

  result = qword_100165028;
  if (!qword_100165028)
  {
    result = swift_getWitnessTable(&unk_100119DB8, &type metadata for KMError.SystemExtensionWaitForTerminationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165028);
  }
  return result;
}

unint64_t sub_1000BCF90()
{
  unint64_t result;

  result = qword_100165030;
  if (!qword_100165030)
  {
    result = swift_getWitnessTable(&unk_100119D68, &type metadata for KMError.DextRecordErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165030);
  }
  return result;
}

unint64_t sub_1000BCFD4()
{
  unint64_t result;

  result = qword_100165038;
  if (!qword_100165038)
  {
    result = swift_getWitnessTable(&unk_100119D18, &type metadata for KMError.PackageInstallerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165038);
  }
  return result;
}

unint64_t sub_1000BD018()
{
  unint64_t result;

  result = qword_100165040;
  if (!qword_100165040)
  {
    result = swift_getWitnessTable(&unk_100119CC8, &type metadata for KMError.KnoxDownloaderErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165040);
  }
  return result;
}

unint64_t sub_1000BD05C()
{
  unint64_t result;

  result = qword_100165048;
  if (!qword_100165048)
  {
    result = swift_getWitnessTable(&unk_100119C78, &type metadata for KMError.KdkInstallerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165048);
  }
  return result;
}

unint64_t sub_1000BD0A0()
{
  unint64_t result;

  result = qword_100165050;
  if (!qword_100165050)
  {
    result = swift_getWitnessTable(&unk_100119C28, &type metadata for KMError.MissingDeveloperKitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165050);
  }
  return result;
}

unint64_t sub_1000BD0E4()
{
  unint64_t result;

  result = qword_100165058;
  if (!qword_100165058)
  {
    result = swift_getWitnessTable(&unk_100119BD8, &type metadata for KMError.FilesetErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165058);
  }
  return result;
}

unint64_t sub_1000BD128()
{
  unint64_t result;

  result = qword_100165060;
  if (!qword_100165060)
  {
    result = swift_getWitnessTable(&unk_100119B88, &type metadata for KMError.DeveloperToolsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165060);
  }
  return result;
}

unint64_t sub_1000BD16C()
{
  unint64_t result;

  result = qword_100165068;
  if (!qword_100165068)
  {
    result = swift_getWitnessTable(&unk_100119B38, &type metadata for KMError.UnsupportedErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165068);
  }
  return result;
}

unint64_t sub_1000BD1B0()
{
  unint64_t result;

  result = qword_100165070;
  if (!qword_100165070)
  {
    result = swift_getWitnessTable(&unk_100119AE8, &type metadata for KMError.MigrationErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165070);
  }
  return result;
}

unint64_t sub_1000BD1F4()
{
  unint64_t result;

  result = qword_100165078;
  if (!qword_100165078)
  {
    result = swift_getWitnessTable(&unk_100119A98, &type metadata for KMError.InExcludeListCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165078);
  }
  return result;
}

unint64_t sub_1000BD238()
{
  unint64_t result;

  result = qword_100165080;
  if (!qword_100165080)
  {
    result = swift_getWitnessTable(&unk_100119A48, &type metadata for KMError.DuplicateExtensionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165080);
  }
  return result;
}

unint64_t sub_1000BD27C()
{
  unint64_t result;

  result = qword_100165088;
  if (!qword_100165088)
  {
    result = swift_getWitnessTable(&unk_1001199F8, &type metadata for KMError.InKcgenOSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165088);
  }
  return result;
}

unint64_t sub_1000BD2C0()
{
  unint64_t result;

  result = qword_100165090;
  if (!qword_100165090)
  {
    result = swift_getWitnessTable(&unk_1001199A8, &type metadata for KMError.RequiresRebootCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165090);
  }
  return result;
}

unint64_t sub_1000BD304()
{
  unint64_t result;

  result = qword_100165098;
  if (!qword_100165098)
  {
    result = swift_getWitnessTable(&unk_100119958, &type metadata for KMError.InternalErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165098);
  }
  return result;
}

unint64_t sub_1000BD348()
{
  unint64_t result;

  result = qword_1001650A0;
  if (!qword_1001650A0)
  {
    result = swift_getWitnessTable(&unk_100119908, &type metadata for KMError.InDarwinOSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650A0);
  }
  return result;
}

unint64_t sub_1000BD38C()
{
  unint64_t result;

  result = qword_1001650A8;
  if (!qword_1001650A8)
  {
    result = swift_getWitnessTable(&unk_1001198B8, &type metadata for KMError.InSafeBootCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650A8);
  }
  return result;
}

unint64_t sub_1000BD3D0()
{
  unint64_t result;

  result = qword_1001650B0;
  if (!qword_1001650B0)
  {
    result = swift_getWitnessTable(&unk_100119868, &type metadata for KMError.ConsistencyCheckCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650B0);
  }
  return result;
}

unint64_t sub_1000BD414()
{
  unint64_t result;

  result = qword_1001650B8;
  if (!qword_1001650B8)
  {
    result = swift_getWitnessTable(&unk_100119818, &type metadata for KMError.TriggerPanicMedicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650B8);
  }
  return result;
}

unint64_t sub_1000BD458()
{
  unint64_t result;

  result = qword_1001650C0;
  if (!qword_1001650C0)
  {
    result = swift_getWitnessTable(&unk_1001197C8, &type metadata for KMError.CodeSigningCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650C0);
  }
  return result;
}

unint64_t sub_1000BD49C()
{
  unint64_t result;

  result = qword_1001650C8;
  if (!qword_1001650C8)
  {
    result = swift_getWitnessTable(&unk_100119778, &type metadata for KMError.ExceptionListCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650C8);
  }
  return result;
}

unint64_t sub_1000BD4E0()
{
  unint64_t result;

  result = qword_1001650D0;
  if (!qword_1001650D0)
  {
    result = swift_getWitnessTable(&unk_100119728, &type metadata for KMError.BootPolicyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650D0);
  }
  return result;
}

unint64_t sub_1000BD524()
{
  unint64_t result;

  result = qword_1001650D8;
  if (!qword_1001650D8)
  {
    result = swift_getWitnessTable(&unk_1001196D8, &type metadata for KMError.DiagnoseErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650D8);
  }
  return result;
}

unint64_t sub_1000BD568()
{
  unint64_t result;

  result = qword_1001650E0;
  if (!qword_1001650E0)
  {
    result = swift_getWitnessTable(&unk_100119688, &type metadata for KMError.DumpstateErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650E0);
  }
  return result;
}

unint64_t sub_1000BD5AC()
{
  unint64_t result;

  result = qword_1001650E8;
  if (!qword_1001650E8)
  {
    result = swift_getWitnessTable(&unk_100119638, &type metadata for KMError.RunninglistErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650E8);
  }
  return result;
}

unint64_t sub_1000BD5F0()
{
  unint64_t result;

  result = qword_1001650F0;
  if (!qword_1001650F0)
  {
    result = swift_getWitnessTable(&unk_1001195E8, &type metadata for KMError.ListErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650F0);
  }
  return result;
}

unint64_t sub_1000BD634()
{
  unint64_t result;

  result = qword_1001650F8;
  if (!qword_1001650F8)
  {
    result = swift_getWitnessTable(&unk_100119598, &type metadata for KMError.UnloadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001650F8);
  }
  return result;
}

unint64_t sub_1000BD678()
{
  unint64_t result;

  result = qword_100165100;
  if (!qword_100165100)
  {
    result = swift_getWitnessTable(&unk_100119548, &type metadata for KMError.InvalidKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165100);
  }
  return result;
}

unint64_t sub_1000BD6BC()
{
  unint64_t result;

  result = qword_100165108;
  if (!qword_100165108)
  {
    result = swift_getWitnessTable(&unk_1001194F8, &type metadata for KMError.InsufficientPermissionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165108);
  }
  return result;
}

unint64_t sub_1000BD700()
{
  unint64_t result;

  result = qword_100165110;
  if (!qword_100165110)
  {
    result = swift_getWitnessTable(&unk_1001194A8, &type metadata for KMError.SubprocessFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165110);
  }
  return result;
}

unint64_t sub_1000BD744()
{
  unint64_t result;

  result = qword_100165118;
  if (!qword_100165118)
  {
    result = swift_getWitnessTable(&unk_100119458, &type metadata for KMError.LoggingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165118);
  }
  return result;
}

unint64_t sub_1000BD788()
{
  unint64_t result;

  result = qword_100165120;
  if (!qword_100165120)
  {
    result = swift_getWitnessTable(&unk_100119408, &type metadata for KMError.ConfigurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165120);
  }
  return result;
}

unint64_t sub_1000BD7CC()
{
  unint64_t result;

  result = qword_100165128;
  if (!qword_100165128)
  {
    result = swift_getWitnessTable(&unk_1001193B8, &type metadata for KMError.SandboxCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165128);
  }
  return result;
}

unint64_t sub_1000BD810()
{
  unint64_t result;

  result = qword_100165130;
  if (!qword_100165130)
  {
    result = swift_getWitnessTable(&unk_100119368, &type metadata for KMError.AuthenticationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165130);
  }
  return result;
}

unint64_t sub_1000BD854()
{
  unint64_t result;

  result = qword_100165138;
  if (!qword_100165138)
  {
    result = swift_getWitnessTable(&unk_100119318, &type metadata for KMError.UnapprovedToLoadMultipleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165138);
  }
  return result;
}

unint64_t sub_1000BD898()
{
  unint64_t result;

  result = qword_100165140;
  if (!qword_100165140)
  {
    result = swift_getWitnessTable(&unk_1001192C8, &type metadata for KMError.UnapprovedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165140);
  }
  return result;
}

unint64_t sub_1000BD8DC()
{
  unint64_t result;

  result = qword_100165148;
  if (!qword_100165148)
  {
    result = swift_getWitnessTable(&unk_100119278, &type metadata for KMError.SystemPolicyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165148);
  }
  return result;
}

unint64_t sub_1000BD920()
{
  unint64_t result;

  result = qword_100165150;
  if (!qword_100165150)
  {
    result = swift_getWitnessTable(&unk_100119228, &type metadata for KMError.StagingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165150);
  }
  return result;
}

unint64_t sub_1000BD964()
{
  unint64_t result;

  result = qword_100165158;
  if (!qword_100165158)
  {
    result = swift_getWitnessTable(&unk_1001191D8, &type metadata for KMError.CacheBuildingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165158);
  }
  return result;
}

unint64_t sub_1000BD9A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B678;
  if (!qword_10015B678)
  {
    v1 = sub_100011CE4(&qword_10015A418);
    sub_1000CB194(&qword_100158038, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10015B678);
  }
  return result;
}

unint64_t sub_1000BDA30()
{
  unint64_t result;

  result = qword_100165160;
  if (!qword_100165160)
  {
    result = swift_getWitnessTable(&unk_100119188, &type metadata for KMError.FutureVersionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165160);
  }
  return result;
}

unint64_t sub_1000BDA74()
{
  unint64_t result;

  result = qword_100165168;
  if (!qword_100165168)
  {
    result = swift_getWitnessTable(&unk_100119138, &type metadata for KMError.BinaryParsingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165168);
  }
  return result;
}

unint64_t sub_1000BDAB8()
{
  unint64_t result;

  result = qword_100165170;
  if (!qword_100165170)
  {
    result = swift_getWitnessTable(&unk_1001190E8, &type metadata for KMError.NvramAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165170);
  }
  return result;
}

unint64_t sub_1000BDAFC()
{
  unint64_t result;

  result = qword_100165178;
  if (!qword_100165178)
  {
    result = swift_getWitnessTable(&unk_100119098, &type metadata for KMError.RecoveryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165178);
  }
  return result;
}

unint64_t sub_1000BDB40()
{
  unint64_t result;

  result = qword_100165180;
  if (!qword_100165180)
  {
    result = swift_getWitnessTable(&unk_100119048, &type metadata for KMError.FlowAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165180);
  }
  return result;
}

unint64_t sub_1000BDB84()
{
  unint64_t result;

  result = qword_100165188;
  if (!qword_100165188)
  {
    result = swift_getWitnessTable(&unk_100118FF8, &type metadata for KMError.DiskAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165188);
  }
  return result;
}

unint64_t sub_1000BDBC8()
{
  unint64_t result;

  result = qword_100165190;
  if (!qword_100165190)
  {
    result = swift_getWitnessTable(&unk_100118FA8, &type metadata for KMError.FilesystemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165190);
  }
  return result;
}

unint64_t sub_1000BDC0C()
{
  unint64_t result;

  result = qword_100165198;
  if (!qword_100165198)
  {
    result = swift_getWitnessTable(&unk_100118F58, &type metadata for KMError.InvalidPropertiesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165198);
  }
  return result;
}

unint64_t sub_1000BDC50()
{
  unint64_t result;

  result = qword_1001651A0;
  if (!qword_1001651A0)
  {
    result = swift_getWitnessTable(&unk_100118F08, &type metadata for KMError.ValidationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651A0);
  }
  return result;
}

unint64_t sub_1000BDC94()
{
  unint64_t result;

  result = qword_1001651A8;
  if (!qword_1001651A8)
  {
    result = swift_getWitnessTable(&unk_100118EB8, &type metadata for KMError.IncompatibleArchitectureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651A8);
  }
  return result;
}

unint64_t sub_1000BDCD8()
{
  unint64_t result;

  result = qword_1001651B0;
  if (!qword_1001651B0)
  {
    result = swift_getWitnessTable(&unk_100118E68, &type metadata for KMError.IncompatibleVersionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651B0);
  }
  return result;
}

unint64_t sub_1000BDD1C()
{
  unint64_t result;

  result = qword_1001651B8;
  if (!qword_1001651B8)
  {
    result = swift_getWitnessTable(&unk_100118E18, &type metadata for KMError.MissingDependencyRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651B8);
  }
  return result;
}

unint64_t sub_1000BDD60()
{
  unint64_t result;

  result = qword_1001651C0;
  if (!qword_1001651C0)
  {
    result = swift_getWitnessTable(&unk_100118DC8, &type metadata for KMError.DependencyResolutionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651C0);
  }
  return result;
}

unint64_t sub_1000BDDA4()
{
  unint64_t result;

  result = qword_10015B680;
  if (!qword_10015B680)
  {
    result = swift_getWitnessTable(&unk_10011B3B0, &type metadata for OSExtensionCodable);
    atomic_store(result, (unint64_t *)&qword_10015B680);
  }
  return result;
}

unint64_t sub_1000BDDE8()
{
  unint64_t result;

  result = qword_1001651C8;
  if (!qword_1001651C8)
  {
    result = swift_getWitnessTable(&unk_100118D78, &type metadata for KMError.RealizingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651C8);
  }
  return result;
}

unint64_t sub_1000BDE2C()
{
  unint64_t result;

  result = qword_1001651D0;
  if (!qword_1001651D0)
  {
    result = swift_getWitnessTable(&unk_100118D28, &type metadata for KMError.KernelCollectionBuildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651D0);
  }
  return result;
}

unint64_t sub_1000BDE70()
{
  unint64_t result;

  result = qword_1001651D8;
  if (!qword_1001651D8)
  {
    result = swift_getWitnessTable(&unk_100118CD8, &type metadata for KMError.NotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651D8);
  }
  return result;
}

unint64_t sub_1000BDEB4()
{
  unint64_t result;

  result = qword_1001651E0;
  if (!qword_1001651E0)
  {
    result = swift_getWitnessTable(&unk_100118C88, &type metadata for KMError.InvalidArgumentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651E0);
  }
  return result;
}

unint64_t sub_1000BDEF8()
{
  unint64_t result;

  result = qword_1001651E8;
  if (!qword_1001651E8)
  {
    result = swift_getWitnessTable(&unk_100118C38, &type metadata for KMError.SerializationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651E8);
  }
  return result;
}

unint64_t sub_1000BDF3C()
{
  unint64_t result;

  result = qword_1001651F0;
  if (!qword_1001651F0)
  {
    result = swift_getWitnessTable(&unk_100118BE8, &type metadata for KMError.ResourceLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651F0);
  }
  return result;
}

unint64_t sub_1000BDF80()
{
  unint64_t result;

  result = qword_1001651F8;
  if (!qword_1001651F8)
  {
    result = swift_getWitnessTable(&unk_100118B98, &type metadata for KMError.CollectionLinkageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001651F8);
  }
  return result;
}

unint64_t sub_1000BDFC4()
{
  unint64_t result;

  result = qword_100165200;
  if (!qword_100165200)
  {
    result = swift_getWitnessTable(&unk_100118B48, &type metadata for KMError.CollectionLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165200);
  }
  return result;
}

unint64_t sub_1000BE008()
{
  unint64_t result;

  result = qword_100165208;
  if (!qword_100165208)
  {
    result = swift_getWitnessTable(&unk_100118AF8, &type metadata for KMError.ExtensionLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165208);
  }
  return result;
}

unint64_t sub_1000BE04C()
{
  unint64_t result;

  result = qword_100165210;
  if (!qword_100165210)
  {
    result = swift_getWitnessTable(&unk_100118AA8, &type metadata for KMError.DriverKitLaunchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165210);
  }
  return result;
}

unint64_t sub_1000BE090()
{
  unint64_t result;

  result = qword_100165218;
  if (!qword_100165218)
  {
    result = swift_getWitnessTable(&unk_100118A58, &type metadata for KMError.KernelRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165218);
  }
  return result;
}

unint64_t sub_1000BE0D4()
{
  unint64_t result;

  result = qword_100165220;
  if (!qword_100165220)
  {
    result = swift_getWitnessTable(&unk_100118A08, &type metadata for KMError.KernelCommunicationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165220);
  }
  return result;
}

unint64_t sub_1000BE118()
{
  unint64_t result;

  result = qword_100165228;
  if (!qword_100165228)
  {
    result = swift_getWitnessTable(&unk_1001189B8, &type metadata for KMError.DeserializationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100165228);
  }
  return result;
}

unint64_t sub_1000BE15C()
{
  unint64_t result;

  result = qword_100165230[0];
  if (!qword_100165230[0])
  {
    result = swift_getWitnessTable(&unk_100118968, &type metadata for KMError.MultipleCodingKeys);
    atomic_store(result, qword_100165230);
  }
  return result;
}

unint64_t sub_1000BE1A0()
{
  unint64_t result;

  result = qword_10015B698;
  if (!qword_10015B698)
  {
    result = swift_getWitnessTable(&unk_100114960, &type metadata for KMError);
    atomic_store(result, (unint64_t *)&qword_10015B698);
  }
  return result;
}

uint64_t sub_1000BE1E4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746E656449726570 && a2 == 0xED00007265696669)
  {
    swift_bridgeObjectRelease(0xED00007265696669);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E656449726570, 0xED00007265696669, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000BE2E0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char v79;

  if (a1 == 0x656C7069746C756DLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C7069746C756DLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C61697265736564 && a2 == 0xEF6E6F6974617A69)
  {
    v7 = 0xEF6E6F6974617A69;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61697265736564, 0xEF6E6F6974617A69, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000013)
  {
    v8 = 0x800000010012A350;
    if (a2 == 0x800000010012A350)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010012A350, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x65526C656E72656BLL && a2 == 0xED00007473657571)
  {
    v9 = 0xED00007473657571;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65526C656E72656BLL, 0xED00007473657571, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x694B726576697264 && a2 == 0xEF68636E75614C74)
  {
    v10 = 0xEF68636E75614C74;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x694B726576697264, 0xEF68636E75614C74, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x6F69736E65747865 && a2 == 0xED000064616F4C6ELL)
  {
    v11 = 0xED000064616F4C6ELL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69736E65747865, 0xED000064616F4C6ELL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x697463656C6C6F63 && a2 == 0xEE0064616F4C6E6FLL)
  {
    v12 = 0xEE0064616F4C6E6FLL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463656C6C6F63, 0xEE0064616F4C6E6FLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD000000000000011)
  {
    v13 = 0x800000010012A370;
    if (a2 == 0x800000010012A370)
      goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010012A370, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0x656372756F736572 && a2 == 0xEC00000064616F4CLL)
  {
    v14 = 0xEC00000064616F4CLL;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F736572, 0xEC00000064616F4CLL, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 0x7A696C6169726573 && a2 == 0xED00006E6F697461)
  {
    v15 = 0xED00006E6F697461;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7A696C6169726573, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_60;
  }
  if (a1 == 0x4164696C61766E69 && a2 == 0xEF746E656D756772)
  {
    v16 = 0xEF746E656D756772;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4164696C61766E69, 0xEF746E656D756772, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_66;
  }
  if (a1 == 0x646E756F46746F6ELL && a2 == 0xE800000000000000)
  {
    v17 = 0xE800000000000000;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646E756F46746F6ELL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0xD000000000000015)
  {
    v18 = 0x800000010012A390;
    if (a2 == 0x800000010012A390)
      goto LABEL_77;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010012A390, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_77:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if (a1 == 0x6E697A696C616572 && a2 == 0xE900000000000067)
  {
    v19 = 0xE900000000000067;
LABEL_83:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E697A696C616572, 0xE900000000000067, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_83;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000010012A3B0)
  {
    v20 = 0x800000010012A3B0;
LABEL_89:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010012A3B0, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_89;
  }
  if (a1 == 0xD000000000000018)
  {
    v21 = 0x800000010012A3D0;
    if (a2 == 0x800000010012A3D0)
      goto LABEL_94;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000010012A3D0, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
LABEL_94:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if (a1 == 0xD000000000000013)
  {
    v22 = 0x800000010012A3F0;
    if (a2 == 0x800000010012A3F0)
      goto LABEL_99;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010012A3F0, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_99:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if (a1 == 0xD000000000000018)
  {
    v23 = 0x800000010012A410;
    if (a2 == 0x800000010012A410)
      goto LABEL_104;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000010012A410, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_104:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if (a1 == 0x69746164696C6176 && a2 == 0xEA00000000006E6FLL)
  {
    v24 = 0xEA00000000006E6FLL;
LABEL_110:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746164696C6176, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_110;
  }
  if (a1 == 0xD000000000000011)
  {
    v25 = 0x800000010012A430;
    if (a2 == 0x800000010012A430)
      goto LABEL_115;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010012A430, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
LABEL_115:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if (a1 == 0x74737973656C6966 && a2 == 0xEA00000000006D65)
  {
    v26 = 0xEA00000000006D65;
LABEL_121:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74737973656C6966, 0xEA00000000006D65, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_121;
  }
  if (a1 == 0x656363416B736964 && a2 == 0xEA00000000007373)
  {
    v27 = 0xEA00000000007373;
LABEL_127:
    swift_bridgeObjectRelease(v27);
    return 21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656363416B736964, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_127;
  }
  if (a1 == 0x65636341776F6C66 && a2 == 0xEA00000000007373)
  {
    v28 = 0xEA00000000007373;
LABEL_133:
    swift_bridgeObjectRelease(v28);
    return 22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636341776F6C66, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
    goto LABEL_133;
  }
  if (a1 == 0x797265766F636572 && a2 == 0xE800000000000000)
  {
    v29 = 0xE800000000000000;
LABEL_139:
    swift_bridgeObjectRelease(v29);
    return 23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797265766F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
    goto LABEL_139;
  }
  if (a1 == 0x6363416D6172766ELL && a2 == 0xEB00000000737365)
  {
    v30 = 0xEB00000000737365;
LABEL_145:
    swift_bridgeObjectRelease(v30);
    return 24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6363416D6172766ELL, 0xEB00000000737365, a1, a2, 0) & 1) != 0)
  {
    v30 = a2;
    goto LABEL_145;
  }
  if (a1 == 0x61507972616E6962 && a2 == 0xED0000676E697372)
  {
    v31 = 0xED0000676E697372;
LABEL_151:
    swift_bridgeObjectRelease(v31);
    return 25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61507972616E6962, 0xED0000676E697372, a1, a2, 0) & 1) != 0)
  {
    v31 = a2;
    goto LABEL_151;
  }
  if (a1 == 0x6556657275747566 && a2 == 0xED00006E6F697372)
  {
    v32 = 0xED00006E6F697372;
LABEL_157:
    swift_bridgeObjectRelease(v32);
    return 26;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6556657275747566, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v32 = a2;
    goto LABEL_157;
  }
  if (a1 == 0x6975426568636163 && a2 == 0xED0000676E69646CLL)
  {
    v33 = 0xED0000676E69646CLL;
LABEL_163:
    swift_bridgeObjectRelease(v33);
    return 27;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6975426568636163, 0xED0000676E69646CLL, a1, a2, 0) & 1) != 0)
  {
    v33 = a2;
    goto LABEL_163;
  }
  if (a1 == 0x676E6967617473 && a2 == 0xE700000000000000)
  {
    v34 = 0xE700000000000000;
LABEL_169:
    swift_bridgeObjectRelease(v34);
    return 28;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E6967617473, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v34 = a2;
    goto LABEL_169;
  }
  if (a1 == 0x6F506D6574737973 && a2 == 0xEC0000007963696CLL)
  {
    v35 = 0xEC0000007963696CLL;
LABEL_175:
    swift_bridgeObjectRelease(v35);
    return 29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F506D6574737973, 0xEC0000007963696CLL, a1, a2, 0) & 1) != 0)
  {
    v35 = a2;
    goto LABEL_175;
  }
  if (a1 == 0xD000000000000010)
  {
    v36 = 0x800000010012A450;
    if (a2 == 0x800000010012A450)
      goto LABEL_180;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010012A450, a1, a2, 0) & 1) != 0)
  {
    v36 = a2;
LABEL_180:
    swift_bridgeObjectRelease(v36);
    return 30;
  }
  if (a1 == 0xD000000000000018)
  {
    v37 = 0x800000010012A470;
    if (a2 == 0x800000010012A470)
      goto LABEL_185;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000010012A470, a1, a2, 0) & 1) != 0)
  {
    v37 = a2;
LABEL_185:
    swift_bridgeObjectRelease(v37);
    return 31;
  }
  if (a1 == 0x69746E6568747561 && a2 == 0xEE006E6F69746163)
  {
    v38 = 0xEE006E6F69746163;
LABEL_191:
    swift_bridgeObjectRelease(v38);
    return 32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746E6568747561, 0xEE006E6F69746163, a1, a2, 0) & 1) != 0)
  {
    v38 = a2;
    goto LABEL_191;
  }
  if (a1 == 0x786F62646E6173 && a2 == 0xE700000000000000)
  {
    v39 = 0xE700000000000000;
LABEL_197:
    swift_bridgeObjectRelease(v39);
    return 33;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x786F62646E6173, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v39 = a2;
    goto LABEL_197;
  }
  if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461)
  {
    v40 = 0xED00006E6F697461;
LABEL_203:
    swift_bridgeObjectRelease(v40);
    return 34;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72756769666E6F63, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v40 = a2;
    goto LABEL_203;
  }
  if (a1 == 0x45676E6967676F6CLL && a2 == 0xEC000000726F7272)
  {
    v41 = 0xEC000000726F7272;
LABEL_209:
    swift_bridgeObjectRelease(v41);
    return 35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x45676E6967676F6CLL, 0xEC000000726F7272, a1, a2, 0) & 1) != 0)
  {
    v41 = a2;
    goto LABEL_209;
  }
  if (a1 == 0xD000000000000010)
  {
    v42 = 0x800000010012A490;
    if (a2 == 0x800000010012A490)
      goto LABEL_214;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010012A490, a1, a2, 0) & 1) != 0)
  {
    v42 = a2;
LABEL_214:
    swift_bridgeObjectRelease(v42);
    return 36;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x800000010012A4B0)
  {
    v43 = 0x800000010012A4B0;
LABEL_220:
    swift_bridgeObjectRelease(v43);
    return 37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x800000010012A4B0, a1, a2, 0) & 1) != 0)
  {
    v43 = a2;
    goto LABEL_220;
  }
  if (a1 == 0x4B64696C61766E69 && a2 == 0xEA00000000007965)
  {
    v44 = 0xEA00000000007965;
LABEL_226:
    swift_bridgeObjectRelease(v44);
    return 38;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B64696C61766E69, 0xEA00000000007965, a1, a2, 0) & 1) != 0)
  {
    v44 = a2;
    goto LABEL_226;
  }
  if (a1 == 0x64616F6C6E75 && a2 == 0xE600000000000000)
  {
    v45 = 0xE600000000000000;
LABEL_232:
    swift_bridgeObjectRelease(v45);
    return 39;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64616F6C6E75, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v45 = a2;
    goto LABEL_232;
  }
  if (a1 == 0x6F7272457473696CLL && a2 == 0xE900000000000072)
  {
    v46 = 0xE900000000000072;
LABEL_238:
    swift_bridgeObjectRelease(v46);
    return 40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F7272457473696CLL, 0xE900000000000072, a1, a2, 0) & 1) != 0)
  {
    v46 = a2;
    goto LABEL_238;
  }
  if (a1 == 0xD000000000000010)
  {
    v47 = 0x800000010012A4D0;
    if (a2 == 0x800000010012A4D0)
      goto LABEL_243;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010012A4D0, a1, a2, 0) & 1) != 0)
  {
    v47 = a2;
LABEL_243:
    swift_bridgeObjectRelease(v47);
    return 41;
  }
  if (a1 == 0x74617473706D7564 && a2 == 0xEE00726F72724565)
  {
    v48 = 0xEE00726F72724565;
LABEL_249:
    swift_bridgeObjectRelease(v48);
    return 42;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617473706D7564, 0xEE00726F72724565, a1, a2, 0) & 1) != 0)
  {
    v48 = a2;
    goto LABEL_249;
  }
  if (a1 == 0x65736F6E67616964 && a2 == 0xED0000726F727245)
  {
    v49 = 0xED0000726F727245;
LABEL_255:
    swift_bridgeObjectRelease(v49);
    return 43;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65736F6E67616964, 0xED0000726F727245, a1, a2, 0) & 1) != 0)
  {
    v49 = a2;
    goto LABEL_255;
  }
  if (a1 == 0x696C6F50746F6F62 && a2 == 0xEA00000000007963)
  {
    v50 = 0xEA00000000007963;
LABEL_261:
    swift_bridgeObjectRelease(v50);
    return 44;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C6F50746F6F62, 0xEA00000000007963, a1, a2, 0) & 1) != 0)
  {
    v50 = a2;
    goto LABEL_261;
  }
  if (a1 == 0x6F69747065637865 && a2 == 0xED00007473694C6ELL)
  {
    v51 = 0xED00007473694C6ELL;
LABEL_267:
    swift_bridgeObjectRelease(v51);
    return 45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69747065637865, 0xED00007473694C6ELL, a1, a2, 0) & 1) != 0)
  {
    v51 = a2;
    goto LABEL_267;
  }
  if (a1 == 0x6E67695365646F63 && a2 == 0xEB00000000676E69)
  {
    v52 = 0xEB00000000676E69;
LABEL_273:
    swift_bridgeObjectRelease(v52);
    return 46;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E67695365646F63, 0xEB00000000676E69, a1, a2, 0) & 1) != 0)
  {
    v52 = a2;
    goto LABEL_273;
  }
  if (a1 == 0xD000000000000011)
  {
    v53 = 0x800000010012A4F0;
    if (a2 == 0x800000010012A4F0)
      goto LABEL_278;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010012A4F0, a1, a2, 0) & 1) != 0)
  {
    v53 = a2;
LABEL_278:
    swift_bridgeObjectRelease(v53);
    return 47;
  }
  if (a1 == 0xD000000000000010)
  {
    v54 = 0x800000010012A510;
    if (a2 == 0x800000010012A510)
      goto LABEL_283;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010012A510, a1, a2, 0) & 1) != 0)
  {
    v54 = a2;
LABEL_283:
    swift_bridgeObjectRelease(v54);
    return 48;
  }
  if (a1 == 0x6F42656661536E69 && a2 == 0xEA0000000000746FLL)
  {
    v55 = 0xEA0000000000746FLL;
LABEL_289:
    swift_bridgeObjectRelease(v55);
    return 49;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F42656661536E69, 0xEA0000000000746FLL, a1, a2, 0) & 1) != 0)
  {
    v55 = a2;
    goto LABEL_289;
  }
  if (a1 == 0x6E69777261446E69 && a2 == 0xEA0000000000534FLL)
  {
    v56 = 0xEA0000000000534FLL;
LABEL_295:
    swift_bridgeObjectRelease(v56);
    return 50;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69777261446E69, 0xEA0000000000534FLL, a1, a2, 0) & 1) != 0)
  {
    v56 = a2;
    goto LABEL_295;
  }
  if (a1 == 0x6C616E7265746E69 && a2 == 0xED0000726F727245)
  {
    v57 = 0xED0000726F727245;
LABEL_301:
    swift_bridgeObjectRelease(v57);
    return 51;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C616E7265746E69, 0xED0000726F727245, a1, a2, 0) & 1) != 0)
  {
    v57 = a2;
    goto LABEL_301;
  }
  if (a1 == 0x7365726975716572 && a2 == 0xEE00746F6F626552)
  {
    v58 = 0xEE00746F6F626552;
LABEL_307:
    swift_bridgeObjectRelease(v58);
    return 52;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365726975716572, 0xEE00746F6F626552, a1, a2, 0) & 1) != 0)
  {
    v58 = a2;
    goto LABEL_307;
  }
  if (a1 == 0x4F6E6567634B6E69 && a2 == 0xE900000000000053)
  {
    v59 = 0xE900000000000053;
LABEL_313:
    swift_bridgeObjectRelease(v59);
    return 53;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4F6E6567634B6E69, 0xE900000000000053, a1, a2, 0) & 1) != 0)
  {
    v59 = a2;
    goto LABEL_313;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x800000010012A530)
  {
    v60 = 0x800000010012A530;
LABEL_319:
    swift_bridgeObjectRelease(v60);
    return 54;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010012A530, a1, a2, 0) & 1) != 0)
  {
    v60 = a2;
    goto LABEL_319;
  }
  if (a1 == 0x64756C6378456E69 && a2 == 0xED00007473694C65)
  {
    v61 = 0xED00007473694C65;
LABEL_325:
    swift_bridgeObjectRelease(v61);
    return 55;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64756C6378456E69, 0xED00007473694C65, a1, a2, 0) & 1) != 0)
  {
    v61 = a2;
    goto LABEL_325;
  }
  if (a1 == 0x6F6974617267696DLL && a2 == 0xEE00726F7272456ELL)
  {
    v62 = 0xEE00726F7272456ELL;
LABEL_331:
    swift_bridgeObjectRelease(v62);
    return 56;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6974617267696DLL, 0xEE00726F7272456ELL, a1, a2, 0) & 1) != 0)
  {
    v62 = a2;
    goto LABEL_331;
  }
  if (a1 == 0xD000000000000010)
  {
    v63 = 0x800000010012A550;
    if (a2 == 0x800000010012A550)
      goto LABEL_336;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010012A550, a1, a2, 0) & 1) != 0)
  {
    v63 = a2;
LABEL_336:
    swift_bridgeObjectRelease(v63);
    return 57;
  }
  if (a1 == 0xD000000000000013)
  {
    v64 = 0x800000010012A570;
    if (a2 == 0x800000010012A570)
      goto LABEL_341;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010012A570, a1, a2, 0) & 1) != 0)
  {
    v64 = a2;
LABEL_341:
    swift_bridgeObjectRelease(v64);
    return 58;
  }
  if (a1 == 0x45746573656C6966 && a2 == 0xEC000000726F7272)
  {
    v65 = 0xEC000000726F7272;
LABEL_347:
    swift_bridgeObjectRelease(v65);
    return 59;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x45746573656C6966, 0xEC000000726F7272, a1, a2, 0) & 1) != 0)
  {
    v65 = a2;
    goto LABEL_347;
  }
  if (a1 == 0xD000000000000013)
  {
    v66 = 0x800000010012A590;
    if (a2 == 0x800000010012A590)
      goto LABEL_352;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010012A590, a1, a2, 0) & 1) != 0)
  {
    v66 = a2;
LABEL_352:
    swift_bridgeObjectRelease(v66);
    return 60;
  }
  if (a1 == 0xD000000000000011)
  {
    v67 = 0x800000010012A5B0;
    if (a2 == 0x800000010012A5B0)
      goto LABEL_357;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010012A5B0, a1, a2, 0) & 1) != 0)
  {
    v67 = a2;
LABEL_357:
    swift_bridgeObjectRelease(v67);
    return 61;
  }
  if (a1 == 0xD000000000000013)
  {
    v68 = 0x800000010012A5D0;
    if (a2 == 0x800000010012A5D0)
      goto LABEL_362;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010012A5D0, a1, a2, 0) & 1) != 0)
  {
    v68 = a2;
LABEL_362:
    swift_bridgeObjectRelease(v68);
    return 62;
  }
  if (a1 == 0xD000000000000015)
  {
    v69 = 0x800000010012A5F0;
    if (a2 == 0x800000010012A5F0)
      goto LABEL_367;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010012A5F0, a1, a2, 0) & 1) != 0)
  {
    v69 = a2;
LABEL_367:
    swift_bridgeObjectRelease(v69);
    return 63;
  }
  if (a1 == 0x6F63655274786564 && a2 == 0xEF726F7272456472)
  {
    v70 = 0xEF726F7272456472;
LABEL_373:
    swift_bridgeObjectRelease(v70);
    return 64;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F63655274786564, 0xEF726F7272456472, a1, a2, 0) & 1) != 0)
  {
    v70 = a2;
    goto LABEL_373;
  }
  if (a1 == 0xD000000000000021 && a2 == 0x800000010012A610)
  {
    v71 = 0x800000010012A610;
LABEL_379:
    swift_bridgeObjectRelease(v71);
    return 65;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x800000010012A610, a1, a2, 0) & 1) != 0)
  {
    v71 = a2;
    goto LABEL_379;
  }
  if (a1 == 0xD00000000000002ALL && a2 == 0x800000010012A640)
  {
    v72 = 0x800000010012A640;
LABEL_385:
    swift_bridgeObjectRelease(v72);
    return 66;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ALL, 0x800000010012A640, a1, a2, 0) & 1) != 0)
  {
    v72 = a2;
    goto LABEL_385;
  }
  if (a1 == 0xD000000000000015)
  {
    v73 = 0x800000010012A670;
    if (a2 == 0x800000010012A670)
      goto LABEL_390;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010012A670, a1, a2, 0) & 1) != 0)
  {
    v73 = a2;
LABEL_390:
    swift_bridgeObjectRelease(v73);
    return 67;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x800000010012A690)
  {
    v74 = 0x800000010012A690;
LABEL_396:
    swift_bridgeObjectRelease(v74);
    return 68;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010012A690, a1, a2, 0) & 1) != 0)
  {
    v74 = a2;
    goto LABEL_396;
  }
  if (a1 == 0x5264696C61766E69 && a2 == 0xEE00747365757165)
  {
    v75 = 0xEE00747365757165;
LABEL_402:
    swift_bridgeObjectRelease(v75);
    return 69;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5264696C61766E69, 0xEE00747365757165, a1, a2, 0) & 1) != 0)
  {
    v75 = a2;
    goto LABEL_402;
  }
  if (a1 == 0x697463656E6E6F63 && a2 == 0xEA00000000006E6FLL)
  {
    v76 = 0xEA00000000006E6FLL;
LABEL_408:
    swift_bridgeObjectRelease(v76);
    return 70;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697463656E6E6F63, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v76 = a2;
    goto LABEL_408;
  }
  if (a1 == 0x74754F64656D6974 && a2 == 0xE800000000000000)
  {
    v77 = 0xE800000000000000;
LABEL_414:
    swift_bridgeObjectRelease(v77);
    return 71;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74754F64656D6974, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v77 = a2;
    goto LABEL_414;
  }
  if (a1 == 2037609826 && a2 == 0xE400000000000000)
  {
    v78 = 0xE400000000000000;
LABEL_420:
    swift_bridgeObjectRelease(v78);
    return 72;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(2037609826, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v78 = a2;
    goto LABEL_420;
  }
  if (a1 == 0x74656D6874697261 && a2 == 0xEA00000000006369)
  {
    swift_bridgeObjectRelease(0xEA00000000006369);
    return 73;
  }
  else
  {
    v79 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74656D6874697261, 0xEA00000000006369, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v79 & 1) != 0)
      return 73;
    else
      return 74;
  }
}

uint64_t sub_1000C01AC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1953066351 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953066351, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000010012A6B0)
  {
    swift_bridgeObjectRelease(0x800000010012A6B0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010012A6B0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000C0288(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x5664657269736564 && a2 == 0xEE006E6F69737265)
  {
    v7 = 0xEE006E6F69737265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5664657269736564, 0xEE006E6F69737265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65566C6175746361 && a2 == 0xED00006E6F697372)
  {
    swift_bridgeObjectRelease(0xED00006E6F697372);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65566C6175746361, 0xED00006E6F697372, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1000C0430(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000010012A6B0)
  {
    swift_bridgeObjectRelease(0x800000010012A6B0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010012A6B0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000C0528(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(12639, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000C05E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v99[3];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  char *v277;
  char *v278;
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  char *v294;
  char *v295;
  char *v296;
  char *v297;
  char *v298;
  char *v299;
  char *v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  uint64_t v316;
  char *v317;
  char *v318;
  char *v319;
  uint64_t v320;
  char *v321;
  _QWORD *v322;
  uint64_t v323;

  v316 = a2;
  v245 = sub_100005C88(&qword_10015B6B0);
  v172 = *(_QWORD *)(v245 - 8);
  __chkstk_darwin(v245);
  v314 = (char *)v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = sub_100005C88(&qword_10015B6B8);
  v171 = *(_QWORD *)(v246 - 8);
  __chkstk_darwin(v246);
  v298 = (char *)v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = sub_100005C88(&qword_10015B6C0);
  v170 = *(_QWORD *)(v244 - 8);
  __chkstk_darwin(v244);
  v315 = (char *)v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = sub_100005C88(&qword_10015B6C8);
  v169 = *(_QWORD *)(v243 - 8);
  __chkstk_darwin(v243);
  v294 = (char *)v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = sub_100005C88(&qword_10015B6D0);
  v168 = *(_QWORD *)(v242 - 8);
  __chkstk_darwin(v242);
  v313 = (char *)v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = sub_100005C88(&qword_10015B6D8);
  v167 = *(_QWORD *)(v241 - 8);
  __chkstk_darwin(v241);
  v312 = (char *)v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = sub_100005C88(&qword_10015B6E0);
  v166 = *(_QWORD *)(v240 - 8);
  __chkstk_darwin(v240);
  v311 = (char *)v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = sub_100005C88(&qword_10015B6E8);
  v165 = *(_QWORD *)(v239 - 8);
  __chkstk_darwin(v239);
  v310 = (char *)v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = sub_100005C88(&qword_10015B6F0);
  v164 = *(_QWORD *)(v238 - 8);
  __chkstk_darwin(v238);
  v309 = (char *)v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = sub_100005C88(&qword_10015B6F8);
  v163 = *(_QWORD *)(v237 - 8);
  __chkstk_darwin(v237);
  v308 = (char *)v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = sub_100005C88(&qword_10015B700);
  v162 = *(_QWORD *)(v236 - 8);
  __chkstk_darwin(v236);
  v307 = (char *)v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = sub_100005C88(&qword_10015B708);
  v161 = *(_QWORD *)(v235 - 8);
  __chkstk_darwin(v235);
  v306 = (char *)v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = sub_100005C88(&qword_10015B710);
  v160 = *(_QWORD *)(v234 - 8);
  __chkstk_darwin(v234);
  v305 = (char *)v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v233 = sub_100005C88(&qword_10015B718);
  v159 = *(_QWORD *)(v233 - 8);
  __chkstk_darwin(v233);
  v304 = (char *)v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = sub_100005C88(&qword_10015B720);
  v158 = *(_QWORD *)(v232 - 8);
  __chkstk_darwin(v232);
  v303 = (char *)v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v231 = sub_100005C88(&qword_10015B728);
  v157 = *(_QWORD *)(v231 - 8);
  __chkstk_darwin(v231);
  v302 = (char *)v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = sub_100005C88(&qword_10015B730);
  v156 = *(_QWORD *)(v230 - 8);
  __chkstk_darwin(v230);
  v301 = (char *)v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = sub_100005C88(&qword_10015B738);
  v155 = *(_QWORD *)(v229 - 8);
  __chkstk_darwin(v229);
  v300 = (char *)v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = sub_100005C88(&qword_10015B740);
  v154 = *(_QWORD *)(v228 - 8);
  __chkstk_darwin(v228);
  v299 = (char *)v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = sub_100005C88(&qword_10015B748);
  v153 = *(_QWORD *)(v227 - 8);
  __chkstk_darwin(v227);
  v297 = (char *)v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = sub_100005C88(&qword_10015B750);
  v152 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v296 = (char *)v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = sub_100005C88(&qword_10015B758);
  v151 = *(_QWORD *)(v225 - 8);
  __chkstk_darwin(v225);
  v295 = (char *)v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = sub_100005C88(&qword_10015B760);
  v150 = *(_QWORD *)(v224 - 8);
  __chkstk_darwin(v224);
  v293 = (char *)v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = sub_100005C88(&qword_10015B768);
  v149 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v292 = (char *)v99 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = sub_100005C88(&qword_10015B770);
  v148 = *(_QWORD *)(v222 - 8);
  __chkstk_darwin(v222);
  v291 = (char *)v99 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = sub_100005C88(&qword_10015B778);
  v147 = *(_QWORD *)(v221 - 8);
  __chkstk_darwin(v221);
  v290 = (char *)v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = sub_100005C88(&qword_10015B780);
  v145 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v288 = (char *)v99 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = sub_100005C88(&qword_10015B788);
  v146 = *(_QWORD *)(v220 - 8);
  __chkstk_darwin(v220);
  v289 = (char *)v99 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = sub_100005C88(&qword_10015B790);
  v144 = *(_QWORD *)(v218 - 8);
  __chkstk_darwin(v218);
  v287 = (char *)v99 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = sub_100005C88(&qword_10015B798);
  v143 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v321 = (char *)v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = sub_100005C88(&qword_10015B7A0);
  v320 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v286 = (char *)v99 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = sub_100005C88(&qword_10015B7A8);
  v142 = *(_QWORD *)(v215 - 8);
  __chkstk_darwin(v215);
  v285 = (char *)v99 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_100005C88(&qword_10015B7B0);
  v141 = *(_QWORD *)(v214 - 8);
  __chkstk_darwin(v214);
  v284 = (char *)v99 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_100005C88(&qword_10015B7B8);
  v140 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v283 = (char *)v99 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = sub_100005C88(&qword_10015B7C0);
  v139 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v282 = (char *)v99 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = sub_100005C88(&qword_10015B7C8);
  v138 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v281 = (char *)v99 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = sub_100005C88(&qword_10015B7D0);
  v137 = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210);
  v280 = (char *)v99 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = sub_100005C88(&qword_10015B7D8);
  v136 = *(_QWORD *)(v209 - 8);
  __chkstk_darwin(v209);
  v279 = (char *)v99 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = sub_100005C88(&qword_10015B7E0);
  v135 = *(_QWORD *)(v208 - 8);
  __chkstk_darwin(v208);
  v278 = (char *)v99 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = sub_100005C88(&qword_10015B7E8);
  v134 = *(_QWORD *)(v207 - 8);
  __chkstk_darwin(v207);
  v277 = (char *)v99 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100005C88(&qword_10015B7F0);
  v133 = *(_QWORD *)(v206 - 8);
  __chkstk_darwin(v206);
  v276 = (char *)v99 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_100005C88(&qword_10015B7F8);
  v132 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v275 = (char *)v99 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_100005C88(&qword_10015B800);
  v131 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v274 = (char *)v99 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_100005C88(&qword_10015B808);
  v129 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v272 = (char *)v99 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100005C88(&qword_10015B810);
  v128 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v271 = (char *)v99 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_100005C88(&qword_10015B818);
  v127 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v270 = (char *)v99 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100005C88(&qword_10015B820);
  v130 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203);
  v273 = (char *)v99 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_100005C88(&qword_10015B828);
  v126 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v269 = (char *)v99 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_100005C88(&qword_10015B830);
  v125 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v268 = (char *)v99 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_100005C88(&qword_10015B838);
  v124 = *(_QWORD *)(v197 - 8);
  __chkstk_darwin(v197);
  v267 = (char *)v99 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100005C88(&qword_10015B840);
  v123 = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v319 = (char *)v99 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_100005C88(&qword_10015B848);
  v121 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v266 = (char *)v99 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100005C88(&qword_10015B850);
  v120 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v265 = (char *)v99 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_100005C88(&qword_10015B858);
  v119 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v264 = (char *)v99 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100005C88(&qword_10015B860);
  v122 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v260 = (char *)v99 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100005C88(&qword_10015B868);
  v117 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v263 = (char *)v99 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100005C88(&qword_10015B870);
  v115 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v261 = (char *)v99 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_100005C88(&qword_10015B878);
  v118 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v318 = (char *)v99 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_100005C88(&qword_10015B880);
  v114 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v317 = (char *)v99 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_100005C88(&qword_10015B888);
  v116 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v262 = (char *)v99 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100005C88(&qword_10015B890);
  v113 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v259 = (char *)v99 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100005C88(&qword_10015B898);
  v112 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v258 = (char *)v99 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100005C88(&qword_10015B8A0);
  v111 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v257 = (char *)v99 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_100005C88(&qword_10015B8A8);
  v110 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v256 = (char *)v99 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100005C88(&qword_10015B8B0);
  v179 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v253 = (char *)v99 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_100005C88(&qword_10015B8B8);
  v109 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v255 = (char *)v99 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100005C88(&qword_10015B8C0);
  v107 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v252 = (char *)v99 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_100005C88(&qword_10015B8C8);
  v108 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v254 = (char *)v99 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100005C88(&qword_10015B8D0);
  v105 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v250 = (char *)v99 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100005C88(&qword_10015B8D8);
  v104 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v249 = (char *)v99 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100005C88(&qword_10015B8E0);
  v106 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v251 = (char *)v99 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_100005C88(&qword_10015B8E8);
  v103 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v248 = (char *)v99 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_100005C88(&qword_10015B8F0);
  v102 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v247 = (char *)v99 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100005C88(&qword_10015B8F8);
  v77 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v79 = (char *)v99 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100005C88(&qword_10015B900);
  v81 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v83 = (char *)v99 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = a1[3];
  v85 = a1[4];
  v322 = a1;
  sub_100004DE4(a1, v84);
  v86 = sub_1000BCCE8();
  v87 = v323;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KMError.CodingKeys, &type metadata for KMError.CodingKeys, v86, v84, v85);
  v323 = v87;
  if (!v87)
  {
    v99[2] = v79;
    v99[0] = v77;
    v99[1] = v76;
    v100 = v81;
    v101 = v80;
    v88 = KeyedDecodingContainer.allKeys.getter(v80);
    v89 = v88;
    if (*(_QWORD *)(v88 + 16) == 1)
    {
      v90 = *(unsigned __int8 *)(v88 + 32);
      if ((_DWORD)v90 != 74)
        __asm { BR              X10 }
    }
    v91 = type metadata accessor for DecodingError(0);
    v92 = swift_allocError(v91, &protocol witness table for DecodingError, 0, 0);
    v94 = v93;
    sub_100005C88(&qword_100159620);
    *v94 = &type metadata for KMError;
    v95 = v101;
    v96 = KeyedDecodingContainer.codingPath.getter(v101);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v96, 0xD00000000000002BLL, 0x8000000100123A60, 0);
    v97 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v91 - 8) + 104))(v94, enum case for DecodingError.typeMismatch(_:), v91);
    v323 = v92;
    swift_willThrow(v97);
    swift_unknownObjectRelease(v89);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v83, v95);
  }
  return sub_100005D08(v322);
}

void sub_1000C4498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v2 - 152) = 73;
  v3 = sub_1000BCD2C();
  v4 = *(_QWORD *)(v2 - 232);
  v5 = *(_QWORD *)(v2 - 1936);
  v6 = *(_QWORD *)(v2 - 160);
  v7 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for KMError.ArithmeticCodingKeys, v2 - 152, v5, &type metadata for KMError.ArithmeticCodingKeys, v3);
  if (v6)
  {
    swift_unknownObjectRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 1944) + 8))(v0, v5);
    *(_QWORD *)(v2 - 160) = v6;
    JUMPOUT(0x1000C446CLL);
  }
  v8 = *(_QWORD *)(v2 - 784);
  v9 = KeyedDecodingContainer.decode(_:forKey:)(v7, v8);
  v10 = *(_QWORD *)(v2 - 1944);
  *(_QWORD *)(v2 - 160) = 0;
  *(_QWORD *)(v2 - 384) = v9;
  *(_QWORD *)(v2 - 512) = v11;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 1368) + 8))(v4, v8);
  swift_unknownObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0, v5);
  JUMPOUT(0x1000C6630);
}

uint64_t sub_1000C66C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005C88(&qword_10015B6A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000C6704()
{
  unint64_t result;

  result = qword_10015B6A8;
  if (!qword_10015B6A8)
  {
    result = swift_getWitnessTable(&unk_1001149B0, &type metadata for KMError);
    atomic_store(result, (unint64_t *)&qword_10015B6A8);
  }
  return result;
}

uint64_t destroy for KMError(uint64_t a1)
{
  return sub_1000391DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

uint64_t initializeWithCopy for KMError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  sub_1000515CC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(_BYTE *)(a2 + 72));
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v13;
  return a1;
}

uint64_t assignWithCopy for KMError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v23;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  sub_1000515CC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11, *(_BYTE *)(a2 + 72));
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v23;
  sub_1000391DC(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

__n128 initializeWithTake for KMError(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for KMError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_BYTE *)(a2 + 72);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 64) = v3;
  *(_BYTE *)(a1 + 72) = v4;
  sub_1000391DC(v5, v7, v6, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for KMError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xB7 && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 183);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 0x49)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KMError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB6)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 183;
    if (a3 >= 0xB7)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xB7)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 72) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000C6A38(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 72) <= 0x48u)
    return *(unsigned __int8 *)(a1 + 72);
  else
    return (*(_DWORD *)a1 + 73);
}

uint64_t sub_1000C6A50(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x49)
  {
    *(_QWORD *)result = a2 - 73;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    LOBYTE(a2) = 73;
  }
  *(_BYTE *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for KMError()
{
  return &type metadata for KMError;
}

uint64_t getEnumTagSinglePayload for KMError.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xB7)
    goto LABEL_17;
  if (a2 + 73 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 73) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 73;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 73;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 73;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x4A;
  v8 = v6 - 74;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KMError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 73 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 73) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xB7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xB6)
    return ((uint64_t (*)(void))((char *)&loc_1000C6B68 + 4 * byte_1001148D3[v4]))();
  *a1 = a2 + 73;
  return ((uint64_t (*)(void))((char *)sub_1000C6B9C + 4 * byte_1001148CE[v4]))();
}

uint64_t sub_1000C6B9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6BA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C6BACLL);
  return result;
}

uint64_t sub_1000C6BB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C6BC0);
  *(_BYTE *)result = a2 + 73;
  return result;
}

uint64_t sub_1000C6BC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6BCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KMError.CodingKeys()
{
  return &type metadata for KMError.CodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MultipleCodingKeys()
{
  return &type metadata for KMError.MultipleCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DeserializationCodingKeys()
{
  return &type metadata for KMError.DeserializationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KernelCommunicationCodingKeys()
{
  return &type metadata for KMError.KernelCommunicationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KernelRequestCodingKeys()
{
  return &type metadata for KMError.KernelRequestCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DriverKitLaunchCodingKeys()
{
  return &type metadata for KMError.DriverKitLaunchCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ExtensionLoadCodingKeys()
{
  return &type metadata for KMError.ExtensionLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.CollectionLoadCodingKeys()
{
  return &type metadata for KMError.CollectionLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.CollectionLinkageCodingKeys()
{
  return &type metadata for KMError.CollectionLinkageCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ResourceLoadCodingKeys()
{
  return &type metadata for KMError.ResourceLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SerializationCodingKeys()
{
  return &type metadata for KMError.SerializationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidArgumentCodingKeys()
{
  return &type metadata for KMError.InvalidArgumentCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.NotFoundCodingKeys()
{
  return &type metadata for KMError.NotFoundCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KernelCollectionBuildCodingKeys()
{
  return &type metadata for KMError.KernelCollectionBuildCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RealizingCodingKeys()
{
  return &type metadata for KMError.RealizingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DependencyResolutionCodingKeys()
{
  return &type metadata for KMError.DependencyResolutionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MissingDependencyRequestCodingKeys()
{
  return &type metadata for KMError.MissingDependencyRequestCodingKeys;
}

uint64_t storeEnumTagSinglePayload for KMError.IncompatibleVersionCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000C6D3C + 4 * byte_1001148DD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000C6D70 + 4 * byte_1001148D8[v4]))();
}

uint64_t sub_1000C6D70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6D78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C6D80);
  return result;
}

uint64_t sub_1000C6D8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C6D94);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000C6D98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6DA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KMError.IncompatibleVersionCodingKeys()
{
  return &type metadata for KMError.IncompatibleVersionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.IncompatibleArchitectureCodingKeys()
{
  return &type metadata for KMError.IncompatibleArchitectureCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ValidationCodingKeys()
{
  return &type metadata for KMError.ValidationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidPropertiesCodingKeys()
{
  return &type metadata for KMError.InvalidPropertiesCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FilesystemCodingKeys()
{
  return &type metadata for KMError.FilesystemCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DiskAccessCodingKeys()
{
  return &type metadata for KMError.DiskAccessCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FlowAccessCodingKeys()
{
  return &type metadata for KMError.FlowAccessCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RecoveryCodingKeys()
{
  return &type metadata for KMError.RecoveryCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.NvramAccessCodingKeys()
{
  return &type metadata for KMError.NvramAccessCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BinaryParsingCodingKeys()
{
  return &type metadata for KMError.BinaryParsingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FutureVersionCodingKeys()
{
  return &type metadata for KMError.FutureVersionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.CacheBuildingCodingKeys()
{
  return &type metadata for KMError.CacheBuildingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.StagingCodingKeys()
{
  return &type metadata for KMError.StagingCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemPolicyCodingKeys()
{
  return &type metadata for KMError.SystemPolicyCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnapprovedToLoadCodingKeys()
{
  return &type metadata for KMError.UnapprovedToLoadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnapprovedToLoadMultipleCodingKeys()
{
  return &type metadata for KMError.UnapprovedToLoadMultipleCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.AuthenticationCodingKeys()
{
  return &type metadata for KMError.AuthenticationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SandboxCodingKeys()
{
  return &type metadata for KMError.SandboxCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ConfigurationCodingKeys()
{
  return &type metadata for KMError.ConfigurationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.LoggingErrorCodingKeys()
{
  return &type metadata for KMError.LoggingErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SubprocessFailedCodingKeys()
{
  return &type metadata for KMError.SubprocessFailedCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InsufficientPermissionsCodingKeys()
{
  return &type metadata for KMError.InsufficientPermissionsCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidKeyCodingKeys()
{
  return &type metadata for KMError.InvalidKeyCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnloadCodingKeys()
{
  return &type metadata for KMError.UnloadCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ListErrorCodingKeys()
{
  return &type metadata for KMError.ListErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RunninglistErrorCodingKeys()
{
  return &type metadata for KMError.RunninglistErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DumpstateErrorCodingKeys()
{
  return &type metadata for KMError.DumpstateErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DiagnoseErrorCodingKeys()
{
  return &type metadata for KMError.DiagnoseErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BootPolicyCodingKeys()
{
  return &type metadata for KMError.BootPolicyCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ExceptionListCodingKeys()
{
  return &type metadata for KMError.ExceptionListCodingKeys;
}

uint64_t _s10driverkitd7KMErrorO23KernelRequestCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000C6FD8 + 4 * byte_1001148E7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C700C + 4 * byte_1001148E2[v4]))();
}

uint64_t sub_1000C700C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C7014(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C701CLL);
  return result;
}

uint64_t sub_1000C7028(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C7030);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000C7034(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C703C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KMError.CodeSigningCodingKeys()
{
  return &type metadata for KMError.CodeSigningCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.TriggerPanicMedicCodingKeys()
{
  return &type metadata for KMError.TriggerPanicMedicCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ConsistencyCheckCodingKeys()
{
  return &type metadata for KMError.ConsistencyCheckCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InSafeBootCodingKeys()
{
  return &type metadata for KMError.InSafeBootCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InDarwinOSCodingKeys()
{
  return &type metadata for KMError.InDarwinOSCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InternalErrorCodingKeys()
{
  return &type metadata for KMError.InternalErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.RequiresRebootCodingKeys()
{
  return &type metadata for KMError.RequiresRebootCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InKcgenOSCodingKeys()
{
  return &type metadata for KMError.InKcgenOSCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DuplicateExtensionCodingKeys()
{
  return &type metadata for KMError.DuplicateExtensionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InExcludeListCodingKeys()
{
  return &type metadata for KMError.InExcludeListCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MigrationErrorCodingKeys()
{
  return &type metadata for KMError.MigrationErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.UnsupportedErrorCodingKeys()
{
  return &type metadata for KMError.UnsupportedErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DeveloperToolsErrorCodingKeys()
{
  return &type metadata for KMError.DeveloperToolsErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.FilesetErrorCodingKeys()
{
  return &type metadata for KMError.FilesetErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.MissingDeveloperKitCodingKeys()
{
  return &type metadata for KMError.MissingDeveloperKitCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KdkInstallerErrorCodingKeys()
{
  return &type metadata for KMError.KdkInstallerErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.KnoxDownloaderErrorCodingKeys()
{
  return &type metadata for KMError.KnoxDownloaderErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.PackageInstallerErrorCodingKeys()
{
  return &type metadata for KMError.PackageInstallerErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.DextRecordErrorCodingKeys()
{
  return &type metadata for KMError.DextRecordErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemExtensionWaitForTerminationCodingKeys()
{
  return &type metadata for KMError.SystemExtensionWaitForTerminationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys()
{
  return &type metadata for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.SystemExtensionsErrorCodingKeys()
{
  return &type metadata for KMError.SystemExtensionsErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BuildManifestNotFoundErrorCodingKeys()
{
  return &type metadata for KMError.BuildManifestNotFoundErrorCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.InvalidRequestCodingKeys()
{
  return &type metadata for KMError.InvalidRequestCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.ConnectionCodingKeys()
{
  return &type metadata for KMError.ConnectionCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.TimedOutCodingKeys()
{
  return &type metadata for KMError.TimedOutCodingKeys;
}

ValueMetadata *type metadata accessor for KMError.BusyCodingKeys()
{
  return &type metadata for KMError.BusyCodingKeys;
}

uint64_t _s10driverkitd7KMErrorO18MultipleCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000C7238 + 4 * byte_1001148EC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000C7258 + 4 * byte_1001148F1[v4]))();
}

_BYTE *sub_1000C7238(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000C7258(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000C7260(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000C7268(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000C7270(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000C7278(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KMError.ArithmeticCodingKeys()
{
  return &type metadata for KMError.ArithmeticCodingKeys;
}

unint64_t sub_1000C7298()
{
  unint64_t result;

  result = qword_100165640[0];
  if (!qword_100165640[0])
  {
    result = swift_getWitnessTable(&unk_100115478, &type metadata for KMError.ArithmeticCodingKeys);
    atomic_store(result, qword_100165640);
  }
  return result;
}

unint64_t sub_1000C72E0()
{
  unint64_t result;

  result = qword_100165850[0];
  if (!qword_100165850[0])
  {
    result = swift_getWitnessTable(&unk_100115530, &type metadata for KMError.BusyCodingKeys);
    atomic_store(result, qword_100165850);
  }
  return result;
}

unint64_t sub_1000C7328()
{
  unint64_t result;

  result = qword_100165A60[0];
  if (!qword_100165A60[0])
  {
    result = swift_getWitnessTable(&unk_1001155E8, &type metadata for KMError.TimedOutCodingKeys);
    atomic_store(result, qword_100165A60);
  }
  return result;
}

unint64_t sub_1000C7370()
{
  unint64_t result;

  result = qword_100165C70[0];
  if (!qword_100165C70[0])
  {
    result = swift_getWitnessTable(&unk_1001156A0, &type metadata for KMError.ConnectionCodingKeys);
    atomic_store(result, qword_100165C70);
  }
  return result;
}

unint64_t sub_1000C73B8()
{
  unint64_t result;

  result = qword_100165E80[0];
  if (!qword_100165E80[0])
  {
    result = swift_getWitnessTable(&unk_100115758, &type metadata for KMError.InvalidRequestCodingKeys);
    atomic_store(result, qword_100165E80);
  }
  return result;
}

unint64_t sub_1000C7400()
{
  unint64_t result;

  result = qword_100166090[0];
  if (!qword_100166090[0])
  {
    result = swift_getWitnessTable(&unk_100115810, &type metadata for KMError.BuildManifestNotFoundErrorCodingKeys);
    atomic_store(result, qword_100166090);
  }
  return result;
}

unint64_t sub_1000C7448()
{
  unint64_t result;

  result = qword_1001662A0[0];
  if (!qword_1001662A0[0])
  {
    result = swift_getWitnessTable(&unk_1001158C8, &type metadata for KMError.SystemExtensionsErrorCodingKeys);
    atomic_store(result, qword_1001662A0);
  }
  return result;
}

unint64_t sub_1000C7490()
{
  unint64_t result;

  result = qword_1001664B0[0];
  if (!qword_1001664B0[0])
  {
    result = swift_getWitnessTable(&unk_100115980, &type metadata for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys);
    atomic_store(result, qword_1001664B0);
  }
  return result;
}

unint64_t sub_1000C74D8()
{
  unint64_t result;

  result = qword_1001666C0[0];
  if (!qword_1001666C0[0])
  {
    result = swift_getWitnessTable(&unk_100115A38, &type metadata for KMError.SystemExtensionWaitForTerminationCodingKeys);
    atomic_store(result, qword_1001666C0);
  }
  return result;
}

unint64_t sub_1000C7520()
{
  unint64_t result;

  result = qword_1001668D0[0];
  if (!qword_1001668D0[0])
  {
    result = swift_getWitnessTable(&unk_100115AF0, &type metadata for KMError.DextRecordErrorCodingKeys);
    atomic_store(result, qword_1001668D0);
  }
  return result;
}

unint64_t sub_1000C7568()
{
  unint64_t result;

  result = qword_100166AE0[0];
  if (!qword_100166AE0[0])
  {
    result = swift_getWitnessTable(&unk_100115BA8, &type metadata for KMError.PackageInstallerErrorCodingKeys);
    atomic_store(result, qword_100166AE0);
  }
  return result;
}

unint64_t sub_1000C75B0()
{
  unint64_t result;

  result = qword_100166CF0[0];
  if (!qword_100166CF0[0])
  {
    result = swift_getWitnessTable(&unk_100115C60, &type metadata for KMError.KnoxDownloaderErrorCodingKeys);
    atomic_store(result, qword_100166CF0);
  }
  return result;
}

unint64_t sub_1000C75F8()
{
  unint64_t result;

  result = qword_100166F00[0];
  if (!qword_100166F00[0])
  {
    result = swift_getWitnessTable(&unk_100115D18, &type metadata for KMError.KdkInstallerErrorCodingKeys);
    atomic_store(result, qword_100166F00);
  }
  return result;
}

unint64_t sub_1000C7640()
{
  unint64_t result;

  result = qword_100167110[0];
  if (!qword_100167110[0])
  {
    result = swift_getWitnessTable(&unk_100115DD0, &type metadata for KMError.MissingDeveloperKitCodingKeys);
    atomic_store(result, qword_100167110);
  }
  return result;
}

unint64_t sub_1000C7688()
{
  unint64_t result;

  result = qword_100167320[0];
  if (!qword_100167320[0])
  {
    result = swift_getWitnessTable(&unk_100115E88, &type metadata for KMError.FilesetErrorCodingKeys);
    atomic_store(result, qword_100167320);
  }
  return result;
}

unint64_t sub_1000C76D0()
{
  unint64_t result;

  result = qword_100167530[0];
  if (!qword_100167530[0])
  {
    result = swift_getWitnessTable(&unk_100115F40, &type metadata for KMError.DeveloperToolsErrorCodingKeys);
    atomic_store(result, qword_100167530);
  }
  return result;
}

unint64_t sub_1000C7718()
{
  unint64_t result;

  result = qword_100167740[0];
  if (!qword_100167740[0])
  {
    result = swift_getWitnessTable(&unk_100115FF8, &type metadata for KMError.UnsupportedErrorCodingKeys);
    atomic_store(result, qword_100167740);
  }
  return result;
}

unint64_t sub_1000C7760()
{
  unint64_t result;

  result = qword_100167950[0];
  if (!qword_100167950[0])
  {
    result = swift_getWitnessTable(&unk_1001160B0, &type metadata for KMError.MigrationErrorCodingKeys);
    atomic_store(result, qword_100167950);
  }
  return result;
}

unint64_t sub_1000C77A8()
{
  unint64_t result;

  result = qword_100167B60[0];
  if (!qword_100167B60[0])
  {
    result = swift_getWitnessTable(&unk_100116168, &type metadata for KMError.InExcludeListCodingKeys);
    atomic_store(result, qword_100167B60);
  }
  return result;
}

unint64_t sub_1000C77F0()
{
  unint64_t result;

  result = qword_100167D70[0];
  if (!qword_100167D70[0])
  {
    result = swift_getWitnessTable(&unk_100116220, &type metadata for KMError.DuplicateExtensionCodingKeys);
    atomic_store(result, qword_100167D70);
  }
  return result;
}

unint64_t sub_1000C7838()
{
  unint64_t result;

  result = qword_100167F80[0];
  if (!qword_100167F80[0])
  {
    result = swift_getWitnessTable(&unk_1001162D8, &type metadata for KMError.InKcgenOSCodingKeys);
    atomic_store(result, qword_100167F80);
  }
  return result;
}

unint64_t sub_1000C7880()
{
  unint64_t result;

  result = qword_100168190[0];
  if (!qword_100168190[0])
  {
    result = swift_getWitnessTable(&unk_100116390, &type metadata for KMError.RequiresRebootCodingKeys);
    atomic_store(result, qword_100168190);
  }
  return result;
}

unint64_t sub_1000C78C8()
{
  unint64_t result;

  result = qword_1001683A0[0];
  if (!qword_1001683A0[0])
  {
    result = swift_getWitnessTable(&unk_100116448, &type metadata for KMError.InternalErrorCodingKeys);
    atomic_store(result, qword_1001683A0);
  }
  return result;
}

unint64_t sub_1000C7910()
{
  unint64_t result;

  result = qword_1001685B0[0];
  if (!qword_1001685B0[0])
  {
    result = swift_getWitnessTable(&unk_100116500, &type metadata for KMError.InDarwinOSCodingKeys);
    atomic_store(result, qword_1001685B0);
  }
  return result;
}

unint64_t sub_1000C7958()
{
  unint64_t result;

  result = qword_1001687C0[0];
  if (!qword_1001687C0[0])
  {
    result = swift_getWitnessTable(&unk_1001165B8, &type metadata for KMError.InSafeBootCodingKeys);
    atomic_store(result, qword_1001687C0);
  }
  return result;
}

unint64_t sub_1000C79A0()
{
  unint64_t result;

  result = qword_1001689D0[0];
  if (!qword_1001689D0[0])
  {
    result = swift_getWitnessTable(&unk_100116670, &type metadata for KMError.ConsistencyCheckCodingKeys);
    atomic_store(result, qword_1001689D0);
  }
  return result;
}

unint64_t sub_1000C79E8()
{
  unint64_t result;

  result = qword_100168BE0[0];
  if (!qword_100168BE0[0])
  {
    result = swift_getWitnessTable(&unk_100116728, &type metadata for KMError.TriggerPanicMedicCodingKeys);
    atomic_store(result, qword_100168BE0);
  }
  return result;
}

unint64_t sub_1000C7A30()
{
  unint64_t result;

  result = qword_100168DF0;
  if (!qword_100168DF0)
  {
    result = swift_getWitnessTable(&unk_1001167E0, &type metadata for KMError.CodeSigningCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100168DF0);
  }
  return result;
}

unint64_t sub_1000C7A78()
{
  unint64_t result;

  result = qword_100169000[0];
  if (!qword_100169000[0])
  {
    result = swift_getWitnessTable(&unk_100116898, &type metadata for KMError.ExceptionListCodingKeys);
    atomic_store(result, qword_100169000);
  }
  return result;
}

unint64_t sub_1000C7AC0()
{
  unint64_t result;

  result = qword_100169210[0];
  if (!qword_100169210[0])
  {
    result = swift_getWitnessTable(&unk_100116950, &type metadata for KMError.BootPolicyCodingKeys);
    atomic_store(result, qword_100169210);
  }
  return result;
}

unint64_t sub_1000C7B08()
{
  unint64_t result;

  result = qword_100169420[0];
  if (!qword_100169420[0])
  {
    result = swift_getWitnessTable(&unk_100116A08, &type metadata for KMError.DiagnoseErrorCodingKeys);
    atomic_store(result, qword_100169420);
  }
  return result;
}

unint64_t sub_1000C7B50()
{
  unint64_t result;

  result = qword_100169630[0];
  if (!qword_100169630[0])
  {
    result = swift_getWitnessTable(&unk_100116AC0, &type metadata for KMError.DumpstateErrorCodingKeys);
    atomic_store(result, qword_100169630);
  }
  return result;
}

unint64_t sub_1000C7B98()
{
  unint64_t result;

  result = qword_100169840[0];
  if (!qword_100169840[0])
  {
    result = swift_getWitnessTable(&unk_100116B78, &type metadata for KMError.RunninglistErrorCodingKeys);
    atomic_store(result, qword_100169840);
  }
  return result;
}

unint64_t sub_1000C7BE0()
{
  unint64_t result;

  result = qword_100169A50[0];
  if (!qword_100169A50[0])
  {
    result = swift_getWitnessTable(&unk_100116C30, &type metadata for KMError.ListErrorCodingKeys);
    atomic_store(result, qword_100169A50);
  }
  return result;
}

unint64_t sub_1000C7C28()
{
  unint64_t result;

  result = qword_100169C60[0];
  if (!qword_100169C60[0])
  {
    result = swift_getWitnessTable(&unk_100116CE8, &type metadata for KMError.UnloadCodingKeys);
    atomic_store(result, qword_100169C60);
  }
  return result;
}

unint64_t sub_1000C7C70()
{
  unint64_t result;

  result = qword_100169E70[0];
  if (!qword_100169E70[0])
  {
    result = swift_getWitnessTable(&unk_100116DA0, &type metadata for KMError.InvalidKeyCodingKeys);
    atomic_store(result, qword_100169E70);
  }
  return result;
}

unint64_t sub_1000C7CB8()
{
  unint64_t result;

  result = qword_10016A080[0];
  if (!qword_10016A080[0])
  {
    result = swift_getWitnessTable(&unk_100116E58, &type metadata for KMError.InsufficientPermissionsCodingKeys);
    atomic_store(result, qword_10016A080);
  }
  return result;
}

unint64_t sub_1000C7D00()
{
  unint64_t result;

  result = qword_10016A290[0];
  if (!qword_10016A290[0])
  {
    result = swift_getWitnessTable(&unk_100116F10, &type metadata for KMError.SubprocessFailedCodingKeys);
    atomic_store(result, qword_10016A290);
  }
  return result;
}

unint64_t sub_1000C7D48()
{
  unint64_t result;

  result = qword_10016A4A0[0];
  if (!qword_10016A4A0[0])
  {
    result = swift_getWitnessTable(&unk_100116FC8, &type metadata for KMError.LoggingErrorCodingKeys);
    atomic_store(result, qword_10016A4A0);
  }
  return result;
}

unint64_t sub_1000C7D90()
{
  unint64_t result;

  result = qword_10016A6B0[0];
  if (!qword_10016A6B0[0])
  {
    result = swift_getWitnessTable(&unk_100117080, &type metadata for KMError.ConfigurationCodingKeys);
    atomic_store(result, qword_10016A6B0);
  }
  return result;
}

unint64_t sub_1000C7DD8()
{
  unint64_t result;

  result = qword_10016A8C0[0];
  if (!qword_10016A8C0[0])
  {
    result = swift_getWitnessTable(&unk_100117138, &type metadata for KMError.SandboxCodingKeys);
    atomic_store(result, qword_10016A8C0);
  }
  return result;
}

unint64_t sub_1000C7E20()
{
  unint64_t result;

  result = qword_10016AAD0[0];
  if (!qword_10016AAD0[0])
  {
    result = swift_getWitnessTable(&unk_1001171F0, &type metadata for KMError.AuthenticationCodingKeys);
    atomic_store(result, qword_10016AAD0);
  }
  return result;
}

unint64_t sub_1000C7E68()
{
  unint64_t result;

  result = qword_10016ACE0[0];
  if (!qword_10016ACE0[0])
  {
    result = swift_getWitnessTable(&unk_1001172A8, &type metadata for KMError.UnapprovedToLoadMultipleCodingKeys);
    atomic_store(result, qword_10016ACE0);
  }
  return result;
}

unint64_t sub_1000C7EB0()
{
  unint64_t result;

  result = qword_10016AEF0[0];
  if (!qword_10016AEF0[0])
  {
    result = swift_getWitnessTable(&unk_100117360, &type metadata for KMError.UnapprovedToLoadCodingKeys);
    atomic_store(result, qword_10016AEF0);
  }
  return result;
}

unint64_t sub_1000C7EF8()
{
  unint64_t result;

  result = qword_10016B100[0];
  if (!qword_10016B100[0])
  {
    result = swift_getWitnessTable(&unk_100117418, &type metadata for KMError.SystemPolicyCodingKeys);
    atomic_store(result, qword_10016B100);
  }
  return result;
}

unint64_t sub_1000C7F40()
{
  unint64_t result;

  result = qword_10016B310[0];
  if (!qword_10016B310[0])
  {
    result = swift_getWitnessTable(&unk_1001174D0, &type metadata for KMError.StagingCodingKeys);
    atomic_store(result, qword_10016B310);
  }
  return result;
}

unint64_t sub_1000C7F88()
{
  unint64_t result;

  result = qword_10016B520[0];
  if (!qword_10016B520[0])
  {
    result = swift_getWitnessTable(&unk_100117588, &type metadata for KMError.CacheBuildingCodingKeys);
    atomic_store(result, qword_10016B520);
  }
  return result;
}

unint64_t sub_1000C7FD0()
{
  unint64_t result;

  result = qword_10016B730[0];
  if (!qword_10016B730[0])
  {
    result = swift_getWitnessTable(&unk_100117640, &type metadata for KMError.FutureVersionCodingKeys);
    atomic_store(result, qword_10016B730);
  }
  return result;
}

unint64_t sub_1000C8018()
{
  unint64_t result;

  result = qword_10016B940[0];
  if (!qword_10016B940[0])
  {
    result = swift_getWitnessTable(&unk_1001176F8, &type metadata for KMError.BinaryParsingCodingKeys);
    atomic_store(result, qword_10016B940);
  }
  return result;
}

unint64_t sub_1000C8060()
{
  unint64_t result;

  result = qword_10016BB50[0];
  if (!qword_10016BB50[0])
  {
    result = swift_getWitnessTable(&unk_1001177B0, &type metadata for KMError.NvramAccessCodingKeys);
    atomic_store(result, qword_10016BB50);
  }
  return result;
}

unint64_t sub_1000C80A8()
{
  unint64_t result;

  result = qword_10016BD60[0];
  if (!qword_10016BD60[0])
  {
    result = swift_getWitnessTable(&unk_100117868, &type metadata for KMError.RecoveryCodingKeys);
    atomic_store(result, qword_10016BD60);
  }
  return result;
}

unint64_t sub_1000C80F0()
{
  unint64_t result;

  result = qword_10016BF70[0];
  if (!qword_10016BF70[0])
  {
    result = swift_getWitnessTable(&unk_100117920, &type metadata for KMError.FlowAccessCodingKeys);
    atomic_store(result, qword_10016BF70);
  }
  return result;
}

unint64_t sub_1000C8138()
{
  unint64_t result;

  result = qword_10016C180[0];
  if (!qword_10016C180[0])
  {
    result = swift_getWitnessTable(&unk_1001179D8, &type metadata for KMError.DiskAccessCodingKeys);
    atomic_store(result, qword_10016C180);
  }
  return result;
}

unint64_t sub_1000C8180()
{
  unint64_t result;

  result = qword_10016C390[0];
  if (!qword_10016C390[0])
  {
    result = swift_getWitnessTable(&unk_100117A90, &type metadata for KMError.FilesystemCodingKeys);
    atomic_store(result, qword_10016C390);
  }
  return result;
}

unint64_t sub_1000C81C8()
{
  unint64_t result;

  result = qword_10016C5A0[0];
  if (!qword_10016C5A0[0])
  {
    result = swift_getWitnessTable(&unk_100117B48, &type metadata for KMError.InvalidPropertiesCodingKeys);
    atomic_store(result, qword_10016C5A0);
  }
  return result;
}

unint64_t sub_1000C8210()
{
  unint64_t result;

  result = qword_10016C7B0[0];
  if (!qword_10016C7B0[0])
  {
    result = swift_getWitnessTable(&unk_100117C00, &type metadata for KMError.ValidationCodingKeys);
    atomic_store(result, qword_10016C7B0);
  }
  return result;
}

unint64_t sub_1000C8258()
{
  unint64_t result;

  result = qword_10016C9C0[0];
  if (!qword_10016C9C0[0])
  {
    result = swift_getWitnessTable(&unk_100117CB8, &type metadata for KMError.IncompatibleArchitectureCodingKeys);
    atomic_store(result, qword_10016C9C0);
  }
  return result;
}

unint64_t sub_1000C82A0()
{
  unint64_t result;

  result = qword_10016CBD0[0];
  if (!qword_10016CBD0[0])
  {
    result = swift_getWitnessTable(&unk_100117D70, &type metadata for KMError.IncompatibleVersionCodingKeys);
    atomic_store(result, qword_10016CBD0);
  }
  return result;
}

unint64_t sub_1000C82E8()
{
  unint64_t result;

  result = qword_10016CDE0[0];
  if (!qword_10016CDE0[0])
  {
    result = swift_getWitnessTable(&unk_100117E28, &type metadata for KMError.MissingDependencyRequestCodingKeys);
    atomic_store(result, qword_10016CDE0);
  }
  return result;
}

unint64_t sub_1000C8330()
{
  unint64_t result;

  result = qword_10016CFF0[0];
  if (!qword_10016CFF0[0])
  {
    result = swift_getWitnessTable(&unk_100117EE0, &type metadata for KMError.DependencyResolutionCodingKeys);
    atomic_store(result, qword_10016CFF0);
  }
  return result;
}

unint64_t sub_1000C8378()
{
  unint64_t result;

  result = qword_10016D200[0];
  if (!qword_10016D200[0])
  {
    result = swift_getWitnessTable(&unk_100117F98, &type metadata for KMError.RealizingCodingKeys);
    atomic_store(result, qword_10016D200);
  }
  return result;
}

unint64_t sub_1000C83C0()
{
  unint64_t result;

  result = qword_10016D410[0];
  if (!qword_10016D410[0])
  {
    result = swift_getWitnessTable(&unk_100118050, &type metadata for KMError.KernelCollectionBuildCodingKeys);
    atomic_store(result, qword_10016D410);
  }
  return result;
}

unint64_t sub_1000C8408()
{
  unint64_t result;

  result = qword_10016D620[0];
  if (!qword_10016D620[0])
  {
    result = swift_getWitnessTable(&unk_100118108, &type metadata for KMError.NotFoundCodingKeys);
    atomic_store(result, qword_10016D620);
  }
  return result;
}

unint64_t sub_1000C8450()
{
  unint64_t result;

  result = qword_10016D830[0];
  if (!qword_10016D830[0])
  {
    result = swift_getWitnessTable(&unk_1001181C0, &type metadata for KMError.InvalidArgumentCodingKeys);
    atomic_store(result, qword_10016D830);
  }
  return result;
}

unint64_t sub_1000C8498()
{
  unint64_t result;

  result = qword_10016DB40[0];
  if (!qword_10016DB40[0])
  {
    result = swift_getWitnessTable(&unk_1001182C8, &type metadata for KMError.ResourceLoadCodingKeys);
    atomic_store(result, qword_10016DB40);
  }
  return result;
}

unint64_t sub_1000C84E0()
{
  unint64_t result;

  result = qword_10016DD50[0];
  if (!qword_10016DD50[0])
  {
    result = swift_getWitnessTable(&unk_100118380, &type metadata for KMError.CollectionLinkageCodingKeys);
    atomic_store(result, qword_10016DD50);
  }
  return result;
}

unint64_t sub_1000C8528()
{
  unint64_t result;

  result = qword_10016DF60[0];
  if (!qword_10016DF60[0])
  {
    result = swift_getWitnessTable(&unk_100118438, &type metadata for KMError.CollectionLoadCodingKeys);
    atomic_store(result, qword_10016DF60);
  }
  return result;
}

unint64_t sub_1000C8570()
{
  unint64_t result;

  result = qword_10016E170[0];
  if (!qword_10016E170[0])
  {
    result = swift_getWitnessTable(&unk_1001184F0, &type metadata for KMError.ExtensionLoadCodingKeys);
    atomic_store(result, qword_10016E170);
  }
  return result;
}

unint64_t sub_1000C85B8()
{
  unint64_t result;

  result = qword_10016E380[0];
  if (!qword_10016E380[0])
  {
    result = swift_getWitnessTable(&unk_1001185A8, &type metadata for KMError.DriverKitLaunchCodingKeys);
    atomic_store(result, qword_10016E380);
  }
  return result;
}

unint64_t sub_1000C8600()
{
  unint64_t result;

  result = qword_10016E590[0];
  if (!qword_10016E590[0])
  {
    result = swift_getWitnessTable(&unk_100118660, &type metadata for KMError.KernelRequestCodingKeys);
    atomic_store(result, qword_10016E590);
  }
  return result;
}

unint64_t sub_1000C8648()
{
  unint64_t result;

  result = qword_10016E7A0[0];
  if (!qword_10016E7A0[0])
  {
    result = swift_getWitnessTable(&unk_100118718, &type metadata for KMError.KernelCommunicationCodingKeys);
    atomic_store(result, qword_10016E7A0);
  }
  return result;
}

unint64_t sub_1000C8690()
{
  unint64_t result;

  result = qword_10016E9B0[0];
  if (!qword_10016E9B0[0])
  {
    result = swift_getWitnessTable(&unk_1001187D0, &type metadata for KMError.DeserializationCodingKeys);
    atomic_store(result, qword_10016E9B0);
  }
  return result;
}

unint64_t sub_1000C86D8()
{
  unint64_t result;

  result = qword_10016EBC0[0];
  if (!qword_10016EBC0[0])
  {
    result = swift_getWitnessTable(&unk_100118888, &type metadata for KMError.MultipleCodingKeys);
    atomic_store(result, qword_10016EBC0);
  }
  return result;
}

unint64_t sub_1000C8720()
{
  unint64_t result;

  result = qword_10016EDD0[0];
  if (!qword_10016EDD0[0])
  {
    result = swift_getWitnessTable(&unk_100118940, &type metadata for KMError.CodingKeys);
    atomic_store(result, qword_10016EDD0);
  }
  return result;
}

unint64_t sub_1000C8768()
{
  unint64_t result;

  result = qword_10016EEE0;
  if (!qword_10016EEE0)
  {
    result = swift_getWitnessTable(&unk_1001187F8, &type metadata for KMError.MultipleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016EEE0);
  }
  return result;
}

unint64_t sub_1000C87B0()
{
  unint64_t result;

  result = qword_10016EEE8[0];
  if (!qword_10016EEE8[0])
  {
    result = swift_getWitnessTable(&unk_100118820, &type metadata for KMError.MultipleCodingKeys);
    atomic_store(result, qword_10016EEE8);
  }
  return result;
}

unint64_t sub_1000C87F8()
{
  unint64_t result;

  result = qword_10016EF70;
  if (!qword_10016EF70)
  {
    result = swift_getWitnessTable(&unk_100118740, &type metadata for KMError.DeserializationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016EF70);
  }
  return result;
}

unint64_t sub_1000C8840()
{
  unint64_t result;

  result = qword_10016EF78;
  if (!qword_10016EF78)
  {
    result = swift_getWitnessTable(&unk_100118768, &type metadata for KMError.DeserializationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016EF78);
  }
  return result;
}

unint64_t sub_1000C8888()
{
  unint64_t result;

  result = qword_10016F000;
  if (!qword_10016F000)
  {
    result = swift_getWitnessTable(&unk_100118688, &type metadata for KMError.KernelCommunicationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F000);
  }
  return result;
}

unint64_t sub_1000C88D0()
{
  unint64_t result;

  result = qword_10016F008[0];
  if (!qword_10016F008[0])
  {
    result = swift_getWitnessTable(&unk_1001186B0, &type metadata for KMError.KernelCommunicationCodingKeys);
    atomic_store(result, qword_10016F008);
  }
  return result;
}

unint64_t sub_1000C8918()
{
  unint64_t result;

  result = qword_10016F090;
  if (!qword_10016F090)
  {
    result = swift_getWitnessTable(&unk_1001185D0, &type metadata for KMError.KernelRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F090);
  }
  return result;
}

unint64_t sub_1000C8960()
{
  unint64_t result;

  result = qword_10016F098[0];
  if (!qword_10016F098[0])
  {
    result = swift_getWitnessTable(&unk_1001185F8, &type metadata for KMError.KernelRequestCodingKeys);
    atomic_store(result, qword_10016F098);
  }
  return result;
}

unint64_t sub_1000C89A8()
{
  unint64_t result;

  result = qword_10016F120;
  if (!qword_10016F120)
  {
    result = swift_getWitnessTable(&unk_100118518, &type metadata for KMError.DriverKitLaunchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F120);
  }
  return result;
}

unint64_t sub_1000C89F0()
{
  unint64_t result;

  result = qword_10016F128[0];
  if (!qword_10016F128[0])
  {
    result = swift_getWitnessTable(&unk_100118540, &type metadata for KMError.DriverKitLaunchCodingKeys);
    atomic_store(result, qword_10016F128);
  }
  return result;
}

unint64_t sub_1000C8A38()
{
  unint64_t result;

  result = qword_10016F1B0;
  if (!qword_10016F1B0)
  {
    result = swift_getWitnessTable(&unk_100118460, &type metadata for KMError.ExtensionLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F1B0);
  }
  return result;
}

unint64_t sub_1000C8A80()
{
  unint64_t result;

  result = qword_10016F1B8[0];
  if (!qword_10016F1B8[0])
  {
    result = swift_getWitnessTable(&unk_100118488, &type metadata for KMError.ExtensionLoadCodingKeys);
    atomic_store(result, qword_10016F1B8);
  }
  return result;
}

unint64_t sub_1000C8AC8()
{
  unint64_t result;

  result = qword_10016F240;
  if (!qword_10016F240)
  {
    result = swift_getWitnessTable(&unk_1001183A8, &type metadata for KMError.CollectionLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F240);
  }
  return result;
}

unint64_t sub_1000C8B10()
{
  unint64_t result;

  result = qword_10016F248[0];
  if (!qword_10016F248[0])
  {
    result = swift_getWitnessTable(&unk_1001183D0, &type metadata for KMError.CollectionLoadCodingKeys);
    atomic_store(result, qword_10016F248);
  }
  return result;
}

unint64_t sub_1000C8B58()
{
  unint64_t result;

  result = qword_10016F2D0;
  if (!qword_10016F2D0)
  {
    result = swift_getWitnessTable(&unk_1001182F0, &type metadata for KMError.CollectionLinkageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F2D0);
  }
  return result;
}

unint64_t sub_1000C8BA0()
{
  unint64_t result;

  result = qword_10016F2D8[0];
  if (!qword_10016F2D8[0])
  {
    result = swift_getWitnessTable(&unk_100118318, &type metadata for KMError.CollectionLinkageCodingKeys);
    atomic_store(result, qword_10016F2D8);
  }
  return result;
}

unint64_t sub_1000C8BE8()
{
  unint64_t result;

  result = qword_10016F360;
  if (!qword_10016F360)
  {
    result = swift_getWitnessTable(&unk_100118238, &type metadata for KMError.ResourceLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F360);
  }
  return result;
}

unint64_t sub_1000C8C30()
{
  unint64_t result;

  result = qword_10016F368[0];
  if (!qword_10016F368[0])
  {
    result = swift_getWitnessTable(&unk_100118260, &type metadata for KMError.ResourceLoadCodingKeys);
    atomic_store(result, qword_10016F368);
  }
  return result;
}

unint64_t sub_1000C8C78()
{
  unint64_t result;

  result = qword_10016F3F0;
  if (!qword_10016F3F0)
  {
    result = swift_getWitnessTable(&unk_1001181E8, &type metadata for KMError.SerializationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F3F0);
  }
  return result;
}

unint64_t sub_1000C8CC0()
{
  unint64_t result;

  result = qword_10016F3F8[0];
  if (!qword_10016F3F8[0])
  {
    result = swift_getWitnessTable(&unk_100118210, &type metadata for KMError.SerializationCodingKeys);
    atomic_store(result, qword_10016F3F8);
  }
  return result;
}

unint64_t sub_1000C8D08()
{
  unint64_t result;

  result = qword_10016F480;
  if (!qword_10016F480)
  {
    result = swift_getWitnessTable(&unk_100118130, &type metadata for KMError.InvalidArgumentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F480);
  }
  return result;
}

unint64_t sub_1000C8D50()
{
  unint64_t result;

  result = qword_10016F488[0];
  if (!qword_10016F488[0])
  {
    result = swift_getWitnessTable(&unk_100118158, &type metadata for KMError.InvalidArgumentCodingKeys);
    atomic_store(result, qword_10016F488);
  }
  return result;
}

unint64_t sub_1000C8D98()
{
  unint64_t result;

  result = qword_10016F510;
  if (!qword_10016F510)
  {
    result = swift_getWitnessTable(&unk_100118078, &type metadata for KMError.NotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F510);
  }
  return result;
}

unint64_t sub_1000C8DE0()
{
  unint64_t result;

  result = qword_10016F518[0];
  if (!qword_10016F518[0])
  {
    result = swift_getWitnessTable(&unk_1001180A0, &type metadata for KMError.NotFoundCodingKeys);
    atomic_store(result, qword_10016F518);
  }
  return result;
}

unint64_t sub_1000C8E28()
{
  unint64_t result;

  result = qword_10016F5A0;
  if (!qword_10016F5A0)
  {
    result = swift_getWitnessTable(&unk_100117FC0, &type metadata for KMError.KernelCollectionBuildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F5A0);
  }
  return result;
}

unint64_t sub_1000C8E70()
{
  unint64_t result;

  result = qword_10016F5A8[0];
  if (!qword_10016F5A8[0])
  {
    result = swift_getWitnessTable(&unk_100117FE8, &type metadata for KMError.KernelCollectionBuildCodingKeys);
    atomic_store(result, qword_10016F5A8);
  }
  return result;
}

unint64_t sub_1000C8EB8()
{
  unint64_t result;

  result = qword_10016F630;
  if (!qword_10016F630)
  {
    result = swift_getWitnessTable(&unk_100117F08, &type metadata for KMError.RealizingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F630);
  }
  return result;
}

unint64_t sub_1000C8F00()
{
  unint64_t result;

  result = qword_10016F638[0];
  if (!qword_10016F638[0])
  {
    result = swift_getWitnessTable(&unk_100117F30, &type metadata for KMError.RealizingCodingKeys);
    atomic_store(result, qword_10016F638);
  }
  return result;
}

unint64_t sub_1000C8F48()
{
  unint64_t result;

  result = qword_10016F6C0;
  if (!qword_10016F6C0)
  {
    result = swift_getWitnessTable(&unk_100117E50, &type metadata for KMError.DependencyResolutionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F6C0);
  }
  return result;
}

unint64_t sub_1000C8F90()
{
  unint64_t result;

  result = qword_10016F6C8[0];
  if (!qword_10016F6C8[0])
  {
    result = swift_getWitnessTable(&unk_100117E78, &type metadata for KMError.DependencyResolutionCodingKeys);
    atomic_store(result, qword_10016F6C8);
  }
  return result;
}

unint64_t sub_1000C8FD8()
{
  unint64_t result;

  result = qword_10016F750;
  if (!qword_10016F750)
  {
    result = swift_getWitnessTable(&unk_100117D98, &type metadata for KMError.MissingDependencyRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F750);
  }
  return result;
}

unint64_t sub_1000C9020()
{
  unint64_t result;

  result = qword_10016F758[0];
  if (!qword_10016F758[0])
  {
    result = swift_getWitnessTable(&unk_100117DC0, &type metadata for KMError.MissingDependencyRequestCodingKeys);
    atomic_store(result, qword_10016F758);
  }
  return result;
}

unint64_t sub_1000C9068()
{
  unint64_t result;

  result = qword_10016F7E0;
  if (!qword_10016F7E0)
  {
    result = swift_getWitnessTable(&unk_100117CE0, &type metadata for KMError.IncompatibleVersionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F7E0);
  }
  return result;
}

unint64_t sub_1000C90B0()
{
  unint64_t result;

  result = qword_10016F7E8[0];
  if (!qword_10016F7E8[0])
  {
    result = swift_getWitnessTable(&unk_100117D08, &type metadata for KMError.IncompatibleVersionCodingKeys);
    atomic_store(result, qword_10016F7E8);
  }
  return result;
}

unint64_t sub_1000C90F8()
{
  unint64_t result;

  result = qword_10016F870;
  if (!qword_10016F870)
  {
    result = swift_getWitnessTable(&unk_100117C28, &type metadata for KMError.IncompatibleArchitectureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F870);
  }
  return result;
}

unint64_t sub_1000C9140()
{
  unint64_t result;

  result = qword_10016F878;
  if (!qword_10016F878)
  {
    result = swift_getWitnessTable(&unk_100117C50, &type metadata for KMError.IncompatibleArchitectureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F878);
  }
  return result;
}

unint64_t sub_1000C9188()
{
  unint64_t result;

  result = qword_10016F900;
  if (!qword_10016F900)
  {
    result = swift_getWitnessTable(&unk_100117B70, &type metadata for KMError.ValidationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F900);
  }
  return result;
}

unint64_t sub_1000C91D0()
{
  unint64_t result;

  result = qword_10016F908[0];
  if (!qword_10016F908[0])
  {
    result = swift_getWitnessTable(&unk_100117B98, &type metadata for KMError.ValidationCodingKeys);
    atomic_store(result, qword_10016F908);
  }
  return result;
}

unint64_t sub_1000C9218()
{
  unint64_t result;

  result = qword_10016F990;
  if (!qword_10016F990)
  {
    result = swift_getWitnessTable(&unk_100117AB8, &type metadata for KMError.InvalidPropertiesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016F990);
  }
  return result;
}

unint64_t sub_1000C9260()
{
  unint64_t result;

  result = qword_10016F998[0];
  if (!qword_10016F998[0])
  {
    result = swift_getWitnessTable(&unk_100117AE0, &type metadata for KMError.InvalidPropertiesCodingKeys);
    atomic_store(result, qword_10016F998);
  }
  return result;
}

unint64_t sub_1000C92A8()
{
  unint64_t result;

  result = qword_10016FA20;
  if (!qword_10016FA20)
  {
    result = swift_getWitnessTable(&unk_100117A00, &type metadata for KMError.FilesystemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FA20);
  }
  return result;
}

unint64_t sub_1000C92F0()
{
  unint64_t result;

  result = qword_10016FA28[0];
  if (!qword_10016FA28[0])
  {
    result = swift_getWitnessTable(&unk_100117A28, &type metadata for KMError.FilesystemCodingKeys);
    atomic_store(result, qword_10016FA28);
  }
  return result;
}

unint64_t sub_1000C9338()
{
  unint64_t result;

  result = qword_10016FAB0;
  if (!qword_10016FAB0)
  {
    result = swift_getWitnessTable(&unk_100117948, &type metadata for KMError.DiskAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FAB0);
  }
  return result;
}

unint64_t sub_1000C9380()
{
  unint64_t result;

  result = qword_10016FAB8[0];
  if (!qword_10016FAB8[0])
  {
    result = swift_getWitnessTable(&unk_100117970, &type metadata for KMError.DiskAccessCodingKeys);
    atomic_store(result, qword_10016FAB8);
  }
  return result;
}

unint64_t sub_1000C93C8()
{
  unint64_t result;

  result = qword_10016FB40;
  if (!qword_10016FB40)
  {
    result = swift_getWitnessTable(&unk_100117890, &type metadata for KMError.FlowAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FB40);
  }
  return result;
}

unint64_t sub_1000C9410()
{
  unint64_t result;

  result = qword_10016FB48[0];
  if (!qword_10016FB48[0])
  {
    result = swift_getWitnessTable(&unk_1001178B8, &type metadata for KMError.FlowAccessCodingKeys);
    atomic_store(result, qword_10016FB48);
  }
  return result;
}

unint64_t sub_1000C9458()
{
  unint64_t result;

  result = qword_10016FBD0;
  if (!qword_10016FBD0)
  {
    result = swift_getWitnessTable(&unk_1001177D8, &type metadata for KMError.RecoveryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FBD0);
  }
  return result;
}

unint64_t sub_1000C94A0()
{
  unint64_t result;

  result = qword_10016FBD8[0];
  if (!qword_10016FBD8[0])
  {
    result = swift_getWitnessTable(&unk_100117800, &type metadata for KMError.RecoveryCodingKeys);
    atomic_store(result, qword_10016FBD8);
  }
  return result;
}

unint64_t sub_1000C94E8()
{
  unint64_t result;

  result = qword_10016FC60;
  if (!qword_10016FC60)
  {
    result = swift_getWitnessTable(&unk_100117720, &type metadata for KMError.NvramAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FC60);
  }
  return result;
}

unint64_t sub_1000C9530()
{
  unint64_t result;

  result = qword_10016FC68[0];
  if (!qword_10016FC68[0])
  {
    result = swift_getWitnessTable(&unk_100117748, &type metadata for KMError.NvramAccessCodingKeys);
    atomic_store(result, qword_10016FC68);
  }
  return result;
}

unint64_t sub_1000C9578()
{
  unint64_t result;

  result = qword_10016FCF0;
  if (!qword_10016FCF0)
  {
    result = swift_getWitnessTable(&unk_100117668, &type metadata for KMError.BinaryParsingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FCF0);
  }
  return result;
}

unint64_t sub_1000C95C0()
{
  unint64_t result;

  result = qword_10016FCF8[0];
  if (!qword_10016FCF8[0])
  {
    result = swift_getWitnessTable(&unk_100117690, &type metadata for KMError.BinaryParsingCodingKeys);
    atomic_store(result, qword_10016FCF8);
  }
  return result;
}

unint64_t sub_1000C9608()
{
  unint64_t result;

  result = qword_10016FD80;
  if (!qword_10016FD80)
  {
    result = swift_getWitnessTable(&unk_1001175B0, &type metadata for KMError.FutureVersionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FD80);
  }
  return result;
}

unint64_t sub_1000C9650()
{
  unint64_t result;

  result = qword_10016FD88[0];
  if (!qword_10016FD88[0])
  {
    result = swift_getWitnessTable(&unk_1001175D8, &type metadata for KMError.FutureVersionCodingKeys);
    atomic_store(result, qword_10016FD88);
  }
  return result;
}

unint64_t sub_1000C9698()
{
  unint64_t result;

  result = qword_10016FE10;
  if (!qword_10016FE10)
  {
    result = swift_getWitnessTable(&unk_1001174F8, &type metadata for KMError.CacheBuildingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FE10);
  }
  return result;
}

unint64_t sub_1000C96E0()
{
  unint64_t result;

  result = qword_10016FE18[0];
  if (!qword_10016FE18[0])
  {
    result = swift_getWitnessTable(&unk_100117520, &type metadata for KMError.CacheBuildingCodingKeys);
    atomic_store(result, qword_10016FE18);
  }
  return result;
}

unint64_t sub_1000C9728()
{
  unint64_t result;

  result = qword_10016FEA0;
  if (!qword_10016FEA0)
  {
    result = swift_getWitnessTable(&unk_100117440, &type metadata for KMError.StagingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FEA0);
  }
  return result;
}

unint64_t sub_1000C9770()
{
  unint64_t result;

  result = qword_10016FEA8[0];
  if (!qword_10016FEA8[0])
  {
    result = swift_getWitnessTable(&unk_100117468, &type metadata for KMError.StagingCodingKeys);
    atomic_store(result, qword_10016FEA8);
  }
  return result;
}

unint64_t sub_1000C97B8()
{
  unint64_t result;

  result = qword_10016FF30;
  if (!qword_10016FF30)
  {
    result = swift_getWitnessTable(&unk_100117388, &type metadata for KMError.SystemPolicyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FF30);
  }
  return result;
}

unint64_t sub_1000C9800()
{
  unint64_t result;

  result = qword_10016FF38[0];
  if (!qword_10016FF38[0])
  {
    result = swift_getWitnessTable(&unk_1001173B0, &type metadata for KMError.SystemPolicyCodingKeys);
    atomic_store(result, qword_10016FF38);
  }
  return result;
}

unint64_t sub_1000C9848()
{
  unint64_t result;

  result = qword_10016FFC0;
  if (!qword_10016FFC0)
  {
    result = swift_getWitnessTable(&unk_1001172D0, &type metadata for KMError.UnapprovedToLoadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10016FFC0);
  }
  return result;
}

unint64_t sub_1000C9890()
{
  unint64_t result;

  result = qword_10016FFC8[0];
  if (!qword_10016FFC8[0])
  {
    result = swift_getWitnessTable(&unk_1001172F8, &type metadata for KMError.UnapprovedToLoadCodingKeys);
    atomic_store(result, qword_10016FFC8);
  }
  return result;
}

unint64_t sub_1000C98D8()
{
  unint64_t result;

  result = qword_100170050;
  if (!qword_100170050)
  {
    result = swift_getWitnessTable(&unk_100117218, &type metadata for KMError.UnapprovedToLoadMultipleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170050);
  }
  return result;
}

unint64_t sub_1000C9920()
{
  unint64_t result;

  result = qword_100170058[0];
  if (!qword_100170058[0])
  {
    result = swift_getWitnessTable(&unk_100117240, &type metadata for KMError.UnapprovedToLoadMultipleCodingKeys);
    atomic_store(result, qword_100170058);
  }
  return result;
}

unint64_t sub_1000C9968()
{
  unint64_t result;

  result = qword_1001700E0;
  if (!qword_1001700E0)
  {
    result = swift_getWitnessTable(&unk_100117160, &type metadata for KMError.AuthenticationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001700E0);
  }
  return result;
}

unint64_t sub_1000C99B0()
{
  unint64_t result;

  result = qword_1001700E8[0];
  if (!qword_1001700E8[0])
  {
    result = swift_getWitnessTable(&unk_100117188, &type metadata for KMError.AuthenticationCodingKeys);
    atomic_store(result, qword_1001700E8);
  }
  return result;
}

unint64_t sub_1000C99F8()
{
  unint64_t result;

  result = qword_100170170;
  if (!qword_100170170)
  {
    result = swift_getWitnessTable(&unk_1001170A8, &type metadata for KMError.SandboxCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170170);
  }
  return result;
}

unint64_t sub_1000C9A40()
{
  unint64_t result;

  result = qword_100170178;
  if (!qword_100170178)
  {
    result = swift_getWitnessTable(&unk_1001170D0, &type metadata for KMError.SandboxCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170178);
  }
  return result;
}

unint64_t sub_1000C9A88()
{
  unint64_t result;

  result = qword_100170200;
  if (!qword_100170200)
  {
    result = swift_getWitnessTable(&unk_100116FF0, &type metadata for KMError.ConfigurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170200);
  }
  return result;
}

unint64_t sub_1000C9AD0()
{
  unint64_t result;

  result = qword_100170208[0];
  if (!qword_100170208[0])
  {
    result = swift_getWitnessTable(&unk_100117018, &type metadata for KMError.ConfigurationCodingKeys);
    atomic_store(result, qword_100170208);
  }
  return result;
}

unint64_t sub_1000C9B18()
{
  unint64_t result;

  result = qword_100170290;
  if (!qword_100170290)
  {
    result = swift_getWitnessTable(&unk_100116F38, &type metadata for KMError.LoggingErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170290);
  }
  return result;
}

unint64_t sub_1000C9B60()
{
  unint64_t result;

  result = qword_100170298[0];
  if (!qword_100170298[0])
  {
    result = swift_getWitnessTable(&unk_100116F60, &type metadata for KMError.LoggingErrorCodingKeys);
    atomic_store(result, qword_100170298);
  }
  return result;
}

unint64_t sub_1000C9BA8()
{
  unint64_t result;

  result = qword_100170320;
  if (!qword_100170320)
  {
    result = swift_getWitnessTable(&unk_100116E80, &type metadata for KMError.SubprocessFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170320);
  }
  return result;
}

unint64_t sub_1000C9BF0()
{
  unint64_t result;

  result = qword_100170328[0];
  if (!qword_100170328[0])
  {
    result = swift_getWitnessTable(&unk_100116EA8, &type metadata for KMError.SubprocessFailedCodingKeys);
    atomic_store(result, qword_100170328);
  }
  return result;
}

unint64_t sub_1000C9C38()
{
  unint64_t result;

  result = qword_1001703B0;
  if (!qword_1001703B0)
  {
    result = swift_getWitnessTable(&unk_100116DC8, &type metadata for KMError.InsufficientPermissionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001703B0);
  }
  return result;
}

unint64_t sub_1000C9C80()
{
  unint64_t result;

  result = qword_1001703B8[0];
  if (!qword_1001703B8[0])
  {
    result = swift_getWitnessTable(&unk_100116DF0, &type metadata for KMError.InsufficientPermissionsCodingKeys);
    atomic_store(result, qword_1001703B8);
  }
  return result;
}

unint64_t sub_1000C9CC8()
{
  unint64_t result;

  result = qword_100170440;
  if (!qword_100170440)
  {
    result = swift_getWitnessTable(&unk_100116D10, &type metadata for KMError.InvalidKeyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170440);
  }
  return result;
}

unint64_t sub_1000C9D10()
{
  unint64_t result;

  result = qword_100170448[0];
  if (!qword_100170448[0])
  {
    result = swift_getWitnessTable(&unk_100116D38, &type metadata for KMError.InvalidKeyCodingKeys);
    atomic_store(result, qword_100170448);
  }
  return result;
}

unint64_t sub_1000C9D58()
{
  unint64_t result;

  result = qword_1001704D0;
  if (!qword_1001704D0)
  {
    result = swift_getWitnessTable(&unk_100116C58, &type metadata for KMError.UnloadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001704D0);
  }
  return result;
}

unint64_t sub_1000C9DA0()
{
  unint64_t result;

  result = qword_1001704D8[0];
  if (!qword_1001704D8[0])
  {
    result = swift_getWitnessTable(&unk_100116C80, &type metadata for KMError.UnloadCodingKeys);
    atomic_store(result, qword_1001704D8);
  }
  return result;
}

unint64_t sub_1000C9DE8()
{
  unint64_t result;

  result = qword_100170560;
  if (!qword_100170560)
  {
    result = swift_getWitnessTable(&unk_100116BA0, &type metadata for KMError.ListErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170560);
  }
  return result;
}

unint64_t sub_1000C9E30()
{
  unint64_t result;

  result = qword_100170568[0];
  if (!qword_100170568[0])
  {
    result = swift_getWitnessTable(&unk_100116BC8, &type metadata for KMError.ListErrorCodingKeys);
    atomic_store(result, qword_100170568);
  }
  return result;
}

unint64_t sub_1000C9E78()
{
  unint64_t result;

  result = qword_1001705F0;
  if (!qword_1001705F0)
  {
    result = swift_getWitnessTable(&unk_100116AE8, &type metadata for KMError.RunninglistErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001705F0);
  }
  return result;
}

unint64_t sub_1000C9EC0()
{
  unint64_t result;

  result = qword_1001705F8[0];
  if (!qword_1001705F8[0])
  {
    result = swift_getWitnessTable(&unk_100116B10, &type metadata for KMError.RunninglistErrorCodingKeys);
    atomic_store(result, qword_1001705F8);
  }
  return result;
}

unint64_t sub_1000C9F08()
{
  unint64_t result;

  result = qword_100170680;
  if (!qword_100170680)
  {
    result = swift_getWitnessTable(&unk_100116A30, &type metadata for KMError.DumpstateErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170680);
  }
  return result;
}

unint64_t sub_1000C9F50()
{
  unint64_t result;

  result = qword_100170688[0];
  if (!qword_100170688[0])
  {
    result = swift_getWitnessTable(&unk_100116A58, &type metadata for KMError.DumpstateErrorCodingKeys);
    atomic_store(result, qword_100170688);
  }
  return result;
}

unint64_t sub_1000C9F98()
{
  unint64_t result;

  result = qword_100170710;
  if (!qword_100170710)
  {
    result = swift_getWitnessTable(&unk_100116978, &type metadata for KMError.DiagnoseErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170710);
  }
  return result;
}

unint64_t sub_1000C9FE0()
{
  unint64_t result;

  result = qword_100170718[0];
  if (!qword_100170718[0])
  {
    result = swift_getWitnessTable(&unk_1001169A0, &type metadata for KMError.DiagnoseErrorCodingKeys);
    atomic_store(result, qword_100170718);
  }
  return result;
}

unint64_t sub_1000CA028()
{
  unint64_t result;

  result = qword_1001707A0;
  if (!qword_1001707A0)
  {
    result = swift_getWitnessTable(&unk_1001168C0, &type metadata for KMError.BootPolicyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001707A0);
  }
  return result;
}

unint64_t sub_1000CA070()
{
  unint64_t result;

  result = qword_1001707A8[0];
  if (!qword_1001707A8[0])
  {
    result = swift_getWitnessTable(&unk_1001168E8, &type metadata for KMError.BootPolicyCodingKeys);
    atomic_store(result, qword_1001707A8);
  }
  return result;
}

unint64_t sub_1000CA0B8()
{
  unint64_t result;

  result = qword_100170830;
  if (!qword_100170830)
  {
    result = swift_getWitnessTable(&unk_100116808, &type metadata for KMError.ExceptionListCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170830);
  }
  return result;
}

unint64_t sub_1000CA100()
{
  unint64_t result;

  result = qword_100170838[0];
  if (!qword_100170838[0])
  {
    result = swift_getWitnessTable(&unk_100116830, &type metadata for KMError.ExceptionListCodingKeys);
    atomic_store(result, qword_100170838);
  }
  return result;
}

unint64_t sub_1000CA148()
{
  unint64_t result;

  result = qword_1001708C0;
  if (!qword_1001708C0)
  {
    result = swift_getWitnessTable(&unk_100116750, &type metadata for KMError.CodeSigningCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001708C0);
  }
  return result;
}

unint64_t sub_1000CA190()
{
  unint64_t result;

  result = qword_1001708C8[0];
  if (!qword_1001708C8[0])
  {
    result = swift_getWitnessTable(&unk_100116778, &type metadata for KMError.CodeSigningCodingKeys);
    atomic_store(result, qword_1001708C8);
  }
  return result;
}

unint64_t sub_1000CA1D8()
{
  unint64_t result;

  result = qword_100170950;
  if (!qword_100170950)
  {
    result = swift_getWitnessTable(&unk_100116698, &type metadata for KMError.TriggerPanicMedicCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170950);
  }
  return result;
}

unint64_t sub_1000CA220()
{
  unint64_t result;

  result = qword_100170958[0];
  if (!qword_100170958[0])
  {
    result = swift_getWitnessTable(&unk_1001166C0, &type metadata for KMError.TriggerPanicMedicCodingKeys);
    atomic_store(result, qword_100170958);
  }
  return result;
}

unint64_t sub_1000CA268()
{
  unint64_t result;

  result = qword_1001709E0;
  if (!qword_1001709E0)
  {
    result = swift_getWitnessTable(&unk_1001165E0, &type metadata for KMError.ConsistencyCheckCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001709E0);
  }
  return result;
}

unint64_t sub_1000CA2B0()
{
  unint64_t result;

  result = qword_1001709E8[0];
  if (!qword_1001709E8[0])
  {
    result = swift_getWitnessTable(&unk_100116608, &type metadata for KMError.ConsistencyCheckCodingKeys);
    atomic_store(result, qword_1001709E8);
  }
  return result;
}

unint64_t sub_1000CA2F8()
{
  unint64_t result;

  result = qword_100170A70;
  if (!qword_100170A70)
  {
    result = swift_getWitnessTable(&unk_100116528, &type metadata for KMError.InSafeBootCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170A70);
  }
  return result;
}

unint64_t sub_1000CA340()
{
  unint64_t result;

  result = qword_100170A78;
  if (!qword_100170A78)
  {
    result = swift_getWitnessTable(&unk_100116550, &type metadata for KMError.InSafeBootCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170A78);
  }
  return result;
}

unint64_t sub_1000CA388()
{
  unint64_t result;

  result = qword_100170B00;
  if (!qword_100170B00)
  {
    result = swift_getWitnessTable(&unk_100116470, &type metadata for KMError.InDarwinOSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170B00);
  }
  return result;
}

unint64_t sub_1000CA3D0()
{
  unint64_t result;

  result = qword_100170B08[0];
  if (!qword_100170B08[0])
  {
    result = swift_getWitnessTable(&unk_100116498, &type metadata for KMError.InDarwinOSCodingKeys);
    atomic_store(result, qword_100170B08);
  }
  return result;
}

unint64_t sub_1000CA418()
{
  unint64_t result;

  result = qword_100170B90;
  if (!qword_100170B90)
  {
    result = swift_getWitnessTable(&unk_1001163B8, &type metadata for KMError.InternalErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170B90);
  }
  return result;
}

unint64_t sub_1000CA460()
{
  unint64_t result;

  result = qword_100170B98[0];
  if (!qword_100170B98[0])
  {
    result = swift_getWitnessTable(&unk_1001163E0, &type metadata for KMError.InternalErrorCodingKeys);
    atomic_store(result, qword_100170B98);
  }
  return result;
}

unint64_t sub_1000CA4A8()
{
  unint64_t result;

  result = qword_100170C20;
  if (!qword_100170C20)
  {
    result = swift_getWitnessTable(&unk_100116300, &type metadata for KMError.RequiresRebootCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170C20);
  }
  return result;
}

unint64_t sub_1000CA4F0()
{
  unint64_t result;

  result = qword_100170C28[0];
  if (!qword_100170C28[0])
  {
    result = swift_getWitnessTable(&unk_100116328, &type metadata for KMError.RequiresRebootCodingKeys);
    atomic_store(result, qword_100170C28);
  }
  return result;
}

unint64_t sub_1000CA538()
{
  unint64_t result;

  result = qword_100170CB0;
  if (!qword_100170CB0)
  {
    result = swift_getWitnessTable(&unk_100116248, &type metadata for KMError.InKcgenOSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170CB0);
  }
  return result;
}

unint64_t sub_1000CA580()
{
  unint64_t result;

  result = qword_100170CB8[0];
  if (!qword_100170CB8[0])
  {
    result = swift_getWitnessTable(&unk_100116270, &type metadata for KMError.InKcgenOSCodingKeys);
    atomic_store(result, qword_100170CB8);
  }
  return result;
}

unint64_t sub_1000CA5C8()
{
  unint64_t result;

  result = qword_100170D40;
  if (!qword_100170D40)
  {
    result = swift_getWitnessTable(&unk_100116190, &type metadata for KMError.DuplicateExtensionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170D40);
  }
  return result;
}

unint64_t sub_1000CA610()
{
  unint64_t result;

  result = qword_100170D48[0];
  if (!qword_100170D48[0])
  {
    result = swift_getWitnessTable(&unk_1001161B8, &type metadata for KMError.DuplicateExtensionCodingKeys);
    atomic_store(result, qword_100170D48);
  }
  return result;
}

unint64_t sub_1000CA658()
{
  unint64_t result;

  result = qword_100170DD0;
  if (!qword_100170DD0)
  {
    result = swift_getWitnessTable(&unk_1001160D8, &type metadata for KMError.InExcludeListCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170DD0);
  }
  return result;
}

unint64_t sub_1000CA6A0()
{
  unint64_t result;

  result = qword_100170DD8[0];
  if (!qword_100170DD8[0])
  {
    result = swift_getWitnessTable(&unk_100116100, &type metadata for KMError.InExcludeListCodingKeys);
    atomic_store(result, qword_100170DD8);
  }
  return result;
}

unint64_t sub_1000CA6E8()
{
  unint64_t result;

  result = qword_100170E60;
  if (!qword_100170E60)
  {
    result = swift_getWitnessTable(&unk_100116020, &type metadata for KMError.MigrationErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170E60);
  }
  return result;
}

unint64_t sub_1000CA730()
{
  unint64_t result;

  result = qword_100170E68[0];
  if (!qword_100170E68[0])
  {
    result = swift_getWitnessTable(&unk_100116048, &type metadata for KMError.MigrationErrorCodingKeys);
    atomic_store(result, qword_100170E68);
  }
  return result;
}

unint64_t sub_1000CA778()
{
  unint64_t result;

  result = qword_100170EF0;
  if (!qword_100170EF0)
  {
    result = swift_getWitnessTable(&unk_100115F68, &type metadata for KMError.UnsupportedErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170EF0);
  }
  return result;
}

unint64_t sub_1000CA7C0()
{
  unint64_t result;

  result = qword_100170EF8[0];
  if (!qword_100170EF8[0])
  {
    result = swift_getWitnessTable(&unk_100115F90, &type metadata for KMError.UnsupportedErrorCodingKeys);
    atomic_store(result, qword_100170EF8);
  }
  return result;
}

unint64_t sub_1000CA808()
{
  unint64_t result;

  result = qword_100170F80;
  if (!qword_100170F80)
  {
    result = swift_getWitnessTable(&unk_100115EB0, &type metadata for KMError.DeveloperToolsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100170F80);
  }
  return result;
}

unint64_t sub_1000CA850()
{
  unint64_t result;

  result = qword_100170F88[0];
  if (!qword_100170F88[0])
  {
    result = swift_getWitnessTable(&unk_100115ED8, &type metadata for KMError.DeveloperToolsErrorCodingKeys);
    atomic_store(result, qword_100170F88);
  }
  return result;
}

unint64_t sub_1000CA898()
{
  unint64_t result;

  result = qword_100171010;
  if (!qword_100171010)
  {
    result = swift_getWitnessTable(&unk_100115DF8, &type metadata for KMError.FilesetErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171010);
  }
  return result;
}

unint64_t sub_1000CA8E0()
{
  unint64_t result;

  result = qword_100171018[0];
  if (!qword_100171018[0])
  {
    result = swift_getWitnessTable(&unk_100115E20, &type metadata for KMError.FilesetErrorCodingKeys);
    atomic_store(result, qword_100171018);
  }
  return result;
}

unint64_t sub_1000CA928()
{
  unint64_t result;

  result = qword_1001710A0;
  if (!qword_1001710A0)
  {
    result = swift_getWitnessTable(&unk_100115D40, &type metadata for KMError.MissingDeveloperKitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001710A0);
  }
  return result;
}

unint64_t sub_1000CA970()
{
  unint64_t result;

  result = qword_1001710A8[0];
  if (!qword_1001710A8[0])
  {
    result = swift_getWitnessTable(&unk_100115D68, &type metadata for KMError.MissingDeveloperKitCodingKeys);
    atomic_store(result, qword_1001710A8);
  }
  return result;
}

unint64_t sub_1000CA9B8()
{
  unint64_t result;

  result = qword_100171130;
  if (!qword_100171130)
  {
    result = swift_getWitnessTable(&unk_100115C88, &type metadata for KMError.KdkInstallerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171130);
  }
  return result;
}

unint64_t sub_1000CAA00()
{
  unint64_t result;

  result = qword_100171138[0];
  if (!qword_100171138[0])
  {
    result = swift_getWitnessTable(&unk_100115CB0, &type metadata for KMError.KdkInstallerErrorCodingKeys);
    atomic_store(result, qword_100171138);
  }
  return result;
}

unint64_t sub_1000CAA48()
{
  unint64_t result;

  result = qword_1001711C0;
  if (!qword_1001711C0)
  {
    result = swift_getWitnessTable(&unk_100115BD0, &type metadata for KMError.KnoxDownloaderErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001711C0);
  }
  return result;
}

unint64_t sub_1000CAA90()
{
  unint64_t result;

  result = qword_1001711C8[0];
  if (!qword_1001711C8[0])
  {
    result = swift_getWitnessTable(&unk_100115BF8, &type metadata for KMError.KnoxDownloaderErrorCodingKeys);
    atomic_store(result, qword_1001711C8);
  }
  return result;
}

unint64_t sub_1000CAAD8()
{
  unint64_t result;

  result = qword_100171250;
  if (!qword_100171250)
  {
    result = swift_getWitnessTable(&unk_100115B18, &type metadata for KMError.PackageInstallerErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171250);
  }
  return result;
}

unint64_t sub_1000CAB20()
{
  unint64_t result;

  result = qword_100171258[0];
  if (!qword_100171258[0])
  {
    result = swift_getWitnessTable(&unk_100115B40, &type metadata for KMError.PackageInstallerErrorCodingKeys);
    atomic_store(result, qword_100171258);
  }
  return result;
}

unint64_t sub_1000CAB68()
{
  unint64_t result;

  result = qword_1001712E0;
  if (!qword_1001712E0)
  {
    result = swift_getWitnessTable(&unk_100115A60, &type metadata for KMError.DextRecordErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001712E0);
  }
  return result;
}

unint64_t sub_1000CABB0()
{
  unint64_t result;

  result = qword_1001712E8[0];
  if (!qword_1001712E8[0])
  {
    result = swift_getWitnessTable(&unk_100115A88, &type metadata for KMError.DextRecordErrorCodingKeys);
    atomic_store(result, qword_1001712E8);
  }
  return result;
}

unint64_t sub_1000CABF8()
{
  unint64_t result;

  result = qword_100171370;
  if (!qword_100171370)
  {
    result = swift_getWitnessTable(&unk_1001159A8, &type metadata for KMError.SystemExtensionWaitForTerminationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171370);
  }
  return result;
}

unint64_t sub_1000CAC40()
{
  unint64_t result;

  result = qword_100171378;
  if (!qword_100171378)
  {
    result = swift_getWitnessTable(&unk_1001159D0, &type metadata for KMError.SystemExtensionWaitForTerminationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171378);
  }
  return result;
}

unint64_t sub_1000CAC88()
{
  unint64_t result;

  result = qword_100171400;
  if (!qword_100171400)
  {
    result = swift_getWitnessTable(&unk_1001158F0, &type metadata for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171400);
  }
  return result;
}

unint64_t sub_1000CACD0()
{
  unint64_t result;

  result = qword_100171408[0];
  if (!qword_100171408[0])
  {
    result = swift_getWitnessTable(&unk_100115918, &type metadata for KMError.SystemExtensionWaitForUninstallTerminationCodingKeys);
    atomic_store(result, qword_100171408);
  }
  return result;
}

unint64_t sub_1000CAD18()
{
  unint64_t result;

  result = qword_100171490;
  if (!qword_100171490)
  {
    result = swift_getWitnessTable(&unk_100115838, &type metadata for KMError.SystemExtensionsErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171490);
  }
  return result;
}

unint64_t sub_1000CAD60()
{
  unint64_t result;

  result = qword_100171498[0];
  if (!qword_100171498[0])
  {
    result = swift_getWitnessTable(&unk_100115860, &type metadata for KMError.SystemExtensionsErrorCodingKeys);
    atomic_store(result, qword_100171498);
  }
  return result;
}

unint64_t sub_1000CADA8()
{
  unint64_t result;

  result = qword_100171520;
  if (!qword_100171520)
  {
    result = swift_getWitnessTable(&unk_100115780, &type metadata for KMError.BuildManifestNotFoundErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171520);
  }
  return result;
}

unint64_t sub_1000CADF0()
{
  unint64_t result;

  result = qword_100171528[0];
  if (!qword_100171528[0])
  {
    result = swift_getWitnessTable(&unk_1001157A8, &type metadata for KMError.BuildManifestNotFoundErrorCodingKeys);
    atomic_store(result, qword_100171528);
  }
  return result;
}

unint64_t sub_1000CAE38()
{
  unint64_t result;

  result = qword_1001715B0;
  if (!qword_1001715B0)
  {
    result = swift_getWitnessTable(&unk_1001156C8, &type metadata for KMError.InvalidRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001715B0);
  }
  return result;
}

unint64_t sub_1000CAE80()
{
  unint64_t result;

  result = qword_1001715B8[0];
  if (!qword_1001715B8[0])
  {
    result = swift_getWitnessTable(&unk_1001156F0, &type metadata for KMError.InvalidRequestCodingKeys);
    atomic_store(result, qword_1001715B8);
  }
  return result;
}

unint64_t sub_1000CAEC8()
{
  unint64_t result;

  result = qword_100171640;
  if (!qword_100171640)
  {
    result = swift_getWitnessTable(&unk_100115610, &type metadata for KMError.ConnectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171640);
  }
  return result;
}

unint64_t sub_1000CAF10()
{
  unint64_t result;

  result = qword_100171648[0];
  if (!qword_100171648[0])
  {
    result = swift_getWitnessTable(&unk_100115638, &type metadata for KMError.ConnectionCodingKeys);
    atomic_store(result, qword_100171648);
  }
  return result;
}

unint64_t sub_1000CAF58()
{
  unint64_t result;

  result = qword_1001716D0;
  if (!qword_1001716D0)
  {
    result = swift_getWitnessTable(&unk_100115558, &type metadata for KMError.TimedOutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001716D0);
  }
  return result;
}

unint64_t sub_1000CAFA0()
{
  unint64_t result;

  result = qword_1001716D8[0];
  if (!qword_1001716D8[0])
  {
    result = swift_getWitnessTable(&unk_100115580, &type metadata for KMError.TimedOutCodingKeys);
    atomic_store(result, qword_1001716D8);
  }
  return result;
}

unint64_t sub_1000CAFE8()
{
  unint64_t result;

  result = qword_100171760;
  if (!qword_100171760)
  {
    result = swift_getWitnessTable(&unk_1001154A0, &type metadata for KMError.BusyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171760);
  }
  return result;
}

unint64_t sub_1000CB030()
{
  unint64_t result;

  result = qword_100171768[0];
  if (!qword_100171768[0])
  {
    result = swift_getWitnessTable(&unk_1001154C8, &type metadata for KMError.BusyCodingKeys);
    atomic_store(result, qword_100171768);
  }
  return result;
}

unint64_t sub_1000CB078()
{
  unint64_t result;

  result = qword_1001717F0;
  if (!qword_1001717F0)
  {
    result = swift_getWitnessTable(&unk_1001153E8, &type metadata for KMError.ArithmeticCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001717F0);
  }
  return result;
}

unint64_t sub_1000CB0C0()
{
  unint64_t result;

  result = qword_1001717F8[0];
  if (!qword_1001717F8[0])
  {
    result = swift_getWitnessTable(&unk_100115410, &type metadata for KMError.ArithmeticCodingKeys);
    atomic_store(result, qword_1001717F8);
  }
  return result;
}

unint64_t sub_1000CB108()
{
  unint64_t result;

  result = qword_100171880;
  if (!qword_100171880)
  {
    result = swift_getWitnessTable(&unk_1001188B0, &type metadata for KMError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100171880);
  }
  return result;
}

unint64_t sub_1000CB150()
{
  unint64_t result;

  result = qword_100171888[0];
  if (!qword_100171888[0])
  {
    result = swift_getWitnessTable(&unk_1001188D8, &type metadata for KMError.CodingKeys);
    atomic_store(result, qword_100171888);
  }
  return result;
}

uint64_t sub_1000CB194(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100011CE4(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000CB1F0()
{
  unint64_t result;

  result = qword_10015B910;
  if (!qword_10015B910)
  {
    result = swift_getWitnessTable(&unk_10011B388, &type metadata for OSExtensionCodable);
    atomic_store(result, (unint64_t *)&qword_10015B910);
  }
  return result;
}

uint64_t sub_1000CB234(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100011CE4(&qword_10015B688);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000CB29C()
{
  unint64_t result;

  result = qword_10015B920;
  if (!qword_10015B920)
  {
    result = swift_getWitnessTable(&unk_100114938, &type metadata for KMError);
    atomic_store(result, (unint64_t *)&qword_10015B920);
  }
  return result;
}

_QWORD *sub_1000CB2E8(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t (*a4)(void), int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  void (*v26)(_QWORD **__return_ptr);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t (*v41)(__n128);
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  _QWORD *v56;
  Swift::String v57;
  Swift::String v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  Swift::String v80;
  Swift::String v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  void (*v90)(_QWORD **__return_ptr, uint64_t, uint64_t);
  uint64_t v91;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(_QWORD **__return_ptr, uint64_t, uint64_t);
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t (*v128)(void);
  int v129;
  int v130;
  char *v131;
  uint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  _OWORD v136[2];
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;

  v135 = a8;
  v130 = a6;
  v129 = a5;
  v128 = a4;
  v133 = a2;
  v134 = a3;
  v132 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v132 - 8);
  v12 = __chkstk_darwin(v132);
  v14 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v131 = (char *)&v119 - v15;
  v16 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v17 = swift_allocObject(v16, 72, 7);
  v127 = xmmword_10010F050;
  *(_OWORD *)(v17 + 16) = xmmword_10010F050;
  v140 = a1;
  v18 = type metadata accessor for DriverExtension(0);
  v19 = sub_1000CC09C();
  v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
  v22 = v21;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_100026838();
  *(_QWORD *)(v17 + 32) = v20;
  *(_QWORD *)(v17 + 40) = v22;
  v23 = sub_10002687C();
  v24 = (void *)static OS_os_log.default.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  os_log(_:dso:log:type:_:)("Launching driver extension: %{public}s", 38, 2, &_mh_execute_header, v24, v25, v17);
  swift_bridgeObjectRelease(v17);

  v26 = *(void (**)(_QWORD **__return_ptr))(*a1 + 112);
  v26(&v140);
  v27 = v142;
  if (!v142)
  {
    sub_1000124F8((uint64_t)&v140, &qword_100157C78);
LABEL_13:
    v140 = 0;
    v141 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    v74 = swift_bridgeObjectRelease(v141);
    *(_QWORD *)&v137 = 0xD000000000000010;
    *((_QWORD *)&v137 + 1) = 0x800000010012A700;
    ((void (*)(_QWORD **__return_ptr, uint64_t))v26)(&v140, v74);
    v75 = v142;
    if (v142)
    {
      v76 = v143;
      sub_100004DE4(&v140, v142);
      v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 24))(v75, v76);
      v79 = v78;
      sub_100005D08(&v140);
      if (v79)
      {
LABEL_18:
        v80._countAndFlagsBits = v77;
        v80._object = v79;
        String.append(_:)(v80);
        swift_bridgeObjectRelease(v79);
        v81._countAndFlagsBits = 0xD000000000000018;
        v81._object = (void *)0x800000010012A720;
        String.append(_:)(v81);
        v83 = *((_QWORD *)&v137 + 1);
        v82 = (_QWORD *)v137;
        v84 = sub_1000122F8();
        v85 = swift_allocError(&type metadata for KMError, v84, 0, 0);
        *(_QWORD *)v86 = v82;
        *(_QWORD *)(v86 + 8) = v83;
        *(_OWORD *)(v86 + 16) = 0u;
        *(_OWORD *)(v86 + 32) = 0u;
        *(_OWORD *)(v86 + 48) = 0u;
        *(_QWORD *)(v86 + 64) = 0;
        *(_BYTE *)(v86 + 72) = 4;
        swift_willThrow(v85);
        return v82;
      }
    }
    else
    {
      sub_1000124F8((uint64_t)&v140, &qword_100157C78);
    }
    swift_bridgeObjectRelease(0);
    v79 = (void *)0xE600000000000000;
    v77 = 0x296C6C756E28;
    goto LABEL_18;
  }
  v28 = v143;
  sub_100004DE4(&v140, v142);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 56))(v27, v28);
  v31 = v30;
  sub_100005D08(&v140);
  if (!v31)
    goto LABEL_13;
  v125 = a7;
  URL.init(fileURLWithPath:)(v29, v31);
  v32 = swift_bridgeObjectRelease(v31);
  URL.absoluteURL.getter(v32);
  v122 = *(void (**)(char *, uint64_t))(v11 + 8);
  v122(v14, v132);
  v33 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v33 + 16) = v127;
  *(_QWORD *)(v33 + 56) = &type metadata for UInt64;
  *(_QWORD *)(v33 + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(v33 + 32) = v128;
  v34 = String.init(format:_:)(0x786C6C257830, 0xE600000000000000, v33);
  v123 = v34;
  v36 = v35;
  v37 = sub_100005C88((uint64_t *)&unk_100159E60);
  v38 = swift_allocObject(v37, 96, 7);
  *(_OWORD *)(v38 + 16) = xmmword_100112440;
  *(_QWORD *)(v38 + 32) = URL.path.getter(v38);
  *(_QWORD *)(v38 + 40) = v39;
  v40 = v134;
  *(_QWORD *)(v38 + 48) = v133;
  *(_QWORD *)(v38 + 56) = v40;
  *(_QWORD *)(v38 + 64) = v34;
  *(_QWORD *)(v38 + 72) = v36;
  v128 = *(uint64_t (**)(void))(*a1 + 144);
  v41 = (uint64_t (*)(__n128))v128;
  swift_bridgeObjectRetain(v40);
  v42 = swift_bridgeObjectRetain(v36);
  *(_QWORD *)(v38 + 80) = v41(v42);
  *(_QWORD *)(v38 + 88) = v43;
  v44 = v135;
  v121 = *(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(a9 + 8);
  v121(&v140, v135, a9);
  v45 = v142;
  v46 = v143;
  sub_100004DE4(&v140, v142);
  sub_100071700(v45, v46);
  v47 = *((_QWORD *)&v138 + 1);
  v48 = v139;
  sub_100004DE4(&v137, *((uint64_t *)&v138 + 1));
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 120))(v47, v48);
  sub_100005D08(&v137);
  sub_100005D08(&v140);
  v50 = 0xD000000000000013;
  if ((v49 & 1) == 0)
    v50 = 0x6C7070612E6D6F63;
  *(_QWORD *)&v127 = v50;
  v51 = 0x800000010012A840;
  if ((v49 & 1) == 0)
    v51 = 0xEE00747865642E65;
  v124 = v51;
  v52 = sub_100005C88(&qword_100158230);
  v53 = swift_allocObject(v52, 704, 7);
  *(_OWORD *)(v53 + 16) = xmmword_10011A0E0;
  *(_QWORD *)(v53 + 32) = 0x646567616E614D5FLL;
  *(_QWORD *)(v53 + 40) = 0xEA00000000007942;
  v54 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 32);
  v120 = a9;
  *(_QWORD *)(v53 + 48) = v54(v44, a9);
  *(_QWORD *)(v53 + 56) = v55;
  *(_QWORD *)(v53 + 72) = &type metadata for String;
  *(_QWORD *)(v53 + 80) = 0x6C6562614CLL;
  *(_QWORD *)(v53 + 88) = 0xE500000000000000;
  v56 = v133;
  v140 = v133;
  v141 = v40;
  swift_bridgeObjectRetain(v40);
  v57._countAndFlagsBits = 45;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  v58._countAndFlagsBits = v123;
  v58._object = v36;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v36);
  v59 = v141;
  *(_QWORD *)(v53 + 96) = v140;
  *(_QWORD *)(v53 + 104) = v59;
  *(_QWORD *)(v53 + 120) = &type metadata for String;
  *(_QWORD *)(v53 + 128) = 0xD000000000000010;
  *(_QWORD *)(v53 + 136) = 0x800000010012A740;
  v60 = sub_100005C88((uint64_t *)&unk_10015A5D0);
  *(_QWORD *)(v53 + 144) = v38;
  *(_QWORD *)(v53 + 168) = v60;
  *(_QWORD *)(v53 + 176) = 0x54737365636F7250;
  *(_QWORD *)(v53 + 184) = 0xEB00000000657079;
  *(_QWORD *)(v53 + 192) = 0x726576697244;
  *(_QWORD *)(v53 + 200) = 0xE600000000000000;
  *(_QWORD *)(v53 + 216) = &type metadata for String;
  *(_QWORD *)(v53 + 224) = 0x616F4C74416E7552;
  *(_QWORD *)(v53 + 232) = 0xE900000000000064;
  *(_BYTE *)(v53 + 240) = 1;
  *(_QWORD *)(v53 + 264) = &type metadata for Bool;
  strcpy((char *)(v53 + 272), "LaunchOnlyOnce");
  *(_BYTE *)(v53 + 287) = -18;
  *(_BYTE *)(v53 + 288) = 1;
  *(_QWORD *)(v53 + 312) = &type metadata for Bool;
  *(_QWORD *)(v53 + 320) = 0x656D614E72657355;
  *(_QWORD *)(v53 + 328) = 0xE800000000000000;
  *(_QWORD *)(v53 + 336) = 0x6B7265766972645FLL;
  *(_QWORD *)(v53 + 344) = 0xEA00000000007469;
  *(_QWORD *)(v53 + 360) = &type metadata for String;
  *(_QWORD *)(v53 + 368) = 0xD000000000000012;
  *(_QWORD *)(v53 + 376) = 0x800000010012A760;
  *(_BYTE *)(v53 + 384) = v129 & 1;
  *(_QWORD *)(v53 + 408) = &type metadata for Bool;
  *(_QWORD *)(v53 + 416) = 0xD000000000000016;
  *(_QWORD *)(v53 + 424) = 0x800000010012A780;
  *(_QWORD *)(v53 + 432) = 0x6D6574737953;
  *(_QWORD *)(v53 + 440) = 0xE600000000000000;
  *(_QWORD *)(v53 + 456) = &type metadata for String;
  *(_QWORD *)(v53 + 464) = 0xD000000000000012;
  *(_QWORD *)(v53 + 472) = 0x8000000100127090;
  *(_QWORD *)(v53 + 480) = v128();
  *(_QWORD *)(v53 + 488) = v61;
  *(_QWORD *)(v53 + 504) = &type metadata for String;
  strcpy((char *)(v53 + 512), "SandboxProfile");
  *(_BYTE *)(v53 + 527) = -18;
  *(_QWORD *)(v53 + 552) = &type metadata for String;
  *(_QWORD *)(v53 + 528) = v127;
  *(_QWORD *)(v53 + 536) = v124;
  *(_QWORD *)(v53 + 560) = 0xD000000000000012;
  *(_QWORD *)(v53 + 568) = 0x800000010012A7A0;
  *(_QWORD *)(v53 + 600) = &type metadata for Bool;
  *(_BYTE *)(v53 + 576) = 1;
  *(_QWORD *)(v53 + 608) = 0xD00000000000001BLL;
  *(_QWORD *)(v53 + 616) = 0x800000010012A7C0;
  *(_QWORD *)(v53 + 648) = &type metadata for String;
  *(_QWORD *)(v53 + 624) = v56;
  v62 = v134;
  *(_QWORD *)(v53 + 632) = v134;
  *(_QWORD *)(v53 + 656) = 0xD000000000000010;
  *(_QWORD *)(v53 + 664) = 0x8000000100123A90;
  *(_QWORD *)(v53 + 696) = &type metadata for UInt32;
  *(_DWORD *)(v53 + 672) = v130;
  swift_bridgeObjectRetain(v62);
  v63 = sub_1000159E8(v53);
  sub_100019E1C(v125, (uint64_t)&v137, &qword_100158010);
  if (*((_QWORD *)&v138 + 1))
  {
    sub_100004E2C(&v137, (uint64_t)&v140);
    v64 = v142;
    v65 = v143;
    sub_100004DE4(&v140, v142);
    v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 16))(v64, v65);
    v67 = sub_1000CC1F4(v66);
    swift_bridgeObjectRelease(v66);
    if ((v67 & 1) == 0)
    {
      v87 = v126;
      v88 = v122;
      v89 = v120;
      v90 = v121;
      goto LABEL_37;
    }
    v68 = a1[2];
    v69 = (uint64_t *)sub_10008F4C0();
    if (*(_QWORD *)(v68 + 16))
    {
      v70 = *v69;
      v71 = v69[1];
      swift_bridgeObjectRetain(v71);
      v72 = sub_100005DE8(v70, v71);
      if ((v73 & 1) != 0)
      {
        sub_100005D28(*(_QWORD *)(v68 + 56) + 32 * v72, (uint64_t)&v137);
      }
      else
      {
        v137 = 0u;
        v138 = 0u;
      }
      v87 = v126;
      v88 = v122;
      v89 = v120;
      v90 = v121;
      swift_bridgeObjectRelease(v71);
      if (*((_QWORD *)&v138 + 1))
      {
        v91 = sub_100005C88(&qword_1001588B8);
        if ((swift_dynamicCast(v136, &v137, (char *)&type metadata for Any + 8, v91, 6) & 1) != 0)
        {
          *((_QWORD *)&v138 + 1) = v91;
          *(_QWORD *)&v137 = *(_QWORD *)&v136[0];
          sub_100017464(&v137, v136);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v63);
          v144 = v63;
          sub_100016D64(v136, 0xD000000000000014, 0x8000000100126E30, isUniquelyReferenced_nonNull_native);
          v63 = v144;
          swift_bridgeObjectRelease(0x8000000000000000);
        }
        goto LABEL_27;
      }
    }
    else
    {
      v137 = 0u;
      v138 = 0u;
      v87 = v126;
      v88 = v122;
      v89 = v120;
      v90 = v121;
    }
    sub_1000124F8((uint64_t)&v137, &qword_100158018);
LABEL_27:
    v93 = (uint64_t *)sub_10008F4CC();
    if (*(_QWORD *)(v68 + 16))
    {
      v94 = *v93;
      v95 = v93[1];
      swift_bridgeObjectRetain(v95);
      v96 = sub_100005DE8(v94, v95);
      if ((v97 & 1) != 0)
      {
        sub_100005D28(*(_QWORD *)(v68 + 56) + 32 * v96, (uint64_t)&v137);
      }
      else
      {
        v137 = 0u;
        v138 = 0u;
      }
      swift_bridgeObjectRelease(v95);
      if (*((_QWORD *)&v138 + 1))
      {
        if (swift_dynamicCast(v136, &v137, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)&& (v136[0] & 1) != 0)
        {
          v98 = sub_1000CC0E4((uint64_t)&off_10014E878);
          v99 = sub_100005C88(&qword_10015B930);
          *((_QWORD *)&v138 + 1) = v99;
          *(_QWORD *)&v137 = v98;
          sub_100017464(&v137, v136);
          v100 = swift_isUniquelyReferenced_nonNull_native(v63);
          v144 = v63;
          sub_100016D64(v136, 0xD000000000000012, 0x800000010012A800, v100);
          v101 = v144;
          swift_bridgeObjectRelease(0x8000000000000000);
          v102 = sub_1000CC0E4((uint64_t)&off_10014E8B0);
          *((_QWORD *)&v138 + 1) = v99;
          *(_QWORD *)&v137 = v102;
          sub_100017464(&v137, v136);
          v103 = swift_isUniquelyReferenced_nonNull_native(v101);
          v144 = v101;
          sub_100016D64(v136, 0xD000000000000012, 0x800000010012A820, v103);
          v63 = v144;
          swift_bridgeObjectRelease(0x8000000000000000);
        }
        goto LABEL_37;
      }
    }
    else
    {
      v137 = 0u;
      v138 = 0u;
    }
    sub_1000124F8((uint64_t)&v137, &qword_100158018);
LABEL_37:
    v104 = v142;
    v105 = v143;
    sub_100004DE4(&v140, v142);
    v106 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 16))(v104, v105);
    v107 = (uint64_t *)sub_1000900D4();
    if (*(_QWORD *)(v106 + 16))
    {
      v109 = *v107;
      v108 = v107[1];
      swift_bridgeObjectRetain(v108);
      v110 = sub_100005DE8(v109, v108);
      if ((v111 & 1) != 0)
      {
        sub_100005D28(*(_QWORD *)(v106 + 56) + 32 * v110, (uint64_t)&v137);
      }
      else
      {
        v137 = 0u;
        v138 = 0u;
      }
      swift_bridgeObjectRelease(v108);
    }
    else
    {
      v137 = 0u;
      v138 = 0u;
    }
    swift_bridgeObjectRelease(v106);
    if (*((_QWORD *)&v138 + 1))
    {
      if (swift_dynamicCast(v136, &v137, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)&& (v136[0] & 1) != 0)
      {
        *((_QWORD *)&v138 + 1) = &type metadata for Bool;
        LOBYTE(v137) = 1;
        sub_100017464(&v137, v136);
        v112 = swift_isUniquelyReferenced_nonNull_native(v63);
        v144 = v63;
        sub_100016D64(v136, 0xD000000000000017, 0x800000010012A7E0, v112);
        v63 = v144;
        swift_bridgeObjectRelease(0x8000000000000000);
      }
    }
    else
    {
      sub_1000124F8((uint64_t)&v137, &qword_100158018);
    }
    sub_100005D08(&v140);
    v90(&v140, v135, v89);
    goto LABEL_49;
  }
  sub_1000124F8((uint64_t)&v137, &qword_100158010);
  v87 = v126;
  v88 = v122;
  v121(&v140, v135, v120);
LABEL_49:
  v113 = v142;
  v114 = v143;
  sub_100004DE4(&v140, v142);
  sub_10006A2BC(v113, v114);
  v115 = *((_QWORD *)&v138 + 1);
  v116 = v139;
  v82 = sub_100004DE4(&v137, *((uint64_t *)&v138 + 1));
  v117 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v116 + 8))(v63, v115, v116);
  if (!v87)
    v82 = (_QWORD *)v117;
  v88(v131, v132);
  swift_bridgeObjectRelease(v63);
  sub_100005D08(&v137);
  sub_100005D08(&v140);
  return v82;
}

unint64_t sub_1000CC09C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B928;
  if (!qword_10015B928)
  {
    v1 = type metadata accessor for DriverExtension(255);
    result = swift_getWitnessTable(&unk_10011B468, v1);
    atomic_store(result, (unint64_t *)&qword_10015B928);
  }
  return result;
}

unint64_t sub_1000CC0E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_10015B938);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100005DE8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000CC1F4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unsigned __int8 v23;
  __int128 v24;
  __int128 v25;

  v2 = (uint64_t *)sub_100090098();
  if (!*(_QWORD *)(a1 + 16))
  {
    v24 = 0u;
    v25 = 0u;
    goto LABEL_9;
  }
  v4 = *v2;
  v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  v5 = sub_100005DE8(v4, v3);
  if ((v6 & 1) == 0)
  {
    v24 = 0u;
    v25 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_9;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v24);
  swift_bridgeObjectRelease(v3);
  if (!*((_QWORD *)&v25 + 1))
  {
LABEL_9:
    sub_1000124F8((uint64_t)&v24, &qword_100158018);
    goto LABEL_10;
  }
  if (swift_dynamicCast(&v23, &v24, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)
    && (v23 & 1) != 0)
  {
    return 1;
  }
LABEL_10:
  v7 = (uint64_t *)sub_1000900A4();
  if (!*(_QWORD *)(a1 + 16))
  {
    v24 = 0u;
    v25 = 0u;
LABEL_19:
    sub_1000124F8((uint64_t)&v24, &qword_100158018);
    goto LABEL_20;
  }
  v9 = *v7;
  v8 = v7[1];
  swift_bridgeObjectRetain(v8);
  v10 = sub_100005DE8(v9, v8);
  if ((v11 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)&v24);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  swift_bridgeObjectRelease(v8);
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_19;
  if ((swift_dynamicCast(&v23, &v24, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
    && (v23 & 1) != 0)
  {
    return 1;
  }
LABEL_20:
  v12 = (uint64_t *)sub_1000900B0();
  if (!*(_QWORD *)(a1 + 16))
  {
    v24 = 0u;
    v25 = 0u;
LABEL_29:
    sub_1000124F8((uint64_t)&v24, &qword_100158018);
    goto LABEL_30;
  }
  v14 = *v12;
  v13 = v12[1];
  swift_bridgeObjectRetain(v13);
  v15 = sub_100005DE8(v14, v13);
  if ((v16 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v24);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  swift_bridgeObjectRelease(v13);
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_29;
  if ((swift_dynamicCast(&v23, &v24, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
    && (v23 & 1) != 0)
  {
    return 1;
  }
LABEL_30:
  v18 = (uint64_t *)sub_1000900BC();
  if (!*(_QWORD *)(a1 + 16))
  {
    v24 = 0u;
    v25 = 0u;
LABEL_38:
    sub_1000124F8((uint64_t)&v24, &qword_100158018);
    return 0;
  }
  v20 = *v18;
  v19 = v18[1];
  swift_bridgeObjectRetain(v19);
  v21 = sub_100005DE8(v20, v19);
  if ((v22 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v21, (uint64_t)&v24);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  swift_bridgeObjectRelease(v19);
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_38;
  if ((swift_dynamicCast(&v23, &v24, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
    return v23;
  return 0;
}

uint64_t sub_1000CC4B8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  void (*v23)(unint64_t *__return_ptr);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  void (*v66)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(__n128);
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v140;
  _QWORD v141[3];
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  _QWORD v150[3];
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;

  v14 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_10010F050;
  v153 = (unint64_t)a1;
  v16 = type metadata accessor for DriverExtension(0);
  v131 = sub_1000CC09C();
  v17 = dispatch thunk of CustomStringConvertible.description.getter(v16, v131);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v130 = sub_100026838();
  *(_QWORD *)(v15 + 64) = v130;
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  v20 = sub_10002687C();
  v21 = (void *)static OS_os_log.default.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  os_log(_:dso:log:type:_:)("Launching driver extension via running board: %{public}s", 56, 2, &_mh_execute_header, v21, v22, v15);
  swift_bridgeObjectRelease(v15);

  v23 = *(void (**)(unint64_t *__return_ptr))(*a1 + 112);
  v23(&v153);
  v24 = v155;
  if (v155)
  {
    v128 = v16;
    v25 = v156;
    sub_100004DE4(&v153, v155);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 56))(v24, v25);
    v28 = v27;
    v29 = sub_100005D08(&v153);
    if (v28)
    {
      v126 = v26;
      v127 = a1;
      v129 = v28;
      v30 = swift_allocObject(v14, 72, 7);
      *(_OWORD *)(v30 + 16) = xmmword_10010F050;
      *(_QWORD *)(v30 + 56) = &type metadata for UInt64;
      *(_QWORD *)(v30 + 64) = &protocol witness table for UInt64;
      *(_QWORD *)(v30 + 32) = a4;
      v31 = String.init(format:_:)(0x786C6C257830, 0xE600000000000000, v30);
      v135 = v14;
      v32 = a8;
      v34 = v33;
      v35 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a11 + 8);
      v36 = v32;
      v35((__int128 *)v150, a10, a11);
      v37 = v151;
      v38 = v152;
      sub_100004DE4(v150, v151);
      sub_100013260(v37, v38);
      v39 = *((_QWORD *)&v148 + 1);
      v40 = v149;
      sub_100004DE4(&v147, *((uint64_t *)&v148 + 1));
      (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8))(&v153, a2, a3, v31, v34, v36, a9, v39, v40);
      if (v136)
      {
        swift_bridgeObjectRelease(v34);
        swift_bridgeObjectRelease(v129);
LABEL_5:
        sub_100005D08(&v147);
        return sub_100005D08(v150);
      }
      v123 = v36;
      v124 = v31;
      v125 = v34;
      v53 = a10;
      sub_100005D08(&v147);
      sub_100005D08(v150);
      v54 = sub_10002F578((uint64_t)_swiftEmptyArrayStorage);
      if ((a5 & 1) != 0)
        v55 = 32;
      else
        v55 = 0;
      sub_100019E1C(a7, (uint64_t)&v147, &qword_100158010);
      v137 = v54;
      if (!*((_QWORD *)&v148 + 1))
      {
        sub_1000124F8((uint64_t)&v147, &qword_100158010);
        v65 = a3;
        v66 = v35;
        v67 = v125;
        v66(&v147, a10, a11);
LABEL_52:
        v90 = *((_QWORD *)&v148 + 1);
        v91 = v149;
        sub_100004DE4(&v147, *((uint64_t *)&v148 + 1));
        sub_100013260(v90, v91);
        v92 = v145;
        v93 = v146;
        sub_100004DE4(&v144, v145);
        (*(void (**)(_QWORD *__return_ptr, unint64_t *, uint64_t, uint64_t))(v93 + 16))(v150, &v153, v92, v93);
        sub_100005D08(&v144);
        sub_100005D08(&v147);
        v95 = v151;
        v96 = v152;
        sub_100005C1C((uint64_t)v150, v151);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 16))(v126, v129, v95, v96);
        v97 = v151;
        v98 = v152;
        sub_100005C1C((uint64_t)v150, v151);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 40))(v55, v97, v98);
        v99 = sub_100005C88((uint64_t *)&unk_100159E60);
        v100 = swift_allocObject(v99, 80, 7);
        *(_OWORD *)(v100 + 16) = xmmword_100111CB0;
        *(_QWORD *)(v100 + 32) = a2;
        *(_QWORD *)(v100 + 40) = v65;
        *(_QWORD *)(v100 + 48) = v124;
        *(_QWORD *)(v100 + 56) = v67;
        v101 = *(uint64_t (**)(__n128))(*v127 + 144);
        v102 = swift_bridgeObjectRetain(v65);
        *(_QWORD *)(v100 + 64) = v101(v102);
        *(_QWORD *)(v100 + 72) = v103;
        v104 = v151;
        v105 = v152;
        sub_100005C1C((uint64_t)v150, v151);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 64))(v100, v104, v105);
        v106 = sub_10008A780(v137);
        swift_bridgeObjectRelease(v137);
        v107 = v151;
        v108 = v152;
        sub_100005C1C((uint64_t)v150, v151);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v108 + 88))(v106, v107, v108);
        v109 = v151;
        v110 = v152;
        sub_100005C1C((uint64_t)v150, v151);
        v111 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v110 + 112))(a6, v109, v110);
        v112 = ((uint64_t (*)(uint64_t))v101)(v111);
        v114 = v113;
        v115 = v151;
        v116 = v152;
        sub_100005C1C((uint64_t)v150, v151);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 136))(v112, v114, v115, v116);
        v66(&v144, a10, a11);
        v117 = v145;
        v118 = v146;
        sub_100004DE4(&v144, v145);
        sub_100013260(v117, v118);
        v119 = v142;
        v120 = v143;
        sub_100004DE4(v141, v142);
        (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, uint64_t))(v120 + 24))(&v147, v150, v119, v120);
        sub_100005D08(v141);
        sub_100005D08(&v144);
        v121 = *((_QWORD *)&v148 + 1);
        v122 = v149;
        sub_100004DE4(&v147, *((uint64_t *)&v148 + 1));
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v122);
        sub_100005D08(&v153);
        goto LABEL_5;
      }
      sub_100004E2C(&v147, (uint64_t)v150);
      v56 = v151;
      v57 = v152;
      sub_100004DE4(v150, v151);
      v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 16))(v56, v57);
      LOBYTE(v56) = sub_1000CC1F4(v58);
      swift_bridgeObjectRelease(v58);
      if ((v56 & 1) == 0)
      {
        v68 = a11;
        goto LABEL_40;
      }
      v59 = v127[2];
      v60 = (uint64_t *)sub_10008F4C0();
      if (*(_QWORD *)(v59 + 16))
      {
        v61 = *v60;
        v62 = v60[1];
        swift_bridgeObjectRetain(v62);
        v63 = sub_100005DE8(v61, v62);
        if ((v64 & 1) != 0)
        {
          sub_100005D28(*(_QWORD *)(v59 + 56) + 32 * v63, (uint64_t)&v147);
        }
        else
        {
          v147 = 0u;
          v148 = 0u;
        }
        v68 = a11;
        swift_bridgeObjectRelease(v62);
        if (*((_QWORD *)&v148 + 1))
        {
          v69 = sub_100005C88(&qword_1001588B8);
          if ((swift_dynamicCast(&v144, &v147, (char *)&type metadata for Any + 8, v69, 6) & 1) != 0)
          {
            swift_bridgeObjectRelease(v137);
            v137 = v144;
          }
          goto LABEL_29;
        }
      }
      else
      {
        v147 = 0u;
        v148 = 0u;
        v68 = a11;
      }
      sub_1000124F8((uint64_t)&v147, &qword_100158018);
LABEL_29:
      v70 = (uint64_t *)sub_10008F4CC();
      if (*(_QWORD *)(v59 + 16))
      {
        v71 = *v70;
        v72 = v70[1];
        swift_bridgeObjectRetain(v72);
        v73 = sub_100005DE8(v71, v72);
        if ((v74 & 1) != 0)
        {
          sub_100005D28(*(_QWORD *)(v59 + 56) + 32 * v73, (uint64_t)&v147);
        }
        else
        {
          v147 = 0u;
          v148 = 0u;
        }
        swift_bridgeObjectRelease(v72);
        if (*((_QWORD *)&v148 + 1))
        {
          if (swift_dynamicCast(&v144, &v147, (char *)&type metadata for Any + 8, &type metadata for Bool, 6)&& (_BYTE)v144)
          {
            v55 |= 0x40uLL;
          }
          goto LABEL_40;
        }
      }
      else
      {
        v147 = 0u;
        v148 = 0u;
      }
      sub_1000124F8((uint64_t)&v147, &qword_100158018);
LABEL_40:
      v75 = v151;
      v76 = v152;
      sub_100004DE4(v150, v151);
      v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 16))(v75, v76);
      v78 = (uint64_t *)sub_1000900D4();
      if (*(_QWORD *)(v77 + 16))
      {
        v79 = *v78;
        v80 = v78[1];
        swift_bridgeObjectRetain(v80);
        v81 = sub_100005DE8(v79, v80);
        v65 = a3;
        if ((v82 & 1) != 0)
        {
          sub_100005D28(*(_QWORD *)(v77 + 56) + 32 * v81, (uint64_t)&v147);
        }
        else
        {
          v147 = 0u;
          v148 = 0u;
        }
        swift_bridgeObjectRelease(v80);
      }
      else
      {
        v147 = 0u;
        v148 = 0u;
        v65 = a3;
      }
      swift_bridgeObjectRelease(v77);
      if (*((_QWORD *)&v148 + 1))
      {
        v83 = swift_dynamicCast(&v144, &v147, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
        if ((_DWORD)v83)
        {
          if ((v144 & 1) != 0)
          {
            v140 = static os_log_type_t.info.getter(v83);
            v84 = swift_allocObject(v135, 112, 7);
            *(_OWORD *)(v84 + 16) = xmmword_10010F380;
            *(_QWORD *)&v147 = v127;
            v85 = dispatch thunk of CustomStringConvertible.description.getter(v128, v131);
            *(_QWORD *)(v84 + 56) = &type metadata for String;
            *(_QWORD *)(v84 + 64) = v130;
            *(_QWORD *)(v84 + 32) = v85;
            *(_QWORD *)(v84 + 40) = v86;
            *(_QWORD *)(v84 + 96) = &type metadata for String;
            *(_QWORD *)(v84 + 104) = v130;
            *(_QWORD *)(v84 + 72) = v123;
            *(_QWORD *)(v84 + 80) = a9;
            swift_bridgeObjectRetain(a9);
            v88 = (void *)static OS_os_log.default.getter(v87);
            os_log(_:dso:log:_:_:)(v140, &_mh_execute_header, v88, "Driver extension %{public}s cannot use the system thread group because it is associated with application %{public}s", 115, 2, v84);
            v89 = v84;
            v53 = a10;
            swift_bridgeObjectRelease(v89);

          }
        }
      }
      else
      {
        sub_1000124F8((uint64_t)&v147, &qword_100158018);
      }
      sub_100005D08(v150);
      v66 = v35;
      v67 = v125;
      v66(&v147, v53, v68);
      goto LABEL_52;
    }
  }
  else
  {
    v29 = sub_1000124F8((uint64_t)&v153, &qword_100157C78);
  }
  ((void (*)(unint64_t *__return_ptr, uint64_t))v23)(&v153, v29);
  v41 = v155;
  if (!v155)
  {
    sub_1000124F8((uint64_t)&v153, &qword_100157C78);
LABEL_11:
    swift_bridgeObjectRelease(0);
    v45 = (void *)0xE300000000000000;
    v43 = 4079420;
    goto LABEL_12;
  }
  v42 = v156;
  sub_100004DE4(&v153, v155);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 24))(v41, v42);
  v45 = v44;
  sub_100005D08(&v153);
  if (!v45)
    goto LABEL_11;
LABEL_12:
  v153 = 0;
  v154 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(v154);
  v153 = 0xD000000000000010;
  v154 = 0x800000010012A700;
  v46._countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v45);
  v47._countAndFlagsBits = 0xD000000000000017;
  v47._object = (void *)0x800000010012A8A0;
  String.append(_:)(v47);
  v48 = v153;
  v49 = v154;
  v50 = sub_1000122F8();
  v51 = swift_allocError(&type metadata for KMError, v50, 0, 0);
  *(_QWORD *)v52 = v48;
  *(_QWORD *)(v52 + 8) = v49;
  *(_OWORD *)(v52 + 16) = 0u;
  *(_OWORD *)(v52 + 32) = 0u;
  *(_OWORD *)(v52 + 48) = 0u;
  *(_QWORD *)(v52 + 64) = 0;
  *(_BYTE *)(v52 + 72) = 4;
  return swift_willThrow(v51);
}

void *DriverKitDaemonXPC.serverName.unsafeMutableAddressor()
{
  return &static DriverKitDaemonXPC.serverName;
}

unint64_t static DriverKitDaemonXPC.serverName.getter()
{
  return 0xD000000000000022;
}

void *DriverKitDaemonXPC.NotificationType.approvalsChanged.unsafeMutableAddressor()
{
  return &static DriverKitDaemonXPC.NotificationType.approvalsChanged;
}

unint64_t static DriverKitDaemonXPC.NotificationType.approvalsChanged.getter()
{
  return 0xD00000000000002BLL;
}

ValueMetadata *type metadata accessor for DriverKitDaemonXPC()
{
  return &type metadata for DriverKitDaemonXPC;
}

ValueMetadata *type metadata accessor for DriverKitDaemonXPC.NotificationType()
{
  return &type metadata for DriverKitDaemonXPC.NotificationType;
}

uint64_t sub_1000CCFF0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;

  v2 = *a1;
  v3 = *a2;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sub_1000169A4((_QWORD *)v2, (_QWORD *)v3);
}

uint64_t sub_1000CD01C()
{
  uint64_t v0;

  v0 = type metadata accessor for OSSignposter(0);
  sub_1000899CC(v0, qword_100171918);
  sub_100086A14(v0, (uint64_t)qword_100171918);
  return OSSignposter.init()();
}

uint64_t sub_1000CD064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for OSSignpostID(0);
  sub_1000899CC(v0, qword_100171938);
  sub_100086A14(v0, (uint64_t)qword_100171938);
  if (qword_100171910 != -1)
    swift_once(&qword_100171910, sub_1000CD01C);
  v1 = type metadata accessor for OSSignposter(0);
  v2 = sub_100086A14(v1, (uint64_t)qword_100171918);
  v3 = OSSignposter.logHandle.getter(v2);
  return OSSignpostID.init(log:)(v3);
}

uint64_t sub_1000CD0F4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 32, 7);
}

BOOL sub_1000CD118(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(*(_QWORD *)a2 + 16);
}

Swift::Int sub_1000CD134()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  return Hasher._finalize()();
}

void sub_1000CD178()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)v0 + 16));
}

Swift::Int sub_1000CD1A4(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)v1 + 16));
  return Hasher._finalize()();
}

uint64_t sub_1000CD1E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t MetatypeMetadata;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v1);
  MetatypeMetadata = swift_getMetatypeMetadata(a1);
  return String.init<A>(describing:)(&ObjectType, MetatypeMetadata);
}

uint64_t sub_1000CD228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t (*v19)(unint64_t *, uint64_t, uint64_t);
  void (*v20)(unint64_t *, _QWORD);
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t result;
  Swift::String v30;
  void *object;
  Swift::String v32;
  Swift::String v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const char *v38;
  Swift::String v39;
  Swift::String v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  void *v44;
  Swift::String v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v5 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    ObjectType = swift_getObjectType(a1);
    v13 = (_QWORD *)(v10 + 32);
    while (*v13 != a1)
    {
      v13 += 2;
      if (!--v11)
        goto LABEL_5;
    }
    swift_unknownObjectRetain(a1);
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(0xE000000000000000);
    v47 = 0xD000000000000019;
    v48 = 0x800000010012AA60;
    v30._countAndFlagsBits = sub_1000CD1E4(ObjectType);
    object = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(object);
    v32._countAndFlagsBits = 544175136;
    v32._object = (void *)0xE400000000000000;
    String.append(_:)(v32);
    v33._countAndFlagsBits = sub_1000CD1E4(a3);
    v34 = v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v34);
    v35 = 0xD000000000000019;
    v36 = 0x800000010012AA60;
    v37 = 84;
LABEL_14:
    v46 = v37;
    while (1)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v35, v36, "driverkitd/StateManagement.swift", 32, 2, v46, 0);
      __break(1u);
LABEL_16:
      v35 = 0xD00000000000001DLL;
      v46 = 88;
      v38 = "Cannot add self as subscriber";
LABEL_18:
      v36 = (unint64_t)(v38 - 32) | 0x8000000000000000;
    }
  }
LABEL_5:
  swift_bridgeObjectRelease(v10);
  v14 = swift_getObjectType(a1);
  if (a1 == v5)
    goto LABEL_16;
  v15 = v14;
  v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v14, a2);
  v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  sub_10008069C();
  v18 = static NSObject.== infix(_:_:)(v16, v17);

  if ((v18 & 1) == 0)
  {
    v35 = 0xD000000000000038;
    v46 = 91;
    v38 = "Cannot add subscriber with different state manager queue";
    goto LABEL_18;
  }
  v19 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(a4 + 32);
  swift_unknownObjectRetain(a1);
  v20 = (void (*)(unint64_t *, _QWORD))v19(&v47, a3, a4);
  v22 = v21;
  v23 = (_QWORD *)*v21;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
  *v22 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = sub_1000CF74C(0, v23[2] + 1, 1, v23);
    *v22 = v23;
  }
  v26 = v23[2];
  v25 = v23[3];
  if (v26 >= v25 >> 1)
  {
    v23 = sub_1000CF74C((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
    *v22 = v23;
  }
  v23[2] = v26 + 1;
  v27 = &v23[2 * v26];
  v27[4] = a1;
  v27[5] = a2;
  v20(&v47, 0);
  v28 = sub_1000CD5E0(a4);
  result = swift_bridgeObjectRelease(v28);
  if (!v28)
  {
    v47 = 0;
    v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(69);
    v39._countAndFlagsBits = 0xD00000000000002FLL;
    v39._object = (void *)0x800000010012AA10;
    String.append(_:)(v39);
    v40._countAndFlagsBits = sub_1000CD1E4(v15);
    v41 = v40._object;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v41);
    v42._countAndFlagsBits = 544175136;
    v42._object = (void *)0xE400000000000000;
    String.append(_:)(v42);
    v43._countAndFlagsBits = sub_1000CD1E4(a3);
    v44 = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v44);
    v45._countAndFlagsBits = 0x6373627573207327;
    v45._object = (void *)0xEE00737265626972;
    String.append(_:)(v45);
    v35 = v47;
    v36 = v48;
    v37 = 95;
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1000CD5E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v2 = v1;
  v4 = swift_allocObject(&unk_10014E9E8, 24, 7);
  *(_QWORD *)(v4 + 16) = _swiftEmptyArrayStorage;
  v5 = (_QWORD *)(v4 + 16);
  v6 = swift_allocObject(&unk_10014EA10, 24, 7);
  *(_QWORD *)(v6 + 16) = &_swiftEmptySetSingleton;
  v7 = swift_allocObject(&unk_10014EA10, 24, 7);
  *(_QWORD *)(v7 + 16) = &_swiftEmptySetSingleton;
  v8 = type metadata accessor for StateManagerWrapper();
  v9 = swift_allocObject(v8, 32, 7);
  *(_QWORD *)(v9 + 16) = v2;
  *(_QWORD *)(v9 + 24) = a1;
  swift_unknownObjectRetain(v2);
  LOBYTE(v2) = sub_1000CD724(v9, v6, v7, v4);
  swift_release(v9);
  if ((v2 & 1) != 0)
  {
    swift_beginAccess(v5, v13, 0, 0);
    v10 = swift_bridgeObjectRetain(*v5);
    v11 = sub_1000CDB50(v10);
    swift_release(v6);
    swift_release(v7);
  }
  else
  {
    swift_release(v6);
    swift_release(v7);
    v11 = 0;
  }
  swift_release(v4);
  return v11;
}

uint64_t sub_1000CD724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[3];
  uint64_t v34;
  _BYTE v35[24];
  _BYTE v36[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v36, 0, 0);
  v8 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v8);
  v9 = sub_1000CDA54(a1, v8);
  swift_bridgeObjectRelease(v8);
  if (!v9)
  {
    swift_beginAccess(a3 + 16, v35, 0, 0);
    v10 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain(v10);
    v11 = sub_1000CDA54(a1, v10);
    swift_bridgeObjectRelease(v10);
    if (v11)
      return 0;
    v31 = v7;
    swift_beginAccess(a3 + 16, v33, 33, 0);
    swift_retain(a1);
    sub_1000CF858(&v34, a1);
    swift_endAccess(v33);
    swift_release(v34);
    v13 = *(_QWORD *)(a1 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
    v33[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(ObjectType, v13);
    sub_1000D0840();
    v15 = v33[0];
    v16 = *(_QWORD *)(v33[0] + 16);
    if (v16)
    {
      v17 = type metadata accessor for StateManagerWrapper();
      v18 = swift_allocObject(v17, 32, 7);
      v19 = *(_OWORD *)(v15 + 32);
      *(_OWORD *)(v18 + 16) = v19;
      v20 = v19;
      swift_unknownObjectRetain_n(v19, 2);
      v21 = sub_1000CD724(v18, a2, a3, a4);
      swift_release(v18);
      swift_unknownObjectRelease(v20);
      if ((v21 & 1) == 0)
      {
LABEL_10:
        swift_release(v15);
        return 0;
      }
      v22 = 0;
      v23 = v16 - 1;
      while (v23 != v22)
      {
        v24 = v22 + 1;
        if ((unint64_t)(v22 + 1) >= *(_QWORD *)(v15 + 16))
        {
          __break(1u);
          goto LABEL_16;
        }
        v21 = swift_allocObject(v17, 32, 7);
        v25 = *(_OWORD *)(v15 + 16 * v22 + 48);
        *(_OWORD *)(v21 + 16) = v25;
        v26 = v25;
        swift_unknownObjectRetain_n(v25, 2);
        v27 = sub_1000CD724(v21, a2, a3, a4);
        swift_release(v21);
        swift_unknownObjectRelease(v26);
        ++v22;
        if ((v27 & 1) == 0)
          goto LABEL_10;
      }
    }
    swift_release(v15);
    swift_beginAccess(a3 + 16, v33, 33, 0);
    v28 = sub_1000CFA9C(a1);
    swift_endAccess(v33);
    swift_release(v28);
    swift_beginAccess(v31, v33, 33, 0);
    swift_retain(a1);
    sub_1000CF858(&v34, a1);
    swift_endAccess(v33);
    swift_release(v34);
    swift_beginAccess(a4 + 16, v33, 33, 0);
    v29 = swift_retain(a1);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
    v21 = *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10);
    v24 = *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v21 >= v24 >> 1)
LABEL_16:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v21 + 1, 1);
    v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, a1);
    specialized Array._endMutation()(v30);
    swift_endAccess(v33);
  }
  return 1;
}

BOOL sub_1000CDA54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BOOL8 result;
  Swift::UInt v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[9];

  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v4 = a2;
    else
      v4 = a2 & 0xFFFFFFFFFFFFFF8;
    v5 = swift_retain(a1);
    v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release(a1);
    return v6 & 1;
  }
  else if (*(_QWORD *)(a2 + 16)
         && (Hasher.init(_seed:)(v14, *(_QWORD *)(a2 + 40)),
             v8 = *(_QWORD *)(a1 + 16),
             Hasher._combine(_:)(v8),
             v9 = Hasher._finalize()(),
             v10 = -1 << *(_BYTE *)(a2 + 32),
             v11 = v9 & ~v10,
             ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v11) + 16);
      result = v13 == v8;
      if (v13 == v8)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_1000CDB50(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v19 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease(v1);
    v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    v17 = swift_retain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v1);
    swift_release(v2);
    v18 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1)
      __break(1u);
    v4 = v18 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3)
      return v2;
    v5 = 0;
    while (1)
    {
      v8 = v5 + 1;
      v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1))
        break;
      if (v5 != v1)
      {
        v9 = v19;
        if ((v19 & 0xC000000000000001) != 0)
        {
          v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v19);
          v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - (v5 + 1), v19);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v10 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v10)
            goto LABEL_34;
          v11 = *(_QWORD *)(v19 + 8 * v5 + 32);
          swift_retain(v11);
          if ((v1 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v1 >= v10)
            goto LABEL_37;
          v12 = *(_QWORD *)(v19 + 32 + 8 * v1);
          swift_retain(v12);
        }
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v19)
          || v19 < 0
          || (v19 & 0x4000000000000000) != 0)
        {
          v9 = sub_100059B20(v19);
          v19 = v9;
        }
        v13 = (v9 & 0xFFFFFFFFFFFFFF8) + 8 * v5;
        v14 = swift_release(*(_QWORD *)(v13 + 32));
        *(_QWORD *)(v13 + 32) = v12;
        specialized Array._endMutation()(v14);
        v15 = v19;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v19)
          || v19 < 0
          || (v19 & 0x4000000000000000) != 0)
        {
          v15 = sub_100059B20(v19);
          v19 = v15;
        }
        if ((v1 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v1 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;
        v6 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1;
        v7 = swift_release(*(_QWORD *)(v6 + 32));
        *(_QWORD *)(v6 + 32) = v11;
        specialized Array._endMutation()(v7);
      }
      v5 = v8;
      if (v4 == v8)
        return v19;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v2 = (uint64_t)sub_1000D09C0(v1);
    v19 = v2;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

uint64_t sub_1000CDD6C(uint64_t a1, char *a2, void (*a3)(char *, uint64_t, uint64_t), uint64_t a4)
{
  NSObject *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t (*v35)(void (*)(char *, uint64_t, uint64_t), uint64_t);
  char v36;
  uint64_t v37;
  void (*v38)(int64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  NSObject *v43;
  os_signpost_type_t v44;
  char *v45;
  uint8_t *v46;
  os_signpost_id_t v47;
  uint8_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t result;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_log_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  BOOL v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  char v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t ObjectType;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  Swift::Int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, unint64_t);
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  NSObject *v104;
  int v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int64_t v113;
  _QWORD *v114;
  void **v115;
  uint64_t v116;
  void *v117;
  Swift::String v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  os_log_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  NSObject *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  Swift::Int v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  char *v164;
  os_log_type_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  NSObject *v181;
  os_log_type_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  NSObject *v190;
  uint64_t v191;
  uint64_t v192;
  os_signpost_type_t v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  char *v197;
  uint64_t v198;
  uint8_t *v199;
  os_signpost_id_t v200;
  uint64_t (*v201)(char *, uint64_t);
  uint64_t v202;
  void (*v203)(char *, char *, uint64_t);
  uint64_t v204;
  void (*v205)(char *, uint64_t);
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t *v214;
  char *v215;
  char *v216;
  unint64_t *v217;
  uint64_t v218;
  char *v219;
  __int128 v220;
  char *v221;
  uint64_t v222;
  int64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  int64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  void (*v241)(char *, uint64_t, uint64_t);
  uint64_t v242;
  os_log_t v243;
  unint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;

  v241 = a3;
  v216 = a2;
  v234 = a1;
  v204 = type metadata accessor for OSSignpostError(0);
  v210 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v209 = (char *)&v202 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = type metadata accessor for Logger(0);
  v242 = *(_QWORD *)(v230 - 8);
  v7 = __chkstk_darwin(v230);
  v211 = (char *)&v202 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v214 = (uint64_t *)((char *)&v202 - v10);
  v11 = __chkstk_darwin(v9);
  v219 = (char *)&v202 - v12;
  v13 = __chkstk_darwin(v11);
  v221 = (char *)&v202 - v14;
  v15 = __chkstk_darwin(v13);
  v225 = (char *)&v202 - v16;
  __chkstk_darwin(v15);
  v236 = (char *)&v202 - v17;
  v18 = type metadata accessor for UUID(0);
  v239 = *(_QWORD *)(v18 - 8);
  v240 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v202 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = type metadata accessor for OSSignpostID(0);
  v21 = *(uint64_t **)(v213 - 8);
  v22 = __chkstk_darwin(v213);
  v208 = (char *)&v202 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v212 = (char *)&v202 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v202 - v26;
  v28 = type metadata accessor for OSSignposter(0);
  v244 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v30 = (int64_t)&v202 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DispatchPredicate(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (uint64_t *)((char *)&v202 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = *(uint64_t (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))(a4 + 8);
  v243 = v4;
  v237 = a4;
  *v34 = v35(v241, a4);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v32 + 104))(v34, enum case for DispatchPredicate.onQueue(_:), v31);
  v36 = _dispatchPreconditionTest(_:)(v34);
  (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v34, v31);
  if ((v36 & 1) == 0)
    goto LABEL_96;
  if (qword_100171910 != -1)
LABEL_97:
    swift_once(&qword_100171910, sub_1000CD01C);
  v37 = sub_100086A14(v28, (uint64_t)qword_100171918);
  v38 = *(void (**)(int64_t))(v244 + 16);
  v206 = v37;
  v38(v30);
  v39 = v213;
  if (qword_100171930 != -1)
    swift_once(&qword_100171930, sub_1000CD064);
  v40 = sub_100086A14(v39, (uint64_t)qword_100171938);
  v41 = (uint64_t (*)(char *, uint64_t, uint64_t))v21[2];
  v42 = v41(v27, v40, v39);
  v43 = OSSignposter.logHandle.getter(v42);
  v44 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v45 = v212;
    v41(v212, (uint64_t)v27, v39);
    v46 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v46 = 0;
    v47 = OSSignpostID.rawValue.getter(v46);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, v44, v47, "State refresh", "", v46, 2u);
    v48 = v46;
    v39 = v213;
    swift_slowDealloc(v48, -1, -1);

    v49 = v45;
    ((void (*)(char *, uint64_t))v21[1])(v45, v39);
  }
  else
  {

    v49 = v212;
  }
  v50 = v230;
  v203 = (void (*)(char *, char *, uint64_t))v41;
  v41(v49, (uint64_t)v27, v39);
  v51 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  v207 = OSSignpostIntervalState.init(id:isOpen:)(v49, 1);
  v52 = (void (*)(char *, uint64_t))v21[1];
  v52(v27, v39);
  v53 = (*(uint64_t (**)(int64_t, uint64_t))(v244 + 8))(v30, v28);
  v54 = UUID.init()(v53);
  v233 = UUID.uuidString.getter(v54);
  v27 = v55;
  (*(void (**)(char *, uint64_t))(v239 + 8))(v20, v240);
  v30 = v237;
  result = sub_1000CD5E0(v237);
  v224 = result;
  if (result)
  {
    v249 = (uint64_t)&_swiftEmptySetSingleton;
    v57 = sub_1000D3098();
    v58 = *(void (**)(char *, uint64_t, uint64_t))(v242 + 16);
    v28 = (uint64_t)v236;
    v240 = v57;
    v241 = v58;
    ((void (*)(char *))v58)(v236);
    swift_bridgeObjectRetain_n(v27, 2);
    v20 = v216;
    v59 = swift_bridgeObjectRetain_n(v216, 2);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.default.getter(v60);
    v62 = os_log_type_enabled(v60, v61);
    v238 = v27;
    v205 = v52;
    if (v62)
    {
      v63 = swift_slowAlloc(22, -1);
      v64 = swift_slowAlloc(64, -1);
      v246 = v64;
      *(_DWORD *)v63 = 136315394;
      swift_bridgeObjectRetain(v238);
      v248 = sub_1000055A0(v233, (unint64_t)v238, &v246);
      v21 = &v249;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease_n(v238, 3);
      *(_WORD *)(v63 + 12) = 2080;
      swift_bridgeObjectRetain(v20);
      v248 = sub_1000055A0(v234, (unint64_t)v20, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v63 + 14, v63 + 22);
      swift_bridgeObjectRelease_n(v20, 3);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "State refresh (id: %s, reason: %s): starting", (uint8_t *)v63, 0x16u);
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      v65 = v64;
      v27 = v238;
      swift_slowDealloc(v65, -1, -1);
      v66 = v63;
      v30 = v237;
      swift_slowDealloc(v66, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v20, 2);
      swift_bridgeObjectRelease_n(v27, 2);
    }
    v239 = *(_QWORD *)(v242 + 8);
    ((void (*)(uint64_t, uint64_t))v239)(v28, v50);
    v218 = type metadata accessor for StateManagerWrapper();
    v67 = swift_allocObject(v218, 32, 7);
    v68 = v243;
    *(_QWORD *)(v67 + 16) = v243;
    *(_QWORD *)(v67 + 24) = v30;
    swift_unknownObjectRetain(v68);
    sub_1000CF858(&v246, v67);
    swift_release(v246);
    v70 = v224 & 0xFFFFFFFFFFFFFF8;
    v228 = v224 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)v224 >> 62)
    {
      v177 = v224;
      if (v224 >= 0)
        v178 = v224 & 0xFFFFFFFFFFFFFF8;
      else
        v178 = v224;
      swift_bridgeObjectRetain(v224);
      v71 = _CocoaArrayWrapper.endIndex.getter(v178);
      swift_bridgeObjectRelease(v177);
      v70 = v228;
      if (v71)
        goto LABEL_14;
    }
    else
    {
      v71 = *(_QWORD *)((v224 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v71)
      {
LABEL_14:
        v227 = v224 & 0xC000000000000001;
        v222 = v224 + 32;
        v217 = &v247;
        *(_QWORD *)&v69 = 136315650;
        v220 = v69;
        v215 = (char *)&type metadata for Any + 8;
        *(_QWORD *)&v69 = 136315906;
        v229 = v69;
        v226 = v71;
        v72 = 0;
        while (1)
        {
          if (v227)
          {
            v30 = specialized _ArrayBuffer._getElementSlowPath(_:)(v72, v224);
            v73 = __OFADD__(v72, 1);
            v74 = (char *)(v72 + 1);
            if (v73)
              goto LABEL_94;
          }
          else
          {
            if (v72 >= *(_QWORD *)(v70 + 16))
              goto LABEL_95;
            v30 = *(_QWORD *)(v222 + 8 * v72);
            swift_retain(v30);
            v73 = __OFADD__(v72, 1);
            v74 = (char *)(v72 + 1);
            if (v73)
              goto LABEL_94;
          }
          v236 = v74;
          v75 = v249;
          if ((v249 & 0xC000000000000001) == 0)
            break;
          if (v249 < 0)
            v76 = v249;
          else
            v76 = v249 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v249);
          v77 = v30;
          v78 = __CocoaSet.contains(_:)(v30, v76);
          swift_bridgeObjectRelease(v75);
          v79 = v225;
          v72 = (unint64_t)v236;
          if ((v78 & 1) != 0)
            goto LABEL_28;
LABEL_15:
          swift_release(v77);
LABEL_16:
          v70 = v228;
          if (v72 == v226)
            goto LABEL_102;
        }
        if (*(_QWORD *)(v249 + 16))
        {
          v77 = v30;
          Hasher.init(_seed:)(&v246, *(_QWORD *)(v249 + 40));
          v30 = *(_QWORD *)(v30 + 16);
          Hasher._combine(_:)(v30);
          v92 = Hasher._finalize()();
          v93 = -1 << *(_BYTE *)(v75 + 32);
          v94 = v92 & ~v93;
          v95 = v75 + 56;
          if (((*(_QWORD *)(v75 + 56 + ((v94 >> 3) & 0xFFFFFFFFFFFFF8)) >> v94) & 1) != 0)
          {
            v96 = ~v93;
            v97 = *(_QWORD *)(v75 + 48);
            v79 = v225;
            v72 = (unint64_t)v236;
            while (*(_QWORD *)(*(_QWORD *)(v97 + 8 * v94) + 16) != v30)
            {
              v94 = (v94 + 1) & v96;
              if (((*(_QWORD *)(v95 + ((v94 >> 3) & 0xFFFFFFFFFFFFF8)) >> v94) & 1) == 0)
                goto LABEL_15;
            }
LABEL_28:
            v223 = v77;
            v28 = *(_QWORD *)(v77 + 16);
            v80 = *(_QWORD *)(v77 + 24);
            v30 = (int64_t)v79;
            v241(v79, v240, v50);
            swift_unknownObjectRetain_n(v28, 3);
            swift_bridgeObjectRetain_n(v27, 2);
            v81 = swift_bridgeObjectRetain_n(v20, 2);
            v82 = Logger.logObject.getter(v81);
            v83 = static os_log_type_t.default.getter(v82);
            if (os_log_type_enabled(v82, v83))
            {
              v84 = swift_slowAlloc(32, -1);
              v244 = v80;
              v85 = v84;
              v86 = swift_slowAlloc(96, -1);
              v246 = v86;
              *(_DWORD *)v85 = v220;
              swift_bridgeObjectRetain(v27);
              *(_QWORD *)(v85 + 4) = sub_1000055A0(v233, (unint64_t)v27, &v246);
              swift_bridgeObjectRelease_n(v27, 3);
              *(_WORD *)(v85 + 12) = 2080;
              swift_bridgeObjectRetain(v20);
              *(_QWORD *)(v85 + 14) = sub_1000055A0(v234, (unint64_t)v20, &v246);
              swift_bridgeObjectRelease_n(v20, 3);
              *(_WORD *)(v85 + 22) = 2080;
              ObjectType = swift_getObjectType(v28);
              v88 = sub_1000CD1E4(ObjectType);
              v90 = v89;
              *(_QWORD *)(v85 + 24) = sub_1000055A0(v88, v89, &v246);
              swift_unknownObjectRelease_n(v28, 2);
              swift_bridgeObjectRelease(v90);
              _os_log_impl((void *)&_mh_execute_header, v82, v83, "State refresh (id: %s, reason: %s): Notifying %s of state update", (uint8_t *)v85, 0x20u);
              swift_arrayDestroy(v86, 3, v215);
              swift_slowDealloc(v86, -1, -1);
              v91 = v85;
              v80 = v244;
              swift_slowDealloc(v91, -1, -1);

            }
            else
            {

              swift_unknownObjectRelease_n(v28, 2);
              swift_bridgeObjectRelease_n(v20, 2);
              swift_bridgeObjectRelease_n(v27, 2);
            }
            ((void (*)(int64_t, uint64_t))v239)(v30, v50);
            v98 = swift_getObjectType(v28);
            v99 = *(uint64_t (**)(uint64_t, unint64_t))(v80 + 40);
            v235 = v98;
            v100 = v99(v98, v80);
            if (!v100)
            {
              v21 = v214;
              v241((char *)v214, v240, v50);
              swift_bridgeObjectRetain_n(v27, 2);
              swift_bridgeObjectRetain_n(v20, 2);
              v124 = swift_unknownObjectRetain_n(v28, 2);
              v125 = Logger.logObject.getter(v124);
              v126 = static os_log_type_t.default.getter(v125);
              if (os_log_type_enabled(v125, v126))
              {
                v127 = swift_slowAlloc(32, -1);
                v128 = swift_slowAlloc(96, -1);
                v246 = v128;
                *(_DWORD *)v127 = v220;
                swift_bridgeObjectRetain(v238);
                *(_QWORD *)(v127 + 4) = sub_1000055A0(v233, (unint64_t)v238, &v246);
                swift_bridgeObjectRelease_n(v238, 3);
                *(_WORD *)(v127 + 12) = 2080;
                swift_bridgeObjectRetain(v20);
                *(_QWORD *)(v127 + 14) = sub_1000055A0(v234, (unint64_t)v20, &v246);
                swift_bridgeObjectRelease_n(v20, 3);
                *(_WORD *)(v127 + 22) = 2080;
                v129 = sub_1000CD1E4(v235);
                v131 = v130;
                *(_QWORD *)(v127 + 24) = sub_1000055A0(v129, v130, &v246);
                swift_unknownObjectRelease_n(v28, 2);
                swift_bridgeObjectRelease(v131);
                _os_log_impl((void *)&_mh_execute_header, v125, v126, "State refresh (id: %s, reason: %s): %s did not update state", (uint8_t *)v127, 0x20u);
                swift_arrayDestroy(v128, 3, (char *)&type metadata for Any + 8);
                v132 = v128;
                v27 = v238;
                swift_slowDealloc(v132, -1, -1);
                swift_slowDealloc(v127, -1, -1);
                swift_unknownObjectRelease(v28);
                swift_release(v223);

              }
              else
              {

                swift_bridgeObjectRelease_n(v20, 2);
                swift_bridgeObjectRelease_n(v27, 2);
                swift_release(v223);
                swift_unknownObjectRelease_n(v28, 3);
              }
              ((void (*)(uint64_t *, uint64_t))v239)(v21, v50);
              goto LABEL_91;
            }
            v101 = v100;
            v102 = v221;
            v241(v221, v240, v50);
            swift_bridgeObjectRetain_n(v27, 2);
            swift_bridgeObjectRetain_n(v20, 2);
            swift_unknownObjectRetain_n(v28, 2);
            swift_bridgeObjectRetain(v101);
            v104 = Logger.logObject.getter(v103);
            v105 = static os_log_type_t.default.getter(v104);
            v106 = os_log_type_enabled(v104, (os_log_type_t)v105);
            v242 = v28;
            if (v106)
            {
              LODWORD(v237) = v105;
              v243 = v104;
              v244 = v80;
              v107 = v28;
              v108 = swift_slowAlloc(42, -1);
              v232 = swift_slowAlloc(128, -1);
              v248 = v232;
              *(_DWORD *)v108 = v229;
              swift_bridgeObjectRetain(v27);
              v246 = sub_1000055A0(v233, (unint64_t)v27, &v248);
              v109 = v217;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, v217, v108 + 4, v108 + 12);
              swift_bridgeObjectRelease_n(v27, 3);
              *(_WORD *)(v108 + 12) = 2080;
              swift_bridgeObjectRetain(v20);
              v246 = sub_1000055A0(v234, (unint64_t)v20, &v248);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, v109, v108 + 14, v108 + 22);
              swift_bridgeObjectRelease_n(v20, 3);
              *(_WORD *)(v108 + 22) = 2080;
              v110 = sub_1000CD1E4(v235);
              v112 = v111;
              v246 = sub_1000055A0(v110, v111, &v248);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, v109, v108 + 24, v108 + 32);
              swift_unknownObjectRelease_n(v107, 2);
              swift_bridgeObjectRelease(v112);
              *(_WORD *)(v108 + 32) = 2080;
              v113 = *(_QWORD *)(v101 + 16);
              if (v113)
              {
                v245 = _swiftEmptyArrayStorage;
                sub_10000C958(0, v113, 0);
                v114 = v245;
                v115 = (void **)(v101 + 40);
                do
                {
                  v116 = (uint64_t)*(v115 - 1);
                  v117 = *v115;
                  v246 = 538976288;
                  v247 = 0xE400000000000000;
                  swift_bridgeObjectRetain(v117);
                  v118._countAndFlagsBits = v116;
                  v118._object = v117;
                  String.append(_:)(v118);
                  swift_bridgeObjectRelease(v117);
                  v120 = v246;
                  v119 = v247;
                  v245 = v114;
                  v122 = v114[2];
                  v121 = v114[3];
                  if (v122 >= v121 >> 1)
                  {
                    sub_10000C958(v121 > 1, v122 + 1, 1);
                    v114 = v245;
                  }
                  v115 += 2;
                  v114[2] = v122 + 1;
                  v123 = &v114[2 * v122];
                  v123[4] = v120;
                  v123[5] = v119;
                  --v113;
                }
                while (v113);
                v50 = v230;
                v102 = v221;
              }
              else
              {
                v114 = _swiftEmptyArrayStorage;
              }
              v246 = (uint64_t)v114;
              v27 = (char *)(v108 + 34);
              v134 = sub_100005C88((uint64_t *)&unk_10015A5D0);
              v135 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
              v136 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v134, v135);
              v138 = v137;
              swift_bridgeObjectRelease(v114);
              v246 = sub_1000055A0(v136, v138, &v248);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, v217, v108 + 34, v108 + 42);
              swift_bridgeObjectRelease_n(v101, 2);
              swift_bridgeObjectRelease(v138);
              v139 = v243;
              _os_log_impl((void *)&_mh_execute_header, v243, (os_log_type_t)v237, "State refresh (id: %s, reason: %s): %s updated state:\n%s", (uint8_t *)v108, 0x2Au);
              v140 = v232;
              swift_arrayDestroy(v232, 4, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v140, -1, -1);
              swift_slowDealloc(v108, -1, -1);

              ((void (*)(char *, uint64_t))v239)(v102, v50);
              v20 = v216;
              v28 = v242;
              v80 = v244;
            }
            else
            {

              swift_bridgeObjectRelease_n(v101, 2);
              swift_unknownObjectRelease_n(v28, 2);
              swift_bridgeObjectRelease_n(v20, 2);
              swift_bridgeObjectRelease_n(v27, 2);
              ((void (*)(char *, uint64_t))v239)(v102, v50);
            }
            v141 = (*(uint64_t (**)(uint64_t, unint64_t))(v80 + 16))(v235, v80);
            v142 = v141;
            v143 = *(_QWORD *)(v141 + 16);
            v21 = (uint64_t *)v218;
            if (v143)
            {
              v246 = (uint64_t)_swiftEmptyArrayStorage;
              specialized ContiguousArray.reserveCapacity(_:)(v143);
              v144 = 0;
              do
              {
                v145 = v144 + 1;
                v146 = v142 + 16 * v144;
                v147 = swift_allocObject(v21, 32, 7);
                v148 = *(_OWORD *)(v146 + 32);
                *(_OWORD *)(v147 + 16) = v148;
                v149 = swift_unknownObjectRetain(v148);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v149);
                v27 = *(char **)(v246 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
                v150 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v147);
                specialized ContiguousArray._endMutation()(v150);
                v144 = v145;
              }
              while (v143 != v145);
              v30 = v246;
              swift_bridgeObjectRelease(v142);
            }
            else
            {
              swift_bridgeObjectRelease(v141);
              v30 = (int64_t)_swiftEmptyArrayStorage;
            }
            v151 = v219;
            if (!((unint64_t)v30 >> 62))
            {
              v152 = *(NSObject **)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (v152)
                goto LABEL_62;
              goto LABEL_90;
            }
            if (v30 < 0)
              v176 = v30;
            else
              v176 = v30 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v30);
            v152 = _CocoaArrayWrapper.endIndex.getter(v176);
            swift_bridgeObjectRelease(v30);
            if (!v152)
            {
LABEL_90:
              swift_unknownObjectRelease(v28);
              swift_bridgeObjectRelease(v30);
              swift_release(v223);
              v27 = v238;
              goto LABEL_91;
            }
LABEL_62:
            v153 = 0;
            v244 = v30 & 0xC000000000000001;
            v232 = v30 & 0xFFFFFFFFFFFFFF8;
            v231 = v30 + 32;
            v237 = v30;
            v243 = v152;
            while (1)
            {
              if (v244)
              {
                v21 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v153, v30);
                v73 = __OFADD__(v153++, 1);
                if (v73)
                  goto LABEL_92;
              }
              else
              {
                if (v153 >= *(_QWORD *)(v232 + 16))
                  goto LABEL_93;
                v21 = *(uint64_t **)(v231 + 8 * v153);
                swift_retain(v21);
                v73 = __OFADD__(v153++, 1);
                if (v73)
                {
LABEL_92:
                  __break(1u);
LABEL_93:
                  __break(1u);
LABEL_94:
                  __break(1u);
LABEL_95:
                  __break(1u);
LABEL_96:
                  __break(1u);
                  goto LABEL_97;
                }
              }
              v154 = v249;
              if ((v249 & 0xC000000000000001) != 0)
              {
                if (v249 < 0)
                  v155 = v249;
                else
                  v155 = v249 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(v249);
                v156 = swift_retain(v21);
                v157 = __CocoaSet.contains(_:)(v156, v155);
                swift_bridgeObjectRelease(v154);
                swift_release(v21);
                if ((v157 & 1) == 0)
                {
LABEL_82:
                  v241(v151, v240, v50);
                  v27 = v238;
                  swift_bridgeObjectRetain_n(v238, 2);
                  swift_bridgeObjectRetain_n(v20, 2);
                  swift_unknownObjectRetain_n(v28, 2);
                  v162 = swift_retain_n(v21, 2);
                  v163 = Logger.logObject.getter(v162);
                  v164 = v151;
                  v165 = static os_log_type_t.default.getter(v163);
                  if (os_log_type_enabled(v163, v165))
                  {
                    v166 = swift_slowAlloc(42, -1);
                    v167 = (unint64_t)v27;
                    v27 = (char *)swift_slowAlloc(128, -1);
                    v246 = (uint64_t)v27;
                    *(_DWORD *)v166 = v229;
                    swift_bridgeObjectRetain(v167);
                    *(_QWORD *)(v166 + 4) = sub_1000055A0(v233, v167, &v246);
                    swift_bridgeObjectRelease_n(v167, 3);
                    *(_WORD *)(v166 + 12) = 2080;
                    swift_bridgeObjectRetain(v20);
                    *(_QWORD *)(v166 + 14) = sub_1000055A0(v234, (unint64_t)v20, &v246);
                    swift_bridgeObjectRelease_n(v20, 3);
                    *(_WORD *)(v166 + 22) = 2080;
                    v168 = sub_1000CD1E4(v235);
                    v170 = v169;
                    *(_QWORD *)(v166 + 24) = sub_1000055A0(v168, v169, &v246);
                    swift_unknownObjectRelease_n(v242, 2);
                    swift_bridgeObjectRelease(v170);
                    *(_WORD *)(v166 + 32) = 2080;
                    v28 = v242;
                    v171 = swift_getObjectType(v21[2]);
                    v172 = sub_1000CD1E4(v171);
                    v174 = v173;
                    *(_QWORD *)(v166 + 34) = sub_1000055A0(v172, v173, &v246);
                    swift_release_n(v21, 2);
                    swift_bridgeObjectRelease(v174);
                    _os_log_impl((void *)&_mh_execute_header, v163, v165, "State refresh (id: %s, reason: %s): %s updated state, will notify subscriber: %s", (uint8_t *)v166, 0x2Au);
                    swift_arrayDestroy(v27, 4, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v27, -1, -1);
                    v175 = v166;
                    v50 = v230;
                    swift_slowDealloc(v175, -1, -1);

                  }
                  else
                  {

                    swift_release_n(v21, 2);
                    swift_unknownObjectRelease_n(v28, 2);
                    swift_bridgeObjectRelease_n(v20, 2);
                    swift_bridgeObjectRelease_n(v27, 2);
                  }
                  ((void (*)(char *, uint64_t))v239)(v164, v50);
                  v151 = v164;
                  sub_1000CF858(&v246, (uint64_t)v21);
                  swift_release(v246);
                  v30 = v237;
                  goto LABEL_64;
                }
              }
              else
              {
                if (!*(_QWORD *)(v249 + 16))
                  goto LABEL_82;
                Hasher.init(_seed:)(&v246, *(_QWORD *)(v249 + 40));
                v27 = (char *)v21[2];
                Hasher._combine(_:)((Swift::UInt)v27);
                v158 = Hasher._finalize()();
                v159 = -1 << *(_BYTE *)(v154 + 32);
                v160 = v158 & ~v159;
                if (((*(_QWORD *)(v154 + 56 + ((v160 >> 3) & 0xFFFFFFFFFFFFF8)) >> v160) & 1) == 0)
                  goto LABEL_82;
                v161 = ~v159;
                while (*(char **)(*(_QWORD *)(*(_QWORD *)(v154 + 48) + 8 * v160) + 16) != v27)
                {
                  v160 = (v160 + 1) & v161;
                  if (((*(_QWORD *)(v154 + 56 + ((v160 >> 3) & 0xFFFFFFFFFFFFF8)) >> v160) & 1) == 0)
                    goto LABEL_82;
                }
              }
              swift_release(v21);
LABEL_64:
              if ((os_log_t)v153 == v243)
                goto LABEL_90;
            }
          }
          v133 = v77;
        }
        else
        {
          v133 = v30;
        }
        swift_release(v133);
LABEL_91:
        v72 = (unint64_t)v236;
        goto LABEL_16;
      }
    }
LABEL_102:
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v249);
    v179 = v211;
    v241(v211, v240, v50);
    swift_bridgeObjectRetain_n(v20, 2);
    swift_bridgeObjectRetain(v27);
    v181 = Logger.logObject.getter(v180);
    v182 = static os_log_type_t.default.getter(v181);
    if (os_log_type_enabled(v181, v182))
    {
      v183 = swift_slowAlloc(22, -1);
      v184 = swift_slowAlloc(64, -1);
      v246 = v184;
      *(_DWORD *)v183 = 136315394;
      swift_bridgeObjectRetain(v27);
      v248 = sub_1000055A0(v233, (unint64_t)v27, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v183 + 4, v183 + 12);
      swift_bridgeObjectRelease_n(v27, 3);
      *(_WORD *)(v183 + 12) = 2080;
      swift_bridgeObjectRetain(v20);
      v248 = sub_1000055A0(v234, (unint64_t)v20, &v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v183 + 14, v183 + 22);
      swift_bridgeObjectRelease_n(v20, 3);
      _os_log_impl((void *)&_mh_execute_header, v181, v182, "State refresh (id: %s, reason: %s): completed", (uint8_t *)v183, 0x16u);
      swift_arrayDestroy(v184, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v184, -1, -1);
      swift_slowDealloc(v183, -1, -1);

      v185 = v211;
    }
    else
    {

      swift_bridgeObjectRelease_n(v20, 2);
      swift_bridgeObjectRelease_n(v27, 2);
      v185 = v179;
    }
    v186 = ((uint64_t (*)(char *, uint64_t))v239)(v185, v50);
    v187 = v210;
    v188 = v209;
    v189 = v208;
    v190 = OSSignposter.logHandle.getter(v186);
    v191 = v207;
    v192 = OSSignpostIntervalState.signpostID.getter();
    v193 = static os_signpost_type_t.end.getter(v192);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v194 = swift_retain(v191);
      checkForErrorAndConsumeState(state:)(v194);
      swift_release(v191);
      v195 = v204;
      if ((*(unsigned int (**)(char *, uint64_t))(v187 + 88))(v188, v204) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v196 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v187 + 8))(v188, v195);
        v196 = "";
      }
      v197 = v212;
      v198 = v213;
      v203(v212, v189, v213);
      v199 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v199 = 0;
      v200 = OSSignpostID.rawValue.getter(v199);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v190, v193, v200, "State refresh", v196, v199, 2u);
      swift_slowDealloc(v199, -1, -1);

      v201 = (uint64_t (*)(char *, uint64_t))v205;
      v205(v189, v198);
      swift_release(v191);
      return v201(v197, v198);
    }
    else
    {

      v205(v189, v213);
      return swift_release(v191);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1000CF74C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005C88(&qword_10015B9E8);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000D1214(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000CF858(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  Swift::UInt v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[9];
  uint64_t v25;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_retain(a2);
    swift_bridgeObjectRetain(v6);
    v8 = __CocoaSet.member(for:)(a2, v7);
    swift_release(a2);
    if (v8)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v25 = v8;
      v9 = type metadata accessor for StateManagerWrapper();
      swift_unknownObjectRetain(v8);
      swift_dynamicCast(v24, &v25, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
      *a1 = v24[0];
      swift_unknownObjectRelease(v8);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v19 = sub_1000D05A0(v7, result + 1);
    v24[0] = v19;
    v20 = *(_QWORD *)(v19 + 16);
    if (*(_QWORD *)(v19 + 24) <= v20)
    {
      v23 = v20 + 1;
      swift_retain(a2);
      sub_1000D0150(v23);
      v21 = v24[0];
    }
    else
    {
      v21 = v19;
      swift_retain(a2);
    }
    sub_1000D07A0(a2, v21);
    v18 = *v3;
    *v3 = v21;
    goto LABEL_18;
  }
  Hasher.init(_seed:)(v24, *(_QWORD *)(v6 + 40));
  v11 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v11);
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v6 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
  {
LABEL_11:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v24[0] = *v2;
    *v2 = 0x8000000000000000;
    v17 = swift_retain(a2);
    sub_1000D0AB4(v17, v14, isUniquelyReferenced_nonNull_native);
    v18 = *v2;
    *v2 = v24[0];
LABEL_18:
    swift_bridgeObjectRelease(v18);
    *a1 = a2;
    return 1;
  }
  v15 = ~v13;
  while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) + 16) != v11)
  {
    v14 = (v14 + 1) & v15;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  v22 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v14);
  *a1 = v22;
  swift_retain(v22);
  return 0;
}

unint64_t sub_1000CFA9C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  Swift::UInt v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[9];

  v2 = v1;
  v4 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v2;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v6 = swift_retain(a1);
    v7 = __CocoaSet.contains(_:)(v6, v5);
    swift_release(a1);
    if ((v7 & 1) != 0)
    {
      v8 = sub_1000CFC1C(v5, a1);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  Hasher.init(_seed:)(v18, *(_QWORD *)(v4 + 40));
  v9 = *(_QWORD *)(a1 + 16);
  Hasher._combine(_:)(v9);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    return 0;
  v13 = ~v11;
  while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) + 16) != v9)
  {
    v12 = (v12 + 1) & v13;
    if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      return 0;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v16 = *v2;
  v18[0] = *v2;
  *v2 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000CFD28();
    v16 = v18[0];
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v12);
  sub_1000D03F8(v12);
  v17 = *v2;
  *v2 = v18[0];
  swift_bridgeObjectRelease(v17);
  return v8;
}

unint64_t sub_1000CFC1C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::UInt v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t result;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[9];
  Swift::Int v18;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_1000D05A0(v7, v6);
  v18 = v8;
  Hasher.init(_seed:)(v17, *(_QWORD *)(v8 + 40));
  v9 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v9);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  result = v10 & ~v11;
  v13 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v14 = ~v11;
    v15 = *(_QWORD *)(v8 + 48);
    while (1)
    {
      v16 = *(_QWORD *)(v15 + 8 * result);
      if (*(_QWORD *)(v16 + 16) == v9)
        break;
      result = (result + 1) & v14;
      if (((*(_QWORD *)(v13 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
      {
        __break(1u);
        break;
      }
    }
    result = sub_1000D03F8(result);
    if (v9 == *(_QWORD *)(v16 + 16))
    {
      *v3 = v18;
      return v16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1000CFD28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100005C88(&qword_10015B9E0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)swift_retain(v17);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_1000CFED0(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::Int *v28;
  uint64_t v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_10015B9E0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(*(_QWORD *)(v20 + 16));
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
    result = swift_retain(v20);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000D0150(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005C88(&qword_10015B9E0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(*(_QWORD *)(v20 + 16));
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t sub_1000D03F8(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v18, *(_QWORD *)(v3 + 40));
        Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

Swift::Int sub_1000D05A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_100005C88(&qword_10015B9E0);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()();
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for StateManagerWrapper();
      do
      {
        v21[0] = v7;
        swift_dynamicCast(&v22, v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_1000D0150(v16 + 1);
          v4 = v23;
        }
        v9 = v22;
        Hasher.init(_seed:)(v21, *(_QWORD *)(v4 + 40));
        Hasher._combine(_:)(*(_QWORD *)(v9 + 16));
        result = Hasher._finalize()();
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()();
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

unint64_t sub_1000D07A0(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, *(_QWORD *)(a2 + 40));
  Hasher._combine(_:)(*(_QWORD *)(a1 + 16));
  v4 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_1000D0840()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v3 = v2 - 2;
  if (v2 >= 2)
  {
    v4 = 0;
    while (1)
    {
      v15 = 0;
      swift_stdlib_random(&v15, 8);
      v6 = (v15 * (unsigned __int128)v2) >> 64;
      if (v2 > v15 * v2)
      {
        v7 = -(uint64_t)v2 % v2;
        if (v7 > v15 * v2)
        {
          do
          {
            v15 = 0;
            swift_stdlib_random(&v15, 8);
          }
          while (v7 > v15 * v2);
          v6 = (v15 * (unsigned __int128)v2) >> 64;
        }
      }
      v8 = v4 + v6;
      if (__OFADD__(v4, v6))
        break;
      if (v4 != v8)
      {
        v9 = v1[2];
        if (v4 >= v9)
          goto LABEL_19;
        if (v8 >= v9)
          goto LABEL_20;
        v13 = *(_OWORD *)&v1[2 * v4 + 4];
        v14 = *(_OWORD *)&v1[2 * v8 + 4];
        swift_unknownObjectRetain(v1[2 * v4 + 4]);
        swift_unknownObjectRetain(v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
          v1 = (_QWORD *)sub_1000D1200(v1);
        if (v4 >= v1[2])
          goto LABEL_21;
        v10 = v1 + 4;
        v11 = v1[2 * v4 + 4];
        *(_OWORD *)&v1[2 * v4 + 4] = v14;
        swift_unknownObjectRelease(v11);
        if (v8 >= v1[2])
          goto LABEL_22;
        v12 = v10[2 * v8];
        *(_OWORD *)&v10[2 * v8] = v13;
        swift_unknownObjectRelease(v12);
        *(_QWORD *)v0 = v1;
      }
      --v2;
      if (v4++ == v3)
        return;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

_QWORD *sub_1000D09C0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100005C88(&qword_10015BB70);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1000D0FF8((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_1000D0AB4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_12;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000D0150(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1000CFD28();
      goto LABEL_12;
    }
    sub_1000CFED0(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v17, *(_QWORD *)(*v3 + 40));
  v10 = *(_QWORD *)(v5 + 16);
  Hasher._combine(_:)(v10);
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    result = type metadata accessor for StateManagerWrapper();
    while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2) + 16) != v10)
    {
      a2 = (a2 + 1) & v12;
      if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_12;
    }
    goto LABEL_15;
  }
LABEL_12:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (!v15)
  {
    *(_QWORD *)(v13 + 16) = v16;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000D0C00(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015B9E8);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100005C88(&qword_10015B9F0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void (*sub_1000D0D88(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1000D0DDC(v6, a2, a3);
  return sub_10000C4BC;
}

uint64_t *sub_1000D0DDC(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_1000D0E48;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D0E48(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t type metadata accessor for StateManagerWrapper()
{
  return objc_opt_self(_TtC10driverkitdP33_622D3D8EFA33E5821DB6E6A2F22719EA19StateManagerWrapper);
}

uint64_t *assignWithCopy for StateUpdateResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t *assignWithTake for StateUpdateResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateUpdateResult(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StateUpdateResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for StateUpdateResult()
{
  return &type metadata for StateUpdateResult;
}

unint64_t sub_1000D0F90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001719D0[0];
  if (!qword_1001719D0[0])
  {
    v1 = type metadata accessor for StateManagerWrapper();
    result = swift_getWitnessTable(&unk_10011A1E4, v1);
    atomic_store(result, qword_1001719D0);
  }
  return result;
}

uint64_t sub_1000D0FD4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D0FF8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18[4];

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10001284C((unint64_t *)&unk_10015BA00, &qword_10015B9F8, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100005C88(&qword_10015B9F8);
          v13 = sub_1000D0D88(v18, i, a3);
          v15 = *v14;
          swift_retain(*v14);
          ((void (*)(uint64_t **, _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for StateManagerWrapper();
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000D1200(_QWORD *a1)
{
  return sub_1000D0C00(0, a1[2], 0, a1);
}

uint64_t sub_1000D1214(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100005C88(&qword_10015B9F0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000D1320(uint64_t a1)
{
  return sub_1000D132C(a1, (uint64_t (*)(void))&mach_error_string);
}

uint64_t sub_1000D132C(uint64_t a1, uint64_t (*a2)(void))
{
  if (a2())
    return String.init(cString:)();
  else
    return 0x6E776F6E6B6E7528;
}

uint64_t sub_1000D1368(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1000122B4(a1, a2);
  sub_1000D96F0(a1, a2);
  v5 = v4;
  sub_100011F40(a1, a2);
  return v5;
}

uint64_t sub_1000D13B4(uint64_t a1, unint64_t a2)
{
  return sub_1000D13CC(a1, a2, 32, COERCE_DOUBLE(0x2000000000));
}

uint64_t sub_1000D13CC(uint64_t a1, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  double v10;
  uint64_t v11;

  v8 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = a4;
  v11 = __DataStorage.init(length:)(a3);
  sub_1000D80D0((int *)&v10, 0);
  v11 |= 0x4000000000000000uLL;
  sub_1000122B4(a1, a2);
  sub_1000D9A20((uint64_t)&v10);
  sub_100011F40(a1, a2);
  return *(_QWORD *)&v10;
}

void sub_1000D1490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1000D14F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  v5 = v2;
  v6 = v3;
  v7 = BYTE2(v3);
  v8 = BYTE3(v3);
  v9 = BYTE4(v3);
  v10 = BYTE5(v3);
  sub_1000D1700((uint64_t)&v5, v2, v3);
  if (v0)
  {
    sub_100011F40(v2, v3);
    __break(1u);
    JUMPOUT(0x1000D16D0);
  }
  result = sub_100011F40(v2, v3);
  *v1 = v11;
  return result;
}

void sub_1000D1700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }
}

uint64_t sub_1000D1734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v5;
  uint64_t result;

  result = a5(a1, BYTE6(a3), a4);
  *v5 = result;
  return result;
}

id sub_1000D17A0()
{
  NSString v0;
  id v1;
  id v2;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend(v0, "UTF8String");
  v2 = v0;
  return v1;
}

uint64_t sub_1000D17DC(Swift::Int count, uint64_t a2, void *a3)
{
  Swift::String v6;
  Swift::String v7;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  _QWORD v16[2];
  _QWORD v17[2];
  uint64_t v18;
  void *v19;

  v6._countAndFlagsBits = 9;
  v6._object = (void *)0xE100000000000000;
  v7 = String.init(repeating:count:)(v6, count);
  countAndFlagsBits = v7._countAndFlagsBits;
  object = v7._object;
  v18 = a2;
  v19 = a3;
  v17[0] = 10;
  v17[1] = 0xE100000000000000;
  v16[0] = 10;
  v16[1] = 0xE100000000000000;
  String.append(_:)(v7);
  v10 = sub_100026250();
  v11 = ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, void *, void *, void *, unint64_t, unint64_t, unint64_t))StringProtocol.replacingOccurrences<A, B>(of:with:options:range:))(v17, v16, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v10, v10, v10);
  v13 = v12;
  swift_bridgeObjectRelease(0xE100000000000000);
  v18 = countAndFlagsBits;
  v19 = object;
  swift_bridgeObjectRetain(object);
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v13);
  return v18;
}

uint64_t sub_1000D18C8(uint64_t a1, uint64_t a2)
{
  return sub_1000D18E0(a1, a2, 32, COERCE_DOUBLE(0x2000000000));
}

uint64_t sub_1000D18E0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;

  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v10);
  v13 = String.data(using:allowLossyConversion:)(v12, 0, a1, a2);
  v15 = v14;
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v15 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v17 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v18 = __DataStorage.init(length:)(a3);
    v20 = a4;
    v21 = v18;
    sub_1000D80D0((int *)&v20, 0);
    v21 |= 0x4000000000000000uLL;
    sub_1000122B4(v13, v15);
    sub_1000D9A20((uint64_t)&v20);
    sub_100021610(v13, v15);
    sub_100021610(v13, v15);
    return *(_QWORD *)&v20;
  }
  return result;
}

uint64_t sub_1000D1A34(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  if (a1 == 47 && a2 == 0xE100000000000000)
    goto LABEL_10;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 47, 0xE100000000000000, 0) & 1) != 0)
    goto LABEL_10;
  swift_bridgeObjectRetain(a2);
  v4 = sub_1000D1B6C(v3, a2);
  v6 = v5;
  swift_bridgeObjectRelease(a2);
  if (!v6)
    goto LABEL_10;
  if (v4 != 47 || v6 != 0xE100000000000000)
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, 47, 0xE100000000000000, 0);
    swift_bridgeObjectRelease(v6);
    if ((v7 & 1) != 0)
      goto LABEL_9;
LABEL_10:
    swift_bridgeObjectRetain(a2);
    return v3;
  }
  swift_bridgeObjectRelease(0xE100000000000000);
LABEL_9:
  swift_bridgeObjectRetain(a2);
  v8 = sub_1000D9DFC(1, v3, a2);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  swift_bridgeObjectRelease(a2);
  v3 = static String._fromSubstring(_:)(v8, v10, v12, v14);
  swift_bridgeObjectRelease(v14);
  return v3;
}

uint64_t sub_1000D1B6C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = String.index(before:)(v5 | (v2 << 16), a1, a2);
  return String.subscript.getter(v6, a1, a2);
}

uint64_t sub_1000D1BE4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRetain(a2);
  v4 = sub_1000D1D04(a1, a2);
  v6 = v5;
  swift_bridgeObjectRelease(a2);
  if (!v6)
    goto LABEL_7;
  if (v4 != 47 || v6 != 0xE100000000000000)
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, 47, 0xE100000000000000, 0);
    swift_bridgeObjectRelease(v6);
    if ((v7 & 1) != 0)
      goto LABEL_6;
LABEL_7:
    swift_bridgeObjectRetain(a2);
    return a1;
  }
  swift_bridgeObjectRelease(0xE100000000000000);
LABEL_6:
  v8 = String.index(_:offsetBy:)(15, 1, a1, a2);
  swift_bridgeObjectRetain(a2);
  v9 = sub_1000D1D44(v8, a1, a2);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease(a2);
  a1 = static String._fromSubstring(_:)(v9, v11, v13, v15);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_1000D1D04(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter(15, a1, a2);
  else
    return 0;
}

unint64_t sub_1000D1D44(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return String.subscript.getter();
  __break(1u);
  return result;
}

uint64_t sub_1000D1D90(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[4];

  v6[2] = a5;
  v6[3] = a2;
  return sub_1000D1EC8(a1 & 1, a3, (uint64_t)sub_1000D9EB4, (uint64_t)v6, a4);
}

uint64_t sub_1000D1DD0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v7 = *(_QWORD *)(class metadata base offset for KeyPath + *a3 + 8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v18 - v13;
  swift_getAtKeyPath(v12, v15);
  swift_getAtKeyPath(a2, a3);
  LOBYTE(a4) = dispatch thunk of static Comparable.< infix(_:_:)(v14, v11, v7, a4);
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  v16(v14, v7);
  return a4 & 1;
}

uint64_t sub_1000D1EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v8 = *(_QWORD *)(a5 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v10 & 1) != 0)
  {
    __chkstk_darwin(v10);
    *(&v21 - 4) = v8;
    *(&v21 - 3) = v18;
    *(&v21 - 2) = v19;
    v15 = sub_1000D1FEC((uint64_t)sub_1000D9EBC, (uint64_t)(&v21 - 6), v5, a2, v8);
    if ((v20 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    v15 = sub_1000D1FEC(v11, v12, v5, a2, v8);
    if ((v16 & 1) != 0)
    {
LABEL_3:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a2, v8);
      return Array.append(_:)(v14, a5);
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a2, v8);
  return Array.insert(_:at:)(v14, v15, a5);
}

uint64_t sub_1000D1FEC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD v8[7];
  uint64_t v9;
  uint64_t v10;

  v9 = *a3;
  v8[2] = a5;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a4;
  v5 = type metadata accessor for Array(0, a5);
  swift_bridgeObjectRetain(v9);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  Collection.firstIndex(where:)(&v10, sub_1000DB124, v8, v5, WitnessTable);
  swift_bridgeObjectRelease(v9);
  return v10;
}

uint64_t sub_1000D2080(_QWORD *a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, uint64_t);
  unint64_t v37;
  char v38;
  uint64_t v39;
  char isClassOrObjCExistentialType;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t (*v45)(char *, char *);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;

  v45 = a2;
  v46 = a3;
  v50 = a1;
  v7 = *(_QWORD *)(*a1 + class metadata base offset for KeyPath + 8);
  v49 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(a1);
  v44 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v42 - v11;
  v14 = *v13;
  v53 = *(_QWORD *)(*v13 - 8);
  v15 = __chkstk_darwin(v10);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v42 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, &type metadata for Int, 0, 0);
  v21 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
  v22 = Dictionary.init(dictionaryLiteral:)(v21, v7, &type metadata for Int, a5);
  v57 = v22;
  v23 = static Array._allocateUninitialized(_:)(0, v14);
  v56 = v23;
  v51 = a4;
  result = Array.endIndex.getter(a4, v14);
  v52 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (v52)
    {
      v25 = 0;
      v47 = v19;
      v48 = a5;
      v43 = v17;
      do
      {
        Array.subscript.getter(v25, v51, v14);
        swift_getAtKeyPath(v19, v50);
        Dictionary.subscript.getter(&v54, v12, v57, v7, &type metadata for Int, a5);
        if ((v55 & 1) != 0)
        {
          v26 = v49;
          v27 = v44;
          (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v44, v12, v7);
          v28 = v56;
          v29 = swift_bridgeObjectRetain(v56);
          v30 = Array.endIndex.getter(v29, v14);
          swift_bridgeObjectRelease(v28);
          v54 = v30;
          v55 = 0;
          v31 = type metadata accessor for Dictionary(0, v7, &type metadata for Int, a5);
          v32 = v27;
          v33 = v53;
          v17 = v43;
          Dictionary.subscript.setter(&v54, v32, v31);
          (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v17, v47, v14);
          v34 = type metadata accessor for Array(0, v14);
          Array.append(_:)(v17, v34);
          v35 = *(void (**)(char *, uint64_t))(v26 + 8);
          v19 = v47;
          v35(v12, v7);
          v36 = *(void (**)(char *, uint64_t))(v33 + 8);
        }
        else
        {
          v37 = v54;
          Array.subscript.getter(v54, v56, v14);
          v38 = v45(v19, v17);
          v36 = *(void (**)(char *, uint64_t))(v53 + 8);
          v36(v17, v14);
          if ((v38 & 1) != 0)
          {
            type metadata accessor for Array(0, v14);
            Array._makeMutableAndUnique()();
            v39 = v56;
            sub_1000D83C8(v37, v56, v14);
            isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(v14, v14);
            v41 = v39 & 0xFFFFFFFFFFFFFF8;
            if ((isClassOrObjCExistentialType & 1) == 0)
              v41 = v39;
            (*(void (**)(unint64_t, char *, uint64_t))(v53 + 24))(v41+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72) * v37, v19, v14);
          }
          (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v7);
        }
        ++v25;
        v36(v19, v14);
        a5 = v48;
      }
      while (v52 != v25);
      v23 = v56;
      v22 = v57;
    }
    swift_bridgeObjectRelease(v22);
    return v23;
  }
  return result;
}

uint64_t sub_1000D241C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_100017464((_OWORD *)a1, v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14 = *v2;
    *v2 = 0x8000000000000000;
    sub_1000D886C(v16, a2, isUniquelyReferenced_nonNull_native);
    v6 = *v2;
    *v2 = v14;
    return swift_bridgeObjectRelease(v6);
  }
  else
  {
    sub_1000124F8(a1, &qword_100158018);
    v8 = sub_100099990(a2);
    if ((v9 & 1) != 0)
    {
      v10 = v8;
      v11 = swift_isUniquelyReferenced_nonNull_native(*v2);
      v12 = *v2;
      v15 = *v3;
      *v3 = 0x8000000000000000;
      if ((v11 & 1) == 0)
      {
        sub_1000D89E8();
        v12 = v15;
      }
      sub_100017464((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v10), v16);
      sub_1000D86D8(v10, v12);
      v13 = *v3;
      *v3 = v12;
      swift_bridgeObjectRelease(v13);
    }
    else
    {
      memset(v16, 0, sizeof(v16));
    }
    return sub_1000124F8((uint64_t)v16, &qword_100158018);
  }
}

uint64_t sub_1000D252C(uint64_t a1, uint64_t a2)
{
  return static Array.+ infix(_:_:)(a2, a1);
}

uint64_t sub_1000D253C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1000D837C(a3, a3);
  v7 = *(_QWORD *)(a3 - 8);
  v8 = swift_allocObject(v6, ((*(unsigned __int8 *)(v7 + 80) + (unint64_t)*(unsigned int *)(v6 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72), *(unsigned __int8 *)(v7 + 80) | (unint64_t)*(unsigned __int16 *)(v6 + 52));
  v9 = static Array._adoptStorage(_:count:)(v8, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, a1, a3);
  type metadata accessor for Array(0, a3);
  v11 = static Array.+ infix(_:_:)(a2, v9);
  swift_bridgeObjectRelease(v9);
  return v11;
}

uint64_t sub_1000D25F0(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
    return static Array.+ infix(_:_:)(a3, a1);
  else
    return swift_bridgeObjectRetain(a3);
}

BOOL sub_1000D2610()
{
  return Array.count.getter() == 0;
}

uint64_t sub_1000D262C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = a4;
  v8 = v6;
  return sub_1000D1EC8(a1 & 1, a2, (uint64_t)sub_1000D9EE4, (uint64_t)&v5, a3);
}

void sub_1000D2668(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_100005C88(&qword_100158918);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_1000D2714@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  if (BYTE6(v3) != 16)
  {
    sub_100011F40(v4, v3);
LABEL_18:
    v17 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v1, 1, 1, v17);
  }
  if (a1)
  {
    if (a1 == 1)
    {
      if ((int)v4 <= (uint64_t)v4 >> 32)
      {
        v6 = sub_1000122B4(v4, v3);
        v7 = (unsigned __int8 *)((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
        if (!v7)
        {
LABEL_8:
          __DataStorage._length.getter();
          sub_1000D299C(v7, v5);
          sub_100011F40(v4, v3);
          goto LABEL_16;
        }
        v8 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v4, v8))
        {
          v7 += (int)v4 - v8;
          goto LABEL_8;
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
    v10 = *(_QWORD *)(v4 + 16);
    v11 = *(_QWORD *)(v4 + 24);
    swift_retain(v4);
    v12 = swift_retain(v3 & 0x3FFFFFFFFFFFFFFFLL);
    v13 = (unsigned __int8 *)((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v12);
    if (v13)
    {
      v14 = __DataStorage._offset.getter();
      if (__OFSUB__(v10, v14))
        goto LABEL_23;
      v13 += v10 - v14;
    }
    if (__OFSUB__(v11, v10))
      goto LABEL_21;
    __DataStorage._length.getter();
    sub_1000D299C(v13, v5);
    swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
    swift_release(v4);
  }
  else
  {
    LOWORD(v19) = v3;
    BYTE5(v19) = BYTE5(v3);
    BYTE4(v19) = BYTE4(v3);
    BYTE3(v19) = BYTE3(v3);
    BYTE2(v19) = BYTE2(v3);
    UUID.init(uuid:)(v4, v4 >> 8, v4 >> 16, v4 >> 24, HIDWORD(v4), v4 >> 40, HIWORD(v4), HIBYTE(v4), v19);
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 0, 1, v9);
  }
LABEL_16:
  sub_100011F40(v4, v3);
  sub_10004DB7C(v5, v2);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v2, 1, v15) == 1)
  {
    sub_1000124F8(v2, &qword_100158918);
    goto LABEL_18;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v1, v2, v15);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v1, 0, 1, v15);
}

uint64_t sub_1000D299C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    UUID.init(uuid:)(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], *((_QWORD *)a1 + 1));
    v3 = type metadata accessor for UUID(0);
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
    v5 = a2;
    v6 = 0;
  }
  else
  {
    v3 = ((uint64_t (*)(void))type metadata accessor for UUID)();
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
    v5 = a2;
    v6 = 1;
  }
  return v4(v5, v6, 1, v3);
}

uint64_t sub_1000D2A30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_100005C88(&qword_100158918);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15)
    goto LABEL_4;
  sub_1000D2668(a1, a2);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_1000124F8((uint64_t)v8, &qword_100158918);
LABEL_4:
    v11 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a3, 0, 1, v9);
}

uint64_t sub_1000D2B3C()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t __src;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  __src = UUID.uuid.getter();
  v10 = v0;
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  return sub_1000DA0E8(&__src, 16);
}

uint64_t sub_1000D2C08()
{
  uint64_t result;

  sub_10002687C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000020, 0x800000010012AAF0, 0x696C615674786544, 0xEE006E6F69746164);
  qword_1001757A8 = result;
  return result;
}

uint64_t *sub_1000D2C70()
{
  if (qword_100171AE8 != -1)
    swift_once(&qword_100171AE8, sub_1000D2C08);
  return &qword_1001757A8;
}

uint64_t sub_1000D2CB0()
{
  uint64_t result;

  sub_10002687C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000020, 0x800000010012AAF0, 0x4C6E6F6973696C45, 0xEB00000000747369);
  qword_1001757B0 = result;
  return result;
}

uint64_t *sub_1000D2D14()
{
  if (qword_100171AF0 != -1)
    swift_once(&qword_100171AF0, sub_1000D2CB0);
  return &qword_1001757B0;
}

uint64_t sub_1000D2D54()
{
  uint64_t result;

  sub_10002687C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000020, 0x800000010012AAF0, 0x6D754E726F727245, 0xEB00000000726562);
  qword_1001757B8 = result;
  return result;
}

uint64_t *sub_1000D2DB8()
{
  if (qword_100171AF8 != -1)
    swift_once(&qword_100171AF8, sub_1000D2D54);
  return &qword_1001757B8;
}

uint64_t sub_1000D2DF8()
{
  uint64_t result;

  sub_10002687C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000020, 0x800000010012AAF0, 0x6C656E72654BLL, 0xE600000000000000);
  qword_1001757C0 = result;
  return result;
}

uint64_t *sub_1000D2E50()
{
  if (qword_100171B08 != -1)
    swift_once(&qword_100171B08, sub_1000D2DF8);
  return &qword_1001757C0;
}

uint64_t sub_1000D2E90()
{
  uint64_t result;

  sub_10002687C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000020, 0x800000010012AAF0, 0x6C6379636566694CLL, 0xE900000000000065);
  qword_1001757C8 = result;
  return result;
}

uint64_t *sub_1000D2EF0()
{
  if (qword_100171B18 != -1)
    swift_once(&qword_100171B18, sub_1000D2E90);
  return &qword_1001757C8;
}

uint64_t sub_1000D2F30()
{
  uint64_t result;

  sub_10002687C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000020, 0x800000010012AAF0, 0xD000000000000015, 0x800000010012AE00);
  qword_1001757D0 = result;
  return result;
}

uint64_t *sub_1000D2F94()
{
  if (qword_100171B20 != -1)
    swift_once(&qword_100171B20, sub_1000D2F30);
  return &qword_1001757D0;
}

uint64_t sub_1000D2FD4()
{
  uint64_t result;

  sub_10002687C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000020, 0x800000010012AAF0, 0x6465657053, 0xE500000000000000);
  qword_1001757D8 = result;
  return result;
}

uint64_t *sub_1000D302C()
{
  if (qword_100171B28 != -1)
    swift_once(&qword_100171B28, sub_1000D2FD4);
  return &qword_1001757D8;
}

uint64_t sub_1000D306C(uint64_t a1)
{
  return sub_1000D3364(a1, qword_1001757E0, 0x6E614D6574617453, 0xEF746E656D656761);
}

uint64_t sub_1000D3098()
{
  return sub_1000D30BC(&qword_100171B30, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)qword_1001757E0, (uint64_t)sub_1000D306C);
}

uint64_t sub_1000D30BC(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (*a1 != -1)
    swift_once(a1, a4);
  v6 = a2(0);
  return sub_100086A14(v6, a3);
}

uint64_t sub_1000D3100(uint64_t a1)
{
  return sub_1000D3364(a1, qword_1001757F8, 0xD000000000000012, 0x800000010012ADE0);
}

uint64_t sub_1000D3124()
{
  return sub_1000D30BC(&qword_100171B38, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)qword_1001757F8, (uint64_t)sub_1000D3100);
}

uint64_t sub_1000D3148(uint64_t a1)
{
  return sub_1000D3364(a1, qword_100175810, 0xD000000000000012, 0x800000010012ADC0);
}

uint64_t sub_1000D316C()
{
  return sub_1000D30BC(&qword_100171B40, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)qword_100175810, (uint64_t)sub_1000D3148);
}

uint64_t sub_1000D3190(uint64_t a1)
{
  return sub_1000D3364(a1, qword_100175828, 0xD000000000000010, 0x800000010012ADA0);
}

uint64_t sub_1000D31B4()
{
  return sub_1000D30BC(&qword_100171B48, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)qword_100175828, (uint64_t)sub_1000D3190);
}

uint64_t sub_1000D31D8(uint64_t a1)
{
  return sub_1000D3364(a1, qword_100175840, 0xD000000000000010, 0x800000010012AD80);
}

uint64_t sub_1000D31FC()
{
  return sub_1000D30BC(&qword_100171B50, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)qword_100175840, (uint64_t)sub_1000D31D8);
}

uint64_t sub_1000D3220(uint64_t a1)
{
  return sub_1000D3364(a1, qword_100175858, 0xD00000000000001CLL, 0x800000010012AD60);
}

uint64_t sub_1000D3244()
{
  return sub_1000D30BC(&qword_100171B58, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)qword_100175858, (uint64_t)sub_1000D3220);
}

uint64_t sub_1000D3268(uint64_t a1)
{
  return sub_1000D3364(a1, qword_100175870, 0xD000000000000019, 0x800000010012AD40);
}

uint64_t sub_1000D328C()
{
  return sub_1000D30BC(&qword_100171B60, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)qword_100175870, (uint64_t)sub_1000D3268);
}

uint64_t sub_1000D32B0(uint64_t a1)
{
  return sub_1000D3364(a1, qword_100175888, 0xD000000000000016, 0x800000010012AD20);
}

uint64_t sub_1000D32D4()
{
  return sub_1000D30BC(&qword_100171B68, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)qword_100175888, (uint64_t)sub_1000D32B0);
}

uint64_t sub_1000D32F8(uint64_t a1)
{
  return sub_1000D3364(a1, qword_1001758A0, 0xD000000000000010, 0x800000010012AD00);
}

uint64_t sub_1000D331C()
{
  return sub_1000D30BC(&qword_100171B70, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)qword_1001758A0, (uint64_t)sub_1000D32F8);
}

uint64_t sub_1000D3340(uint64_t a1)
{
  return sub_1000D3364(a1, qword_1001758B8, 0x6E75614C74786544, 0xEA00000000006863);
}

uint64_t sub_1000D3364(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_1000899CC(v7, a2);
  sub_100086A14(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEC0000006D6B2E65, a3, a4);
}

uint64_t sub_1000D33DC()
{
  return sub_1000D30BC(&qword_100171B78, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)qword_1001758B8, (uint64_t)sub_1000D3340);
}

uint64_t sub_1000D3400()
{
  uint64_t v0;

  v0 = type metadata accessor for OSSignposter(0);
  sub_1000899CC(v0, qword_1001758D0);
  sub_100086A14(v0, (uint64_t)qword_1001758D0);
  if (qword_100171B28 != -1)
    swift_once(&qword_100171B28, sub_1000D2FD4);
  return OSSignposter.init(logHandle:)((id)qword_1001757D8);
}

uint64_t sub_1000D3480()
{
  return sub_1000D30BC(&qword_100171B80, (uint64_t (*)(_QWORD))&type metadata accessor for OSSignposter, (uint64_t)qword_1001758D0, (uint64_t)sub_1000D3400);
}

uint64_t sub_1000D34A4@<X0>(const char *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1000D34AC(a1, a2, a3);
}

uint64_t sub_1000D34AC@<X0>(const char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  CFTypeRef v5;
  CFTypeRef v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v18;
  int v19;
  CFTypeRef v20;
  CFStringRef errorString;

  errorString = 0;
  v5 = IOCFUnserialize(a1, kCFAllocatorDefault, 0, &errorString);
  v6 = v5;
  v7 = (__CFString *)errorString;
  if (errorString)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(errorString);
    v10 = v9;

    v12 = static os_log_type_t.error.getter(v11);
    v13 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_10010F050;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_100026838();
    *(_QWORD *)(v14 + 32) = v8;
    *(_QWORD *)(v14 + 40) = v10;
    v15 = sub_10002687C();
    v16 = (void *)static OS_os_log.default.getter(v15);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v16, "Error encountered while deserializing: %{public}s", 49, 2, v14);
    swift_bridgeObjectRelease(v14);

    swift_unknownObjectRelease(v6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  }
  else
  {
    v20 = v5;
    v18 = sub_100005C88((uint64_t *)&unk_10015BA20);
    v19 = swift_dynamicCast(a3, &v20, v18, a2, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v19 ^ 1u, 1, a2);
  }
}

uint64_t sub_1000D3644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = a4;
  v8[3] = a1;
  v8[4] = a2;
  v6 = type metadata accessor for Optional(0, a4);
  return Data.withUnsafeBytes<A>(_:)(sub_1000DA194, v8, a1, a2, v6);
}

CFDataRef sub_1000D36B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  CFDataRef v7;
  const __CFData *v8;
  uint64_t v10;
  _BYTE v11[32];

  sub_100005D28(a1, (uint64_t)v11);
  if (swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, a3, 6))
    v4 = v10;
  else
    v4 = 0;
  v10 = v4;
  v5 = type metadata accessor for Optional(0, a3);
  v6 = (const void *)Optional._bridgeToObjectiveC()(v5);
  swift_unknownObjectRelease(v4);
  v7 = IOCFSerialize(v6, 0);
  swift_unknownObjectRelease(v6);
  if (v7)
  {
    v8 = v7;
    v7 = (CFDataRef)static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);

  }
  return v7;
}

uint64_t sub_1000D3780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  char *v21;
  uint64_t AssociatedConformanceWitness;
  unint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a3;
  v24[1] = a5;
  v24[0] = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(v24[0] + 24) + 16);
  v9 = *(_QWORD *)(a3 + 8);
  v25 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v9, a2, &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  v11 = swift_getAssociatedTypeWitness(0, v8, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin(v11);
  v13 = (char *)v24 - v12;
  v14 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v16);
  v21 = (char *)v24 - v20;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    result = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v14, a4);
    if (result > a1)
    {
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v14, v11, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10011A218, 512, v11, AssociatedConformanceWitness);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v13, v14, v8);
      v27 = a1;
      v23 = sub_1000DA230();
      dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v18, &v27, &type metadata for Int, v23, v14, v24[0]);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      return dispatch thunk of OptionSet.init(rawValue:)(v21, v25, v26);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D3978(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t);
  uint64_t result;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedConformanceWitness;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;

  v6 = *(_QWORD *)(a3[3] + 16);
  v7 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, a1, &protocol requirements base descriptor for RawRepresentable, &associated type descriptor for RawRepresentable.RawValue);
  v62 = v6;
  v61 = swift_getAssociatedTypeWitness(0, v6, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin(v61);
  v60 = (char *)&v50 - v9;
  v10 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v51 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v55 = (char *)&v50 - v15;
  v16 = __chkstk_darwin(v14);
  v54 = (char *)&v50 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v50 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v50 - v21;
  v57 = a1;
  v58 = v3;
  v56 = v7;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v50 - v21), a1);
  v23 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, a3);
  v52 = v11;
  v24 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  v63 = v22;
  result = v24(v22, v10);
  if (v23 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v23)
    {
      v26 = 0;
      v64 = (char *)_swiftEmptyArrayStorage;
      v53 = v23;
      while (1)
      {
        v28 = v63;
        dispatch thunk of RawRepresentable.rawValue.getter(v63, v57);
        v30 = v61;
        v29 = v62;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v62, v10, v61, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v32 = v60;
        v59 = AssociatedConformanceWitness;
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10011A218, 512, v30, AssociatedConformanceWitness);
        v33 = v20;
        v34 = v55;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v32, v10, v29);
        v65 = v26;
        v35 = sub_1000DA230();
        v36 = v54;
        dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v34, &v65, &type metadata for Int, v35, v10, a3);
        v37 = v34;
        v20 = v33;
        v24(v37, v10);
        dispatch thunk of static BinaryInteger.& infix(_:_:)(v28, v36, v10, a3);
        v24(v36, v10);
        v24(v28, v10);
        if ((dispatch thunk of static BinaryInteger.isSigned.getter(v10, a3) & 1) != 0)
        {
          if (dispatch thunk of BinaryInteger.bitWidth.getter(v10, a3) < 64)
            goto LABEL_14;
        }
        else
        {
          v38 = dispatch thunk of static BinaryInteger.isSigned.getter(v10, a3);
          v39 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, a3);
          if ((v38 & 1) != 0)
          {
            if (v39 <= 64)
            {
              v40 = v60;
              dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10011A220, 256, v61, v59);
              v41 = v63;
              dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v40, v10, v62);
              LOBYTE(v40) = dispatch thunk of static Comparable.>= infix(_:_:)(v33, v41, v10, *(_QWORD *)(a3[4] + 8));
              v24(v41, v10);
              v42 = v51;
              (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v51, v33, v10);
              if ((v40 & 1) == 0)
              {
                v24(v42, v10);
                v24(v33, v10);
LABEL_18:
                if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
                  v64 = sub_1000D8150(0, *((_QWORD *)v64 + 2) + 1, 1, v64);
                v47 = *((_QWORD *)v64 + 2);
                v46 = *((_QWORD *)v64 + 3);
                if (v47 >= v46 >> 1)
                  v64 = sub_1000D8150((char *)(v46 > 1), v47 + 1, 1, v64);
                v27 = v64;
                *((_QWORD *)v64 + 2) = v47 + 1;
                *(_QWORD *)&v27[8 * v47 + 32] = v26;
                goto LABEL_5;
              }
              v43 = dispatch thunk of BinaryInteger._lowWord.getter(v10, a3);
              v24(v42, v10);
              goto LABEL_15;
            }
          }
          else if (v39 < 64)
          {
LABEL_14:
            v43 = dispatch thunk of BinaryInteger._lowWord.getter(v10, a3);
LABEL_15:
            v24(v33, v10);
            if (v43)
              goto LABEL_18;
            goto LABEL_5;
          }
        }
        v65 = 0;
        v44 = v63;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v65, &type metadata for Int, v35, v10, a3);
        v45 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v44, v10, *(_QWORD *)(a3[2] + 8));
        v24(v44, v10);
        v24(v33, v10);
        if ((v45 & 1) == 0)
          goto LABEL_18;
LABEL_5:
        if (v53 == ++v26)
          goto LABEL_24;
      }
    }
    v64 = (char *)_swiftEmptyArrayStorage;
LABEL_24:
    v48 = v64;
    v49 = Array.description.getter(v64, &type metadata for Int);
    swift_bridgeObjectRelease(v48);
    return v49;
  }
  return result;
}

uint64_t sub_1000D3EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  char v15;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);

  v8 = __chkstk_darwin(a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
  if ((v15 & 1) == 0)
    return v14(a4, v11, a2);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v14((char *)&v17 - v13, v11, a2);
  v18(v10, a1, a2);
  return dispatch thunk of SetAlgebra.union(_:)(v10, a2, *(_QWORD *)(a3 + 16));
}

uint64_t sub_1000D3FAC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t sub_1000D3FDC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
  {
    v5 = a3;
    v6 = HIDWORD(a3);
    v7 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v8 = swift_allocObject(v7, 112, 7);
    *(_OWORD *)(v8 + 16) = xmmword_10010F380;
    *(_QWORD *)(v8 + 56) = &type metadata for Int32;
    *(_QWORD *)(v8 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v8 + 32) = v5;
    *(_QWORD *)(v8 + 96) = &type metadata for Int32;
    *(_QWORD *)(v8 + 104) = &protocol witness table for Int32;
    *(_DWORD *)(v8 + 72) = v6;
    a1 = String.init(format:_:)(0x7823252F782325, 0xE700000000000000, v8);
  }
  swift_bridgeObjectRetain(a2);
  return a1;
}

uint64_t sub_1000D4090(uint64_t a1)
{
  uint64_t v2;
  cpu_type_t type[2];

  *(_QWORD *)type = 0;
  v2 = String.utf8CString.getter(a1);
  macho_cpu_type_for_arch_name((const char *)(v2 + 32), &type[1], type);
  swift_release(v2);
  return a1;
}

const char *sub_1000D4120(cpu_type_t a1, cpu_subtype_t a2)
{
  const char *result;

  result = macho_arch_name_for_cpu_type(a1, a2);
  if (result)
    return (const char *)String.init(cString:)();
  return result;
}

void sub_1000D4160()
{
  qword_1001758E8 = (uint64_t)&off_10014EA60;
}

uint64_t sub_1000D4178(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  v8 = a1;
  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = a2 + 32;
  v4 = sub_1000262B0();
  v5 = 0;
  while (1)
  {
    v7 = *(_BYTE *)(v3 + v5);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v7, &v8, &type metadata for CollectionKind, v4) & 1) != 0)
      break;
    if (v2 == ++v5)
      return 0;
  }
  return v5;
}

uint64_t sub_1000D4214(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000D424C + 4 * byte_10011A240[a1]))(0xD000000000000016, 0x800000010012ABC0);
}

BOOL sub_1000D4280(char *a1, char *a2)
{
  return sub_1000D9F0C(*a1, *a2);
}

BOOL sub_1000D428C(char *a1, char *a2)
{
  return sub_1000D4298(*a1, *a2);
}

BOOL sub_1000D4298(char a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (qword_100171B88 != -1)
    swift_once(&qword_100171B88, sub_1000D4160);
  v4 = qword_1001758E8;
  v14 = a2;
  v5 = *(_QWORD *)(qword_1001758E8 + 16);
  if (!v5)
    return 1;
  v6 = sub_1000262B0();
  swift_bridgeObjectRetain(v4);
  v7 = 0;
  while (1)
  {
    v13 = *(_BYTE *)(v4 + v7 + 32);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v13, &v14, &type metadata for CollectionKind, v6) & 1) != 0)
      break;
    if (v5 == ++v7)
    {
      swift_bridgeObjectRelease(v4);
      return 1;
    }
  }
  swift_bridgeObjectRelease(v4);
  v9 = qword_1001758E8;
  swift_bridgeObjectRetain(qword_1001758E8);
  v10 = sub_1000D4178(a1, v9);
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  return (v12 & 1) == 0 && v7 >= v10;
}

BOOL sub_1000D43B4(char *a1, char *a2)
{
  return sub_1000D43C0(*a1, *a2);
}

BOOL sub_1000D43C0(char a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (qword_100171B88 != -1)
    swift_once(&qword_100171B88, sub_1000D4160);
  v4 = qword_1001758E8;
  v14 = a1;
  v5 = *(_QWORD *)(qword_1001758E8 + 16);
  if (!v5)
    return 1;
  v6 = sub_1000262B0();
  swift_bridgeObjectRetain(v4);
  v7 = 0;
  while (1)
  {
    v13 = *(_BYTE *)(v4 + v7 + 32);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v13, &v14, &type metadata for CollectionKind, v6) & 1) != 0)
      break;
    if (v5 == ++v7)
    {
      swift_bridgeObjectRelease(v4);
      return 1;
    }
  }
  swift_bridgeObjectRelease(v4);
  v9 = qword_1001758E8;
  swift_bridgeObjectRetain(qword_1001758E8);
  v10 = sub_1000D4178(a2, v9);
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  return (v12 & 1) == 0 && v7 >= v10;
}

BOOL sub_1000D44DC(char *a1, char *a2)
{
  return sub_1000D44E8(*a1, *a2);
}

BOOL sub_1000D44E8(char a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (qword_100171B88 != -1)
    swift_once(&qword_100171B88, sub_1000D4160);
  v4 = qword_1001758E8;
  v14 = a2;
  v5 = *(_QWORD *)(qword_1001758E8 + 16);
  if (!v5)
    return 0;
  v6 = sub_1000262B0();
  swift_bridgeObjectRetain(v4);
  v7 = 0;
  while (1)
  {
    v13 = *(_BYTE *)(v4 + v7 + 32);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v13, &v14, &type metadata for CollectionKind, v6) & 1) != 0)
      break;
    if (v5 == ++v7)
    {
      swift_bridgeObjectRelease(v4);
      return 0;
    }
  }
  swift_bridgeObjectRelease(v4);
  v9 = qword_1001758E8;
  swift_bridgeObjectRetain(qword_1001758E8);
  v10 = sub_1000D4178(a1, v9);
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  return (v12 & 1) != 0 || v7 < v10;
}

uint64_t sub_1000D4604()
{
  unsigned __int8 *v0;

  return sub_1000D4214(*v0);
}

uint64_t sub_1000D460C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 == 5)
    goto LABEL_8;
  v4 = sub_100090604(a1);
  v6 = v4;
  v7 = v5;
  if (!v4 && v5 == 0xE000000000000000)
  {
    v8 = 0xE000000000000000;
LABEL_7:
    swift_bridgeObjectRelease(v8);
LABEL_8:
    v9 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, v2, v9);
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, 0, 0xE000000000000000, 0) & 1) != 0)
  {
    v8 = v7;
    goto LABEL_7;
  }
  URL.appendingPathExtension(_:)(v6, v7);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_1000D46C0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::Bool v13;
  uint64_t v14;
  Swift::String v15;
  Swift::Bool v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v8 = URL.isFileURL.getter();
  if ((v8 & 1) != 0)
  {
    v9 = URL.path.getter(v8);
    v11 = v10;
    v22 = v10;
    swift_bridgeObjectRetain(v10);
    v12._countAndFlagsBits = a1;
    v12._object = a2;
    v13 = String.hasPrefix(_:)(v12);
    swift_bridgeObjectRelease(v11);
    if (v13)
    {
      v14 = String.count.getter(a1, a2);
      sub_1000D481C(v14);
      v11 = v22;
    }
    swift_bridgeObjectRetain(v11);
    v15._countAndFlagsBits = 47;
    v15._object = (void *)0xE100000000000000;
    v16 = String.hasPrefix(_:)(v15);
    v17 = swift_bridgeObjectRelease(v11);
    if (v16)
    {
      v18 = URL.hasDirectoryPath.getter(v17);
      URL.init(fileURLWithPath:isDirectory:)(v9, v11, v18 & 1);
      return swift_bridgeObjectRelease(v11);
    }
    else
    {
      swift_bridgeObjectRelease(v11);
      v21 = type metadata accessor for URL(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a3, v4, v21);
    }
  }
  else
  {
    v20 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a3, v3, v20);
  }
}

uint64_t sub_1000D481C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *v1;
      v3 = v1[1];
      v4 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000) == 0)
        v4 = *v1;
      v5 = 7;
      if (((v3 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0)
        v5 = 11;
      result = String.index(_:offsetBy:limitedBy:)(15, result, v5 | (v4 << 16), v2, v3);
      if ((v6 & 1) == 0)
        return String.removeSubrange(_:)(15, result);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D4890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  _QWORD *v8;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::Bool v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;

  v8 = _swiftEmptyArrayStorage;
  v63 = _swiftEmptyArrayStorage;
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    v8 = sub_10000C500(0, 1, 1, _swiftEmptyArrayStorage);
    v12 = v8[2];
    v11 = v8[3];
    if (v12 >= v11 >> 1)
      v8 = sub_10000C500((_QWORD *)(v11 > 1), v12 + 1, 1, v8);
    v8[2] = v12 + 1;
    v13 = &v8[2 * v12];
    v13[4] = a1;
    v13[5] = a2;
    v63 = v8;
    v5 = v60;
  }
  v14 = *(_QWORD *)(a3 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain(a3);
    v58 = a4;
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_10000C500(0, v8[2] + 1, 1, v8);
    v15 = (_QWORD *)(a3 + 40);
    do
    {
      v17 = *(v15 - 1);
      v16 = *v15;
      v18 = v8[2];
      v19 = v8[3];
      swift_bridgeObjectRetain(*v15);
      if (v18 >= v19 >> 1)
        v8 = sub_10000C500((_QWORD *)(v19 > 1), v18 + 1, 1, v8);
      v15 += 2;
      v8[2] = v18 + 1;
      v20 = &v8[2 * v18];
      v20[4] = v17;
      v20[5] = v16;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease(a3);
    v63 = v8;
    v5 = v60;
    a4 = v58;
  }
  v21 = *(_QWORD *)(a4 + 16);
  if (v21)
  {
    swift_bridgeObjectRetain(a4);
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_10000C500(0, v8[2] + 1, 1, v8);
    v22 = (_QWORD *)(a4 + 40);
    do
    {
      v24 = *(v22 - 1);
      v23 = *v22;
      v25 = v8[2];
      v26 = v8[3];
      swift_bridgeObjectRetain(*v22);
      if (v25 >= v26 >> 1)
        v8 = sub_10000C500((_QWORD *)(v26 > 1), v25 + 1, 1, v8);
      v22 += 2;
      v8[2] = v25 + 1;
      v27 = &v8[2 * v25];
      v27[4] = v24;
      v27[5] = v23;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease(a4);
    v63 = v8;
    v5 = v60;
  }
  if (!v8[2])
  {
    v44 = v8;
    goto LABEL_39;
  }
  sub_1000D4CD8(&v63);
  v28 = v63;
  v29 = v63[2];
  if (!v29)
  {
LABEL_37:
    v44 = v28;
LABEL_39:
    swift_bridgeObjectRelease(v44);
    v45 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(a5, v5, v45);
  }
  v30 = v63 + 5;
  while (1)
  {
    v32 = *(v30 - 1);
    v31 = (void *)*v30;
    v33 = v32 == 47 && v31 == (void *)0xE100000000000000;
    if (v33
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*(v30 - 1), *v30, 47, 0xE100000000000000, 0) & 1) != 0)
    {
      goto LABEL_25;
    }
    v34 = swift_bridgeObjectRetain(v31);
    URL.path.getter(v34);
    v36 = v35;
    v37._countAndFlagsBits = v32;
    v37._object = v31;
    v38 = String.hasPrefix(_:)(v37);
    swift_bridgeObjectRelease(v36);
    if (v38)
      break;
    swift_bridgeObjectRelease(v31);
LABEL_25:
    v30 += 2;
    if (!--v29)
      goto LABEL_37;
  }
  v39 = swift_bridgeObjectRelease(v28);
  v61 = URL.path.getter(v39);
  v62 = v40;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, 47, 0xE100000000000000, 0) & 1) == 0)
  {
    swift_bridgeObjectRetain(v31);
    v41 = sub_1000D1B6C(v32, (unint64_t)v31);
    v43 = v42;
    swift_bridgeObjectRelease(v31);
    if (v43)
    {
      if (v41 == 47 && v43 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease(0xE100000000000000);
        goto LABEL_41;
      }
      v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, 47, 0xE100000000000000, 0);
      swift_bridgeObjectRelease(v43);
      if ((v47 & 1) != 0)
      {
LABEL_41:
        swift_bridgeObjectRetain(v31);
        v48 = sub_1000D9DFC(1, v32, (unint64_t)v31);
        v50 = v49;
        v52 = v51;
        v54 = v53;
        swift_bridgeObjectRelease(v31);
        v32 = static String._fromSubstring(_:)(v48, v50, v52, v54);
        v56 = v55;
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(v54);
        v31 = v56;
      }
    }
  }
  v57 = String.count.getter(v32, v31);
  swift_bridgeObjectRelease(v31);
  sub_1000D481C(v57);
  URL.init(fileURLWithPath:)(v61, v62);
  return swift_bridgeObjectRelease(v62);
}

uint64_t sub_1000D4CD8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1000D8BA8(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_1000D8BBC(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1000D4D44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = String.utf8CString.getter(a1);
  swift_bridgeObjectRelease(a2);
  v4 = OSKextParseVersionString(v3 + 32);
  swift_release(v3);
  return v4 & ~(v4 >> 63);
}

uint64_t sub_1000D4D90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!a2)
    return 0;
  v3 = String.utf8CString.getter(a1);
  swift_bridgeObjectRelease(a2);
  v4 = OSKextParseVersionString(v3 + 32);
  swift_release(v3);
  if (v4 <= 0)
    return 0;
  return v4;
}

void *sub_1000D4DF0()
{
  return &unk_10011A25C;
}

void *sub_1000D4DFC()
{
  return &unk_10011A260;
}

uint64_t sub_1000D4E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t MetatypeMetadata;
  Swift::String v23;
  void *object;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];

  v10 = type metadata accessor for Optional(0, a3);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - v12;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
  if (*(_QWORD *)(v14 + 16) && (v15 = sub_100099990(a1), (v16 & 1) != 0))
    sub_100005D28(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)v28);
  else
    memset(v28, 0, sizeof(v28));
  swift_bridgeObjectRelease(v14);
  v17 = sub_100005C88(&qword_100158018);
  v18 = swift_dynamicCast(v13, v28, v17, a3, 6);
  v19 = *(_QWORD *)(a3 - 8);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  if ((v18 & 1) != 0)
  {
    v20(v13, 0, 1, a3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a5, v13, a3);
  }
  else
  {
    v20(v13, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(_QWORD *)&v28[0] = 0;
    *((_QWORD *)&v28[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(*((_QWORD *)&v28[0] + 1));
    *(_QWORD *)&v28[0] = 0xD000000000000016;
    *((_QWORD *)&v28[0] + 1) = 0x800000010012AC00;
    v27 = a1;
    MetatypeMetadata = swift_getMetatypeMetadata(a3);
    v23._countAndFlagsBits = String.init<A>(describing:)(&v27, MetatypeMetadata);
    object = v23._object;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(object);
    v25._object = (void *)0x800000010012AC20;
    v25._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v25);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)&v28[0], *((_QWORD *)&v28[0] + 1), "driverkitd/Utilities.swift", 26, 2, 596, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D501C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1000DA274(a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

void (*sub_1000D5058(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  size_t v13;
  void *v14;

  v11 = malloc(0x40uLL);
  *a1 = v11;
  v11[2] = a4;
  v11[3] = a5;
  *v11 = a2;
  v11[1] = a3;
  v12 = *(_QWORD *)(a4 - 8);
  v11[4] = v5;
  v11[5] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v11[6] = malloc(v13);
  v14 = malloc(v13);
  v11[7] = v14;
  sub_1000D4E08(a2, a3, a4, a5, (uint64_t)v14);
  return sub_1000D5100;
}

void sub_1000D5100(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[5];
  v6 = (*a1)[2];
  v7 = (*a1)[3];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))((*a1)[6], v4, v6);
    sub_1000DA274((uint64_t)v3, v9, v8, v6, v7);
    v10 = *(void (**)(void *, uint64_t))(v5 + 8);
    v10(v3, v6);
  }
  else
  {
    sub_1000DA274((*a1)[7], v9, v8, v6, v7);
    v10 = *(void (**)(void *, uint64_t))(v5 + 8);
  }
  v10(v4, v6);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_1000D51CC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  v2 = sub_10008F2A8();
  if (!*(_QWORD *)(a1 + 16))
  {
    v13 = 0u;
    v14 = 0u;
LABEL_10:
    swift_bridgeObjectRelease(a1);
    goto LABEL_11;
  }
  v4 = *v2;
  v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  v5 = sub_100005DE8(v4, v3);
  if ((v6 & 1) == 0)
  {
    v13 = 0u;
    v14 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_10;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v13);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(a1);
  if (!*((_QWORD *)&v14 + 1))
  {
LABEL_11:
    sub_1000124F8((uint64_t)&v13, &qword_100158018);
    return 0;
  }
  if ((swift_dynamicCast(&v11, &v13, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return 0;
  v7 = v11;
  v8 = v12;
  if (v11 == 1415071051 && v12 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(1415071051, 0xE400000000000000, v11, v12, 0) & 1) != 0)
  {
    v9 = v8;
  }
  else if (v7 == 1415071044 && v8 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
  }
  else
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(1415071044, 0xE400000000000000, v7, v8, 0) & 1) == 0)
      return v7;
    v9 = v8;
  }
  swift_bridgeObjectRelease(v9);
  return 0;
}

uint64_t sub_1000D535C(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  _QWORD v11[2];

  result = 1954047332;
  if (!a2)
    return 1954047339;
  if (a2 != (void *)1)
  {
    if (a2 == (void *)2)
    {
      strcpy((char *)v11, "(missing ");
      WORD1(v11[1]) = 0;
      HIDWORD(v11[1]) = -385875968;
      v5 = sub_10008F2A8();
      v6 = *v5;
      v7 = (void *)v5[1];
      swift_bridgeObjectRetain(v7);
      v8._countAndFlagsBits = v6;
      v8._object = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease(0xE000000000000000);
      strcpy((char *)v11, "Unsupported (");
      HIWORD(v11[1]) = -4864;
      v9._countAndFlagsBits = a1;
      v9._object = a2;
      String.append(_:)(v9);
    }
    v10._countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    return v11[0];
  }
  return result;
}

uint64_t sub_1000D5460(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      return !a4;
    case 1:
      return a4 == 1;
    case 2:
      return a4 == 2;
  }
  if (a4 < 3)
    return 0;
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t sub_1000D54D0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v3 = a1[1];
  v4 = a2[1];
  switch(v3)
  {
    case 0:
      return !v4;
    case 1:
      return v4 == 1;
    case 2:
      return v4 == 2;
  }
  if (v4 < 3)
    return 0;
  v6 = *a1;
  if (v6 == *a2 && v3 == v4)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v3, *a2, v4, 0);
}

uint64_t sub_1000D5548()
{
  uint64_t v0;

  return sub_1000D535C(*(_QWORD *)v0, *(void **)(v0 + 8));
}

uint64_t sub_1000D5550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v12;
  v15 = type metadata accessor for Array(0, v14);
  Dictionary.subscript.getter(&v20, a1, v13, a3, v15, a5);
  v16 = v20;
  result = swift_bridgeObjectRelease(v20);
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
    v20 = static Array._allocateUninitialized(_:)(0, a4);
    v18 = type metadata accessor for Dictionary(0, a3, v15, a5);
    return Dictionary.subscript.setter(&v20, v11, v18);
  }
  return result;
}

uint64_t sub_1000D5658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v11 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v14;
  v18 = type metadata accessor for Set(0, v16, v17);
  Dictionary.subscript.getter(&v25, a1, v15, a3, v18, a5);
  v19 = v25;
  result = swift_bridgeObjectRelease(v25);
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a3);
    v21 = static Array._allocateUninitialized(_:)(0, a4);
    if (Array._getCount()())
      v22 = (void *)sub_1000DA440(v21, a4, a6);
    else
      v22 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(v21);
    v25 = v22;
    v23 = type metadata accessor for Dictionary(0, a3, v18, a5);
    return Dictionary.subscript.setter(&v25, v13, v23);
  }
  return result;
}

uint64_t sub_1000D57A0(unint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a2[3];
  v6 = a2[4];
  sub_100004DE4(a2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(v5, v6);
  v9 = v8;
  if (v8 && a1 != 5)
  {
    sub_1000377D4(a1);
    v10 = sub_10009052C(a1);
    v12 = v11;
    swift_bridgeObjectRetain(v9);
    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v12);
    v14 = a3[3];
    v15 = a3[4];
    sub_100004DE4(a3, v14);
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 136))(v7, v9, 0, v14, v15);
    sub_1000390EC(a1);
    swift_bridgeObjectRelease(v9);
  }
  return v7;
}

uint64_t sub_1000D58C4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;

  v3 = a1[3];
  v4 = a1[4];
  sub_100004DE4(a1, v3);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
  if (v5)
  {
    v6 = v5;
    v7 = sub_100090350();
    v8 = *v7;
    v9 = *(_QWORD *)(*v7 + 16);
    if (v9)
    {
      swift_bridgeObjectRetain(*v7);
      v10 = 0;
      v11 = v9 - 1;
      do
      {
        v12 = *(_QWORD *)(v8 + 8 * v10 + 32);
        sub_1000377D4(v12);
        v13 = sub_10009052C(v12);
        v15 = v14;
        swift_bridgeObjectRetain(v6);
        v16._countAndFlagsBits = v13;
        v16._object = v15;
        String.append(_:)(v16);
        swift_bridgeObjectRelease(v15);
        v17 = a2[3];
        v18 = a2[4];
        sub_100004DE4(a2, v17);
        LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 136))(v21, v6, 0, v17, v18);
        sub_1000390FC(v12);
        swift_bridgeObjectRelease(v6);
        if ((v9 & 1) != 0)
          break;
      }
      while (v11 != v10++);
      swift_bridgeObjectRelease(v6);
    }
    else
    {
      v8 = v6;
    }
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  return v9 & 1;
}

_QWORD *sub_1000D5A20(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;

  v6 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v37 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100004DE4(a1, v12);
  sub_10009C20C(v12, v13);
  v15 = v43;
  v14 = v44;
  sub_100004DE4(v42, v43);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v14 + 24))(&v40, a2, v15, v14);
  if (!v41)
  {
    sub_1000124F8((uint64_t)&v40, &qword_100157C78);
    sub_100005D08(v42);
    return _swiftEmptyArrayStorage;
  }
  sub_100004E2C(&v40, (uint64_t)v45);
  sub_100005D08(v42);
  v16 = sub_100005C88(&qword_10015BA70);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_10010F050;
  sub_100005C44((uint64_t)v45, v17 + 32);
  *(_QWORD *)&v40 = v17;
  v39 = 0;
  v18 = a3 < 1;
  v19 = a3 - 1;
  if (v18)
  {
LABEL_12:
    v22 = (_QWORD *)v40;
    sub_100005D08(v45);
    return v22;
  }
  v20 = v46;
  v21 = v47;
  sub_100004DE4(v45, v46);
  (*(void (**)(uint64_t, uint64_t))(v21 + 80))(v20, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000124F8((uint64_t)v8, (uint64_t *)&unk_10015BA60);
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v37, v8, v9);
  v23 = a1[3];
  v24 = a1[4];
  sub_100004DE4(a1, v23);
  sub_10010731C(v23, v24);
  v25 = v44;
  v26 = sub_100004DE4(v42, v43);
  v27 = URL.path.getter(v26);
  v29 = v28;
  v22 = v26;
  LOBYTE(v23) = (*(uint64_t (**)(uint64_t))(v25 + 136))(v27);
  swift_bridgeObjectRelease(v29);
  if ((v23 & 1) == 0)
  {
    sub_100005D08(v42);
    goto LABEL_11;
  }
  v30 = v39;
  sub_100005D08(v42);
  if ((v30 & 1) == 0)
  {
LABEL_11:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v37, v9);
    goto LABEL_12;
  }
  v31 = a1;
  v33 = v37;
  v32 = v38;
  v34 = (_QWORD *)sub_1000D5D6C(v31, v37, v19, 1);
  if (!v32)
  {
    sub_1000D6224(v34);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v33, v9);
    goto LABEL_12;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v33, v9);
  swift_bridgeObjectRelease(v40);
  sub_100005D08(v45);
  return v22;
}

uint64_t sub_1000D5D6C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  char *v65;

  LODWORD(v58) = a4;
  v55 = a3;
  v7 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v7);
  v9 = (char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v59 = v10;
  v60 = v11;
  v12 = __chkstk_darwin(v10);
  v61 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v65 = (char *)v54 - v14;
  v15 = a1[3];
  v16 = a1[4];
  sub_100004DE4(a1, v15);
  sub_10010731C(v15, v16);
  v17 = v64;
  v18 = sub_100004DE4(v62, v63);
  v19 = URL.path.getter(v18);
  v21 = v20;
  LOBYTE(v15) = (*(uint64_t (**)(uint64_t))(v17 + 136))(v19);
  swift_bridgeObjectRelease(v21);
  sub_100005D08(v62);
  v22 = _swiftEmptyArrayStorage;
  if ((v15 & 1) == 0)
    return (uint64_t)v22;
  v24 = a1[3];
  v23 = a1[4];
  sub_100004DE4(a1, v24);
  if ((v58 & 1) != 0)
  {
    sub_10010731C(v24, v23);
    v25 = v63;
    v26 = v64;
    sub_100004DE4(v62, v63);
    v27 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(v26 + 24))(a2, _swiftEmptyArrayStorage, 1, v25, v26);
  }
  else
  {
    sub_10010731C(v24, v23);
    v28 = v63;
    v29 = v64;
    sub_100004DE4(v62, v63);
    v27 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 32))(a2, _swiftEmptyArrayStorage, 0, v28, v29);
  }
  v30 = v27;
  result = sub_100005D08(v62);
  if (v4)
    return (uint64_t)v22;
  v32 = v60;
  v62[0] = _swiftEmptyArrayStorage;
  v58 = *(_QWORD *)(v30 + 16);
  if (!v58)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v9, 1, 1, v59);
LABEL_27:
    v51 = v55;
LABEL_28:
    swift_bridgeObjectRelease(v30);
    v52 = sub_1000124F8((uint64_t)v9, (uint64_t *)&unk_10015BA60);
    v53 = v62[0];
    __chkstk_darwin(v52);
    v54[-2] = a1;
    v54[-1] = v51;
    v22 = sub_1000D6354((void (*)(uint64_t *__return_ptr, char *))sub_1000DA748, (uint64_t)&v54[-4], v53);
    swift_release(v53);
    return (uint64_t)v22;
  }
  v54[0] = a1;
  v54[1] = 0;
  v33 = 0;
  v56 = v9;
  v57 = v30;
  v34 = v59;
  while (v33 < *(_QWORD *)(v30 + 16))
  {
    v35 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    v36 = *(_QWORD *)(v32 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v32 + 16))(v9, v30 + v35 + v36 * v33, v34);
    v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
    v37(v9, 0, 1, v34);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v9, 1, v34) == 1)
    {
      v51 = v55;
      a1 = (_QWORD *)v54[0];
      goto LABEL_28;
    }
    v38 = *(uint64_t (**)(char *, char *, uint64_t))(v32 + 32);
    v39 = v38(v65, v9, v34);
    v40 = URL.pathExtension.getter(v39);
    v42 = v41;
    v43 = sub_1000F54F4();
    v44 = *((_QWORD *)v43 + 1);
    if (v40 == *(_QWORD *)v43 && v42 == v44
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, *(_QWORD *)v43, v44, 0) & 1) != 0
      || (v45 = sub_1000F60E4(), v46 = *((_QWORD *)v45 + 1), v40 == *(_QWORD *)v45) && v42 == v46)
    {
      swift_bridgeObjectRelease(v42);
LABEL_16:
      v38(v61, v65, v34);
      v47 = v62[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v62[0]) & 1) == 0)
      {
        sub_10003DEB4(0, *(_QWORD *)(v47 + 16) + 1, 1);
        v47 = v62[0];
      }
      v49 = *(_QWORD *)(v47 + 16);
      v48 = *(_QWORD *)(v47 + 24);
      v30 = v57;
      if (v49 >= v48 >> 1)
      {
        sub_10003DEB4(v48 > 1, v49 + 1, 1);
        v30 = v57;
        v47 = v62[0];
      }
      *(_QWORD *)(v47 + 16) = v49 + 1;
      v34 = v59;
      result = v38((char *)(v47 + v35 + v49 * v36), v61, v59);
      v62[0] = v47;
      v9 = v56;
      v32 = v60;
      goto LABEL_21;
    }
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, *(_QWORD *)v45, v46, 0);
    swift_bridgeObjectRelease(v42);
    if ((v50 & 1) != 0)
      goto LABEL_16;
    v32 = v60;
    result = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v65, v34);
    v30 = v57;
LABEL_21:
    if (v58 == ++v33)
    {
      a1 = (_QWORD *)v54[0];
      v37(v9, 1, 1, v34);
      goto LABEL_27;
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000D6224(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int64_t v12;

  v2 = result[2];
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v12 = v4 + v2;
  else
    v12 = v4;
  result = sub_1000D8248(result, v12, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = (uint64_t)&v3[5 * v7 + 4];
  sub_100005C88(&qword_10015BB48);
  result = (_QWORD *)swift_arrayInitWithCopy(v8);
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v9 = v3[2];
  v10 = __OFADD__(v9, v2);
  v11 = v9 + v2;
  if (!v10)
  {
    v3[2] = v11;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_1000D6320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];

  v4[2] = a1;
  v4[3] = a3;
  return sub_1000D6354((void (*)(uint64_t *__return_ptr, char *))sub_1000DA748, (uint64_t)v4, a2);
}

_QWORD *sub_1000D6354(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *result;
  int64_t v24;
  int64_t v25;
  _QWORD *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, __n128);
  char *v41;
  uint64_t v42;
  void (*v43)(uint64_t *__return_ptr, char *);
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  v4 = v3;
  v42 = a2;
  v43 = a1;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v41 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v13 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
    v39 = *(_QWORD *)(v7 + 72);
    v40 = v14;
    v37 = a3;
    v15 = swift_bridgeObjectRetain(a3);
    v45 = _swiftEmptyArrayStorage;
    while (1)
    {
      v44 = v12;
      v40(v11, v13, v6, v15);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v16)(v11, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6) == 1)
      {
        a3 = v37;
        goto LABEL_23;
      }
      v17 = v41;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v41, v11, v6);
      v43(&v46, v17);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
        swift_bridgeObjectRelease(v45);
        return (_QWORD *)swift_bridgeObjectRelease(v37);
      }
      v38 = v16;
      v18 = v7;
      v19 = *(void (**)(char *, uint64_t))(v7 + 8);
      v20 = v6;
      v19(v17, v6);
      v21 = v46;
      v22 = *(_QWORD *)(v46 + 16);
      result = v45;
      v24 = v45[2];
      v25 = v24 + v22;
      if (__OFADD__(v24, v22))
        break;
      result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v45);
      v26 = v45;
      if (!(_DWORD)result || v25 > v45[3] >> 1)
      {
        if (v24 <= v25)
          v27 = v24 + v22;
        else
          v27 = v24;
        result = sub_1000D8248(result, v27, 1, v45);
        v26 = result;
      }
      v28 = *(_QWORD *)(v21 + 16);
      v45 = v26;
      if (v28)
      {
        v29 = v26[2];
        if ((v26[3] >> 1) - v29 < v22)
          goto LABEL_26;
        v30 = (uint64_t)&v26[5 * v29 + 4];
        sub_100005C88(&qword_10015BB48);
        result = (_QWORD *)swift_arrayInitWithCopy(v30);
        if (v22)
        {
          v31 = v45[2];
          v32 = __OFADD__(v31, v22);
          v33 = v31 + v22;
          if (v32)
            goto LABEL_27;
          v45[2] = v33;
        }
      }
      else if (v22)
      {
        goto LABEL_25;
      }
      swift_bridgeObjectRelease(v21);
      v13 += v39;
      v12 = v44 - 1;
      v4 = 0;
      v6 = v20;
      v7 = v18;
      if (v44 == 1)
      {
        a3 = v37;
        v38(v11, 1, 1, v6, v15);
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    v35 = swift_bridgeObjectRetain(a3);
    v45 = _swiftEmptyArrayStorage;
    v34(v11, 1, 1, v6, v35);
LABEL_23:
    swift_bridgeObjectRelease(a3);
    return v45;
  }
  return result;
}

uint64_t sub_1000D6658(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  sub_1000D66DC((uint64_t)&type metadata for Int8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + class metadata base offset for PartialKeyPath) - 8) + 64), (uint64_t)sub_1000DA78C, (uint64_t)a1, a2, *(_QWORD *)(*a1 + class metadata base offset for PartialKeyPath), (uint64_t)&type metadata for Int8, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for Never, v3);
  return v4;
}

uint64_t sub_1000D66DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t, char *);
  uint64_t result;
  uint64_t v19;

  v13 = *(_QWORD *)(a8 - 8);
  v14 = __chkstk_darwin(a5);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v17(v14, v16);
  if (v11)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a11, v16, a8);
  return result;
}

uint64_t sub_1000D675C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  sub_100005D28(a1, (uint64_t)v25);
  if (!swift_dynamicCast(&v22, v25, (char *)&type metadata for Any + 8, &type metadata for Bool, 0))
  {
    if (swift_dynamicCast(&v22, v25, (char *)&type metadata for Any + 8, &type metadata for Int, 0))
    {
      v24 = v22;
      v3 = sub_1000DA230();
      v4 = BinaryInteger.description.getter(&type metadata for Int, v3);
LABEL_7:
      v2 = v4;
      goto LABEL_15;
    }
    if (!swift_dynamicCast(&v22, v25, (char *)&type metadata for Any + 8, &type metadata for String, 0))
    {
      v5 = sub_100005C88(&qword_10015BA78);
      if (swift_dynamicCast(&v24, v25, (char *)&type metadata for Any + 8, v5, 0))
      {
        v6 = v24;
        v22 = 91;
        v23 = 0xE100000000000000;
        v7 = sub_1000D6A14(v24);
        swift_bridgeObjectRelease(v6);
        v8 = sub_100005C88((uint64_t *)&unk_10015A5D0);
        v9 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
        v10 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v8, v9);
        v12 = v11;
        swift_bridgeObjectRelease(v7);
      }
      else
      {
        v13 = sub_100005C88((uint64_t *)&unk_10015BA80);
        if (!swift_dynamicCast(&v24, v25, (char *)&type metadata for Any + 8, v13, 0))
        {
          sub_100005D28(a1, (uint64_t)&v22);
          v4 = String.init<A>(describing:)(&v22, (char *)&type metadata for Any + 8);
          goto LABEL_7;
        }
        v14 = v24;
        v15 = sub_1000D6AEC(v24);
        swift_bridgeObjectRelease(v14);
        v22 = v15;
        v16 = sub_100005C88((uint64_t *)&unk_10015A5D0);
        v17 = sub_10001284C((unint64_t *)&qword_10015BA90, (uint64_t *)&unk_10015A5D0, (uint64_t)&protocol conformance descriptor for [A]);
        v10 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v16, v17);
        v12 = v18;
        swift_bridgeObjectRelease(v15);
        v22 = 91;
        v23 = 0xE100000000000000;
      }
      v19._countAndFlagsBits = v10;
      v19._object = v12;
      String.append(_:)(v19);
      swift_bridgeObjectRelease(v12);
      v20._countAndFlagsBits = 93;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
    }
    v2 = v22;
    goto LABEL_15;
  }
  if ((_BYTE)v22)
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
LABEL_15:
  sub_100005D08(v25);
  return v2;
}

_QWORD *sub_1000D6A14(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10000C958(0, v1, 0);
    v3 = a1 + 32;
    do
    {
      v4 = sub_1000D675C(v3);
      v6 = v5;
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        sub_10000C958(v7 > 1, v8 + 1, 1);
      _swiftEmptyArrayStorage[2] = v8 + 1;
      v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      v9[5] = v6;
      v3 += 32;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000D6AEC(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  void *object;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  _OWORD v35[2];
  _QWORD v36[2];
  _BYTE v37[40];
  _QWORD *v38;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (!v1)
    return (uint64_t)v2;
  v3 = a1;
  v38 = _swiftEmptyArrayStorage;
  sub_10000C958(0, v1, 0);
  result = sub_1000109E8(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v29 = v3 + 64;
  v26 = v3 + 80;
  v27 = v1;
  v30 = v3;
  v28 = v5;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_26;
    v12 = *(_QWORD *)(v3 + 56);
    v13 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v15 = *v13;
    v14 = v13[1];
    sub_100005D28(v12 + 32 * v6, (uint64_t)v37);
    v36[0] = v15;
    v36[1] = v14;
    *(_QWORD *)&v34 = v15;
    *((_QWORD *)&v34 + 1) = v14;
    sub_100005D28((uint64_t)v37, (uint64_t)v35);
    v32 = v34;
    v33[0] = v35[0];
    v33[1] = v35[1];
    swift_bridgeObjectRetain_n(v14, 2);
    sub_1000124F8((uint64_t)v36, &qword_100157C60);
    v31 = v32;
    swift_bridgeObjectRetain(*((_QWORD *)&v32 + 1));
    v16._countAndFlagsBits = 8250;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = sub_1000D675C(v33);
    object = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(object);
    sub_1000124F8((uint64_t)&v32, &qword_100157C60);
    v2 = v38;
    result = swift_isUniquelyReferenced_nonNull_native(v38);
    if ((result & 1) == 0)
    {
      result = sub_10000C958(0, v2[2] + 1, 1);
      v2 = v38;
    }
    v20 = v2[2];
    v19 = v2[3];
    if (v20 >= v19 >> 1)
    {
      result = sub_10000C958(v19 > 1, v20 + 1, 1);
      v2 = v38;
    }
    v2[2] = v20 + 1;
    *(_OWORD *)&v2[2 * v20 + 4] = v31;
    v3 = v30;
    v9 = 1 << *(_BYTE *)(v30 + 32);
    if (v6 >= v9)
      goto LABEL_27;
    v8 = v29;
    v21 = *(_QWORD *)(v29 + 8 * v11);
    if ((v21 & (1 << v6)) == 0)
      goto LABEL_28;
    v5 = v28;
    if (*(_DWORD *)(v30 + 36) != v28)
      goto LABEL_29;
    v22 = v21 & (-2 << (v6 & 0x3F));
    if (v22)
    {
      v9 = __clz(__rbit64(v22)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v27;
    }
    else
    {
      v23 = v11 + 1;
      v24 = (unint64_t)(v9 + 63) >> 6;
      v10 = v27;
      if (v11 + 1 < v24)
      {
        v25 = *(_QWORD *)(v29 + 8 * v23);
        if (v25)
        {
LABEL_22:
          v9 = __clz(__rbit64(v25)) + (v23 << 6);
        }
        else
        {
          while (v24 - 2 != v11)
          {
            v25 = *(_QWORD *)(v26 + 8 * v11++);
            if (v25)
            {
              v23 = v11 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return (uint64_t)v2;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000D6DD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 120);
  swift_beginAccess(v4, v6, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_1000D6E34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 120);
  swift_beginAccess(v4, v6, 33, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess(v6);
}

uint64_t (*sub_1000D6EA0(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120), a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000D6EE4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t (*v31)(uint64_t, void *, char *, unint64_t *, __n128);
  void *v32;
  __n128 v33;
  uint64_t v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v7 = *(_QWORD *)(v3 + 80);
  v38 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(a1);
  v37 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v35 - v10);
  v13 = v12[3];
  v14 = v12[4];
  sub_100004DE4(v12, v13);
  sub_10010731C(v13, v14);
  v15 = v42;
  v16 = v43;
  sub_100004DE4(&v40, v42);
  v17 = (*(uint64_t (**)(uint64_t, void *, _QWORD, uint64_t, uint64_t))(v16 + 16))(a1, a2, 0, v15, v16);
  v19 = v18;
  sub_100005D08(&v40);
  if (v19 >> 60 == 15)
  {
    v40 = 0;
    v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(v41);
    v40 = 0xD000000000000015;
    v41 = 0x800000010012AC40;
    v20._countAndFlagsBits = a1;
    v20._object = a2;
    String.append(_:)(v20);
    v21 = v40;
    v22 = v41;
    v23 = sub_1000122F8();
    v24 = swift_allocError(&type metadata for KMError, v23, 0, 0);
    *(_QWORD *)v25 = v21;
    *(_QWORD *)(v25 + 8) = v22;
    *(_OWORD *)(v25 + 16) = 0u;
    *(_OWORD *)(v25 + 32) = 0u;
    *(_OWORD *)(v25 + 48) = 0u;
    *(_QWORD *)(v25 + 64) = 0;
    *(_BYTE *)(v25 + 72) = 10;
    swift_willThrow(v24);
  }
  else
  {
    v35 = a1;
    v36 = a2;
    v26 = type metadata accessor for PropertyListDecoder(0);
    v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v28 = PropertyListDecoder.init()(v27);
    v21 = v28;
    v29 = v39;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v11, v7, v17, v19, v7, *(_QWORD *)(v44 + 88));
    if (v29)
    {
      swift_release(v28);
      sub_100021610(v17, v19);
    }
    else
    {
      v30 = v37;
      (*(void (**)(char *, _QWORD *, uint64_t))(v38 + 16))(v37, v11, v7);
      sub_100005C44(a3, (uint64_t)&v40);
      v31 = *(uint64_t (**)(uint64_t, void *, char *, unint64_t *, __n128))(v44 + 160);
      v32 = v36;
      v33 = swift_bridgeObjectRetain(v36);
      v21 = v31(v35, v32, v30, &v40, v33);
      swift_release(v28);
      sub_100021610(v17, v19);
      (*(void (**)(_QWORD *, uint64_t))(v38 + 8))(v11, v7);
    }
  }
  return v21;
}

char *sub_1000D7178(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  char *v9;

  v9 = (char *)swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 80) - 8) + 32))(&v9[*(_QWORD *)(*(_QWORD *)v9 + 120)], a3);
  *((_QWORD *)v9 + 2) = a1;
  *((_QWORD *)v9 + 3) = a2;
  sub_100004E2C(a4, (uint64_t)(v9 + 32));
  return v9;
}

uint64_t sub_1000D71F8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, void *, uint64_t, unint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t);
  char *v39;
  Swift::String v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v2 = v1;
  v52 = *v1;
  v54 = *(_QWORD *)(v52 + 80);
  v51 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(a1);
  v53 = (uint64_t)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v46 - v9;
  v11 = (void *)v2[3];
  v50 = v2[2];
  v12 = URL.init(fileURLWithPath:)(v50, v11);
  URL.deletingLastPathComponent()(v12);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v14 = v2[7];
  v15 = v2[8];
  sub_100004DE4(v2 + 4, v14);
  sub_10010731C(v14, v15);
  v17 = v57;
  v16 = v58;
  sub_100004DE4(&v55, v57);
  v18 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 64))(v10, v17, v16);
  if (v18)
  {
    v13(v10, v4);
    return sub_100005D08(&v55);
  }
  else
  {
    v46 = v2 + 4;
    v47 = v11;
    v48 = v10;
    v49 = v13;
    v59 = v4;
    sub_100005D08(&v55);
    v20 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    v21 = PropertyListEncoder.init()();
    v22 = dispatch thunk of PropertyListEncoder.outputFormat.setter(100);
    v23 = v53;
    v24.n128_f64[0] = (*(double (**)(uint64_t))(*v2 + 128))(v22);
    v25 = v54;
    v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v23, v54, *(_QWORD *)(v52 + 96), v24);
    v28 = v27;
    v52 = v21;
    (*(void (**)(uint64_t, unint64_t))(v51 + 8))(v23, v25);
    v29 = v2[7];
    v30 = v2[8];
    sub_100004DE4(v46, v29);
    sub_10010731C(v29, v30);
    v31 = v57;
    v32 = v58;
    sub_100004DE4(&v55, v57);
    v33 = *(uint64_t (**)(uint64_t, void *, uint64_t, unint64_t, _QWORD, uint64_t, uint64_t))(v32 + 40);
    sub_1000122B4(v26, v28);
    v34 = v50;
    v35 = v28;
    v36 = v47;
    LOBYTE(v31) = v33(v50, v47, v26, v35, 0, v31, v32);
    v53 = v26;
    v54 = v35;
    sub_100011F40(v26, v35);
    sub_100005D08(&v55);
    v37 = v59;
    v39 = v48;
    v38 = (uint64_t (*)(char *, uint64_t))v49;
    if ((v31 & 1) != 0)
    {
      v49(v48, v59);
      sub_100011F40(v53, v54);
      return swift_release(v52);
    }
    else
    {
      v55 = 0;
      v56 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease(v56);
      v55 = 0xD00000000000001FLL;
      v56 = 0x800000010012AC60;
      swift_bridgeObjectRetain(v36);
      v40._countAndFlagsBits = v34;
      v40._object = v36;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(v36);
      v41 = v55;
      v42 = v56;
      v43 = sub_1000122F8();
      v44 = swift_allocError(&type metadata for KMError, v43, 0, 0);
      *(_QWORD *)v45 = v41;
      *(_QWORD *)(v45 + 8) = v42;
      *(_OWORD *)(v45 + 16) = 0u;
      *(_OWORD *)(v45 + 32) = 0u;
      *(_OWORD *)(v45 + 48) = 0u;
      *(_QWORD *)(v45 + 64) = 0;
      *(_BYTE *)(v45 + 72) = 20;
      swift_willThrow(v44);
      swift_release(v52);
      sub_100011F40(v53, v54);
      return v38(v39, v37);
    }
  }
}

uint64_t sub_1000D75C4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = v0 + 4;
  v3 = v0[7];
  v4 = v1[8];
  sub_100004DE4(v2, v3);
  sub_10010731C(v3, v4);
  v5 = v15;
  v6 = v16;
  sub_100004DE4(v14, v15);
  v7 = v1[2];
  v8 = v1[3];
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 136))(v7, v8, 0, v5, v6);
  result = sub_100005D08(v14);
  if ((v3 & 1) != 0)
  {
    v10 = v1[7];
    v11 = v1[8];
    sub_100004DE4(v2, v10);
    sub_10010731C(v10, v11);
    v12 = v15;
    v13 = v16;
    sub_100004DE4(v14, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 96))(v7, v8, v12, v13);
    return sub_100005D08(v14);
  }
  return result;
}

char *sub_1000D76E0()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 3));
  sub_100005D08((_QWORD *)v0 + 4);
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 120)]);
  return v0;
}

uint64_t sub_1000D772C()
{
  uint64_t v0;

  sub_1000D76E0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D7750()
{
  xpc_object_t v0;
  xpc_type_t type;
  uint64_t result;

  v0 = xpc_array_create(0, 0);
  type = xpc_get_type(v0);
  result = swift_unknownObjectRelease(v0);
  qword_1001758F0 = (uint64_t)type;
  return result;
}

uint64_t sub_1000D7790()
{
  xpc_object_t v0;
  xpc_type_t type;
  uint64_t result;

  v0 = xpc_BOOL_create(0);
  type = xpc_get_type(v0);
  result = swift_unknownObjectRelease(v0);
  qword_1001758F8 = (uint64_t)type;
  return result;
}

uint64_t sub_1000D77CC()
{
  xpc_object_t v0;
  xpc_type_t type;
  uint64_t result;

  v0 = xpc_dictionary_create(0, 0, 0);
  type = xpc_get_type(v0);
  result = swift_unknownObjectRelease(v0);
  qword_100175900 = (uint64_t)type;
  return result;
}

uint64_t sub_1000D7810()
{
  xpc_object_t v0;
  xpc_type_t type;
  uint64_t result;

  v0 = xpc_string_create("");
  type = xpc_get_type(v0);
  result = swift_unknownObjectRelease(v0);
  qword_100175908 = (uint64_t)type;
  return result;
}

BOOL sub_1000D7850(void *a1)
{
  uint64_t v1;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(a1);
  return sub_1000D9858(a1, v1, ObjectType, &qword_100171BA0, (xpc_type_t *)&qword_100175900, (uint64_t)sub_1000D77CC);
}

BOOL sub_1000D789C(uint64_t a1)
{
  void *v1;
  uint64_t v3;

  v3 = type metadata accessor for XPCUtil();
  return sub_1000D9858(v1, v3, a1, &qword_100171BA0, (xpc_type_t *)&qword_100175900, (uint64_t)sub_1000D77CC);
}

xpc_object_t sub_1000D78E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;

  v6 = type metadata accessor for XPCUtil();
  if (!sub_1000D9858(v3, v6, a3, &qword_100171BA0, (xpc_type_t *)&qword_100175900, (uint64_t)sub_1000D77CC))
    return 0;
  v7 = String.utf8CString.getter(a1);
  v8 = xpc_dictionary_get_value(v3, (const char *)(v7 + 32));
  swift_release(v7);
  return v8;
}

const char *sub_1000D7980()
{
  void *v0;
  const char *result;

  result = xpc_dictionary_get_string(v0, _xpc_error_key_description);
  if (result)
    return (const char *)String.init(cString:)();
  return result;
}

const char *sub_1000D79B8(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  const char *result;

  v3 = type metadata accessor for XPCUtil();
  if (!sub_1000D9858(v1, v3, a1, &qword_100171BA8, (xpc_type_t *)&qword_100175908, (uint64_t)sub_1000D7810))
    return 0;
  result = xpc_string_get_string_ptr(v1);
  if (result)
    return (const char *)String.init(cString:)(result);
  return result;
}

uint64_t sub_1000D7A20(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[5];
  uint64_t v13;
  _QWORD *v14;
  char v15;

  v3 = type metadata accessor for XPCUtil();
  if (!sub_1000D9858(v1, v3, a1, &qword_100171B90, (xpc_type_t *)&qword_1001758F0, (uint64_t)sub_1000D7750))
    return 0;
  v15 = 1;
  v14 = _swiftEmptyArrayStorage;
  v4 = swift_allocObject(&unk_10014EA98, 32, 7);
  *(_QWORD *)(v4 + 16) = &v15;
  *(_QWORD *)(v4 + 24) = &v14;
  v5 = swift_allocObject(&unk_10014EAC0, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_1000DA804;
  *(_QWORD *)(v5 + 24) = v4;
  v12[4] = sub_1000DA8E8;
  v13 = v5;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_1000D7BC0;
  v12[3] = &unk_10014EAD8;
  v6 = _Block_copy(v12);
  v7 = v13;
  swift_retain(v5);
  swift_release(v7);
  xpc_array_apply(v1, v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 87, 957, 31, 1);
  result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v10 = v14;
    if (v15 == 1)
    {
      swift_bridgeObjectRetain(v14);
      v11 = v10;
    }
    else
    {
      v11 = 0;
    }
    swift_release(v4);
    swift_bridgeObjectRelease(v10);
    return (uint64_t)v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D7BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  char v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a3);
  v6 = v5(a2, a3);
  swift_unknownObjectRelease(a3);
  return v6 & 1;
}

BOOL sub_1000D7C10(void *a1)
{
  return sub_1000D7C28(a1, (uint64_t (*)(void))sub_100090254);
}

BOOL sub_1000D7C1C(void *a1)
{
  return sub_1000D7C28(a1, (uint64_t (*)(void))sub_100090260);
}

BOOL sub_1000D7C28(void *a1, uint64_t (*a2)(void))
{
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  xpc_object_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  xpc_object_t v26;
  uint64_t v27;
  _BOOL4 value;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  xpc_object_t v32;
  uint64_t v33;
  uint64_t v34;
  xpc_object_t v36;
  xpc_object_t v37;

  v4 = type metadata accessor for XPCUtil();
  ObjectType = swift_getObjectType(a1);
  if (!sub_1000D9858(a1, v4, ObjectType, &qword_100171BA0, (xpc_type_t *)&qword_100175900, (uint64_t)sub_1000D77CC))
    goto LABEL_20;
  v6 = (uint64_t *)sub_10009026C();
  v7 = *v6;
  v8 = v6[1];
  swift_bridgeObjectRetain(v8);
  v9 = sub_1000D78E8(v7, v8, ObjectType);
  swift_bridgeObjectRelease(v8);
  if (!v9)
    goto LABEL_20;
  v10 = swift_getObjectType(v9);
  v11 = sub_1000D79B8(v10);
  if (!v12)
    goto LABEL_18;
  v13 = v11;
  v14 = v12;
  v15 = (_QWORD *)a2();
  v16 = v15[1];
  if (v13 == (const char *)*v15 && v14 == v16)
  {
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, *v15, v16, 0);
    swift_bridgeObjectRelease(v14);
    if ((v17 & 1) == 0)
    {
LABEL_18:
      v36 = v9;
LABEL_19:
      swift_unknownObjectRelease(v36);
LABEL_20:
      swift_unknownObjectRelease(a1);
      return 0;
    }
  }
  v18 = (uint64_t *)sub_100090278();
  v19 = *v18;
  v20 = v18[1];
  swift_bridgeObjectRetain(v20);
  v21 = sub_1000D78E8(v19, v20, ObjectType);
  swift_bridgeObjectRelease(v20);
  if (!v21)
    goto LABEL_18;
  v22 = swift_getObjectType(v21);
  if (!sub_1000D9858(v21, v4, v22, &qword_100171BA0, (xpc_type_t *)&qword_100175900, (uint64_t)sub_1000D77CC)
    || (v23 = (uint64_t *)sub_100090284(),
        v24 = *v23,
        v25 = v23[1],
        swift_bridgeObjectRetain(v25),
        v26 = sub_1000D78E8(v24, v25, v22),
        swift_bridgeObjectRelease(v25),
        !v26))
  {
    swift_unknownObjectRelease(v21);
    goto LABEL_18;
  }
  v27 = swift_getObjectType(v26);
  if (!sub_1000D9858(v26, v4, v27, &qword_100171B98, (xpc_type_t *)&qword_1001758F8, (uint64_t)sub_1000D7790))
  {
    swift_unknownObjectRelease(v26);
    swift_unknownObjectRelease(v9);
    v36 = v21;
    goto LABEL_19;
  }
  value = xpc_BOOL_get_value(v26);
  v29 = (uint64_t *)sub_100090290();
  v30 = *v29;
  v31 = v29[1];
  swift_bridgeObjectRetain(v31);
  v32 = sub_1000D78E8(v30, v31, v22);
  swift_bridgeObjectRelease(v31);
  if (!v32)
  {
    swift_unknownObjectRelease(v21);
    v37 = v9;
LABEL_24:
    swift_unknownObjectRelease(v37);
    v36 = v26;
    goto LABEL_19;
  }
  v33 = swift_getObjectType(v32);
  if (!sub_1000D9858(v32, v4, v33, &qword_100171B90, (xpc_type_t *)&qword_1001758F0, (uint64_t)sub_1000D7750))
  {
    swift_unknownObjectRelease(v32);
    swift_unknownObjectRelease(v9);
    v37 = v21;
    goto LABEL_24;
  }
  v34 = sub_1000D7A20(v33);
  swift_unknownObjectRelease(v9);
  swift_unknownObjectRelease(v21);
  swift_unknownObjectRelease(v26);
  swift_unknownObjectRelease(v32);
  swift_unknownObjectRelease(a1);
  return v34 && value;
}

uint64_t sub_1000D7F34()
{
  return kIOMainPortDefault;
}

uint64_t sub_1000D7F44(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = String.utf8CString.getter(a1);
  v5 = os_transaction_create(v4 + 32);
  v6 = swift_release(v4);
  a3(v6);
  return swift_unknownObjectRelease(v5);
}

uint64_t sub_1000D7F90()
{
  if (qword_100171BB0 != -1)
    swift_once(&qword_100171BB0, sub_1000D7FD0);
  return byte_100171BB8;
}

uint64_t sub_1000D7FD0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[5];

  v0 = (uint64_t *)sub_10009017C();
  v2 = *v0;
  v1 = v0[1];
  swift_bridgeObjectRetain(v1);
  v3 = (uint64_t *)sub_10008FA18();
  v5 = *v3;
  v4 = v3[1];
  swift_bridgeObjectRetain(v4);
  v6 = sub_10006F2C4(v5);
  v8 = v7;
  swift_bridgeObjectRelease(v4);
  v13[2] = v6;
  v13[3] = v8;
  v13[0] = 32;
  v13[1] = 0xE100000000000000;
  v9 = sub_100026250();
  v10 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v13, &type metadata for String, &type metadata for String, v9, v9);
  swift_bridgeObjectRelease(v8);
  v11 = sub_100034320(v2, v1, v10);
  swift_bridgeObjectRelease(v1);
  result = swift_bridgeObjectRelease(v10);
  byte_100171BB8 = v11 & 1;
  return result;
}

void sub_1000D80D0(int *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  size_t v12;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = __DataStorage._offset.getter();
  v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v5 - v4;
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  memset((void *)(v7 + v9), a2, v12);
}

char *sub_1000D8150(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_100159CB8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

_QWORD *sub_1000D8248(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015BA70);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100005C88(&qword_10015BB48);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_1000D837C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType(a2))
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return sub_100005C88(&qword_10015BB70);
  else
    return type metadata accessor for _ContiguousArrayStorage(0, a2);
}

uint64_t sub_1000D83C8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = _swift_isClassOrObjCExistentialType(a3, a3);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v6 = a2;
  if (*(_QWORD *)(v6 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t sub_1000D8418(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _OWORD v33[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88((uint64_t *)&unk_10015BB50);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = v3;
    v9 = 0;
    v10 = (_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v19 >= v14)
          goto LABEL_37;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_37;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v32;
                goto LABEL_44;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_46;
                if (v9 >= v14)
                  goto LABEL_37;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
        sub_100017464(v23, v33);
      else
        sub_100005D28((uint64_t)v23, (uint64_t)v33);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v22);
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v26);
        }
        while (v30 == -1);
        v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v22;
      result = (uint64_t)sub_100017464(v33, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_44:
  *v3 = v8;
  return result;
}

unint64_t sub_1000D86D8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v11);
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1)
              *v15 = *v11;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = (_OWORD *)(v16 + 32 * v3);
            v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v17 >= v18 + 2))
            {
              v9 = v18[1];
              *v17 = *v18;
              v17[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_1000D886C(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100099990(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100005D08(v17);
        return sub_100017464(a1, v17);
      }
      return sub_1000D8984(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000D89E8();
      goto LABEL_7;
    }
    sub_1000D8418(v13, a3 & 1);
    v19 = sub_100099990(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_1000D8984(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
  __break(1u);
  return result;
}

_OWORD *sub_1000D8984(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_100017464(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

void *sub_1000D89E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_100005C88((uint64_t *)&unk_10015BB50);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_100005D28(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = sub_100017464(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_1000D8BA8(_QWORD *a1)
{
  return sub_10000C500(0, a1[2], 0, a1);
}

uint64_t sub_1000D8BBC(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  Swift::Int v90;
  char *v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  Swift::Int v112;
  Swift::Int v113;
  Swift::Int v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_1000D9314(0, v3, 1, a1);
      return result;
    }
    goto LABEL_136;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_135;
  v114 = v3;
  v111 = result;
  v116 = v1;
  v107 = a1;
  if (v3 <= 1)
  {
    v7 = _swiftEmptyArrayStorage;
    v115 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v11 = _swiftEmptyArrayStorage[2];
      v10 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_100;
    }
    v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    result = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(result + 16) = v6;
    v3 = v114;
    v110 = (_QWORD *)result;
    v115 = (char *)(result + 32);
  }
  v8 = 0;
  v9 = *a1;
  v108 = *a1 + 24;
  v10 = (char *)_swiftEmptyArrayStorage;
  v117 = *a1;
  while (1)
  {
    v12 = v8++;
    v113 = v12;
    if (v8 < v3)
    {
      v13 = (uint64_t *)(v9 + 16 * v8);
      v15 = *v13;
      v14 = v13[1];
      v16 = (uint64_t *)(v9 + 16 * v12);
      v18 = *v16;
      v17 = v16[1];
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v17);
      v19 = String.count.getter(v15, v14);
      v20 = String.count.getter(v18, v17);
      swift_bridgeObjectRelease(v14);
      result = swift_bridgeObjectRelease(v17);
      v8 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v21 = (_QWORD *)(v108 + 16 * v12);
        v22 = v21;
        while (1)
        {
          v23 = v22[2];
          v22 += 2;
          v24 = *(v21 - 1);
          v25 = *v21;
          v26 = v21[1];
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v25);
          v27 = String.count.getter(v26, v23);
          v28 = String.count.getter(v24, v25);
          swift_bridgeObjectRelease(v23);
          result = swift_bridgeObjectRelease(v25);
          if (v20 < v19 == v28 >= v27)
            break;
          ++v8;
          v21 = v22;
          v3 = v114;
          if (v114 == v8)
          {
            v8 = v114;
            goto LABEL_23;
          }
        }
        v3 = v114;
LABEL_23:
        v12 = v113;
      }
      v9 = v117;
      if (v20 < v19)
      {
        if (v8 < v12)
          goto LABEL_137;
        if (v12 < v8)
        {
          v29 = 16 * v8;
          v30 = 16 * v12;
          v31 = v8;
          v32 = v12;
          do
          {
            if (v32 != --v31)
            {
              if (!v117)
                goto LABEL_142;
              v33 = v117 + v29;
              v34 = *(_QWORD *)(v117 + v30);
              v35 = *(_QWORD *)(v117 + v30 + 8);
              *(_OWORD *)(v117 + v30) = *(_OWORD *)(v117 + v29 - 16);
              *(_QWORD *)(v33 - 16) = v34;
              *(_QWORD *)(v33 - 8) = v35;
            }
            ++v32;
            v29 -= 16;
            v30 += 16;
          }
          while (v32 < v31);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v12))
        goto LABEL_134;
      if (v8 - v12 < v111)
      {
        v36 = v12 + v111;
        if (__OFADD__(v12, v111))
          goto LABEL_138;
        if (v36 >= v3)
          v36 = v3;
        if (v36 < v12)
          goto LABEL_139;
        if (v8 != v36)
        {
          v109 = v10;
          v37 = (_QWORD *)(v9 + 16 * v8);
          v112 = v36;
          do
          {
            v38 = (uint64_t *)(v9 + 16 * v8);
            v39 = *v38;
            v40 = v38[1];
            v41 = v37;
            while (1)
            {
              v42 = *(v41 - 2);
              v43 = *(v41 - 1);
              swift_bridgeObjectRetain(v40);
              swift_bridgeObjectRetain(v43);
              v44 = String.count.getter(v39, v40);
              v45 = String.count.getter(v42, v43);
              swift_bridgeObjectRelease(v40);
              result = swift_bridgeObjectRelease(v43);
              if (v45 >= v44)
                break;
              v9 = v117;
              if (!v117)
                goto LABEL_140;
              v39 = *v41;
              v40 = v41[1];
              *(_OWORD *)v41 = *((_OWORD *)v41 - 1);
              *(v41 - 1) = v40;
              *(v41 - 2) = v39;
              v41 -= 2;
              if (v8 == ++v12)
                goto LABEL_42;
            }
            v9 = v117;
LABEL_42:
            ++v8;
            v37 += 2;
            v12 = v113;
          }
          while (v8 != v112);
          v8 = v112;
          v10 = v109;
        }
      }
    }
    if (v8 < v12)
    {
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1000592AC(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v10 = (char *)result;
    }
    v47 = *((_QWORD *)v10 + 2);
    v46 = *((_QWORD *)v10 + 3);
    v11 = v47 + 1;
    v9 = v117;
    if (v47 >= v46 >> 1)
    {
      result = (uint64_t)sub_1000592AC((char *)(v46 > 1), v47 + 1, 1, v10);
      v9 = v117;
      v10 = (char *)result;
    }
    *((_QWORD *)v10 + 2) = v11;
    v48 = v10 + 32;
    v49 = &v10[16 * v47 + 32];
    *(_QWORD *)v49 = v12;
    *((_QWORD *)v49 + 1) = v8;
    if (v47)
      break;
    v11 = 1;
LABEL_15:
    v3 = v114;
    if (v8 >= v114)
    {
      v7 = v110;
LABEL_100:
      v110 = v7;
      if (v11 < 2)
      {
LABEL_111:
        swift_bridgeObjectRelease(v10);
        v110[2] = 0;
        return swift_bridgeObjectRelease(v110);
      }
      v101 = *v107;
      while (1)
      {
        v102 = v11 - 2;
        if (v11 < 2)
          break;
        if (!v101)
          goto LABEL_143;
        v103 = *(_QWORD *)&v10[16 * v102 + 32];
        v104 = *(_QWORD *)&v10[16 * v11 + 24];
        result = sub_1000D9418((char *)(v101 + 16 * v103), (char *)(v101 + 16 * *(_QWORD *)&v10[16 * v11 + 16]), v101 + 16 * v104, v115);
        if (v116)
          goto LABEL_97;
        if (v104 < v103)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native(v10);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1000593A4((uint64_t)v10);
          v10 = (char *)result;
        }
        if (v102 >= *((_QWORD *)v10 + 2))
          goto LABEL_132;
        v105 = &v10[16 * v102 + 32];
        *(_QWORD *)v105 = v103;
        *((_QWORD *)v105 + 1) = v104;
        v106 = *((_QWORD *)v10 + 2);
        if (v11 > v106)
          goto LABEL_133;
        result = (uint64_t)memmove(&v10[16 * v11 + 16], &v10[16 * v11 + 32], 16 * (v106 - v11));
        *((_QWORD *)v10 + 2) = v106 - 1;
        v11 = v106 - 1;
        if (v106 <= 2)
          goto LABEL_111;
      }
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
      return result;
    }
  }
  while (1)
  {
    v50 = v11 - 1;
    if (v11 >= 4)
    {
      v55 = &v48[2 * v11];
      v56 = *(v55 - 8);
      v57 = *(v55 - 7);
      v61 = __OFSUB__(v57, v56);
      v58 = v57 - v56;
      if (v61)
        goto LABEL_118;
      v60 = *(v55 - 6);
      v59 = *(v55 - 5);
      v61 = __OFSUB__(v59, v60);
      v53 = v59 - v60;
      v54 = v61;
      if (v61)
        goto LABEL_119;
      v62 = v11 - 2;
      v63 = &v48[2 * v11 - 4];
      v65 = *v63;
      v64 = v63[1];
      v61 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      if (v61)
        goto LABEL_120;
      v61 = __OFADD__(v53, v66);
      v67 = v53 + v66;
      if (v61)
        goto LABEL_122;
      if (v67 >= v58)
      {
        v85 = &v48[2 * v50];
        v87 = *v85;
        v86 = v85[1];
        v61 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v61)
          goto LABEL_128;
        v78 = v53 < v88;
        goto LABEL_86;
      }
    }
    else
    {
      if (v11 != 3)
      {
        v79 = *((_QWORD *)v10 + 4);
        v80 = *((_QWORD *)v10 + 5);
        v61 = __OFSUB__(v80, v79);
        v72 = v80 - v79;
        v73 = v61;
        goto LABEL_80;
      }
      v52 = *((_QWORD *)v10 + 4);
      v51 = *((_QWORD *)v10 + 5);
      v61 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      v54 = v61;
    }
    if ((v54 & 1) != 0)
      goto LABEL_121;
    v62 = v11 - 2;
    v68 = &v48[2 * v11 - 4];
    v70 = *v68;
    v69 = v68[1];
    v71 = __OFSUB__(v69, v70);
    v72 = v69 - v70;
    v73 = v71;
    if (v71)
      goto LABEL_123;
    v74 = &v48[2 * v50];
    v76 = *v74;
    v75 = v74[1];
    v61 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v61)
      goto LABEL_125;
    if (__OFADD__(v72, v77))
      goto LABEL_127;
    if (v72 + v77 >= v53)
    {
      v78 = v53 < v77;
LABEL_86:
      if (v78)
        v50 = v62;
      goto LABEL_88;
    }
LABEL_80:
    if ((v73 & 1) != 0)
      goto LABEL_124;
    v81 = &v48[2 * v50];
    v83 = *v81;
    v82 = v81[1];
    v61 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if (v61)
      goto LABEL_126;
    if (v84 < v72)
      goto LABEL_15;
LABEL_88:
    v89 = v50 - 1;
    if (v50 - 1 >= v11)
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
    if (!v9)
      goto LABEL_141;
    v90 = v8;
    v91 = v10;
    v92 = v48;
    v93 = &v48[2 * v89];
    v94 = *v93;
    v95 = v92;
    v96 = v50;
    v97 = &v92[2 * v50];
    v98 = v97[1];
    result = sub_1000D9418((char *)(v9 + 16 * *v93), (char *)(v9 + 16 * *v97), v9 + 16 * v98, v115);
    if (v116)
      break;
    if (v98 < v94)
      goto LABEL_115;
    if (v96 > *((_QWORD *)v91 + 2))
      goto LABEL_116;
    v99 = v96;
    *v93 = v94;
    v95[2 * v89 + 1] = v98;
    v100 = *((_QWORD *)v91 + 2);
    if (v96 >= v100)
      goto LABEL_117;
    v48 = v95;
    v10 = v91;
    v116 = 0;
    v11 = v100 - 1;
    result = (uint64_t)memmove(v97, v97 + 2, 16 * (v100 - 1 - v99));
    *((_QWORD *)v91 + 2) = v100 - 1;
    v9 = v117;
    v8 = v90;
    if (v100 <= 2)
      goto LABEL_15;
  }
  v10 = v91;
LABEL_97:
  swift_bridgeObjectRelease(v10);
  v110[2] = 0;
  return swift_bridgeObjectRelease(v110);
}

uint64_t sub_1000D9314(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v16 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = (_QWORD *)(*a4 + 16 * a3);
LABEL_5:
    v7 = (uint64_t *)(v5 + 16 * v4);
    v8 = *v7;
    v9 = v7[1];
    v10 = v16;
    v17 = v6;
    while (1)
    {
      v11 = *(v6 - 2);
      v12 = *(v6 - 1);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v12);
      v13 = String.count.getter(v8, v9);
      v14 = String.count.getter(v11, v12);
      swift_bridgeObjectRelease(v9);
      result = swift_bridgeObjectRelease(v12);
      if (v14 >= v13)
      {
LABEL_4:
        ++v4;
        v6 = v17 + 2;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v8 = *v6;
      v9 = v6[1];
      *(_OWORD *)v6 = *((_OWORD *)v6 - 1);
      *(v6 - 1) = v9;
      *(v6 - 2) = v8;
      v6 -= 2;
      if (v4 == ++v10)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D9418(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  BOOL v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  char *v36;
  char *v37;
  char *v38;

  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 15;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    v15 = a4;
    if (a4 != __src || &__src[16 * v13] <= a4)
      memmove(a4, __src, 16 * v13);
    if (v7 >= v6 || v11 < 16)
    {
      v14 = &v15[16 * v13];
      goto LABEL_43;
    }
    v25 = (char *)(a3 - 16);
    v14 = &a4[16 * v13];
    v36 = v7;
    v37 = a4;
    while (1)
    {
      v26 = *((_QWORD *)v14 - 2);
      v27 = *((_QWORD *)v14 - 1);
      v38 = v25 + 16;
      v29 = *((_QWORD *)v6 - 2);
      v30 = *((_QWORD *)v6 - 1);
      v28 = v6 - 16;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v30);
      v31 = String.count.getter(v26, v27);
      v32 = String.count.getter(v29, v30);
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v30);
      if (v32 >= v31)
      {
        v33 = (unint64_t)v36;
        v28 = v14 - 16;
        if (v38 != v14)
        {
          v14 -= 16;
          goto LABEL_37;
        }
        v34 = v25 >= v14;
        v14 -= 16;
        v15 = v37;
        if (v34)
          goto LABEL_38;
      }
      else
      {
        v33 = (unint64_t)v36;
        if (v38 != v6)
        {
          v6 -= 16;
LABEL_37:
          v15 = v37;
LABEL_38:
          *(_OWORD *)v25 = *(_OWORD *)v28;
          goto LABEL_39;
        }
        v34 = v25 >= v6;
        v6 -= 16;
        v15 = v37;
        if (v34)
          goto LABEL_38;
      }
LABEL_39:
      if ((unint64_t)v6 > v33)
      {
        v25 -= 16;
        if (v14 > v15)
          continue;
      }
      goto LABEL_43;
    }
  }
  if (a4 != __dst || &__dst[16 * v10] <= a4)
    memmove(a4, __dst, 16 * v10);
  v14 = &a4[16 * v10];
  v15 = a4;
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v16 = *(_QWORD *)v6;
      v17 = *((_QWORD *)v6 + 1);
      v18 = v6;
      v19 = *(_QWORD *)v15;
      v20 = *((_QWORD *)v15 + 1);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v20);
      v21 = String.count.getter(v16, v17);
      v22 = String.count.getter(v19, v20);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v20);
      if (v22 >= v21)
        break;
      v23 = v18;
      v6 = v18 + 16;
      if (v7 != v18)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if (v15 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_18;
    }
    v23 = v15;
    v24 = v7 == v15;
    v15 += 16;
    v6 = v18;
    if (v24)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v23;
    goto LABEL_16;
  }
LABEL_18:
  v6 = v7;
LABEL_43:
  if (v6 != v15 || v6 >= &v15[(v14 - v15 + (v14 - v15 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0])
    memmove(v6, v15, 16 * ((v14 - v15) / 16));
  return 1;
}

void sub_1000D96F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

_QWORD *sub_1000D976C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_100005C88(&qword_100157C48);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_1000122B4(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_100011F40(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1000D9840);
    }
  }
  return v4;
}

BOOL sub_1000D9858(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, xpc_type_t *a5, uint64_t a6)
{
  xpc_type_t type;

  type = xpc_get_type(a1);
  if (*a4 != -1)
    swift_once(a4, a6);
  return type == *a5;
}

void sub_1000D98B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = __DataStorage._bytes.getter();
  if (v9)
  {
    v10 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v10))
      goto LABEL_7;
    v9 += a1 - v10;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000D1700(v9, a4, a5);
    return;
  }
  __break(1u);
LABEL_7:
  __break(1u);
}

void sub_1000D9968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = __DataStorage._bytes.getter();
  if (!v9)
    goto LABEL_10;
  v10 = v9;
  v11 = __DataStorage._offset.getter();
  v12 = a1 - v11;
  if (__OFSUB__(a1, v11))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = __OFSUB__(a2, a1);
  v14 = a2 - a1;
  if (v13)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  v15 = __DataStorage._length.getter();
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  sub_1000D1490(v10 + v12, v10 + v12 + v16, a4, a5);
}

void sub_1000D9A20(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1000D9A84@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;

  v9 = v5;
  LOWORD(v10) = a1;
  BYTE2(v10) = BYTE2(a1);
  HIBYTE(v10) = BYTE3(a1);
  v11 = BYTE4(a1);
  v12 = BYTE5(a1);
  v13 = BYTE6(a1);
  sub_1000D1490((uint64_t)&v9, (uint64_t)&v9 + BYTE6(a1), v3, v2);
  if (!v6)
    v4 = v14;
  v7 = v10 | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48);
  *v1 = v9;
  v1[1] = v7;
  return v4;
}

uint64_t sub_1000D9DFC(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v5 = result;
  result = String.count.getter(a2, a3);
  if (__OFSUB__(result, v5))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v6 = (result - v5) & ~((result - v5) >> 63);
  v7 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v7 = a2;
  v8 = v7 << 16;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  else
    v9 = 7;
  v10 = String.index(_:offsetBy:limitedBy:)(15, v6, v9 | (unint64_t)(v7 << 16), a2, a3);
  v12 = v8 | 0xB;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) == 0)
    v12 = v8 | 7;
  if ((v11 & 1) != 0)
    v13 = v12;
  else
    v13 = v10;
  return String.subscript.getter(15, v13, a2, a3);
}

uint64_t sub_1000D9EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000D1DD0(a1, a2, *(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 16));
}

BOOL sub_1000D9EBC()
{
  uint64_t v0;

  return ((*(uint64_t (**)(void))(v0 + 24))() & 1) == 0;
}

uint64_t sub_1000D9EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return dispatch thunk of static Comparable.< infix(_:_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24)) & 1;
}

BOOL sub_1000D9F0C(char a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (qword_100171B88 != -1)
    swift_once(&qword_100171B88, sub_1000D4160);
  v4 = qword_1001758E8;
  v14 = a1;
  v5 = *(_QWORD *)(qword_1001758E8 + 16);
  if (!v5)
    return 0;
  v6 = sub_1000262B0();
  swift_bridgeObjectRetain(v4);
  v7 = 0;
  while (1)
  {
    v13 = *(_BYTE *)(v4 + v7 + 32);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v13, &v14, &type metadata for CollectionKind, v6) & 1) != 0)
      break;
    if (v5 == ++v7)
    {
      swift_bridgeObjectRelease(v4);
      return 0;
    }
  }
  swift_bridgeObjectRelease(v4);
  v9 = qword_1001758E8;
  swift_bridgeObjectRetain(qword_1001758E8);
  v10 = sub_1000D4178(a2, v9);
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  return (v12 & 1) != 0 || v7 < v10;
}

uint64_t sub_1000DA028(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1000DA0E8(_BYTE *__src, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_1000DA028(__src, &__src[a2]);
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  v6 = type metadata accessor for Data.RangeReference(0);
  result = swift_allocObject(v6, 32, 7);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_1000DA194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if (a1)
    __asm { BR              X12 }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 56))(a2, 1, 1);
}

unint64_t sub_1000DA230()
{
  unint64_t result;

  result = qword_10015BA40;
  if (!qword_10015BA40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10015BA40);
  }
  return result;
}

uint64_t sub_1000DA274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t (*v23)(const char **, _QWORD);
  const char *v25[4];
  __int128 v26;
  __int128 v27;

  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  if (!*(_QWORD *)(v10 + 16) || (v11 = sub_100099990(a2), (v12 & 1) == 0))
  {
    v26 = 0u;
    v27 = 0u;
    swift_bridgeObjectRelease(v10);
    goto LABEL_6;
  }
  sub_100005D28(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v26);
  swift_bridgeObjectRelease(v10);
  if (!*((_QWORD *)&v27 + 1))
  {
LABEL_6:
    sub_1000124F8((uint64_t)&v26, &qword_100158018);
    goto LABEL_7;
  }
  v13 = sub_1000124F8((uint64_t)&v26, &qword_100158018);
  v14 = static os_log_type_t.error.getter(v13);
  v15 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10010F050;
  v17 = ObjectIdentifier.debugDescription.getter(a2);
  v19 = v18;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_100026838();
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v19;
  v20 = sub_10002687C();
  v21 = (void *)static OS_os_log.default.getter(v20);
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v21, "Warning: %s is already attached", v25[0]);
  swift_bridgeObjectRelease(v16);

LABEL_7:
  *((_QWORD *)&v27 + 1) = a4;
  v22 = sub_100005BE0(&v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v22, a1, a4);
  v23 = (uint64_t (*)(const char **, _QWORD))(*(uint64_t (**)(const char **, uint64_t, uint64_t))(a5 + 24))(v25, a3, a5);
  sub_1000D241C((uint64_t)&v26, a2);
  return v23(v25, 0);
}

uint64_t sub_1000DA440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  Swift::Bool IsNativeType;
  void (*v20)(char *, unint64_t, uint64_t);
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  Swift::Int v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v5 = a1;
  v48 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v47 = (char *)&v40 - v10;
  v40 = v11;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v40 - v13;
  v15 = Array.count.getter(v12);
  if (v15)
  {
    v16 = v15;
    type metadata accessor for _SetStorage(0, a2, a3);
    v17 = (_QWORD *)static _SetStorage.allocate(capacity:)(v16);
  }
  else
  {
    v17 = &_swiftEmptySetSingleton;
  }
  v43 = Array._getCount()();
  if (!v43)
    return (uint64_t)v17;
  v18 = 0;
  v46 = (char *)(v17 + 7);
  v41 = v14;
  v42 = v5;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v18, IsNativeType, v5, a2);
    if (IsNativeType)
    {
      v20 = *(void (**)(char *, unint64_t, uint64_t))(v48 + 16);
      v20(v14, v5+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v48 + 72) * v18, a2);
      v21 = __OFADD__(v18, 1);
      v22 = v18 + 1;
      if (v21)
        goto LABEL_20;
    }
    else
    {
      result = _ArrayBuffer._getElementSlowPath(_:)(v18, v5, a2);
      if (v40 != 8)
        goto LABEL_23;
      v39 = result;
      v49 = result;
      v20 = *(void (**)(char *, unint64_t, uint64_t))(v48 + 16);
      v20(v14, (unint64_t)&v49, a2);
      swift_unknownObjectRelease(v39);
      v21 = __OFADD__(v18, 1);
      v22 = v18 + 1;
      if (v21)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v17;
      }
    }
    v23 = v48;
    v44 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
    v45 = v22;
    v44(v47, v14, a2);
    v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v17[5], a2, a3);
    v25 = -1 << *((_BYTE *)v17 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    v28 = *(_QWORD *)&v46[8 * (v26 >> 6)];
    v29 = 1 << v26;
    v30 = *(_QWORD *)(v23 + 72);
    if (((1 << v26) & v28) != 0)
    {
      v31 = ~v25;
      do
      {
        v20(v8, v17[6] + v30 * v26, a2);
        v32 = a3;
        v33 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v47, a2, *(_QWORD *)(a3 + 8));
        v34 = *(void (**)(char *, uint64_t))(v48 + 8);
        v34(v8, a2);
        if ((v33 & 1) != 0)
        {
          v34(v47, a2);
          a3 = v32;
          v14 = v41;
          v5 = v42;
          goto LABEL_7;
        }
        v26 = (v26 + 1) & v31;
        v27 = v26 >> 6;
        v28 = *(_QWORD *)&v46[8 * (v26 >> 6)];
        v29 = 1 << v26;
        a3 = v32;
      }
      while ((v28 & (1 << v26)) != 0);
      v14 = v41;
      v5 = v42;
    }
    v35 = v47;
    *(_QWORD *)&v46[8 * v27] = v29 | v28;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v44)(v17[6] + v30 * v26, v35, a2);
    v37 = v17[2];
    v21 = __OFADD__(v37, 1);
    v38 = v37 + 1;
    if (v21)
      break;
    v17[2] = v38;
LABEL_7:
    v18 = v45;
    if (v45 == v43)
      return (uint64_t)v17;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

_QWORD *sub_1000DA748@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000DA75C(a1, a2);
}

_QWORD *sub_1000DA75C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  result = sub_1000D5A20(*(_QWORD **)(v2 + 16), a1, *(_QWORD *)(v2 + 24));
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_1000DA78C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;

  result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    result = String.init(cString:)(a1 + result);
    *a2 = result;
    a2[1] = v6;
  }
  return result;
}

uint64_t type metadata accessor for XPCUtil()
{
  return objc_opt_self(_TtC10driverkitd7XPCUtil);
}

uint64_t sub_1000DA7F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

BOOL sub_1000DA804(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t ObjectType;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v3 = *(_BYTE **)(v2 + 16);
  v4 = *(_QWORD **)(v2 + 24);
  ObjectType = swift_getObjectType(a2);
  v6 = sub_1000D79B8(ObjectType);
  v8 = v7;
  if (v7)
  {
    v9 = v6;
    v10 = (_QWORD *)*v4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    *v4 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = sub_10000C500(0, v10[2] + 1, 1, v10);
      *v4 = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      v10 = sub_10000C500((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      *v4 = v10;
    }
    v10[2] = v13 + 1;
    v14 = &v10[2 * v13];
    v14[4] = v9;
    v14[5] = v8;
  }
  else
  {
    *v3 = 0;
  }
  return v8 != 0;
}

uint64_t sub_1000DA8D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DA8E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1000DA90C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DA91C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000DA924(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10011A268, a1);
}

uint64_t sub_1000DA938(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000DA984 + 4 * byte_10011A24F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000DA9B8 + 4 * byte_10011A24A[v4]))();
}

uint64_t sub_1000DA9B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DA9C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DA9C8);
  return result;
}

uint64_t sub_1000DA9D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DA9DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000DA9E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DA9E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s18OrderSpecificationOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000639C(a1, a2, a3, a4, (uint64_t)&_s18OrderSpecificationOMn);
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

ValueMetadata *type metadata accessor for Signposters()
{
  return &type metadata for Signposters;
}

ValueMetadata *type metadata accessor for IOKitSerialization()
{
  return &type metadata for IOKitSerialization;
}

_QWORD *sub_1000DAA34(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ArchInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

_QWORD *assignWithTake for ArchInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchInfo()
{
  return &type metadata for ArchInfo;
}

unint64_t destroy for PackageType(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s10driverkitd11PackageTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for PackageType(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for PackageType(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PackageType(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PackageType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PackageType()
{
  return &type metadata for PackageType;
}

uint64_t sub_1000DADE0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10011A438;
  v4[1] = &unk_10011A450;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 3, v4, a1 + 104);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for PropertyListManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000639C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PropertyListManager);
}

uint64_t initializeBufferWithCopyOfBuffer for RegisteredApplicationNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithTake for RegisteredApplicationNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for RegisteredApplicationNotification()
{
  return &type metadata for RegisteredApplicationNotification;
}

uint64_t destroy for processResults(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for processResults(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for processResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for processResults(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for processResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for processResults(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for processResults(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for processResults()
{
  return &type metadata for processResults;
}

uint64_t _s10driverkitd33RegisteredApplicationNotificationVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for UnregisteredApplicationNotification()
{
  return &type metadata for UnregisteredApplicationNotification;
}

BOOL sub_1000DB124(uint64_t a1)
{
  uint64_t v1;

  return ((*(uint64_t (**)(uint64_t, _QWORD))(v1 + 24))(a1, *(_QWORD *)(v1 + 40)) & 1) == 0;
}

uint64_t sub_1000DB168(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if (a2 < 2)
    return 0;
  v2 = a1;
  swift_bridgeObjectRetain(a2);
  return v2;
}

uint64_t sub_1000DB1AC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (v3 == 1)
    return v4 == 1;
  if (v4 < 2)
    return 0;
  v6 = *a1;
  if (v6 == *a2 && v3 == v4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v3, *a2, v4, 0);
}

Swift::Int sub_1000DB210()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5, 0);
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(0);
      String.hash(into:)(v5, v1, v2);
      return Hasher._finalize()();
    }
    v3 = 2;
  }
  else
  {
    v3 = 1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000DB28C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;

  v3 = v1[1];
  if (!v3)
  {
    v4 = 1;
    goto LABEL_5;
  }
  if (v3 == 1)
  {
    v4 = 2;
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }
  v5 = *v1;
  Hasher._combine(_:)(0);
  String.hash(into:)(a1, v5, v3);
}

Swift::Int sub_1000DB300(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  if (v3)
  {
    if (v3 != 1)
    {
      Hasher._combine(_:)(0);
      String.hash(into:)(v6, v2, v3);
      return Hasher._finalize()();
    }
    v4 = 2;
  }
  else
  {
    v4 = 1;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000DB378()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;
  Swift::String v4;

  v1 = v0[1];
  if (!v1)
    return 0x656C70706140;
  if (v1 == 1)
    return 0x656E6F6E40;
  v3 = *v0;
  String.append(_:)(*(Swift::String *)(&v1 - 1));
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x286D61657440;
}

__n128 sub_1000DB404@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000DB410@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_1000122B4(v2, v3);
}

Swift::Int sub_1000DB41C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  sub_1000122B4(v1, v2);
  Data.hash(into:)(v4, v1, v2);
  sub_100011F40(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000DB47C(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  sub_1000122B4(v4, v3);
  Data.hash(into:)(a1, v4, v3);
  return sub_100011F40(v4, v3);
}

Swift::Int sub_1000DB4C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  sub_1000122B4(v2, v3);
  Data.hash(into:)(v5, v2, v3);
  sub_100011F40(v2, v3);
  return Hasher._finalize()();
}

void sub_1000DB524(uint64_t *a1)
{
  sub_1000DB538(*a1, a1[1]);
}

void sub_1000DB538(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1000DB594()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1000DB5D4 + *((int *)qword_1000DBB20 + (v0 >> 62))))();
}

uint64_t sub_1000DBB40(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = sub_100013C94(a1, a2);
  v5 = v4;
  swift_bridgeObjectRelease(a2);
  if (v5 >> 60 == 15)
    return 0;
  else
    return v3;
}

uint64_t sub_1000DBB90()
{
  uint64_t *v0;

  return sub_100013834(*v0, v0[1]);
}

uint64_t sub_1000DBB98(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  __n128 v32;
  unint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v4 = *(uint64_t (**)(void))(a2 + 16);
  v5 = v4();
  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRelease(v5);
  v7 = 0xE000000000000000;
  if (v6)
  {
    v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(0xE000000000000000);
    v38 = 0x656C7469746E6520;
    v39 = 0xEF203A73746E656DLL;
    v8 = ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
    v37 = sub_100005C88((uint64_t *)&unk_10015BA80);
    v35 = v8;
    v9 = sub_1000D675C((uint64_t)&v35);
    v11 = v10;
    sub_100005D08(&v35);
    v12._countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v11);
    v13 = v38;
    v7 = v39;
  }
  else
  {
    v13 = 0;
  }
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  if (v15)
  {
    v16 = v15;
    if (v15 == 1)
    {
      v17 = 0xE500000000000000;
      v18 = 0x656E6F6E40;
    }
    else
    {
      v19 = v14;
      v35 = 0x286D61657440;
      v36 = 0xE600000000000000;
      String.append(_:)(*(Swift::String *)&v14);
      v20._countAndFlagsBits = 41;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      sub_100017450(v19, v16);
      v18 = v35;
      v17 = v36;
    }
  }
  else
  {
    v17 = 0xE600000000000000;
    v18 = 0x656C70706140;
  }
  v35 = v18;
  v36 = v17;
  v21._countAndFlagsBits = 10272;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v24 = v23;
  v25 = sub_100013834(v22, v23);
  v27 = v26;
  sub_100011F40(v22, v24);
  v28._countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v27);
  v29._countAndFlagsBits = 41;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v30 = v35;
  v31 = v36;
  v35 = v13;
  v36 = v7;
  v38 = v30;
  v39 = v31;
  v32 = swift_bridgeObjectRetain(v31);
  v38 = String.init<A>(_:)(&v38, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v32);
  v39 = v33;
  String.append<A>(contentsOf:)(&v35, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v31);
  return v38;
}

uint64_t sub_1000DBDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a4 + 16))(a1, a2, 0, 0, a3, a4);
}

uint64_t sub_1000DBE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v17)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t (*v50)(void);
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD v68[9];
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;

  if (a3 == 3)
  {
    v8 = sub_1000122F8();
    v9 = swift_allocError(&type metadata for KMError, v8, 0, 0);
    *(_QWORD *)v10 = 0xD000000000000041;
    *(_QWORD *)(v10 + 8) = 0x800000010012AFC0;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_QWORD *)(v10 + 64) = 0;
    *(_BYTE *)(v10 + 72) = 9;
    swift_willThrow(v9);
    return v11 & 1;
  }
  v67 = (_QWORD *)a1;
  v17 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16);
  v17(&v70, a2, a3, 0, 0, a6, a7);
  if (!v7)
  {
    sub_1000260AC((uint64_t)&v70, (uint64_t)v67, &qword_100158010);
    v11 = 1;
    return v11 & 1;
  }
  v80 = v7;
  swift_errorRetain(v7);
  v18 = sub_100005C88(&qword_10015AB50);
  if (!swift_dynamicCast(&v70, &v80, v18, &type metadata for KMError, 0))
  {
LABEL_9:
    swift_errorRelease(v80);
    return v11 & 1;
  }
  if (v79 != 45)
  {
    sub_1000391DC(v70, v71, v72, v73, v74, v75, v76, v77, v78, v79);
    goto LABEL_9;
  }
  v52 = v18;
  v60 = v70;
  v65 = v77;
  v64 = v76;
  v63 = v75;
  v62 = v74;
  v61 = v73;
  v59 = v72;
  v58 = v71;
  v54 = v78;
  v19 = swift_errorRelease(v7);
  v56 = static os_log_type_t.info.getter(v19);
  v57 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v20 = swift_allocObject(v57, 112, 7);
  v51 = xmmword_10010F380;
  *(_OWORD *)(v20 + 16) = xmmword_10010F380;
  v50 = *(uint64_t (**)(void))(*(_QWORD *)a2 + 200);
  v21 = v50();
  v55 = v22;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  v66 = sub_100026838();
  *(_QWORD *)(v20 + 64) = v66;
  v23 = v55;
  *(_QWORD *)(v20 + 32) = v21;
  *(_QWORD *)(v20 + 40) = v23;
  v68[0] = v60;
  v68[1] = v58;
  v68[2] = v59;
  v68[3] = v61;
  v68[4] = v62;
  v68[5] = v63;
  v68[6] = v64;
  v68[7] = v65;
  v55 = a5;
  v68[8] = v54;
  v69 = 45;
  v24 = sub_1000825EC();
  v25 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for KMError, v24);
  v53 = v26;
  sub_1000391DC(v60, v58, v59, v61, v62, v63, v64, v65, v54, 45);
  v27 = v66;
  *(_QWORD *)(v20 + 96) = &type metadata for String;
  *(_QWORD *)(v20 + 104) = v27;
  v28 = v53;
  *(_QWORD *)(v20 + 72) = v25;
  *(_QWORD *)(v20 + 80) = v28;
  v65 = sub_10002687C();
  v29 = (void *)static OS_os_log.default.getter(v65);
  os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, v29, "Unable to determine signature for %{public}s, generating adhoc signature... (%{public}s)", 88, 2, v20);
  swift_bridgeObjectRelease(v20);

  v17(v68, a2, 3, a4, v55, a6, a7);
  v30 = v66;
  v31 = v67;
  v32 = sub_1000260AC((uint64_t)v68, (uint64_t)v67, &qword_100158010);
  LODWORD(v64) = static os_log_type_t.info.getter(v32);
  result = swift_allocObject(v57, 72, 7);
  *(_OWORD *)(result + 16) = xmmword_10010F050;
  v34 = v31[3];
  if (v34)
  {
    v35 = (_QWORD *)result;
    v36 = v31[4];
    v37 = sub_100004DE4(v31, v31[3]);
    v38 = *(_QWORD *)(v34 - 8);
    __chkstk_darwin(v37);
    v40 = (char *)&v49 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v38 + 16))(v40);
    v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 32))(v34, v36);
    v43 = v42;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v34);
    v44 = sub_100013834(v41, v43);
    v46 = v45;
    v47 = sub_100011F40(v41, v43);
    v35[7] = &type metadata for String;
    v35[8] = v30;
    v35[4] = v44;
    v35[5] = v46;
    v48 = (void *)static OS_os_log.default.getter(v47);
    os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v48, "Adhoc cdhash: %{public}s", 24, 2, v35);
    swift_bridgeObjectRelease(v35);

    swift_errorRelease(v80);
    v11 = 0;
    return v11 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DC46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v19;

  v19 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  *(_QWORD *)(v19 + 32) = a3;
  *(_QWORD *)(v19 + 40) = a4;
  *(_QWORD *)(v19 + 48) = a5;
  *(_QWORD *)(v19 + 56) = a6;
  *(_QWORD *)(v19 + 64) = a7;
  *(_QWORD *)(v19 + 72) = a8;
  *(_OWORD *)(v19 + 80) = a9;
  *(_QWORD *)(v19 + 96) = a10;
  sub_1000260AC(a11, v19 + OBJC_IVAR____TtC10driverkitd19RealCodeSigningInfo_signingTime, &qword_100158008);
  return v19;
}

uint64_t sub_1000DC52C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  sub_100017450(v0[3], v0[4]);
  sub_100011F40(v0[5], v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  sub_1000124F8((uint64_t)v0 + OBJC_IVAR____TtC10driverkitd19RealCodeSigningInfo_signingTime, &qword_100158008);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000DC594()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  sub_1000DEDFC(v1, *(_QWORD *)(*(_QWORD *)v0 + 32));
  return v1;
}

uint64_t sub_1000DC5C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  sub_1000122B4(v1, *(_QWORD *)(*(_QWORD *)v0 + 48));
  return v1;
}

uint64_t sub_1000DC5FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return v1;
}

uint64_t sub_1000DC62C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return v1;
}

uint64_t sub_1000DC65C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return v1;
}

uint64_t sub_1000DC68C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100019E1C(*v1 + OBJC_IVAR____TtC10driverkitd19RealCodeSigningInfo_signingTime, a1, &qword_100158008);
}

uint64_t sub_1000DC6BC(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10011A740, a1);
  return sub_1000DBB98(a1, WitnessTable);
}

uint64_t sub_1000DC6F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100019E1C(v3, a1, &qword_10015B6A0);
}

uint64_t sub_1000DC740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v5, 33, 0);
  sub_1000DEE10(a1, v3);
  return swift_endAccess(v5);
}

unint64_t sub_1000DC790(const __SecCode *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  CFDictionaryRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *v20;
  unint64_t v21;
  __CFString *v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __CFString *v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  int v36;
  __CFString *v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  Swift::String v53;
  Swift::Bool v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  Swift::String v67;
  Swift::Bool v68;
  uint64_t v69;
  unint64_t v70;
  __CFString *v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __CFString *v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char v83;
  const __CFString *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  char *v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  CFDictionaryRef information;

  v3 = v2;
  v98 = a2;
  v5 = sub_100005C88(&qword_100158008);
  v6 = __chkstk_darwin(v5);
  v100 = (uint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v99 = (char *)&v93 - v8;
  v9 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v9);
  v11 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v101 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  information = 0;
  v15 = SecCodeCopySigningInformation(a1, 6u, &information);
  if ((_DWORD)v15)
    goto LABEL_7;
  v16 = information;
  if (!information)
    goto LABEL_7;
  *(_QWORD *)&v106 = 0;
  type metadata accessor for CFString();
  v18 = v17;
  v19 = sub_100012534(&qword_10015BB80, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10011A994);
  v20 = v16;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v20, &v106, v18, (char *)&type metadata for Any + 8, v19);

  v21 = v106;
  if (!(_QWORD)v106)
  {
LABEL_7:
    v15 = v15;
    v25 = sub_1000122F8();
    v26 = swift_allocError(&type metadata for KMError, v25, 0, 0);
    *(_QWORD *)v27 = 0xD000000000000022;
    *(_QWORD *)(v27 + 8) = 0x800000010012B190;
    *(_QWORD *)(v27 + 16) = v15;
LABEL_18:
    *(_OWORD *)(v27 + 24) = 0u;
    *(_OWORD *)(v27 + 40) = 0u;
    *(_OWORD *)(v27 + 56) = 0u;
    *(_BYTE *)(v27 + 72) = 45;
    swift_willThrow(v26);
LABEL_19:

    return v15;
  }
  if (!*(_QWORD *)(v106 + 16))
  {
    v106 = 0u;
    v107 = 0u;
LABEL_15:
    swift_bridgeObjectRelease(v21);
    sub_1000124F8((uint64_t)&v106, &qword_100158018);
LABEL_17:
    v34 = sub_1000122F8();
    v26 = swift_allocError(&type metadata for KMError, v34, 0, 0);
    *(_QWORD *)v27 = 0xD00000000000002CLL;
    *(_QWORD *)(v27 + 8) = 0x800000010012B1C0;
    *(_QWORD *)(v27 + 16) = &_mh_execute_header;
    goto LABEL_18;
  }
  v22 = (id)kSecCodeInfoUnique;
  v15 = v21;
  v23 = sub_1000DEEAC((uint64_t)v22);
  if ((v24 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(v21 + 56) + 32 * v23, (uint64_t)&v106);
  }
  else
  {
    v106 = 0u;
    v107 = 0u;
  }

  if (!*((_QWORD *)&v107 + 1))
    goto LABEL_15;
  if ((swift_dynamicCast(&v102, &v106, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v21);
    goto LABEL_17;
  }
  v28 = v102;
  v29 = *(_QWORD *)(v21 + 16);
  v97 = v103;
  if (v29)
  {
    v30 = v102;
    sub_1000122B4(v102, v103);
    v31 = (id)kSecCodeInfoMainExecutable;
    v32 = sub_1000DEEAC((uint64_t)v31);
    if ((v33 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(v21 + 56) + 32 * v32, (uint64_t)&v106);
    }
    else
    {
      v106 = 0u;
      v107 = 0u;
    }

    v28 = v30;
  }
  else
  {
    v106 = 0u;
    v107 = 0u;
    sub_1000122B4(v102, v103);
  }
  if (!*((_QWORD *)&v107 + 1))
  {
    sub_1000124F8((uint64_t)&v106, &qword_100158018);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_30;
  }
  v36 = swift_dynamicCast(v11, &v106, (char *)&type metadata for Any + 8, v12, 6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, v36 ^ 1u, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_30:
    swift_bridgeObjectRelease(v21);
    sub_1000124F8((uint64_t)v11, (uint64_t *)&unk_10015BA60);
    v40 = sub_1000122F8();
    v41 = swift_allocError(&type metadata for KMError, v40, 0, 0);
    *(_QWORD *)v42 = 0xD000000000000035;
    *(_QWORD *)(v42 + 8) = 0x800000010012B1F0;
    *(_QWORD *)(v42 + 16) = &_mh_execute_header;
    *(_OWORD *)(v42 + 24) = 0u;
    *(_OWORD *)(v42 + 40) = 0u;
    *(_OWORD *)(v42 + 56) = 0u;
    *(_BYTE *)(v42 + 72) = 45;
    swift_willThrow(v41);
    v15 = v97;
    sub_100011F40(v28, v97);
    sub_100011F40(v28, v15);
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v101, v11, v12);
  if (!*(_QWORD *)(v21 + 16))
  {
    v106 = 0u;
    v107 = 0u;
LABEL_37:
    swift_bridgeObjectRelease(v21);
    sub_1000124F8((uint64_t)&v106, &qword_100158018);
LABEL_39:
    v47 = sub_1000122F8();
    v48 = swift_allocError(&type metadata for KMError, v47, 0, 0);
    *(_QWORD *)v49 = 0xD000000000000038;
    *(_QWORD *)(v49 + 8) = 0x800000010012B230;
    *(_QWORD *)(v49 + 16) = &_mh_execute_header;
    *(_OWORD *)(v49 + 24) = 0u;
    *(_OWORD *)(v49 + 40) = 0u;
    *(_OWORD *)(v49 + 56) = 0u;
    *(_BYTE *)(v49 + 72) = 45;
    swift_willThrow(v48);
    v15 = v97;
    sub_100011F40(v28, v97);
    sub_100011F40(v28, v15);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v101, v12);
    goto LABEL_19;
  }
  v37 = (id)kSecCodeInfoIdentifier;
  v38 = sub_1000DEEAC((uint64_t)v37);
  if ((v39 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(v21 + 56) + 32 * v38, (uint64_t)&v106);
  }
  else
  {
    v106 = 0u;
    v107 = 0u;
  }

  if (!*((_QWORD *)&v107 + 1))
    goto LABEL_37;
  if ((swift_dynamicCast(&v102, &v106, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v21);
    goto LABEL_39;
  }
  v96 = v102;
  v94 = v28;
  v95 = v103;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v3 + 88))(&v106);
  v43 = *((_QWORD *)&v107 + 1);
  if (*((_QWORD *)&v107 + 1))
  {
    v44 = v108;
    sub_100004DE4(&v106, *((uint64_t *)&v107 + 1));
    sub_10010731C(v43, v44);
    sub_1000124F8((uint64_t)&v106, &qword_10015B6A0);
    v45 = v104;
    v46 = v105;
    sub_100004DE4(&v102, v104);
    LOBYTE(v43) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 208))(v101, v45, v46);
    sub_100005D08(&v102);
  }
  else
  {
    sub_1000124F8((uint64_t)&v106, &qword_10015B6A0);
  }
  v50 = (uint64_t *)sub_100090020();
  v51 = *v50;
  v52 = (void *)v50[1];
  swift_bridgeObjectRetain(v52);
  v53._countAndFlagsBits = v51;
  v53._object = v52;
  v54 = String.hasPrefix(_:)(v53);
  v55 = swift_bridgeObjectRelease(v52);
  if (v54 && (v43 & 1) != 0)
  {
    v56 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v57 = swift_allocObject(v56, 72, 7);
    *(_OWORD *)(v57 + 16) = xmmword_10010F050;
    *(_QWORD *)(v57 + 56) = &type metadata for String;
    *(_QWORD *)(v57 + 64) = sub_100026838();
    v58 = v95;
    *(_QWORD *)(v57 + 32) = v96;
    *(_QWORD *)(v57 + 40) = v58;
    sub_10002687C();
    swift_bridgeObjectRetain(v58);
    v60 = (void *)static OS_os_log.default.getter(v59);
    v61 = static os_log_type_t.default.getter(v60);
    os_log(_:dso:log:type:_:)("allowing Apple-prefixed bundle '%{public}s' installed from a root", 65, 2, &_mh_execute_header, v60, v61, v57);
    swift_bridgeObjectRelease(v57);

LABEL_47:
    v69 = 0;
    v70 = 0;
    goto LABEL_59;
  }
  if (v98 != 3)
  {
    v66 = *v50;
    v65 = (void *)v50[1];
    swift_bridgeObjectRetain(v65);
    v67._countAndFlagsBits = v66;
    v67._object = v65;
    v68 = String.hasPrefix(_:)(v67);
    swift_bridgeObjectRelease(v65);
    if (v68)
      goto LABEL_47;
    if (*(_QWORD *)(v21 + 16))
    {
      v71 = (id)kSecCodeInfoTeamIdentifier;
      v72 = sub_1000DEEAC((uint64_t)v71);
      if ((v73 & 1) != 0)
      {
        sub_100005D28(*(_QWORD *)(v21 + 56) + 32 * v72, (uint64_t)&v106);
      }
      else
      {
        v106 = 0u;
        v107 = 0u;
      }

      if (*((_QWORD *)&v107 + 1))
      {
        v74 = swift_dynamicCast(&v102, &v106, (char *)&type metadata for Any + 8, &type metadata for String, 6);
        if ((v74 & 1) != 0)
        {
          v69 = v102;
          v70 = v103;
          goto LABEL_59;
        }
        goto LABEL_57;
      }
    }
    else
    {
      v106 = 0u;
      v107 = 0u;
    }
    v74 = sub_1000124F8((uint64_t)&v106, &qword_100158018);
LABEL_57:
    v75 = static os_log_type_t.info.getter(v74);
    v76 = sub_10002687C();
    v64 = (void *)static OS_os_log.default.getter(v76);
    os_log(_:dso:log:_:_:)(v75, &_mh_execute_header, v64, "No team ID in signing dict and no Apple-prefix in signing identifier.", 69, 2, _swiftEmptyArrayStorage);
    goto LABEL_58;
  }
  v62 = static os_log_type_t.info.getter(v55);
  v63 = sub_10002687C();
  v64 = (void *)static OS_os_log.default.getter(v63);
  os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v64, "Adhoc signature; forcing no team ID",
    35,
    2,
    _swiftEmptyArrayStorage);
LABEL_58:

  v69 = 0;
  v70 = 1;
LABEL_59:
  if (!*(_QWORD *)(v21 + 16))
  {
    v106 = 0u;
    v107 = 0u;
LABEL_67:
    sub_1000124F8((uint64_t)&v106, &qword_100158018);
    goto LABEL_68;
  }
  v77 = (id)kSecCodeInfoEntitlementsDict;
  v78 = sub_1000DEEAC((uint64_t)v77);
  if ((v79 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(v21 + 56) + 32 * v78, (uint64_t)&v106);
  }
  else
  {
    v106 = 0u;
    v107 = 0u;
  }

  if (!*((_QWORD *)&v107 + 1))
    goto LABEL_67;
  v80 = sub_100005C88((uint64_t *)&unk_10015BA80);
  if (!swift_dynamicCast(&v102, &v106, (char *)&type metadata for Any + 8, v80, 6))
  {
LABEL_68:
    v81 = sub_1000159E8((uint64_t)_swiftEmptyArrayStorage);
    goto LABEL_69;
  }
  v81 = v102;
LABEL_69:
  if (*(_QWORD *)(v21 + 16))
  {
    v82 = sub_1000DEEAC((uint64_t)(id)kSecCodeInfoTimestamp);
    if ((v83 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(v21 + 56) + 32 * v82, (uint64_t)&v106);
    }
    else
    {
      v106 = 0u;
      v107 = 0u;
    }
  }
  else
  {
    v106 = 0u;
    v107 = 0u;
    v84 = (id)kSecCodeInfoTimestamp;
  }
  swift_bridgeObjectRelease(v21);
  sub_100011F40(v94, v97);

  (*(void (**)(char *, uint64_t))(v13 + 8))(v101, v12);
  if (*((_QWORD *)&v107 + 1))
  {
    v85 = type metadata accessor for Date(0);
    v86 = (uint64_t)v99;
    v87 = swift_dynamicCast(v99, &v106, (char *)&type metadata for Any + 8, v85, 6);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v86, v87 ^ 1u, 1, v85);
  }
  else
  {
    sub_1000124F8((uint64_t)&v106, &qword_100158018);
    v88 = type metadata accessor for Date(0);
    v86 = (uint64_t)v99;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v99, 1, 1, v88);
  }
  v89 = v100;
  sub_100019E1C(v86, v100, &qword_100158008);
  v90 = type metadata accessor for RealCodeSigningInfo(0);
  v15 = swift_allocObject(v90, *(unsigned int *)(v90 + 48), *(unsigned __int16 *)(v90 + 52));
  *(_QWORD *)(v15 + 16) = v81;
  *(_QWORD *)(v15 + 24) = v69;
  v91 = v94;
  *(_QWORD *)(v15 + 32) = v70;
  *(_QWORD *)(v15 + 40) = v91;
  v92 = v96;
  *(_QWORD *)(v15 + 48) = v97;
  *(_QWORD *)(v15 + 56) = v92;
  *(_QWORD *)(v15 + 64) = v95;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  sub_1000260AC(v89, v15 + OBJC_IVAR____TtC10driverkitd19RealCodeSigningInfo_signingTime, &qword_100158008);
  sub_1000124F8(v86, &qword_100158008);

  return v15;
}

unint64_t sub_1000DD2F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_10015BD78);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 1);
    v8 = *v6;
    v9 = (id)*(v6 - 2);
    swift_bridgeObjectRetain(v8);
    result = sub_1000DEEAC((uint64_t)v9);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v9;
    v12 = (_QWORD *)(v4[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000DD408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000DD438(a1, a2, a3, a4, 0, a5);
}

uint64_t sub_1000DD420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1000DD438(a1, a2, a3, a4, 1, a5);
}

uint64_t sub_1000DD438@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(SecStaticCodeRef *__return_ptr);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(__int128 *__return_ptr);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, __n128);
  __n128 v44;
  NSURL *v45;
  const __CFURL *v46;
  const __CFURL *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t inited;
  const __CFString *v53;
  unint64_t v54;
  const __CFDictionary *isa;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  NSURL *v63;
  const __CFURL *v64;
  const __CFURL *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;
  void *object;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(__int128 *__return_ptr);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[3];
  uint64_t v86;
  uint64_t v87;
  SecStaticCodeRef v88[3];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _QWORD v95[3];
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[5];

  v80 = a2;
  v82 = a4;
  v79 = a6;
  v9 = type metadata accessor for URL(0);
  v83 = *(_QWORD *)(v9 - 8);
  v84 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v76 - v17;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(v98, v16);
  sub_100019E1C((uint64_t)v98, (uint64_t)v95, &qword_100157C78);
  v19 = v96;
  v20 = sub_1000124F8((uint64_t)v95, &qword_100157C78);
  if (!v19 && (a5 & 1) != 0)
  {
    v21 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 264);
    v78 = a1;
    v21(v20);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
    if (v22(v18, 1, v84) == 1)
    {
      sub_1000124F8((uint64_t)v18, (uint64_t *)&unk_10015BA60);
      goto LABEL_17;
    }
    v23 = *(void (**)(SecStaticCodeRef *__return_ptr))(*(_QWORD *)v81 + 88);
    v23(v88);
    v24 = v89;
    if (v89)
    {
      v76 = (void (*)(__int128 *__return_ptr))v23;
      v77 = a3;
      v25 = v90;
      sub_100004DE4(v88, v89);
      sub_10009C20C(v24, v25);
      sub_1000124F8((uint64_t)v88, &qword_10015B6A0);
      v26 = v86;
      v27 = v87;
      sub_100004DE4(v85, v86);
      sub_100019E1C((uint64_t)v18, (uint64_t)v15, (uint64_t *)&unk_10015BA60);
      v28 = v84;
      if (v22(v15, 1, v84) == 1)
      {
        __break(1u);
        JUMPOUT(0x1000DE388);
      }
      (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v27 + 24))(&v92, v15, v26, v27);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v15, v28);
      sub_100005D08(v85);
      a3 = v77;
      if (*((_QWORD *)&v93 + 1))
      {
        sub_100004E2C(&v92, (uint64_t)v95);
        v29 = v96;
        v30 = v97;
        sub_100004DE4(v95, v96);
        v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 56))(v29, v30);
        if (v32)
        {
          v33 = (void (*)(__int128 *__return_ptr))v31;
          v34 = v32;
          v76(&v92);
          v35 = *((_QWORD *)&v93 + 1);
          if (*((_QWORD *)&v93 + 1))
          {
            v36 = v94;
            sub_100004DE4(&v92, *((uint64_t *)&v93 + 1));
            sub_10010731C(v35, v36);
            sub_1000124F8((uint64_t)&v92, &qword_10015B6A0);
            v76 = v33;
            v38 = v89;
            v37 = v90;
            sub_100004DE4(v88, v89);
            v39 = (*(uint64_t (**)(void (*)(__int128 *__return_ptr), uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 136))(v76, v34, 0, v38, v37);
            swift_bridgeObjectRelease(v34);
            sub_100005D08(v88);
            sub_1000124F8((uint64_t)v18, (uint64_t *)&unk_10015BA60);
            if ((v39 & 1) != 0)
            {
              sub_1000124F8((uint64_t)v98, &qword_100157C78);
              sub_100005C44((uint64_t)v95, (uint64_t)v98);
            }
            goto LABEL_16;
          }
          swift_bridgeObjectRelease(v34);
          sub_1000124F8((uint64_t)&v92, &qword_10015B6A0);
        }
        sub_1000124F8((uint64_t)v18, (uint64_t *)&unk_10015BA60);
LABEL_16:
        sub_100005D08(v95);
        goto LABEL_17;
      }
    }
    else
    {
      sub_1000124F8((uint64_t)v88, &qword_10015B6A0);
      v92 = 0u;
      v93 = 0u;
      v94 = 0;
    }
    sub_1000124F8((uint64_t)v18, (uint64_t *)&unk_10015BA60);
    sub_1000124F8((uint64_t)&v92, &qword_100157C78);
  }
LABEL_17:
  sub_100019E1C((uint64_t)v98, (uint64_t)&v92, &qword_100157C78);
  if (!*((_QWORD *)&v93 + 1))
  {
    sub_1000124F8((uint64_t)&v92, &qword_100157C78);
    v57 = sub_1000122F8();
    v58 = swift_allocError(&type metadata for KMError, v57, 0, 0);
    *(_QWORD *)v59 = 0xD00000000000003DLL;
    *(_QWORD *)(v59 + 8) = 0x800000010012B630;
    *(_OWORD *)(v59 + 16) = 0u;
    *(_OWORD *)(v59 + 32) = 0u;
    *(_OWORD *)(v59 + 48) = 0u;
    *(_QWORD *)(v59 + 64) = 0;
    *(_BYTE *)(v59 + 72) = 9;
    swift_willThrow(v58);
    return sub_1000124F8((uint64_t)v98, &qword_100157C78);
  }
  sub_100004E2C(&v92, (uint64_t)v95);
  v88[0] = 0;
  v40 = v82;
  if (v82)
  {
    v41 = v96;
    v42 = v97;
    sub_100004DE4(v95, v96);
    v43 = *(void (**)(uint64_t, uint64_t, __n128))(v42 + 64);
    v44 = swift_bridgeObjectRetain(v40);
    v43(v41, v42, v44);
    URL._bridgeToObjectiveC()(v45);
    v47 = v46;
    v48 = *(void (**)(char *, uint64_t))(v83 + 8);
    v49 = a3;
    v50 = v84;
    v48(v11, v84);
    v51 = sub_100005C88(&qword_10015BB78);
    inited = swift_initStackObject(v51, &v91);
    *(_OWORD *)(inited + 16) = xmmword_10010F050;
    *(_QWORD *)(inited + 32) = kSecCodeAttributeArchitecture;
    *(_QWORD *)(inited + 40) = v49;
    *(_QWORD *)(inited + 48) = v40;
    v53 = (id)kSecCodeAttributeArchitecture;
    v54 = sub_1000DD2F4(inited);
    type metadata accessor for CFString();
    sub_100012534(&qword_10015BB80, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10011A994);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v54);
    v56 = SecStaticCodeCreateWithPathAndAttributes(v47, 0, isa, v88);

    if (v56)
      goto LABEL_25;
LABEL_23:
    if (v88[0])
      __asm { BR              X10 }
    goto LABEL_25;
  }
  v61 = v96;
  v62 = v97;
  sub_100004DE4(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v62 + 64))(v61, v62);
  URL._bridgeToObjectiveC()(v63);
  v65 = v64;
  v50 = v84;
  v48 = *(void (**)(char *, uint64_t))(v83 + 8);
  v48(v11, v84);
  v56 = SecStaticCodeCreateWithPath(v65, 0, v88);

  if (!v56)
    goto LABEL_23;
LABEL_25:
  *(_QWORD *)&v92 = 0;
  *((_QWORD *)&v92 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(*((_QWORD *)&v92 + 1));
  *(_QWORD *)&v92 = 0xD000000000000025;
  *((_QWORD *)&v92 + 1) = 0x800000010012B670;
  v66 = v50;
  v67 = v96;
  v68 = v97;
  sub_100004DE4(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v68 + 64))(v67, v68);
  v69 = sub_100012534(&qword_100157C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v66, v69);
  object = v70._object;
  String.append(_:)(v70);
  swift_bridgeObjectRelease(object);
  v48(v11, v66);
  v72 = v92;
  v73 = sub_1000122F8();
  v74 = swift_allocError(&type metadata for KMError, v73, 0, 0);
  *(_OWORD *)v75 = v72;
  *(_QWORD *)(v75 + 16) = v56;
  *(_OWORD *)(v75 + 24) = 0u;
  *(_OWORD *)(v75 + 40) = 0u;
  *(_OWORD *)(v75 + 56) = 0u;
  *(_BYTE *)(v75 + 72) = 45;
  swift_willThrow(v74);
  sub_1000124F8((uint64_t)v98, &qword_100157C78);

  return sub_100005D08(v95);
}

uint64_t sub_1000DE3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::Bool v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  NSURL *v22;
  const __CFURL *v23;
  const __CFURL *v24;
  uint64_t v25;
  uint64_t inited;
  const __CFString *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __CFDictionary *isa;
  SecStaticCodeRef v33;
  const __SecCode *v34;
  OSStatus v35;
  const __CFDictionary *v36;
  SecRequirementRef v37;
  __CFString *v38;
  unint64_t v39;
  char v40;
  __CFString *v41;
  OSStatus v42;
  uint64_t v43;
  SecRequirementRef v44;
  __SecRequirement *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  __CFString *v51;
  OSStatus v52;
  uint64_t v53;
  SecRequirementRef v54;
  __SecRequirement *v55;
  OSStatus v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  __int128 v62;
  SecRequirementRef v63;
  CFDictionaryRef information;
  _BYTE v65[56];
  SecStaticCodeRef staticCode;
  SecRequirementRef requirement[2];
  __int128 v68;
  _QWORD v69[3];
  uint64_t v70;
  uint64_t v71;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 144))(v8);
  v12 = v11;
  v13 = (uint64_t *)sub_100090020();
  v14 = *v13;
  v15 = (void *)v13[1];
  swift_bridgeObjectRetain(v15);
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  v17 = String.hasPrefix(_:)(v16);
  swift_bridgeObjectRelease(v12);
  v18 = swift_bridgeObjectRelease(v15);
  if (v17)
    return 1;
  (*(void (**)(SecRequirementRef *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(requirement, v18);
  if (!*((_QWORD *)&v68 + 1))
  {
    sub_1000124F8((uint64_t)requirement, &qword_100157C78);
    return 0;
  }
  sub_100004E2C((__int128 *)requirement, (uint64_t)v69);
  staticCode = 0;
  v20 = v70;
  v21 = v71;
  sub_100004DE4(v69, v70);
  (*(void (**)(uint64_t, uint64_t))(v21 + 64))(v20, v21);
  URL._bridgeToObjectiveC()(v22);
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v25 = sub_100005C88(&qword_10015BB78);
  inited = swift_initStackObject(v25, v65);
  v62 = xmmword_10010F050;
  *(_OWORD *)(inited + 16) = xmmword_10010F050;
  *(_QWORD *)(inited + 32) = kSecCodeAttributeArchitecture;
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 48) = a3;
  v27 = (id)kSecCodeAttributeArchitecture;
  swift_bridgeObjectRetain(a3);
  v28 = sub_1000DD2F4(inited);
  type metadata accessor for CFString();
  v30 = v29;
  v31 = sub_100012534(&qword_10015BB80, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10011A994);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v28);
  LODWORD(v28) = SecStaticCodeCreateWithPathAndAttributes(v24, 0, isa, &staticCode);

  v33 = staticCode;
  if ((_DWORD)v28)
    goto LABEL_5;
  if (!staticCode)
    goto LABEL_11;
  information = 0;
  v34 = staticCode;
  v35 = SecCodeCopySigningInformation(v34, 2u, &information);
  v36 = information;
  if (v35)
    goto LABEL_9;
  if (!information)
    goto LABEL_10;
  requirement[0] = 0;
  v36 = information;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v36, requirement, v30, (char *)&type metadata for Any + 8, v31);

  v37 = requirement[0];
  if (!requirement[0])
  {
LABEL_9:

LABEL_10:
    goto LABEL_11;
  }
  if (*((_QWORD *)requirement[0] + 2))
  {
    v38 = (id)kSecCodeInfoIdentifier;
    v39 = sub_1000DEEAC((uint64_t)v38);
    if ((v40 & 1) != 0)
    {
      sub_100005D28(*((_QWORD *)v37 + 7) + 32 * v39, (uint64_t)requirement);
    }
    else
    {
      *(_OWORD *)requirement = 0u;
      v68 = 0u;
    }

  }
  else
  {
    *(_OWORD *)requirement = 0u;
    v68 = 0u;
  }
  swift_bridgeObjectRelease(v37);
  if (!*((_QWORD *)&v68 + 1))
  {

    sub_1000124F8((uint64_t)requirement, &qword_100158018);
    sub_100005D08(v69);
    return 2;
  }
  sub_1000124F8((uint64_t)requirement, &qword_100158018);
  requirement[0] = 0;
  v41 = (__CFString *)String._bridgeToObjectiveC()();
  v42 = SecRequirementCreateWithString(v41, 0, requirement);

  v44 = requirement[0];
  if (v42 || !requirement[0])
  {
    v46 = static os_log_type_t.error.getter(v43);
    v47 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v48 = swift_allocObject(v47, 72, 7);
    *(_OWORD *)(v48 + 16) = v62;
    *(_QWORD *)(v48 + 56) = &type metadata for Int32;
    *(_QWORD *)(v48 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v48 + 32) = v42;
    v49 = sub_10002687C();
    v50 = (void *)static OS_os_log.default.getter(v49);
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v50, "Failed to get signature type: Unable to create SecRequirement for checking Apple root: %lu", (_QWORD)v62);

    swift_bridgeObjectRelease(v48);
LABEL_29:

    v33 = staticCode;
LABEL_5:

LABEL_11:
    sub_100005D08(v69);
    return 0;
  }
  v45 = requirement[0];
  if (SecStaticCodeCheckValidity(v34, 0x20000000u, v45))
  {

    sub_100005D08(v69);
    return 3;
  }
  v63 = 0;
  v51 = (__CFString *)String._bridgeToObjectiveC()();
  v52 = SecRequirementCreateWithString(v51, 0, &v63);

  v54 = v63;
  if (v52 || !v63)
  {
    v57 = static os_log_type_t.error.getter(v53);
    v58 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v59 = swift_allocObject(v58, 72, 7);
    *(_OWORD *)(v59 + 16) = v62;
    *(_QWORD *)(v59 + 56) = &type metadata for Int32;
    *(_QWORD *)(v59 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v59 + 32) = v52;
    v60 = sub_10002687C();
    v61 = (void *)static OS_os_log.default.getter(v60);
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v61, "Failed to get signature type: Unable to create SecRequirement for checking Developer ID: %lu", (_QWORD)v62);

    swift_bridgeObjectRelease(v59);
    goto LABEL_29;
  }
  v55 = v63;
  v56 = SecStaticCodeCheckValidity(v34, 0x20000000u, v55);

  sub_100005D08(v69);
  if (v56)
    return 3;
  else
    return 5;
}

uint64_t sub_1000DE984()
{
  uint64_t v0;

  sub_1000124F8(v0 + 16, &qword_10015B6A0);
  return swift_deallocClassInstance(v0, 56, 7);
}

double sub_1000DE9B0()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = swift_allocObject(v0, 56, 7);
  result = 0.0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_QWORD *)(v1 + 48) = 0;
  return result;
}

uint64_t sub_1000DE9DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t sub_1000DEA04()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t sub_1000DEA2C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];

  v3 = *v1;
  v7[3] = type metadata accessor for RealCodeSigningResolver();
  v7[4] = &off_10014EFF8;
  v7[0] = v3;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v4);
  swift_retain(v3);
  sub_1000DEC1C(v7, v4, v5);
  sub_100005C44(a1, (uint64_t)v7);
  return (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v3 + 96))(v7);
}

uint64_t sub_1000DEAC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];

  v2 = v1;
  v7[3] = type metadata accessor for RealCodeSigningResolver();
  v7[4] = &off_10014EFF8;
  v7[0] = v1;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v4);
  swift_retain(v2);
  sub_1000DEC1C(v7, v4, v5);
  sub_100005C44(a1, (uint64_t)v7);
  return (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v2 + 96))(v7);
}

void sub_1000DEB64()
{
  Swift::String v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(761);
  v0._object = (void *)0x800000010012B340;
  v0._countAndFlagsBits = 0xD0000000000002EFLL;
  String.append(_:)(v0);
  v1 = (uint64_t *)sub_10009008C();
  v2 = *v1;
  v3 = (void *)v1[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0x737473697865205DLL;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  qword_100175910 = 0;
  *(_QWORD *)algn_100175918 = 0xE000000000000000;
}

uint64_t sub_1000DEC1C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_10015BB88);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_1000DEC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015BB88);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t sub_1000DECD4(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10011A968, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1000DED10(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10011A968, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000DED58(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  WitnessTable = swift_getWitnessTable(&unk_10011A968, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_1000DEDB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10011A968, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1000DEDFC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1000DEE10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015B6A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CFString()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10015BD60)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_10014F270);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10015BD60);
  }
}

unint64_t sub_1000DEEAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  type metadata accessor for CFString();
  v4 = v3;
  v5 = sub_100012534(&qword_10015BD70, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10011A968);
  _CFObject.hash(into:)(v8, v4, v5);
  v6 = Hasher._finalize()();
  return sub_1000DF4C4(a1, v6);
}

uint64_t type metadata accessor for RealCodeSigningResolver()
{
  return objc_opt_self(_TtC10driverkitd23RealCodeSigningResolver);
}

unint64_t sub_1000DEF58()
{
  unint64_t result;

  result = qword_10015BB90;
  if (!qword_10015BB90)
  {
    result = swift_getWitnessTable(&unk_10011A518, &type metadata for CodeSigningTeam);
    atomic_store(result, (unint64_t *)&qword_10015BB90);
  }
  return result;
}

unint64_t sub_1000DEFA4()
{
  unint64_t result;

  result = qword_10015BB98;
  if (!qword_10015BB98)
  {
    result = swift_getWitnessTable(&unk_10011A670, &type metadata for CodeSignatureType);
    atomic_store(result, (unint64_t *)&qword_10015BB98);
  }
  return result;
}

unint64_t sub_1000DEFEC()
{
  unint64_t result;

  result = qword_10015BBA0;
  if (!qword_10015BBA0)
  {
    result = swift_getWitnessTable(&unk_10011A6D8, &type metadata for SignatureResolutionStrategy);
    atomic_store(result, (unint64_t *)&qword_10015BBA0);
  }
  return result;
}

uint64_t sub_1000DF030(uint64_t a1)
{
  uint64_t result;

  result = sub_100012534(&qword_10015BBA8, type metadata accessor for RealCodeSigningInfo, (uint64_t)&unk_10011A75C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for RealCodeSigningInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_100172650;
  if (!qword_100172650)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RealCodeSigningInfo);
  return result;
}

uint64_t getEnumTagSinglePayload for CodeSigningTeam(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CodeSigningTeam(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodeSigningTeam()
{
  return &type metadata for CodeSigningTeam;
}

uint64_t *initializeBufferWithCopyOfBuffer for CodeSigningHash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1000122B4(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for CodeSigningHash(uint64_t a1)
{
  return sub_100011F40(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for CodeSigningHash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_1000122B4(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100011F40(v5, v6);
  return a1;
}

uint64_t *assignWithTake for CodeSigningHash(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100011F40(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodeSigningHash(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CodeSigningHash(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodeSigningHash()
{
  return &type metadata for CodeSigningHash;
}

ValueMetadata *type metadata accessor for CodeSignatureType()
{
  return &type metadata for CodeSignatureType;
}

uint64_t _s10driverkitd17CodeSignatureTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000DF340 + 4 * byte_10011A50E[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000DF374 + 4 * asc_10011A509[v4]))();
}

uint64_t sub_1000DF374(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DF37C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DF384);
  return result;
}

uint64_t sub_1000DF390(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DF398);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000DF39C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DF3A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignatureResolutionStrategy()
{
  return &type metadata for SignatureResolutionStrategy;
}

uint64_t sub_1000DF3C0()
{
  return type metadata accessor for RealCodeSigningInfo(0);
}

void sub_1000DF3C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_10011A888;
  v4[2] = &unk_10011A8A0;
  v4[3] = &unk_10011A8B8;
  v4[4] = &unk_10011A8D0;
  v4[5] = &unk_10011A8D0;
  sub_100018BB8(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

uint64_t sub_1000DF46C()
{
  return sub_100012534(&qword_10015BB80, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10011A994);
}

uint64_t sub_1000DF498()
{
  return sub_100012534(&qword_10015BD68, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10011A93C);
}

unint64_t sub_1000DF4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    type metadata accessor for CFString();
    v9 = v8;
    v10 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * i);
    v11 = sub_100012534(&qword_10015BD70, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_10011A968);
    v12 = v10;
    v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      v14 = ~v4;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

void *sub_1000DF608()
{
  return &unk_10014F310;
}

void *sub_1000DF614()
{
  return &unk_10014F320;
}

void *sub_1000DF620()
{
  return &unk_10014F330;
}

uint64_t sub_1000DF62C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[16];
  uint64_t v27;
  _BYTE v28[9];

  v27 = a1;
  v1 = sub_1000DF944((uint64_t)sub_1000DF884, (uint64_t)v26, (uint64_t)&off_10014F350);
  v2 = v1;
  if (*(_QWORD *)(v1 + 16) == 1)
  {
    v3 = *(unsigned __int8 *)(v1 + 32);
    swift_bridgeObjectRelease(v1);
    v4 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v5 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v5 + 16) = xmmword_10010F050;
    v28[0] = v3;
    v6 = sub_100005C88(&qword_10015BD88);
    v7 = String.init<A>(describing:)(v28, v6);
    v9 = v8;
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 64) = sub_100026838();
    *(_QWORD *)(v5 + 32) = v7;
    *(_QWORD *)(v5 + 40) = v9;
    v10 = sub_10002687C();
    v11 = (void *)static OS_os_log.default.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    os_log(_:dso:log:type:_:)("kextsOutOfOSImageFeatureFlags: %{public}s", 41, 2, &_mh_execute_header, v11, v12, v5);
  }
  else
  {
    v13 = static os_log_type_t.error.getter(v1);
    v14 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_10010F050;
    v16 = Array.description.getter(v2, &type metadata for KextsOutOfOSImageFeatureFlags);
    v18 = v17;
    swift_bridgeObjectRelease(v2);
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    v19 = sub_100026838();
    *(_QWORD *)(v15 + 64) = v19;
    *(_QWORD *)(v15 + 32) = v16;
    *(_QWORD *)(v15 + 40) = v18;
    v20 = sub_10002687C();
    v21 = (void *)static OS_os_log.default.getter(v20);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v21, "KextsOutOfOSImageFeatureFlags should have only one checkpoint enabled. Found %{public}s", 87, 2, v15);
    swift_bridgeObjectRelease(v15);

    v5 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v5 + 16) = xmmword_10010F050;
    v22 = StaticString.description.getter("kextsOutOfOS", 12, 2);
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 64) = v19;
    *(_QWORD *)(v5 + 32) = v22;
    *(_QWORD *)(v5 + 40) = v23;
    v11 = (void *)static OS_os_log.default.getter(v22);
    v24 = static os_log_type_t.default.getter(v11);
    os_log(_:dso:log:type:_:)("forcing checkpoint to %{public}s", 32, 2, &_mh_execute_header, v11, v24, v5);
    v3 = 0;
  }
  swift_bridgeObjectRelease(v5);

  return v3;
}

uint64_t sub_1000DF884(char *a1)
{
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD **)(v1 + 16);
  v3 = *a1;
  v4 = v2[3];
  v5 = v2[4];
  sub_100004DE4(v2, v4);
  sub_10003AA38(v4, v5);
  v6 = v11;
  v7 = v12;
  sub_100004DE4(v10, v11);
  v9[3] = &type metadata for KextsOutOfOSImageFeatureFlags;
  v9[4] = &off_10014F3A0;
  LOBYTE(v9[0]) = v3;
  LOBYTE(v4) = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 16))(v9, v6, v7);
  sub_100005D08(v9);
  sub_100005D08(v10);
  return v4 & 1;
}

uint64_t sub_1000DF944(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(char *);
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t (*v12)(char *);
  char v13;
  _QWORD *v14;

  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v6 = (uint64_t (*)(char *))result;
    v7 = 0;
    v8 = _swiftEmptyArrayStorage;
    v12 = (uint64_t (*)(char *))result;
    while (v7 < *(_QWORD *)(a3 + 16))
    {
      v11 = *(_BYTE *)(a3 + v7 + 32);
      v13 = v11;
      result = v6(&v13);
      if (v3)
      {
        swift_release(v8);
        goto LABEL_14;
      }
      if ((result & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native(v8);
        v14 = v8;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1000DFEBC(0, v8[2] + 1, 1);
          v8 = v14;
        }
        v10 = v8[2];
        v9 = v8[3];
        if (v10 >= v9 >> 1)
        {
          result = (uint64_t)sub_1000DFEBC((char *)(v9 > 1), v10 + 1, 1);
          v8 = v14;
        }
        v8[2] = v10 + 1;
        *((_BYTE *)v8 + v10 + 32) = v11;
        v6 = v12;
      }
      if (v5 == ++v7)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
LABEL_14:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v8;
  }
  return result;
}

const char *sub_1000DFA84()
{
  return "KextsOutOfOSImage";
}

const char *sub_1000DFA98()
{
  _BYTE *v0;

  if (*v0)
    return "kextsInKDK";
  else
    return "kextsOutOfOS";
}

void sub_1000DFAC8(_QWORD *a1@<X8>)
{
  *a1 = &off_10014F378;
}

uint64_t sub_1000DFAD8()
{
  unsigned __int8 *v0;
  int v1;
  Swift::String v2;
  const char *v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;

  v1 = *v0;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  if (v1)
    v3 = "kextsInKDK";
  else
    v3 = "kextsOutOfOS";
  if (v1)
    v4 = 10;
  else
    v4 = 12;
  v5._countAndFlagsBits = StaticString.description.getter(v3, v4, 2);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  return 0;
}

void *sub_1000DFB68()
{
  return &unk_10014F340;
}

unint64_t sub_1000DFB74()
{
  return 0xD000000000000015;
}

unint64_t sub_1000DFBAC()
{
  unint64_t result;

  result = qword_10015BD90;
  if (!qword_10015BD90)
  {
    result = swift_getWitnessTable(&unk_10011A9EC, &type metadata for KextsOutOfOSImageFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_10015BD90);
  }
  return result;
}

unint64_t sub_1000DFBF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BD98;
  if (!qword_10015BD98)
  {
    v1 = sub_100011CE4(&qword_10015BDA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015BD98);
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverKitDaemonPaths()
{
  return &type metadata for DriverKitDaemonPaths;
}

uint64_t storeEnumTagSinglePayload for KextsOutOfOSImageFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000DFC9C + 4 * byte_10011A9E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000DFCD0 + 4 * byte_10011A9E0[v4]))();
}

uint64_t sub_1000DFCD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DFCD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DFCE0);
  return result;
}

uint64_t sub_1000DFCEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DFCF4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000DFCF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DFD00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KextsOutOfOSImageFeatureFlags()
{
  return &type metadata for KextsOutOfOSImageFeatureFlags;
}

ValueMetadata *type metadata accessor for ThirdPartyDriverKeys()
{
  return &type metadata for ThirdPartyDriverKeys;
}

_QWORD *initializeWithCopy for SupportsThirdPartyDriversDeviceProperty(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for SupportsThirdPartyDriversDeviceProperty(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for SupportsThirdPartyDriversDeviceProperty(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for SupportsThirdPartyDriversDeviceProperty(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SupportsThirdPartyDriversDeviceProperty(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SupportsThirdPartyDriversDeviceProperty(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SupportsThirdPartyDriversDeviceProperty()
{
  return &type metadata for SupportsThirdPartyDriversDeviceProperty;
}

char *sub_1000DFEBC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000DFED8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000DFED8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015BDA8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_release(a4);
  return v11;
}

uint64_t sub_1000DFFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

Swift::Int sub_1000DFFE0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  String.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000E0028(uint64_t a1)
{
  _QWORD *v1;

  return String.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int sub_1000E0030(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  String.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

Swift::Int sub_1000E0074()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  Hasher.init(_seed:)(v6, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v4, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000E00F8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v6, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000E0168(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v5, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000E01E8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  return result;
}

void sub_1000E0278(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E02A8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 >> 62)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 16) == v3 && v2 == v4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(a1 + 16), v2, v3, v4, 0);
}

void sub_1000E0454(uint64_t a1, uint64_t a2)
{
  if (a2 == 0xC000000000000008)
    JUMPOUT(0x1000E03BCLL);
  JUMPOUT(0x1000E043CLL);
}

void sub_1000E0468(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E049C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  Hasher._combine(_:)(5uLL);
  return String.hash(into:)(v2, v3, v4);
}

unint64_t sub_1000E04D4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a2[2];
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[6];
  Hasher._combine(_:)(7uLL);
  swift_bridgeObjectRetain(v6);
  sub_10004F8A8(v7);
  String.hash(into:)(v2, v3, v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v2, v5, v6);
  swift_bridgeObjectRelease(v6);
  sub_10004F8A8(v7);
  sub_1000E0468(v2, v7);
  sub_10004F8CC(v7);
  swift_bridgeObjectRelease(v6);
  return sub_10004F8CC(v7);
}

uint64_t sub_1000E0564(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *((_QWORD *)&v2 + 1) = a2;
  *(_QWORD *)&v2 = a2 + 0x4000000000000000;
  return ((uint64_t (*)(void))((char *)sub_1000E0588 + 4 * byte_10011AB7D[v2 >> 3]))();
}

void sub_1000E0588()
{
  Hasher._combine(_:)(0);
}

void sub_1000E05C4(uint64_t *a1)
{
  sub_1000E0278(*a1);
}

Swift::Int sub_1000E05D0()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_1000E0468((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1000E0614(uint64_t a1)
{
  uint64_t *v1;

  sub_1000E0468(a1, *v1);
}

Swift::Int sub_1000E061C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_1000E0468((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void sub_1000E065C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a2[1];
  v8 = v4 == *a2 && v5 == v7;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v7, 0) & 1) != 0)
    sub_1000E0278(v6);
}

Swift::Int sub_1000E06BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v5, v1, v2);
  swift_bridgeObjectRelease(v2);
  sub_10004F8A8(v3);
  sub_1000E0468((uint64_t)v5, v3);
  sub_10004F8CC(v3);
  return Hasher._finalize()();
}

unint64_t sub_1000E073C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  sub_10004F8A8(v5);
  sub_1000E0468(a1, v5);
  return sub_10004F8CC(v5);
}

Swift::Int sub_1000E07A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v3);
  sub_10004F8A8(v4);
  sub_1000E0468((uint64_t)v6, v4);
  sub_10004F8CC(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000E081C(unint64_t a1)
{
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  uint64_t v26;

  if ((a1 & 0x3FF) != 0)
  {
    v26 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v1._countAndFlagsBits = 46;
    v1._object = (void *)0xE100000000000000;
    String.append(_:)(v1);
    v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    object = v2._object;
    String.append(_:)(v2);
    swift_bridgeObjectRelease(object);
    v4._countAndFlagsBits = 46;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v6 = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(v6);
    v7._countAndFlagsBits = 46;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v9 = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(v9);
    v10._countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
  }
  else if (((a1 >> 10) & 0x3FF) != 0)
  {
    v26 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v11._countAndFlagsBits = 46;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v13 = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v13);
    v14._countAndFlagsBits = 46;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v16 = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v16);
    v17._countAndFlagsBits = 46;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
  }
  else if (((a1 >> 20) & 0x3FF) != 0)
  {
    v26 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v18._countAndFlagsBits = 46;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v20 = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v20);
    v21._countAndFlagsBits = 46;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
  }
  else
  {
    if (((a1 >> 30) & 0x3FF) == 0)
      return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v22._countAndFlagsBits = 46;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
  }
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v24 = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v24);
  return v26;
}

unint64_t sub_1000E0B14(unint64_t a1, unint64_t a2)
{
  return sub_1000E0B30(a1, a2, (uint64_t)&type metadata for FilesetOffset);
}

unint64_t sub_1000E0B30(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v3 = a2 - a1;
  if (a2 < a1)
  {
    v16 = 0;
    v17 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v7._object = (void *)0x800000010012B9A0;
    v7._countAndFlagsBits = 0xD000000000000029;
    String.append(_:)(v7);
    v15 = a1;
    _print_unlocked<A, B>(_:_:)(&v15, &v16, a3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v8._countAndFlagsBits = 0x206D6F726620;
    v8._object = (void *)0xE600000000000000;
    String.append(_:)(v8);
    v15 = a2;
    _print_unlocked<A, B>(_:_:)(&v15, &v16, a3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v9 = v16;
    v10 = v17;
    v11 = sub_1000122F8();
    v12 = swift_allocError(&type metadata for KMError, v11, 0, 0);
    *(_QWORD *)v13 = v9;
    *(_QWORD *)(v13 + 8) = v10;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_QWORD *)(v13 + 64) = 0;
    *(_BYTE *)(v13 + 72) = 72;
    swift_willThrow(v12);
  }
  return v3;
}

Swift::Int sub_1000E0C64()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000E0CA8()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000E0CD0(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000E0D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v17 = sub_100005C88(&qword_10015BDB0);
  v18 = swift_allocObject(v17, 64, 7);
  *(_OWORD *)(v18 + 16) = xmmword_10010F050;
  *(_QWORD *)(v18 + 32) = a1;
  *(_QWORD *)(v18 + 40) = a2;
  *(_QWORD *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a4;
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __n128))(a11 + 16);
  swift_bridgeObjectRetain(a2);
  v20 = swift_bridgeObjectRetain(a4);
  v21 = v19(v18, a5, a6, a7, a8, a9 & 1, a10, a11, v20);
  swift_bridgeObjectRelease(v18);
  if (!v30)
  {
    sub_1000E0E54(v21, (uint64_t)v26);
    swift_bridgeObjectRelease(v21);
    if (v27)
    {
      v18 = v29;
      v22 = v28;
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      return 0;
    }
  }
  return v18;
}

uint64_t sub_1000E0E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15[2];

  result = sub_1000109E8(a1);
  if ((v6 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    v7 = sub_1000EEC00(v15, result, v5, 0, a1);
    v9 = v8;
    v11 = v10;
    v12 = v15[0];
    v13 = v15[1];
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 40) = v13;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v11);
    sub_10002B23C(v12, v13);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v9);
    return sub_100021610(v12, v13);
  }
  return result;
}

uint64_t sub_1000E0F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  _BYTE v11[48];

  result = sub_1000109E8(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    v7 = sub_1000EECB8((uint64_t)v11, result, v5, 0, a1);
    v9 = v8;
    v10[0] = v7;
    v10[1] = v8;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    sub_100019E1C((uint64_t)v11, a2 + 16, &qword_1001591E8);
    swift_bridgeObjectRetain(v9);
    return sub_1000124F8((uint64_t)v10, &qword_10015BE60);
  }
  return result;
}

uint64_t sub_1000E1020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000E0D10(a1, a2, a3, a4, a5, a6, a7, 0, 1, a8, a9);
}

double sub_1000E1050@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t inited;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  __int128 v23[3];
  _BYTE v24[48];
  _BYTE v25[8];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v15 = sub_100005C88((uint64_t *)&unk_100159E60);
  inited = swift_initStackObject(v15, v24);
  *(_OWORD *)(inited + 16) = xmmword_10010F050;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v17 = sub_1000F0004(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  v18 = v29;
  v19 = sub_1000E11BC(v17, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease(v17);
  if (!v18)
  {
    sub_1000E0F50(v19, (uint64_t)v25);
    swift_bridgeObjectRelease(v19);
    if (v26)
    {
      swift_bridgeObjectRelease(v26);
      v21 = v28;
      sub_100004E2C(&v27, (uint64_t)v23);
      sub_100004E2C(v23, a8);
      *(_QWORD *)(a8 + 40) = v21;
    }
    else
    {
      sub_1000124F8((uint64_t)v25, &qword_10015BDB8);
      result = 0.0;
      *(_OWORD *)(a8 + 16) = 0u;
      *(_OWORD *)(a8 + 32) = 0u;
      *(_OWORD *)a8 = 0u;
    }
  }
  return result;
}

uint64_t sub_1000E11BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t), char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28[24];
  uint64_t v29;

  v7 = v6;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(a1);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_10014F5A8, 24, 7);
  *(_QWORD *)(v14 + 16) = sub_1000E14B4((uint64_t)_swiftEmptyArrayStorage);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v7, a5);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 48) & ~v15;
  v17 = (char *)swift_allocObject(&unk_10014F5D0, v16 + v12, v15 | 7);
  *((_QWORD *)v17 + 2) = a5;
  *((_QWORD *)v17 + 3) = a6;
  *((_QWORD *)v17 + 4) = a1;
  *((_QWORD *)v17 + 5) = v14;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[v16], v13, a5);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t), char *, uint64_t, uint64_t))(a6 + 24);
  swift_bridgeObjectRetain(a1);
  swift_retain(v14);
  v19 = v29;
  v18(v25, v26, v27, sub_1000F023C, v17, a5, a6);
  if (v19)
  {
    swift_release(v14);
    swift_release(v17);
  }
  else
  {
    swift_release(v17);
    swift_beginAccess(v14 + 16, v28, 0, 0);
    v20 = *(_QWORD *)(v14 + 16);
    swift_bridgeObjectRetain(v20);
    sub_1000E17F0(v21);
    a6 = v22;
    swift_release(v14);
    swift_bridgeObjectRelease(v20);
  }
  return a6;
}

unint64_t sub_1000E1364(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_10015BE20);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  v22 = v3 + 64;
  swift_retain(v3);
  v21 = v1;
  v6 = (_BYTE *)(v1 + 80);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 6);
    v8 = *((_QWORD *)v6 - 5);
    v9 = *((_QWORD *)v6 - 4);
    v10 = *((_QWORD *)v6 - 3);
    v12 = *((_QWORD *)v6 - 2);
    v11 = *((_QWORD *)v6 - 1);
    v13 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    result = sub_1000EC268(v7, v8, v9, v10);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v4[6] + 32 * result);
    *v16 = v7;
    v16[1] = v8;
    v16[2] = v9;
    v16[3] = v10;
    v17 = v4[7] + 24 * result;
    *(_QWORD *)v17 = v12;
    *(_QWORD *)(v17 + 8) = v11;
    *(_BYTE *)(v17 + 16) = v13;
    v18 = v4[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v4[2] = v20;
    v6 += 56;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v21;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E14B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v18 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v18);
    return (unint64_t)v4;
  }
  sub_100005C88(&qword_10015BE50);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100019E1C(v6, (uint64_t)&v19, &qword_10015BE58);
    v7 = v19;
    v8 = v20;
    result = sub_100005DE8(v19, v20);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v4[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    v12 = (_OWORD *)(v4[7] + 48 * result);
    v13 = v21;
    v14 = v23;
    v12[1] = v22;
    v12[2] = v14;
    *v12 = v13;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_12;
    v4[2] = v17;
    v6 += 64;
    if (!--v5)
    {
      swift_release(v4);
      v18 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000E15FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005C88(&qword_10015BE30);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100005DE8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000E1714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  __int128 v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11;
  __int128 v12[3];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    v7 = *(_OWORD *)(a1 + 16);
    v12[0] = *(_OWORD *)a1;
    v12[1] = v7;
    v12[2] = *(_OWORD *)(a1 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v11 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000ED2F0(v12, a2, a3, isUniquelyReferenced_nonNull_native);
    v9 = *v3;
    *v4 = v11;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v9);
  }
  else
  {
    sub_1000124F8(a1, &qword_10015BE48);
    sub_1000EC410(a2, a3, v12);
    swift_bridgeObjectRelease(a3);
    return sub_1000124F8((uint64_t)v12, &qword_10015BE48);
  }
}

void sub_1000E17F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t i;
  _OWORD v32[3];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[3];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005C88(&qword_10015BE38);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  }
  else
  {
    v2 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain(a1);
  i = 0;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v9 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v9 >= v28)
    goto LABEL_32;
  v10 = *(_QWORD *)(v29 + 8 * v9);
  v11 = i + 1;
  if (!v10)
  {
    v11 = i + 2;
    if (i + 2 >= v28)
      goto LABEL_32;
    v10 = *(_QWORD *)(v29 + 8 * v11);
    if (!v10)
    {
      v11 = i + 3;
      if (i + 3 >= v28)
        goto LABEL_32;
      v10 = *(_QWORD *)(v29 + 8 * v11);
      if (!v10)
      {
        v11 = i + 4;
        if (i + 4 >= v28)
          goto LABEL_32;
        v10 = *(_QWORD *)(v29 + 8 * v11);
        if (!v10)
        {
          v12 = i + 5;
          if (i + 5 < v28)
          {
            v10 = *(_QWORD *)(v29 + 8 * v12);
            if (v10)
            {
              v11 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
                goto LABEL_36;
              if (v11 >= v28)
                break;
              v10 = *(_QWORD *)(v29 + 8 * v11);
              ++v12;
              if (v10)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_100005DE0(a1);
          return;
        }
      }
    }
  }
LABEL_26:
  v5 = (v10 - 1) & v10;
  v8 = __clz(__rbit64(v10)) + (v11 << 6);
  for (i = v11; ; v8 = v7 | (i << 6))
  {
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v15 = *v13;
    v14 = v13[1];
    sub_100019E1C(*(_QWORD *)(a1 + 56) + 48 * v8, (uint64_t)v42, &qword_10015BE40);
    v40 = v15;
    v41 = v14;
    v32[0] = v42[0];
    v32[1] = v42[1];
    v32[2] = v42[2];
    *(_QWORD *)&v33 = v15;
    *((_QWORD *)&v33 + 1) = v14;
    swift_bridgeObjectRetain(v14);
    v16 = sub_100005C88(&qword_10015BE40);
    v17 = sub_100005C88(&qword_1001591E8);
    swift_dynamicCast(&v34, v32, v16, v17, 7);
    v18 = v33;
    v37 = v34;
    v38 = v35;
    v39 = v36;
    v33 = v34;
    v34 = v35;
    v35 = v36;
    v19 = sub_100005DE8(v18, *((uint64_t *)&v18 + 1));
    v20 = v19;
    if ((v21 & 1) != 0)
    {
      v6 = v2[6] + 16 * v19;
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      *(_OWORD *)v6 = v18;
      sub_1000392C8((uint64_t)&v33, v2[7] + 48 * v20, &qword_1001591E8);
      if (!v5)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v19;
    *(_OWORD *)(v2[6] + 16 * v19) = v18;
    v22 = (_OWORD *)(v2[7] + 48 * v19);
    v23 = v33;
    v24 = v35;
    v22[1] = v34;
    v22[2] = v24;
    *v22 = v23;
    v25 = v2[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_34;
    v2[2] = v27;
    if (!v5)
      goto LABEL_11;
LABEL_10:
    v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_1000E1B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (*(uint64_t (**)(void))(a5 + 8))();
  if (v5)
    v9 = v8;
  else
    v9 = v7;
  if (!v5)
    __asm { BR              X10 }
  return result;
}

_DWORD *sub_1000E1D60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *result;
  BOOL v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;

  v4 = *(_DWORD *)(a1 + 4);
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)sub_10008FFB4();
  v7 = *(_DWORD *)(a1 + 8);
  result = sub_10008FFC0();
  v10 = v4 != 16777228 || (v7 & ~*result) != 2;
  v11 = (v6 & v5) == 0 || v10;
  if ((v11 & 1) != 0)
  {
    v12 = 0;
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(_DWORD *)sub_10008FFCC();
    result = sub_10008FFD8();
    v15 = *(_QWORD *)result;
    v16 = (v14 & v13) >> *(_QWORD *)result;
    if (*(_QWORD *)result >= 0x20uLL)
      v16 = 0;
    v17 = (v14 & v13) << -(char)v15;
    if ((unint64_t)v15 <= 0xFFFFFFFFFFFFFFE0)
      v17 = 0;
    if (v15 < 0)
      v12 = v17;
    else
      v12 = v16;
    if ((unint64_t)(*(_QWORD *)result - 33) < 0xFFFFFFFFFFFFFFBFLL)
      v12 = 0;
  }
  *(_DWORD *)a2 = v12;
  *(_BYTE *)(a2 + 4) = v11;
  return result;
}

uint64_t sub_1000E1E34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  _BYTE v87[56];
  uint64_t v88;

  v8 = sub_100005C88(&qword_10015BDC0);
  inited = swift_initStackObject(v8, v87);
  *(_OWORD *)(inited + 16) = xmmword_10010F050;
  *(_QWORD *)(inited + 32) = sub_1000D3FAC(a1, a2);
  *(_QWORD *)(inited + 40) = v10;
  v11 = *sub_10008FF68();
  swift_bridgeObjectRetain(a2);
  v12 = swift_bridgeObjectRetain(v11);
  v67 = a1;
  v13 = sub_1000F1170(v12, a1, a2);
  v14 = v5;
  swift_bridgeObjectRelease(v11);
  v68 = a2;
  swift_bridgeObjectRelease(a2);
  v15 = sub_1000E2334(v13);
  swift_bridgeObjectRelease(v13);
  v77 = inited;
  sub_1000EE574(v15);
  v65 = inited;
  v16 = *(_QWORD *)(inited + 16);
  if (!v16)
  {
LABEL_23:
    swift_bridgeObjectRelease(v65);
    v61 = sub_1000122F8();
    v62 = swift_allocError(&type metadata for KMError, v61, 0, 0);
    *(_QWORD *)v63 = 0xD000000000000015;
    *(_QWORD *)(v63 + 8) = 0x800000010012B9D0;
    *(_OWORD *)(v63 + 16) = 0u;
    *(_OWORD *)(v63 + 32) = 0u;
    *(_OWORD *)(v63 + 48) = 0u;
    *(_QWORD *)(v63 + 64) = 0;
    *(_BYTE *)(v63 + 72) = 16;
    return swift_willThrow(v62);
  }
  v17 = (_QWORD *)(inited + 40);
  while (!*v17)
  {
LABEL_3:
    v17 += 2;
    if (!--v16)
      goto LABEL_23;
  }
  v18 = *(v17 - 1);
  swift_bridgeObjectRetain(*v17);
  v19 = sub_1000D4090(v18);
  v21 = v20;
  v75 = v22;
  v23 = sub_1000D3FAC(v19, v20);
  v25 = v24;
  v26 = sub_1000D3FAC(v67, v68);
  v28 = v27;
  if (!v25)
  {
    if (!v27)
      goto LABEL_19;
    goto LABEL_16;
  }
  if (!v27)
  {
    v28 = v25;
LABEL_16:
    v31 = swift_bridgeObjectRelease(v28);
    goto LABEL_17;
  }
  if (v23 == v26 && v25 == v27)
  {
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v28);
    goto LABEL_19;
  }
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v26, v27, 0);
  swift_bridgeObjectRelease(v25);
  v31 = swift_bridgeObjectRelease(v28);
  if ((v30 & 1) == 0)
  {
LABEL_17:
    v32 = static os_log_type_t.info.getter(v31);
    v33 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_10010F050;
    v35 = sub_1000D3FDC(v19, v21, v75);
    v36 = v19;
    v38 = v37;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = sub_100026838();
    *(_QWORD *)(v34 + 32) = v35;
    *(_QWORD *)(v34 + 40) = v38;
    v19 = v36;
    v39 = sub_10002687C();
    v40 = (void *)static OS_os_log.default.getter(v39);
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v40, "Falling back to arch %{public}s", 31, 2, v34);
    swift_bridgeObjectRelease(v34);

  }
LABEL_19:
  v41 = v14;
  sub_1000E2470(v19, v21, v75, a3, a4, a5);
  if (!v14)
  {
    swift_bridgeObjectRelease(v65);
    return swift_bridgeObjectRelease(v21);
  }
  v88 = v14;
  swift_errorRetain(v14);
  v42 = sub_100005C88(&qword_10015AB50);
  if (!swift_dynamicCast(&v77, &v88, v42, &type metadata for KMError, 0))
  {
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v21);
    return swift_errorRelease(v88);
  }
  v74 = v21;
  v71 = v19;
  v72 = v17;
  v73 = v16;
  v43 = v77;
  v44 = v78;
  v45 = v79;
  v46 = v80;
  v47 = v81;
  v48 = v83;
  v49 = v84;
  v50 = v85;
  v51 = v86;
  if (v86 == 16)
  {
    sub_1000391DC(v77, v78, v79, v80, v81, v82, v83, v84, v85, 16);
    v52 = swift_errorRelease(v41);
    v53 = static os_log_type_t.info.getter(v52);
    v54 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v55 = swift_allocObject(v54, 72, 7);
    *(_OWORD *)(v55 + 16) = xmmword_10010F050;
    v56 = sub_1000D3FDC(v71, v74, v75);
    v58 = v57;
    swift_bridgeObjectRelease(v74);
    *(_QWORD *)(v55 + 56) = &type metadata for String;
    *(_QWORD *)(v55 + 64) = sub_100026838();
    *(_QWORD *)(v55 + 32) = v56;
    *(_QWORD *)(v55 + 40) = v58;
    v59 = sub_10002687C();
    v60 = (void *)static OS_os_log.default.getter(v59);
    os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v60, "Can't find arch %{public}s in binary", 36, 2, v55);
    swift_bridgeObjectRelease(v55);

    swift_errorRelease(v88);
    v14 = 0;
    v17 = v72;
    v16 = v73;
    goto LABEL_3;
  }
  v76 = v82;
  swift_bridgeObjectRelease(v74);
  sub_1000391DC(v43, v44, v45, v46, v47, v76, v48, v49, v50, v51);
  swift_bridgeObjectRelease(v65);
  return swift_errorRelease(v88);
}

_QWORD *sub_1000E2334(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v15 = _swiftEmptyArrayStorage;
    sub_1000EE990(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v13[0] = *(v4 - 1);
      v13[1] = v5;
      swift_bridgeObjectRetain_n(v5, 2);
      v6 = sub_100005C88(&qword_100159498);
      swift_dynamicCast(v14, v13, &type metadata for String, v6, 7);
      v7 = v14[0];
      v8 = v14[1];
      swift_bridgeObjectRelease(v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1000EE990(0, v2[2] + 1, 1);
        v2 = v15;
      }
      v10 = v2[2];
      v9 = v2[3];
      if (v10 >= v9 >> 1)
      {
        sub_1000EE990((_QWORD *)(v9 > 1), v10 + 1, 1);
        v2 = v15;
      }
      v4 += 2;
      v2[2] = v10 + 1;
      v11 = &v2[2 * v10];
      v11[4] = v7;
      v11[5] = v8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1000E2470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t), uint64_t, uint64_t, uint64_t);
  _BYTE v19[24];
  uint64_t v20;

  v11 = sub_100005C88(&qword_100158918);
  v12 = swift_allocBox(v11);
  v14 = v13;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t), uint64_t, uint64_t, uint64_t))(a5 + 24);
  swift_retain(v12);
  v16(a1, a2, a3, sub_1000F1348, v12, a4, a5);
  if (v20)
    return swift_release_n(v12, 2);
  swift_release(v12);
  swift_beginAccess(v14, v19, 0, 0);
  sub_100019E1C(v14, a6, &qword_100158918);
  return swift_release(v12);
}

uint64_t sub_1000E258C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v6 = sub_100005C88(&qword_100158918);
  __chkstk_darwin(v6);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = swift_projectBox(a3);
  if (*(_DWORD *)a1 != 27)
    return 2;
  if (a1 + (unint64_t)*(unsigned int *)(a1 + 4) > a2)
    return 0xFFFFFFFFLL;
  v11 = v9;
  UUID.init(uuid:)(*(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9), *(unsigned __int8 *)(a1 + 10), *(unsigned __int8 *)(a1 + 11), *(unsigned __int8 *)(a1 + 12), *(unsigned __int8 *)(a1 + 13), *(unsigned __int8 *)(a1 + 14), *(unsigned __int8 *)(a1 + 15), *(_QWORD *)(a1 + 16));
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 0, 1, v12);
  swift_beginAccess(v11, v14, 1, 0);
  sub_1000392C8((uint64_t)v8, v11, &qword_100158918);
  return 0;
}

uint64_t sub_1000E26B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  char v14[24];
  uint64_t v15;

  v10 = swift_allocObject(&unk_10014F5F8, 32, 7);
  *(_QWORD *)(v10 + 16) = 0;
  v11 = v10 + 16;
  *(_BYTE *)(v10 + 24) = 1;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a5 + 24);
  swift_retain(v10);
  v12(a1, a2, a3, sub_1000F1384, v10, a4, a5);
  swift_release(v10);
  if (v15)
  {
    swift_release(v10);
  }
  else
  {
    swift_beginAccess(v11, v14, 0, 0);
    v11 = *(_QWORD *)(v10 + 16);
    swift_release(v10);
  }
  return v11;
}

_QWORD *sub_1000E27AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  Class isa;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  unint64_t v50;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE v61[64];

  v9 = a5 & 1;
  v10 = sub_10008FBBC();
  v12 = *v10;
  v11 = v10[1];
  v14 = v10[2];
  v13 = v10[3];
  v15 = sub_100005C88(&qword_10015BDB0);
  inited = swift_initStackObject(v15, v61);
  *(_OWORD *)(inited + 16) = xmmword_10010F050;
  *(_QWORD *)(inited + 32) = v12;
  v17 = inited + 32;
  *(_QWORD *)(inited + 40) = v11;
  *(_QWORD *)(inited + 48) = v14;
  *(_QWORD *)(inited + 56) = v13;
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain_n(v13, 2);
  v18 = sub_1000E88EC(inited, a1, a2, a3, a4, v9, a6, a7);
  if (v55)
  {
    swift_setDeallocating(inited);
    swift_arrayDestroy(v17, *(_QWORD *)(inited + 16), &type metadata for MachOSectionName);
    swift_errorRelease();
LABEL_3:
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v11);
LABEL_4:
    v19 = sub_1000122F8();
    v20 = swift_allocError(&type metadata for KMError, v19, 0, 0);
    *(_QWORD *)v21 = 0xD000000000000030;
    *(_QWORD *)(v21 + 8) = 0x800000010012BA40;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 32) = 0u;
    *(_OWORD *)(v21 + 48) = 0u;
    *(_QWORD *)(v21 + 64) = 0;
    *(_BYTE *)(v21 + 72) = 24;
    return (_QWORD *)swift_willThrow(v20);
  }
  v23 = v18;
  swift_setDeallocating(inited);
  swift_arrayDestroy(v17, *(_QWORD *)(inited + 16), &type metadata for MachOSectionName);
  sub_1000E0E54(v23, (uint64_t)&v57);
  swift_bridgeObjectRelease(v23);
  v24 = *((_QWORD *)&v57 + 1);
  if (!*((_QWORD *)&v57 + 1))
    goto LABEL_3;
  v26 = v59;
  v25 = v60;
  v27 = *((_QWORD *)&v58 + 1);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v27);
  if (v25 >> 60 == 15)
    goto LABEL_4;
  v28 = (void *)objc_opt_self(NSPropertyListSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v57 = 0;
  v30 = objc_msgSend(v28, "propertyListWithData:options:format:error:", isa, 0, 0, &v57);

  v31 = v57;
  if (!v30)
  {
    v40 = (id)v57;
    _convertNSErrorToError(_:)(v31);

    swift_willThrow(v41);
    swift_errorRelease();
    goto LABEL_13;
  }
  v32 = (id)v57;
  _bridgeAnyObjectToAny(_:)(&v57, v30);
  swift_unknownObjectRelease(v30);
  v33 = sub_100005C88((uint64_t *)&unk_10015BA80);
  if ((swift_dynamicCast(&v56, &v57, (char *)&type metadata for Any + 8, v33, 6) & 1) == 0)
  {
LABEL_13:
    v42 = sub_1000122F8();
    v43 = swift_allocError(&type metadata for KMError, v42, 0, 0);
    *(_QWORD *)v44 = 0xD00000000000002ELL;
    *(_QWORD *)(v44 + 8) = 0x800000010012BA80;
LABEL_25:
    *(_OWORD *)(v44 + 16) = 0u;
    *(_OWORD *)(v44 + 32) = 0u;
    *(_OWORD *)(v44 + 48) = 0u;
    *(_QWORD *)(v44 + 64) = 0;
    *(_BYTE *)(v44 + 72) = 24;
    swift_willThrow(v43);
    return (_QWORD *)sub_100021610(v26, v25);
  }
  v34 = v56;
  v35 = (uint64_t *)sub_10008FFE4();
  if (*(_QWORD *)(v34 + 16))
  {
    v36 = *v35;
    v37 = v35[1];
    swift_bridgeObjectRetain(v37);
    v38 = sub_100005DE8(v36, v37);
    if ((v39 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(v34 + 56) + 32 * v38, (uint64_t)&v57);
    }
    else
    {
      v57 = 0u;
      v58 = 0u;
    }
    swift_bridgeObjectRelease(v37);
  }
  else
  {
    v57 = 0u;
    v58 = 0u;
  }
  swift_bridgeObjectRelease(v34);
  if (!*((_QWORD *)&v58 + 1))
  {
    sub_1000124F8((uint64_t)&v57, &qword_100158018);
    goto LABEL_24;
  }
  v45 = sub_100005C88(&qword_1001587D0);
  if ((swift_dynamicCast(&v56, &v57, (char *)&type metadata for Any + 8, v45, 6) & 1) == 0)
  {
LABEL_24:
    v50 = sub_1000122F8();
    v43 = swift_allocError(&type metadata for KMError, v50, 0, 0);
    *(_QWORD *)v44 = 0xD00000000000002BLL;
    *(_QWORD *)(v44 + 8) = 0x800000010012BAB0;
    goto LABEL_25;
  }
  v46 = v56;
  *(_QWORD *)&v57 = _swiftEmptyArrayStorage;
  v47 = *(_QWORD *)(v56 + 16);
  if (v47)
  {
    swift_bridgeObjectRetain(v56);
    for (i = 0; i != v47; ++i)
    {
      v49 = *(_QWORD *)(v46 + 8 * i + 32);
      v56 = v49;
      swift_bridgeObjectRetain(v49);
      sub_1000E2CB4((uint64_t)&v57, &v56);
      swift_bridgeObjectRelease(v49);
    }
    swift_bridgeObjectRelease(v46);
    sub_100021610(v26, v25);
    swift_bridgeObjectRelease(v46);
    return (_QWORD *)v57;
  }
  else
  {
    sub_100021610(v26, v25);
    swift_bridgeObjectRelease(v46);
    return _swiftEmptyArrayStorage;
  }
}

char *sub_1000E2CB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char *result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  __int128 v28;

  v3 = v2;
  v4 = *a2;
  v5 = sub_10008F1F8();
  if (!*(_QWORD *)(v4 + 16))
  {
    v27 = 0u;
    v28 = 0u;
    goto LABEL_10;
  }
  v6 = *v5;
  v7 = v5[1];
  swift_bridgeObjectRetain(v7);
  v8 = sub_100005DE8(v6, v7);
  if ((v9 & 1) == 0)
  {
    v27 = 0u;
    v28 = 0u;
    swift_bridgeObjectRelease(v7);
    goto LABEL_10;
  }
  sub_100005D28(*(_QWORD *)(v4 + 56) + 32 * v8, (uint64_t)&v27);
  swift_bridgeObjectRelease(v7);
  if (!*((_QWORD *)&v28 + 1))
  {
LABEL_10:
    sub_1000124F8((uint64_t)&v27, &qword_100158018);
    goto LABEL_11;
  }
  if ((swift_dynamicCast(v26, &v27, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_11:
    v17 = sub_1000122F8();
    v18 = swift_allocError(&type metadata for KMError, v17, 0, 0);
    *(_QWORD *)v19 = 0xD00000000000002BLL;
    v20 = "Wrong type for symbol set bundle identifier";
LABEL_12:
    *(_QWORD *)(v19 + 8) = (unint64_t)(v20 - 32) | 0x8000000000000000;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_OWORD *)(v19 + 48) = 0u;
    *(_QWORD *)(v19 + 64) = 0;
    *(_BYTE *)(v19 + 72) = 24;
    return (char *)swift_willThrow(v18);
  }
  v11 = v26[0];
  v10 = v26[1];
  v12 = (uint64_t *)sub_10008FFF0();
  if (!*(_QWORD *)(v4 + 16))
  {
    v27 = 0u;
    v28 = 0u;
LABEL_20:
    swift_bridgeObjectRelease(v10);
    sub_1000124F8((uint64_t)&v27, &qword_100158018);
LABEL_22:
    v25 = sub_1000122F8();
    v18 = swift_allocError(&type metadata for KMError, v25, 0, 0);
    *(_QWORD *)v19 = 0xD000000000000019;
    v20 = "Wrong type for symbol set";
    goto LABEL_12;
  }
  v13 = *v12;
  v14 = v12[1];
  swift_bridgeObjectRetain(v14);
  v15 = sub_100005DE8(v13, v14);
  if ((v16 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(v4 + 56) + 32 * v15, (uint64_t)&v27);
  }
  else
  {
    v27 = 0u;
    v28 = 0u;
  }
  swift_bridgeObjectRelease(v14);
  if (!*((_QWORD *)&v28 + 1))
    goto LABEL_20;
  v22 = sub_100005C88(&qword_1001587D0);
  if ((swift_dynamicCast(v26, &v27, (char *)&type metadata for Any + 8, v22, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v10);
    goto LABEL_22;
  }
  v23 = v26[0];
  swift_bridgeObjectRetain(v10);
  v24 = (char *)sub_1000EFAC0(v23, v11, v10);
  swift_bridgeObjectRelease(v23);
  result = (char *)swift_bridgeObjectRelease_n(v10, 2);
  if (!v3)
    return sub_1000EE66C(v24);
  return result;
}

void sub_1000E2F34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t), _QWORD *, uint64_t, uint64_t, __n128);
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;

  v67 = a7;
  v8 = v7;
  v9 = a6;
  v62 = a5;
  v63 = a2;
  v64 = a3;
  v61 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v60 = v12;
  v74 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_10014F620, 24, 7);
  v14 = sub_1000E15FC((uint64_t)_swiftEmptyArrayStorage);
  v68 = v13;
  *(_QWORD *)(v13 + 16) = v14;
  v58 = v13 + 16;
  v15 = a1;
  v65 = swift_allocObject(&unk_10014F648, 24, 7);
  *(_QWORD *)(v65 + 16) = &_swiftEmptySetSingleton;
  v70 = v8;
  v71 = v9;
  v69 = a4;
  if (a1 && *(_QWORD *)(a1 + 16))
  {
    v16 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain(a1);
    LODWORD(v59) = 0;
    v17 = 0;
    v18 = -(uint64_t)v16;
    v55 = a1;
    v56 = a1 + 40;
    v57 = v16;
LABEL_4:
    v19 = v57;
    if (v17 > v57)
      v19 = v17;
    v20 = -(uint64_t)v19;
    v21 = (uint64_t *)(v56 + 16 * v17++);
    while (v20 + v17 != 1)
    {
      v23 = *(v21 - 1);
      v22 = *v21;
      swift_bridgeObjectRetain(*v21);
      v24 = (uint64_t *)sub_10009002C();
      v25 = *v24;
      v26 = v24[1];
      swift_bridgeObjectRetain(v26);
      v27 = sub_100032C6C(v25, v26, v23, v22);
      swift_bridgeObjectRelease(v26);
      if ((v27 & 1) != 0)
      {
        swift_bridgeObjectRelease(v22);
        if ((v59 & 1) == 0)
        {
          v28 = (uint64_t *)sub_100090044();
          v29 = *v28;
          v30 = v28[1];
          swift_bridgeObjectRetain(v30);
          sub_100075E20(&v72, v29, v30);
          swift_bridgeObjectRelease(v73);
        }
        LODWORD(v59) = 1;
        if (!(v18 + v17))
        {
LABEL_14:
          v15 = v55;
          swift_bridgeObjectRelease(v55);
          v8 = v70;
          v9 = v71;
          a4 = v69;
          goto LABEL_15;
        }
        goto LABEL_4;
      }
      sub_100075E20(&v72, v23, v22);
      swift_bridgeObjectRelease(v73);
      ++v17;
      v21 += 2;
      if (v18 + v17 == 1)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    v59 = HIDWORD(a4);
    v31 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v74, v8, v9);
    v32 = *(unsigned __int8 *)(v31 + 80);
    v33 = (v32 + 48) & ~v32;
    v34 = (v60 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v35 + 31) & 0xFFFFFFFFFFFFFFF8;
    v37 = (_QWORD *)swift_allocObject(&unk_10014F670, v36 + 8, v32 | 7);
    v38 = v9;
    v39 = v37;
    v40 = v67;
    v37[2] = v38;
    v37[3] = v40;
    v41 = v65;
    v37[4] = v15;
    v37[5] = v41;
    (*(void (**)(char *, char *))(v31 + 32))((char *)v37 + v33, v74);
    v42 = v68;
    v43 = v69;
    *(_QWORD *)((char *)v39 + v34) = v68;
    v44 = v42;
    v45 = (char *)v39 + v35;
    v47 = v63;
    v46 = v64;
    *(_QWORD *)v45 = v63;
    *((_QWORD *)v45 + 1) = v46;
    v48 = v59;
    *((_DWORD *)v45 + 4) = v43;
    *((_DWORD *)v45 + 5) = v48;
    v49 = v62;
    *(_QWORD *)((char *)v39 + v36) = v62;
    v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t), _QWORD *, uint64_t, uint64_t, __n128))(v40 + 24);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v15);
    swift_retain(v41);
    swift_retain(v44);
    v51 = swift_bridgeObjectRetain(v46);
    v52 = v46;
    v53 = v66;
    v50(v47, v52, v43, sub_1000F14A4, v39, v71, v40, v51);
    if (v53)
    {
      swift_release(v44);
      swift_release(v41);
      swift_release(v39);
    }
    else
    {
      swift_release(v39);
      swift_beginAccess(v58, &v72, 0, 0);
      swift_bridgeObjectRetain(*(_QWORD *)(v44 + 16));
      swift_release(v44);
      swift_release(v41);
    }
  }
}

uint64_t sub_1000E32BC(int *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v10;
  int *v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  int *v29;
  int v30;
  _QWORD *v31;
  int v32;
  char v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  int v86;
  char v87;
  char v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;

  v7 = a7;
  v10 = a4;
  v12 = a1;
  v13 = a2 - (_QWORD)a1;
  if (a1)
    v14 = v13 < 32;
  else
    v14 = 1;
  v15 = v14;
  if (v14)
  {
    v85 = v15;
    v83 = sub_1000122F8();
    v17 = swift_allocError(&type metadata for KMError, v83, 0, 0);
    *(_QWORD *)v18 = 0xD000000000000033;
    *(_QWORD *)(v18 + 8) = 0x800000010012C400;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_QWORD *)(v18 + 64) = 0;
    *(_BYTE *)(v18 + 72) = 24;
    swift_willThrow(v17);
    v110 = v17;
    swift_errorRetain(v17);
    v19 = sub_100005C88(&qword_10015AB50);
    if (!swift_dynamicCast(&v100, &v110, v19, &type metadata for KMError, 0))
      goto LABEL_40;
    v87 = a6;
    v89 = a4;
    v90 = a5;
    v92 = a3;
    swift_errorRelease(v17);
    v20 = v105;
    v22 = v106;
    v21 = v107;
    v23 = v108;
    v24 = v109;
    v79 = v101;
    v81 = v100;
    v76 = v103;
    v77 = v102;
    v75 = v104;
    sub_1000515CC(v100, v101, v102, v103, v104, v105, v106, v107, v108, v109);
    v25 = sub_10008EC3C(0, 1, 1, _swiftEmptyArrayStorage);
    v27 = v25[2];
    v26 = v25[3];
    if (v27 >= v26 >> 1)
      v25 = sub_10008EC3C((_QWORD *)(v26 > 1), v27 + 1, 1, v25);
    v25[2] = v27 + 1;
    v95 = v25;
    v28 = &v25[10 * v27];
    v28[4] = v81;
    v28[5] = v79;
    v28[6] = v77;
    v28[7] = v76;
    v28[8] = v75;
    v28[9] = v20;
    v28[10] = v22;
    v28[11] = v21;
    v28[12] = v23;
    *((_BYTE *)v28 + 104) = v24;
    sub_1000391DC(v81, v79, v77, v76, v75, v20, v22, v21, v23, v24);
    swift_errorRelease(v110);
    if (!v12 || v13 < 28)
    {
      v41 = swift_allocError(&type metadata for KMError, v83, 0, 0);
      v43 = v41;
      v12 = 0;
      *(_QWORD *)v42 = 0xD000000000000033;
      v45 = 0x800000010012C440;
      v44 = 255;
      a5 = v90;
      a3 = v92;
      v7 = a7;
      v10 = v89;
      a6 = v87;
LABEL_31:
      *(_QWORD *)(v42 + 8) = v45;
      *(_OWORD *)(v42 + 16) = 0u;
      *(_OWORD *)(v42 + 32) = 0u;
      *(_OWORD *)(v42 + 48) = 0u;
      *(_QWORD *)(v42 + 64) = 0;
      *(_BYTE *)(v42 + 72) = 24;
      swift_willThrow(v41);
      v110 = v43;
      swift_errorRetain(v43);
      v46 = sub_100005C88(&qword_10015AB50);
      if (swift_dynamicCast(&v100, &v110, v46, &type metadata for KMError, 0))
      {
        v86 = v44;
        v88 = a6;
        v91 = a5;
        v98 = v7;
        swift_errorRelease(v43);
        v47 = v100;
        v48 = v101;
        v49 = v104;
        v50 = v105;
        v51 = v108;
        v52 = v109;
        v82 = v103;
        v84 = v102;
        v78 = v107;
        v80 = v106;
        sub_1000515CC(v100, v101, v102, v103, v104, v105, v106, v107, v108, v109);
        v93 = a3;
        if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) != 0)
          v53 = v95;
        else
          v53 = sub_10008EC3C(0, v95[2] + 1, 1, v95);
        v55 = v53[2];
        v54 = v53[3];
        if (v55 >= v54 >> 1)
          v53 = sub_10008EC3C((_QWORD *)(v54 > 1), v55 + 1, 1, v53);
        v53[2] = v55 + 1;
        v56 = &v53[10 * v55];
        v56[4] = v47;
        v56[5] = v48;
        v56[6] = v84;
        v56[7] = v82;
        v56[8] = v49;
        v56[9] = v50;
        v56[10] = v80;
        v56[11] = v78;
        v56[12] = v51;
        *((_BYTE *)v56 + 104) = v52;
        v74 = v51;
        v57 = v53;
        sub_1000391DC(v47, v48, v84, v82, v49, v50, v80, v78, v74, v52);
        swift_errorRelease(v110);
        v31 = v57;
        a5 = v91;
        a3 = v93;
        v7 = v98;
        a6 = v88;
        if (v86 != 255)
          goto LABEL_37;
        goto LABEL_27;
      }
      swift_bridgeObjectRelease(v95);
LABEL_40:
      swift_errorRelease(v110);
      goto LABEL_45;
    }
    v29 = 0;
    v30 = 255;
    a5 = v90;
    a3 = v92;
    v31 = v95;
    v7 = a7;
    v10 = v89;
    v15 = v85;
    a6 = v87;
    goto LABEL_21;
  }
  v32 = *a1;
  v31 = _swiftEmptyArrayStorage;
  if (*a1 == -805638658 || v32 == -17958193)
  {
    v30 = 0;
    v29 = a1;
LABEL_21:
    v32 = *v12;
    goto LABEL_22;
  }
  v29 = 0;
  v15 = 1;
  v30 = 255;
LABEL_22:
  if (v32 == -822415874 || v32 == -17958194)
  {
    if ((v15 & 1) != 0)
    {
      v34 = 1;
LABEL_38:
      swift_bridgeObjectRelease(v31);
      sub_1000E8C68((uint64_t)v12, v34, a3, v10, a5, a6 & 1, v7);
LABEL_45:
      v70 = a3;
      return swift_bridgeObjectRelease(v70);
    }
    v95 = v31;
    v40 = sub_1000122F8();
    v41 = swift_allocError(&type metadata for KMError, v40, 0, 0);
    v43 = v41;
    v44 = 0;
    *(_QWORD *)v42 = 0xD00000000000002BLL;
    v45 = 0x800000010012C4D0;
    v12 = v29;
    goto LABEL_31;
  }
  v12 = v29;
  if (v30 != 255)
  {
LABEL_37:
    v34 = 0;
    goto LABEL_38;
  }
LABEL_27:
  v35 = v31[2];
  if (v35 > 1)
  {
    v36 = v31;
    v37 = sub_1000122F8();
    v38 = swift_allocError(&type metadata for KMError, v37, 0, 0);
    *(_QWORD *)v39 = v36;
    *(_OWORD *)(v39 + 8) = 0u;
    *(_OWORD *)(v39 + 24) = 0u;
    *(_OWORD *)(v39 + 40) = 0u;
    *(_OWORD *)(v39 + 56) = 0u;
    *(_BYTE *)(v39 + 72) = 0;
LABEL_44:
    swift_willThrow(v38);
    goto LABEL_45;
  }
  if (v35 != 1)
  {
    swift_bridgeObjectRelease(v31);
    v71 = sub_1000122F8();
    v38 = swift_allocError(&type metadata for KMError, v71, 0, 0);
    *(_QWORD *)v72 = 0xD000000000000040;
    *(_QWORD *)(v72 + 8) = 0x800000010012C480;
    *(_OWORD *)(v72 + 16) = 0u;
    *(_OWORD *)(v72 + 32) = 0u;
    *(_OWORD *)(v72 + 48) = 0u;
    *(_QWORD *)(v72 + 64) = 0;
    *(_BYTE *)(v72 + 72) = 50;
    goto LABEL_44;
  }
  v58 = v31[4];
  v59 = v31[5];
  v94 = a3;
  v60 = v31[6];
  v61 = v31[7];
  v62 = v31[8];
  v63 = v31[9];
  v64 = v31[10];
  v65 = v31[11];
  v96 = v31[12];
  v99 = *((_BYTE *)v31 + 104);
  v66 = v31;
  sub_1000515CC(v58, v59, v60, v61, v62, v63, v64, v65, v96, v99);
  swift_bridgeObjectRelease(v66);
  v67 = sub_1000122F8();
  v68 = swift_allocError(&type metadata for KMError, v67, 0, 0);
  *(_QWORD *)v69 = v58;
  *(_QWORD *)(v69 + 8) = v59;
  *(_QWORD *)(v69 + 16) = v60;
  *(_QWORD *)(v69 + 24) = v61;
  *(_QWORD *)(v69 + 32) = v62;
  *(_QWORD *)(v69 + 40) = v63;
  *(_QWORD *)(v69 + 48) = v64;
  *(_QWORD *)(v69 + 56) = v65;
  *(_QWORD *)(v69 + 64) = v96;
  *(_BYTE *)(v69 + 72) = v99;
  swift_willThrow(v68);
  v70 = v94;
  return swift_bridgeObjectRelease(v70);
}

_DWORD *sub_1000E394C(int *a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  BOOL v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  int v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *result;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  _QWORD *v74;
  int *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  _QWORD v87[2];
  unsigned int v88;
  unsigned __int8 v89;

  v3 = a1;
  v4 = a2 - (_QWORD)a1;
  if (a1)
    v5 = v4 < 32;
  else
    v5 = 1;
  v6 = v5;
  if (v5)
  {
    v7 = sub_1000122F8();
    v8 = swift_allocError(&type metadata for KMError, v7, 0, 0);
    *(_QWORD *)v9 = 0xD000000000000033;
    *(_QWORD *)(v9 + 8) = 0x800000010012C400;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_QWORD *)(v9 + 64) = 0;
    *(_BYTE *)(v9 + 72) = 24;
    swift_willThrow(v8);
    v87[0] = v8;
    swift_errorRetain(v8);
    v10 = sub_100005C88(&qword_10015AB50);
    if (!swift_dynamicCast(&v77, v87, v10, &type metadata for KMError, 0))
      return (_DWORD *)swift_errorRelease(v87[0]);
    v62 = v7;
    v63 = v6;
    swift_errorRelease(v8);
    v11 = v82;
    v13 = v83;
    v12 = v84;
    v14 = v85;
    v15 = v86;
    v69 = v78;
    v71 = v77;
    v65 = v80;
    v67 = v79;
    v64 = v81;
    sub_1000515CC(v77, v78, v79, v80, v81, v82, v83, v84, v85, v86);
    v16 = sub_10008EC3C(0, 1, 1, _swiftEmptyArrayStorage);
    v18 = v16[2];
    v17 = v16[3];
    v74 = v16;
    if (v18 >= v17 >> 1)
      v74 = sub_10008EC3C((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
    v74[2] = v18 + 1;
    v19 = &v74[10 * v18];
    v19[4] = v71;
    v19[5] = v69;
    v19[6] = v67;
    v19[7] = v65;
    v19[8] = v64;
    v19[9] = v11;
    v19[10] = v13;
    v19[11] = v12;
    v19[12] = v14;
    *((_BYTE *)v19 + 104) = v15;
    sub_1000391DC(v71, v69, v67, v65, v64, v11, v13, v12, v14, v15);
    swift_errorRelease(v87[0]);
    if (!v3 || v4 < 28)
    {
      v27 = swift_allocError(&type metadata for KMError, v62, 0, 0);
      v29 = v27;
      v20 = 0;
      *(_QWORD *)v28 = 0xD000000000000033;
      v31 = 0x800000010012C440;
      v30 = 255;
      v23 = v74;
LABEL_27:
      *(_QWORD *)(v28 + 8) = v31;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 32) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_QWORD *)(v28 + 64) = 0;
      *(_BYTE *)(v28 + 72) = 24;
      swift_willThrow(v27);
      v87[0] = v29;
      swift_errorRetain(v29);
      v32 = sub_100005C88(&qword_10015AB50);
      if (swift_dynamicCast(&v77, v87, v32, &type metadata for KMError, 0))
      {
        v72 = v30;
        swift_errorRelease(v29);
        v33 = v80;
        v34 = v81;
        v35 = v82;
        v36 = v83;
        v37 = v84;
        v38 = v85;
        v39 = v86;
        v68 = v78;
        v70 = v77;
        v66 = v79;
        sub_1000515CC(v77, v78, v79, v80, v81, v82, v83, v84, v85, v86);
        v75 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
          v23 = sub_10008EC3C(0, v23[2] + 1, 1, v23);
        v41 = v23[2];
        v40 = v23[3];
        v42 = v23;
        if (v41 >= v40 >> 1)
          v42 = sub_10008EC3C((_QWORD *)(v40 > 1), v41 + 1, 1, v23);
        v42[2] = v41 + 1;
        v23 = v42;
        v43 = &v42[10 * v41];
        v43[4] = v70;
        v43[5] = v68;
        v43[6] = v66;
        v43[7] = v33;
        v43[8] = v34;
        v43[9] = v35;
        v43[10] = v36;
        v43[11] = v37;
        v43[12] = v38;
        *((_BYTE *)v43 + 104) = v39;
        sub_1000391DC(v70, v68, v66, v33, v34, v35, v36, v37, v38, v39);
        swift_errorRelease(v87[0]);
        v21 = 0;
        v20 = v75;
        v22 = v72;
        goto LABEL_33;
      }
      swift_bridgeObjectRelease(v23);
      return (_DWORD *)swift_errorRelease(v87[0]);
    }
    v20 = 0;
    v21 = 0;
    v22 = 255;
    v23 = v74;
    v6 = v63;
    goto LABEL_21;
  }
  v21 = v2;
  v24 = *a1;
  v23 = _swiftEmptyArrayStorage;
  if (*a1 == -805638658 || v24 == -17958193)
  {
    v22 = 0;
    v20 = a1;
LABEL_21:
    v24 = *v3;
    goto LABEL_22;
  }
  v20 = 0;
  v6 = 1;
  v22 = 255;
LABEL_22:
  if (v24 == -822415874 || v24 == -17958194)
  {
    if ((v6 & 1) != 0)
      goto LABEL_37;
    v26 = sub_1000122F8();
    v27 = swift_allocError(&type metadata for KMError, v26, 0, 0);
    v29 = v27;
    v30 = 0;
    *(_QWORD *)v28 = 0xD00000000000002BLL;
    v31 = 0x800000010012C4D0;
    goto LABEL_27;
  }
LABEL_33:
  if (v22 == 255)
  {
    v44 = v23[2];
    if (v44 <= 1)
    {
      if (v44 == 1)
      {
        v49 = v23;
        v50 = v23[4];
        v51 = v49[5];
        v52 = v49[6];
        v53 = v49[7];
        v54 = v49[8];
        v55 = v49[9];
        v56 = v49[10];
        v57 = v49[11];
        v73 = v49[12];
        v76 = *((_BYTE *)v49 + 104);
        sub_1000515CC(v50, v51, v52, v53, v54, v55, v56, v57, v73, v76);
        swift_bridgeObjectRelease(v49);
        v58 = sub_1000122F8();
        v46 = swift_allocError(&type metadata for KMError, v58, 0, 0);
        *(_QWORD *)v60 = v50;
        *(_QWORD *)(v60 + 8) = v51;
        *(_QWORD *)(v60 + 16) = v52;
        *(_QWORD *)(v60 + 24) = v53;
        *(_QWORD *)(v60 + 32) = v54;
        *(_QWORD *)(v60 + 40) = v55;
        *(_QWORD *)(v60 + 48) = v56;
        *(_QWORD *)(v60 + 56) = v57;
        *(_QWORD *)(v60 + 64) = v73;
        v61 = v76;
      }
      else
      {
        swift_bridgeObjectRelease(v23);
        v59 = sub_1000122F8();
        v46 = swift_allocError(&type metadata for KMError, v59, 0, 0);
        *(_QWORD *)v60 = 0xD000000000000040;
        *(_QWORD *)(v60 + 8) = 0x800000010012C480;
        *(_OWORD *)(v60 + 16) = 0u;
        *(_OWORD *)(v60 + 32) = 0u;
        *(_OWORD *)(v60 + 48) = 0u;
        *(_QWORD *)(v60 + 64) = 0;
        v61 = 50;
      }
      *(_BYTE *)(v60 + 72) = v61;
    }
    else
    {
      v45 = sub_1000122F8();
      v46 = swift_allocError(&type metadata for KMError, v45, 0, 0);
      *(_QWORD *)v47 = v23;
      *(_OWORD *)(v47 + 8) = 0u;
      *(_OWORD *)(v47 + 24) = 0u;
      *(_OWORD *)(v47 + 40) = 0u;
      *(_OWORD *)(v47 + 56) = 0u;
      *(_BYTE *)(v47 + 72) = 0;
    }
    return (_DWORD *)swift_willThrow(v46);
  }
  v3 = v20;
LABEL_37:
  swift_bridgeObjectRelease(v23);
  result = sub_1000E1D60((uint64_t)v3, (uint64_t)&v88);
  if (!v21)
  {
    LOBYTE(v77) = v89;
    return (_DWORD *)(v88 | ((unint64_t)v89 << 32));
  }
  return result;
}

uint64_t sub_1000E3F5C(int *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  int v36;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v98;
  uint64_t v99;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  _QWORD v112[2];
  int v113;
  unsigned int v114;

  v9 = a8;
  v11 = a6;
  v13 = a4;
  v14 = a1;
  v15 = a2 - (_QWORD)a1;
  if (a1)
    v16 = v15 < 32;
  else
    v16 = 1;
  v17 = v16;
  if (v16)
  {
    v113 = v17;
    v20 = (uint64_t)&type metadata for KMError;
    v84 = sub_1000122F8();
    v21 = swift_allocError(&type metadata for KMError, v84, 0, 0);
    *(_QWORD *)v22 = 0xD000000000000033;
    *(_QWORD *)(v22 + 8) = 0x800000010012C400;
    *(_OWORD *)(v22 + 16) = 0u;
    *(_OWORD *)(v22 + 32) = 0u;
    *(_OWORD *)(v22 + 48) = 0u;
    *(_QWORD *)(v22 + 64) = 0;
    *(_BYTE *)(v22 + 72) = 24;
    swift_willThrow(v21);
    v112[0] = v21;
    swift_errorRetain(v21);
    v23 = sub_100005C88(&qword_10015AB50);
    if (!swift_dynamicCast(&v102, v112, v23, &type metadata for KMError, 0))
    {
      swift_errorRelease(v112[0]);
      swift_release(a5);
      v38 = a7;
      v39 = a8;
      goto LABEL_47;
    }
    v86 = a4;
    v87 = a5;
    v90 = a7;
    v93 = a8;
    swift_errorRelease(v21);
    v24 = v107;
    v25 = v108;
    v26 = v109;
    v27 = v110;
    v28 = v111;
    v80 = v103;
    v82 = v102;
    v77 = v105;
    v78 = v104;
    v76 = v106;
    sub_1000515CC(v102, v103, v104, v105, v106, v107, v108, v109, v110, v111);
    v29 = sub_10008EC3C(0, 1, 1, _swiftEmptyArrayStorage);
    v31 = v29[2];
    v30 = v29[3];
    v20 = v31 + 1;
    if (v31 >= v30 >> 1)
      v29 = sub_10008EC3C((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
    v29[2] = v20;
    v96 = v29;
    v32 = &v29[10 * v31];
    v32[4] = v82;
    v32[5] = v80;
    v32[6] = v78;
    v32[7] = v77;
    v32[8] = v76;
    v32[9] = v24;
    v32[10] = v25;
    v32[11] = v26;
    v32[12] = v27;
    *((_BYTE *)v32 + 104) = v28;
    sub_1000391DC(v82, v80, v78, v77, v76, v24, v25, v26, v27, v28);
    swift_errorRelease(v112[0]);
    if (!v14 || v15 < 28)
    {
      v45 = swift_allocError(&type metadata for KMError, v84, 0, 0);
      v47 = v45;
      v14 = 0;
      *(_QWORD *)v46 = 0xD000000000000033;
      v49 = 0x800000010012C440;
      v48 = 255;
      a7 = v90;
      v9 = v93;
      v13 = v86;
      a5 = v87;
      v11 = a6;
      goto LABEL_32;
    }
    v20 = 0;
    v33 = 0;
    v34 = 255;
    a7 = v90;
    v9 = v93;
    v13 = v86;
    a5 = v87;
    v35 = v96;
    v11 = a6;
    LOBYTE(v17) = v113;
    goto LABEL_21;
  }
  v33 = v8;
  v36 = *a1;
  v35 = _swiftEmptyArrayStorage;
  if (*a1 == -805638658 || v36 == -17958193)
  {
    v34 = 0;
    v20 = (uint64_t)a1;
LABEL_21:
    v36 = *v14;
    goto LABEL_23;
  }
  v20 = 0;
  LOBYTE(v17) = 1;
  v34 = 255;
LABEL_23:
  if (v36 == -822415874 || v36 == -17958194)
  {
    if ((v17 & 1) != 0)
    {
      v20 = 1;
      goto LABEL_39;
    }
    v96 = v35;
    v44 = sub_1000122F8();
    v45 = swift_allocError(&type metadata for KMError, v44, 0, 0);
    v47 = v45;
    v48 = 0;
    *(_QWORD *)v46 = 0xD00000000000002BLL;
    v49 = 0x800000010012C4D0;
    v14 = (int *)v20;
LABEL_32:
    *(_QWORD *)(v46 + 8) = v49;
    *(_OWORD *)(v46 + 16) = 0u;
    *(_OWORD *)(v46 + 32) = 0u;
    *(_OWORD *)(v46 + 48) = 0u;
    *(_QWORD *)(v46 + 64) = 0;
    *(_BYTE *)(v46 + 72) = 24;
    swift_willThrow(v45);
    v112[0] = v47;
    swift_errorRetain(v47);
    v50 = sub_100005C88(&qword_10015AB50);
    if (!swift_dynamicCast(&v102, v112, v50, &type metadata for KMError, 0))
    {
      swift_bridgeObjectRelease(v96);
      swift_errorRelease(v112[0]);
      goto LABEL_46;
    }
    v113 = v48;
    v98 = v11;
    v88 = a5;
    v91 = a7;
    swift_errorRelease(v47);
    v51 = v102;
    v52 = v103;
    v53 = v104;
    v54 = v105;
    v55 = v110;
    v56 = v111;
    v83 = v107;
    v85 = v106;
    v79 = v109;
    v81 = v108;
    sub_1000515CC(v102, v103, v104, v105, v106, v107, v108, v109, v110, v111);
    v94 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) != 0)
      v57 = v96;
    else
      v57 = sub_10008EC3C(0, v96[2] + 1, 1, v96);
    v59 = v57[2];
    v58 = v57[3];
    if (v59 >= v58 >> 1)
      v57 = sub_10008EC3C((_QWORD *)(v58 > 1), v59 + 1, 1, v57);
    v57[2] = v59 + 1;
    v60 = &v57[10 * v59];
    v60[4] = v51;
    v60[5] = v52;
    v60[6] = v53;
    v60[7] = v54;
    v60[8] = v85;
    v60[9] = v83;
    v60[10] = v81;
    v60[11] = v79;
    v60[12] = v55;
    *((_BYTE *)v60 + 104) = v56;
    v75 = v55;
    v20 = (uint64_t)v57;
    sub_1000391DC(v51, v52, v53, v54, v85, v83, v81, v79, v75, v56);
    swift_errorRelease(v112[0]);
    v35 = (_QWORD *)v20;
    v33 = 0;
    a7 = v91;
    v9 = v94;
    a5 = v88;
    v11 = v98;
    if (v113 != 255)
      goto LABEL_38;
    goto LABEL_28;
  }
  v14 = (int *)v20;
  if (v34 == 255)
  {
LABEL_28:
    v40 = v35[2];
    if (v40 > 1)
    {
      v20 = (uint64_t)v35;
      v41 = sub_1000122F8();
      v42 = swift_allocError(&type metadata for KMError, v41, 0, 0);
      *(_QWORD *)v43 = v20;
      *(_OWORD *)(v43 + 8) = 0u;
      *(_OWORD *)(v43 + 24) = 0u;
      *(_OWORD *)(v43 + 40) = 0u;
      *(_OWORD *)(v43 + 56) = 0u;
      *(_BYTE *)(v43 + 72) = 0;
LABEL_45:
      swift_willThrow(v42);
      goto LABEL_46;
    }
    if (v40 != 1)
    {
      swift_bridgeObjectRelease(v35);
      v72 = sub_1000122F8();
      v42 = swift_allocError(&type metadata for KMError, v72, 0, 0);
      *(_QWORD *)v73 = 0xD000000000000040;
      *(_QWORD *)(v73 + 8) = 0x800000010012C480;
      *(_OWORD *)(v73 + 16) = 0u;
      *(_OWORD *)(v73 + 32) = 0u;
      *(_OWORD *)(v73 + 48) = 0u;
      *(_QWORD *)(v73 + 64) = 0;
      *(_BYTE *)(v73 + 72) = 50;
      goto LABEL_45;
    }
    v20 = v35[4];
    v61 = v35[5];
    v92 = a7;
    v95 = v9;
    v62 = v35[6];
    v63 = v35[7];
    v89 = a5;
    v64 = v35[8];
    v65 = v35[9];
    v66 = v35[10];
    v67 = v35[11];
    v99 = v35[12];
    v101 = *((_BYTE *)v35 + 104);
    v68 = v35;
    sub_1000515CC(v20, v61, v62, v63, v64, v65, v66, v67, v99, v101);
    swift_bridgeObjectRelease(v68);
    v69 = sub_1000122F8();
    v70 = swift_allocError(&type metadata for KMError, v69, 0, 0);
    *(_QWORD *)v71 = v20;
    *(_QWORD *)(v71 + 8) = v61;
    *(_QWORD *)(v71 + 16) = v62;
    *(_QWORD *)(v71 + 24) = v63;
    *(_QWORD *)(v71 + 32) = v64;
    *(_QWORD *)(v71 + 40) = v65;
    *(_QWORD *)(v71 + 48) = v66;
    *(_QWORD *)(v71 + 56) = v67;
    *(_QWORD *)(v71 + 64) = v99;
    *(_BYTE *)(v71 + 72) = v101;
    swift_willThrow(v70);
    swift_release(v89);
    v38 = v92;
    v39 = v95;
LABEL_47:
    sub_100011F40(v38, v39);
    return v20;
  }
LABEL_38:
  v20 = 0;
LABEL_39:
  swift_bridgeObjectRelease(v35);
  sub_1000E5A64((uint64_t)v14, v20, a3, v13, a5, v11, a7, v9);
  if (v33)
  {
LABEL_46:
    swift_release(a5);
    v38 = a7;
    v39 = v9;
    goto LABEL_47;
  }
  swift_release(a5);
  v20 = v114;
  sub_100011F40(a7, v9);
  return v20;
}

uint64_t sub_1000E4640(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  int v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;

  v7 = a6;
  v8 = a5;
  v11 = a1;
  v12 = a2 - (_QWORD)a1;
  if (a1)
    v13 = v12 < 32;
  else
    v13 = 1;
  v14 = v13;
  if (v13)
  {
    v85 = sub_1000122F8();
    v16 = swift_allocError(&type metadata for KMError, v85, 0, 0);
    *(_QWORD *)v17 = 0xD000000000000033;
    *(_QWORD *)(v17 + 8) = 0x800000010012C400;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_QWORD *)(v17 + 64) = 0;
    *(_BYTE *)(v17 + 72) = 24;
    swift_willThrow(v16);
    v109 = v16;
    swift_errorRetain(v16);
    v18 = sub_100005C88(&qword_10015AB50);
    if (!swift_dynamicCast(&v98, &v109, v18, &type metadata for KMError, 0))
    {
LABEL_40:
      swift_errorRelease(v109);
LABEL_45:
      v71 = a4;
      return swift_bridgeObjectRelease(v71);
    }
    v75 = v14;
    v87 = a3;
    v89 = a5;
    v90 = a4;
    swift_errorRelease(v16);
    v19 = v103;
    v21 = v104;
    v20 = v105;
    v22 = v106;
    v23 = v107;
    v81 = v99;
    v83 = v98;
    v77 = v101;
    v79 = v100;
    v76 = v102;
    sub_1000515CC(v98, v99, v100, v101, v102, v103, v104, v105, v106, v107);
    v24 = sub_10008EC3C(0, 1, 1, _swiftEmptyArrayStorage);
    v26 = v24[2];
    v25 = v24[3];
    if (v26 >= v25 >> 1)
      v24 = sub_10008EC3C((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
    v24[2] = v26 + 1;
    v93 = v24;
    v27 = &v24[10 * v26];
    v27[4] = v83;
    v27[5] = v81;
    v27[6] = v79;
    v27[7] = v77;
    v27[8] = v76;
    v27[9] = v19;
    v27[10] = v21;
    v27[11] = v20;
    v27[12] = v22;
    *((_BYTE *)v27 + 104) = v23;
    sub_1000391DC(v83, v81, v79, v77, v76, v19, v21, v20, v22, v23);
    swift_errorRelease(v109);
    if (!v11 || v12 < 28)
    {
      v35 = swift_allocError(&type metadata for KMError, v85, 0, 0);
      v37 = v35;
      v28 = 0;
      *(_QWORD *)v36 = 0xD000000000000033;
      v39 = 0x800000010012C440;
      v38 = 255;
      v8 = v89;
      a4 = v90;
      v7 = a6;
      a3 = v87;
      goto LABEL_27;
    }
    v28 = 0;
    v29 = 0;
    v30 = 255;
    v8 = v89;
    a4 = v90;
    v31 = v93;
    v7 = a6;
    a3 = v87;
    v14 = v75;
  }
  else
  {
    v29 = v6;
    v32 = *a1;
    v31 = _swiftEmptyArrayStorage;
    if (*a1 != -805638658 && v32 != -17958193)
    {
      v28 = 0;
      v14 = 1;
      v30 = 255;
      goto LABEL_22;
    }
    v30 = 0;
    v28 = a1;
  }
  v32 = *v11;
LABEL_22:
  if (v32 != -822415874 && v32 != -17958194)
    goto LABEL_33;
  if ((v14 & 1) != 0)
    goto LABEL_37;
  v93 = v31;
  v34 = sub_1000122F8();
  v35 = swift_allocError(&type metadata for KMError, v34, 0, 0);
  v37 = v35;
  v38 = 0;
  *(_QWORD *)v36 = 0xD00000000000002BLL;
  v39 = 0x800000010012C4D0;
LABEL_27:
  *(_QWORD *)(v36 + 8) = v39;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(_QWORD *)(v36 + 64) = 0;
  *(_BYTE *)(v36 + 72) = 24;
  swift_willThrow(v35);
  v109 = v37;
  swift_errorRetain(v37);
  v40 = sub_100005C88(&qword_10015AB50);
  if (!swift_dynamicCast(&v98, &v109, v40, &type metadata for KMError, 0))
  {
    swift_bridgeObjectRelease(v93);
    goto LABEL_40;
  }
  v84 = v38;
  v86 = v28;
  v88 = a3;
  v96 = v7;
  swift_errorRelease(v37);
  v41 = v98;
  v42 = v99;
  v43 = v100;
  v44 = v101;
  v45 = v104;
  v46 = v106;
  v47 = v107;
  v80 = v103;
  v82 = v102;
  v78 = v105;
  sub_1000515CC(v98, v99, v100, v101, v102, v103, v104, v105, v106, v107);
  v91 = a4;
  if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) != 0)
    v48 = v93;
  else
    v48 = sub_10008EC3C(0, v93[2] + 1, 1, v93);
  v50 = v48[2];
  v49 = v48[3];
  if (v50 >= v49 >> 1)
    v48 = sub_10008EC3C((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
  v48[2] = v50 + 1;
  v51 = &v48[10 * v50];
  v51[4] = v41;
  v51[5] = v42;
  v51[6] = v43;
  v51[7] = v44;
  v51[8] = v82;
  v51[9] = v80;
  v51[10] = v45;
  v51[11] = v78;
  v51[12] = v46;
  *((_BYTE *)v51 + 104) = v47;
  v74 = v46;
  v52 = v48;
  sub_1000391DC(v41, v42, v43, v44, v82, v80, v45, v78, v74, v47);
  swift_errorRelease(v109);
  v31 = v52;
  v29 = 0;
  a4 = v91;
  v7 = v96;
  v28 = v86;
  a3 = v88;
  v30 = v84;
LABEL_33:
  if (v30 != 255)
  {
    v11 = v28;
LABEL_37:
    swift_bridgeObjectRelease(v31);
    sub_1000E71E8((uint64_t)v11, a3, a4, v8, v7, (uint64_t)&v108);
    if (!v29)
    {
      swift_bridgeObjectRelease(a4);
      return v108;
    }
    goto LABEL_45;
  }
  v53 = v31[2];
  if (v53 > 1)
  {
    v54 = v31;
    v55 = sub_1000122F8();
    v56 = swift_allocError(&type metadata for KMError, v55, 0, 0);
    *(_QWORD *)v57 = v54;
    *(_OWORD *)(v57 + 8) = 0u;
    *(_OWORD *)(v57 + 24) = 0u;
    *(_OWORD *)(v57 + 40) = 0u;
    *(_OWORD *)(v57 + 56) = 0u;
    *(_BYTE *)(v57 + 72) = 0;
LABEL_44:
    swift_willThrow(v56);
    goto LABEL_45;
  }
  if (v53 != 1)
  {
    swift_bridgeObjectRelease(v31);
    v72 = sub_1000122F8();
    v56 = swift_allocError(&type metadata for KMError, v72, 0, 0);
    *(_QWORD *)v73 = 0xD000000000000040;
    *(_QWORD *)(v73 + 8) = 0x800000010012C480;
    *(_OWORD *)(v73 + 16) = 0u;
    *(_OWORD *)(v73 + 32) = 0u;
    *(_OWORD *)(v73 + 48) = 0u;
    *(_QWORD *)(v73 + 64) = 0;
    *(_BYTE *)(v73 + 72) = 50;
    goto LABEL_44;
  }
  v59 = v31[4];
  v60 = v31[5];
  v92 = a4;
  v61 = v31[6];
  v62 = v31[7];
  v63 = v31[8];
  v64 = v31[9];
  v65 = v31[10];
  v66 = v31[11];
  v94 = v31[12];
  v97 = *((_BYTE *)v31 + 104);
  v67 = v31;
  sub_1000515CC(v59, v60, v61, v62, v63, v64, v65, v66, v94, v97);
  swift_bridgeObjectRelease(v67);
  v68 = sub_1000122F8();
  v69 = swift_allocError(&type metadata for KMError, v68, 0, 0);
  *(_QWORD *)v70 = v59;
  *(_QWORD *)(v70 + 8) = v60;
  *(_QWORD *)(v70 + 16) = v61;
  *(_QWORD *)(v70 + 24) = v62;
  *(_QWORD *)(v70 + 32) = v63;
  *(_QWORD *)(v70 + 40) = v64;
  *(_QWORD *)(v70 + 48) = v65;
  *(_QWORD *)(v70 + 56) = v66;
  *(_QWORD *)(v70 + 64) = v94;
  *(_BYTE *)(v70 + 72) = v97;
  swift_willThrow(v69);
  v71 = v92;
  return swift_bridgeObjectRelease(v71);
}

void sub_1000E4CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1000E4ECCLL);
}

void sub_1000E4EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for Data.Deallocator(0);
  __chkstk_darwin(v5);
  Data._bridgeToObjectiveC()();
  if (a1)
    __asm { BR              X11 }
  __break(1u);
  JUMPOUT(0x1000E50F0);
}

uint64_t sub_1000E5100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;

  result = sub_1000E73E8(a1, a2, a3, a6, a7);
  if (!v7)
    __asm { BR              X10 }
  return result;
}

void sub_1000E5728(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char *v3;
  _QWORD v4[3];

  if (a1)
  {
    v3 = (char *)&loc_1000E57B4 + dword_1000E5A54[a2 >> 62];
    v4[1] = a3;
    v4[2] = v4;
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1000E5A50);
}

void sub_1000E5A64(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = *a3;
  v11 = a3[1];
  v12 = a3[2];
  v13 = a3[3];
  v14 = a3[4];
  *a3 = a4;
  a3[1] = a5;
  a3[2] = a1;
  a3[3] = a2 & 1;
  a3[4] = 0;
  swift_retain(a5);
  sub_1000F1768(v10, v11, v12, v13, v14);
  if (*a3)
    __asm { BR              X11 }
  __break(1u);
  JUMPOUT(0x1000E5B64);
}

uint64_t sub_1000E5B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F17D4(a1, a2, a4);
}

uint64_t sub_1000E5B7C(uint64_t a1, uint64_t (*a2)(_QWORD *))
{
  _QWORD *KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  if (*(_DWORD *)a1 != 25)
    return 2;
  KeyPath = (_QWORD *)swift_getKeyPath(&unk_10011B1F0);
  v5 = sub_1000D6658(KeyPath, a1);
  v7 = v6;
  swift_release(KeyPath);
  if (!String.count.getter(v5, v7))
  {
    swift_bridgeObjectRelease(v7);
    v7 = 0xE600000000000000;
    v5 = 0x3E656E6F6E3CLL;
  }
  sub_100102510(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 24), v5, v7, v10);
  v8 = a2(v10);
  sub_1000F2284((uint64_t)v10);
  return v8;
}

void sub_1000E5C68(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E5CB8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint32_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;

  LOWORD(v6) = v1;
  BYTE2(v6) = BYTE2(v1);
  HIBYTE(v6) = BYTE3(v1);
  v7 = BYTE4(v1);
  v8 = BYTE5(v1);
  v9 = BYTE6(v1);
  v10 = HIBYTE(v1);
  v11 = v0;
  v12 = BYTE2(v0);
  v13 = BYTE3(v0);
  v14 = BYTE4(v0);
  v15 = BYTE5(v0);
  sub_1000E5E7C(&v6, (uint64_t)&v6 + BYTE6(v0), v0, &v5);
  sub_100011F40(v1, v0);
  if (!v2)
    return v5;
  return v3;
}

uint64_t sub_1000E5E7C@<X0>(uint32_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  uint32_t v16;
  uint64_t v17;
  size_t v18;
  fat_arch_64 *v19;
  fat_arch_64 *v20;
  _QWORD *v21;
  cpu_type_t *v22;
  fat_arch_64 *v23;
  _QWORD *v24;
  _QWORD *v25;
  const NXArchInfo *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  Swift::String v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint32_t nfat_arch;
  uint32_t v48;
  size_t v49;
  unint64_t v50;
  fat_arch *v51;
  fat_arch *v52;
  fat_arch *v53;
  cpu_type_t *p_cputype;
  _QWORD *v55;
  _QWORD *v56;
  const NXArchInfo *v57;
  const char *name;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  Swift::String v66;
  void *object;
  Swift::String v68;
  Swift::String v69;
  void *v70;
  Swift::String v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  void *v76;
  _QWORD *v77;
  fat_header fat_header;
  mach_header_64 mh;

  if (!a1 || (v6 = a2 - (_QWORD)a1, a2 - (uint64_t)a1 < 4))
  {
    v7 = sub_1000122F8();
    v8 = swift_allocError(&type metadata for KMError, v7, 0, 0);
    v10 = "Binary not large enough to accommodate magic";
    v11 = 0xD00000000000002CLL;
LABEL_4:
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = (unint64_t)(v10 - 32) | 0x8000000000000000;
LABEL_5:
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_QWORD *)(v9 + 64) = 0;
    *(_BYTE *)(v9 + 72) = 24;
    return swift_willThrow(v8);
  }
  v13 = *a1;
  if ((int)*a1 > -822415875)
  {
    if (v13 > -17958195)
    {
      if (v13 != -17958194)
      {
        v15 = -17958193;
LABEL_41:
        if (v13 == v15)
          __asm { BR              X10 }
        goto LABEL_46;
      }
    }
    else if (v13 != -822415874)
    {
      v15 = -805638658;
      goto LABEL_41;
    }
    __asm { BR              X10 }
  }
  if (v13 <= -889275715)
  {
    if (v13 != -1095041334)
    {
      v14 = -1078264118;
      goto LABEL_15;
    }
LABEL_43:
    if (v6 >= 8)
    {
      nfat_arch = a1[1];
      fat_header.magic = *a1;
      fat_header.nfat_arch = nfat_arch;
      if (v13 == -1095041334)
      {
        j__swap_fat_header(&fat_header, NX_LittleEndian);
        nfat_arch = fat_header.nfat_arch;
      }
      v48 = nfat_arch;
      v49 = 20 * nfat_arch;
      if (v6 >= v49 + 8)
      {
        v77 = a4;
        v51 = (fat_arch *)swift_slowAlloc(v49, -1);
        v52 = v51;
        if (v48)
          memcpy(v51, a1 + 2, v49);
        if (v13 == -1095041334)
          j__swap_fat_arch(v52, v48, NX_LittleEndian);
        v76 = v52;
        if (v48)
        {
          v53 = &v52[v48];
          v21 = _swiftEmptyArrayStorage;
          p_cputype = &v52->cputype;
          do
          {
            v57 = j__NXGetArchInfoFromCpuType(*p_cputype, p_cputype[1]);
            if (v57 && (name = v57->name) != 0)
            {
              v59 = String.init(cString:)(name);
              v61 = v60;
              if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
                v21 = sub_10000C500(0, v21[2] + 1, 1, v21);
              v63 = v21[2];
              v62 = v21[3];
              v64 = v63 + 1;
              if (v63 >= v62 >> 1)
              {
                v75 = sub_10000C500((_QWORD *)(v62 > 1), v63 + 1, 1, v21);
                v64 = v63 + 1;
                v21 = v75;
              }
              v21[2] = v64;
              v65 = &v21[2 * v63];
              v65[4] = v59;
              v56 = v65 + 4;
            }
            else
            {
              *(_QWORD *)&mh.magic = 0x286E776F6E6B6E55;
              *(_QWORD *)&mh.cpusubtype = 0xE800000000000000;
              v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
              object = v66._object;
              String.append(_:)(v66);
              swift_bridgeObjectRelease(object);
              v68._countAndFlagsBits = 44;
              v68._object = (void *)0xE100000000000000;
              String.append(_:)(v68);
              v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
              v70 = v69._object;
              String.append(_:)(v69);
              swift_bridgeObjectRelease(v70);
              v71._countAndFlagsBits = 41;
              v71._object = (void *)0xE100000000000000;
              String.append(_:)(v71);
              v72 = *(_QWORD *)&mh.magic;
              v61 = *(_QWORD *)&mh.cpusubtype;
              if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
                v21 = sub_10000C500(0, v21[2] + 1, 1, v21);
              v74 = v21[2];
              v73 = v21[3];
              if (v74 >= v73 >> 1)
                v21 = sub_10000C500((_QWORD *)(v73 > 1), v74 + 1, 1, v21);
              v21[2] = v74 + 1;
              v55 = &v21[2 * v74];
              v55[4] = v72;
              v56 = v55 + 4;
            }
            v56[1] = v61;
            p_cputype += 5;
          }
          while (p_cputype != (cpu_type_t *)v53);
        }
        else
        {
          v21 = _swiftEmptyArrayStorage;
        }
        goto LABEL_71;
      }
LABEL_50:
      v50 = sub_1000122F8();
      v8 = swift_allocError(&type metadata for KMError, v50, 0, 0);
      v10 = "Binary not large enough to accomodate fat arch headers";
      v11 = 0xD000000000000036;
      goto LABEL_4;
    }
LABEL_44:
    v45 = sub_1000122F8();
    v8 = swift_allocError(&type metadata for KMError, v45, 0, 0);
    *(_QWORD *)v9 = 0xD000000000000030;
    *(_QWORD *)(v9 + 8) = 0x800000010012C830;
    goto LABEL_5;
  }
  if (v13 == -889275714)
    goto LABEL_43;
  v14 = -889275713;
LABEL_15:
  if (v13 != v14)
  {
LABEL_46:
    v46 = sub_1000122F8();
    v8 = swift_allocError(&type metadata for KMError, v46, 0, 0);
    v10 = "Binary does not have valid magic";
    v11 = 0xD000000000000020;
    goto LABEL_4;
  }
  if (v6 < 8)
    goto LABEL_44;
  v77 = a4;
  v16 = a1[1];
  fat_header.magic = *a1;
  fat_header.nfat_arch = v16;
  if (v13 == -1078264118)
  {
    j__swap_fat_header(&fat_header, NX_LittleEndian);
    v16 = fat_header.nfat_arch;
  }
  v17 = v16;
  if (v6 < ((32 * v16) | 8uLL))
    goto LABEL_50;
  v18 = 32 * v16;
  v19 = (fat_arch_64 *)swift_slowAlloc(v18, -1);
  v20 = v19;
  if ((_DWORD)v17)
    memcpy(v19, a1 + 2, v18);
  if (v13 == -1078264118)
    j__swap_fat_arch_64(v20, v17, NX_LittleEndian);
  v76 = v20;
  v21 = _swiftEmptyArrayStorage;
  if ((_DWORD)v17)
  {
    v22 = &v20->cputype;
    v23 = &v20[v17];
    do
    {
      v26 = j__NXGetArchInfoFromCpuType(*v22, v22[1]);
      if (v26 && (v27 = v26->name) != 0)
      {
        v28 = String.init(cString:)(v27);
        v30 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
          v21 = sub_10000C500(0, v21[2] + 1, 1, v21);
        v32 = v21[2];
        v31 = v21[3];
        v33 = v32 + 1;
        if (v32 >= v31 >> 1)
        {
          v44 = sub_10000C500((_QWORD *)(v31 > 1), v32 + 1, 1, v21);
          v33 = v32 + 1;
          v21 = v44;
        }
        v21[2] = v33;
        v34 = &v21[2 * v32];
        v34[4] = v28;
        v25 = v34 + 4;
      }
      else
      {
        *(_QWORD *)&mh.magic = 0x286E776F6E6B6E55;
        *(_QWORD *)&mh.cpusubtype = 0xE800000000000000;
        v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        v36 = v35._object;
        String.append(_:)(v35);
        swift_bridgeObjectRelease(v36);
        v37._countAndFlagsBits = 44;
        v37._object = (void *)0xE100000000000000;
        String.append(_:)(v37);
        v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        v39 = v38._object;
        String.append(_:)(v38);
        swift_bridgeObjectRelease(v39);
        v40._countAndFlagsBits = 41;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        v41 = *(_QWORD *)&mh.magic;
        v30 = *(_QWORD *)&mh.cpusubtype;
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
          v21 = sub_10000C500(0, v21[2] + 1, 1, v21);
        v43 = v21[2];
        v42 = v21[3];
        if (v43 >= v42 >> 1)
          v21 = sub_10000C500((_QWORD *)(v42 > 1), v43 + 1, 1, v21);
        v21[2] = v43 + 1;
        v24 = &v21[2 * v43];
        v24[4] = v41;
        v25 = v24 + 4;
      }
      v25[1] = v30;
      v22 += 8;
    }
    while (v22 != (cpu_type_t *)v23);
  }
LABEL_71:
  result = swift_slowDealloc(v76, -1, -1);
  *v77 = v21;
  return result;
}

void sub_1000E67F0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E685C@<X0>(int a1@<W8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint32_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  __int16 v23;
  char v24;
  char v25;
  char v26;
  char v27;

  if (BYTE6(v1) >= 0x1CuLL)
  {
    if (a1)
    {
      v16 = v7;
      if (a1 == 1)
      {
        v7 = v2 >> 32;
        if (v2 >> 32 < (int)v2)
          __break(1u);
        sub_1000122B4(v5, v4);
        swift_bridgeObjectRetain(v3);
        sub_1000122B4(v2, v1);
        v13 = sub_1000EF6A0((int)v2, v2 >> 32, v1 & 0x3FFFFFFFFFFFFFFFLL, v5, v4, BYTE6(v1), v16, v3, v8);
        if (!v6)
          v7 = v13;
      }
      else
      {
        v14 = *(_QWORD *)(v2 + 24);
        v15 = *(_QWORD *)(v2 + 16);
        sub_1000122B4(v5, v4);
        swift_bridgeObjectRetain(v3);
        sub_1000122B4(v2, v1);
        swift_retain(v2);
        swift_retain(v1 & 0x3FFFFFFFFFFFFFFFLL);
        v7 = sub_1000EF6A0(v15, v14, v1 & 0x3FFFFFFFFFFFFFFFLL, v5, v4, BYTE6(v1), v16, v3, v8);
        swift_release(v1 & 0x3FFFFFFFFFFFFFFFLL);
        swift_release(v2);
      }
      sub_100011F40(v5, v4);
      swift_bridgeObjectRelease(v3);
      sub_100011F40(v2, v1);
    }
    else
    {
      LOWORD(v18) = v2;
      BYTE2(v18) = BYTE2(v2);
      HIBYTE(v18) = BYTE3(v2);
      v19 = BYTE4(v2);
      v20 = BYTE5(v2);
      v21 = BYTE6(v2);
      v22 = HIBYTE(v2);
      v23 = v1;
      v24 = BYTE2(v1);
      v25 = BYTE3(v1);
      v26 = BYTE4(v1);
      v27 = BYTE5(v1);
      sub_1000122B4(v5, v4);
      swift_bridgeObjectRetain(v3);
      sub_1000E6B88(&v18, BYTE6(v1), v7, v3, v8, (uint64_t)&v17);
      sub_100011F40(v5, v4);
      swift_bridgeObjectRelease(v3);
      sub_100011F40(v2, v1);
      if (!v6)
        return v17;
    }
  }
  else
  {
    v9 = sub_1000122F8();
    v10 = swift_allocError(&type metadata for KMError, v9, 0, 0);
    *(_QWORD *)v11 = 0xD00000000000002ELL;
    *(_QWORD *)(v11 + 8) = 0x800000010012BC00;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_QWORD *)(v11 + 64) = 0;
    *(_BYTE *)(v11 + 72) = 24;
    swift_willThrow(v10);
  }
  return v7;
}

uint64_t sub_1000E6B88@<X0>(uint32_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint32_t magic;
  uint32_t v11;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  fat_arch *v18;
  fat_arch *v19;
  uint64_t v20;
  void *v21;
  fat_arch *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  Swift::String v33;
  void *object;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  fat_header fat_header;

  if (!a1)
  {
    v25 = sub_1000122F8();
    v26 = swift_allocError(&type metadata for KMError, v25, 0, 0);
    *(_QWORD *)v27 = 0xD000000000000019;
    *(_QWORD *)(v27 + 8) = 0x800000010012C6F0;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_QWORD *)(v27 + 64) = 0;
    *(_BYTE *)(v27 + 72) = 24;
    return swift_willThrow(v26);
  }
  magic = *a1;
  v11 = a1[1];
  fat_header.magic = magic;
  fat_header.nfat_arch = v11;
  if (magic != -1095041334 && magic != -889275714)
  {
    __chkstk_darwin(a1);
    __asm { BR              X10 }
  }
  v39 = a4;
  v40 = HIDWORD(a5);
  v38 = a3;
  v13 = static os_log_type_t.info.getter(a1);
  v14 = sub_10002687C();
  v15 = (void *)static OS_os_log.default.getter(v14);
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v15, "Binary is fat.", 14, 2, _swiftEmptyArrayStorage);

  v16 = bswap32(v11);
  result = sub_1000EED50(v16, a2);
  if (!v6)
  {
    v18 = (fat_arch *)swift_slowAlloc(20 * v16, -1);
    v19 = v18;
    if (v11)
      v18 = (fat_arch *)memcpy(v18, a1 + 2, 20 * v16);
    if (magic == -1095041334)
    {
      v20 = static os_log_type_t.info.getter(v18);
      v21 = (void *)static OS_os_log.default.getter(v20);
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Swapping big-endian fat header.", 31, 2, _swiftEmptyArrayStorage, v38, v39, v40);

      j__swap_fat_header(&fat_header, NX_LittleEndian);
      j__swap_fat_arch(v19, v16, NX_LittleEndian);
      magic = fat_header.magic;
    }
    if (magic == -889275714)
    {
      v22 = j__NXFindBestFatArch(a5, v40, v19, v16);
      if (v22)
      {
        v23 = *(_QWORD *)&v22->offset;
        *(_QWORD *)&v24 = v23;
        *((_QWORD *)&v24 + 1) = HIDWORD(v23);
        *(_OWORD *)a6 = v24;
        *(_BYTE *)(a6 + 16) = 0;
        return swift_slowDealloc(v19, -1, -1);
      }
      HIDWORD(v42[1]) = -335544320;
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease(0xE000000000000000);
      strcpy((char *)v42, "Cannot find ");
      v33._countAndFlagsBits = sub_1000D3FDC(v38, v39, a5);
      object = v33._object;
      String.append(_:)(v33);
      swift_bridgeObjectRelease(object);
      v35._countAndFlagsBits = 0x20746166206E6920;
      v35._object = (void *)0xEE007972616E6962;
      String.append(_:)(v35);
      v36 = v42[1];
      v37 = sub_1000122F8();
      v30 = swift_allocError(&type metadata for KMError, v37, 0, 0);
      *(_QWORD *)v31 = v42[0];
      *(_QWORD *)(v31 + 8) = v36;
      *(_OWORD *)(v31 + 16) = 0u;
      *(_OWORD *)(v31 + 32) = 0u;
      *(_OWORD *)(v31 + 48) = 0u;
      *(_QWORD *)(v31 + 64) = 0;
      v32 = 16;
    }
    else
    {
      v29 = sub_1000122F8();
      v30 = swift_allocError(&type metadata for KMError, v29, 0, 0);
      *(_QWORD *)v31 = 0xD000000000000022;
      *(_QWORD *)(v31 + 8) = 0x800000010012C720;
      *(_OWORD *)(v31 + 16) = 0u;
      *(_OWORD *)(v31 + 32) = 0u;
      *(_OWORD *)(v31 + 48) = 0u;
      *(_QWORD *)(v31 + 64) = 0;
      v32 = 24;
    }
    *(_BYTE *)(v31 + 72) = v32;
    swift_willThrow(v30);
    return swift_slowDealloc(v19, -1, -1);
  }
  return result;
}

uint64_t sub_1000E71E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v11;
  cpu_type_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  void *object;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v12 = *(_DWORD *)(result + 4);
  v11 = *(_DWORD *)(result + 8);
  if ((*(_DWORD *)result | 0x1000000) == 0xCFFAEDFE)
  {
    if (v12 < 0)
    {
      __break(1u);
    }
    else
    {
      result = sub_1000F23E4(*(_DWORD *)(result + 4));
      if ((result & 0x80000000) == 0)
      {
        if ((v11 & 0x80000000) == 0)
        {
          v12 = result;
          result = sub_1000F23E4(v11);
          if ((result & 0x80000000) == 0)
          {
            v11 = result;
            goto LABEL_7;
          }
LABEL_16:
          __break(1u);
          return result;
        }
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_7:
  if (v12 == (_DWORD)a4)
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = a5;
    *(_BYTE *)(a6 + 16) = 1;
  }
  else
  {
    v13 = sub_1000D4120(v12, v11);
    if (v14 == 1
      || (v15 = (uint64_t)v13, v16 = v14,
                              v17 = sub_1000D3FAC((uint64_t)v13, v14),
                              v19 = v18,
                              sub_100072744(v15, v16),
                              !v19))
    {
      swift_bridgeObjectRelease(0);
      v19 = (void *)0xE700000000000000;
      v17 = 0x6E776F6E6B6E75;
    }
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease(0xE000000000000000);
    strcpy((char *)v28, "Binary is for ");
    HIBYTE(v28[1]) = -18;
    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v19);
    v21._object = (void *)0x800000010012C770;
    v21._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v21);
    v22._countAndFlagsBits = sub_1000D3FDC(a2, a3, a4);
    object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    v24 = v28[1];
    v25 = sub_1000122F8();
    v26 = swift_allocError(&type metadata for KMError, v25, 0, 0);
    *(_QWORD *)v27 = v28[0];
    *(_QWORD *)(v27 + 8) = v24;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_QWORD *)(v27 + 64) = 0;
    *(_BYTE *)(v27 + 72) = 16;
    return swift_willThrow(v26);
  }
  return result;
}

uint64_t sub_1000E73E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  sub_1000E67F0(a4, a5);
  if (!v5)
    __asm { BR              X10 }
  return a2;
}

uint64_t sub_1000E7A30(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return ((uint64_t (*)(void))((char *)&loc_1000E7A4C + *((int *)qword_1000E7B00 + (a3 >> 62))))();
}

uint64_t sub_1000E7A5C()
{
  unsigned int v0;

  return ((uint64_t (*)(void))((char *)&loc_1000E7A6C + *((int *)qword_1000E7B10 + v0)))();
}

uint64_t sub_1000E7A7C@<X0>(unsigned int a1@<W0>, uint64_t a2@<X3>, unsigned int a3@<W8>)
{
  unsigned int v3;

  if (BYTE6(a2) < v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a3 < v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a3 >= BYTE6(a2))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a1 > (unint64_t)(a3 + 1))
  {
LABEL_9:
    __break(1u);
    JUMPOUT(0x1000E7AF4);
  }
  return Data._Representation.subscript.getter();
}

uint64_t sub_1000E7B20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  void *v8;

  if (&_compression_stream_identify_algorithm)
    __asm { BR              X10 }
  v6 = static os_log_type_t.error.getter(a1);
  v7 = sub_10002687C();
  v8 = (void *)static OS_os_log.default.getter(v7);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v8, "warning: libcompression not linked; returning existing data.",
    60,
    2,
    _swiftEmptyArrayStorage);

  a3[3] = (uint64_t)&type metadata for Data;
  a3[4] = (uint64_t)&off_10014F688;
  *a3 = a1;
  a3[1] = a2;
  return sub_1000122B4(a1, a2);
}

uint64_t sub_1000E7DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sub_1000E73E8(a1, a2, a3, a9, a10);
  if (!v10)
    __asm { BR              X9 }
  return a6;
}

uint64_t sub_1000E82F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if (a1)
  {
    v19 = 0;
    macho_find_symtab();
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17 = 0xD000000000000020;
    v18 = 0x800000010012C520;
    v7 = a2;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17 = 0xD00000000000001CLL;
    v18 = 0x800000010012C500;
    v7 = a2;
  }
  v8._countAndFlagsBits = sub_1000D3FDC(v7, a3, a4);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = 11817;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11 = v18;
  v12 = sub_1000122F8();
  v13 = swift_allocError(&type metadata for KMError, v12, 0, 0);
  *(_QWORD *)v14 = v17;
  *(_QWORD *)(v14 + 8) = v11;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_QWORD *)(v14 + 64) = 0;
  *(_BYTE *)(v14 + 72) = 24;
  return swift_willThrow(v13);
}

uint64_t sub_1000E88EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  sub_1000E73E8(a2, a3, a4, a7, a8);
  if (!v8)
  {
    v11 = v10;
    v13 = sub_1000E1364((uint64_t)_swiftEmptyArrayStorage);
    __chkstk_darwin(v13);
    __asm { BR              X10 }
  }
  return a1;
}

uint64_t sub_1000E8C68(uint64_t result, char a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t section_by_name_64;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t section_by_name;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;

  v64 = result;
  v7 = *(_QWORD *)(a3 + 16);
  if (!v7)
    return result;
  if ((a6 & 1) != 0)
    a5 = 0;
  v62 = a5;
  swift_bridgeObjectRetain(a3);
  v61 = a3;
  for (i = (uint64_t *)(a3 + 56); ; i += 4)
  {
    v15 = a4;
    v16 = *(i - 2);
    v17 = *(i - 1);
    v18 = *i;
    v67 = *(i - 3);
    v19 = String.utf8CString.getter(v67);
    v20 = v19 + 32;
    v21 = v17;
    v22 = String.utf8CString.getter(v17);
    v23 = v22 + 32;
    v68 = v16;
    swift_bridgeObjectRetain(v16);
    v69 = v18;
    v24 = swift_bridgeObjectRetain(v18);
    if ((a2 & 1) != 0)
    {
      section_by_name = macho_get_section_by_name(v64, v20, v23, v24);
      swift_release(v19);
      swift_release(v22);
      a4 = v15;
      if (!section_by_name)
      {
LABEL_24:
        v46 = *a4;
        swift_bridgeObjectRetain(*a4);
        v47 = sub_1000EC268(v67, v16, v21, v69);
        v49 = v48;
        swift_bridgeObjectRelease(v46);
        if ((v49 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
          v51 = *a4;
          v71 = *a4;
          *a4 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1000ED970();
            v51 = v71;
          }
          v52 = *(_QWORD *)(v51 + 48) + 32 * v47;
          v53 = *(_QWORD *)(v52 + 8);
          swift_bridgeObjectRelease(*(_QWORD *)(v52 + 24));
          swift_bridgeObjectRelease(v53);
          sub_1000ED0C0(v47, v51);
          v54 = *a4;
          *a4 = v51;
          swift_bridgeObjectRelease(v69);
          swift_bridgeObjectRelease(v16);
          v55 = v54;
        }
        else
        {
          swift_bridgeObjectRelease(v69);
          v55 = v16;
        }
        swift_bridgeObjectRelease(v55);
        goto LABEL_8;
      }
      v26 = v62;
      if (v62 < 0)
        goto LABEL_40;
      v28 = v21;
      v29 = (unsigned int *)(section_by_name + 40);
      v27 = *(unsigned int *)(section_by_name + 36);
    }
    else
    {
      section_by_name_64 = macho_get_section_by_name_64(v64, v20, v23, v24);
      swift_release(v19);
      swift_release(v22);
      a4 = v15;
      if (!section_by_name_64)
        goto LABEL_24;
      v26 = v62;
      if (v62 < 0)
        goto LABEL_41;
      v27 = *(_QWORD *)(section_by_name_64 + 40);
      if (v27 < 0)
        goto LABEL_42;
      v28 = v21;
      v29 = (unsigned int *)(section_by_name_64 + 48);
    }
    v31 = *v29 - v26;
    v32 = a7 + v31;
    if (__OFADD__(a7, v31))
      break;
    v66 = v7;
    v33 = v32 + v27;
    if (__OFADD__(v32, v27))
      goto LABEL_38;
    v34 = swift_isUniquelyReferenced_nonNull_native(*a4);
    v35 = *a4;
    v70 = (_QWORD *)*a4;
    *a4 = 0x8000000000000000;
    v37 = sub_1000EC268(v67, v68, v28, v69);
    v38 = *(_QWORD *)(v35 + 16);
    v39 = (v36 & 1) == 0;
    v40 = v38 + v39;
    if (__OFADD__(v38, v39))
      goto LABEL_39;
    v41 = v36;
    if (*(_QWORD *)(v35 + 24) >= v40)
    {
      if ((v34 & 1) == 0)
        sub_1000ED970();
      v42 = v68;
      v45 = v70;
      if ((v41 & 1) == 0)
        goto LABEL_31;
    }
    else
    {
      sub_1000ECB64(v40, v34);
      v42 = v68;
      v43 = sub_1000EC268(v67, v68, v28, v69);
      if ((v41 & 1) != (v44 & 1))
        goto LABEL_44;
      v37 = v43;
      v45 = v70;
      if ((v41 & 1) == 0)
      {
LABEL_31:
        v45[(v37 >> 6) + 8] |= 1 << v37;
        v56 = (uint64_t *)(v45[6] + 32 * v37);
        *v56 = v67;
        v56[1] = v42;
        v56[2] = v28;
        v13 = v69;
        v56[3] = v69;
        v57 = v45[7] + 24 * v37;
        *(_QWORD *)v57 = v32;
        *(_QWORD *)(v57 + 8) = v33;
        *(_BYTE *)(v57 + 16) = 0;
        v58 = v45[2];
        v59 = __OFADD__(v58, 1);
        v60 = v58 + 1;
        if (v59)
          goto LABEL_43;
        v45[2] = v60;
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v69);
        goto LABEL_7;
      }
    }
    v12 = v45[7] + 24 * v37;
    *(_QWORD *)v12 = v32;
    *(_QWORD *)(v12 + 8) = v33;
    *(_BYTE *)(v12 + 16) = 0;
    v13 = v69;
LABEL_7:
    v14 = *a4;
    *a4 = (uint64_t)v45;
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v14);
    v7 = v66;
LABEL_8:
    if (!--v7)
      return swift_bridgeObjectRelease(v61);
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MachOSectionName);
  __break(1u);
  return result;
}

uint64_t sub_1000E9060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  __int128 v16;
  char *v17;
  uint64_t v18;

  v8 = type metadata accessor for Data.Deallocator(0);
  v9 = __chkstk_darwin(v8);
  v18 = a1;
  if (a1)
  {
    v11 = (char *)&loc_1000E90EC + *((int *)qword_1000E9850 + (a3 >> 62));
    v17 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    __asm { BR              X9 }
  }
  v12 = static os_log_type_t.error.getter(v9);
  v13 = sub_10002687C();
  v14 = (void *)static OS_os_log.default.getter(v13);
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v14, "Cannot decompress: Invalid buffer. Returning existing data", 58, 2, _swiftEmptyArrayStorage);

  a4[3] = (uint64_t)&type metadata for Data;
  a4[4] = (uint64_t)&off_10014F688;
  *a4 = a2;
  a4[1] = a3;
  return sub_1000122B4(a2, a3);
}

uint64_t compression_algorithm.description.getter(int a1)
{
  uint64_t result;
  Swift::String v3;
  void *object;

  result = 0x6573667A6CLL;
  if (a1 > 2208)
  {
    if (a1 == 2209 || a1 == 2305)
      return result;
    if (a1 == 2304)
      return 1853258348;
LABEL_11:
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
    object = v3._object;
    String.append(_:)(v3);
    swift_bridgeObjectRelease(object);
    return 0x2065646F6328;
  }
  if ((a1 - 256) < 2)
    return 3439212;
  if (a1 != 2049 && a1 != 2193)
    goto LABEL_11;
  return result;
}

void sub_1000E995C(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;

  if (&_compression_stream_identify_algorithm)
  {
    v5 = a1;
    v6 = compression_encode_scratch_buffer_size((compression_algorithm)a1);
    v7 = swift_slowAlloc(v6, -1);
    v8 = static os_log_type_t.info.getter(v7);
    v9 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_10010F050;
    v11 = compression_algorithm.description.getter(v5);
    v13 = v12;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 64) = sub_100026838();
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 40) = v13;
    v14 = sub_10002687C();
    v15 = (void *)static OS_os_log.default.getter(v14);
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v15, "Compressing data with %{public}s", 32, 2, v10);
    swift_bridgeObjectRelease(v10);

    __asm { BR              X10 }
  }
  v16 = static os_log_type_t.error.getter(a1);
  v17 = sub_10002687C();
  v18 = (void *)static OS_os_log.default.getter(v17);
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v18, "warning: libcompression not linked; not compressing.",
    52,
    2,
    _swiftEmptyArrayStorage);

  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
}

uint64_t sub_1000E9C84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  void *v9;

  if (a1)
    __asm { BR              X9 }
  v7 = static os_log_type_t.error.getter(0);
  v8 = sub_10002687C();
  v9 = (void *)static OS_os_log.default.getter(v8);
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v9, "Cannot compress: Invalid buffer. Returning existing data", 56, 2, _swiftEmptyArrayStorage);

  a4[3] = (uint64_t)&type metadata for Data;
  a4[4] = (uint64_t)&off_10014F688;
  *a4 = a2;
  a4[1] = a3;
  return sub_1000122B4(a2, a3);
}

double sub_1000E9EAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, size_t src_size, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint8_t *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  double result;
  uint64_t v48;
  void *v49;
  int v50;
  uint64_t v51;
  size_t v52;
  const uint8_t *v53;
  void *v54;

  v40 = compression_encode_buffer(v38, v37, v53, v52, v54, (compression_algorithm)*(_DWORD *)(v39 - 84));
  if (!v40)
  {
    v48 = static os_log_type_t.error.getter(0);
    v49 = (void *)static OS_os_log.default.getter(v48);
    os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "Compression error (encoding buffer returned 0 size!)", 52, 2, _swiftEmptyArrayStorage);

    *(_QWORD *)(v51 + 32) = 0;
    result = 0.0;
    *(_OWORD *)v51 = 0u;
    *(_OWORD *)(v51 + 16) = 0u;
    return result;
  }
  if (v37 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (__OFADD__(v36, 1))
  {
LABEL_8:
    __break(1u);
    JUMPOUT(0x1000EA050);
  }
  v41 = v40;
  if (v40 >= v37)
    JUMPOUT(0x1000E9DF4);
  v42 = static os_log_type_t.info.getter(v40);
  v43 = swift_allocObject(v34, 72, 7);
  *(_OWORD *)(v43 + 16) = xmmword_10010F050;
  *(_QWORD *)(v43 + 56) = v33;
  *(_QWORD *)(v43 + 64) = v35;
  *(_QWORD *)(v43 + 32) = v41;
  v44 = (void *)static OS_os_log.default.getter(v43);
  os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v44, "Compressed data: %d bytes.", v50);
  swift_bridgeObjectRelease(v43);

  v45 = sub_1000DA0E8(v38, v41);
  *(_QWORD *)(v51 + 24) = &type metadata for Data;
  *(_QWORD *)(v51 + 32) = &off_10014F688;
  *(_QWORD *)v51 = v45;
  *(_QWORD *)(v51 + 8) = v46;
  swift_slowDealloc(v38, -1, -1);
  return result;
}

void sub_1000EA080(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;

  v4 = sub_1000F1A34();
  if (v4)
    __asm { BR              X10 }
  v5 = static os_log_type_t.error.getter(v4);
  v6 = sub_10002687C();
  v7 = (void *)static OS_os_log.default.getter(v6);
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v7, "warning: libImg4Linked not linked", 33, 2, _swiftEmptyArrayStorage);

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
}

void sub_1000EA2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X9 }
}

uint64_t sub_1000EA398()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;

  Img4DecodeInitPayload(v1, BYTE6(v2), (uint64_t)&v20);
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = static os_log_type_t.info.getter(v4);
    v7 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_10010F050;
    *(_QWORD *)(v8 + 56) = &type metadata for Int32;
    *(_QWORD *)(v8 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v8 + 32) = v5;
    v9 = sub_10002687C();
    v10 = (void *)static OS_os_log.default.getter(v9);
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v10, "Img4 format not .im4p (%d), attempting to decode as .img4", 1);
    swift_bridgeObjectRelease(v8);

    __asm { BR              X10 }
  }
  v11 = static os_log_type_t.info.getter(v4);
  v12 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10010F050;
  v14 = v22;
  *(_QWORD *)(v13 + 56) = &type metadata for Int;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v13 + 32) = v14;
  v15 = sub_10002687C();
  v16 = (void *)static OS_os_log.default.getter(v15);
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v16, "Img4 payload length: %d", v19);
  swift_bridgeObjectRelease(v13);

  if (!v21)
  {
    __break(1u);
    JUMPOUT(0x1000EA660);
  }
  result = sub_1000DA0E8(v21, v14);
  v0[3] = (uint64_t)&type metadata for Data;
  v0[4] = (uint64_t)&off_10014F688;
  *v0 = result;
  v0[1] = v18;
  return result;
}

BOOL sub_1000EA680@<W0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  _BOOL8 result;

  result = sub_1000F1A34();
  if (result)
    __asm { BR              X10 }
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

void sub_1000EAA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];
  int v9;
  uint64_t v10;

  v8[4] = a1;
  v6 = type metadata accessor for Data.Deallocator(0);
  v8[2] = *(_QWORD *)(v6 - 8);
  v8[3] = v6;
  __chkstk_darwin(v6);
  v8[1] = (char *)v8 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v10 = 0;
  __asm { BR              X10 }
}

void sub_1000EAB10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int Payload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  void (*v33)(uint64_t, _QWORD);
  uint64_t v34;
  uint64_t v35;
  int v36;

  v9 = BYTE6(v2);
  sub_1000B2328(v1, v7);
  if (v5 >> 60 != 15)
  {
    sub_1000D1368(v4, v5);
    __asm { BR              X10 }
  }
  v10 = String.utf8CString.getter(v6);
  swift_bridgeObjectRelease(v3);
  Payload = Img4EncodeCreatePayload((const char *)(v10 + 32), "KernelManagement_executables-463", *(const void **)(v8 - 112), v9, 0, 0, (_QWORD *)(v8 - 96), (unsigned int *)(v8 - 100));
  swift_release(v10);
  v12 = swift_bridgeObjectRelease(0);
  if (Payload == 100 && (v13 = *(_QWORD *)(v8 - 96)) != 0)
  {
    v14 = *(unsigned int *)(v8 - 100);
    v16 = *(_QWORD *)(v8 - 136);
    v15 = *(_QWORD *)(v8 - 128);
    v17 = *(_QWORD *)(v8 - 120);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v16, enum case for Data.Deallocator.free(_:), v17);
    v19 = ((uint64_t (*)(uint64_t))Data.Deallocator._deallocator.getter)(v18);
    v21 = v20;
    if ((_DWORD)v14)
    {
      v22 = v19;
      v23 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      swift_retain(v21);
      v24 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))__DataStorage.init(bytes:length:copy:deallocator:offset:))(v13, v14, 0, v22, v21, 0);
      v25 = sub_1000EF770(v24, v14);
      v27 = v26;
      swift_release(v21);
    }
    else
    {
      v33 = (void (*)(uint64_t, _QWORD))((uint64_t (*)(uint64_t))Data.Deallocator._deallocator.getter)(v19);
      v35 = v34;
      v33(v13, 0);
      swift_release(v21);
      swift_release(v35);
      v25 = 0;
      v27 = 0xC000000000000000;
    }
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    *(_QWORD *)(v0 + 24) = &type metadata for Data;
    *(_QWORD *)(v0 + 32) = &off_10014F688;
    *(_QWORD *)v0 = v25;
    *(_QWORD *)(v0 + 8) = v27;
  }
  else
  {
    v28 = static os_log_type_t.error.getter(v12);
    v29 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v30 = swift_allocObject(v29, 72, 7);
    *(_OWORD *)(v30 + 16) = xmmword_10010F050;
    *(_QWORD *)(v30 + 56) = &type metadata for Int32;
    *(_QWORD *)(v30 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v30 + 32) = Payload;
    v31 = sub_10002687C();
    v32 = (void *)static OS_os_log.default.getter(v31);
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v32, "Error encoding img4 payload: %d", v36);
    swift_bridgeObjectRelease(v30);

    *(_QWORD *)(v0 + 32) = 0;
    *(_OWORD *)v0 = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
  }
}

uint64_t sub_1000EAE48(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (sub_1000F1A34())
    __asm { BR              X10 }
  v4 = sub_1000122F8();
  v5 = swift_allocError(&type metadata for KMError, v4, 0, 0);
  *(_QWORD *)v6 = 0xD000000000000039;
  *(_QWORD *)(v6 + 8) = 0x800000010012BEC0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_QWORD *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 72) = 10;
  swift_willThrow(v5);
  return v2 & 1;
}

void sub_1000EB0D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }
}

void sub_1000EB184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL *v3;
  int v4;
  uint64_t v5;

  Img4DecodeInitPayload(a1, BYTE6(a3), (uint64_t)&v5);
  *v3 = v4 == 0;
}

uint64_t sub_1000EB204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (&_compression_stream_identify_algorithm)
    __asm { BR              X10 }
  v2 = static os_log_type_t.error.getter(a1);
  v3 = sub_10002687C();
  v4 = (void *)static OS_os_log.default.getter(v3);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v4, "warning: libcompression not linked", 34, 2, _swiftEmptyArrayStorage);

  v5 = sub_1000122F8();
  v6 = swift_allocError(&type metadata for KMError, v5, 0, 0);
  *(_QWORD *)v7 = 0xD00000000000003CLL;
  *(_QWORD *)(v7 + 8) = 0x800000010012BF30;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_QWORD *)(v7 + 64) = 0;
  *(_BYTE *)(v7 + 72) = 10;
  swift_willThrow(v6);
  return v8 & 1;
}

void sub_1000EB4E8(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, char a4@<W5>, unint64_t a5@<X6>, char a6@<W7>, uint64_t *a7@<X8>, uint64_t a8)
{
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  Class isa;
  unsigned int PayloadPropertiesData;
  Swift::String v28;
  Swift::String v29;
  void *object;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  NSData v56;
  Class v57;
  unint64_t v58;
  unint64_t v59;
  Class v60;
  uint64_t v61;
  id v62;
  unsigned int v63;
  Swift::String v64;
  Swift::String v65;
  void *v66;
  _BYTE *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned int v112;
  _BYTE *v113;
  unint64_t v114;
  id v115;
  void *v116;

  if (!sub_1000F1B00())
  {
    v22 = sub_1000122F8();
    v23 = swift_allocError(&type metadata for KMError, v22, 0, 0);
    *(_QWORD *)v24 = 0xD000000000000019;
    *(_QWORD *)(v24 + 8) = 0x800000010012BF70;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(_QWORD *)(v24 + 64) = 0;
    *(_BYTE *)(v24 + 72) = 10;
    swift_willThrow(v23);
    return;
  }
  v115 = 0;
  v116 = 0;
  if ((a4 & 1) == 0)
  {
    v109 = 0xF000000000000000;
    v110 = 0;
    goto LABEL_14;
  }
  if ((a6 & 1) != 0)
  {
    v44 = sub_1000122F8();
    v45 = swift_allocError(&type metadata for KMError, v44, 0, 0);
    v47 = "Could not encode compression info: Payload is compressed but cannot find uncompressed length";
    v48 = 0xD00000000000005CLL;
  }
  else
  {
    if ((a8 & 0x100000000) == 0)
    {
      if ((a5 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (!HIDWORD(a5))
      {
        if (!sub_1000F2214())
        {
LABEL_43:
          v88 = sub_1000122F8();
          v45 = swift_allocError(&type metadata for KMError, v88, 0, 0);
          v48 = 0xD000000000000049;
          v59 = 0x800000010012C0D0;
          *(_QWORD *)v89 = 0xD000000000000049;
          *(_QWORD *)(v89 + 8) = 0x800000010012C0D0;
          *(_OWORD *)(v89 + 16) = 0u;
          *(_OWORD *)(v89 + 32) = 0u;
          *(_OWORD *)(v89 + 48) = 0u;
          *(_QWORD *)(v89 + 64) = 0;
          *(_BYTE *)(v89 + 72) = 50;
          goto LABEL_44;
        }
        v113 = 0;
        v112 = 0;
        v14 = (uint64_t *)DEREncoderCreate(0);
        if (!v14)
        {
          v82 = static os_log_type_t.error.getter(0);
          v83 = sub_100005C88((uint64_t *)&unk_1001596E0);
          v19 = swift_allocObject(v83, 72, 7);
          *(_OWORD *)(v19 + 16) = xmmword_10010F050;
          *(_QWORD *)(v19 + 56) = &type metadata for UInt32;
          *(_QWORD *)(v19 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v19 + 32) = 2;
          v84 = sub_10002687C();
          v21 = (void *)static OS_os_log.default.getter(v84);
          os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v21, "Could not create DEREncoder: %{public}d", 39, 2, v19);
          goto LABEL_42;
        }
        if ((_DWORD)a8 != 2193)
        {
          v85 = static os_log_type_t.error.getter(v14);
          v86 = sub_100005C88((uint64_t *)&unk_1001596E0);
          v19 = swift_allocObject(v86, 72, 7);
          *(_OWORD *)(v19 + 16) = xmmword_10010F050;
          *(_QWORD *)(v19 + 56) = &type metadata for UInt32;
          *(_QWORD *)(v19 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v19 + 32) = a8;
          v87 = sub_10002687C();
          v21 = (void *)static OS_os_log.default.getter(v87);
          os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, v21, "Unsupported compressions algorithm: %{public}d, only COMPRESSION_LZFSE_SMALL_BLOCKS is supported", 96, 2, v19);
          goto LABEL_42;
        }
        v15 = v14;
        if (DEREncoderAddUInt32(v14, 0, 2u, 1u))
        {
          DEREncoderDestroy((_QWORD **)v15);
          v17 = static os_log_type_t.error.getter(v16);
          v18 = sub_100005C88((uint64_t *)&unk_1001596E0);
          v19 = swift_allocObject(v18, 72, 7);
          *(_OWORD *)(v19 + 16) = xmmword_10010F050;
          *(_QWORD *)(v19 + 56) = &type metadata for UInt32;
          *(_QWORD *)(v19 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v19 + 32) = 3;
          v20 = sub_10002687C();
          v21 = (void *)static OS_os_log.default.getter(v20);
          os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v21, "DEREncoderAddUInt32 error while encoding algorithm: %{public}d", 62, 2, v19);
LABEL_42:

          swift_bridgeObjectRelease(v19);
          goto LABEL_43;
        }
        if (DEREncoderAddUInt32(v15, 0, 2u, a5))
        {
          DEREncoderDestroy((_QWORD **)v15);
          v97 = static os_log_type_t.error.getter(v96);
          v98 = sub_100005C88((uint64_t *)&unk_1001596E0);
          v19 = swift_allocObject(v98, 72, 7);
          *(_OWORD *)(v19 + 16) = xmmword_10010F050;
          *(_QWORD *)(v19 + 56) = &type metadata for UInt32;
          *(_QWORD *)(v19 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v19 + 32) = 3;
          v99 = sub_10002687C();
          v21 = (void *)static OS_os_log.default.getter(v99);
          os_log(_:dso:log:_:_:)(v97, &_mh_execute_header, v21, "DEREncoderAddUInt32 error while encoding size: %{public}d", 57, 2, v19);
          goto LABEL_42;
        }
        if (DEREncoderCreateEncodedBuffer((uint64_t **)v15, &v113, &v112)
          || (v104 = v112) == 0
          || (v105 = v113) == 0)
        {
          DEREncoderDestroy((_QWORD **)v15);
          v101 = static os_log_type_t.error.getter(v100);
          v102 = sub_100005C88((uint64_t *)&unk_1001596E0);
          v19 = swift_allocObject(v102, 72, 7);
          *(_OWORD *)(v19 + 16) = xmmword_10010F050;
          *(_QWORD *)(v19 + 56) = &type metadata for UInt32;
          *(_QWORD *)(v19 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v19 + 32) = 3;
          v103 = sub_10002687C();
          v21 = (void *)static OS_os_log.default.getter(v103);
          os_log(_:dso:log:_:_:)(v101, &_mh_execute_header, v21, "Could not encode compresssion info into buffer:: %{public}d", 59, 2, v19);
          goto LABEL_42;
        }
        DEREncoderDestroy((_QWORD **)v15);
        v106 = sub_1000DA0E8(v105, v104);
        v109 = v107;
        v110 = v106;
        if (v107 >> 60 == 15)
          goto LABEL_43;
LABEL_14:
        v25 = String._bridgeToObjectiveC()();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        PayloadPropertiesData = AMAuthInstallApImg4GetPayloadPropertiesData(0, &v116, v25, isa);

        if (PayloadPropertiesData || (v49 = v116) == 0)
        {
          v113 = 0;
          v114 = 0xE000000000000000;
          _StringGuts.grow(_:)(59);
          v28._countAndFlagsBits = 0xD000000000000039;
          v28._object = (void *)0x800000010012BF90;
          String.append(_:)(v28);
          v112 = PayloadPropertiesData;
          v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
          object = v29._object;
          String.append(_:)(v29);
          swift_bridgeObjectRelease(object);
          v31 = v113;
          v32 = v114;
          v33 = sub_1000122F8();
          swift_allocError(&type metadata for KMError, v33, 0, 0);
          *(_QWORD *)v34 = v31;
          *(_QWORD *)(v34 + 8) = v32;
          *(_OWORD *)(v34 + 16) = 0u;
          *(_OWORD *)(v34 + 32) = 0u;
          *(_OWORD *)(v34 + 48) = 0u;
          *(_QWORD *)(v34 + 64) = 0;
          *(_BYTE *)(v34 + 72) = 31;
          swift_bridgeObjectRetain(v32);
          swift_willThrow(v35);
          swift_bridgeObjectRetain(v32);
          v37 = static os_log_type_t.error.getter(v36);
          v38 = sub_100005C88((uint64_t *)&unk_1001596E0);
          v39 = swift_allocObject(v38, 72, 7);
          *(_OWORD *)(v39 + 16) = xmmword_10010F050;
          *(_QWORD *)(v39 + 56) = &type metadata for String;
          *(_QWORD *)(v39 + 64) = sub_100026838();
          *(_QWORD *)(v39 + 32) = v31;
          *(_QWORD *)(v39 + 40) = v32;
          v40 = sub_10002687C();
          v41 = (void *)static OS_os_log.default.getter(v40);
          os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v41, "%{public}s", 10, 2, v39);
          swift_bridgeObjectRelease(v39);

          v43 = v109;
          v42 = v110;
        }
        else
        {
          v50 = 1819177579;
          v51 = 0xE400000000000000;
          v52 = 1803056481;
          v53 = 0xE400000000000000;
          v54 = 1936684390;
          if (a2 != 2)
          {
            v54 = a1;
            v53 = a2;
          }
          if (a2 != 1)
          {
            v52 = v54;
            v51 = v53;
          }
          if (a2)
            v50 = v52;
          v108 = v50;
          if (a2)
            v55 = v51;
          else
            v55 = 0xE400000000000000;
          sub_1000B2328(a1, a2);
          v56.super.isa = Data._bridgeToObjectiveC()().super.isa;
          if (a3 >> 60 == 15)
            v57 = 0;
          else
            v57 = Data._bridgeToObjectiveC()().super.isa;
          if (v109 >> 60 == 15)
          {
            v60 = 0;
          }
          else
          {
            sub_1000122B4(v110, v109);
            v60 = Data._bridgeToObjectiveC()().super.isa;
            sub_100021610(v110, v109);
          }
          v61 = String.utf8CString.getter(v108);
          v62 = v49;
          swift_bridgeObjectRelease(v55);
          v63 = AMAuthInstallApImg4CreatePayloadWithProperties(v61 + 32, "KernelManagement_executables-463", v56.super.isa, v57, v60, v62, &v115);

          swift_release(v61);
          if (!v63)
          {
            v77 = v115;
            if (v115)
            {
              v78 = v115;
              v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v77);
              v81 = v80;

              a7[3] = (uint64_t)&type metadata for Data;
              a7[4] = (uint64_t)&off_10014F688;

              sub_100021610(v110, v109);
              *a7 = v79;
              a7[1] = v81;
              return;
            }
          }
          v113 = 0;
          v114 = 0xE000000000000000;
          _StringGuts.grow(_:)(65);
          v64._countAndFlagsBits = 0xD00000000000003FLL;
          v64._object = (void *)0x800000010012BFD0;
          String.append(_:)(v64);
          v112 = v63;
          v65._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
          v66 = v65._object;
          String.append(_:)(v65);
          swift_bridgeObjectRelease(v66);
          v67 = v113;
          v32 = v114;
          v68 = sub_1000122F8();
          swift_allocError(&type metadata for KMError, v68, 0, 0);
          *(_QWORD *)v69 = v67;
          *(_QWORD *)(v69 + 8) = v32;
          *(_OWORD *)(v69 + 16) = 0u;
          *(_OWORD *)(v69 + 32) = 0u;
          *(_OWORD *)(v69 + 48) = 0u;
          *(_QWORD *)(v69 + 64) = 0;
          *(_BYTE *)(v69 + 72) = 31;
          swift_bridgeObjectRetain(v32);
          swift_willThrow(v70);

          swift_bridgeObjectRetain(v32);
          v72 = static os_log_type_t.error.getter(v71);
          v73 = sub_100005C88((uint64_t *)&unk_1001596E0);
          v74 = swift_allocObject(v73, 72, 7);
          *(_OWORD *)(v74 + 16) = xmmword_10010F050;
          *(_QWORD *)(v74 + 56) = &type metadata for String;
          *(_QWORD *)(v74 + 64) = sub_100026838();
          *(_QWORD *)(v74 + 32) = v67;
          *(_QWORD *)(v74 + 40) = v32;
          v75 = sub_10002687C();
          v76 = (void *)static OS_os_log.default.getter(v75);
          os_log(_:dso:log:_:_:)(v72, &_mh_execute_header, v76, "%{public}s", 10, 2, v74);
          swift_bridgeObjectRelease(v74);

          v42 = v110;
          v43 = v109;
        }
        sub_100021610(v42, v43);
        swift_bridgeObjectRelease(v32);
        return;
      }
      __break(1u);
    }
    v58 = sub_1000122F8();
    v45 = swift_allocError(&type metadata for KMError, v58, 0, 0);
    v47 = "Could not encode compression info: Payload is compressed but cannot find algorithm info";
    v48 = 0xD000000000000057;
  }
  v59 = (unint64_t)(v47 - 32) | 0x8000000000000000;
  *(_QWORD *)v46 = v48;
  *(_QWORD *)(v46 + 8) = v59;
  *(_OWORD *)(v46 + 16) = 0u;
  *(_OWORD *)(v46 + 32) = 0u;
  *(_OWORD *)(v46 + 48) = 0u;
  *(_QWORD *)(v46 + 64) = 0;
  *(_BYTE *)(v46 + 72) = 10;
LABEL_44:
  v90 = swift_willThrow(v45);
  v91 = static os_log_type_t.error.getter(v90);
  v92 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v93 = swift_allocObject(v92, 72, 7);
  *(_OWORD *)(v93 + 16) = xmmword_10010F050;
  *(_QWORD *)(v93 + 56) = &type metadata for String;
  *(_QWORD *)(v93 + 64) = sub_100026838();
  *(_QWORD *)(v93 + 32) = v48;
  *(_QWORD *)(v93 + 40) = v59;
  v94 = sub_10002687C();
  v95 = (void *)static OS_os_log.default.getter(v94);
  os_log(_:dso:log:_:_:)(v91, &_mh_execute_header, v95, "%{public}s", 10, 2, v93);
  swift_bridgeObjectRelease(v93);

}

uint64_t sub_1000EBFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = sub_1000E73E8(a1, a2, a3, *v3, v3[1]);
  if (v4)
    return v6;
  return result;
}

uint64_t sub_1000EBFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t *v6;

  return sub_1000E88EC(a1, a2, a3, a4, a5, a6 & 1, *v6, v6[1]);
}

uint64_t sub_1000EBFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return sub_1000E5100(a1, a2, a3, a4, a5, *v5, v5[1]);
}

uint64_t sub_1000EC008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = *v5;
  v11 = v5[1];
  v13 = swift_allocObject(&unk_10014FC80, 32, 7);
  *(_QWORD *)(v13 + 16) = a4;
  *(_QWORD *)(v13 + 24) = a5;
  swift_retain(a5);
  sub_1000E5100(a1, a2, a3, (uint64_t)sub_1000F240C, v13, v12, v11);
  return swift_release(v13);
}

uint64_t sub_1000EC0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;

  return sub_1000E7DC4(a1, a2, a3, a4, a5 & 1, a6, a7, a8, *v8, v8[1]);
}

uint64_t sub_1000EC0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  result = sub_100102678(a1, a2, a3, a4, a5);
  if (v5)
    return v7;
  return result;
}

void sub_1000EC100(uint64_t a1)
{
  uint64_t *v1;

  sub_1000E4CC4(a1, *v1, v1[1]);
}

void sub_1000EC108(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1000E995C(a1, *(_QWORD *)(v2 + 8), a2);
}

uint64_t sub_1000EC110@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000E7B20(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), a1);
}

void sub_1000EC118(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000EA080(*(_QWORD *)(v1 + 8), a1);
}

BOOL sub_1000EC120@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000EA680(*(_QWORD *)(v1 + 8), a1);
}

uint64_t sub_1000EC128()
{
  uint64_t *v0;

  return sub_1000EAE48(*v0, v0[1]) & 1;
}

uint64_t sub_1000EC144()
{
  uint64_t *v0;

  return sub_1000EB204(*v0, v0[1]) & 1;
}

void sub_1000EC160()
{
  uint64_t *v0;

  sub_1000E5C68(*v0, v0[1]);
}

uint64_t sub_1000EC178(uint64_t a1, uint64_t a2)
{
  return sub_1000EED50(a1, a2);
}

uint64_t sub_1000EC18C(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  return sub_100103480(a1, a2, a3, a4, a5, a6);
}

void sub_1000EC1BC(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, char a4@<W5>, unint64_t a5@<X6>, char a6@<W7>, uint64_t *a7@<X8>, unint64_t a8)
{
  sub_1000EB4E8(a1, a2, a3, a4, a5, a6 & 1, a7, a8 | ((HIDWORD(a8) & 1) << 32));
}

uint64_t sub_1000EC1F8()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)&loc_1000EC20C
                                         + *((int *)qword_1000EC250 + (*(_QWORD *)(v0 + 8) >> 62))))(0);
}

uint64_t sub_1000EC21C()
{
  uint64_t v0;

  return BYTE6(v0);
}

uint64_t sub_1000EC260()
{
  int *v0;

  return compression_algorithm.description.getter(*v0);
}

unint64_t sub_1000EC268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::Int v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, *(_QWORD *)(v4 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v11, a1, a2);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRetain(a4);
  String.hash(into:)(v11, a3, a4);
  swift_bridgeObjectRelease(a4);
  v9 = Hasher._finalize()();
  return sub_1000EC314(a1, a2, a3, a4, v9);
}

unint64_t sub_1000EC314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v13 = ~v7;
    v14 = *(_QWORD *)(v5 + 48);
    do
    {
      v15 = (_QWORD *)(v14 + 32 * v8);
      v16 = v15[1];
      v17 = v15[2];
      v18 = v15[3];
      v19 = *v15 == a1 && v16 == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, a1, a2, 0) & 1) != 0)
      {
        v20 = v17 == a3 && v18 == a4;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a3, a4, 0) & 1) != 0)
          break;
      }
      v8 = (v8 + 1) & v13;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

double sub_1000EC410@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100005DE8(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000ED5C4();
      v12 = v17;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    v13 = (_OWORD *)(*(_QWORD *)(v12 + 56) + 48 * v9);
    v14 = v13[1];
    *a3 = *v13;
    a3[1] = v14;
    a3[2] = v13[2];
    sub_1000ECED8(v9, v12);
    v15 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    result = 0.0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

Swift::Int sub_1000EC510(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  _QWORD v43[9];
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_10015BE50);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_25;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v41 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_37;
      v24 = *(_QWORD *)(v41 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_37:
          swift_release(v5);
          if ((v42 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v41 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v14 >= v40)
              goto LABEL_37;
            v24 = *(_QWORD *)(v41 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v14 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_25:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = (__int128 *)(*(_QWORD *)(v5 + 56) + 48 * v21);
    if ((v42 & 1) != 0)
    {
      v30 = *v29;
      v31 = v29[2];
      v45 = v29[1];
      v46 = v31;
      v44 = v30;
    }
    else
    {
      sub_100019E1C((uint64_t)v29, (uint64_t)&v44, &qword_10015BE40);
      swift_bridgeObjectRetain(v27);
    }
    Hasher.init(_seed:)(v43, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v43, v28, v27);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v8 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v12 + 8 * v34);
      }
      while (v38 == -1);
      v15 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v28;
    v16[1] = v27;
    v17 = (_OWORD *)(*(_QWORD *)(v8 + 56) + 48 * v15);
    v18 = v44;
    v19 = v46;
    v17[1] = v45;
    v17[2] = v19;
    *v17 = v18;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000EC850(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_10015BE30);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000ECB64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;
  __int128 v44;
  _QWORD v45[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_10015BE20);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v39 = v3;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_36;
      v25 = v41[v14];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release(v5);
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v40)
              goto LABEL_36;
            v25 = v41[v14];
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 32 * v22);
    v33 = *v31;
    v32 = v31[1];
    v35 = v31[2];
    v34 = v31[3];
    v36 = *(_QWORD *)(v5 + 56) + 24 * v22;
    v44 = *(_OWORD *)v36;
    v37 = *(_BYTE *)(v36 + 16);
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v8 + 40));
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(v45, v33, v32);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRetain(v34);
    String.hash(into:)(v45, v35, v34);
    swift_bridgeObjectRelease(v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 32 * v18);
    *v19 = v33;
    v19[1] = v32;
    v19[2] = v35;
    v19[3] = v34;
    v20 = *(_QWORD *)(v8 + 56) + 24 * v18;
    *(_OWORD *)v20 = v44;
    *(_BYTE *)(v20 + 16) = v37;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v39;
  v24 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

unint64_t sub_1000ECED8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v28, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = (__int128 *)(v19 + 48 * v3);
          v21 = (__int128 *)(v19 + 48 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= v21 + 3))
          {
            v9 = *v21;
            v10 = v21[2];
            v20[1] = v21[1];
            v20[2] = v10;
            *v20 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000ED0C0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD v31[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 32 * v6);
        v11 = *v10;
        v12 = v10[1];
        v13 = v10[2];
        v14 = v10[3];
        Hasher.init(_seed:)(v31, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v14);
        String.hash(into:)(v31, v11, v12);
        swift_bridgeObjectRetain(v14);
        String.hash(into:)(v31, v13, v14);
        swift_bridgeObjectRelease(v14);
        v15 = Hasher._finalize()();
        swift_bridgeObjectRelease(v14);
        result = swift_bridgeObjectRelease(v12);
        v16 = v15 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v16 < v8)
            goto LABEL_5;
        }
        else if (v16 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_11:
          v17 = *(_QWORD *)(a2 + 48);
          v18 = (_OWORD *)(v17 + 32 * v3);
          v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || v18 >= v19 + 2)
          {
            v20 = v19[1];
            *v18 = *v19;
            v18[1] = v20;
          }
          v21 = *(_QWORD *)(a2 + 56);
          v22 = v21 + 24 * v3;
          v23 = (__int128 *)(v21 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v22 >= (unint64_t)v23 + 24 || (v24 = v3 == v6, v3 = v6, !v24))
          {
            v9 = *v23;
            *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
            *(_OWORD *)v22 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1000ED2F0(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100005DE8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000ED5C4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      sub_1000392C8((uint64_t)a1, v18[7] + 48 * v12, &qword_10015BE40);
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    v22 = (_OWORD *)(v18[7] + 48 * v12);
    v23 = *a1;
    v24 = a1[2];
    v22[1] = a1[1];
    v22[2] = v24;
    *v22 = v23;
    v25 = v18[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v18[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000EC510(v15, a4 & 1);
  v19 = sub_100005DE8(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000ED468(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100005DE8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000ED7BC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000EC850(v15, a4 & 1);
  v20 = sub_100005DE8(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000ED5C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  _OWORD v29[3];

  v1 = v0;
  sub_100005C88(&qword_10015BE50);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v28 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 48 * v15;
    sub_100019E1C(*(_QWORD *)(v2 + 56) + 48 * v15, (uint64_t)v29, &qword_10015BE40);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v18;
    v21[1] = v19;
    v22 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    v24 = v29[1];
    v23 = v29[2];
    *v22 = v29[0];
    v22[1] = v24;
    v22[2] = v23;
    swift_bridgeObjectRetain(v19);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1000ED7BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100005C88(&qword_10015BE30);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000ED970()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  sub_100005C88(&qword_10015BE20);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = 24 * v15;
    v23 = *(_QWORD *)(v2 + 56) + v22;
    v24 = *(_BYTE *)(v23 + 16);
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v26 = *(_OWORD *)v23;
    *v25 = v19;
    v25[1] = v18;
    v25[2] = v20;
    v25[3] = v21;
    v27 = *(_QWORD *)(v4 + 56) + v22;
    *(_OWORD *)v27 = v26;
    *(_BYTE *)(v27 + 16) = v24;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1000EDB40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v11 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000E9060(v11, a3, a4, a5);
    return sub_100011F40(a3, a4);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000EDBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v10;

  result = __DataStorage._bytes.getter();
  v10 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v10 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000E4EE4(v10, a4, a5);
    return sub_100011F40(a4, a5);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000EDC98@<X0>(unint64_t a1@<X0>, int64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD, _QWORD)@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  int v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  uint64_t (*v83)(_QWORD, _QWORD);
  uint64_t (*v84)(_QWORD, _QWORD);
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(_QWORD, _QWORD);
  _QWORD *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;

  v8 = v6;
  v15 = __DataStorage._bytes.getter();
  if (!v15)
  {
    v7 = 0;
    v19 = __OFSUB__(a2, a1);
    v20 = a2 - a1;
    if (!v19)
      goto LABEL_4;
    goto LABEL_23;
  }
  v17 = v15;
  v18 = __DataStorage._offset.getter();
  v16 = a1 - v18;
  if (!__OFSUB__(a1, v18))
  {
    v7 = (char *)(v17 + v16);
    v19 = __OFSUB__(a2, a1);
    v20 = a2 - a1;
    if (!v19)
    {
LABEL_4:
      v21 = __DataStorage._length.getter();
      if (v21 >= v20)
        v22 = v20;
      else
        v22 = v21;
      v23 = &v7[v22];
      if (!v7)
        v23 = 0;
      v17 = v23 - v7;
      v24 = v23 - v7 < 32 || v7 == 0;
      if (v24)
      {
        v78 = 1;
        a1 = sub_1000122F8();
        v25 = swift_allocError(&type metadata for KMError, a1, 0, 0);
        *(_QWORD *)v26 = 0xD000000000000033;
        *(_QWORD *)(v26 + 8) = 0x800000010012C400;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(_OWORD *)(v26 + 48) = 0u;
        *(_QWORD *)(v26 + 64) = 0;
        *(_BYTE *)(v26 + 72) = 24;
        swift_willThrow(v25);
        v96 = v25;
        swift_errorRetain(v25);
        v27 = sub_100005C88(&qword_10015AB50);
        if ((swift_dynamicCast(&v86, &v96, v27, &type metadata for KMError, 0) & 1) == 0)
          return swift_errorRelease(v96);
        v69 = a1;
        v83 = a4;
        swift_errorRelease(v25);
        a6 = v91;
        a4 = v92;
        a3 = v93;
        v8 = v94;
        LOBYTE(a1) = v95;
        v74 = v87;
        v76 = v86;
        v71 = v89;
        v72 = v88;
        v70 = v90;
        sub_1000515CC(v86, v87, v88, v89, v90, v91, (uint64_t)v92, (uint64_t)v93, v94, v95);
        v28 = sub_10008EC3C(0, 1, 1, _swiftEmptyArrayStorage);
        a5 = v28[2];
        v16 = v28[3];
        v80 = v28;
        a2 = a5 + 1;
        if (a5 < v16 >> 1)
          goto LABEL_15;
        goto LABEL_50;
      }
      v31 = 0;
      LODWORD(v16) = *(_DWORD *)v7;
      a3 = _swiftEmptyArrayStorage;
      if (*(_DWORD *)v7 == -805638658 || (_DWORD)v16 == -17958193)
      {
        v30 = v7;
        goto LABEL_25;
      }
LABEL_24:
      v30 = 0;
      LOBYTE(v24) = 1;
      v31 = 255;
      goto LABEL_25;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  __break(1u);
LABEL_50:
  v80 = sub_10008EC3C((_QWORD *)(v16 > 1), a2, 1, v80);
LABEL_15:
  v80[2] = a2;
  v29 = &v80[10 * a5];
  v29[4] = v76;
  v29[5] = v74;
  v29[6] = v72;
  v29[7] = v71;
  v29[8] = v70;
  v29[9] = a6;
  v29[10] = a4;
  v29[11] = a3;
  v29[12] = v8;
  *((_BYTE *)v29 + 104) = a1;
  sub_1000391DC(v76, v74, v72, v71, v70, a6, (uint64_t)a4, (uint64_t)a3, v8, a1);
  swift_errorRelease(v96);
  if (!v7 || v17 < 28)
  {
    v34 = swift_allocError(&type metadata for KMError, v69, 0, 0);
    v36 = v34;
    v30 = 0;
    *(_QWORD *)v35 = 0xD000000000000033;
    v38 = 0x800000010012C440;
    v37 = 255;
    a4 = v83;
    a3 = v80;
LABEL_31:
    *(_QWORD *)(v35 + 8) = v38;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_OWORD *)(v35 + 32) = 0u;
    *(_OWORD *)(v35 + 48) = 0u;
    *(_QWORD *)(v35 + 64) = 0;
    *(_BYTE *)(v35 + 72) = 24;
    swift_willThrow(v34);
    v96 = v36;
    swift_errorRetain(v36);
    v39 = sub_100005C88(&qword_10015AB50);
    if (swift_dynamicCast(&v86, &v96, v39, &type metadata for KMError, 0))
    {
      v79 = v37;
      v81 = v30;
      v84 = a4;
      swift_errorRelease(v36);
      v40 = v86;
      v41 = v87;
      v42 = v88;
      v43 = v89;
      v44 = v90;
      v45 = v94;
      v46 = v95;
      v75 = (uint64_t)v92;
      v77 = v91;
      v73 = (uint64_t)v93;
      sub_1000515CC(v86, v87, v88, v89, v90, v91, (uint64_t)v92, (uint64_t)v93, v94, v95);
      if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) == 0)
        a3 = sub_10008EC3C(0, a3[2] + 1, 1, a3);
      v48 = a3[2];
      v47 = a3[3];
      v49 = a3;
      if (v48 >= v47 >> 1)
        v49 = sub_10008EC3C((_QWORD *)(v47 > 1), v48 + 1, 1, a3);
      v49[2] = v48 + 1;
      a3 = v49;
      v50 = &v49[10 * v48];
      v50[4] = v40;
      v50[5] = v41;
      v50[6] = v42;
      v50[7] = v43;
      v50[8] = v44;
      v50[9] = v77;
      v50[10] = v75;
      v50[11] = v73;
      v50[12] = v45;
      *((_BYTE *)v50 + 104) = v46;
      sub_1000391DC(v40, v41, v42, v43, v44, v77, v75, v73, v45, v46);
      swift_errorRelease(v96);
      a4 = v84;
      v30 = v81;
      v31 = v79;
      goto LABEL_37;
    }
    swift_bridgeObjectRelease(a3);
    return swift_errorRelease(v96);
  }
  v30 = 0;
  LODWORD(v16) = *(_DWORD *)v7;
  v31 = 255;
  a4 = v83;
  a3 = v80;
  LOBYTE(v24) = v78;
LABEL_25:
  if ((_DWORD)v16 == -17958194 || (_DWORD)v16 == -822415874)
  {
    if (v24)
    {
      v32 = 1;
LABEL_41:
      swift_bridgeObjectRelease(a3);
      return a4(v7, v32);
    }
    v33 = sub_1000122F8();
    v34 = swift_allocError(&type metadata for KMError, v33, 0, 0);
    v36 = v34;
    v37 = 0;
    *(_QWORD *)v35 = 0xD00000000000002BLL;
    v38 = 0x800000010012C4D0;
    goto LABEL_31;
  }
LABEL_37:
  if (v31 != 255)
  {
    v32 = 0;
    v7 = v30;
    goto LABEL_41;
  }
  v51 = a3[2];
  if (v51 < 2)
  {
    if (v51 == 1)
    {
      v56 = a3;
      v57 = a3[4];
      v58 = a3[5];
      v59 = v56[6];
      v60 = v56[7];
      v61 = v56[8];
      v62 = v56[9];
      v63 = v56[10];
      v64 = v56[11];
      v82 = v56[12];
      v85 = *((_BYTE *)v56 + 104);
      sub_1000515CC(v57, v58, v59, v60, v61, v62, v63, v64, v82, v85);
      swift_bridgeObjectRelease(v56);
      v65 = sub_1000122F8();
      v53 = swift_allocError(&type metadata for KMError, v65, 0, 0);
      *(_QWORD *)v66 = v57;
      *(_QWORD *)(v66 + 8) = v58;
      *(_QWORD *)(v66 + 16) = v59;
      *(_QWORD *)(v66 + 24) = v60;
      *(_QWORD *)(v66 + 32) = v61;
      *(_QWORD *)(v66 + 40) = v62;
      *(_QWORD *)(v66 + 48) = v63;
      *(_QWORD *)(v66 + 56) = v64;
      *(_QWORD *)(v66 + 64) = v82;
      v67 = v85;
    }
    else
    {
      swift_bridgeObjectRelease(a3);
      v68 = sub_1000122F8();
      v53 = swift_allocError(&type metadata for KMError, v68, 0, 0);
      *(_QWORD *)v66 = 0xD000000000000040;
      *(_QWORD *)(v66 + 8) = 0x800000010012C480;
      *(_OWORD *)(v66 + 16) = 0u;
      *(_OWORD *)(v66 + 32) = 0u;
      *(_OWORD *)(v66 + 48) = 0u;
      *(_QWORD *)(v66 + 64) = 0;
      v67 = 50;
    }
    *(_BYTE *)(v66 + 72) = v67;
  }
  else
  {
    v52 = sub_1000122F8();
    v53 = swift_allocError(&type metadata for KMError, v52, 0, 0);
    *(_QWORD *)v54 = a3;
    *(_OWORD *)(v54 + 8) = 0u;
    *(_OWORD *)(v54 + 24) = 0u;
    *(_OWORD *)(v54 + 40) = 0u;
    *(_OWORD *)(v54 + 56) = 0u;
    *(_BYTE *)(v54 + 72) = 0;
  }
  return swift_willThrow(v53);
}

uint64_t sub_1000EE32C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v11 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000E9C84(v11, a3, a4, a5);
    return sub_100011F40(a3, a4);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000EE3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v10;

  result = __DataStorage._bytes.getter();
  v10 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v10 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000EA2E0(v10, a4, a5);
    return sub_100011F40(a4, a5);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000EE48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t result;
  uint64_t v17;

  result = __DataStorage._bytes.getter();
  v17 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v17 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000EAA14(v17, a4, a5, a6, a7);
    sub_100037510(a4, a5);
    sub_100011F40(a6, a7);
    return sub_100021610(a8, a9);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

_QWORD *sub_1000EE574(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int64_t v12;

  v2 = result[2];
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v12 = v4 + v2;
  else
    v12 = v4;
  result = sub_1000EE758(result, v12, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = (uint64_t)&v3[2 * v7 + 4];
  sub_100005C88(&qword_100159498);
  result = (_QWORD *)swift_arrayInitWithCopy(v8);
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v9 = v3[2];
  v10 = __OFADD__(v9, v2);
  v11 = v9 + v2;
  if (!v10)
  {
    v3[2] = v11;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *sub_1000EE66C(char *result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *((_QWORD *)result + 2);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*((_QWORD *)v6 + 2))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = sub_1000EE878(result, v11, 1, v3);
  v3 = result;
  if (!*((_QWORD *)v6 + 2))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (char *)swift_arrayInitWithCopy(&v3[24 * v7 + 32]);
  if (!v2)
  {
LABEL_14:
    result = (char *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v8 = *((_QWORD *)v3 + 2);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *((_QWORD *)v3 + 2) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_1000EE758(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015BDC0);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100005C88(&qword_100159498);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000EE878(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015BE28);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

_QWORD *sub_1000EE990(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1000EE9C8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000EE9AC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000EEAE8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1000EE9C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015BDC0);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_100005C88(&qword_100159498);
    swift_arrayInitWithCopy(v11 + 4);
  }
  swift_release(a4);
  return v11;
}

char *sub_1000EEAE8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015BE28);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13);
  }
  swift_release(a4);
  return v11;
}

uint64_t *sub_1000EEC00(uint64_t *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = (uint64_t *)(*(_QWORD *)(a5 + 48) + 32 * a2);
    v6 = *v5;
    v7 = v5[1];
    v8 = v5[3];
    v9 = (uint64_t *)(*(_QWORD *)(a5 + 56) + 16 * a2);
    v10 = *v9;
    v11 = v9[1];
    *result = *v9;
    result[1] = v11;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    sub_10002B23C(v10, v11);
    return (uint64_t *)v6;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000EECB8(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = (uint64_t *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    v6 = *v5;
    v7 = v5[1];
    sub_100019E1C(*(_QWORD *)(a5 + 56) + 48 * a2, result, &qword_1001591E8);
    swift_bridgeObjectRetain(v7);
    return v6;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000EED50(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = 20 * result;
  if ((unsigned __int128)(result * (__int128)20) >> 64 == (20 * result) >> 63)
  {
    if (__OFADD__(v2, 8))
    {
      _StringGuts.grow(_:)(77);
      v7._countAndFlagsBits = 0x6372615F7461666ELL;
      v7._object = (void *)0xEC000000203D2068;
      String.append(_:)(v7);
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v8._object;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(object);
      v10._object = (void *)0x800000010012BB30;
      v10._countAndFlagsBits = 0xD00000000000003DLL;
      String.append(_:)(v10);
    }
    else
    {
      if (v2 + 8 <= a2)
        return result;
      _StringGuts.grow(_:)(81);
      v11._countAndFlagsBits = 0x73207972616E6942;
      v11._object = (void *)0xED0000203A657A69;
      String.append(_:)(v11);
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v13 = v12._object;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(v13);
      v14._countAndFlagsBits = 0xD000000000000040;
      v14._object = (void *)0x800000010012BAE0;
      String.append(_:)(v14);
    }
  }
  else
  {
    _StringGuts.grow(_:)(82);
    v3._countAndFlagsBits = 0x6372615F7461666ELL;
    v3._object = (void *)0xEC000000203D2068;
    String.append(_:)(v3);
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v5 = v4._object;
    String.append(_:)(v4);
    swift_bridgeObjectRelease(v5);
    v6._countAndFlagsBits = 0xD000000000000042;
    v6._object = (void *)0x800000010012BB70;
    String.append(_:)(v6);
  }
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  v17 = sub_1000122F8();
  v18 = swift_allocError(&type metadata for KMError, v17, 0, 0);
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0xE000000000000000;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_QWORD *)(v19 + 64) = 0;
  *(_BYTE *)(v19 + 72) = 24;
  return swift_willThrow(v18);
}

uint64_t sub_1000EF014(uint64_t a1, int64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, _QWORD, _QWORD), unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  char *v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  int v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  uint64_t v82;
  void (*v83)(_QWORD *__return_ptr, _QWORD, _QWORD);
  void (*v84)(_QWORD *__return_ptr, _QWORD, _QWORD);
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void (*v92)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;

  v8 = v5;
  v15 = (char *)__DataStorage._bytes.getter();
  if (v15)
  {
    v16 = __DataStorage._offset.getter();
    v14 = a1 - v16;
    if (__OFSUB__(a1, v16))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      v80 = sub_10008EC3C((_QWORD *)(v14 > 1), a2, 1, v80);
      goto LABEL_16;
    }
    v15 += v14;
  }
  v17 = __OFSUB__(a2, a1);
  a2 -= a1;
  if (v17)
  {
    __break(1u);
    goto LABEL_50;
  }
  v18 = __DataStorage._length.getter();
  if (v18 >= a2)
    v19 = a2;
  else
    v19 = v18;
  v20 = &v15[v19];
  if (!v15)
    v20 = 0;
  v6 = v20 - v15;
  v21 = v20 - v15 < 32 || v15 == 0;
  if (!v21)
  {
    v30 = 0;
    v29 = *(_DWORD *)v15;
    v31 = _swiftEmptyArrayStorage;
    if (*(_DWORD *)v15 == -805638658 || v29 == -17958193)
    {
      v28 = v15;
    }
    else
    {
      v28 = 0;
      v21 = 1;
      v30 = 255;
    }
    goto LABEL_23;
  }
  v22 = sub_1000122F8();
  v23 = swift_allocError(&type metadata for KMError, v22, 0, 0);
  *(_QWORD *)v24 = 0xD000000000000033;
  *(_QWORD *)(v24 + 8) = 0x800000010012C400;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_QWORD *)(v24 + 64) = 0;
  *(_BYTE *)(v24 + 72) = 24;
  swift_willThrow(v23);
  v97 = v23;
  swift_errorRetain(v23);
  v25 = sub_100005C88(&qword_10015AB50);
  if (!swift_dynamicCast(&v86, &v97, v25, &type metadata for KMError, 0))
    goto LABEL_42;
  v69 = v22;
  v70 = v21;
  v83 = a4;
  swift_errorRelease(v23);
  v7 = v91;
  a4 = v92;
  a3 = v93;
  v8 = v94;
  LOBYTE(a1) = v95;
  v76 = v87;
  v78 = v86;
  v72 = v89;
  v74 = v88;
  v71 = v90;
  sub_1000515CC(v86, v87, v88, v89, v90, v91, (uint64_t)v92, v93, v94, v95);
  v26 = sub_10008EC3C(0, 1, 1, _swiftEmptyArrayStorage);
  a5 = v26[2];
  v14 = v26[3];
  v80 = v26;
  a2 = a5 + 1;
  if (a5 >= v14 >> 1)
    goto LABEL_51;
LABEL_16:
  v80[2] = a2;
  v27 = &v80[10 * a5];
  v27[4] = v78;
  v27[5] = v76;
  v27[6] = v74;
  v27[7] = v72;
  v27[8] = v71;
  v27[9] = v7;
  v27[10] = a4;
  v27[11] = a3;
  v27[12] = v8;
  *((_BYTE *)v27 + 104) = a1;
  sub_1000391DC(v78, v76, v74, v72, v71, v7, (uint64_t)a4, a3, v8, a1);
  swift_errorRelease(v97);
  if (!v15 || v6 < 28)
  {
    v38 = swift_allocError(&type metadata for KMError, v69, 0, 0);
    v40 = v38;
    v15 = 0;
    *(_QWORD *)v39 = 0xD000000000000033;
    v42 = 0x800000010012C440;
    v41 = 255;
    a4 = v83;
    v31 = v80;
LABEL_32:
    *(_QWORD *)(v39 + 8) = v42;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_OWORD *)(v39 + 32) = 0u;
    *(_OWORD *)(v39 + 48) = 0u;
    *(_QWORD *)(v39 + 64) = 0;
    *(_BYTE *)(v39 + 72) = 24;
    swift_willThrow(v38);
    v97 = v40;
    swift_errorRetain(v40);
    v43 = sub_100005C88(&qword_10015AB50);
    if (swift_dynamicCast(&v86, &v97, v43, &type metadata for KMError, 0))
    {
      v81 = v41;
      v84 = a4;
      swift_errorRelease(v40);
      v44 = v87;
      v45 = v88;
      v46 = v89;
      v47 = v90;
      v48 = v94;
      v49 = v95;
      v77 = v91;
      v79 = v86;
      v73 = v93;
      v75 = (uint64_t)v92;
      sub_1000515CC(v86, v87, v88, v89, v90, v91, (uint64_t)v92, v93, v94, v95);
      if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
        v31 = sub_10008EC3C(0, v31[2] + 1, 1, v31);
      v51 = v31[2];
      v50 = v31[3];
      v52 = v31;
      if (v51 >= v50 >> 1)
        v52 = sub_10008EC3C((_QWORD *)(v50 > 1), v51 + 1, 1, v31);
      v52[2] = v51 + 1;
      v31 = v52;
      v53 = &v52[10 * v51];
      v53[4] = v79;
      v53[5] = v44;
      v53[6] = v45;
      v53[7] = v46;
      v53[8] = v47;
      v53[9] = v77;
      v53[10] = v75;
      v53[11] = v73;
      v53[12] = v48;
      *((_BYTE *)v53 + 104) = v49;
      sub_1000391DC(v79, v44, v45, v46, v47, v77, v75, v73, v48, v49);
      swift_errorRelease(v97);
      v8 = 0;
      a4 = v84;
      if (v81 != 255)
        goto LABEL_38;
      goto LABEL_28;
    }
    swift_bridgeObjectRelease(v31);
LABEL_42:
    swift_errorRelease(v97);
    return v54;
  }
  v28 = 0;
  v8 = 0;
  v29 = *(_DWORD *)v15;
  v30 = 255;
  a4 = v83;
  v31 = v80;
  v21 = v70;
LABEL_23:
  if (v29 == -822415874 || v29 == -17958194)
  {
    if (v21)
    {
      v32 = 1;
      goto LABEL_39;
    }
    v37 = sub_1000122F8();
    v38 = swift_allocError(&type metadata for KMError, v37, 0, 0);
    v40 = v38;
    v41 = 0;
    *(_QWORD *)v39 = 0xD00000000000002BLL;
    v42 = 0x800000010012C4D0;
    v15 = v28;
    goto LABEL_32;
  }
  v15 = v28;
  if (v30 != 255)
  {
LABEL_38:
    v32 = 0;
LABEL_39:
    swift_bridgeObjectRelease(v31);
    a4(&v96, v15, v32);
    if (!v8)
      return v96;
    return v54;
  }
LABEL_28:
  v33 = v31[2];
  if (v33 <= 1)
  {
    if (v33 == 1)
    {
      v55 = v31;
      v56 = v31[4];
      v57 = v31[5];
      v58 = v55[6];
      v59 = v55[7];
      v60 = v55[8];
      v61 = v55[9];
      v62 = v55[10];
      v63 = v55[11];
      v82 = v55[12];
      v85 = *((_BYTE *)v55 + 104);
      sub_1000515CC(v56, v57, v58, v59, v60, v61, v62, v63, v82, v85);
      swift_bridgeObjectRelease(v55);
      v64 = sub_1000122F8();
      v35 = swift_allocError(&type metadata for KMError, v64, 0, 0);
      *(_QWORD *)v66 = v56;
      *(_QWORD *)(v66 + 8) = v57;
      *(_QWORD *)(v66 + 16) = v58;
      *(_QWORD *)(v66 + 24) = v59;
      *(_QWORD *)(v66 + 32) = v60;
      *(_QWORD *)(v66 + 40) = v61;
      *(_QWORD *)(v66 + 48) = v62;
      *(_QWORD *)(v66 + 56) = v63;
      *(_QWORD *)(v66 + 64) = v82;
      v67 = v85;
    }
    else
    {
      swift_bridgeObjectRelease(v31);
      v65 = sub_1000122F8();
      v35 = swift_allocError(&type metadata for KMError, v65, 0, 0);
      *(_QWORD *)v66 = 0xD000000000000040;
      *(_QWORD *)(v66 + 8) = 0x800000010012C480;
      *(_OWORD *)(v66 + 16) = 0u;
      *(_OWORD *)(v66 + 32) = 0u;
      *(_OWORD *)(v66 + 48) = 0u;
      *(_QWORD *)(v66 + 64) = 0;
      v67 = 50;
    }
    *(_BYTE *)(v66 + 72) = v67;
  }
  else
  {
    v34 = sub_1000122F8();
    v35 = swift_allocError(&type metadata for KMError, v34, 0, 0);
    *(_QWORD *)v36 = v31;
    *(_OWORD *)(v36 + 8) = 0u;
    *(_OWORD *)(v36 + 24) = 0u;
    *(_OWORD *)(v36 + 40) = 0u;
    *(_OWORD *)(v36 + 56) = 0u;
    *(_BYTE *)(v36 + 72) = 0;
  }
  swift_willThrow(v35);
  return v54;
}

uint64_t sub_1000EF6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v9;
  uint64_t result;
  uint32_t *v16;
  uint64_t v17;

  result = __DataStorage._bytes.getter();
  v16 = (uint32_t *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v16 = (uint32_t *)((char *)v16 + a1 - result);
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  result = sub_1000E6B88(v16, a6, a7, a8, a9, (uint64_t)&v17);
  if (!v9)
    return v17;
  return result;
}

uint64_t sub_1000EF770(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;

  v2 = result;
  if (!a2)
  {
    swift_release(result);
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    v10 = type metadata accessor for Data.RangeReference(0);
    v4 = swift_allocObject(v10, 32, 7);
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = a2;
    return v4;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = (_BYTE *)__DataStorage._bytes.getter();
    if (!v5)
    {
LABEL_10:
      v6 = __DataStorage._length.getter();
      if (v6 >= a2)
        v7 = a2;
      else
        v7 = v6;
      v8 = &v5[v7];
      if (v5)
        v9 = v8;
      else
        v9 = 0;
      v4 = sub_1000DA028(v5, v9);
      swift_release(v2);
      return v4;
    }
    result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v5 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EF854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;

  sub_100005C88(&qword_10015BE18);
  result = static _DictionaryStorage.copy(original:)(a1);
  v5 = (_QWORD *)result;
  v6 = 0;
  v7 = *(_QWORD *)(a1 + 64);
  v39 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = result + 64;
  if ((v9 & v7) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v13 = (v10 - 1) & v10;
  for (i = v12 | (v6 << 6); ; i = __clz(__rbit64(v16)) + (v6 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 32 * i);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    v23 = *(_QWORD *)(a1 + 56) + 24 * i;
    v42 = v6;
    v41 = v13;
    if ((*(_BYTE *)(v23 + 16) & 1) != 0)
    {
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v22);
      result = 0;
      v24 = 0xF000000000000000;
    }
    else
    {
      v25 = v5;
      v26 = v11;
      v27 = a1;
      v29 = *(_QWORD *)v23;
      v28 = *(_QWORD *)(v23 + 8);
      swift_bridgeObjectRetain(v20);
      v30 = swift_bridgeObjectRetain(v22);
      v31 = v29;
      a1 = v27;
      v11 = v26;
      v5 = v25;
      result = Data._Representation.subscript.getter(v31, v28, a2, a3, v30);
    }
    *(_QWORD *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v32 = (_QWORD *)(v5[6] + 32 * i);
    *v32 = v19;
    v32[1] = v20;
    v32[2] = v21;
    v32[3] = v22;
    v33 = (uint64_t *)(v5[7] + 16 * i);
    *v33 = result;
    v33[1] = v24;
    v34 = v5[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v5[2] = v36;
    v6 = v42;
    v10 = v41;
    if (v41)
      goto LABEL_4;
LABEL_5:
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_27;
    if (v15 >= v40)
      return (uint64_t)v5;
    v16 = *(_QWORD *)(v39 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v40)
        return (uint64_t)v5;
      v16 = *(_QWORD *)(v39 + 8 * v6);
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v40)
          return (uint64_t)v5;
        v16 = *(_QWORD *)(v39 + 8 * v6);
        if (!v16)
          break;
      }
    }
LABEL_18:
    v13 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v40)
    return (uint64_t)v5;
  v16 = *(_QWORD *)(v39 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v40)
      return (uint64_t)v5;
    v16 = *(_QWORD *)(v39 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_1000EFAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (!v3)
    return v4;
  v52 = _swiftEmptyArrayStorage;
  sub_1000EE9AC(0, v3, 0);
  v4 = _swiftEmptyArrayStorage;
  v7 = (_QWORD *)(a1 + 32);
  v45 = a3;
  while (1)
  {
    v8 = *v7;
    swift_bridgeObjectRetain(*v7);
    v9 = (uint64_t *)sub_10008FFFC();
    if (!*(_QWORD *)(v8 + 16))
    {
      v50 = 0u;
      v51 = 0u;
LABEL_12:
      sub_1000124F8((uint64_t)&v50, &qword_100158018);
      goto LABEL_13;
    }
    v10 = *v9;
    v11 = v9[1];
    swift_bridgeObjectRetain(v11);
    v12 = sub_100005DE8(v10, v11);
    if ((v13 & 1) == 0)
    {
      v50 = 0u;
      v51 = 0u;
      swift_bridgeObjectRelease(v11);
      goto LABEL_12;
    }
    sub_100005D28(*(_QWORD *)(v8 + 56) + 32 * v12, (uint64_t)&v50);
    swift_bridgeObjectRelease(v11);
    if (!*((_QWORD *)&v51 + 1))
      goto LABEL_12;
    if ((swift_dynamicCast(&v48, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v15 = v48;
      v14 = v49;
      v16 = (uint64_t *)sub_100090014();
      if (*(_QWORD *)(v8 + 16))
      {
        v17 = *v16;
        v18 = v16[1];
        swift_bridgeObjectRetain(v18);
        v19 = sub_100005DE8(v17, v18);
        if ((v20 & 1) != 0)
        {
          sub_100005D28(*(_QWORD *)(v8 + 56) + 32 * v19, (uint64_t)&v50);
        }
        else
        {
          v50 = 0u;
          v51 = 0u;
        }
        swift_bridgeObjectRelease(v18);
        if (*((_QWORD *)&v51 + 1))
        {
          if ((swift_dynamicCast(&v48, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
          {
            v31 = v49;
            v44 = v48;
            v32 = swift_allocObject(&unk_10014FCF8, 56, 7);
            *(_QWORD *)(v32 + 16) = a2;
            *(_QWORD *)(v32 + 24) = v45;
            v33 = swift_allocObject(&unk_10014FCD0, 32, 7);
            *(_QWORD *)(v33 + 16) = a2;
            *(_QWORD *)(v33 + 24) = v45;
            *(_QWORD *)(v32 + 32) = v44;
            *(_QWORD *)(v32 + 40) = v31;
            a3 = v45;
            v27 = v32 | 0x8000000000000000;
            *(_QWORD *)(v32 + 48) = v33;
            swift_bridgeObjectRetain(v45);
            goto LABEL_20;
          }
          goto LABEL_31;
        }
      }
      else
      {
        v50 = 0u;
        v51 = 0u;
      }
      sub_1000124F8((uint64_t)&v50, &qword_100158018);
LABEL_31:
      v27 = swift_allocObject(&unk_10014FCD0, 32, 7);
      *(_QWORD *)(v27 + 16) = a2;
      *(_QWORD *)(v27 + 24) = a3;
      goto LABEL_20;
    }
LABEL_13:
    v21 = (uint64_t *)sub_100090008();
    if (!*(_QWORD *)(v8 + 16))
      break;
    v22 = *v21;
    v23 = v21[1];
    swift_bridgeObjectRetain(v23);
    v24 = sub_100005DE8(v22, v23);
    if ((v25 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(v8 + 56) + 32 * v24, (uint64_t)&v50);
    }
    else
    {
      v50 = 0u;
      v51 = 0u;
    }
    swift_bridgeObjectRelease(v23);
    if (!*((_QWORD *)&v51 + 1))
      goto LABEL_33;
    if ((swift_dynamicCast(&v48, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
      goto LABEL_34;
    v15 = v48;
    v14 = v49;
    v26 = swift_allocObject(&unk_10014FCD0, 32, 7);
    *(_QWORD *)(v26 + 16) = a2;
    *(_QWORD *)(v26 + 24) = a3;
    v27 = v26 | 0x4000000000000000;
LABEL_20:
    swift_bridgeObjectRetain(a3);
    if (v47)
      goto LABEL_35;
    swift_bridgeObjectRelease(v8);
    v52 = v4;
    v29 = v4[2];
    v28 = v4[3];
    if (v29 >= v28 >> 1)
    {
      sub_1000EE9AC((char *)(v28 > 1), v29 + 1, 1);
      v4 = v52;
    }
    v4[2] = v29 + 1;
    v30 = &v4[3 * v29];
    v30[4] = v15;
    v30[5] = v14;
    v30[6] = v27;
    ++v7;
    --v3;
    a3 = v45;
    if (!v3)
      return v4;
  }
  v50 = 0u;
  v51 = 0u;
LABEL_33:
  sub_1000124F8((uint64_t)&v50, &qword_100158018);
LABEL_34:
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(*((_QWORD *)&v50 + 1));
  *(_QWORD *)&v50 = 0xD000000000000025;
  *((_QWORD *)&v50 + 1) = 0x800000010012C8C0;
  v34 = swift_bridgeObjectRetain(v8);
  v35 = Dictionary.description.getter(v34);
  v37 = v36;
  swift_bridgeObjectRelease(v8);
  v38._countAndFlagsBits = v35;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v37);
  v39 = v50;
  v40 = sub_1000122F8();
  v41 = swift_allocError(&type metadata for KMError, v40, 0, 0);
  *(_OWORD *)v42 = v39;
  *(_OWORD *)(v42 + 16) = 0u;
  *(_OWORD *)(v42 + 32) = 0u;
  *(_OWORD *)(v42 + 48) = 0u;
  *(_QWORD *)(v42 + 64) = 0;
  *(_BYTE *)(v42 + 72) = 24;
  swift_willThrow(v41);
LABEL_35:
  swift_release(v4);
  swift_bridgeObjectRelease(v8);
  return v4;
}

uint64_t sub_1000EFF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = __DataStorage._bytes.getter();
  v12 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v12 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  result = sub_1000E82F4(v12, a4, a5, a6);
  if (!v13)
    return v14;
  return result;
}

Swift::Int sub_1000F0004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005C88(&qword_100159E58);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28, *(_QWORD *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1000F01A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F01C8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F023C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _QWORD v15[6];
  uint64_t v16;

  if (*(_DWORD *)a1 != -2147483595)
    return 2;
  if (a1 + (unint64_t)*(unsigned int *)(a1 + 4) > a4)
    return 0xFFFFFFFFLL;
  v6 = v4[2];
  v16 = v4[3];
  v7 = v4[4];
  v8 = v4[5] + 16;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = String.init(cString:)(a1 + *(unsigned int *)(a1 + 24));
  v12 = v11;
  if ((sub_100083E04(v10, v11, v7) & 1) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v16 + 56))(v15, v9, v6);
    v15[5] = v9;
    swift_beginAccess(v8, v14, 33, 0);
    sub_1000E1714((uint64_t)v15, v10, v12);
    swift_endAccess(v14);
  }
  else
  {
    swift_bridgeObjectRelease(v12);
  }
  v13 = *(_QWORD *)(v7 + 16);
  swift_beginAccess(v8, v15, 0, 0);
  return 2 * (v13 != *(_QWORD *)(*(_QWORD *)v8 + 16));
}

_QWORD *sub_1000F0384(uint64_t a1, int64_t a2, uint64_t a3, _QWORD *(*a4)(_QWORD *__return_ptr, _QWORD, _QWORD), unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  int v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *result;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  _QWORD *(*v80)(_QWORD *__return_ptr, _QWORD, _QWORD);
  _QWORD *(*v81)(_QWORD *__return_ptr, _QWORD, _QWORD);
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *(*v89)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v90;
  uint64_t v91;
  char v92;
  _QWORD v93[2];
  int v94;
  uint64_t v95;

  v8 = v5;
  v15 = (char *)__DataStorage._bytes.getter();
  if (v15)
  {
    v16 = __DataStorage._offset.getter();
    v14 = a1 - v16;
    if (__OFSUB__(a1, v16))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      v77 = sub_10008EC3C((_QWORD *)(v14 > 1), a2, 1, v77);
      goto LABEL_16;
    }
    v15 += v14;
  }
  v17 = __OFSUB__(a2, a1);
  a2 -= a1;
  if (v17)
  {
    __break(1u);
    goto LABEL_50;
  }
  v18 = __DataStorage._length.getter();
  if (v18 >= a2)
    v19 = a2;
  else
    v19 = v18;
  v20 = &v15[v19];
  if (!v15)
    v20 = 0;
  v6 = v20 - v15;
  LODWORD(a1) = v20 - v15 < 32 || v15 == 0;
  if ((a1 & 1) == 0)
  {
    v29 = 0;
    v28 = *(_DWORD *)v15;
    v30 = _swiftEmptyArrayStorage;
    if (*(_DWORD *)v15 == -805638658 || v28 == -17958193)
    {
      v27 = v15;
    }
    else
    {
      v27 = 0;
      LOBYTE(a1) = 1;
      v29 = 255;
    }
    goto LABEL_23;
  }
  v21 = sub_1000122F8();
  v22 = swift_allocError(&type metadata for KMError, v21, 0, 0);
  *(_QWORD *)v23 = 0xD000000000000033;
  *(_QWORD *)(v23 + 8) = 0x800000010012C400;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(_QWORD *)(v23 + 64) = 0;
  *(_BYTE *)(v23 + 72) = 24;
  swift_willThrow(v22);
  v93[0] = v22;
  swift_errorRetain(v22);
  v24 = sub_100005C88(&qword_10015AB50);
  if (!swift_dynamicCast(&v83, v93, v24, &type metadata for KMError, 0))
    return (_QWORD *)swift_errorRelease(v93[0]);
  v67 = v21;
  v94 = a1;
  v80 = a4;
  swift_errorRelease(v22);
  v7 = v88;
  a4 = v89;
  a3 = v90;
  v8 = v91;
  LOBYTE(a1) = v92;
  v73 = v84;
  v75 = v83;
  v69 = v86;
  v71 = v85;
  v68 = v87;
  sub_1000515CC(v83, v84, v85, v86, v87, v88, (uint64_t)v89, v90, v91, v92);
  v25 = sub_10008EC3C(0, 1, 1, _swiftEmptyArrayStorage);
  a5 = v25[2];
  v14 = v25[3];
  v77 = v25;
  a2 = a5 + 1;
  if (a5 >= v14 >> 1)
    goto LABEL_51;
LABEL_16:
  v77[2] = a2;
  v26 = &v77[10 * a5];
  v26[4] = v75;
  v26[5] = v73;
  v26[6] = v71;
  v26[7] = v69;
  v26[8] = v68;
  v26[9] = v7;
  v26[10] = a4;
  v26[11] = a3;
  v26[12] = v8;
  *((_BYTE *)v26 + 104) = a1;
  sub_1000391DC(v75, v73, v71, v69, v68, v7, (uint64_t)a4, a3, v8, a1);
  swift_errorRelease(v93[0]);
  if (!v15 || v6 < 28)
  {
    v37 = swift_allocError(&type metadata for KMError, v67, 0, 0);
    v39 = v37;
    v15 = 0;
    *(_QWORD *)v38 = 0xD000000000000033;
    v41 = 0x800000010012C440;
    v40 = 255;
    a4 = v80;
    v30 = v77;
LABEL_32:
    *(_QWORD *)(v38 + 8) = v41;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(_OWORD *)(v38 + 48) = 0u;
    *(_QWORD *)(v38 + 64) = 0;
    *(_BYTE *)(v38 + 72) = 24;
    swift_willThrow(v37);
    v93[0] = v39;
    swift_errorRetain(v39);
    v42 = sub_100005C88(&qword_10015AB50);
    if (swift_dynamicCast(&v83, v93, v42, &type metadata for KMError, 0))
    {
      v78 = v40;
      v81 = a4;
      swift_errorRelease(v39);
      v43 = v84;
      v44 = v85;
      v45 = v86;
      v46 = v87;
      v47 = v91;
      v48 = v92;
      v74 = v88;
      v76 = v83;
      v70 = v90;
      v72 = (uint64_t)v89;
      sub_1000515CC(v83, v84, v85, v86, v87, v88, (uint64_t)v89, v90, v91, v92);
      if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
        v30 = sub_10008EC3C(0, v30[2] + 1, 1, v30);
      v50 = v30[2];
      v49 = v30[3];
      v51 = v30;
      if (v50 >= v49 >> 1)
        v51 = sub_10008EC3C((_QWORD *)(v49 > 1), v50 + 1, 1, v30);
      v51[2] = v50 + 1;
      v30 = v51;
      v52 = &v51[10 * v50];
      v52[4] = v76;
      v52[5] = v43;
      v52[6] = v44;
      v52[7] = v45;
      v52[8] = v46;
      v52[9] = v74;
      v52[10] = v72;
      v52[11] = v70;
      v52[12] = v47;
      *((_BYTE *)v52 + 104) = v48;
      sub_1000391DC(v76, v43, v44, v45, v46, v74, v72, v70, v47, v48);
      swift_errorRelease(v93[0]);
      v8 = 0;
      a4 = v81;
      if (v78 != 255)
        goto LABEL_38;
      goto LABEL_28;
    }
    swift_bridgeObjectRelease(v30);
    return (_QWORD *)swift_errorRelease(v93[0]);
  }
  v27 = 0;
  v8 = 0;
  v28 = *(_DWORD *)v15;
  v29 = 255;
  a4 = v80;
  v30 = v77;
  LOBYTE(a1) = v94;
LABEL_23:
  if (v28 == -822415874 || v28 == -17958194)
  {
    if ((a1 & 1) != 0)
    {
      v31 = 1;
      goto LABEL_39;
    }
    v36 = sub_1000122F8();
    v37 = swift_allocError(&type metadata for KMError, v36, 0, 0);
    v39 = v37;
    v40 = 0;
    *(_QWORD *)v38 = 0xD00000000000002BLL;
    v41 = 0x800000010012C4D0;
    v15 = v27;
    goto LABEL_32;
  }
  v15 = v27;
  if (v29 != 255)
  {
LABEL_38:
    v31 = 0;
LABEL_39:
    swift_bridgeObjectRelease(v30);
    result = a4(&v95, v15, v31);
    if (!v8)
      return (_QWORD *)v95;
    return result;
  }
LABEL_28:
  v32 = v30[2];
  if (v32 <= 1)
  {
    if (v32 == 1)
    {
      v54 = v30;
      v55 = v30[4];
      v56 = v30[5];
      v57 = v54[6];
      v58 = v54[7];
      v59 = v54[8];
      v60 = v54[9];
      v61 = v54[10];
      v62 = v54[11];
      v79 = v54[12];
      v82 = *((_BYTE *)v54 + 104);
      sub_1000515CC(v55, v56, v57, v58, v59, v60, v61, v62, v79, v82);
      swift_bridgeObjectRelease(v54);
      v63 = sub_1000122F8();
      v34 = swift_allocError(&type metadata for KMError, v63, 0, 0);
      *(_QWORD *)v65 = v55;
      *(_QWORD *)(v65 + 8) = v56;
      *(_QWORD *)(v65 + 16) = v57;
      *(_QWORD *)(v65 + 24) = v58;
      *(_QWORD *)(v65 + 32) = v59;
      *(_QWORD *)(v65 + 40) = v60;
      *(_QWORD *)(v65 + 48) = v61;
      *(_QWORD *)(v65 + 56) = v62;
      *(_QWORD *)(v65 + 64) = v79;
      v66 = v82;
    }
    else
    {
      swift_bridgeObjectRelease(v30);
      v64 = sub_1000122F8();
      v34 = swift_allocError(&type metadata for KMError, v64, 0, 0);
      *(_QWORD *)v65 = 0xD000000000000040;
      *(_QWORD *)(v65 + 8) = 0x800000010012C480;
      *(_OWORD *)(v65 + 16) = 0u;
      *(_OWORD *)(v65 + 32) = 0u;
      *(_OWORD *)(v65 + 48) = 0u;
      *(_QWORD *)(v65 + 64) = 0;
      v66 = 50;
    }
    *(_BYTE *)(v65 + 72) = v66;
  }
  else
  {
    v33 = sub_1000122F8();
    v34 = swift_allocError(&type metadata for KMError, v33, 0, 0);
    *(_QWORD *)v35 = v30;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    *(_OWORD *)(v35 + 56) = 0u;
    *(_BYTE *)(v35 + 72) = 0;
  }
  return (_QWORD *)swift_willThrow(v34);
}

void sub_1000F09FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;

  v8 = __DataStorage._bytes.getter();
  if (v8)
  {
    v9 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v9))
      goto LABEL_7;
    v8 += a1 - v9;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1000E5728(v8, a5, (uint64_t)&v10);
    return;
  }
  __break(1u);
LABEL_7:
  __break(1u);
}

_QWORD *sub_1000F0AC8(unint64_t a1, int64_t a2, uint64_t a3, _QWORD *(*a4)(_QWORD *__return_ptr, _QWORD, _QWORD), unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int64_t v19;
  char *v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  int v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *result;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  _QWORD *(*v83)(_QWORD *__return_ptr, _QWORD, _QWORD);
  _QWORD *(*v84)(_QWORD *__return_ptr, _QWORD, _QWORD);
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *(*v92)(_QWORD *__return_ptr, _QWORD, _QWORD);
  uint64_t v93;
  uint64_t v94;
  char v95;
  _QWORD v96[2];
  uint64_t v97;

  v8 = v5;
  v15 = (char *)__DataStorage._bytes.getter();
  if (v15)
  {
    v16 = __DataStorage._offset.getter();
    v14 = a1 - v16;
    if (__OFSUB__(a1, v16))
    {
LABEL_53:
      __break(1u);
LABEL_54:
      v80 = sub_10008EC3C((_QWORD *)(v14 > 1), a2, 1, v80);
      goto LABEL_16;
    }
    v15 += v14;
  }
  v17 = __OFSUB__(a2, a1);
  a2 -= a1;
  if (v17)
  {
    __break(1u);
    goto LABEL_53;
  }
  v18 = __DataStorage._length.getter();
  if (v18 >= a2)
    v19 = a2;
  else
    v19 = v18;
  v20 = &v15[v19];
  if (!v15)
    v20 = 0;
  v6 = v20 - v15;
  v21 = v20 - v15 < 32 || v15 == 0;
  if (!v21)
  {
    v29 = 0;
    v28 = *(_DWORD *)v15;
    v30 = _swiftEmptyArrayStorage;
    if (*(_DWORD *)v15 == -805638658 || v28 == -17958193)
    {
      v27 = v15;
    }
    else
    {
      v27 = 0;
      LOBYTE(v21) = 1;
      v29 = 255;
    }
    goto LABEL_23;
  }
  a1 = sub_1000122F8();
  v22 = swift_allocError(&type metadata for KMError, a1, 0, 0);
  *(_QWORD *)v23 = 0xD000000000000033;
  *(_QWORD *)(v23 + 8) = 0x800000010012C400;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(_QWORD *)(v23 + 64) = 0;
  *(_BYTE *)(v23 + 72) = 24;
  swift_willThrow(v22);
  v96[0] = v22;
  swift_errorRetain(v22);
  v24 = sub_100005C88(&qword_10015AB50);
  if ((swift_dynamicCast(&v86, v96, v24, &type metadata for KMError, 0) & 1) == 0)
    goto LABEL_42;
  v69 = a1;
  v70 = 1;
  v83 = a4;
  swift_errorRelease(v22);
  v7 = v91;
  a4 = v92;
  a3 = v93;
  v8 = v94;
  LOBYTE(a1) = v95;
  v76 = v87;
  v78 = v86;
  v72 = v89;
  v74 = v88;
  v71 = v90;
  sub_1000515CC(v86, v87, v88, v89, v90, v91, (uint64_t)v92, v93, v94, v95);
  v25 = sub_10008EC3C(0, 1, 1, _swiftEmptyArrayStorage);
  a5 = v25[2];
  v14 = v25[3];
  v80 = v25;
  a2 = a5 + 1;
  if (a5 >= v14 >> 1)
    goto LABEL_54;
LABEL_16:
  v80[2] = a2;
  v26 = &v80[10 * a5];
  v26[4] = v78;
  v26[5] = v76;
  v26[6] = v74;
  v26[7] = v72;
  v26[8] = v71;
  v26[9] = v7;
  v26[10] = a4;
  v26[11] = a3;
  v26[12] = v8;
  *((_BYTE *)v26 + 104) = a1;
  sub_1000391DC(v78, v76, v74, v72, v71, v7, (uint64_t)a4, a3, v8, a1);
  swift_errorRelease(v96[0]);
  if (!v15 || v6 < 28)
  {
    v33 = swift_allocError(&type metadata for KMError, v69, 0, 0);
    v22 = v33;
    v27 = 0;
    *(_QWORD *)v34 = 0xD000000000000033;
    v36 = 0x800000010012C440;
    v35 = 255;
    a4 = v83;
    v30 = v80;
    goto LABEL_29;
  }
  v27 = 0;
  v8 = 0;
  v28 = *(_DWORD *)v15;
  v29 = 255;
  a4 = v83;
  v30 = v80;
  LOBYTE(v21) = v70;
LABEL_23:
  if (v28 != -17958194 && v28 != -822415874)
    goto LABEL_35;
  if (v21)
  {
    v31 = 1;
LABEL_39:
    swift_bridgeObjectRelease(v30);
    result = a4(&v97, v15, v31);
    if (v8)
      return result;
    LOBYTE(v86) = BYTE4(v97);
    v55 = v97 | ((unint64_t)BYTE4(v97) << 32);
    return (_QWORD *)(v55 | ((HIDWORD(v55) & 1) << 32));
  }
  v32 = sub_1000122F8();
  v33 = swift_allocError(&type metadata for KMError, v32, 0, 0);
  v22 = v33;
  v35 = 0;
  *(_QWORD *)v34 = 0xD00000000000002BLL;
  v36 = 0x800000010012C4D0;
LABEL_29:
  *(_QWORD *)(v34 + 8) = v36;
  *(_OWORD *)(v34 + 16) = 0u;
  *(_OWORD *)(v34 + 32) = 0u;
  *(_OWORD *)(v34 + 48) = 0u;
  *(_QWORD *)(v34 + 64) = 0;
  *(_BYTE *)(v34 + 72) = 24;
  swift_willThrow(v33);
  v96[0] = v22;
  swift_errorRetain(v22);
  v37 = sub_100005C88(&qword_10015AB50);
  if (!swift_dynamicCast(&v86, v96, v37, &type metadata for KMError, 0))
  {
    swift_bridgeObjectRelease(v30);
LABEL_42:
    result = (_QWORD *)swift_errorRelease(v96[0]);
    if (v22)
      return result;
    return (_QWORD *)(v55 | ((HIDWORD(v55) & 1) << 32));
  }
  v79 = v35;
  v81 = v27;
  v84 = a4;
  swift_errorRelease(v22);
  v38 = v87;
  v39 = v88;
  v40 = v89;
  v41 = v90;
  v42 = v91;
  v43 = v94;
  v44 = v95;
  v75 = (uint64_t)v92;
  v77 = v86;
  v73 = v93;
  sub_1000515CC(v86, v87, v88, v89, v90, v91, (uint64_t)v92, v93, v94, v95);
  if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
    v30 = sub_10008EC3C(0, v30[2] + 1, 1, v30);
  v46 = v30[2];
  v45 = v30[3];
  v47 = v30;
  if (v46 >= v45 >> 1)
    v47 = sub_10008EC3C((_QWORD *)(v45 > 1), v46 + 1, 1, v30);
  v47[2] = v46 + 1;
  v30 = v47;
  v48 = &v47[10 * v46];
  v48[4] = v77;
  v48[5] = v38;
  v48[6] = v39;
  v48[7] = v40;
  v48[8] = v41;
  v48[9] = v42;
  v48[10] = v75;
  v48[11] = v73;
  v48[12] = v43;
  *((_BYTE *)v48 + 104) = v44;
  sub_1000391DC(v77, v38, v39, v40, v41, v42, v75, v73, v43, v44);
  swift_errorRelease(v96[0]);
  v8 = 0;
  a4 = v84;
  v27 = v81;
  v29 = v79;
LABEL_35:
  if (v29 != 255)
  {
    v31 = 0;
    v15 = v27;
    goto LABEL_39;
  }
  v49 = v30[2];
  if (v49 <= 1)
  {
    if (v49 == 1)
    {
      v56 = v30;
      v57 = v30[4];
      v58 = v30[5];
      v59 = v56[6];
      v60 = v56[7];
      v61 = v56[8];
      v62 = v56[9];
      v63 = v56[10];
      v64 = v56[11];
      v82 = v56[12];
      v85 = *((_BYTE *)v56 + 104);
      sub_1000515CC(v57, v58, v59, v60, v61, v62, v63, v64, v82, v85);
      swift_bridgeObjectRelease(v56);
      v65 = sub_1000122F8();
      v51 = swift_allocError(&type metadata for KMError, v65, 0, 0);
      v52 = v51;
      *(_QWORD *)v67 = v57;
      *(_QWORD *)(v67 + 8) = v58;
      *(_QWORD *)(v67 + 16) = v59;
      *(_QWORD *)(v67 + 24) = v60;
      *(_QWORD *)(v67 + 32) = v61;
      *(_QWORD *)(v67 + 40) = v62;
      *(_QWORD *)(v67 + 48) = v63;
      *(_QWORD *)(v67 + 56) = v64;
      *(_QWORD *)(v67 + 64) = v82;
      v68 = v85;
    }
    else
    {
      swift_bridgeObjectRelease(v30);
      v66 = sub_1000122F8();
      v51 = swift_allocError(&type metadata for KMError, v66, 0, 0);
      v52 = v51;
      *(_QWORD *)v67 = 0xD000000000000040;
      *(_QWORD *)(v67 + 8) = 0x800000010012C480;
      *(_OWORD *)(v67 + 16) = 0u;
      *(_OWORD *)(v67 + 32) = 0u;
      *(_OWORD *)(v67 + 48) = 0u;
      *(_QWORD *)(v67 + 64) = 0;
      v68 = 50;
    }
    *(_BYTE *)(v67 + 72) = v68;
  }
  else
  {
    v50 = sub_1000122F8();
    v51 = swift_allocError(&type metadata for KMError, v50, 0, 0);
    v52 = v51;
    *(_QWORD *)v53 = v30;
    *(_OWORD *)(v53 + 8) = 0u;
    *(_OWORD *)(v53 + 24) = 0u;
    *(_OWORD *)(v53 + 40) = 0u;
    *(_OWORD *)(v53 + 56) = 0u;
    *(_BYTE *)(v53 + 72) = 0;
  }
  result = (_QWORD *)swift_willThrow(v51);
  if (!v52)
    return (_QWORD *)(v55 | ((HIDWORD(v55) & 1) << 32));
  return result;
}

uint64_t sub_1000F1170(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return (uint64_t)_swiftEmptyArrayStorage;
  v5 = 0;
  v6 = result + 40;
  v7 = -(uint64_t)v3;
  v8 = _swiftEmptyArrayStorage;
  v22 = result + 40;
  v23 = *(_QWORD *)(result + 16);
  do
  {
    v24 = v8;
    if (v5 <= v3)
      v9 = v3;
    else
      v9 = v5;
    v10 = -(uint64_t)v9;
    for (i = (_QWORD *)(v6 + 16 * v5++); ; i += 2)
    {
      if (v10 + v5 == 1)
      {
        __break(1u);
        return result;
      }
      v13 = *(i - 1);
      v12 = *i;
      swift_bridgeObjectRetain_n(*i, 2);
      v14 = sub_1000D3FAC(a2, a3);
      if (!v15)
        break;
      v16 = v15;
      if (v13 == v14 && v15 == v12)
      {
        swift_bridgeObjectRelease_n(v12, 2);
        result = swift_bridgeObjectRelease(v16);
      }
      else
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, v14, v15, 0);
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v16);
        if ((v18 & 1) == 0)
          goto LABEL_18;
        result = swift_bridgeObjectRelease(v12);
      }
      ++v5;
      if (v7 + v5 == 1)
        return (uint64_t)v24;
    }
    swift_bridgeObjectRelease(v12);
LABEL_18:
    v8 = v24;
    result = swift_isUniquelyReferenced_nonNull_native(v24);
    if ((result & 1) == 0)
    {
      result = sub_10000C958(0, v24[2] + 1, 1);
      v8 = v24;
    }
    v20 = v8[2];
    v19 = v8[3];
    if (v20 >= v19 >> 1)
    {
      result = sub_10000C958(v19 > 1, v20 + 1, 1);
      v8 = v24;
    }
    v8[2] = v20 + 1;
    v21 = &v8[2 * v20];
    v21[4] = v13;
    v21[5] = v12;
    v6 = v22;
    v3 = v23;
  }
  while (v7 + v5);
  return (uint64_t)v8;
}

uint64_t sub_1000F1348(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  return sub_1000E258C(a1, a4, v4);
}

uint64_t sub_1000F1374()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F1384(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  if (*(_DWORD *)a1 != 42)
    return 2;
  v2 = *(_QWORD *)(a1 + 8);
  swift_beginAccess(v1 + 16, v4, 1, 0);
  result = 0;
  *(_QWORD *)(v1 + 16) = v2;
  *(_BYTE *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1000F13E8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  swift_release(*(_QWORD *)&v0[v6]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v7 + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v8]);
  return swift_deallocObject(v0, v8 + 8, v5);
}

uint64_t sub_1000F14A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, __n128, uint64_t, uint64_t);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];
  _QWORD v37[3];
  _BYTE v38[24];
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(_DWORD *)a1 != -2147483595)
    return 2;
  if (a1 + (unint64_t)*(unsigned int *)(a1 + 4) > a4)
    return 0xFFFFFFFFLL;
  v7 = v4[2];
  v8 = v4[3];
  v9 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = v4[4];
  v29 = *(_QWORD *)((char *)v4 + v9);
  v34 = *(_QWORD *)((char *)v4 + v10);
  v32 = *(_QWORD *)((char *)v4 + v10 + 16);
  v33 = *(_QWORD *)((char *)v4 + v10 + 8);
  v35 = *(_QWORD *)((char *)v4 + ((v10 + 31) & 0xFFFFFFFFFFFFF8));
  v12 = v4[5] + 16;
  v31 = *(_QWORD *)(a1 + 16);
  v42 = String.init(cString:)(a1 + *(unsigned int *)(a1 + 24));
  v14 = v13;
  v30 = v11;
  if (!v11)
    goto LABEL_7;
  swift_beginAccess(v12, v36, 0, 0);
  v15 = v12;
  v16 = *(_QWORD *)v12;
  swift_bridgeObjectRetain(v16);
  v17 = sub_100083E04(v42, v14, v16);
  v18 = v16;
  v12 = v15;
  swift_bridgeObjectRelease(v18);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease(v14);
  }
  else
  {
LABEL_7:
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v8 + 56))(v39, v31, v7, v8);
    v19 = v40;
    v20 = v41;
    sub_100004DE4(v39, v40);
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, __n128, uint64_t, uint64_t))(v20 + 40);
    v22 = swift_bridgeObjectRetain(v14);
    v23 = v21(v34, v33, v32, v31, 0, v42, v14, v35, v22, v19, v20);
    if (v5)
    {
      swift_bridgeObjectRelease_n(v14, 2);
      return sub_100005D08(v39);
    }
    v24 = v23;
    v25 = v29 + 16;
    swift_bridgeObjectRelease(v14);
    swift_beginAccess(v29 + 16, v38, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v29 + 16));
    v37[0] = *(_QWORD *)(v29 + 16);
    *(_QWORD *)(v29 + 16) = 0x8000000000000000;
    sub_1000ED468(v24, v42, v14, isUniquelyReferenced_nonNull_native);
    v27 = *(_QWORD *)(v29 + 16);
    *(_QWORD *)(v29 + 16) = v37[0];
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v27);
    swift_endAccess(v38);
    if (v30)
    {
      swift_beginAccess(v12, v38, 0, 0);
      v28 = *(_QWORD *)(*(_QWORD *)v12 + 16);
      swift_beginAccess(v25, v37, 0, 0);
      if (v28 == *(_QWORD *)(*(_QWORD *)v25 + 16))
      {
        sub_100005D08(v39);
        return 0;
      }
    }
    sub_100005D08(v39);
  }
  return 2;
}

uint64_t sub_1000F1768(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_release(a2);
    return swift_errorRelease(a5);
  }
  return result;
}

uint64_t sub_1000F1798()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F17BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E5B7C(a1, *(uint64_t (**)(_QWORD *))(v1 + 16));
}

uint64_t sub_1000F17D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a3;
    v6 = *(_QWORD *)(a3 + 8);
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(unsigned __int8 *)(a3 + 24);
    swift_retain(v6);
    v3 = v7(a1, v8, v9, a2);
    swift_release(v6);
  }
  return v3;
}

uint64_t sub_1000F187C()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  Swift::String v3;
  void *v4;
  Swift::String v5;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 44;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x286E776F6E6B6E55;
}

uint64_t sub_1000F194C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint32_t *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  result = __DataStorage._bytes.getter();
  v10 = (uint32_t *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v10 = (uint32_t *)((char *)v10 + a1 - result);
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_15;
  }
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = (char *)v10 + v14;
  if (v10)
    v16 = (uint64_t)v15;
  else
    v16 = 0;
  result = sub_1000E5E7C(v10, v16, a5, &v17);
  if (!v5)
    return v17;
  return result;
}

uint64_t sub_1000F19FC(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000E8C68(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

BOOL sub_1000F1A34()
{
  BOOL v0;

  if (Img4DecodeInitPayload)
    v0 = Img4DecodeInit == 0;
  else
    v0 = 1;
  return !v0 && Img4EncodeCreatePayload != 0;
}

uint64_t sub_1000F1A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  char v12;
  char v13;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_1000EB0D4(v11, a4, a5);
  if (!v5)
    v12 = v13;
  return v12 & 1;
}

uint64_t sub_1000F1B00()
{
  BOOL v0;
  unsigned int v2;
  BOOL v3;

  if (&AMAuthInstallApSetParameters)
    v0 = &AMAuthInstallBundleCopyBuildIdentityForVariant == 0;
  else
    v0 = 1;
  v2 = !v0 && &AMAuthInstallCreate != 0;
  if (&_AMAuthInstallApImg4CreatePayloadWithProperties)
    v3 = &_AMAuthInstallApImg4GetPayloadPropertiesData == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  else
    return v2;
}

unint64_t sub_1000F1B4C()
{
  unint64_t result;

  result = qword_10015BDC8;
  if (!qword_10015BDC8)
  {
    result = swift_getWitnessTable(&unk_10011ABC8, &type metadata for MachOSegmentName);
    atomic_store(result, (unint64_t *)&qword_10015BDC8);
  }
  return result;
}

unint64_t sub_1000F1B94()
{
  unint64_t result;

  result = qword_10015BDD0;
  if (!qword_10015BDD0)
  {
    result = swift_getWitnessTable(&unk_10011AC30, &type metadata for MachOSectionName);
    atomic_store(result, (unint64_t *)&qword_10015BDD0);
  }
  return result;
}

unint64_t sub_1000F1BE4()
{
  unint64_t result;

  result = qword_10015BDD8;
  if (!qword_10015BDD8)
  {
    result = swift_getWitnessTable(&unk_10011ADA0, &type metadata for MachOSourceVersion);
    atomic_store(result, (unint64_t *)&qword_10015BDD8);
  }
  return result;
}

unint64_t sub_1000F1C2C()
{
  unint64_t result;

  result = qword_10015BDE0;
  if (!qword_10015BDE0)
  {
    result = swift_getWitnessTable(&unk_10011AE40, &type metadata for FilesetOffset);
    atomic_store(result, (unint64_t *)&qword_10015BDE0);
  }
  return result;
}

unint64_t sub_1000F1C74()
{
  unint64_t result;

  result = qword_10015BDE8;
  if (!qword_10015BDE8)
  {
    result = swift_getWitnessTable(&unk_10011AEE0, &type metadata for MachOFileSize);
    atomic_store(result, (unint64_t *)&qword_10015BDE8);
  }
  return result;
}

unint64_t sub_1000F1CBC()
{
  unint64_t result;

  result = qword_10015BDF0;
  if (!qword_10015BDF0)
  {
    result = swift_getWitnessTable(&unk_10011AF80, &type metadata for MachOAddress);
    atomic_store(result, (unint64_t *)&qword_10015BDF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MachOSegmentName()
{
  return &type metadata for MachOSegmentName;
}

ValueMetadata *type metadata accessor for MachOSectionName()
{
  return &type metadata for MachOSectionName;
}

unint64_t destroy for MachOSymbol(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return sub_10004F8CC(*(_QWORD *)(a1 + 16));
}

_QWORD *_s10driverkitd11MachOSymbolVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  swift_bridgeObjectRetain(v3);
  sub_10004F8A8(v4);
  a1[2] = v4;
  return a1;
}

_QWORD *assignWithCopy for MachOSymbol(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  sub_10004F8A8(v6);
  v7 = a1[2];
  a1[2] = v6;
  sub_10004F8CC(v7);
  return a1;
}

_QWORD *assignWithTake for MachOSymbol(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  a1[2] = a2[2];
  sub_10004F8CC(v6);
  return a1;
}

ValueMetadata *type metadata accessor for MachOSymbol()
{
  return &type metadata for MachOSymbol;
}

unint64_t *initializeBufferWithCopyOfBuffer for MachOSymbol.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_10004F8A8(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for MachOSymbol.Kind(unint64_t *a1)
{
  return sub_10004F8CC(*a1);
}

unint64_t *assignWithCopy for MachOSymbol.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_10004F8A8(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_10004F8CC(v4);
  return a1;
}

unint64_t *assignWithTake for MachOSymbol.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_10004F8CC(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MachOSymbol.Kind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MachOSymbol.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1000F1F8C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if ((_DWORD)v1 == 3)
    return (*a1 >> 3) + 3;
  else
    return v1;
}

_QWORD *sub_1000F1FA8(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1000F1FB8(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 3)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 3);
    v3 = 0xC000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for MachOSymbol.Kind()
{
  return &type metadata for MachOSymbol.Kind;
}

ValueMetadata *type metadata accessor for MachOSourceVersion()
{
  return &type metadata for MachOSourceVersion;
}

ValueMetadata *type metadata accessor for Img4PayloadType()
{
  return &type metadata for Img4PayloadType;
}

ValueMetadata *type metadata accessor for FilesetOffset()
{
  return &type metadata for FilesetOffset;
}

ValueMetadata *type metadata accessor for MachOFileSize()
{
  return &type metadata for MachOFileSize;
}

ValueMetadata *type metadata accessor for MachOAddress()
{
  return &type metadata for MachOAddress;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyMachHeader(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AnyMachHeader(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyMachHeader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000F20E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000F20EC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AnyMachHeader()
{
  return &type metadata for AnyMachHeader;
}

__n128 sub_1000F2108(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000F211C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000F213C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 28) = v3;
  return result;
}

void type metadata accessor for mach_header(uint64_t a1)
{
  sub_1000732A8(a1, &qword_10015BDF8, (uint64_t)&unk_10014FB58);
}

__n128 sub_1000F2180(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000F218C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000F21AC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for mach_header_64(uint64_t a1)
{
  sub_1000732A8(a1, &qword_10015BE00, (uint64_t)&unk_10014FBF0);
}

void type metadata accessor for compression_algorithm(uint64_t a1)
{
  sub_1000732A8(a1, &qword_10015BE08, (uint64_t)&unk_10014FC30);
}

void type metadata accessor for macho_seek_result(uint64_t a1)
{
  sub_1000732A8(a1, &qword_10015BE10, (uint64_t)&unk_10014FC58);
}

BOOL sub_1000F2214()
{
  BOOL v0;

  if (DEREncoderCreate)
    v0 = DEREncoderAddUInt32 == 0;
  else
    v0 = 1;
  return !v0;
}

uint64_t sub_1000F2234(unsigned int *a1)
{
  return *a1;
}

BOOL sub_1000F223C(int a1)
{
  return (a1 & 0xFEFFFFFF) == -822415874;
}

unint64_t sub_1000F2254(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_10004F8CC(result);
  return result;
}

uint64_t sub_1000F2268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000E71E8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_1000F2284(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return a1;
}

void sub_1000F22AC(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1000E5A64(a1, a2 & 1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_1000F22E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000F22F0()
{
  uint64_t v0;

}

uint64_t sub_1000F22F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F231C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  sub_10004F8CC(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

__n128 sub_1000F2350(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000F2374(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000F2394(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

void type metadata accessor for segment_command_64(uint64_t a1)
{
  sub_1000732A8(a1, &qword_10015BE68, (uint64_t)&unk_10014FD78);
}

uint64_t sub_1000F23E4(unsigned int a1)
{
  return bswap32(a1);
}

uint64_t sub_1000F240C(uint64_t a1)
{
  return sub_1000F17BC(a1);
}

uint64_t sub_1000F242C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000F2464 + 4 * byte_10011B270[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1000F2464()
{
  return 0x536E6F6973726576;
}

uint64_t sub_1000F2488()
{
  return 0x747365676964;
}

uint64_t sub_1000F249C()
{
  return 0x6150656C646E7562;
}

uint64_t sub_1000F24B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000F74D8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000F24DC(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000F24E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000F7494();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F2510(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000F7494();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F2538(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  __int128 v22;

  v3 = v1;
  v5 = sub_100005C88(&qword_10015BE70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_1000F7494();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OSExtensionCodableLocation.CodingKeys, &type metadata for OSExtensionCodableLocation.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v22) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v22) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v22, v5);
    v22 = *((_OWORD *)v3 + 2);
    v21 = 2;
    v16 = sub_10001A73C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v16);
    v17 = v3[6];
    v18 = v3[7];
    LOBYTE(v22) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_1000F26B4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1000F76C0(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1000F26F4(_QWORD *a1)
{
  return sub_1000F2538(a1);
}

uint64_t sub_1000F2708(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  _OWORD v8[4];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_1000F73DC((uint64_t *)v7, v8) & 1;
}

Swift::Int sub_1000F2750()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v8 = v0[6];
  v7 = v0[7];
  Hasher.init(_seed:)(v10, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v10, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v10, v3, v4);
  swift_bridgeObjectRelease(v4);
  sub_1000122B4(v5, v6);
  Data.hash(into:)(v10, v5, v6);
  sub_100011F40(v5, v6);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v10, v8, v7);
  swift_bridgeObjectRelease(v7);
  return Hasher._finalize()();
}

uint64_t sub_1000F283C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v10 = v1[6];
  v9 = v1[7];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  sub_1000122B4(v7, v8);
  Data.hash(into:)(a1, v7, v8);
  sub_100011F40(v7, v8);
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(a1, v10, v9);
  return swift_bridgeObjectRelease(v9);
}

Swift::Int sub_1000F290C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  Hasher.init(_seed:)(v11, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v11, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v11, v4, v5);
  swift_bridgeObjectRelease(v5);
  sub_1000122B4(v6, v7);
  Data.hash(into:)(v11, v6, v7);
  sub_100011F40(v6, v7);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(v11, v9, v8);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_1000F29F4()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v10;

  v1 = v0[2];
  v2 = (void *)v0[3];
  v3 = v0[6];
  v4 = (void *)v0[7];
  v10 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  v5._countAndFlagsBits = 30240;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain(v2);
  v6._countAndFlagsBits = v1;
  v6._object = v2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v2);
  v7._countAndFlagsBits = 544106784;
  v7._object = (void *)0xE400000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRetain(v4);
  v8._countAndFlagsBits = v3;
  v8._object = v4;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v4);
  return v10;
}

uint64_t sub_1000F2AA0()
{
  __int128 *v0;
  Swift::String v1;
  unint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  __int128 v11;
  __int128 v12;

  v11 = *v0;
  v12 = *v0;
  sub_100066E64((uint64_t)&v12);
  v1._countAndFlagsBits = 30240;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2 = sub_1000F79D8();
  v3._countAndFlagsBits = BinaryInteger.description.getter(&type metadata for Int64, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 544106784;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  v6 = *((_QWORD *)v0 + 6);
  if (v6)
  {
    v7 = *((_QWORD *)v0 + 5);
    v8 = (void *)*((_QWORD *)v0 + 6);
  }
  else
  {
    v8 = (void *)0xE300000000000000;
    v7 = 4144959;
  }
  swift_bridgeObjectRetain(v6);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  return v11;
}

void sub_1000F2B74(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = *v2;
  v5 = v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(v2[2]);
  v6 = v2[4];
  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    v7 = v2[6];
    if (v7)
    {
LABEL_3:
      v8 = v2[5];
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(a1, v8, v7);
      swift_bridgeObjectRelease(v7);
      return;
    }
  }
  else
  {
    v9 = v2[3];
    Hasher._combine(_:)(1u);
    sub_1000122B4(v9, v6);
    Data.hash(into:)(a1, v9, v6);
    sub_100021610(v9, v6);
    v7 = v2[6];
    if (v7)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
}

uint64_t sub_1000F2C64()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000F2C9C + 4 * byte_10011B274[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1000F2C9C()
{
  return 0x6E6F6973726576;
}

uint64_t sub_1000F2CB4()
{
  return 0x747365676964;
}

uint64_t sub_1000F2CC8()
{
  return 0x6150656C646E7562;
}

uint64_t sub_1000F2CE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000F7C10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000F2D08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000F7B84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F2D30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000F7B84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F2D58(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  _BYTE v21[16];
  _BYTE v22[16];

  v3 = v1;
  v5 = sub_100005C88(&qword_10015BE80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_1000F7B84();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OSExtensionCodable.CodingKeys, &type metadata for OSExtensionCodable.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v21[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v21, v5);
  if (!v2)
  {
    v14 = v3[2];
    v21[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v21, v5);
    sub_1000F7BC8((uint64_t)(v3 + 3), (uint64_t)v22);
    sub_1000F7BC8((uint64_t)v22, (uint64_t)v21);
    v20 = 2;
    v15 = sub_10001A73C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, &type metadata for Data, v15);
    v16 = v3[5];
    v17 = v3[6];
    v21[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_1000F2EE4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1000F7DD4(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1000F2F30(_QWORD *a1)
{
  return sub_1000F2D58(a1);
}

uint64_t sub_1000F2F70(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_1000F7A1C((uint64_t *)v5, v7) & 1;
}

Swift::Int sub_1000F2FC8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000F2B74((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000F3008(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000F2B74((uint64_t)v2);
  return Hasher._finalize()();
}

_QWORD *sub_1000F3044@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  __int128 v4[2];
  char v5;

  sub_10003A1E0((uint64_t *)(v1 + 24), (uint64_t)v4);
  if (!v5)
    return (_QWORD *)sub_100004E2C(v4, a1);
  result = sub_10003A258(v4);
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1000F30A0()
{
  uint64_t v0;
  _QWORD v2[5];
  char v3;

  sub_10003A1E0((uint64_t *)(v0 + 24), (uint64_t)v2);
  if (v3 == 1)
    return v2[0];
  sub_10003A258(v2);
  return 0;
}

uint64_t sub_1000F30E4()
{
  uint64_t v0;
  _QWORD v2[5];
  char v3;

  sub_10003A1E0((uint64_t *)(v0 + 24), (uint64_t)v2);
  if (v3 == 2)
    return LOBYTE(v2[0]);
  sub_10003A258(v2);
  return 4;
}

BOOL sub_1000F3128()
{
  uint64_t v0;
  int v1;
  _QWORD v3[5];
  unsigned __int8 v4;

  sub_10003A1E0((uint64_t *)(v0 + 24), (uint64_t)v3);
  v1 = v4;
  if (v4 != 2)
    sub_10003A258(v3);
  return v1 == 2;
}

unint64_t sub_1000F3170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = sub_10008F1F8();
  if (!*(_QWORD *)(v1 + 16))
  {
    v9 = 0u;
    v10 = 0u;
    goto LABEL_8;
  }
  v4 = *v2;
  v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  v5 = sub_100005DE8(v4, v3);
  if ((v6 & 1) == 0)
  {
    v9 = 0u;
    v10 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_8;
  }
  sub_100005D28(*(_QWORD *)(v1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease(v3);
  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_8:
    sub_1000124F8((uint64_t)&v9, &qword_100158018);
    return 0xD000000000000014;
  }
  if (swift_dynamicCast(&v8, &v9, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v8;
  return 0xD000000000000014;
}

_QWORD *sub_1000F3258@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  __int128 v15[2];
  char v16;

  sub_10003A1E0((uint64_t *)(v1 + 24), (uint64_t)v15);
  if (v16)
  {
    if (v16 == 1)
    {
      v3 = *(_QWORD *)&v15[0];
      v4 = *(_QWORD *)&v15[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_path;
      v5 = type metadata accessor for URL(0);
      v6 = *(_QWORD *)(v5 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, v4, v5);
      swift_release(v3);
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    else
    {
      v11 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
      return sub_10003A258(v15);
    }
  }
  else
  {
    sub_100004E2C(v15, (uint64_t)v12);
    v8 = v13;
    v9 = v14;
    sub_100004DE4(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 64))(v8, v9);
    v10 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 0, 1, v10);
    return (_QWORD *)sub_100005D08(v12);
  }
}

uint64_t sub_1000F3394@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_1000F8078(v3, a1);
}

uint64_t sub_1000F33E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
  swift_beginAccess(v3, v5, 33, 0);
  sub_100040B50(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*sub_1000F343C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000F3480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = sub_10008F3C4();
  if (!*(_QWORD *)(v1 + 16))
  {
    v9 = 0u;
    v10 = 0u;
    goto LABEL_8;
  }
  v4 = *v2;
  v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  v5 = sub_100005DE8(v4, v3);
  if ((v6 & 1) == 0)
  {
    v9 = 0u;
    v10 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_8;
  }
  sub_100005D28(*(_QWORD *)(v1 + 56) + 32 * v5, (uint64_t)&v9);
  swift_bridgeObjectRelease(v3);
  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_8:
    sub_1000124F8((uint64_t)&v9, &qword_100158018);
    return 0;
  }
  if ((swift_dynamicCast(&v8, &v9, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    return v8;
  return 0;
}

uint64_t sub_1000F3558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  uint64_t v4;

  (*(void (**)(void))(*(_QWORD *)v0 + 184))();
  if (!v1)
    return 0;
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v4 = OSKextParseVersionCFString(v3);

  return v4;
}

uint64_t sub_1000F35B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  Swift::String v14;
  void *v15;
  uint64_t v17;

  v1 = type metadata accessor for KernelExtension(0);
  if (swift_dynamicCastClass(v0, v1))
  {
    v2 = 1954047307;
  }
  else
  {
    v3 = type metadata accessor for DriverExtension(0);
    v4 = swift_dynamicCastClass(v0, v3);
    v2 = 4144959;
    if (v4)
      v2 = 1954047300;
  }
  v17 = v2;
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 30240;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
  if (v10)
  {
    v11 = v10;
  }
  else
  {
    v9 = 0x293F3F3F28;
    v11 = 0xE500000000000000;
  }
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 544106784;
  v13._object = (void *)0xE400000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = sub_1000F6CA8();
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  return v17;
}

BOOL sub_1000F36F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::Bool v7;

  (*(void (**)(void))(*(_QWORD *)v0 + 144))();
  v2 = v1;
  v3 = (uint64_t *)sub_100090020();
  v4 = *v3;
  v5 = (void *)v3[1];
  swift_bridgeObjectRetain(v5);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  v7 = String.hasPrefix(_:)(v6);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  return v7;
}

uint64_t sub_1000F3760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v0 + 112))(v6);
  v1 = v7;
  if (v7)
  {
    v2 = v8;
    sub_100004DE4(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
    v4 = v3;
    sub_100005D08(v6);
    if (v4)
    {
      swift_bridgeObjectRelease(v4);
      return 0;
    }
  }
  else
  {
    sub_1000124F8((uint64_t)v6, &qword_100157C78);
  }
  return 1;
}

uint64_t sub_1000F37F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = v0 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest;
  swift_beginAccess(v0 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest, v4, 0, 0);
  v2 = *(_QWORD *)v1;
  sub_10002B23C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t sub_1000F3850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v9[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest);
  swift_beginAccess(v5, v9, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return sub_100021610(v6, v7);
}

uint64_t (*sub_1000F38AC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000F38F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18[2];
  __int128 v19;
  __int128 v20;

  v3 = sub_100005C88(&qword_100158918);
  __chkstk_darwin(v3);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = (uint64_t *)sub_10008F46C();
  if (!*(_QWORD *)(v6 + 16))
  {
    v19 = 0u;
    v20 = 0u;
    goto LABEL_9;
  }
  v9 = *v7;
  v8 = v7[1];
  swift_bridgeObjectRetain(v8);
  v10 = sub_100005DE8(v9, v8);
  if ((v11 & 1) == 0)
  {
    v19 = 0u;
    v20 = 0u;
    swift_bridgeObjectRelease(v8);
    goto LABEL_9;
  }
  sub_100005D28(*(_QWORD *)(v6 + 56) + 32 * v10, (uint64_t)&v19);
  swift_bridgeObjectRelease(v8);
  if (!*((_QWORD *)&v20 + 1))
  {
LABEL_9:
    v14 = &qword_100158018;
    v15 = (char *)&v19;
LABEL_10:
    sub_1000124F8((uint64_t)v15, v14);
    goto LABEL_11;
  }
  if ((swift_dynamicCast(v18, &v19, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
  {
    sub_1000D2668(v18[0], v18[1]);
    v12 = type metadata accessor for UUID(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v5, 1, v12) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v5, v12);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
    }
    v14 = &qword_100158918;
    v15 = v5;
    goto LABEL_10;
  }
LABEL_11:
  v16 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 1, 1, v16);
}

uint64_t sub_1000F3A94@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F3AAC((uint64_t (*)(void))sub_10008F364, a1);
}

uint64_t sub_1000F3AA0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F3AAC((uint64_t (*)(void))sub_10008F538, a1);
}

uint64_t sub_1000F3AAC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = (uint64_t *)a1();
  if (!*(_QWORD *)(v4 + 16))
  {
    v16 = 0u;
    v17 = 0u;
    goto LABEL_8;
  }
  v7 = *v5;
  v6 = v5[1];
  swift_bridgeObjectRetain(v6);
  v8 = sub_100005DE8(v7, v6);
  if ((v9 & 1) == 0)
  {
    v16 = 0u;
    v17 = 0u;
    swift_bridgeObjectRelease(v6);
    goto LABEL_8;
  }
  sub_100005D28(*(_QWORD *)(v4 + 56) + 32 * v8, (uint64_t)&v16);
  swift_bridgeObjectRelease(v6);
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_8:
    sub_1000124F8((uint64_t)&v16, &qword_100158018);
    goto LABEL_9;
  }
  if ((swift_dynamicCast(&v14, &v16, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v10 = v15;
    URL.init(fileURLWithPath:isDirectory:)(v14, v15, 1);
    swift_bridgeObjectRelease(v10);
    v11 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 0, 1, v11);
  }
LABEL_9:
  v13 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 1, 1, v13);
}

uint64_t sub_1000F3BD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD v17[2];
  __int128 v18;
  __int128 v19;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = (uint64_t *)sub_10008F37C();
  if (!*(_QWORD *)(v3 + 16))
  {
    v18 = 0u;
    v19 = 0u;
    goto LABEL_16;
  }
  v6 = *v4;
  v5 = v4[1];
  swift_bridgeObjectRetain(v5);
  v7 = sub_100005DE8(v6, v5);
  if ((v8 & 1) == 0)
  {
    v18 = 0u;
    v19 = 0u;
    swift_bridgeObjectRelease(v5);
    goto LABEL_16;
  }
  sub_100005D28(*(_QWORD *)(v3 + 56) + 32 * v7, (uint64_t)&v18);
  swift_bridgeObjectRelease(v5);
  if (!*((_QWORD *)&v19 + 1))
  {
LABEL_16:
    sub_1000124F8((uint64_t)&v18, &qword_100158018);
    return 0;
  }
  if ((swift_dynamicCast(v17, &v18, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return 0;
  v9 = v17[1];
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_13:
    swift_bridgeObjectRelease(v9);
    return 0;
  }
  v11 = v17[0];
  v12 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v13 = *(v12 - 1);
    v14 = *v12;
    v15 = v13 == v11 && v14 == v9;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v11, v9, 0) & 1) != 0)
      break;
    v12 += 2;
    if (!--v10)
      goto LABEL_13;
  }
  swift_bridgeObjectRelease(v9);
  return 1;
}

uint64_t sub_1000F3D08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;

  v2 = v1;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 144))();
  v6 = v5;
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 144))();
  if (v4 == v7 && v6 == v8)
  {
    result = swift_bridgeObjectRelease_n(v6, 2);
LABEL_8:
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 192))(result);
    if (v13 == (*(uint64_t (**)(void))(*(_QWORD *)a1 + 192))())
    {
      v14 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 224))();
      v16 = v15;
      v18 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 224))();
      v19 = v17;
      if (v16 >> 60 == 15)
      {
        if (v17 >> 60 == 15)
          return 1;
      }
      else if (v17 >> 60 != 15)
      {
        sub_10002B23C(v14, v16);
        sub_100021198(v14, v16);
        v21 = v20;
        sub_100021610(v18, v19);
        sub_100021610(v14, v16);
        sub_100021610(v14, v16);
        return v21 & 1;
      }
      sub_100021610(v14, v16);
      sub_100021610(v18, v19);
    }
    return 0;
  }
  v10 = v8;
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  result = 0;
  if ((v11 & 1) != 0)
    goto LABEL_8;
  return result;
}

uint64_t sub_1000F3EA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 144))();
  v5 = v4;
  v6 = a1[1];
  if (v3 == *a1 && v4 == v6)
  {
    result = swift_bridgeObjectRelease(v4);
LABEL_8:
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192))(result) == a1[2])
    {
      v10 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 224))();
      v12 = v11;
      v14 = a1[3];
      v13 = a1[4];
      if (v11 >> 60 == 15)
      {
        if (v13 >> 60 == 15)
          return 1;
      }
      else if (v13 >> 60 != 15)
      {
        sub_10002B23C(v14, v13);
        sub_100021198(v10, v12);
        v16 = v15;
        sub_100021610(v14, v13);
        sub_100021610(v10, v12);
        return v16 & 1;
      }
      sub_10002B23C(v14, v13);
      sub_100021610(v10, v12);
      sub_100021610(v14, v13);
    }
    return 0;
  }
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, *a1, v6, 0);
  swift_bridgeObjectRelease(v5);
  result = 0;
  if ((v8 & 1) != 0)
    goto LABEL_8;
  return result;
}

uint64_t sub_1000F3FE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v3 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 144))(v8);
  v29 = v12;
  v30 = v11;
  v13 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 192))();
  v14 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 224))();
  v16 = v15;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v1 + 112))(v31);
  v17 = v32;
  if (v32)
  {
    v18 = v33;
    sub_100004DE4(v31, v32);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
    v20 = URL.path.getter(v19);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    result = sub_100005D08(v31);
  }
  else
  {
    v24 = sub_1000124F8((uint64_t)v31, &qword_100157C78);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 160))(v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    {
      result = sub_1000124F8((uint64_t)v5, (uint64_t *)&unk_10015BA60);
      v20 = 0;
      v22 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v5, v6);
      v25 = sub_1000124F8((uint64_t)v5, (uint64_t *)&unk_10015BA60);
      v20 = URL.path.getter(v25);
      v22 = v26;
      result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
  }
  v27 = v29;
  *a1 = v30;
  a1[1] = v27;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v16;
  a1[5] = v20;
  a1[6] = v22;
  return result;
}

uint64_t sub_1000F41E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;

  v2 = v1;
  v4 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v43 - v8;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v45 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v43 - v15;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v1 + 112))(v46, v14);
  v17 = v47;
  if (v47)
  {
    v18 = v48;
    sub_100004DE4(v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
    v19 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
    v19(v7, 0, 1, v10);
    sub_100005D08(v46);
    v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
    v21 = v20(v7, 1, v10);
    if ((_DWORD)v21 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v7, v10);
      v19(v9, 0, 1, v10);
      goto LABEL_6;
    }
  }
  else
  {
    sub_1000124F8((uint64_t)v46, &qword_100157C78);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v7, 1, 1, v10);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 256))(v21);
  sub_1000124F8((uint64_t)v7, (uint64_t *)&unk_10015BA60);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
LABEL_6:
  if (v20(v9, 1, v10) == 1)
  {
    result = sub_1000124F8((uint64_t)v9, (uint64_t *)&unk_10015BA60);
  }
  else
  {
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 184))(v23);
    v26 = v25;
    if (!v25)
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      v29 = 0;
      v30 = 0;
      v31 = 0;
      goto LABEL_13;
    }
    v43 = v24;
    v44 = v16;
    v27 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 224))();
    if (v28 >> 60 != 15)
    {
      v32 = v27;
      v33 = v28;
      v29 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 144))();
      v30 = v36;
      v37 = (uint64_t *)sub_1000900EC();
      v38 = *v37;
      v39 = (void *)v37[1];
      swift_bridgeObjectRetain(v39);
      sub_1000D46C0(v38, v39, v45);
      v40 = swift_bridgeObjectRelease(v39);
      v34 = URL.path.getter(v40);
      v35 = v41;
      v42 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v42(v45, v10);
      result = ((uint64_t (*)(char *, uint64_t))v42)(v44, v10);
      v31 = v43;
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v44, v10);
    result = swift_bridgeObjectRelease(v26);
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v26 = 0;
LABEL_13:
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
LABEL_14:
  *a1 = v29;
  a1[1] = v30;
  a1[2] = v31;
  a1[3] = v26;
  a1[4] = v32;
  a1[5] = v33;
  a1[6] = v34;
  a1[7] = v35;
  return result;
}

uint64_t sub_1000F4530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE v16[24];

  v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v10 = v9 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = v9 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest;
  *(_OWORD *)v12 = xmmword_10010FE40;
  swift_beginAccess(v12, v16, 1, 0);
  v13 = *(_QWORD *)v12;
  v14 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = a4;
  sub_100021610(v13, v14);
  *(_QWORD *)(v9 + 16) = a2;
  sub_10003A21C(a1, v9 + 24);
  return v9;
}

uint64_t sub_1000F4600(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  char v67;
  _QWORD v68[2];

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v65 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  if (v11)
  {
    v12 = v11;
    v13 = swift_bridgeObjectRetain(v11);
    v14 = sub_1000D51CC(v13);
    if (!v15)
    {
      v16 = type metadata accessor for KernelExtension(0);
      goto LABEL_7;
    }
    if (v15 == 1)
    {
      v16 = type metadata accessor for DriverExtension(0);
LABEL_7:
      v28 = v16;
      v29 = a1[3];
      v30 = a1[4];
      sub_100004DE4(a1, v29);
      v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 48))(v29, v30);
      if (v32 >> 60 != 15)
      {
        v57 = v31;
        v58 = v32;
        sub_100005C44((uint64_t)a1, (uint64_t)&v65);
        v67 = 0;
        return (*(uint64_t (**)(__int128 *, uint64_t, uint64_t, unint64_t))(v28 + 312))(&v65, v12, v57, v58);
      }
      swift_bridgeObjectRelease(v12);
      v33 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v18 = swift_allocObject(v33, 72, 7);
      *(_OWORD *)(v18 + 16) = xmmword_10010F050;
      v34 = a1[3];
      v35 = a1[4];
      sub_100004DE4(a1, v34);
      v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 64))(v34, v35);
      v37 = URL.path.getter(v36);
      v39 = v38;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      *(_QWORD *)(v18 + 56) = &type metadata for String;
      *(_QWORD *)(v18 + 64) = sub_100026838();
      *(_QWORD *)(v18 + 32) = v37;
      *(_QWORD *)(v18 + 40) = v39;
      v40 = sub_10002687C();
      v26 = (void *)static OS_os_log.default.getter(v40);
      v41 = static os_log_type_t.default.getter(v26);
      os_log(_:dso:log:type:_:)("unable to create extension from '%{public}s', Info.plist digest is missing", 74, 2, &_mh_execute_header, v26, v41, v18);
      goto LABEL_9;
    }
    sub_100037510(v14, v15);
    v43 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v44 = swift_allocObject(v43, 112, 7);
    *(_OWORD *)(v44 + 16) = xmmword_10010F380;
    v45 = a1[3];
    v46 = a1[4];
    sub_100004DE4(a1, v45);
    v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 64))(v45, v46);
    v48 = URL.path.getter(v47);
    v50 = v49;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    *(_QWORD *)(v44 + 56) = &type metadata for String;
    v51 = sub_100026838();
    *(_QWORD *)(v44 + 64) = v51;
    *(_QWORD *)(v44 + 32) = v48;
    *(_QWORD *)(v44 + 40) = v50;
    v52 = sub_10008F2A8();
    if (*(_QWORD *)(v12 + 16))
    {
      v53 = *v52;
      v54 = v52[1];
      swift_bridgeObjectRetain(v54);
      v55 = sub_100005DE8(v53, v54);
      if ((v56 & 1) != 0)
      {
        sub_100005D28(*(_QWORD *)(v12 + 56) + 32 * v55, (uint64_t)&v65);
      }
      else
      {
        v65 = 0u;
        v66 = 0u;
      }
      swift_bridgeObjectRelease(v54);
    }
    else
    {
      v65 = 0u;
      v66 = 0u;
    }
    swift_bridgeObjectRelease(v12);
    if (*((_QWORD *)&v66 + 1))
    {
      if ((swift_dynamicCast(v68, &v65, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v61 = v68[0];
        v60 = v68[1];
        v62 = (_QWORD *)(v44 + 72);
        *(_QWORD *)(v44 + 96) = &type metadata for String;
        *(_QWORD *)(v44 + 104) = v51;
        if (v60)
        {
          *v62 = v61;
LABEL_24:
          *(_QWORD *)(v44 + 80) = v60;
          v63 = sub_10002687C();
          v26 = (void *)static OS_os_log.default.getter(v63);
          v64 = static os_log_type_t.default.getter(v26);
          os_log(_:dso:log:type:_:)("unable to create extension from '%{public}s', unrecognised package type '%{public}s'", 84, 2, &_mh_execute_header, v26, v64, v44);
          v42 = v44;
          goto LABEL_25;
        }
LABEL_23:
        *v62 = 0x73206120746F6E3CLL;
        v60 = 0xEE003E676E697274;
        goto LABEL_24;
      }
    }
    else
    {
      sub_1000124F8((uint64_t)&v65, &qword_100158018);
    }
    v62 = (_QWORD *)(v44 + 72);
    *(_QWORD *)(v44 + 96) = &type metadata for String;
    *(_QWORD *)(v44 + 104) = v51;
    goto LABEL_23;
  }
  v17 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_10010F050;
  v19 = a1[3];
  v20 = a1[4];
  sub_100004DE4(a1, v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 64))(v19, v20);
  v22 = URL.path.getter(v21);
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_100026838();
  *(_QWORD *)(v18 + 32) = v22;
  *(_QWORD *)(v18 + 40) = v24;
  v25 = sub_10002687C();
  v26 = (void *)static OS_os_log.default.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  os_log(_:dso:log:type:_:)("unable to create extension from '%{public}s', bundle contains no Info.plist contents", 84, 2, &_mh_execute_header, v26, v27, v18);
LABEL_9:
  v42 = v18;
LABEL_25:
  swift_bridgeObjectRelease(v42);

  return 0;
}

uint64_t sub_1000F4ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v17)(__int128 *, uint64_t, uint64_t, unint64_t);
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  char v21;

  swift_bridgeObjectRetain(a2);
  v4 = sub_1000D51CC(a2);
  if (v5)
  {
    if (v5 != 1)
    {
      sub_100037510(v4, v5);
      return 0;
    }
    v6 = type metadata accessor for DriverExtension(0);
  }
  else
  {
    v6 = type metadata accessor for KernelExtension(0);
  }
  v7 = v6;
  v8 = (uint64_t *)sub_10008F490();
  if (*(_QWORD *)(a2 + 16))
  {
    v10 = *v8;
    v9 = v8[1];
    swift_bridgeObjectRetain(v9);
    v11 = sub_100005DE8(v10, v9);
    if ((v12 & 1) != 0)
    {
      sub_100005D28(*(_QWORD *)(a2 + 56) + 32 * v11, (uint64_t)&v19);
      swift_bridgeObjectRelease(v9);
      if (*((_QWORD *)&v20 + 1))
      {
        v13 = swift_dynamicCast(v18, &v19, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
        if (v13)
          v14 = v18[0];
        else
          v14 = 0;
        if (v13)
          v15 = v18[1];
        else
          v15 = 0xF000000000000000;
        goto LABEL_18;
      }
    }
    else
    {
      v19 = 0u;
      v20 = 0u;
      swift_bridgeObjectRelease(v9);
    }
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
  }
  sub_1000124F8((uint64_t)&v19, &qword_100158018);
  v14 = 0;
  v15 = 0xF000000000000000;
LABEL_18:
  *(_QWORD *)&v19 = a1;
  v21 = 1;
  v17 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, unint64_t))(v7 + 312);
  swift_bridgeObjectRetain(a2);
  swift_retain(a1);
  return v17(&v19, a2, v14, v15);
}

uint64_t sub_1000F4C24(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t inited;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(__int128 *, uint64_t, uint64_t, unint64_t, __n128);
  __n128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  char v79;
  _BYTE v80[96];

  swift_bridgeObjectRetain(a1);
  v2 = (uint64_t *)sub_10008F58C();
  if (!*(_QWORD *)(a1 + 16))
  {
    v77 = 0u;
    v78 = 0u;
LABEL_11:
    swift_bridgeObjectRelease(a1);
    goto LABEL_12;
  }
  v4 = *v2;
  v3 = v2[1];
  swift_bridgeObjectRetain(v3);
  v5 = sub_100005DE8(v4, v3);
  if ((v6 & 1) == 0)
  {
    v77 = 0u;
    v78 = 0u;
    swift_bridgeObjectRelease(v3);
    goto LABEL_11;
  }
  sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v77);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v3);
  if (!*((_QWORD *)&v78 + 1))
  {
LABEL_12:
    sub_1000124F8((uint64_t)&v77, &qword_100158018);
    goto LABEL_13;
  }
  if ((swift_dynamicCast(&v75, &v77, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_13:
    v11 = 4;
    goto LABEL_14;
  }
  v8 = v75;
  v7 = v76;
  v9 = sub_10008F718();
  v10 = *((_QWORD *)v9 + 1);
  if (*(_QWORD *)v9 == v8 && v10 == v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v9, v10, v8, v7, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    v11 = 0;
    goto LABEL_14;
  }
  v70 = sub_10008F70C();
  v71 = *((_QWORD *)v70 + 1);
  if (*(_QWORD *)v70 == v8 && v71 == v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v70, v71, v8, v7, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    v11 = 1;
    goto LABEL_14;
  }
  v72 = sub_10008F700();
  v73 = *((_QWORD *)v72 + 1);
  if ((*(_QWORD *)v72 != v8 || v73 != v7)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v72, v73, v8, v7, 0) & 1) == 0)
  {
    sub_10008F724();
    swift_bridgeObjectRelease(v7);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease(v7);
  v11 = 2;
LABEL_14:
  v12 = sub_100005C88((uint64_t *)&unk_100159E60);
  inited = swift_initStackObject(v12, v80);
  *(_OWORD *)(inited + 16) = xmmword_100112440;
  v14 = sub_100090050();
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)(inited + 32) = v16;
  *(_QWORD *)(inited + 40) = v15;
  swift_bridgeObjectRetain(v15);
  v17 = (uint64_t *)sub_100090044();
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)(inited + 48) = v19;
  *(_QWORD *)(inited + 56) = v18;
  swift_bridgeObjectRetain(v18);
  v20 = sub_10009005C();
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)(inited + 64) = v22;
  *(_QWORD *)(inited + 72) = v21;
  swift_bridgeObjectRetain(v21);
  v23 = sub_100090068();
  v25 = *(_QWORD *)v23;
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)(inited + 80) = v25;
  *(_QWORD *)(inited + 88) = v24;
  swift_bridgeObjectRetain(v24);
  v26 = (uint64_t *)sub_10008F490();
  if (!*(_QWORD *)(a1 + 16))
  {
    v77 = 0u;
    v78 = 0u;
LABEL_26:
    sub_1000124F8((uint64_t)&v77, &qword_100158018);
    v32 = 0;
    v33 = 0xF000000000000000;
    goto LABEL_27;
  }
  v28 = *v26;
  v27 = v26[1];
  swift_bridgeObjectRetain(v27);
  v29 = sub_100005DE8(v28, v27);
  if ((v30 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v29, (uint64_t)&v77);
  }
  else
  {
    v77 = 0u;
    v78 = 0u;
  }
  swift_bridgeObjectRelease(v27);
  if (!*((_QWORD *)&v78 + 1))
    goto LABEL_26;
  v31 = swift_dynamicCast(&v75, &v77, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
  if (v31)
    v32 = v75;
  else
    v32 = 0;
  if (v31)
    v33 = v76;
  else
    v33 = 0xF000000000000000;
LABEL_27:
  swift_bridgeObjectRetain(a1);
  v35 = sub_1000D51CC(v34);
  if (!v36)
  {
    swift_bridgeObjectRelease(inited);
    v37 = type metadata accessor for KernelExtension(0);
    goto LABEL_31;
  }
  if (v36 == 1)
  {
    swift_bridgeObjectRelease(inited);
    v37 = type metadata accessor for DriverExtension(0);
LABEL_31:
    LOBYTE(v77) = v11;
    v79 = 2;
    v38 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, unint64_t, __n128))(v37 + 312);
    v39 = swift_bridgeObjectRetain(a1);
    return v38(&v77, a1, v32, v33, v39);
  }
  sub_100037510(v35, v36);
  v41 = sub_10008F1F8();
  v42 = v41;
  if (!*(_QWORD *)(a1 + 16))
  {
    v77 = 0u;
    v78 = 0u;
LABEL_41:
    swift_bridgeObjectRelease(inited);
    sub_1000124F8((uint64_t)&v77, &qword_100158018);
    goto LABEL_42;
  }
  v43 = *v41;
  v44 = v41[1];
  swift_bridgeObjectRetain(v44);
  v45 = sub_100005DE8(v43, v44);
  if ((v46 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v45, (uint64_t)&v77);
  }
  else
  {
    v77 = 0u;
    v78 = 0u;
  }
  swift_bridgeObjectRelease(v44);
  if (!*((_QWORD *)&v78 + 1))
    goto LABEL_41;
  if ((swift_dynamicCast(&v75, &v77, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v47 = v76;
    v48 = sub_100034320(v75, v76, (_QWORD *)inited);
    swift_bridgeObjectRelease(v47);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
    if ((v48 & 1) != 0)
    {
      LOBYTE(v77) = v11;
      v79 = 2;
      v49 = type metadata accessor for KernelExtension(0);
      v40 = swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
      sub_10003A1E0((uint64_t *)&v77, v40 + 24);
      v50 = v40 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
      v51 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 1, 1, v51);
      v52 = v40 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest;
      *(_OWORD *)v52 = xmmword_10010FE40;
      swift_beginAccess(v52, &v75, 1, 0);
      v53 = *(_QWORD *)v52;
      v54 = *(_QWORD *)(v52 + 8);
      *(_QWORD *)v52 = v32;
      *(_QWORD *)(v52 + 8) = v33;
      swift_bridgeObjectRetain(a1);
      sub_100021610(v53, v54);
      *(_QWORD *)(v40 + 16) = a1;
      sub_10003A258(&v77);
      return v40;
    }
LABEL_42:
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_43;
LABEL_50:
    v77 = 0u;
    v78 = 0u;
LABEL_51:
    v59 = sub_1000124F8((uint64_t)&v77, &qword_100158018);
    goto LABEL_52;
  }
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_50;
LABEL_43:
  v55 = *v42;
  v56 = v42[1];
  swift_bridgeObjectRetain(v56);
  v57 = sub_100005DE8(v55, v56);
  if ((v58 & 1) != 0)
  {
    sub_100005D28(*(_QWORD *)(a1 + 56) + 32 * v57, (uint64_t)&v77);
  }
  else
  {
    v77 = 0u;
    v78 = 0u;
  }
  swift_bridgeObjectRelease(v56);
  if (!*((_QWORD *)&v78 + 1))
    goto LABEL_51;
  v59 = swift_dynamicCast(&v75, &v77, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (!(_DWORD)v59)
  {
LABEL_52:
    v60 = 0;
    v61 = 0;
    goto LABEL_53;
  }
  v60 = v75;
  v61 = v76;
LABEL_53:
  v62 = static os_log_type_t.error.getter(v59);
  v63 = sub_100005C88((uint64_t *)&unk_1001596E0);
  v64 = swift_allocObject(v63, 72, 7);
  *(_OWORD *)(v64 + 16) = xmmword_10010F050;
  *(_QWORD *)(v64 + 56) = &type metadata for String;
  *(_QWORD *)(v64 + 64) = sub_100026838();
  v65 = 0x3E656E6F6E3CLL;
  if (v61)
    v65 = v60;
  v66 = 0xE600000000000000;
  if (v61)
    v66 = v61;
  *(_QWORD *)(v64 + 32) = v65;
  *(_QWORD *)(v64 + 40) = v66;
  v67 = sub_10002687C();
  v68 = (void *)static OS_os_log.default.getter(v67);
  os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v68, "Unrecognized identifier: %s", v74);
  swift_bridgeObjectRelease(v64);

  sub_100021610(v32, v33);
  return 0;
}

uint64_t sub_1000F52C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v0 = sub_100005C88(&qword_10015BB70);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10011B860;
  sub_100005C88(&qword_10015A840);
  v2 = sub_10008F3C4();
  v3 = v2[1];
  v22 = *v2;
  v23 = v3;
  swift_bridgeObjectRetain(v3);
  v4 = sub_1000268C0();
  v5 = sub_1000FB4C4((uint64_t)&v22, v4 & 1, 0);
  swift_bridgeObjectRelease(v3);
  *(_QWORD *)(v1 + 32) = v5;
  v6 = (uint64_t *)sub_10008F43C();
  v7 = v6[1];
  v22 = *v6;
  v23 = v7;
  swift_bridgeObjectRetain(v7);
  v8 = sub_1000FB4C4((uint64_t)&v22, 1, 0);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(v1 + 40) = v8;
  v9 = (uint64_t *)sub_10008F388();
  v10 = v9[1];
  v22 = *v9;
  v23 = v10;
  v11 = sub_100005C88(&qword_1001588B8);
  swift_bridgeObjectRetain(v10);
  v12 = sub_1000FA0A4((uint64_t)&v22, v11, 1, 0, v11);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(v1 + 48) = v12;
  v13 = sub_10008F250();
  v14 = v13[1];
  v22 = *v13;
  v23 = v14;
  swift_bridgeObjectRetain(v14);
  v15 = sub_1000FA0A4((uint64_t)&v22, (uint64_t)&type metadata for String, 1, 0, (uint64_t)&type metadata for String);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(v1 + 56) = v15;
  v16 = (uint64_t *)sub_10008F358();
  v17 = v16[1];
  v22 = *v16;
  v23 = v17;
  v18 = sub_100005C88(&qword_100158920);
  swift_bridgeObjectRetain(v17);
  v19 = sub_1000FA0A4((uint64_t)&v22, v18, 1, 0, v18);
  v20 = swift_bridgeObjectRelease(v17);
  *(_QWORD *)(v1 + 64) = v19;
  v22 = v1;
  result = specialized Array._endMutation()(v20);
  qword_100175928 = v22;
  return result;
}

uint64_t sub_1000F5498()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  sub_10003A258(v0 + 3);
  sub_1000124F8((uint64_t)v0 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL, (uint64_t *)&unk_10015BA60);
  sub_100021610(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest), *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

const char *sub_1000F54F4()
{
  return "kext";
}

uint64_t sub_1000F5500()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  unint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  Swift::String v68;
  Swift::String v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  void *v127;
  char v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  Swift::String v148;
  Swift::String v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t result;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char v166[96];

  if (qword_100173670 != -1)
    swift_once(&qword_100173670, sub_1000F52C4);
  v159 = qword_100175928;
  v0 = sub_100005C88(&qword_10015BB70);
  inited = swift_initStackObject(v0, v166);
  *(_OWORD *)(inited + 16) = xmmword_10011B870;
  v2 = inited;
  sub_100005C88(&qword_10015A840);
  v158 = sub_10008F1F8();
  v3 = v158[1];
  v164 = *v158;
  v165 = v3;
  swift_bridgeObjectRetain(v3);
  v4 = sub_1000268C0();
  v5 = sub_1000FAA84((uint64_t)&v164, 64, v4 & 1, 0);
  swift_bridgeObjectRelease(v3);
  v6 = v2;
  *(_QWORD *)(v2 + 32) = v5;
  v7 = sub_10008F2A8();
  v8 = v7[1];
  v164 = *v7;
  v165 = v8;
  swift_bridgeObjectRetain(v8);
  v9 = sub_1000FD830();
  v10 = sub_1000FA558((uint64_t)&v164, (uint64_t)&off_10014FE20, v9 & 1, 0, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(v6 + 40) = v10;
  v11 = (uint64_t *)sub_10008F37C();
  v12 = v11[1];
  v164 = *v11;
  v165 = v12;
  v13 = sub_100005C88((uint64_t *)&unk_100159E60);
  v14 = swift_allocObject(v13, 128, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10011B880;
  swift_bridgeObjectRetain(v12);
  v15 = sub_100091808();
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)(v14 + 32) = v17;
  *(_QWORD *)(v14 + 40) = v16;
  swift_bridgeObjectRetain(v16);
  v18 = sub_100091814();
  v20 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)(v14 + 48) = v20;
  *(_QWORD *)(v14 + 56) = v19;
  swift_bridgeObjectRetain(v19);
  v21 = sub_100091820();
  v23 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)(v14 + 64) = v23;
  *(_QWORD *)(v14 + 72) = v22;
  swift_bridgeObjectRetain(v22);
  v24 = sub_10009182C();
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)(v14 + 80) = v26;
  *(_QWORD *)(v14 + 88) = v25;
  swift_bridgeObjectRetain(v25);
  v27 = sub_100091844();
  v29 = *(_QWORD *)v27;
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)(v14 + 96) = v29;
  *(_QWORD *)(v14 + 104) = v28;
  swift_bridgeObjectRetain(v28);
  v30 = sub_100091850();
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)(v14 + 112) = v32;
  *(_QWORD *)(v14 + 120) = v31;
  swift_bridgeObjectRetain(v31);
  v33 = sub_1000FA558((uint64_t)&v164, v14, 1, 0, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  v34 = v6;
  *(_QWORD *)(v6 + 48) = v33;
  v35 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v35 + 16) = xmmword_10011B890;
  v36 = sub_10008F250();
  v37 = v36[1];
  v164 = *v36;
  v165 = v37;
  swift_bridgeObjectRetain(v37);
  v38 = sub_1000F9C00((uint64_t)&v164, 0);
  swift_bridgeObjectRelease(v37);
  *(_QWORD *)(v35 + 32) = v38;
  v39 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v39 + 16) = xmmword_10011B890;
  v40 = *v36;
  v41 = v36[1];
  v164 = v40;
  v165 = v41;
  swift_bridgeObjectRetain(v41);
  v42 = sub_1000FD830();
  v43 = sub_1000FA0A4((uint64_t)&v164, (uint64_t)&type metadata for String, v42 & 1, 0, (uint64_t)&type metadata for String);
  swift_bridgeObjectRelease(v41);
  *(_QWORD *)(v39 + 32) = v43;
  v44 = (uint64_t *)sub_10008F460();
  v45 = v44[1];
  v164 = *v44;
  v165 = v45;
  swift_bridgeObjectRetain(v45);
  v46 = sub_1000FD830();
  v47 = sub_1000FA0A4((uint64_t)&v164, (uint64_t)&type metadata for String, v46 & 1, 0, (uint64_t)&type metadata for String);
  v48 = swift_bridgeObjectRelease(v45);
  *(_QWORD *)(v39 + 40) = v47;
  v164 = v39;
  specialized Array._endMutation()(v48);
  v49 = v164;
  v53 = sub_1000FBEFC(v164, v50, v51, v52);
  v54 = swift_bridgeObjectRelease(v49);
  *(_QWORD *)(v35 + 40) = v53;
  v164 = v35;
  specialized Array._endMutation()(v54);
  v55 = v164;
  v57 = sub_1000FBCBC(v164, 0, 0, v56);
  swift_bridgeObjectRelease(v55);
  *(_QWORD *)(v34 + 56) = v57;
  v58 = v34;
  v161 = v34;
  v157 = (uint64_t *)sub_10008F388();
  v59 = v157[1];
  v164 = *v157;
  v165 = v59;
  v60 = sub_100005C88(&qword_1001588B8);
  v61 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v61 + 16) = xmmword_10011B890;
  swift_bridgeObjectRetain(v59);
  v62 = (uint64_t *)sub_100090044();
  v63 = v62[1];
  v162 = *v62;
  v163 = v63;
  swift_bridgeObjectRetain(v63);
  v64 = sub_1000F9C00((uint64_t)&v162, 0);
  swift_bridgeObjectRelease(v63);
  *(_QWORD *)(v61 + 32) = v64;
  v162 = 0;
  v163 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(v163);
  v162 = 0xD00000000000001DLL;
  v163 = 0x800000010012CB10;
  v65 = (uint64_t *)sub_100090038();
  v66 = *v65;
  v67 = (void *)v65[1];
  swift_bridgeObjectRetain(v67);
  v68._countAndFlagsBits = v66;
  v68._object = v67;
  String.append(_:)(v68);
  swift_bridgeObjectRelease(v67);
  v69._countAndFlagsBits = 39;
  v69._object = (void *)0xE100000000000000;
  String.append(_:)(v69);
  v70 = v163;
  v71 = sub_1000FBC0C((uint64_t)sub_1000F6044, 0, v162, v163);
  v72 = swift_bridgeObjectRelease(v70);
  *(_QWORD *)(v61 + 40) = v71;
  v162 = v61;
  specialized Array._endMutation()(v72);
  v73 = v162;
  v160 = v60;
  v74 = sub_1000FB6D4((uint64_t)&v164, v60, v162, 1, 0, v60);
  swift_bridgeObjectRelease(v59);
  swift_bridgeObjectRelease(v73);
  *(_QWORD *)(v58 + 64) = v74;
  v75 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v75 + 16) = xmmword_10011B8A0;
  v76 = (uint64_t *)sub_10008F394();
  v77 = v76[1];
  v164 = *v76;
  v165 = v77;
  swift_bridgeObjectRetain(v77);
  v78 = sub_1000F9C00((uint64_t)&v164, 0);
  swift_bridgeObjectRelease(v77);
  *(_QWORD *)(v75 + 32) = v78;
  v79 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v79 + 16) = xmmword_10011B890;
  v80 = v76[1];
  v164 = *v76;
  v165 = v80;
  swift_bridgeObjectRetain(v80);
  v81 = sub_1000FD830();
  v82 = sub_1000FA558((uint64_t)&v164, (uint64_t)&off_10014FE50, v81 & 1, 0, (uint64_t)&type metadata for Bool, (uint64_t)&protocol witness table for Bool);
  swift_bridgeObjectRelease(v80);
  *(_QWORD *)(v79 + 32) = v82;
  v83 = (uint64_t *)sub_10008F3A0();
  v84 = v83[1];
  v164 = *v83;
  v165 = v84;
  swift_bridgeObjectRetain(v84);
  v85 = sub_1000FA558((uint64_t)&v164, (uint64_t)&off_10014FE78, 1, 0, (uint64_t)&type metadata for Bool, (uint64_t)&protocol witness table for Bool);
  v86 = swift_bridgeObjectRelease(v84);
  *(_QWORD *)(v79 + 40) = v85;
  v164 = v79;
  specialized Array._endMutation()(v86);
  v87 = v164;
  v91 = sub_1000FBE1C(v164, v88, v89, v90);
  swift_bridgeObjectRelease(v87);
  *(_QWORD *)(v75 + 40) = v91;
  v92 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v92 + 16) = xmmword_10011B890;
  v93 = *v76;
  v94 = v76[1];
  v164 = v93;
  v165 = v94;
  swift_bridgeObjectRetain(v94);
  v95 = sub_1000FD830();
  v96 = sub_1000FA558((uint64_t)&v164, (uint64_t)&off_10014FEA0, v95 & 1, 0, (uint64_t)&type metadata for Bool, (uint64_t)&protocol witness table for Bool);
  swift_bridgeObjectRelease(v94);
  *(_QWORD *)(v92 + 32) = v96;
  v97 = v157[1];
  v164 = *v157;
  v165 = v97;
  v98 = sub_10001284C(&qword_10015C328, &qword_1001588B8, (uint64_t)&protocol conformance descriptor for [A : B]);
  swift_bridgeObjectRetain(v97);
  v99 = sub_1000268C0();
  v100 = sub_1000FAF30((uint64_t)&v164, 1, 2, v160, v99 & 1, 0, v160, v98);
  v101 = swift_bridgeObjectRelease(v97);
  *(_QWORD *)(v92 + 40) = v100;
  v164 = v92;
  specialized Array._endMutation()(v101);
  v102 = v164;
  v106 = sub_1000FBE1C(v164, v103, v104, v105);
  v107 = swift_bridgeObjectRelease(v102);
  *(_QWORD *)(v75 + 48) = v106;
  v164 = v75;
  specialized Array._endMutation()(v107);
  v108 = v164;
  v110 = sub_1000FBCBC(v164, 0, 0, v109);
  swift_bridgeObjectRelease(v108);
  *(_QWORD *)(v161 + 72) = v110;
  v111 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v111 + 16) = xmmword_10011B890;
  v112 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v112 + 16) = xmmword_10011B890;
  v113 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v113 + 16) = xmmword_10011B890;
  v114 = (uint64_t *)sub_10008F4A8();
  v115 = v114[1];
  v164 = *v114;
  v165 = v115;
  swift_bridgeObjectRetain(v115);
  sub_1000268C0();
  v116 = sub_1000FBFFC((uint64_t)&v164);
  swift_bridgeObjectRelease(v115);
  *(_QWORD *)(v113 + 32) = v116;
  v117 = (uint64_t *)sub_10008F4B4();
  v118 = v117[1];
  v164 = *v117;
  v165 = v118;
  swift_bridgeObjectRetain(v118);
  sub_1000268C0();
  v119 = sub_1000FBFFC((uint64_t)&v164);
  v120 = swift_bridgeObjectRelease(v118);
  *(_QWORD *)(v113 + 40) = v119;
  v164 = v113;
  specialized Array._endMutation()(v120);
  v121 = v164;
  v123 = sub_1000FBCBC(v164, 0, 0, v122);
  swift_bridgeObjectRelease(v121);
  *(_QWORD *)(v112 + 32) = v123;
  v124 = v158[1];
  v164 = *v158;
  v165 = v124;
  swift_bridgeObjectRetain(v124);
  v125 = (uint64_t *)sub_100090020();
  v126 = *v125;
  v127 = (void *)v125[1];
  swift_bridgeObjectRetain(v127);
  v128 = sub_1000268C0();
  v129 = sub_1000FACE0((uint64_t)&v164, v126, v127, v128 & 1, 0);
  swift_bridgeObjectRelease(v124);
  v130 = swift_bridgeObjectRelease(v127);
  *(_QWORD *)(v112 + 40) = v129;
  v164 = v112;
  specialized Array._endMutation()(v130);
  v131 = v164;
  v135 = sub_1000FBE1C(v164, v132, v133, v134);
  swift_bridgeObjectRelease(v131);
  *(_QWORD *)(v111 + 32) = v135;
  v136 = v157[1];
  v164 = *v157;
  v165 = v136;
  v137 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v137 + 16) = xmmword_10011B8B0;
  swift_bridgeObjectRetain(v136);
  v138 = (uint64_t *)sub_100090074();
  v139 = v138[1];
  v162 = *v138;
  v163 = v139;
  swift_bridgeObjectRetain(v139);
  v140 = sub_1000F9C00((uint64_t)&v162, 0);
  v141 = swift_bridgeObjectRelease(v139);
  *(_QWORD *)(v137 + 32) = v140;
  v162 = v137;
  specialized Array._endMutation()(v141);
  v142 = v162;
  v143 = sub_1000FB6D4((uint64_t)&v164, v160, v162, 1, 0, v160);
  swift_bridgeObjectRelease(v136);
  v144 = swift_bridgeObjectRelease(v142);
  *(_QWORD *)(v111 + 40) = v143;
  v164 = v111;
  specialized Array._endMutation()(v144);
  v145 = v164;
  v164 = 0;
  v165 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(v165);
  v164 = 0x20676E696B6E694CLL;
  v165 = 0xE800000000000000;
  v147 = *v138;
  v146 = (void *)v138[1];
  swift_bridgeObjectRetain(v146);
  v148._countAndFlagsBits = v147;
  v148._object = v146;
  String.append(_:)(v148);
  swift_bridgeObjectRelease(v146);
  v149._object = (void *)0x800000010012CB30;
  v149._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v149);
  v150 = v165;
  v152 = sub_1000FBCBC(v145, v164, v165, v151);
  swift_bridgeObjectRelease(v145);
  v153 = swift_bridgeObjectRelease(v150);
  *(_QWORD *)(v161 + 80) = v152;
  v164 = v161;
  specialized Array._endMutation()(v153);
  v154 = v164;
  v164 = v159;
  swift_bridgeObjectRetain(v159);
  v155 = swift_bridgeObjectRetain(v154);
  sub_1000F6FBC(v155);
  result = swift_bridgeObjectRelease(v154);
  qword_100175930 = v164;
  return result;
}

BOOL sub_1000F6044()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::Bool v4;

  v0 = (uint64_t *)sub_100090038();
  v1 = *v0;
  v2 = (void *)v0[1];
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  v4 = String.hasPrefix(_:)(v3);
  swift_bridgeObjectRelease(v2);
  return !v4;
}

uint64_t *sub_1000F60A0()
{
  if (qword_100173678 != -1)
    swift_once(&qword_100173678, sub_1000F5500);
  return &qword_100175930;
}

const char *sub_1000F60E4()
{
  return "dext";
}

uint64_t sub_1000F60F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;

  if (qword_100173670 != -1)
    swift_once(&qword_100173670, sub_1000F52C4);
  v0 = qword_100175928;
  sub_100005C88(&qword_10015A840);
  v1 = sub_10008F1F8();
  v2 = v1[1];
  v71 = *v1;
  v72 = v2;
  swift_bridgeObjectRetain(v2);
  v3 = *(_QWORD *)sub_100090170();
  v4 = sub_1000268C0();
  v70 = sub_1000FAA84((uint64_t)&v71, v3, v4 & 1, 0);
  swift_bridgeObjectRelease(v2);
  v5 = sub_10008F2A8();
  v6 = v5[1];
  v71 = *v5;
  v72 = v6;
  swift_bridgeObjectRetain(v6);
  v7 = sub_1000FD830();
  v69 = sub_1000FA558((uint64_t)&v71, (uint64_t)&off_10014FEC8, v7 & 1, 0, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease(v6);
  v8 = sub_100005C88(&qword_10015BB70);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10011B890;
  v10 = (uint64_t *)sub_10008F37C();
  v11 = v10[1];
  v71 = *v10;
  v72 = v11;
  swift_bridgeObjectRetain(v11);
  v12 = sub_1000F9C00((uint64_t)&v71, 0);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v9 + 32) = v12;
  v13 = *v10;
  v14 = v10[1];
  v71 = v13;
  v72 = v14;
  v15 = sub_100005C88((uint64_t *)&unk_100159E60);
  v16 = swift_allocObject(v15, 64, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10010F380;
  swift_bridgeObjectRetain(v14);
  v17 = sub_100091838();
  v19 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  *(_QWORD *)(v16 + 32) = v19;
  *(_QWORD *)(v16 + 40) = v18;
  swift_bridgeObjectRetain(v18);
  v20 = sub_100091844();
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)(v16 + 48) = v22;
  *(_QWORD *)(v16 + 56) = v21;
  swift_bridgeObjectRetain(v21);
  v23 = sub_1000FD830();
  v24 = sub_1000FA558((uint64_t)&v71, v16, v23 & 1, 0, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  swift_bridgeObjectRelease(v14);
  v25 = swift_bridgeObjectRelease(v16);
  *(_QWORD *)(v9 + 40) = v24;
  v71 = v9;
  specialized Array._endMutation()(v25);
  v26 = v71;
  v28 = sub_1000FBCBC(v71, 0, 0, v27);
  swift_bridgeObjectRelease(v26);
  v29 = swift_allocObject(v15, 112, 7);
  *(_OWORD *)(v29 + 16) = xmmword_10010FE50;
  v30 = (uint64_t *)sub_10008F370();
  v32 = *v30;
  v31 = v30[1];
  *(_QWORD *)(v29 + 32) = v32;
  *(_QWORD *)(v29 + 40) = v31;
  swift_bridgeObjectRetain(v31);
  v33 = (uint64_t *)sub_10008F394();
  v35 = *v33;
  v34 = v33[1];
  *(_QWORD *)(v29 + 48) = v35;
  *(_QWORD *)(v29 + 56) = v34;
  swift_bridgeObjectRetain(v34);
  v36 = (uint64_t *)sub_10008F448();
  v38 = *v36;
  v37 = v36[1];
  *(_QWORD *)(v29 + 64) = v38;
  *(_QWORD *)(v29 + 72) = v37;
  swift_bridgeObjectRetain(v37);
  v39 = (uint64_t *)sub_10008F454();
  v41 = *v39;
  v40 = v39[1];
  *(_QWORD *)(v29 + 80) = v41;
  *(_QWORD *)(v29 + 88) = v40;
  swift_bridgeObjectRetain(v40);
  v42 = (uint64_t *)sub_10008F460();
  v44 = *v42;
  v43 = v42[1];
  *(_QWORD *)(v29 + 96) = v44;
  *(_QWORD *)(v29 + 104) = v43;
  swift_bridgeObjectRetain(v43);
  v48 = sub_1000F9D94(v29, v45, v46, v47);
  swift_bridgeObjectRelease(v29);
  v71 = v0;
  if ((unint64_t)v0 >> 62)
  {
    if (v0 < 0)
      v68 = v0;
    else
      v68 = v0 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v0, 2);
    v49 = _CocoaArrayWrapper.endIndex.getter(v68);
    swift_bridgeObjectRelease(v0);
  }
  else
  {
    v49 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v0);
  }
  if (__OFADD__(v49, 4))
  {
    __break(1u);
  }
  else
  {
    v51 = sub_1000F7320(v49 + 4, 1);
    specialized Array._endMutation()(v51);
    v52 = swift_retain(v70);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
    v49 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v50 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v49 < v50 >> 1)
      goto LABEL_7;
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v49 + 1, 1);
LABEL_7:
  v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v70);
  specialized Array._endMutation()(v53);
  v54 = swift_retain(v69);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
  v56 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v55 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v56 >= v55 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
  v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v69);
  specialized Array._endMutation()(v57);
  v58 = swift_retain(v28);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
  v60 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v59 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v60 >= v59 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
  v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v28);
  specialized Array._endMutation()(v61);
  v62 = swift_retain(v48);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v62);
  v64 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v63 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v64 >= v63 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
  v65 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v48);
  specialized Array._endMutation()(v65);
  v66 = v71;
  swift_release(v70);
  swift_release(v48);
  swift_release(v28);
  result = swift_release(v69);
  qword_100175938 = v66;
  return result;
}

uint64_t *sub_1000F65DC()
{
  if (qword_100173680 != -1)
    swift_once(&qword_100173680, sub_1000F60F0);
  return &qword_100175938;
}

uint64_t sub_1000F661C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v17[24];

  v5 = v4;
  v10 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  sub_10003A1E0(a1, v10 + 24);
  v11 = v10 + OBJC_IVAR____TtC10driverkitd11OSExtension_originURL;
  v12 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v10 + OBJC_IVAR____TtC10driverkitd11OSExtension_digest;
  *(_OWORD *)v13 = xmmword_10010FE40;
  swift_beginAccess(v13, v17, 1, 0);
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)v13 = a3;
  *(_QWORD *)(v13 + 8) = a4;
  sub_100021610(v14, v15);
  *(_QWORD *)(v10 + 16) = a2;
  sub_10003A258(a1);
  return v10;
}

Swift::Int sub_1000F66FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt64 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  __int128 v21[2];
  char v22;
  _QWORD v23[9];

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Hasher.init(_seed:)(v23, 0);
  v6 = (*(uint64_t (**)(_QWORD *))(*v0 + 144))(v5);
  v8 = v7;
  String.hash(into:)(v23, v6, v7);
  v9 = swift_bridgeObjectRelease(v8);
  v10 = (*(uint64_t (**)(uint64_t))(*v0 + 192))(v9);
  Hasher._combine(_:)(v10);
  sub_10003A1E0(v0 + 3, (uint64_t)v21);
  if (v22)
  {
    if (v22 == 1)
    {
      v11 = *(_QWORD *)&v21[0];
      v12 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      dispatch thunk of Hashable.hash(into:)(v23, v1, v12);
      LOBYTE(v18[0]) = *(_BYTE *)(v11 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
      v13 = sub_10004F934();
      dispatch thunk of Hashable.hash(into:)(v23, &type metadata for CollectionKind, v13);
      swift_release(v11);
    }
  }
  else
  {
    sub_100004E2C(v21, (uint64_t)v18);
    v14 = v19;
    v15 = v20;
    sub_100004DE4(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v15 + 64))(v14, v15);
    v16 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v23, v1, v16);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    sub_100005D08(v18);
  }
  return Hasher._finalize()();
}

uint64_t sub_1000F68D0(uint64_t **a1, uint64_t **a2)
{
  return sub_1000F871C(*a1, *a2);
}

Swift::Int sub_1000F68DC()
{
  return sub_1000F66FC();
}

uint64_t sub_1000F68FC(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  __int128 v25[2];
  char v26;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = (*(uint64_t (**)(uint64_t))(*v8 + 144))(v5);
  v11 = v10;
  String.hash(into:)(a1, v9, v10);
  v12 = swift_bridgeObjectRelease(v11);
  v13 = (*(uint64_t (**)(uint64_t))(*v8 + 192))(v12);
  Hasher._combine(_:)(v13);
  result = sub_10003A1E0(v8 + 3, (uint64_t)v25);
  if (v26)
  {
    if (v26 == 1)
    {
      v15 = *(_QWORD *)&v25[0];
      v16 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      dispatch thunk of Hashable.hash(into:)(a1, v3, v16);
      LOBYTE(v22[0]) = *(_BYTE *)(v15 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
      v17 = sub_10004F934();
      dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CollectionKind, v17);
      return swift_release(v15);
    }
  }
  else
  {
    sub_100004E2C(v25, (uint64_t)v22);
    v18 = v23;
    v19 = v24;
    sub_100004DE4(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v19 + 64))(v18, v19);
    v20 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v3, v20);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return sub_100005D08(v22);
  }
  return result;
}

Swift::Int sub_1000F6ACC(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  __int128 v24[2];
  char v25;
  _QWORD v26[9];

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Hasher.init(_seed:)(v26, a1);
  v8 = *v1;
  v9 = (*(uint64_t (**)(_QWORD *))(*v8 + 144))(v7);
  v11 = v10;
  String.hash(into:)(v26, v9, v10);
  v12 = swift_bridgeObjectRelease(v11);
  v13 = (*(uint64_t (**)(uint64_t))(*v8 + 192))(v12);
  Hasher._combine(_:)(v13);
  sub_10003A1E0(v8 + 3, (uint64_t)v24);
  if (v25)
  {
    if (v25 == 1)
    {
      v14 = *(_QWORD *)&v24[0];
      v15 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      dispatch thunk of Hashable.hash(into:)(v26, v3, v15);
      LOBYTE(v21[0]) = *(_BYTE *)(v14 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
      v16 = sub_10004F934();
      dispatch thunk of Hashable.hash(into:)(v26, &type metadata for CollectionKind, v16);
      swift_release(v14);
    }
  }
  else
  {
    sub_100004E2C(v24, (uint64_t)v21);
    v17 = v22;
    v18 = v23;
    sub_100004DE4(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
    v19 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v26, v3, v19);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100005D08(v21);
  }
  return Hasher._finalize()();
}

uint64_t sub_1000F6CA8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  __int128 v13[2];
  char v14;

  sub_10003A1E0(v0, (uint64_t)v13);
  if (v14)
  {
    if (v14 == 1)
    {
      v1 = *(_QWORD *)&v13[0];
      v2 = sub_10004D770();
      swift_release(v1);
    }
    else
    {
      v10[0] = 0x20646564616F6CLL;
      v10[1] = 0xE700000000000000;
      if (LOBYTE(v13[0]) == 4)
      {
        v5 = 0x800000010012CA40;
        v6 = 0xD000000000000023;
      }
      else
      {
        v6 = sub_1000D4214(v13[0]);
        v5 = v7;
      }
      v8 = v5;
      String.append(_:)(*(Swift::String *)&v6);
      swift_bridgeObjectRelease(v5);
      return v10[0];
    }
  }
  else
  {
    sub_100004E2C(v13, (uint64_t)v10);
    v3 = v11;
    v4 = v12;
    sub_100004DE4(v10, v11);
    v2 = dispatch thunk of CustomStringConvertible.description.getter(v3, *(_QWORD *)(v4 + 8));
    sub_100005D08(v10);
  }
  return v2;
}

uint64_t sub_1000F6DB8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  __int128 v18[2];
  char v19;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_10003A1E0(v1, (uint64_t)v18);
  if (v19)
  {
    if (v19 == 1)
    {
      v8 = *(_QWORD *)&v18[0];
      v9 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      dispatch thunk of Hashable.hash(into:)(a1, v3, v9);
      LOBYTE(v15[0]) = *(_BYTE *)(v8 + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind);
      v10 = sub_10004F934();
      dispatch thunk of Hashable.hash(into:)(a1, &type metadata for CollectionKind, v10);
      return swift_release(v8);
    }
  }
  else
  {
    sub_100004E2C(v18, (uint64_t)v15);
    v11 = v16;
    v12 = v17;
    sub_100004DE4(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 64))(v11, v12);
    v13 = sub_100012534(&qword_100157E90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v3, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return sub_100005D08(v15);
  }
  return result;
}

Swift::Int sub_1000F6F44()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000F6DB8((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000F6F84(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000F6DB8((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_1000F6FBC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1000F7174(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F7174(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  void (*v11)(_QWORD *);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15[4];

  v5 = result;
  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    result = swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      if (a3 < 0)
        v8 = a3;
      else
        v8 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      result = swift_bridgeObjectRelease(a3);
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_10001284C(&qword_10015C338, &qword_10015C330, (uint64_t)&protocol conformance descriptor for [A]);
          swift_bridgeObjectRetain(a3);
          for (i = 0; i != v7; ++i)
          {
            sub_100005C88(&qword_10015C330);
            v11 = sub_1000D0D88(v15, i, a3);
            v13 = *v12;
            swift_retain(*v12);
            ((void (*)(uint64_t **, _QWORD))v11)(v15, 0);
            *(_QWORD *)(v5 + 8 * i) = v13;
          }
          swift_bridgeObjectRelease(a3);
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_100005C88(&qword_10015A840);
        swift_arrayInitWithCopy(v5);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F7320(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

uint64_t sub_1000F73DC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = a2[2];
    v13 = a2[3];
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      sub_100021198(a1[4], a1[5]);
      if ((v16 & 1) != 0)
      {
        v17 = a1[6];
        v18 = a1[7];
        v19 = a2[6];
        v20 = a2[7];
        if (v17 == v19 && v18 == v20)
          return 1;
        else
          return _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_1000F7494()
{
  unint64_t result;

  result = qword_100173688;
  if (!qword_100173688)
  {
    result = swift_getWitnessTable(&unk_10011B80C, &type metadata for OSExtensionCodableLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100173688);
  }
  return result;
}

uint64_t sub_1000F74D8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v4 = 0xEA00000000007265;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x536E6F6973726576 && a2 == 0xED0000676E697274)
  {
    v6 = 0xED0000676E697274;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x536E6F6973726576, 0xED0000676E697274, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x747365676964 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747365676964, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0x6150656C646E7562 && a2 == 0xEA00000000006874)
  {
    swift_bridgeObjectRelease(0xEA00000000006874);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6150656C646E7562, 0xEA00000000006874, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1000F76C0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;

  v5 = sub_100005C88(&qword_10015C348);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_1000F7494();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OSExtensionCodableLocation.CodingKeys, &type metadata for OSExtensionCodableLocation.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D08(a1);
  LOBYTE(v35) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
  v14 = v13;
  v33 = v12;
  LOBYTE(v35) = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
  v34 = v16;
  v17 = v16;
  v32 = v15;
  v37 = 2;
  v18 = sub_10001AB98();
  swift_bridgeObjectRetain(v17);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v37, v5, &type metadata for Data, v18);
  v19 = v35;
  LOBYTE(v35) = 3;
  v30 = v36;
  v31 = v19;
  sub_1000122B4(v19, v36);
  v20 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
  v22 = v21;
  v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  v24 = v20;
  v23(v8, v5);
  swift_bridgeObjectRetain(v14);
  v25 = v34;
  swift_bridgeObjectRetain(v34);
  v27 = v30;
  v26 = v31;
  sub_1000122B4(v31, v30);
  swift_bridgeObjectRetain(v22);
  sub_100011F40(v26, v27);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v25);
  sub_100005D08(a1);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v14);
  sub_100011F40(v26, v27);
  result = swift_bridgeObjectRelease(v22);
  *a2 = v33;
  a2[1] = v14;
  a2[2] = v32;
  a2[3] = v25;
  a2[4] = v26;
  a2[5] = v27;
  a2[6] = v24;
  a2[7] = v22;
  return result;
}

unint64_t sub_1000F79D8()
{
  unint64_t result;

  result = qword_10015BE78;
  if (!qword_10015BE78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_10015BE78);
  }
  return result;
}

uint64_t sub_1000F7A1C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    if (a1[2] == a2[2])
    {
      v10 = a1[3];
      v11 = a1[4];
      v12 = a2[3];
      v13 = a2[4];
      if (v11 >> 60 == 15)
      {
        if (v13 >> 60 == 15)
        {
LABEL_13:
          v16 = a1[6];
          v17 = a2[6];
          if (v16)
          {
            if (v17)
            {
              v18 = a1[5];
              v19 = a2[5];
              if (v18 == v19 && v16 == v17)
                return 1;
              if ((_stringCompareWithSmolCheck(_:_:expecting:)(v18, v16, v19, v17, 0) & 1) != 0)
                return 1;
            }
          }
          else if (!v17)
          {
            return 1;
          }
          return 0;
        }
        goto LABEL_11;
      }
      if (v13 >> 60 == 15)
      {
LABEL_11:
        sub_10002B23C(a1[3], a1[4]);
        sub_10002B23C(v12, v13);
        sub_100021610(v10, v11);
        sub_100021610(v12, v13);
        return 0;
      }
      sub_10002B23C(a1[3], a1[4]);
      sub_10002B23C(v12, v13);
      sub_100021198(v10, v11);
      v15 = v14;
      sub_100021610(v12, v13);
      sub_100021610(v10, v11);
      if ((v15 & 1) != 0)
        goto LABEL_13;
    }
    return 0;
  }
  return result;
}

unint64_t sub_1000F7B84()
{
  unint64_t result;

  result = qword_100173690[0];
  if (!qword_100173690[0])
  {
    result = swift_getWitnessTable(&unk_10011B7BC, &type metadata for OSExtensionCodable.CodingKeys);
    atomic_store(result, qword_100173690);
  }
  return result;
}

uint64_t sub_1000F7BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015BE88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F7C10(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v4 = 0xEA00000000007265;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v6 = 0xE700000000000000;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x747365676964 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747365676964, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0x6150656C646E7562 && a2 == 0xEA00000000006874)
  {
    swift_bridgeObjectRelease(0xEA00000000006874);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6150656C646E7562, 0xEA00000000006874, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1000F7DD4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v5 = sub_100005C88(&qword_10015C340);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_1000F7B84();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OSExtensionCodable.CodingKeys, &type metadata for OSExtensionCodable.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D08(a1);
  LOBYTE(v30) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  v14 = v13;
  LOBYTE(v30) = 1;
  v15 = swift_bridgeObjectRetain(v13);
  v29 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5, v15);
  v32 = 2;
  v16 = sub_10001AB98();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v32, v5, &type metadata for Data, v16);
  v17 = v30;
  LOBYTE(v30) = 3;
  v27 = v31;
  v28 = v17;
  sub_10002B23C(v17, v31);
  v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
  v20 = v19;
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v22 = v18;
  v21(v8, v5);
  swift_bridgeObjectRetain(v14);
  v24 = v27;
  v23 = v28;
  sub_10002B23C(v28, v27);
  swift_bridgeObjectRetain(v20);
  sub_100021610(v23, v24);
  swift_bridgeObjectRelease(v14);
  sub_100005D08(a1);
  swift_bridgeObjectRelease(v14);
  sub_100021610(v23, v24);
  result = swift_bridgeObjectRelease(v20);
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v29;
  a2[3] = v23;
  a2[4] = v24;
  a2[5] = v22;
  a2[6] = v20;
  return result;
}

uint64_t sub_1000F8078(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88((uint64_t *)&unk_10015BA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for KernelExtension(uint64_t a1)
{
  return sub_100017D70(a1, (uint64_t *)&unk_100173EB0, (uint64_t)&nominal type descriptor for KernelExtension);
}

uint64_t type metadata accessor for DriverExtension(uint64_t a1)
{
  return sub_100017D70(a1, qword_100173EC0, (uint64_t)&nominal type descriptor for DriverExtension);
}

uint64_t sub_1000F80E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _QWORD v77[3];
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  uint64_t v81;
  uint64_t v82;
  __int128 v83[3];
  uint64_t v84[5];
  char v85;
  __int128 v86[2];
  char v87;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v67 - v9;
  sub_10003A1E0(a1, (uint64_t)v84);
  sub_10003A1E0(a2, (uint64_t)v86);
  if (!v85)
  {
    sub_10003A1E0(v84, (uint64_t)v83);
    if (v87)
    {
      sub_100005D08(v83);
      goto LABEL_16;
    }
    sub_100004E2C(v83, (uint64_t)v80);
    sub_100004E2C(v86, (uint64_t)v77);
    v20 = v81;
    v21 = v82;
    sub_100004DE4(v80, v81);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
    if (v22)
    {
      v23 = v22;
      v24 = sub_10008F3C4();
      if (*(_QWORD *)(v23 + 16))
      {
        v26 = *v24;
        v25 = v24[1];
        swift_bridgeObjectRetain(v25);
        v27 = sub_100005DE8(v26, v25);
        if ((v28 & 1) != 0)
        {
          sub_100005D28(*(_QWORD *)(v23 + 56) + 32 * v27, (uint64_t)&v74);
        }
        else
        {
          v74 = 0u;
          v75 = 0u;
        }
        swift_bridgeObjectRelease(v25);
      }
      else
      {
        v74 = 0u;
        v75 = 0u;
      }
      swift_bridgeObjectRelease(v23);
      if (*((_QWORD *)&v75 + 1))
      {
        v29 = v5;
        v30 = swift_dynamicCast(&v70, &v74, (char *)&type metadata for Any + 8, &type metadata for String, 6);
        if (v30)
          v31 = v70;
        else
          v31 = 0;
        if (v30)
          v32 = v71;
        else
          v32 = 0;
        v68 = v31;
        v69 = v32;
LABEL_35:
        v33 = v78;
        v34 = v79;
        sub_100004DE4(v77, v78);
        v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 32))(v33, v34);
        if (v35)
        {
          v36 = v35;
          v37 = sub_10008F3C4();
          if (*(_QWORD *)(v36 + 16))
          {
            v39 = *v37;
            v38 = v37[1];
            swift_bridgeObjectRetain(v38);
            v40 = sub_100005DE8(v39, v38);
            if ((v41 & 1) != 0)
            {
              sub_100005D28(*(_QWORD *)(v36 + 56) + 32 * v40, (uint64_t)&v74);
            }
            else
            {
              v74 = 0u;
              v75 = 0u;
            }
            swift_bridgeObjectRelease(v38);
          }
          else
          {
            v74 = 0u;
            v75 = 0u;
          }
          swift_bridgeObjectRelease(v36);
          if (*((_QWORD *)&v75 + 1))
          {
            v42 = swift_dynamicCast(&v70, &v74, (char *)&type metadata for Any + 8, &type metadata for String, 6);
            if (v42)
              v43 = v70;
            else
              v43 = 0;
            if (v42)
              v44 = v71;
            else
              v44 = 0;
LABEL_51:
            v46 = v81;
            v45 = v82;
            sub_100004DE4(v80, v81);
            (*(void (**)(uint64_t, uint64_t))(v45 + 64))(v46, v45);
            v47 = v78;
            v48 = v79;
            sub_100004DE4(v77, v78);
            (*(void (**)(uint64_t, uint64_t))(v48 + 64))(v47, v48);
            v49 = static URL.== infix(_:_:)(v10, v8);
            v50 = *(void (**)(char *, uint64_t))(v29 + 8);
            v50(v8, v4);
            v50(v10, v4);
            sub_100005C44((uint64_t)v80, (uint64_t)&v74);
            sub_100005C44((uint64_t)v77, (uint64_t)&v70);
            if ((v49 & 1) != 0)
            {
              v51 = *((_QWORD *)&v75 + 1);
              v52 = v76;
              sub_100004DE4(&v74, *((uint64_t *)&v75 + 1));
              v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 24))(v51, v52);
              v55 = v54;
              v56 = v72;
              v57 = v73;
              sub_100004DE4(&v70, v72);
              v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 24))(v56, v57);
              v60 = v59;
              if (v55)
              {
                if (v59)
                {
                  if (v53 == v58 && v55 == v59)
                  {
                    swift_bridgeObjectRelease(v55);
                    swift_bridgeObjectRelease(v60);
LABEL_66:
                    sub_100005D08(&v74);
                    sub_100005D08(&v70);
LABEL_73:
                    v66 = v69;
                    if (v69)
                    {
                      if (v44)
                      {
                        if (v68 == v43 && v69 == v44)
                        {
                          swift_bridgeObjectRelease(v69);
                          swift_bridgeObjectRelease(v44);
                          v18 = 1;
                        }
                        else
                        {
                          v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, v43, v44, 0);
                          swift_bridgeObjectRelease(v66);
                          swift_bridgeObjectRelease(v44);
                        }
                        goto LABEL_65;
                      }
                      v63 = v69;
                      goto LABEL_64;
                    }
                    if (!v44)
                    {
                      v18 = 1;
                      goto LABEL_65;
                    }
LABEL_63:
                    v63 = v44;
LABEL_64:
                    swift_bridgeObjectRelease(v63);
                    v18 = 0;
LABEL_65:
                    sub_100005D08(v77);
                    sub_100005D08(v80);
LABEL_70:
                    sub_10003A258(v84);
                    return v18 & 1;
                  }
                  v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, v58, v59, 0);
                  swift_bridgeObjectRelease(v55);
                  swift_bridgeObjectRelease(v60);
                  sub_100005D08(&v74);
                  sub_100005D08(&v70);
                  if ((v65 & 1) != 0)
                    goto LABEL_73;
                  goto LABEL_58;
                }
              }
              else
              {
                if (!v59)
                  goto LABEL_66;
                v55 = v59;
              }
              v62 = v69;
              swift_bridgeObjectRelease(v55);
              sub_100005D08(&v74);
              sub_100005D08(&v70);
              v61 = v62;
              goto LABEL_62;
            }
            sub_100005D08(&v74);
            sub_100005D08(&v70);
LABEL_58:
            v61 = v69;
LABEL_62:
            swift_bridgeObjectRelease(v61);
            goto LABEL_63;
          }
        }
        else
        {
          v74 = 0u;
          v75 = 0u;
        }
        sub_1000124F8((uint64_t)&v74, &qword_100158018);
        v43 = 0;
        v44 = 0;
        goto LABEL_51;
      }
    }
    else
    {
      v74 = 0u;
      v75 = 0u;
    }
    v29 = v5;
    sub_1000124F8((uint64_t)&v74, &qword_100158018);
    v68 = 0;
    v69 = 0;
    goto LABEL_35;
  }
  if (v85 == 1)
  {
    sub_10003A1E0(v84, (uint64_t)v83);
    v11 = *(_QWORD *)&v83[0];
    if (v87 == 1)
    {
      v12 = *(_QWORD *)&v86[0];
      if (sub_100026294(*(_BYTE *)(*(_QWORD *)&v83[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind), *(_BYTE *)(*(_QWORD *)&v86[0] + OBJC_IVAR____TtC10driverkitd16KernelCollection_kind))&& (static URL.== infix(_:_:)(v11 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path, v12 + OBJC_IVAR____TtC10driverkitd16KernelCollection_path) & 1) != 0)
      {
        v13 = *(_QWORD *)(v11 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
        v14 = *(_QWORD *)(v11 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8);
        v15 = *(_QWORD *)(v12 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch);
        v16 = *(_QWORD *)(v12 + OBJC_IVAR____TtC10driverkitd16KernelCollection_arch + 8);
        if (v13 == v15 && v14 == v16)
          v18 = 1;
        else
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0);
        v19 = v12;
        v12 = v11;
      }
      else
      {
        v18 = 0;
        v19 = v11;
      }
      swift_release(v19);
      swift_release(v12);
      goto LABEL_70;
    }
    swift_release(*(_QWORD *)&v83[0]);
    goto LABEL_16;
  }
  if (v87 != 2)
  {
LABEL_16:
    sub_1000124F8((uint64_t)v84, &qword_100158C00);
    v18 = 0;
    return v18 & 1;
  }
  sub_10003A258(v84);
  v18 = 1;
  return v18 & 1;
}

uint64_t sub_1000F871C(uint64_t *a1, uint64_t *a2)
{
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t (**)(void))(*a1 + 144);
  v5 = v4();
  v7 = v6;
  v8 = (*(uint64_t (**)(void))(*a2 + 144))();
  if (v5 == v8 && v7 == v9)
  {
    v13 = swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = v9;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
    swift_bridgeObjectRelease(v7);
    v13 = swift_bridgeObjectRelease(v11);
    if ((v12 & 1) == 0)
      return 0;
  }
  v14 = ((uint64_t (*)(uint64_t))v4)(v13);
  v16 = v15;
  if (v14 == 0xD000000000000014 && v15 == 0x800000010012C8F0)
  {
    swift_bridgeObjectRelease(0x800000010012C8F0);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, 0xD000000000000014, 0x800000010012C8F0, 0);
    v18 = swift_bridgeObjectRelease(v16);
    if ((v17 & 1) == 0)
    {
      v19 = (*(uint64_t (**)(uint64_t))(*a1 + 192))(v18);
      if (v19 == (*(uint64_t (**)(void))(*a2 + 192))())
        return sub_1000F80E8(a1 + 3, a2 + 3);
    }
  }
  return 0;
}

unint64_t sub_1000F8880()
{
  unint64_t result;

  result = qword_10015BE90;
  if (!qword_10015BE90)
  {
    result = swift_getWitnessTable(&unk_10011B2F8, &type metadata for OSExtensionCodableLocation);
    atomic_store(result, (unint64_t *)&qword_10015BE90);
  }
  return result;
}

unint64_t sub_1000F88C8()
{
  unint64_t result;

  result = qword_10015BE98;
  if (!qword_10015BE98)
  {
    result = swift_getWitnessTable(&unk_10011B3D8, &type metadata for OSExtensionCodable);
    atomic_store(result, (unint64_t *)&qword_10015BE98);
  }
  return result;
}

uint64_t sub_1000F890C()
{
  return sub_100012534(&qword_100159420, type metadata accessor for OSExtension, (uint64_t)&unk_10011B490);
}

uint64_t type metadata accessor for OSExtension(uint64_t a1)
{
  return sub_100017D70(a1, (uint64_t *)&unk_100173EA0, (uint64_t)&nominal type descriptor for OSExtension);
}

unint64_t sub_1000F8950()
{
  unint64_t result;

  result = qword_10015BEA0;
  if (!qword_10015BEA0)
  {
    result = swift_getWitnessTable(&unk_10011B520, &type metadata for OSExtension.Location);
    atomic_store(result, (unint64_t *)&qword_10015BEA0);
  }
  return result;
}

uint64_t destroy for OSExtensionCodableLocation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  sub_100011F40(a1[4], a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

_QWORD *initializeWithCopy for OSExtensionCodableLocation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[4];
  v7 = a2[5];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_1000122B4(v6, v7);
  a1[4] = v6;
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

_QWORD *assignWithCopy for OSExtensionCodableLocation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a2[5];
  sub_1000122B4(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  a1[4] = v8;
  a1[5] = v9;
  sub_100011F40(v10, v11);
  a1[6] = a2[6];
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for OSExtensionCodableLocation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for OSExtensionCodableLocation(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_100011F40(v8, v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = a1[7];
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for OSExtensionCodableLocation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OSExtensionCodableLocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OSExtensionCodableLocation()
{
  return &type metadata for OSExtensionCodableLocation;
}

uint64_t destroy for OSExtensionCodable(_QWORD *a1)
{
  unint64_t v2;

  swift_bridgeObjectRelease(a1[1]);
  v2 = a1[4];
  if (v2 >> 60 != 15)
    sub_100011F40(a1[3], v2);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for OSExtensionCodable(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = a2 + 3;
  v6 = a2[4];
  swift_bridgeObjectRetain(v4);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *v5;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    sub_1000122B4(v7, v6);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
  }
  v8 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

_QWORD *assignWithCopy for OSExtensionCodable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2 + 3;
  v7 = a2[4];
  if (a1[4] >> 60 != 15)
  {
    if (v7 >> 60 != 15)
    {
      v9 = *v6;
      sub_1000122B4(*v6, a2[4]);
      v10 = a1[3];
      v11 = a1[4];
      a1[3] = v9;
      a1[4] = v7;
      sub_100011F40(v10, v11);
      goto LABEL_8;
    }
    sub_1000F8DC0((uint64_t)(a1 + 3));
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v6;
    goto LABEL_8;
  }
  v8 = *v6;
  sub_1000122B4(*v6, a2[4]);
  a1[3] = v8;
  a1[4] = v7;
LABEL_8:
  a1[5] = a2[5];
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_1000F8DC0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

_QWORD *assignWithTake for OSExtensionCodable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2 + 3;
  v7 = a1[4];
  if (v7 >> 60 != 15)
  {
    v8 = a2[4];
    if (v8 >> 60 != 15)
    {
      v9 = a1[3];
      a1[3] = *v6;
      a1[4] = v8;
      sub_100011F40(v9, v7);
      goto LABEL_6;
    }
    sub_1000F8DC0((uint64_t)(a1 + 3));
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)v6;
LABEL_6:
  v10 = a2[6];
  v11 = a1[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for OSExtensionCodable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OSExtensionCodable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OSExtensionCodable()
{
  return &type metadata for OSExtensionCodable;
}

uint64_t sub_1000F8F38()
{
  return type metadata accessor for OSExtension(0);
}

void sub_1000F8F40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = ")";
  sub_10004B058(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_10011B600;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

_QWORD *destroy for OSExtension.Location(_QWORD *result)
{
  unsigned int v1;

  v1 = *((unsigned __int8 *)result + 40);
  if (v1 >= 3)
    v1 = *(_DWORD *)result + 3;
  if (v1 != 2)
  {
    if (v1 == 1)
      return (_QWORD *)swift_release(*result);
    else
      return (_QWORD *)sub_100005D08(result);
  }
  return result;
}

uint64_t initializeWithCopy for OSExtension.Location(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v5;

  v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 3)
    v3 = *(_DWORD *)a2 + 3;
  if (v3 == 2)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 40) = 2;
  }
  else if (v3 == 1)
  {
    v4 = *a2;
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 40) = 1;
    swift_retain(v4);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for OSExtension.Location(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 != 2)
    {
      if (v4 == 1)
        swift_release(*(_QWORD *)a1);
      else
        sub_100005D08((_QWORD *)a1);
    }
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      v6 = *a2;
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 40) = 1;
      swift_retain(v6);
    }
    else
    {
      v7 = a2[3];
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

__n128 initializeWithTake for OSExtension.Location(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OSExtension.Location(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 != 2)
    {
      if (v4 == 1)
        swift_release(*(_QWORD *)a1);
      else
        sub_100005D08((_QWORD *)a1);
    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v6 = 2;
    }
    else if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for OSExtension.Location(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OSExtension.Location(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000F92C0(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t sub_1000F92DC(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for OSExtension.Location()
{
  return &type metadata for OSExtension.Location;
}

uint64_t sub_1000F9314()
{
  return type metadata accessor for KernelExtension(0);
}

uint64_t sub_1000F9320()
{
  return type metadata accessor for DriverExtension(0);
}

uint64_t sub_1000F9328(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 320);
}

ValueMetadata *type metadata accessor for OSExtensionCodable.CodingKeys()
{
  return &type metadata for OSExtensionCodable.CodingKeys;
}

uint64_t _s10driverkitd18OSExtensionCodableV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000F93C0 + 4 * byte_10011B27D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000F93F4 + 4 * byte_10011B278[v4]))();
}

uint64_t sub_1000F93F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F93FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000F9404);
  return result;
}

uint64_t sub_1000F9410(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000F9418);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000F941C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F9424(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OSExtensionCodableLocation.CodingKeys()
{
  return &type metadata for OSExtensionCodableLocation.CodingKeys;
}

unint64_t sub_1000F9444()
{
  unint64_t result;

  result = qword_100173FD0[0];
  if (!qword_100173FD0[0])
  {
    result = swift_getWitnessTable(&unk_10011B6DC, &type metadata for OSExtensionCodableLocation.CodingKeys);
    atomic_store(result, qword_100173FD0);
  }
  return result;
}

unint64_t sub_1000F948C()
{
  unint64_t result;

  result = qword_1001741E0[0];
  if (!qword_1001741E0[0])
  {
    result = swift_getWitnessTable(&unk_10011B794, &type metadata for OSExtensionCodable.CodingKeys);
    atomic_store(result, qword_1001741E0);
  }
  return result;
}

unint64_t sub_1000F94D4()
{
  unint64_t result;

  result = qword_1001742F0;
  if (!qword_1001742F0)
  {
    result = swift_getWitnessTable(&unk_10011B704, &type metadata for OSExtensionCodable.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001742F0);
  }
  return result;
}

unint64_t sub_1000F951C()
{
  unint64_t result;

  result = qword_1001742F8[0];
  if (!qword_1001742F8[0])
  {
    result = swift_getWitnessTable(&unk_10011B72C, &type metadata for OSExtensionCodable.CodingKeys);
    atomic_store(result, qword_1001742F8);
  }
  return result;
}

unint64_t sub_1000F9564()
{
  unint64_t result;

  result = qword_100174380;
  if (!qword_100174380)
  {
    result = swift_getWitnessTable(&unk_10011B64C, &type metadata for OSExtensionCodableLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100174380);
  }
  return result;
}

unint64_t sub_1000F95AC()
{
  unint64_t result;

  result = qword_100174388[0];
  if (!qword_100174388[0])
  {
    result = swift_getWitnessTable(&unk_10011B674, &type metadata for OSExtensionCodableLocation.CodingKeys);
    atomic_store(result, qword_100174388);
  }
  return result;
}

uint64_t sub_1000F95F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  _QWORD v14[11];
  uint64_t v15;

  v15 = a3;
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  v14[5] = a7;
  v14[6] = a8;
  v14[7] = a1;
  v14[8] = a2;
  v10 = type metadata accessor for Dictionary.Keys(0, a4, a5, a7);
  swift_bridgeObjectRetain(a3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v10);
  v12 = Sequence.compactMap<A>(_:)(sub_1000FC878, v14, v10, a6, WitnessTable);
  swift_bridgeObjectRelease(v15);
  return v12;
}

uint64_t sub_1000F9698@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(char *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  void (*v22)(char *, char *, uint64_t);
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v27)(char *);
  char *v28;

  v27 = a2;
  v28 = a5;
  v8 = type metadata accessor for Optional(0, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v27 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v13);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v15, a1, a3);
  v20 = swift_dynamicCast(v12, v15, a3, a4, 6);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if ((v20 & 1) != 0)
  {
    v21(v12, 0, 1, a4);
    v22 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v22(v18, v12, a4);
    v23 = v27(v18);
    v24 = v28;
    if ((v23 & 1) != 0)
    {
      v22(v28, v18, a4);
      v25 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a4);
      v25 = 1;
    }
  }
  else
  {
    v25 = 1;
    v21(v12, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v24 = v28;
  }
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v21)(v24, v25, 1, a4);
}

uint64_t sub_1000F985C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  v34 = a2;
  v35 = a6;
  v38 = a7;
  v39 = a1;
  v36 = a4;
  v9 = type metadata accessor for Optional(0, a4);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v37 = (uint64_t *)((char *)&v34 - v11);
  v12 = type metadata accessor for Optional(0, a3);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v34 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v17);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v19, v39, a5);
  v24 = swift_dynamicCast(v16, v19, a5, a3, 6);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  if (v24)
  {
    v25(v16, 0, 1, a3);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v16, a3);
    v27 = v36;
    v26 = v37;
    Dictionary.subscript.getter(v37, v22, v34, a3, v36, v35);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27);
    v30 = v38;
    if (v29 == 1)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, a3);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v26, v9);
      *(_OWORD *)v30 = 0u;
      *(_OWORD *)(v30 + 16) = 0u;
    }
    else
    {
      *(_QWORD *)(v38 + 24) = v27;
      v33 = sub_100005BE0((_QWORD *)v30);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v28 + 32))(v33, v26, v27);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, a3);
    }
  }
  else
  {
    v25(v16, 1, 1, a3);
    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v32 = v38;
    *(_OWORD *)v38 = 0u;
    *(_OWORD *)(v32 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1000F9AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return sub_1000F985C(a1, *v4, a3[2], a3[3], a2, a3[4], a4);
}

uint64_t sub_1000F9ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *v5;

  return sub_1000F95F0(a1, a2, *v5, a5[2], a5[3], a3, a5[4], a4);
}

_QWORD *sub_1000F9AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;

  result = (_QWORD *)swift_allocObject(v4, 48, 7);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

uint64_t sub_1000F9B28()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))() & 1;
}

uint64_t sub_1000F9B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a2;
  v6 = *(_QWORD *)(v4 + 88);
  v13 = *(_QWORD *)(v4 + 80);
  v14 = v6;
  v15 = a1;
  v16 = a3;
  v7 = type metadata accessor for PropertyCheck(255, v13, v6, a4);
  v8 = type metadata accessor for Array(0, v7);
  swift_bridgeObjectRetain(a2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  v10 = _ArrayProtocol.filter(_:)(sub_1000FC8A8, &v12, v8, WitnessTable);
  if (!Array.count.getter(v10))
  {
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  return v10;
}

_QWORD *sub_1000F9C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  Swift::String v11;
  void *object;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v23 = a2;
  v4 = *(_QWORD *)(v2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(a1);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + 88);
  v22 = type metadata accessor for PropertyCheck(0, v4, v8, v9);
  v24 = 0;
  v25 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(v25);
  v24 = 0x79747265706F7250;
  v25 = 0xEA00000000002720;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v10(v7, a1, v4);
  v11._countAndFlagsBits = String.init<A>(describing:)(v7, v4);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._object = (void *)0x800000010012CB50;
  v13._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v13);
  v15 = v24;
  v14 = v25;
  v10(v7, a1, v4);
  v16 = *(unsigned __int8 *)(v5 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (v6 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_100150278, v18 + 8, v16 | 7);
  *(_QWORD *)(v19 + 16) = v4;
  *(_QWORD *)(v19 + 24) = v8;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v19 + v17, v7, v4);
  v20 = v22;
  *(_QWORD *)(v19 + v18) = v23;
  result = (_QWORD *)swift_allocObject(v20, 48, 7);
  result[2] = v15;
  result[3] = v14;
  result[4] = sub_1000FC8F8;
  result[5] = v19;
  return result;
}

_QWORD *sub_1000F9D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  Swift::String v11;
  void *object;
  Swift::String v13;
  _QWORD *v14;
  _QWORD *v15;

  v6 = *(_QWORD *)(v4 + 80);
  v7 = *(_QWORD *)(v4 + 88);
  v8 = type metadata accessor for PropertyCheck(0, v6, v7, a4);
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9 = type metadata accessor for Array(0, v6);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v9, WitnessTable);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._countAndFlagsBits = 39;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14 = (_QWORD *)swift_allocObject(&unk_1001502A0, 40, 7);
  v14[2] = v6;
  v14[3] = v7;
  v14[4] = a1;
  v15 = (_QWORD *)swift_allocObject(v8, 48, 7);
  v15[2] = 0xD000000000000024;
  v15[3] = 0x800000010012CB70;
  v15[4] = sub_1000FCA00;
  v15[5] = v14;
  swift_bridgeObjectRetain(a1);
  return v15;
}

uint64_t sub_1000F9ECC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Bool IsNativeType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];

  v22 = a2;
  v23 = a5;
  v8 = *(_QWORD *)(a4 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(v11);
  if (!Array.endIndex.getter(a3, a4))
  {
LABEL_12:
    swift_bridgeObjectRelease(a3);
    return 1;
  }
  v21 = v9;
  v12 = 0;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v12, IsNativeType, a3, a4);
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, a3+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v12, a4);
      v14 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_11;
      goto LABEL_5;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)(v12, a3, a4);
    if (v21 != 8)
      break;
    v19 = result;
    v24[0] = result;
    (*(void (**)(char *, _QWORD *, uint64_t))(v8 + 16))(v10, v24, a4);
    swift_unknownObjectRelease(v19);
    v14 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
LABEL_5:
    v15 = a1[3];
    v16 = a1[4];
    sub_100004DE4(a1, v15);
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8))(v24, v10, v22, a4, v23, v15, v16);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a4);
    v17 = v24[3];
    sub_1000124F8((uint64_t)v24, &qword_100158018);
    if (v17)
    {
      swift_bridgeObjectRelease(a3);
      return 0;
    }
    ++v12;
    if (v14 == Array.endIndex.getter(a3, a4))
      goto LABEL_12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000FA0A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  Swift::String v15;
  void *object;
  Swift::String v17;
  uint64_t MetatypeMetadata;
  Swift::String v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *result;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v6 = v5;
  v40 = a1;
  v41 = a4;
  v8 = a3;
  v38 = a3;
  v10 = *(_QWORD *)(v5 + 80);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(a1);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = 0;
  v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(v44);
  v43 = 0x79747265706F7250;
  v44 = 0xEA00000000002720;
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v14(v13, a1, v10);
  v15._countAndFlagsBits = String.init<A>(describing:)(v13, v10);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._object = (void *)0x800000010012CBA0;
  v17._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v17);
  v39 = a5;
  v42 = a5;
  MetatypeMetadata = swift_getMetatypeMetadata(a5);
  v19._countAndFlagsBits = String.init<A>(describing:)(&v42, MetatypeMetadata);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v22 = v43;
  v23 = v44;
  v24 = (v8 & 1) == 0;
  if ((v8 & 1) != 0)
    v25 = 0x20656220726F202CLL;
  else
    v25 = 0;
  if (v24)
    v26 = (void *)0xE000000000000000;
  else
    v26 = (void *)0xEE00746E65736261;
  v27 = *(_QWORD *)(v6 + 88);
  v37 = type metadata accessor for PropertyCheck(0, v10, v27, v21);
  v43 = v22;
  v44 = v23;
  swift_bridgeObjectRetain(v23);
  v28._countAndFlagsBits = v25;
  v28._object = v26;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v26);
  v29 = v43;
  v30 = v44;
  v14((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v40, v10);
  v31 = *(unsigned __int8 *)(v11 + 80);
  v32 = (v31 + 40) & ~v31;
  v33 = v32 + v12;
  v34 = (char *)swift_allocObject(&unk_1001502C8, (v33 & 0xFFFFFFFFFFFFFFF8) + 16, v31 | 7);
  v35 = v39;
  *((_QWORD *)v34 + 2) = v10;
  *((_QWORD *)v34 + 3) = v35;
  *((_QWORD *)v34 + 4) = v27;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v34[v32], v13, v10);
  v34[v33] = v38;
  *(_QWORD *)&v34[(v33 & 0xFFFFFFFFFFFFFFF8) + 8] = v41;
  result = (_QWORD *)swift_allocObject(v37, 48, 7);
  result[2] = v29;
  result[3] = v30;
  result[4] = sub_1000FCAD0;
  result[5] = v34;
  return result;
}

uint64_t sub_1000FA2E8(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  char v29;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];

  v33 = a5;
  v34 = a4;
  v14 = type metadata accessor for Optional(0, a7);
  v35 = *(_QWORD *)(v14 - 8);
  v36 = v14;
  v15 = __chkstk_darwin(v14);
  v31 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v31 - v18;
  v20 = *(_QWORD *)(a7 - 8);
  __chkstk_darwin(v17);
  v32 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v23 = a1[4];
  sub_100004DE4(a1, v22);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8))(&v37, a3, a2, a6, a8, v22, v23);
  if (v38)
  {
    sub_100017464(&v37, v39);
    sub_100005D28((uint64_t)v39, (uint64_t)&v37);
    v24 = swift_dynamicCast(v19, &v37, (char *)&type metadata for Any + 8, a7, 6);
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    if ((v24 & 1) != 0)
    {
      v25(v19, 0, 1, a7);
      v26 = v32;
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v32, v19, a7);
      v27 = v33;
      if (v33)
      {
        v28 = v31;
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v31, v26, a7);
        v29 = 1;
        v25(v28, 0, 1, a7);
        (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v27, v28, v36);
        (*(void (**)(char *, uint64_t))(v20 + 8))(v26, a7);
        sub_100005D08(v39);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v26, a7);
        sub_100005D08(v39);
        v29 = 1;
      }
    }
    else
    {
      v25(v19, 1, 1, a7);
      sub_100005D08(v39);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v36);
      v29 = 0;
    }
  }
  else
  {
    sub_1000124F8((uint64_t)&v37, &qword_100158018);
    v29 = v34;
  }
  return v29 & 1;
}

_QWORD *sub_1000FA558(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  Swift::String v16;
  void *object;
  Swift::String v18;
  uint64_t v19;
  uint64_t WitnessTable;
  Swift::String v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  Swift::String v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;

  v49 = a2;
  v50 = a6;
  v51 = a4;
  v46 = a5;
  v47 = a1;
  v8 = a3;
  v45 = a3;
  v11 = *(_QWORD *)(v6 + 80);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(a1);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = 0;
  v54 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease(v54);
  v53 = 0x79747265706F7250;
  v54 = 0xEA00000000002720;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v15(v14, a1, v11);
  v16._countAndFlagsBits = String.init<A>(describing:)(v14, v11);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._object = (void *)0x800000010012CBC0;
  v18._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v18);
  v52 = a2;
  v19 = type metadata accessor for Array(0, a5);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v19, WitnessTable);
  v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  v24 = v53;
  v25 = v54;
  if ((v8 & 1) != 0)
    v26 = 0x20656220726F202CLL;
  else
    v26 = 0;
  if ((v8 & 1) != 0)
    v27 = (void *)0xEE00746E65736261;
  else
    v27 = (void *)0xE000000000000000;
  v28 = *(_QWORD *)(v48 + 88);
  v48 = type metadata accessor for PropertyCheck(0, v11, v28, v23);
  v53 = v24;
  v54 = v25;
  swift_bridgeObjectRetain(v25);
  v29._countAndFlagsBits = v26;
  v29._object = v27;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v27);
  v30 = v54;
  v44 = v53;
  v15((char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v47, v11);
  v31 = *(unsigned __int8 *)(v12 + 80);
  v32 = (v31 + 48) & ~v31;
  v33 = v32 + v13;
  v34 = (v32 + v13) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8;
  v36 = (char *)swift_allocObject(&unk_1001502F0, v35 + 8, v31 | 7);
  v37 = v46;
  *((_QWORD *)v36 + 2) = v11;
  *((_QWORD *)v36 + 3) = v37;
  v38 = v50;
  *((_QWORD *)v36 + 4) = v28;
  *((_QWORD *)v36 + 5) = v38;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v36[v32], v14, v11);
  v36[v33] = v45;
  *(_QWORD *)&v36[v34 + 8] = v51;
  v39 = v48;
  v40 = v49;
  *(_QWORD *)&v36[v35] = v49;
  v41 = (_QWORD *)swift_allocObject(v39, 48, 7);
  v41[2] = v44;
  v41[3] = v30;
  v41[4] = sub_1000FCB78;
  v41[5] = v36;
  swift_bridgeObjectRetain(v40);
  return v41;
}

uint64_t sub_1000FA7EC(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t WitnessTable;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[2];

  v37 = a5;
  v38 = a6;
  v16 = type metadata accessor for Optional(0, a8);
  v39 = *(_QWORD *)(v16 - 8);
  v40 = v16;
  v17 = __chkstk_darwin(v16);
  v35 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v34 - v20;
  v41 = *(_QWORD *)(a8 - 8);
  __chkstk_darwin(v19);
  v36 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[3];
  v23 = a1[4];
  sub_100004DE4(a1, v24);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8))(&v42, a3, a2, a7, a9, v24, v23);
  if (v43)
  {
    sub_100017464(&v42, v44);
    sub_100005D28((uint64_t)v44, (uint64_t)&v42);
    v25 = swift_dynamicCast(v21, &v42, (char *)&type metadata for Any + 8, a8, 6);
    v26 = v41;
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
    if ((v25 & 1) != 0)
    {
      v27(v21, 0, 1, a8);
      v28 = v36;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v36, v21, a8);
      v29 = v37;
      if (v37)
      {
        v30 = v35;
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v35, v28, a8);
        v27(v30, 0, 1, a8);
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v29, v30, v40);
      }
      *(_QWORD *)&v42 = v38;
      v31 = type metadata accessor for Array(0, a8);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v31);
      a4 = Sequence<>.contains(_:)(v28, v31, WitnessTable, a10);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, a8);
      sub_100005D08(v44);
    }
    else
    {
      v27(v21, 1, 1, a8);
      sub_100005D08(v44);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v21, v40);
      a4 = 0;
    }
  }
  else
  {
    sub_1000124F8((uint64_t)&v42, &qword_100158018);
  }
  return a4 & 1;
}

_QWORD *sub_1000FAA84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::String v13;
  void (*v14)(char *, uint64_t, uint64_t);
  Swift::String v15;
  void *object;
  Swift::String v17;
  Swift::String v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v5 = v4;
  v39 = a2;
  v40 = a4;
  v6 = a3;
  v37 = a3;
  v38 = a1;
  v9 = *(_QWORD *)(v4 + 80);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(a1);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = 0;
  v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v13._countAndFlagsBits = 0x79747265706F7250;
  v13._object = (void *)0xEA00000000002720;
  String.append(_:)(v13);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v14(v12, a1, v9);
  v15._countAndFlagsBits = String.init<A>(describing:)(v12, v9);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._object = (void *)0x800000010012CBE0;
  v17._countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v17);
  v41 = a2;
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v19);
  v21 = v42;
  v22 = v43;
  if ((v6 & 1) != 0)
    v23 = 0x20656220726F202CLL;
  else
    v23 = 0;
  if ((v6 & 1) != 0)
    v24 = (void *)0xEE00746E65736261;
  else
    v24 = (void *)0xE000000000000000;
  v25 = *(_QWORD *)(v5 + 88);
  v36 = type metadata accessor for PropertyCheck(0, v9, v25, v20);
  v42 = v21;
  v43 = v22;
  swift_bridgeObjectRetain(v22);
  v26._countAndFlagsBits = v23;
  v26._object = v24;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v24);
  v27 = v43;
  v35 = v42;
  v14((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v38, v9);
  v28 = *(unsigned __int8 *)(v10 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = v29 + v11;
  v31 = ((v30 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(&unk_100150318, v31 + 8, v28 | 7);
  *(_QWORD *)(v32 + 16) = v9;
  *(_QWORD *)(v32 + 24) = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v32 + v29, v12, v9);
  *(_BYTE *)(v32 + v30) = v37;
  *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + v32 + 8) = v40;
  *(_QWORD *)(v32 + v31) = v39;
  result = (_QWORD *)swift_allocObject(v36, 48, 7);
  result[2] = v35;
  result[3] = v27;
  result[4] = sub_1000FCC44;
  result[5] = v32;
  return result;
}

_QWORD *sub_1000FACE0(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Swift::String v14;
  void (*v15)(char *, uint64_t, uint64_t);
  Swift::String v16;
  void *object;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v45 = a5;
  v6 = a4;
  v40 = a4;
  v42 = a2;
  v43 = (uint64_t)a3;
  v41 = a1;
  v10 = *(_QWORD *)(v5 + 80);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(a1);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = 0;
  v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v14._countAndFlagsBits = 0x79747265706F7250;
  v14._object = (void *)0xEA00000000002720;
  String.append(_:)(v14);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v15(v13, a1, v10);
  v16._countAndFlagsBits = String.init<A>(describing:)(v13, v10);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._object = (void *)0x800000010012CC20;
  v18._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v18);
  v19._countAndFlagsBits = a2;
  v19._object = a3;
  String.append(_:)(v19);
  v21 = v46;
  v22 = v47;
  if ((v6 & 1) != 0)
    v23 = 0x20656220726F202CLL;
  else
    v23 = 0;
  if ((v6 & 1) != 0)
    v24 = (void *)0xEE00746E65736261;
  else
    v24 = (void *)0xE000000000000000;
  v25 = *(_QWORD *)(v44 + 88);
  v44 = type metadata accessor for PropertyCheck(0, v10, v25, v20);
  v46 = v21;
  v47 = v22;
  swift_bridgeObjectRetain(v22);
  v26._countAndFlagsBits = v23;
  v26._object = v24;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v24);
  v27 = v47;
  v39 = v46;
  v15((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v41, v10);
  v28 = *(unsigned __int8 *)(v11 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = v29 + v12;
  v31 = ((v30 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(&unk_100150340, v31 + 16, v28 | 7);
  *(_QWORD *)(v32 + 16) = v10;
  *(_QWORD *)(v32 + 24) = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v32 + v29, v13, v10);
  *(_BYTE *)(v32 + v30) = v40;
  v33 = v44;
  *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + v32 + 8) = v45;
  v34 = (uint64_t *)(v32 + v31);
  v35 = v43;
  *v34 = v42;
  v34[1] = v35;
  v36 = (_QWORD *)swift_allocObject(v33, 48, 7);
  v36[2] = v39;
  v36[3] = v27;
  v36[4] = sub_1000FCE18;
  v36[5] = v32;
  swift_bridgeObjectRetain(v35);
  return v36;
}

_QWORD *sub_1000FAF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t, uint64_t);
  Swift::String v21;
  void *object;
  Swift::String v23;
  Swift::String v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  Swift::String v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *result;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v61 = a7;
  v62 = a8;
  v63 = a6;
  v9 = a5;
  v55 = a5;
  v56 = a3;
  v57 = a2;
  v14 = *(_QWORD *)(v8 + 80);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = v15;
  v58 = a1;
  v59 = v15;
  __chkstk_darwin(a1);
  v65 = 0;
  v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(81);
  v18._countAndFlagsBits = 0x79747265706F7250;
  v18._object = (void *)0xEA00000000002720;
  String.append(_:)(v18);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v19((char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14);
  v20 = v19;
  v21._countAndFlagsBits = String.init<A>(describing:)((char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23._countAndFlagsBits = 0xD000000000000021;
  v23._object = (void *)0x800000010012CC50;
  String.append(_:)(v23);
  v24._countAndFlagsBits = _typeName(_:qualified:)(a4, 0);
  v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26._object = (void *)0x800000010012CC80;
  v26._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v26);
  v64 = a2;
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  v29._countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v64 = a3;
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v31 = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v31);
  v32._countAndFlagsBits = 41;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  v35 = v65;
  v34 = v66;
  if ((v9 & 1) != 0)
    v36 = 0x20656220726F202CLL;
  else
    v36 = 0;
  if ((v9 & 1) != 0)
    v37 = (void *)0xEE00746E65736261;
  else
    v37 = (void *)0xE000000000000000;
  v38 = *(_QWORD *)(v60 + 88);
  v60 = type metadata accessor for PropertyCheck(0, v14, v38, v33);
  v65 = v35;
  v66 = v34;
  swift_bridgeObjectRetain(v34);
  v39._countAndFlagsBits = v36;
  v39._object = v37;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v37);
  v40 = v66;
  v54 = v65;
  v41 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20(v41, v58, v14);
  v42 = v59;
  v43 = *(unsigned __int8 *)(v59 + 80);
  v44 = (v43 + 48) & ~v43;
  v45 = v44 + v16;
  v46 = ((v45 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v47 = (char *)swift_allocObject(&unk_100150368, v46 + 16, v43 | 7);
  v48 = v61;
  *((_QWORD *)v47 + 2) = v14;
  *((_QWORD *)v47 + 3) = v48;
  v49 = v62;
  *((_QWORD *)v47 + 4) = v38;
  *((_QWORD *)v47 + 5) = v49;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v47[v44], v41, v14);
  v47[v45] = v55;
  *(_QWORD *)&v47[(v45 & 0xFFFFFFFFFFFFFFF8) + 8] = v63;
  v50 = &v47[v46];
  v51 = v56;
  *(_QWORD *)v50 = v57;
  *((_QWORD *)v50 + 1) = v51;
  result = (_QWORD *)swift_allocObject(v60, 48, 7);
  result[2] = v54;
  result[3] = v40;
  result[4] = sub_1000FCFE8;
  result[5] = v47;
  return result;
}

BOOL sub_1000FB250(_QWORD *a1, uint64_t a2, uint64_t a3, _BOOL4 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  BOOL v32;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[2];

  v37 = a6;
  v38 = a7;
  v36 = a5;
  v39 = a4;
  v15 = type metadata accessor for Optional(0, a9);
  v40 = *(_QWORD *)(v15 - 8);
  v41 = v15;
  v16 = __chkstk_darwin(v15);
  v34 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v34 - v19;
  v21 = *(_QWORD *)(a9 - 8);
  __chkstk_darwin(v18);
  v35 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[3];
  v23 = a1[4];
  sub_100004DE4(a1, v24);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8))(&v42, a3, a2, a8, a10, v24, v23);
  if (v43)
  {
    sub_100017464(&v42, v44);
    sub_100005D28((uint64_t)v44, (uint64_t)&v42);
    v25 = swift_dynamicCast(v20, &v42, (char *)&type metadata for Any + 8, a9, 6);
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    if ((v25 & 1) != 0)
    {
      v26(v20, 0, 1, a9);
      v27 = v35;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v35, v20, a9);
      v28 = v36;
      if (v36)
      {
        v29 = v34;
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v34, v27, a9);
        v26(v29, 0, 1, a9);
        (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v28, v29, v41);
      }
      v30 = dispatch thunk of Sequence.underestimatedCount.getter(a9, *(_QWORD *)(a11 + 8));
      v32 = v30 >= v37 && v30 < v38;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v27, a9);
      sub_100005D08(v44);
    }
    else
    {
      v26(v20, 1, 1, a9);
      sub_100005D08(v44);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v41);
      return 0;
    }
  }
  else
  {
    sub_1000124F8((uint64_t)&v42, &qword_100158018);
    return v39;
  }
  return v32;
}

_QWORD *sub_1000FB4C4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  Swift::String v13;
  void *object;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v4 = v3;
  v5 = a2;
  v32 = a2;
  v33 = a1;
  v7 = *(_QWORD *)(v3 + 80);
  v8 = *(_QWORD *)(v7 - 8);
  v34 = *(_QWORD *)(v8 + 64);
  v35 = a3;
  __chkstk_darwin(a1);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)0xE000000000000000;
  v36 = 0;
  v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease(v37);
  v36 = 0x79747265706F7250;
  v37 = 0xEA00000000002720;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v12(v10, a1, v7);
  v13._countAndFlagsBits = String.init<A>(describing:)(v10, v7);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._object = (void *)0x800000010012CCA0;
  v15._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v15);
  v17 = v36;
  v18 = v37;
  if ((v5 & 1) != 0)
    v19 = 0x20656220726F202CLL;
  else
    v19 = 0;
  if ((v5 & 1) != 0)
    v11 = (void *)0xEE00746E65736261;
  v20 = *(_QWORD *)(v4 + 88);
  v31 = type metadata accessor for PropertyCheck(0, v7, v20, v16);
  v36 = v17;
  v37 = v18;
  swift_bridgeObjectRetain(v18);
  v21._countAndFlagsBits = v19;
  v21._object = v11;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v11);
  v22 = v36;
  v23 = v37;
  v12(v10, v33, v7);
  v24 = *(unsigned __int8 *)(v8 + 80);
  v25 = (v24 + 32) & ~v24;
  v26 = v25 + v34;
  v27 = (v25 + v34) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_100150390, v27 + 16, v24 | 7);
  *(_QWORD *)(v28 + 16) = v7;
  *(_QWORD *)(v28 + 24) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v28 + v25, v10, v7);
  *(_BYTE *)(v28 + v26) = v32;
  *(_QWORD *)(v27 + v28 + 8) = v35;
  result = (_QWORD *)swift_allocObject(v31, 48, 7);
  result[2] = v22;
  result[3] = v23;
  result[4] = sub_1000FD0B8;
  result[5] = v28;
  return result;
}

_QWORD *sub_1000FB6D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  Swift::String v16;
  void *object;
  Swift::String v18;
  uint64_t v19;
  uint64_t WitnessTable;
  Swift::String v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v40 = a6;
  v42 = a5;
  v41 = a4;
  v37 = a3;
  v9 = *(_QWORD *)(v6 + 80);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(a1);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *(_QWORD *)(v6 + 88);
  v14 = type metadata accessor for PropertyCheck(0, v9, v39, v13);
  v38 = v14;
  v44 = 0;
  v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease(v45);
  v44 = 0xD000000000000011;
  v45 = 0x800000010012CCC0;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v15(v12, a1, v9);
  v16._countAndFlagsBits = String.init<A>(describing:)(v12, v9);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._countAndFlagsBits = 0x6173207473756D20;
  v18._object = (void *)0xEF203A7966736974;
  String.append(_:)(v18);
  v43 = a3;
  v19 = type metadata accessor for Array(0, v14);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v19, WitnessTable);
  v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v44;
  v24 = v45;
  v15(v12, a1, v9);
  v25 = *(unsigned __int8 *)(v10 + 80);
  v26 = (v25 + 40) & ~v25;
  v27 = v26 + v11;
  v28 = (v26 + v11) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  v30 = (char *)swift_allocObject(&unk_1001503B8, v29 + 8, v25 | 7);
  v31 = v40;
  *((_QWORD *)v30 + 2) = v9;
  *((_QWORD *)v30 + 3) = v31;
  *((_QWORD *)v30 + 4) = v39;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v30[v26], v12, v9);
  v30[v27] = v41;
  *(_QWORD *)&v30[v28 + 8] = v42;
  v33 = v37;
  v32 = v38;
  *(_QWORD *)&v30[v29] = v37;
  v34 = (_QWORD *)swift_allocObject(v32, 48, 7);
  v34[2] = v23;
  v34[3] = v24;
  v34[4] = sub_1000FD288;
  v34[5] = v30;
  swift_bridgeObjectRetain(v33);
  return v34;
}

uint64_t sub_1000FB900(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  int v41;
  __int128 v42[2];
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];

  v36 = a6;
  v35 = a5;
  v41 = a4;
  v39 = type metadata accessor for Optional(0, a8);
  v37 = *(_QWORD *)(v39 - 8);
  v14 = __chkstk_darwin(v39);
  v16 = (char *)&v34 - v15;
  v17 = *(_QWORD *)(a8 - 8);
  v18 = __chkstk_darwin(v14);
  v38 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v40 = (char *)&v34 - v20;
  v21 = a1[3];
  v22 = a1[4];
  sub_100004DE4(a1, v21);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8))(&v44, a3, a2, a7, a9, v21, v22);
  if (v45)
  {
    sub_100017464(&v44, v46);
    sub_100005D28((uint64_t)v46, (uint64_t)&v44);
    v23 = swift_dynamicCast(v16, &v44, (char *)&type metadata for Any + 8, a8, 6);
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    if ((v23 & 1) != 0)
    {
      v24(v16, 0, 1, a8);
      v25 = v40;
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v40, v16, a8);
      v26 = v38;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v38, v25, a8);
      v27 = sub_100005C88(&qword_10015C350);
      if ((swift_dynamicCast(v42, v26, a8, v27, 6) & 1) != 0)
      {
        sub_100004E2C(v42, (uint64_t)&v44);
        v29 = v35;
        if (v35)
        {
          sub_100005C44((uint64_t)&v44, (uint64_t)v42);
          sub_1000260AC((uint64_t)v42, v29, &qword_10015C358);
        }
        type metadata accessor for PropertyCheck(0, a7, a9, v28);
        v31 = sub_1000F9B4C((uint64_t)&v44, v36, 0, v30);
        sub_100005D08(&v44);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v25, a8);
        sub_100005D08(v46);
        if (v31)
        {
          swift_bridgeObjectRelease(v31);
          v32 = 0;
        }
        else
        {
          v32 = 1;
        }
      }
      else
      {
        v43 = 0;
        memset(v42, 0, sizeof(v42));
        (*(void (**)(char *, uint64_t))(v17 + 8))(v25, a8);
        sub_100005D08(v46);
        sub_1000124F8((uint64_t)v42, &qword_10015C358);
        v32 = 0;
      }
    }
    else
    {
      v24(v16, 1, 1, a8);
      sub_100005D08(v46);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v39);
      v32 = 0;
    }
  }
  else
  {
    sub_1000124F8((uint64_t)&v44, &qword_100158018);
    v32 = v41;
  }
  return v32 & 1;
}

_QWORD *sub_1000FBC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v10 = *(_QWORD *)(v4 + 80);
  v9 = *(_QWORD *)(v4 + 88);
  v11 = type metadata accessor for PropertyCheck(0, v10, v9, a4);
  v12 = (_QWORD *)swift_allocObject(&unk_1001503E0, 48, 7);
  v12[2] = v10;
  v12[3] = v9;
  v12[4] = a1;
  v12[5] = a2;
  v13 = (_QWORD *)swift_allocObject(v11, 48, 7);
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = sub_1000FD310;
  v13[5] = v12;
  swift_bridgeObjectRetain(a4);
  swift_retain(a2);
  return v13;
}

_QWORD *sub_1000FBCBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  void *object;
  Swift::String v13;
  Swift::String v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v20;

  if (a3)
  {
    v20 = a3;
    swift_bridgeObjectRetain(a3);
    v6._countAndFlagsBits = 0x464F20594E412820;
    v6._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v6);
    v7 = *(_QWORD *)(v4 + 80);
    v8 = *(_QWORD *)(v4 + 88);
    v10 = type metadata accessor for PropertyCheck(0, v7, v8, v9);
    v11._countAndFlagsBits = Array.description.getter(a1, v10);
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13._countAndFlagsBits = 41;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
  }
  else
  {
    a2 = 0x203A464F20594E41;
    v20 = 0xE800000000000000;
    v7 = *(_QWORD *)(v4 + 80);
    v8 = *(_QWORD *)(v4 + 88);
    v10 = type metadata accessor for PropertyCheck(0, v7, v8, a4);
    v14._countAndFlagsBits = Array.description.getter(a1, v10);
    v15 = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v15);
  }
  v16 = (_QWORD *)swift_allocObject(&unk_100150408, 40, 7);
  v16[2] = v7;
  v16[3] = v8;
  v16[4] = a1;
  v17 = (_QWORD *)swift_allocObject(v10, 48, 7);
  v17[2] = a2;
  v17[3] = v20;
  v17[4] = sub_1000FD3EC;
  v17[5] = v16;
  swift_bridgeObjectRetain(a1);
  return v17;
}

_QWORD *sub_1000FBE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  _QWORD *v11;
  _QWORD *v12;

  v6 = *(_QWORD *)(v4 + 80);
  v7 = *(_QWORD *)(v4 + 88);
  v8 = type metadata accessor for PropertyCheck(0, v6, v7, a4);
  v9._countAndFlagsBits = Array.description.getter(a1, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11 = (_QWORD *)swift_allocObject(&unk_100150430, 40, 7);
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = a1;
  v12 = (_QWORD *)swift_allocObject(v8, 48, 7);
  v12[2] = 0x203A464F204C4C41;
  v12[3] = 0xE800000000000000;
  v12[4] = sub_1000FD504;
  v12[5] = v11;
  swift_bridgeObjectRetain(a1);
  return v12;
}

_QWORD *sub_1000FBEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  _QWORD *v11;
  _QWORD *v12;

  v6 = *(_QWORD *)(v4 + 80);
  v7 = *(_QWORD *)(v4 + 88);
  v8 = type metadata accessor for PropertyCheck(0, v6, v7, a4);
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9._countAndFlagsBits = Array.description.getter(a1, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11 = (_QWORD *)swift_allocObject(&unk_100150458, 40, 7);
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = a1;
  v12 = (_QWORD *)swift_allocObject(v8, 48, 7);
  v12[2] = 0xD000000000000010;
  v12[3] = 0x800000010012CCE0;
  v12[4] = sub_1000FD61C;
  v12[5] = v11;
  swift_bridgeObjectRetain(a1);
  return v12;
}

_QWORD *sub_1000FBFFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  _QWORD v15[2];

  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = *(_QWORD *)(v1 + 88);
  v8 = type metadata accessor for PropertyCheck(0, v3, v6, v7);
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(50);
  v9._countAndFlagsBits = 0x79747265706F7250;
  v9._object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(a1, v3);
  v10._object = (void *)0x800000010012CD00;
  v10._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(&unk_100150480, v12 + v5, v11 | 7);
  *(_QWORD *)(v13 + 16) = v3;
  *(_QWORD *)(v13 + 24) = v6;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v13 + v12, (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = (_QWORD *)swift_allocObject(v8, 48, 7);
  result[2] = 0;
  result[3] = 0xE000000000000000;
  result[4] = sub_1000FD7A0;
  result[5] = v13;
  return result;
}

uint64_t sub_1000FC15C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  char *v71;
  unint64_t v72;
  const char *v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  char v81;
  char v82;
  char *v83;
  char *v84;
  char *v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;

  v11 = sub_100005C88(&qword_1001587E0);
  __chkstk_darwin(v11);
  v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_100004DE4(a1, v14);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8))(&v95, a3, a2, a4, a5, v14, v15);
  if (!v98)
  {
    sub_1000124F8((uint64_t)&v95, &qword_100158018);
    return 0;
  }
  if ((swift_dynamicCast(&v93, &v95, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return 0;
  v17 = v93;
  v16 = v94;
  v95 = v93;
  v96 = v94;
  v18 = sub_1000917C4();
  v19 = (char *)*((_QWORD *)v18 + 1);
  v93 = *(_QWORD *)v18;
  v94 = v19;
  v20 = type metadata accessor for Locale(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v13, 1, 1, v20);
  v22 = sub_100026250();
  swift_bridgeObjectRetain(v19);
  StringProtocol.range<A>(of:options:range:locale:)(&v93, 0, 0, 0, 1, v13, &type metadata for String, &type metadata for String, v22, v22);
  v24 = v23;
  LOBYTE(v19) = v25;
  sub_1000124F8((uint64_t)v13, &qword_1001587E0);
  swift_bridgeObjectRelease(v94);
  if ((v19 & 1) != 0)
    goto LABEL_9;
  v95 = v17;
  v96 = v16;
  v26 = (unint64_t *)sub_1000917D0();
  v27 = v26[1];
  v93 = *v26;
  v94 = (char *)v27;
  v21(v13, 1, 1, v20);
  swift_bridgeObjectRetain(v27);
  v28 = StringProtocol.range<A>(of:options:range:locale:)(&v93, 0, 0, 0, 1, v13, &type metadata for String, &type metadata for String, v22, v22);
  v30 = v29;
  sub_1000124F8((uint64_t)v13, &qword_1001587E0);
  swift_bridgeObjectRelease(v94);
  if ((v30 & 1) != 0)
  {
LABEL_9:
    v35 = v16;
LABEL_10:
    swift_bridgeObjectRelease(v35);
    return 0;
  }
  v89 = v22;
  if (v28 >> 14 < v24 >> 14)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v17 = String.subscript.getter(v24, v28, v17, v16);
  v22 = v31;
  v5 = v32;
  v34 = v33;
  swift_bridgeObjectRelease(v16);
  v87 = v20;
  v88 = v13;
  v86 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21;
  if (v22 >> 14 == v17 >> 14)
  {
    swift_bridgeObjectRelease(v34);
    v30 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_36;
  }
  v30 = (char *)_swiftEmptyArrayStorage;
  v37 = v17;
  v38 = v17;
  v24 = v17;
  v39 = v34;
  v91 = v34;
  v92 = v22 >> 14;
  do
  {
    v41 = Substring.subscript.getter(v37, v17, v22, v5, v39);
    v43 = v41;
    v44 = v42;
    if (v41 == 44 && v42 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(0xE100000000000000);
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, 44, 0xE100000000000000, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v44);
    }
    else
    {
      v45 = Character.isWhitespace.getter(v43, v44);
      swift_bridgeObjectRelease(v44);
      if ((v45 & 1) == 0)
      {
        v37 = Substring.index(after:)(v37, v17, v22, v5, v39);
        continue;
      }
    }
    if (v38 >> 14 != v37 >> 14)
    {
      if (v37 >> 14 < v38 >> 14)
      {
        __break(1u);
        goto LABEL_46;
      }
      v46 = Substring.subscript.getter(v38, v37, v17, v22, v5, v39);
      v48 = v47;
      v50 = v49;
      v52 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
        v30 = sub_10002959C(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
      v53 = v30;
      v54 = *((_QWORD *)v30 + 2);
      v55 = v53;
      v56 = *((_QWORD *)v53 + 3);
      if (v54 >= v56 >> 1)
        v55 = sub_10002959C((char *)(v56 > 1), v54 + 1, 1, v55);
      *((_QWORD *)v55 + 2) = v54 + 1;
      v40 = &v55[32 * v54];
      v30 = v55;
      *((_QWORD *)v40 + 4) = v46;
      *((_QWORD *)v40 + 5) = v48;
      *((_QWORD *)v40 + 6) = v50;
      *((_QWORD *)v40 + 7) = v52;
      v39 = v91;
    }
    v37 = Substring.index(after:)(v37, v17, v22, v5, v39);
    v38 = v37;
    v24 = v37;
  }
  while (v92 != v37 >> 14);
  if (v92 == v38 >> 14)
  {
    swift_bridgeObjectRelease(v39);
    goto LABEL_36;
  }
  if (v92 >= v24 >> 14)
  {
    v24 = Substring.subscript.getter(v24, v22, v17, v22, v5, v39);
    v17 = v57;
    v22 = v58;
    v5 = v59;
    swift_bridgeObjectRelease(v39);
    if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
      goto LABEL_48;
    goto LABEL_33;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  v30 = sub_10002959C(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
LABEL_33:
  v60 = v30;
  v61 = *((_QWORD *)v30 + 2);
  v62 = v60;
  v63 = *((_QWORD *)v60 + 3);
  if (v61 >= v63 >> 1)
    v62 = sub_10002959C((char *)(v63 > 1), v61 + 1, 1, v62);
  *((_QWORD *)v62 + 2) = v61 + 1;
  v64 = &v62[32 * v61];
  v30 = v62;
  *((_QWORD *)v64 + 4) = v24;
  *((_QWORD *)v64 + 5) = v17;
  *((_QWORD *)v64 + 6) = v22;
  *((_QWORD *)v64 + 7) = v5;
LABEL_36:
  v65 = *((_QWORD *)v30 + 2);
  if (v65)
  {
    v85 = v30;
    v66 = (uint64_t *)(v30 + 56);
    v68 = v87;
    v67 = (uint64_t)v88;
    v69 = v86;
    do
    {
      v90 = v65;
      v70 = *v66;
      v91 = *(v66 - 1);
      v71 = (char *)*(v66 - 2);
      v95 = *(v66 - 3);
      v72 = v95;
      v96 = v71;
      v97 = v91;
      v98 = v70;
      swift_bridgeObjectRetain(v70);
      v73 = sub_1000917DC();
      v74 = (char *)*((_QWORD *)v73 + 1);
      v93 = *(_QWORD *)v73;
      v94 = v74;
      v69(v67, 1, 1, v68);
      v75 = sub_100072700();
      swift_bridgeObjectRetain(v74);
      v76 = v89;
      StringProtocol.range<A>(of:options:range:locale:)(&v93, 1024, 0, 0, 1, v67, &type metadata for Substring, &type metadata for String, v75, v89);
      LODWORD(v92) = v77;
      sub_1000124F8(v67, &qword_1001587E0);
      swift_bridgeObjectRelease(v94);
      v95 = v72;
      v96 = v71;
      v78 = v76;
      v97 = v91;
      v98 = v70;
      v79 = (unint64_t *)sub_1000917E8();
      v80 = v79[1];
      v93 = *v79;
      v94 = (char *)v80;
      v69(v67, 1, 1, v68);
      swift_bridgeObjectRetain(v80);
      StringProtocol.range<A>(of:options:range:locale:)(&v93, 1024, 0, 0, 1, v67, &type metadata for Substring, &type metadata for String, v75, v78);
      v82 = v81;
      sub_1000124F8(v67, &qword_1001587E0);
      v83 = v94;
      swift_bridgeObjectRelease(v70);
      swift_bridgeObjectRelease(v83);
      if ((v92 & 1) != 0 && (v82 & 1) != 0)
      {
        v35 = v85;
        goto LABEL_10;
      }
      v66 += 4;
      v65 = v90 - 1;
    }
    while (v90 != 1);
    v84 = v85;
  }
  else
  {
    v84 = v30;
  }
  swift_bridgeObjectRelease(v84);
  return 1;
}

uint64_t sub_1000FC81C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_1000FC848()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return v1;
}

uint64_t sub_1000FC878@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_1000F9698(a1, *(uint64_t (**)(char *))(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), a2);
}

BOOL sub_1000FC8A8(uint64_t a1)
{
  uint64_t v1;

  return ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 120))(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40)) & 1) == 0;
}

uint64_t type metadata accessor for PropertyCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000639C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PropertyCheck);
}

BOOL sub_1000FC8F8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[2];

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v2 + v7;
  v9 = *(_QWORD *)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = a1[3];
  v11 = a1[4];
  sub_100004DE4(a1, v10);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(&v14, v8, a2, v4, v5, v10, v11);
  v12 = v15;
  if (v15)
  {
    sub_100017464(&v14, v16);
    if (v9)
      sub_100005D28((uint64_t)v16, v9);
    sub_100005D08(v16);
  }
  else
  {
    sub_1000124F8((uint64_t)&v14, &qword_100158018);
  }
  return v12 == 0;
}

uint64_t sub_1000FC9DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000FCA00(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1000F9ECC(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t sub_1000FCA0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v2 | 7;
  v5 = ((*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000FCA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = v2 | 7;
  v5 = ((v3 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000FCAD0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = v2[2];
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_1000FA2E8(a1, a2, (uint64_t)v2 + v5, *((unsigned __int8 *)v2 + v5 + *(_QWORD *)(v4 + 64)), *(_QWORD *)((char *)v2 + ((v5 + *(_QWORD *)(v4 + 64)) & 0xFFFFFFFFFFFFF8) + 8), v3, v2[3], v2[4]);
}

uint64_t sub_1000FCB08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = v2 | 7;
  v5 = (((v3 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_1000FCB78(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = v2[2];
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_1000FA7EC(a1, a2, (uint64_t)v2 + v5, *((_BYTE *)v2 + v5 + *(_QWORD *)(v4 + 64)), *(_QWORD *)((char *)v2 + ((v5 + *(_QWORD *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)((char *)v2 + ((((v5 + *(_QWORD *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)), v3, v2[3], v2[4], v2[5]) & 1;
}

uint64_t sub_1000FCBDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v2 | 7;
  v5 = ((((v3 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v5, v4);
}

BOOL sub_1000FCC44(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  _OWORD v22[2];

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v2 + v8);
  v10 = v2 + v7;
  v11 = *(_QWORD **)((v8 & 0xFFFFFFFFFFFFFFF8) + v2 + 8);
  v12 = *(_QWORD *)(v2 + (((v8 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8));
  v13 = a1[3];
  v14 = a1[4];
  sub_100004DE4(a1, v13);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8))(&v20, v10, a2, v4, v5, v13, v14);
  if (v21)
  {
    sub_100017464(&v20, v22);
    sub_100005D28((uint64_t)v22, (uint64_t)&v20);
    if ((swift_dynamicCast(v19, &v20, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v16 = v19[0];
      v15 = v19[1];
      if (v11)
      {
        *v11 = v19[0];
        v11[1] = v15;
        swift_bridgeObjectRetain(v15);
      }
      v17 = String.count.getter(v16, v15);
      swift_bridgeObjectRelease(v15);
      sub_100005D08(v22);
      return v17 <= v12;
    }
    else
    {
      sub_100005D08(v22);
      return 0;
    }
  }
  else
  {
    sub_1000124F8((uint64_t)&v20, &qword_100158018);
  }
  return v9;
}

uint64_t sub_1000FCDA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v2 | 7;
  v5 = (((v3 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 8));
  return swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_1000FCE18(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  void **v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  v9 = v2 + v7;
  v10 = *(_BYTE *)(v2 + v8);
  v11 = *(void ***)((v8 & 0xFFFFFFFFFFFFFFF8) + v2 + 8);
  v12 = (uint64_t *)(v2 + (((v8 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8));
  v13 = (void *)v12[1];
  v19._countAndFlagsBits = *v12;
  v14 = a1[3];
  v15 = a1[4];
  sub_100004DE4(a1, v14);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8))(&v21, v9, a2, v4, v5, v14, v15);
  if (v22)
  {
    sub_100017464(&v21, v23);
    sub_100005D28((uint64_t)v23, (uint64_t)&v21);
    if ((swift_dynamicCast(&v19._object, &v21, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v16 = v20;
      if (v11)
      {
        *v11 = v19._object;
        v11[1] = v16;
        swift_bridgeObjectRetain(v16);
      }
      v17._countAndFlagsBits = v19._countAndFlagsBits;
      v17._object = v13;
      v10 = String.hasPrefix(_:)(v17);
      swift_bridgeObjectRelease(v16);
      sub_100005D08(v23);
    }
    else
    {
      sub_100005D08(v23);
      v10 = 0;
    }
  }
  else
  {
    sub_1000124F8((uint64_t)&v21, &qword_100158018);
  }
  return v10 & 1;
}

uint64_t sub_1000FCF80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = v2 | 7;
  v5 = ((((v3 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v5, v4);
}

BOOL sub_1000FCFE8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = v2[2];
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  return sub_1000FB250(a1, a2, (uint64_t)v2 + v5, *((unsigned __int8 *)v2 + v6), *(_QWORD *)((char *)v2 + (v6 & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)((char *)v2 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)((char *)v2 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8), v3, v2[3], v2[4], v2[5]);
}

uint64_t sub_1000FD058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v2 | 7;
  v5 = ((v3 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v5, v4);
}

BOOL sub_1000FD0B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  __int128 v19;
  uint64_t v20;
  _OWORD v21[2];

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  v9 = v2 + v7;
  v10 = *(unsigned __int8 *)(v2 + v8);
  v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + v2 + 8);
  v12 = a1[3];
  v13 = a1[4];
  sub_100004DE4(a1, v12);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(&v19, v9, a2, v4, v5, v12, v13);
  if (v20)
  {
    sub_100017464(&v19, v21);
    sub_100005D28((uint64_t)v21, (uint64_t)&v19);
    if ((swift_dynamicCast(v18, &v19, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v14 = v18[1];
      v15 = String.utf8CString.getter(v18[0]);
      swift_bridgeObjectRelease(v14);
      v16 = OSKextParseVersionString(v15 + 32);
      swift_release(v15);
      if (v11)
      {
        *(_QWORD *)v11 = v16;
        *(_BYTE *)(v11 + 8) = 0;
      }
      sub_100005D08(v21);
      return v16 > 0;
    }
    else
    {
      sub_100005D08(v21);
      return 0;
    }
  }
  else
  {
    sub_1000124F8((uint64_t)&v19, &qword_100158018);
  }
  return v10;
}

uint64_t sub_1000FD218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = v2 | 7;
  v5 = (((v3 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_1000FD288(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = v2[2];
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_1000FB900(a1, a2, (uint64_t)v2 + v5, *((unsigned __int8 *)v2 + v5 + *(_QWORD *)(v4 + 64)), *(_QWORD *)((char *)v2 + ((v5 + *(_QWORD *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)((char *)v2 + ((((v5 + *(_QWORD *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)), v3, v2[3], v2[4]) & 1;
}

uint64_t sub_1000FD2EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

BOOL sub_1000FD310(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(BOOL (*)(), uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = a1[3];
  v5 = a1[4];
  v11 = *(_OWORD *)(v1 + 24);
  sub_100004DE4(a1, v4);
  v6 = swift_allocObject(&unk_100150578, 48, 7);
  *(_QWORD *)(v6 + 16) = v2;
  *(_OWORD *)(v6 + 24) = v11;
  *(_QWORD *)(v6 + 40) = v3;
  v7 = *(uint64_t (**)(BOOL (*)(), uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 16);
  swift_retain(v3);
  v8 = v7(sub_1000FD808, v6, v2, v11, v4, v5);
  swift_release(v6);
  v9 = Array.count.getter(v8);
  swift_bridgeObjectRelease(v8);
  return v9 == 0;
}

uint64_t sub_1000FD3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Bool IsNativeType;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v7 = v4[4];
  v8 = type metadata accessor for PropertyCheck(0, v4[2], v4[3], a4);
  v9 = swift_bridgeObjectRetain(v7);
  if (!Array.endIndex.getter(v9, v8))
    goto LABEL_11;
  v10 = 4;
  while (1)
  {
    v11 = v10 - 4;
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v10 - 4, IsNativeType, v7, v8);
    if (!IsNativeType)
      break;
    v13 = *(_QWORD *)(v7 + 8 * v10);
    swift_retain(v13);
    v14 = v10 - 3;
    if (__OFADD__(v11, 1))
      goto LABEL_10;
LABEL_5:
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 120))(a1, a2);
    swift_release(v13);
    if ((v15 & 1) == 0)
    {
      ++v10;
      if (v14 != Array.endIndex.getter(v7, v8))
        continue;
    }
    goto LABEL_12;
  }
  v13 = _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v7, v8);
  v14 = v10 - 3;
  if (!__OFADD__(v11, 1))
    goto LABEL_5;
LABEL_10:
  __break(1u);
LABEL_11:
  v15 = 0;
LABEL_12:
  swift_bridgeObjectRelease(v7);
  return v15 & 1;
}

uint64_t sub_1000FD504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Bool IsNativeType;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v7 = v4[4];
  v8 = type metadata accessor for PropertyCheck(0, v4[2], v4[3], a4);
  v9 = swift_bridgeObjectRetain(v7);
  if (!Array.endIndex.getter(v9, v8))
    goto LABEL_11;
  v10 = 4;
  while (1)
  {
    v11 = v10 - 4;
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v10 - 4, IsNativeType, v7, v8);
    if (!IsNativeType)
      break;
    v13 = *(_QWORD *)(v7 + 8 * v10);
    swift_retain(v13);
    v14 = v10 - 3;
    if (__OFADD__(v11, 1))
      goto LABEL_10;
LABEL_5:
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 120))(a1, a2);
    swift_release(v13);
    if ((v15 & 1) != 0)
    {
      ++v10;
      if (v14 != Array.endIndex.getter(v7, v8))
        continue;
    }
    goto LABEL_12;
  }
  v13 = _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v7, v8);
  v14 = v10 - 3;
  if (!__OFADD__(v11, 1))
    goto LABEL_5;
LABEL_10:
  __break(1u);
LABEL_11:
  v15 = 1;
LABEL_12:
  swift_bridgeObjectRelease(v7);
  return v15 & 1;
}

uint64_t sub_1000FD61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Bool IsNativeType;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v7 = v4[4];
  v8 = type metadata accessor for PropertyCheck(0, v4[2], v4[3], a4);
  v9 = swift_bridgeObjectRetain(v7);
  v10 = 0;
  if (!Array.endIndex.getter(v9, v8))
    goto LABEL_12;
  v11 = 4;
  while (1)
  {
    v12 = v11 - 4;
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v11 - 4, IsNativeType, v7, v8);
    if (!IsNativeType)
      break;
    v14 = *(_QWORD *)(v7 + 8 * v11);
    swift_retain(v14);
    v15 = v11 - 3;
    if (__OFADD__(v12, 1))
      goto LABEL_10;
LABEL_5:
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 120))(a1, a2);
    swift_release(v14);
    if ((v16 & v10 & 1) != 0)
      goto LABEL_11;
    v10 |= v16;
    ++v11;
    if (v15 == Array.endIndex.getter(v7, v8))
      goto LABEL_12;
  }
  v14 = _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v7, v8);
  v15 = v11 - 3;
  if (!__OFADD__(v12, 1))
    goto LABEL_5;
LABEL_10:
  __break(1u);
LABEL_11:
  LOBYTE(v10) = 0;
LABEL_12:
  swift_bridgeObjectRelease(v7);
  return v10 & 1;
}

uint64_t sub_1000FD748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000FD7A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return sub_1000FC15C(a1, a2, v2 + ((v4 + 32) & ~v4), v3, *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000FD7BC(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_10011B938;
  v2[1] = (char *)&value witness table for () + 64;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 96);
}

BOOL sub_1000FD808()
{
  uint64_t v0;

  return ((*(uint64_t (**)(void))(v0 + 32))() & 1) == 0;
}

uint64_t sub_1000FD844()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 56, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
}

uint64_t sub_1000FD878(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 56, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000FD8BC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 56, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000FD8F8()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 80, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 80));
}

uint64_t sub_1000FD92C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 80, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = a1;
  return swift_release(v3);
}

uint64_t sub_1000FD970()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 88, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 88));
}

uint64_t sub_1000FD9A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 88, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 88) = a1;
  return swift_release(v3);
}

uint64_t (*sub_1000FD9E8(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 88, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000FDA24()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 96, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 96));
}

uint64_t sub_1000FDA58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 96, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = a1;
  return swift_release(v3);
}

uint64_t (*sub_1000FDA9C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 96, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000FDAD8()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 104, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 104));
}

uint64_t sub_1000FDB0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 104, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 104) = a1;
  return swift_release(v3);
}

uint64_t (*sub_1000FDB50(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 104, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000FDB8C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 112, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 112));
}

uint64_t sub_1000FDBC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 112, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000FDC04(void *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_allocObject(v2, 120, 7);
  v5 = sub_100100BA8(a1, a2);

  return v5;
}

uint64_t sub_1000FDC58(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for DriverBinManager(0);
    sub_1000CD228(v1, (uint64_t)&off_1001505D8, v7, (uint64_t)&off_100147550);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FDCC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 200))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for KernelStateManager();
    sub_1000CD228(v1, (uint64_t)&off_1001505D8, v7, (uint64_t)&off_100145E78);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FDD30(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 232);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for ApprovalManager(0);
    sub_1000CD228(v1, (uint64_t)&off_1001505D8, v7, (uint64_t)&off_10014B320);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FDD9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 256);
  v3 = swift_retain(a1);
  v4 = v2(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 248))(v4);
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for ApplicationManager();
    sub_1000CD228(v1, (uint64_t)&off_1001505D8, v7, (uint64_t)&off_1001463D8);
    return swift_release(v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FDE08()
{
  uint64_t v0;
  uint64_t v2;

  OS_dispatch_queue.sync<A>(execute:)(&v2, sub_100100D7C, v0, &type metadata for ApprovalSettingsState);
  return v2;
}

uint64_t sub_1000FDE58()
{
  uint64_t v0;
  uint64_t v2;

  OS_dispatch_queue.sync<A>(execute:)(&v2, sub_100100DB0, v0, &type metadata for StateUpdateResult);
  return v2;
}

uint64_t sub_1000FDEA8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  char v82;
  int64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  Swift::String v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  Swift::String v102;
  void *object;
  Swift::String v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  Swift::String v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  Swift::String v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  int v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  unint64_t v162;
  Swift::String v163;
  Swift::String v164;
  Swift::String v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  Swift::String v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  Swift::String v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  NSObject *v191;
  uint64_t v192;
  os_log_type_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  uint64_t result;
  _UNKNOWN **v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  unint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  unint64_t v219;
  void *v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  __int128 v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __int128 *v235;
  uint64_t v236;
  uint64_t v237;
  _BOOL4 v238;
  uint64_t v239;
  int v240;
  char *v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  int64_t v246;
  unint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  char *v255;
  _QWORD *v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  __int128 v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  _OWORD v276[2];
  uint64_t v277;
  _OWORD v278[4];
  char v279;

  v217 = a2;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v241 = (char *)&v213 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v263 = *(_QWORD *)(v6 - 8);
  v264 = v6;
  __chkstk_darwin(v6);
  v262 = (char *)&v213 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v259 = type metadata accessor for DriverBinEntry(0);
  v248 = *(_QWORD *)(v259 - 8);
  v8 = __chkstk_darwin(v259);
  v265 = (uint64_t)&v213 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v213 - v10;
  v12 = sub_100005C88(&qword_100157EF8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v213 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v255 = (char *)&v213 - v17;
  v18 = (*(uint64_t (**)(uint64_t))(*a1 + 224))(v16);
  if (!v18)
    __break(1u);
  v19 = v18;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 344))(v18);
  v22 = v21;
  v23 = swift_release(v19);
  v216 = (*(uint64_t (**)(uint64_t))(*a1 + 152))(v23);
  v24 = ApprovalSettingsState.entries.getter(v20, v22);
  swift_bridgeObjectRelease(v20);
  v232 = *(_QWORD *)(v24 + 16);
  v256 = a1;
  if (v232)
  {
    v26 = 0;
    v251 = a1 + 2;
    v231 = v24 + 32;
    v235 = &v273;
    v218 = 0x800000010012CE90;
    v219 = (unint64_t)"";
    v215 = 0x800000010012CDC0;
    v222 = 0x800000010012CE60;
    *(_QWORD *)&v25 = 136315394;
    v224 = v25;
    v223 = (char *)&type metadata for Any + 8;
    v214 = (void *)0x800000010012CDF0;
    v220 = (void *)0x800000010012CE40;
    v221 = 0x800000010012CE20;
    v225 = _swiftEmptyArrayStorage;
    v239 = v3;
    v234 = v4;
    v253 = v15;
    v254 = v11;
    v27 = (uint64_t)v255;
    v230 = v24;
    while (1)
    {
      if (v26 >= *(_QWORD *)(v24 + 16))
        goto LABEL_151;
      v243 = v26;
      v28 = v231 + 40 * v26;
      v29 = *(_QWORD *)v28;
      v30 = *(void **)(v28 + 8);
      v257 = v30;
      v258 = v29;
      v32 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v28 + 24);
      v240 = *(unsigned __int8 *)(v28 + 32);
      v277 = 0;
      memset(v276, 0, sizeof(v276));
      v33 = *v256;
      v245 = v31;
      if (v31 >> 60 == 15)
        break;
      v47 = *(uint64_t (**)(uint64_t))(v33 + 176);
      sub_10002B23C(v32, v31);
      swift_bridgeObjectRetain_n(v30, 2);
      sub_10002B23C(v32, v31);
      v48 = sub_10002B23C(v32, v31);
      v49 = v47(v48);
      if (!v49)
        goto LABEL_155;
      v50 = v49;
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 360))(v49);
      v53 = v52;
      swift_release(v50);
      swift_bridgeObjectRelease(v53);
      v54 = 0;
      v55 = *(_QWORD *)(v51 + 64);
      v242 = v51 + 64;
      v250 = v51;
      v56 = 1 << *(_BYTE *)(v51 + 32);
      v57 = (unint64_t)(v56 + 63) >> 6;
      if (v56 < 64)
        v58 = ~(-1 << v56);
      else
        v58 = -1;
      v59 = v58 & v55;
      v246 = v57;
      v247 = v31 >> 62;
      v228 = HIDWORD(v32);
      v60 = __OFSUB__(HIDWORD(v32), (_DWORD)v32);
      v238 = v60;
      v236 = BYTE6(v31);
      v237 = HIDWORD(v32) - (int)v32;
      v252 = v31 & 0x3FFFFFFFFFFFFFFFLL;
      v229 = (int)v32;
      v226 = v57 - 1;
      v227 = v32 >> 32;
      v249 = _swiftEmptyArrayStorage;
      v43 = v32;
      v233 = v32;
      while (2)
      {
        if (v59)
        {
          v260 = (v59 - 1) & v59;
          v261 = v54;
          v62 = __clz(__rbit64(v59)) | (v54 << 6);
          goto LABEL_29;
        }
        v68 = v54 + 1;
        if (__OFADD__(v54, 1))
        {
          __break(1u);
LABEL_151:
          __break(1u);
          JUMPOUT(0x100100044);
        }
        if (v68 >= v246)
        {
          v261 = v54;
          goto LABEL_35;
        }
        v69 = *(_QWORD *)(v242 + 8 * v68);
        if (v69)
          goto LABEL_33;
        v83 = v54 + 2;
        if (v54 + 2 >= v246)
        {
          v261 = v54 + 1;
          goto LABEL_35;
        }
        v69 = *(_QWORD *)(v242 + 8 * v83);
        if (v69)
        {
LABEL_46:
          v68 = v83;
          goto LABEL_33;
        }
        if (v54 + 3 >= v246)
        {
          v261 = v54 + 2;
          goto LABEL_35;
        }
        v69 = *(_QWORD *)(v242 + 8 * (v54 + 3));
        if (v69)
        {
          v68 = v54 + 3;
LABEL_33:
          v260 = (v69 - 1) & v69;
          v261 = v68;
          v62 = __clz(__rbit64(v69)) + (v68 << 6);
LABEL_29:
          v63 = v250;
          v64 = *(_QWORD *)(v250 + 48);
          v65 = type metadata accessor for UUID(0);
          (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v15, v64 + *(_QWORD *)(*(_QWORD *)(v65 - 8) + 72) * v62, v65);
          v66 = *(_QWORD *)(v63 + 56) + *(_QWORD *)(v248 + 72) * v62;
          v67 = sub_100005C88((uint64_t *)&unk_10015ABF0);
          sub_100012408(v66, (uint64_t)&v15[*(int *)(v67 + 48)], type metadata accessor for DriverBinEntry);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v15, 0, 1, v67);
          goto LABEL_36;
        }
        v83 = v54 + 4;
        if (v54 + 4 >= v246)
        {
          v261 = v54 + 3;
          goto LABEL_35;
        }
        v69 = *(_QWORD *)(v242 + 8 * v83);
        if (v69)
          goto LABEL_46;
        while (1)
        {
          v68 = v83 + 1;
          if (__OFADD__(v83, 1))
          {
            __break(1u);
            goto LABEL_154;
          }
          if (v68 >= v246)
            break;
          v69 = *(_QWORD *)(v242 + 8 * v68);
          ++v83;
          if (v69)
            goto LABEL_33;
        }
        v261 = v226;
LABEL_35:
        v70 = sub_100005C88((uint64_t *)&unk_10015ABF0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v15, 1, 1, v70);
        v260 = 0;
LABEL_36:
        sub_10003F23C((uint64_t)v15, v27);
        v71 = sub_100005C88((uint64_t *)&unk_10015ABF0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v27, 1, v71) != 1)
        {
          sub_1000965EC(v27 + *(int *)(v71 + 48), (uint64_t)v11);
          v72 = v262;
          (*(void (**)(char *, char *, uint64_t))(v263 + 16))(v262, &v11[*(int *)(v259 + 28)], v264);
          v73 = v256[5];
          v74 = v256[6];
          sub_100004DE4(v251, v73);
          sub_10009C20C(v73, v74);
          v75 = *((_QWORD *)&v273 + 1);
          v76 = v274;
          sub_100004DE4(&v272, *((uint64_t *)&v273 + 1));
          (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v76 + 24))(&v270, v72, v75, v76);
          if (v271)
          {
            sub_100004E2C(&v270, (uint64_t)&v266);
            sub_100005D08(&v272);
            v77 = *((_QWORD *)&v267 + 1);
            v78 = v268;
            sub_100004DE4(&v266, *((uint64_t *)&v267 + 1));
            v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 24))(v77, v78);
            if (v80)
            {
              v81 = v80;
              if (v79 == v258 && v80 == v257)
              {
                swift_bridgeObjectRelease(v80);
                sub_100012408((uint64_t)v11, v265, type metadata accessor for DriverBinEntry);
                goto LABEL_43;
              }
              v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, v258, v257, 0);
              swift_bridgeObjectRelease(v81);
              sub_100012408((uint64_t)v11, v265, type metadata accessor for DriverBinEntry);
              if ((v82 & 1) != 0)
              {
LABEL_43:
                type metadata accessor for ApplicationRecord(0);
                __asm { BR              X10 }
              }
              sub_1001012A0(v265);
              v11 = v254;
              v27 = (uint64_t)v255;
              (*(void (**)(char *, uint64_t))(v263 + 8))(v262, v264);
              sub_1001012A0((uint64_t)v11);
              v15 = v253;
              sub_100005D08(&v266);
              v61 = type metadata accessor for UUID(0);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v27, v61);
              v59 = v260;
              v54 = v261;
              continue;
            }
            v46 = v257;
            swift_bridgeObjectRelease(v257);
            *(_QWORD *)&v272 = 0;
            *((_QWORD *)&v272 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(30);
            v100 = swift_bridgeObjectRelease(*((_QWORD *)&v272 + 1));
            *(_QWORD *)&v272 = 0x6120656C646E7542;
            *((_QWORD *)&v272 + 1) = 0xEA00000000002074;
            v101 = v262;
            v102._countAndFlagsBits = URL.path.getter(v100);
            object = v102._object;
            String.append(_:)(v102);
            swift_bridgeObjectRelease(object);
            v104._countAndFlagsBits = 0xD000000000000012;
            v104._object = v220;
            String.append(_:)(v104);
            v106 = *((_QWORD *)&v272 + 1);
            v105 = v272;
            v107 = sub_1000122F8();
            v108 = swift_allocError(&type metadata for KMError, v107, 0, 0);
            *(_OWORD *)v109 = __PAIR128__(v106, v105);
            *(_OWORD *)(v109 + 16) = 0u;
            *(_OWORD *)(v109 + 32) = 0u;
            *(_OWORD *)(v109 + 48) = 0u;
            *(_QWORD *)(v109 + 64) = 0;
            *(_BYTE *)(v109 + 72) = 50;
            v261 = v108;
            swift_willThrow(v108);
            v99 = v245;
            sub_100021610(v43, v245);
            sub_100021610(v43, v99);
            (*(void (**)(char *, uint64_t))(v263 + 8))(v101, v264);
            sub_1001012A0((uint64_t)v11);
            swift_bridgeObjectRelease(v249);
            swift_release(v250);
            sub_1000124F8((uint64_t)v276, &qword_100157C78);
            sub_100005D08(&v266);
          }
          else
          {
            v46 = v257;
            swift_bridgeObjectRelease(v257);
            sub_1000124F8((uint64_t)&v270, &qword_100157C78);
            sub_100005D08(&v272);
            *(_QWORD *)&v272 = 0;
            *((_QWORD *)&v272 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(27);
            v90 = swift_bridgeObjectRelease(*((_QWORD *)&v272 + 1));
            *(_QWORD *)&v272 = 0xD000000000000019;
            *((_QWORD *)&v272 + 1) = v221;
            v91 = v262;
            v92._countAndFlagsBits = URL.path.getter(v90);
            v93 = v92._object;
            String.append(_:)(v92);
            swift_bridgeObjectRelease(v93);
            v95 = *((_QWORD *)&v272 + 1);
            v94 = v272;
            v96 = sub_1000122F8();
            v97 = swift_allocError(&type metadata for KMError, v96, 0, 0);
            *(_OWORD *)v98 = __PAIR128__(v95, v94);
            *(_OWORD *)(v98 + 16) = 0u;
            *(_OWORD *)(v98 + 32) = 0u;
            *(_OWORD *)(v98 + 48) = 0u;
            *(_QWORD *)(v98 + 64) = 0;
            *(_BYTE *)(v98 + 72) = 19;
            v261 = v97;
            swift_willThrow(v97);
            v99 = v245;
            sub_100021610(v43, v245);
            sub_100021610(v43, v99);
            (*(void (**)(char *, uint64_t))(v263 + 8))(v91, v264);
            sub_1001012A0((uint64_t)v11);
            swift_bridgeObjectRelease(v249);
            swift_release(v250);
            sub_1000124F8((uint64_t)v276, &qword_100157C78);
          }
          v110 = type metadata accessor for UUID(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v110 - 8) + 8))(v255, v110);
          v244 = 0;
          v111 = v239;
          v112 = v234;
LABEL_140:
          v187 = sub_1000D3244();
          (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v241, v187, v111);
          swift_bridgeObjectRetain(v46);
          sub_10002B23C(v43, v99);
          v188 = v261;
          swift_errorRetain(v261);
          v189 = v46;
          swift_bridgeObjectRetain(v46);
          sub_10002B23C(v43, v99);
          v190 = swift_errorRetain(v188);
          v191 = Logger.logObject.getter(v190);
          v192 = v112;
          v193 = static os_log_type_t.error.getter(v191);
          if (os_log_type_enabled(v191, v193))
          {
            v194 = swift_slowAlloc(22, -1);
            v260 = swift_slowAlloc(64, -1);
            *(_QWORD *)&v266 = v260;
            *(_DWORD *)v194 = v224;
            *(_QWORD *)&v272 = v258;
            *((_QWORD *)&v272 + 1) = v189;
            *(_QWORD *)&v273 = v43;
            *((_QWORD *)&v273 + 1) = v99;
            LOBYTE(v274) = v240;
            v195 = sub_100100E2C();
            v196 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for ApprovalDBEntry, v195);
            v198 = v197;
            *(_QWORD *)(v194 + 4) = sub_1000055A0(v196, v197, (uint64_t *)&v266);
            swift_bridgeObjectRelease(v189);
            swift_bridgeObjectRelease(v198);
            sub_100021610(v43, v99);
            swift_bridgeObjectRelease(v189);
            sub_100021610(v43, v99);
            *(_WORD *)(v194 + 12) = 2080;
            *(_QWORD *)&v272 = v261;
            swift_errorRetain(v261);
            v199 = sub_100005C88(&qword_10015AB50);
            v200 = String.init<A>(describing:)(&v272, v199);
            v202 = v201;
            *(_QWORD *)(v194 + 14) = sub_1000055A0(v200, v201, (uint64_t *)&v266);
            swift_bridgeObjectRelease(v202);
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v191, v193, "Failed to use entry %s: %s", (uint8_t *)v194, 0x16u);
            v203 = v260;
            swift_arrayDestroy(v260, 2, v223);
            swift_slowDealloc(v203, -1, -1);
            swift_slowDealloc(v194, -1, -1);

            swift_errorRelease();
            swift_bridgeObjectRelease(v189);
            sub_100021610(v43, v99);
            (*(void (**)(char *, uint64_t))(v234 + 8))(v241, v239);
          }
          else
          {
            swift_bridgeObjectRelease(v189);
            sub_100021610(v43, v99);
            swift_errorRelease();
            swift_bridgeObjectRelease(v189);
            sub_100021610(v43, v99);
            swift_bridgeObjectRelease(v189);
            sub_100021610(v43, v99);
            swift_errorRelease();
            swift_errorRelease();

            (*(void (**)(char *, uint64_t))(v192 + 8))(v241, v111);
          }
          v15 = v253;
          v11 = v254;
          v27 = (uint64_t)v255;
          goto LABEL_6;
        }
        break;
      }
      swift_release(v250);
      v84 = v249;
      v85 = v249[2];
      if (v85 <= 1)
      {
        v113 = v245;
        if (v85)
        {
          v114 = v249;
          sub_100019E1C((uint64_t)(v249 + 4), (uint64_t)&v272, &qword_10015C510);
          v46 = v257;
        }
        else
        {
          v275 = 0;
          v273 = 0u;
          v274 = 0u;
          v272 = 0u;
          v46 = v257;
          v114 = v249;
        }
        sub_100021610(v43, v113);
        swift_bridgeObjectRelease(v114);
        if (*((_QWORD *)&v274 + 1))
        {
          sub_1000124F8((uint64_t)v276, &qword_100157C78);
          sub_100011F40(v272, *((unint64_t *)&v272 + 1));
          sub_100004E2C(v235, (uint64_t)&v266);
          sub_100004E2C(&v266, (uint64_t)v276);
        }
        else
        {
          sub_1000124F8((uint64_t)&v272, &qword_10015C518);
        }
        goto LABEL_78;
      }
      swift_bridgeObjectRetain(v249);
      v86 = v244;
      v88 = sub_100101134(v87, (uint64_t (*)(_QWORD, _QWORD, _OWORD *))sub_100100E70);
      v244 = v86;
      swift_bridgeObjectRelease(v84);
      v89 = v245;
      if (v88[2])
      {
        sub_100019E1C((uint64_t)(v88 + 4), (uint64_t)&v266, &qword_10015C510);
      }
      else
      {
        v269 = 0;
        v267 = 0u;
        v268 = 0u;
        v266 = 0u;
      }
      v111 = v239;
      swift_bridgeObjectRelease(v88);
      if (*((_QWORD *)&v268 + 1))
      {
        sub_100021610(v32, v89);
        swift_bridgeObjectRelease(v249);
        v272 = v266;
        v273 = v267;
        v274 = v268;
        v275 = v269;
      }
      else
      {
        v121 = v249;
        if (v249[2])
        {
          sub_100019E1C((uint64_t)(v249 + 4), (uint64_t)&v272, &qword_10015C510);
        }
        else
        {
          v275 = 0;
          v273 = 0u;
          v274 = 0u;
          v272 = 0u;
        }
        sub_100021610(v32, v89);
        swift_bridgeObjectRelease(v121);
        sub_1000124F8((uint64_t)&v266, &qword_10015C518);
      }
      v46 = v257;
      if (*((_QWORD *)&v274 + 1))
      {
        sub_1000124F8((uint64_t)v276, &qword_100157C78);
        sub_100011F40(v272, *((unint64_t *)&v272 + 1));
        sub_100004E2C(v235, (uint64_t)&v270);
        sub_100004E2C(&v270, (uint64_t)v276);
      }
      else
      {
        sub_1000124F8((uint64_t)&v272, &qword_10015C518);
      }
LABEL_84:
      sub_100019E1C((uint64_t)v276, (uint64_t)&v266, &qword_100157C78);
      if (!*((_QWORD *)&v267 + 1))
      {
        sub_1000124F8((uint64_t)&v266, &qword_100157C78);
        *(_QWORD *)&v272 = 0;
        *((_QWORD *)&v272 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease(*((_QWORD *)&v272 + 1));
        *(_QWORD *)&v272 = 0xD000000000000021;
        *((_QWORD *)&v272 + 1) = v219 | 0x8000000000000000;
        v132._countAndFlagsBits = v258;
        v132._object = v46;
        String.append(_:)(v132);
        swift_bridgeObjectRelease(v46);
        v134 = *((_QWORD *)&v272 + 1);
        v133 = v272;
        v135 = sub_1000122F8();
        v136 = swift_allocError(&type metadata for KMError, v135, 0, 0);
        *(_OWORD *)v137 = __PAIR128__(v134, v133);
        *(_OWORD *)(v137 + 16) = 0u;
        *(_OWORD *)(v137 + 32) = 0u;
        *(_OWORD *)(v137 + 48) = 0u;
        *(_QWORD *)(v137 + 64) = 0;
        *(_BYTE *)(v137 + 72) = 10;
        v261 = v136;
        swift_willThrow(v136);
        v99 = v245;
        sub_100021610(v43, v245);
        sub_1000124F8((uint64_t)v276, &qword_100157C78);
LABEL_91:
        v244 = 0;
        v112 = v234;
        goto LABEL_140;
      }
      sub_100004E2C(&v266, (uint64_t)&v272);
      v122 = *((_QWORD *)&v273 + 1);
      v123 = v274;
      sub_100004DE4(&v272, *((uint64_t *)&v273 + 1));
      v124 = (*(uint64_t (**)(uint64_t, uint64_t))(v123 + 40))(v122, v123);
      if (!v124)
      {
        v125 = *((_QWORD *)&v273 + 1);
        v126 = v274;
        sub_100004DE4(&v272, *((uint64_t *)&v273 + 1));
        v124 = (*(uint64_t (**)(uint64_t, uint64_t))(v126 + 32))(v125, v126);
        if (!v124)
        {
          *(_QWORD *)&v266 = 0;
          *((_QWORD *)&v266 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(50);
          v163._countAndFlagsBits = 0xD00000000000002ALL;
          v163._object = v214;
          String.append(_:)(v163);
          v46 = v257;
          v164._countAndFlagsBits = v258;
          v164._object = v257;
          String.append(_:)(v164);
          swift_bridgeObjectRelease(v46);
          v165._countAndFlagsBits = 544497952;
          v165._object = (void *)0xE400000000000000;
          String.append(_:)(v165);
          v166 = *((_QWORD *)&v273 + 1);
          v167 = v274;
          v168 = sub_100004DE4(&v272, *((uint64_t *)&v273 + 1));
          DefaultStringInterpolation.appendInterpolation<A>(_:)(v168, v166, *(_QWORD *)(v167 + 8));
          v170 = *((_QWORD *)&v266 + 1);
          v169 = v266;
          v171 = sub_1000122F8();
          v172 = swift_allocError(&type metadata for KMError, v171, 0, 0);
          *(_OWORD *)v173 = __PAIR128__(v170, v169);
          *(_OWORD *)(v173 + 16) = 0u;
          *(_OWORD *)(v173 + 32) = 0u;
          *(_OWORD *)(v173 + 48) = 0u;
          *(_QWORD *)(v173 + 64) = 0;
          *(_BYTE *)(v173 + 72) = 10;
          v261 = v172;
          swift_willThrow(v172);
          v99 = v245;
          sub_100021610(v43, v245);
          sub_1000124F8((uint64_t)v276, &qword_100157C78);
          sub_100005D08(&v272);
          goto LABEL_91;
        }
      }
      v127 = (uint64_t *)sub_10008F2E8();
      if (!*(_QWORD *)(v124 + 16))
      {
        v266 = 0u;
        v267 = 0u;
LABEL_97:
        sub_1000124F8((uint64_t)&v266, &qword_100158018);
        goto LABEL_98;
      }
      v128 = *v127;
      v129 = v127[1];
      swift_bridgeObjectRetain(v129);
      v130 = sub_100024B68(v128, v129, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100005E4C);
      if ((v131 & 1) != 0)
      {
        sub_100005D28(*(_QWORD *)(v124 + 56) + 32 * v130, (uint64_t)&v266);
      }
      else
      {
        v266 = 0u;
        v267 = 0u;
      }
      swift_bridgeObjectRelease(v129);
      if (!*((_QWORD *)&v267 + 1))
        goto LABEL_97;
      if ((swift_dynamicCast(&v270, &v266, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v138 = *((_QWORD *)&v270 + 1);
        v139 = v270;
        goto LABEL_111;
      }
LABEL_98:
      v140 = sub_10008F30C();
      if (*(_QWORD *)(v124 + 16))
      {
        v141 = *v140;
        v142 = v140[1];
        swift_bridgeObjectRetain(v142);
        v143 = sub_100024B68(v141, v142, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100005E4C);
        if ((v144 & 1) != 0)
        {
          sub_100005D28(*(_QWORD *)(v124 + 56) + 32 * v143, (uint64_t)&v266);
        }
        else
        {
          v266 = 0u;
          v267 = 0u;
        }
        swift_bridgeObjectRelease(v142);
        if (*((_QWORD *)&v267 + 1))
        {
          v145 = swift_dynamicCast(&v270, &v266, (char *)&type metadata for Any + 8, &type metadata for String, 6);
          if (v145)
            v138 = *((_QWORD *)&v270 + 1);
          else
            v138 = 0;
          if (v145)
            v139 = v270;
          else
            v139 = 0;
          goto LABEL_111;
        }
      }
      else
      {
        v266 = 0u;
        v267 = 0u;
      }
      sub_1000124F8((uint64_t)&v266, &qword_100158018);
      v138 = 0;
      v139 = 0;
LABEL_111:
      v146 = (uint64_t *)sub_10008F34C();
      if (*(_QWORD *)(v124 + 16))
      {
        v147 = *v146;
        v148 = v146[1];
        swift_bridgeObjectRetain(v148);
        v149 = sub_100024B68(v147, v148, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100005E4C);
        if ((v150 & 1) != 0)
        {
          sub_100005D28(*(_QWORD *)(v124 + 56) + 32 * v149, (uint64_t)&v266);
        }
        else
        {
          v266 = 0u;
          v267 = 0u;
        }
        swift_bridgeObjectRelease(v148);
      }
      else
      {
        v266 = 0u;
        v267 = 0u;
      }
      swift_bridgeObjectRelease(v124);
      if (*((_QWORD *)&v267 + 1))
      {
        v151 = swift_dynamicCast(&v270, &v266, (char *)&type metadata for Any + 8, &type metadata for String, 6);
        if (v151)
          v152 = v270;
        else
          v152 = 0;
        if (v151)
          v153 = *((_QWORD *)&v270 + 1);
        else
          v153 = 0;
      }
      else
      {
        sub_1000124F8((uint64_t)&v266, &qword_100158018);
        v152 = 0;
        v153 = 0;
      }
      v154 = v245;
      sub_10002B23C(v43, v245);
      sub_100062F1C(v258, (uint64_t)v257, v139, v138, v152, v153, v43, v154, (uint64_t)v278, v240);
      if ((swift_isUniquelyReferenced_nonNull_native(v225) & 1) != 0)
      {
        v27 = (uint64_t)v255;
        v155 = v225;
      }
      else
      {
        v155 = sub_100100798(0, v225[2] + 1, 1, v225);
        v27 = (uint64_t)v255;
      }
      v157 = v155[2];
      v156 = v155[3];
      if (v157 >= v156 >> 1)
        v155 = sub_100100798((_QWORD *)(v156 > 1), v157 + 1, 1, v155);
      v155[2] = v157 + 1;
      v225 = v155;
      v158 = &v155[9 * v157];
      *((_OWORD *)v158 + 2) = v278[0];
      v159 = v278[1];
      v160 = v278[2];
      v161 = v278[3];
      *((_BYTE *)v158 + 96) = v279;
      *((_OWORD *)v158 + 4) = v160;
      *((_OWORD *)v158 + 5) = v161;
      *((_OWORD *)v158 + 3) = v159;
      v162 = v245;
      sub_100021610(v43, v245);
      swift_bridgeObjectRelease(v257);
      sub_100021610(v43, v162);
      sub_1000124F8((uint64_t)v276, &qword_100157C78);
      sub_100005D08(&v272);
LABEL_6:
      v24 = v230;
      v26 = v243 + 1;
      if (v243 + 1 == v232)
      {
        swift_bridgeObjectRelease(v230);
        v204 = v225;
        goto LABEL_146;
      }
    }
    v34 = *(uint64_t (**)(uint64_t))(v33 + 200);
    swift_bridgeObjectRetain_n(v30, 2);
    v35 = v32;
    v36 = sub_10002B23C(v32, v31);
    v37 = v34(v36);
    if (!v37)
    {
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
      JUMPOUT(0x1001000B0);
    }
    v38 = v37;
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 408))(v37);
    swift_release(v38);
    swift_bridgeObjectRetain(v30);
    v40 = v244;
    v41 = (uint64_t)sub_100100E78(v39, v258, (uint64_t)v30);
    v244 = v40;
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v30);
    if ((unint64_t)v41 >> 62)
    {
      if (v41 < 0)
        v174 = v41;
      else
        v174 = v41 & 0xFFFFFFFFFFFFFF8;
      v43 = v32;
      if (_CocoaArrayWrapper.endIndex.getter(v174) <= 1)
      {
        swift_bridgeObjectRetain(v41);
        v175 = _CocoaArrayWrapper.endIndex.getter(v174);
        swift_bridgeObjectRelease(v41);
        if (v175)
          goto LABEL_13;
LABEL_136:
        swift_bridgeObjectRelease(v41);
        *(_QWORD *)&v272 = 0;
        *((_QWORD *)&v272 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        swift_bridgeObjectRelease(*((_QWORD *)&v272 + 1));
        *(_QWORD *)&v272 = 0xD00000000000002CLL;
        *((_QWORD *)&v272 + 1) = v218;
        v176._countAndFlagsBits = v258;
        v176._object = v30;
        String.append(_:)(v176);
        swift_bridgeObjectRelease(v30);
        v177 = v272;
        v46 = v30;
        v178 = *((_QWORD *)&v272 + 1);
        v179 = sub_1000122F8();
        v180 = swift_allocError(&type metadata for KMError, v179, 0, 0);
        *(_QWORD *)v181 = v177;
        *(_QWORD *)(v181 + 8) = v178;
        v99 = v245;
        *(_OWORD *)(v181 + 16) = 0u;
        *(_OWORD *)(v181 + 32) = 0u;
        *(_OWORD *)(v181 + 48) = 0u;
        *(_QWORD *)(v181 + 64) = 0;
        *(_BYTE *)(v181 + 72) = 10;
LABEL_138:
        v261 = v180;
        swift_willThrow(v180);
        sub_1000124F8((uint64_t)v276, &qword_100157C78);
        v244 = 0;
        goto LABEL_139;
      }
    }
    else
    {
      v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      v43 = v32;
      if (v42 < 2)
      {
        if (v42)
        {
LABEL_13:
          if ((v41 & 0xC000000000000001) != 0)
          {
            v44 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v41);
          }
          else
          {
            if (!*(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              JUMPOUT(0x10010005CLL);
            }
            v44 = *(_QWORD *)(v41 + 32);
            swift_retain(v44);
          }
          v45 = swift_bridgeObjectRelease(v41);
          (*(void (**)(__int128 *__return_ptr, uint64_t))(**(_QWORD **)(v44 + 24) + 112))(&v266, v45);
          if (*((_QWORD *)&v267 + 1))
          {
            swift_release(v44);
            sub_1000124F8((uint64_t)v276, &qword_100157C78);
            sub_100004E2C(&v266, (uint64_t)&v272);
            sub_100004E2C(&v272, (uint64_t)v276);
            v46 = v257;
LABEL_78:
            v111 = v239;
            goto LABEL_84;
          }
          sub_1000124F8((uint64_t)&v266, &qword_100157C78);
          *(_QWORD *)&v272 = 0;
          *((_QWORD *)&v272 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(35);
          swift_bridgeObjectRelease(*((_QWORD *)&v272 + 1));
          *(_QWORD *)&v272 = 0xD000000000000021;
          *((_QWORD *)&v272 + 1) = v215;
          v46 = v257;
          v115._countAndFlagsBits = v258;
          v115._object = v257;
          String.append(_:)(v115);
          swift_bridgeObjectRelease(v46);
          v117 = *((_QWORD *)&v272 + 1);
          v116 = v272;
          v118 = sub_1000122F8();
          v119 = swift_allocError(&type metadata for KMError, v118, 0, 0);
          *(_OWORD *)v120 = __PAIR128__(v117, v116);
          v43 = v35;
          *(_OWORD *)(v120 + 16) = 0u;
          *(_OWORD *)(v120 + 32) = 0u;
          *(_OWORD *)(v120 + 48) = 0u;
          *(_QWORD *)(v120 + 64) = 0;
          *(_BYTE *)(v120 + 72) = 10;
          v261 = v119;
          swift_willThrow(v119);
          swift_release(v44);
          sub_1000124F8((uint64_t)v276, &qword_100157C78);
          v244 = 0;
          v99 = v245;
LABEL_139:
          v112 = v234;
          v111 = v239;
          goto LABEL_140;
        }
        goto LABEL_136;
      }
    }
    swift_bridgeObjectRelease(v41);
    *(_QWORD *)&v272 = 0;
    *((_QWORD *)&v272 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease(*((_QWORD *)&v272 + 1));
    *(_QWORD *)&v272 = 0xD000000000000027;
    *((_QWORD *)&v272 + 1) = v222;
    v182._countAndFlagsBits = v258;
    v182._object = v30;
    String.append(_:)(v182);
    swift_bridgeObjectRelease(v30);
    v183 = v272;
    v46 = v30;
    v184 = *((_QWORD *)&v272 + 1);
    v185 = sub_1000122F8();
    v180 = swift_allocError(&type metadata for KMError, v185, 0, 0);
    *(_QWORD *)v186 = v183;
    *(_QWORD *)(v186 + 8) = v184;
    v99 = v245;
    *(_OWORD *)(v186 + 16) = 0u;
    *(_OWORD *)(v186 + 32) = 0u;
    *(_OWORD *)(v186 + 48) = 0u;
    *(_QWORD *)(v186 + 64) = 0;
    *(_BYTE *)(v186 + 72) = 50;
    goto LABEL_138;
  }
  swift_bridgeObjectRelease(v24);
  v204 = _swiftEmptyArrayStorage;
LABEL_146:
  v205 = sub_100060DB8((uint64_t)v204);
  v206 = v216;
  *(_QWORD *)&v272 = v216;
  *(_QWORD *)&v266 = v205;
  v207 = sub_100100DE8();
  v208 = dispatch thunk of static Equatable.== infix(_:_:)(&v272, &v266, &type metadata for ApprovalSettingsState, v207);
  swift_bridgeObjectRelease(v206);
  if ((v208 & 1) != 0)
  {
    result = swift_bridgeObjectRelease(v205);
    v210 = 0;
  }
  else
  {
    v211 = v256;
    v212 = (*(uint64_t (**)(uint64_t))(*v256 + 160))(v205);
    result = (*(uint64_t (**)(uint64_t))(*v211 + 360))(v212);
    v210 = &off_1001505A8;
  }
  *v217 = v210;
  return result;
}

uint64_t sub_100100128(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;

  v6 = sub_100005C88(&qword_100157EF0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 248))(v7);
  if (result)
  {
    v11 = result;
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)result + 216))();
    swift_release(v11);
    if (*(_QWORD *)(v12 + 16))
    {
      sub_1000122B4(a1, a2);
      v13 = sub_100024B68(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10000CFF8);
      if ((v14 & 1) != 0)
      {
        v15 = v13;
        v16 = *(_QWORD *)(v12 + 56);
        v17 = type metadata accessor for ApplicationRecord(0);
        v18 = *(_QWORD *)(v17 - 8);
        sub_100012408(v16 + *(_QWORD *)(v18 + 72) * v15, (uint64_t)v9, type metadata accessor for ApplicationRecord);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v9, 0, 1, v17);
      }
      else
      {
        v17 = type metadata accessor for ApplicationRecord(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
      }
    }
    else
    {
      v17 = type metadata accessor for ApplicationRecord(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
      sub_1000122B4(a1, a2);
    }
    swift_bridgeObjectRelease(v12);
    sub_100011F40(a1, a2);
    type metadata accessor for ApplicationRecord(0);
    v19 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v9, 1, v17) != 1;
    sub_1000124F8((uint64_t)v9, &qword_100157EF0);
    return v19;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1001002F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  v2 = ApprovalSettingsState.debugDescription.getter(v1);
  swift_bridgeObjectRelease(v1);
  return v2;
}

uint64_t sub_100100344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  __chkstk_darwin(v2);
  v4 = (_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v32 = v4;
  v33 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004DE4(v4, v5);
  sub_10010AFB8(v5, v6);
  v8 = v40;
  v7 = v41;
  sub_100004DE4(v39, v40);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v8);
  v10 = *(_QWORD *)(v9 + 64);
  v36 = v9 + 64;
  v11 = 1 << *(_BYTE *)(v9 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  result = sub_100005D08(v39);
  v15 = 0;
  v37 = (unint64_t)(v11 + 63) >> 6;
  *(_QWORD *)&v16 = 134217984;
  v31 = v16;
  while (v13)
  {
    v17 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v18 = v17 | (v15 << 6);
LABEL_17:
    v22 = 8 * v18;
    v23 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + v22);
    v24 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + v22);
    v25 = *sub_10007783C();
    v38 = v24;
    v39[0] = v25;
    v26 = sub_1000792E0();
    result = dispatch thunk of SetAlgebra.isSuperset(of:)(v39, &type metadata for XPCEventSubscriberFlags, v26);
    if ((result & 1) != 0)
    {
      v27 = *(_QWORD *)(v1 + 40);
      v28 = *(_QWORD *)(v1 + 48);
      sub_100004DE4(v32, v27);
      sub_10010AFB8(v27, v28);
      v30 = v40;
      v29 = v41;
      sub_100004DE4(v39, v40);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 + 8) + 16))(v23, v30);
      result = sub_100005D08(v39);
    }
  }
  if (__OFADD__(v15++, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v15 >= v37)
    return swift_release(v9);
  v20 = *(_QWORD *)(v36 + 8 * v15);
  if (v20)
  {
LABEL_16:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
    goto LABEL_17;
  }
  v21 = v15 + 1;
  if (v15 + 1 >= v37)
    return swift_release(v9);
  v20 = *(_QWORD *)(v36 + 8 * v21);
  if (v20)
    goto LABEL_15;
  v21 = v15 + 2;
  if (v15 + 2 >= v37)
    return swift_release(v9);
  v20 = *(_QWORD *)(v36 + 8 * v21);
  if (v20)
    goto LABEL_15;
  v21 = v15 + 3;
  if (v15 + 3 >= v37)
    return swift_release(v9);
  v20 = *(_QWORD *)(v36 + 8 * v21);
  if (v20)
  {
LABEL_15:
    v15 = v21;
    goto LABEL_16;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v37)
      return swift_release(v9);
    v20 = *(_QWORD *)(v36 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_16;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1001006A4()
{
  uint64_t v0;

  sub_100005D08((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  return v0;
}

uint64_t sub_100100700()
{
  uint64_t v0;

  sub_1001006A4();
  return swift_deallocClassInstance(v0, 120, 7);
}

id sub_100100720()
{
  uint64_t v0;

  return *(id *)(v0 + 72);
}

uint64_t sub_100100728()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t sub_100100734()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

void (*sub_100100740(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 288))();
  return sub_10000C4BC;
}

uint64_t sub_10010078C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

_QWORD *sub_100100798(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005C88(&qword_10015C538);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001012DC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001008BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005C88(&qword_10015C530);
      v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v8 + 4])
          memmove(v13, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100101028(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001009E4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100100A00(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100100A00(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005C88(&qword_10015C530);
    v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 56 * v8)
      memmove(v11 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 56 * v8 || v13 >= v14 + 56 * v8)
  {
    sub_100005C88(&qword_10015C510);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100100BA8(void *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  _QWORD *v24;

  v3 = v2;
  v23 = a2;
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  v12 = (_QWORD **)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_QWORD *)(v3 + 112) = _swiftEmptyArrayStorage;
  sub_100005C44((uint64_t)a2, v3 + 16);
  *(_QWORD *)(v3 + 72) = a1;
  v16 = a1;
  *(_QWORD *)(v3 + 56) = sub_100051E38();
  v17 = sub_10008069C();
  static DispatchQoS.unspecified.getter(v17);
  v24 = _swiftEmptyArrayStorage;
  v18 = sub_1000782A4();
  v19 = sub_100005C88(&qword_100159CF0);
  v20 = sub_1001013D0();
  dispatch thunk of SetAlgebra.init<A>(_:)(v12, &v24, v19, v20, v10, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v6);
  v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000021, 0x800000010012CEC0, v15, v12, v9, 0);
  sub_100005D08(v23);
  *(_QWORD *)(v3 + 64) = v21;
  return v3;
}

uint64_t sub_100100D7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  *a1 = result;
  return result;
}

uint64_t sub_100100DB0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  return sub_1000FDEA8(v1, a1);
}

uint64_t type metadata accessor for ApprovalSettingsStateManager()
{
  return objc_opt_self(_TtC10driverkitd28ApprovalSettingsStateManager);
}

unint64_t sub_100100DE8()
{
  unint64_t result;

  result = qword_10015C520;
  if (!qword_10015C520)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalSettingsState, &type metadata for ApprovalSettingsState);
    atomic_store(result, (unint64_t *)&qword_10015C520);
  }
  return result;
}

unint64_t sub_100100E2C()
{
  unint64_t result;

  result = qword_10015C528;
  if (!qword_10015C528)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApprovalDBEntry, &type metadata for ApprovalDBEntry);
    atomic_store(result, (unint64_t *)&qword_10015C528);
  }
  return result;
}

uint64_t sub_100100E70(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_100100128(a1, a2, v2);
}

_QWORD *sub_100100E78(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_22;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      v7 = 0;
      v23 = v5 & 0xC000000000000001;
      v22 = v5 & 0xFFFFFFFFFFFFFF8;
      while (v23)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        v9 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_19:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }
LABEL_9:
        v10 = v6;
        v11 = v5;
        v12 = (*(uint64_t (**)(void))(**(_QWORD **)(v8 + 24) + 144))();
        if (v12 == a2 && v13 == a3)
        {
          v17 = swift_bridgeObjectRelease(a3);
LABEL_16:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
          v18 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v8);
          specialized ContiguousArray._endMutation()(v19);
          goto LABEL_5;
        }
        v15 = v13;
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0);
        v17 = swift_bridgeObjectRelease(v15);
        if ((v16 & 1) != 0)
          goto LABEL_16;
        swift_release(v8);
LABEL_5:
        v5 = v11;
        ++v7;
        v6 = v10;
        if (v9 == v10)
          return _swiftEmptyArrayStorage;
      }
      if (v7 < *(_QWORD *)(v22 + 16))
        break;
      __break(1u);
LABEL_22:
      if (v5 < 0)
        v21 = v5;
      else
        v21 = v5 & 0xFFFFFFFFFFFFFF8;
      v6 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v6)
        return _swiftEmptyArrayStorage;
    }
    v8 = *(_QWORD *)(v5 + 8 * v7 + 32);
    swift_retain(v8);
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_19;
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100101028(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 56 * a1 + 32;
  v7 = a3 + 56 * v4;
  if (v6 >= v7 || v6 + 56 * v4 <= a3)
  {
    sub_100005C88(&qword_10015C510);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_100101134(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _OWORD *))
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _OWORD v17[2];
  uint64_t v18;
  _QWORD *v19;

  v2 = _swiftEmptyArrayStorage;
  v19 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = a1 + 32;
    v6 = &qword_10015C510;
    do
    {
      sub_100019E1C(v5, (uint64_t)&v16, v6);
      if ((a2(v16, *((_QWORD *)&v16 + 1), v17) & 1) != 0)
      {
        v7 = v6;
        v12 = v16;
        v13 = v17[0];
        v14 = v17[1];
        v15 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
          sub_1001009E4(0, v2[2] + 1, 1);
        v2 = v19;
        v9 = v19[2];
        v8 = v19[3];
        if (v9 >= v8 >> 1)
        {
          sub_1001009E4(v8 > 1, v9 + 1, 1);
          v2 = v19;
        }
        v2[2] = v9 + 1;
        v10 = &v2[7 * v9];
        *((_OWORD *)v10 + 2) = v12;
        *((_OWORD *)v10 + 3) = v13;
        *((_OWORD *)v10 + 4) = v14;
        v10[10] = v15;
        v6 = v7;
      }
      else
      {
        sub_1000124F8((uint64_t)&v16, v6);
      }
      v5 += 56;
      --v3;
    }
    while (v3);
  }
  return v2;
}

uint64_t sub_1001012A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DriverBinEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001012DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001013D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159CF8;
  if (!qword_100159CF8)
  {
    v1 = sub_100011CE4(&qword_100159CF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100159CF8);
  }
  return result;
}

uint64_t sub_10010141C()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  void *v41;
  Swift::String v42;

  _StringGuts.grow(_:)(199);
  v0._countAndFlagsBits = 0x636B202020200A7BLL;
  v0._object = (void *)0xED0000203A206F6CLL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._object = (void *)0xEC000000203A2070;
  v3._countAndFlagsBits = 0x65636B202020200ALL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  v6._countAndFlagsBits = 0x72636B202020200ALL;
  v6._object = (void *)0xEC000000203A2066;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._countAndFlagsBits = 0x72636B202020200ALL;
  v9._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 0x73636B202020200ALL;
  v12._object = (void *)0xEC000000203A2066;
  String.append(_:)(v12);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  v15._countAndFlagsBits = 0x73636B202020200ALL;
  v15._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  v18._countAndFlagsBits = 0x78636B202020200ALL;
  v18._object = (void *)0xEC000000203A2066;
  String.append(_:)(v18);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v21._countAndFlagsBits = 0x78636B202020200ALL;
  v21._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v21);
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v23 = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v23);
  v24._countAndFlagsBits = 0x62636B202020200ALL;
  v24._object = (void *)0xEC000000203A2066;
  String.append(_:)(v24);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v26);
  v27._countAndFlagsBits = 0x62636B202020200ALL;
  v27._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v27);
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v29 = v28._object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v29);
  v30._countAndFlagsBits = 0x77636B202020200ALL;
  v30._object = (void *)0xEC000000203A2066;
  String.append(_:)(v30);
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v32 = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v32);
  v33._countAndFlagsBits = 0x77636B202020200ALL;
  v33._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v33);
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v35 = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v35);
  v36._countAndFlagsBits = 0x6C636B202020200ALL;
  v36._object = (void *)0xEC000000203A2066;
  String.append(_:)(v36);
  v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v38);
  v39._countAndFlagsBits = 0x6C636B202020200ALL;
  v39._object = (void *)0xEC000000203A207ALL;
  String.append(_:)(v39);
  v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v41 = v40._object;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v41);
  v42._countAndFlagsBits = 32010;
  v42._object = (void *)0xE200000000000000;
  String.append(_:)(v42);
  return 0;
}

unint64_t sub_1001018C8()
{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  v1 = v0;
  v2 = sub_1000CC0E4((uint64_t)_swiftEmptyArrayStorage);
  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v3, 1869374315, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v5 = v1[1];
  v6 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v5, 1885692779, 0xE400000000000000, v6);
  swift_bridgeObjectRelease(0x8000000000000000);
  v7 = v1[2];
  v8 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v7, 1718772587, 0xE400000000000000, v8);
  swift_bridgeObjectRelease(0x8000000000000000);
  v9 = v1[3];
  v10 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v9, 2054316907, 0xE400000000000000, v10);
  swift_bridgeObjectRelease(0x8000000000000000);
  v11 = v1[10];
  v12 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v11, 1719100267, 0xE400000000000000, v12);
  swift_bridgeObjectRelease(0x8000000000000000);
  v13 = v1[11];
  v14 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v13, 2054644587, 0xE400000000000000, v14);
  swift_bridgeObjectRelease(0x8000000000000000);
  v15 = v1[12];
  v16 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v15, 1718379371, 0xE400000000000000, v16);
  swift_bridgeObjectRelease(0x8000000000000000);
  v17 = v1[13];
  v18 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v17, 2053923691, 0xE400000000000000, v18);
  swift_bridgeObjectRelease(0x8000000000000000);
  return v2;
}

unint64_t sub_100101AD0()
{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  v1 = v0;
  v2 = sub_1000CC0E4((uint64_t)_swiftEmptyArrayStorage);
  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v3, 1869374315, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v5 = v1[1];
  v6 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v5, 1885692779, 0xE400000000000000, v6);
  swift_bridgeObjectRelease(0x8000000000000000);
  v7 = v1[2];
  v8 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v7, 1718772587, 0xE400000000000000, v8);
  swift_bridgeObjectRelease(0x8000000000000000);
  v9 = v1[3];
  v10 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v9, 2054316907, 0xE400000000000000, v10);
  swift_bridgeObjectRelease(0x8000000000000000);
  v11 = v1[4];
  v12 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v11, 1718838123, 0xE400000000000000, v12);
  swift_bridgeObjectRelease(0x8000000000000000);
  v13 = v1[5];
  v14 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v13, 2054382443, 0xE400000000000000, v14);
  swift_bridgeObjectRelease(0x8000000000000000);
  v15 = v1[6];
  v16 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v15, 1719165803, 0xE400000000000000, v16);
  swift_bridgeObjectRelease(0x8000000000000000);
  v17 = v1[7];
  v18 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v17, 2054710123, 0xE400000000000000, v18);
  swift_bridgeObjectRelease(0x8000000000000000);
  v19 = v1[8];
  v20 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v19, 1717724011, 0xE400000000000000, v20);
  swift_bridgeObjectRelease(0x8000000000000000);
  v21 = v1[9];
  v22 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v21, 2053268331, 0xE400000000000000, v22);
  swift_bridgeObjectRelease(0x8000000000000000);
  v23 = v1[10];
  v24 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v23, 1719100267, 0xE400000000000000, v24);
  swift_bridgeObjectRelease(0x8000000000000000);
  v25 = v1[11];
  v26 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v25, 2054644587, 0xE400000000000000, v26);
  swift_bridgeObjectRelease(0x8000000000000000);
  v27 = v1[12];
  v28 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v27, 1718379371, 0xE400000000000000, v28);
  swift_bridgeObjectRelease(0x8000000000000000);
  v29 = v1[13];
  v30 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_100103954(v29, 2053923691, 0xE400000000000000, v30);
  swift_bridgeObjectRelease(0x8000000000000000);
  return v2;
}

uint64_t sub_100101E18(char a1)
{
  return *(_QWORD *)&aKclo_0[8 * a1];
}

uint64_t sub_100101E30()
{
  char *v0;

  return sub_100101E18(*v0);
}

uint64_t sub_100101E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100103F90(a1, a2);
  *a3 = result;
  return result;
}

void sub_100101E5C(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_100101E68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100103C70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100101E90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100103C70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100101EB8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v3 = v1;
  v5 = sub_100005C88(&qword_10015C540);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_100103C70();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MachOKernelcacheTags.CodingKeys, &type metadata for MachOKernelcacheTags.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v35 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v35, v5);
  if (!v2)
  {
    v13 = v3[1];
    v34 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v34, v5);
    v14 = v3[2];
    v33 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v33, v5);
    v15 = v3[3];
    v32 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v32, v5);
    v16 = v3[4];
    v31 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v31, v5);
    v17 = v3[5];
    v30 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v30, v5);
    v18 = v3[6];
    v29 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v29, v5);
    v19 = v3[7];
    v28 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v28, v5);
    v20 = v3[8];
    HIBYTE(v27) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v20, (char *)&v27 + 7, v5);
    v21 = v3[9];
    BYTE6(v27) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v21, (char *)&v27 + 6, v5);
    v22 = v3[10];
    BYTE5(v27) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v22, (char *)&v27 + 5, v5);
    v23 = v3[11];
    BYTE4(v27) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v23, (char *)&v27 + 4, v5);
    v24 = v3[12];
    BYTE3(v27) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v24, (char *)&v27 + 3, v5);
    v25 = v3[13];
    BYTE2(v27) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v25, (char *)&v27 + 2, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1001021AC()
{
  Swift::UInt64 *v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  Hasher._combine(_:)(v0[2]);
  Hasher._combine(_:)(v0[3]);
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v0[5]);
  Hasher._combine(_:)(v0[6]);
  Hasher._combine(_:)(v0[7]);
  Hasher._combine(_:)(v0[8]);
  Hasher._combine(_:)(v0[9]);
  Hasher._combine(_:)(v0[10]);
  Hasher._combine(_:)(v0[11]);
  Hasher._combine(_:)(v0[12]);
  Hasher._combine(_:)(v0[13]);
  return Hasher._finalize()();
}

void sub_100102290()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v7 = v0[6];
  v6 = v0[7];
  v8 = v0[8];
  v9 = v0[9];
  v10 = v0[10];
  v11 = v0[11];
  v12 = v0[12];
  v13 = v0[13];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
}

Swift::Int sub_10010236C(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;
  _QWORD v17[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v12 = v1[9];
  v13 = v1[10];
  v14 = v1[11];
  v15 = v1[12];
  v16 = v1[13];
  Hasher.init(_seed:)(v17, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  return Hasher._finalize()();
}

uint64_t sub_100102498(_QWORD *a1)
{
  return sub_100101EB8(a1);
}

BOOL sub_1001024AC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[7];
  _OWORD v14[7];

  v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  v3 = a1[6];
  v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  v6 = *a2;
  v7 = a2[1];
  v13[6] = v3;
  v14[0] = v6;
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  v11 = a2[4];
  v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  v14[2] = v8;
  return sub_100103C50(v13, v14);
}

uint64_t sub_100102510@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

__n128 sub_100102520@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __n128 *a8@<X8>)
{
  uint64_t v14;
  _QWORD *v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t *), _QWORD *, uint64_t, uint64_t);
  __n128 result;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  __n128 v23;
  char v24[24];
  uint64_t v25;

  v25 = a6;
  v14 = swift_allocObject(&unk_100150818, 56, 7);
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_QWORD *)(v14 + 48) = 0;
  v15 = (_QWORD *)swift_allocObject(&unk_100150840, 40, 7);
  v15[2] = a4;
  v15[3] = a5;
  v15[4] = v14;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t *), _QWORD *, uint64_t, uint64_t))(a7 + 32);
  swift_bridgeObjectRetain(a5);
  swift_retain(v14);
  v16(a1, a2, a3, sub_100104D14, v15, v25, a7);
  if (v22)
  {
    swift_release(v14);
    swift_release(v15);
  }
  else
  {
    swift_release(v15);
    swift_beginAccess(v14 + 16, v24, 0, 0);
    v23 = *(__n128 *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 32);
    v19 = *(_QWORD *)(v14 + 40);
    v20 = *(_QWORD *)(v14 + 48);
    swift_bridgeObjectRetain(v20);
    swift_release(v14);
    result = v23;
    *a8 = v23;
    a8[1].n128_u64[0] = v18;
    a8[1].n128_u64[1] = v19;
    a8[2].n128_u64[0] = v20;
  }
  return result;
}

uint64_t sub_100102678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t);
  char v14[24];
  uint64_t v15;

  v10 = swift_allocObject(&unk_100150628, 32, 7);
  *(_QWORD *)(v10 + 16) = 0;
  v11 = v10 + 16;
  *(_BYTE *)(v10 + 24) = 1;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(a5 + 24);
  swift_retain(v10);
  v12(a1, a2, a3, sub_100103CC4, v10, a4, a5);
  swift_release(v10);
  if (v15)
  {
    swift_release(v10);
  }
  else
  {
    swift_beginAccess(v11, v14, 0, 0);
    v11 = *(_QWORD *)(v10 + 16);
    swift_release(v10);
  }
  return v11;
}

void sub_100102770(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X11 }
}

uint64_t sub_1001027AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  char v7;
  Swift::String v8;
  void *object;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 48))(a5, a1, a2, a3, a4);
  if (!v5 && (v7 & 1) != 0)
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease(0xE000000000000000);
    v8._countAndFlagsBits = sub_1000D4214(0);
    object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    v10 = sub_1000122F8();
    v11 = swift_allocError(&type metadata for KMError, v10, 0, 0);
    *(_QWORD *)v12 = 0xD000000000000026;
    *(_QWORD *)(v12 + 8) = 0x800000010012D110;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_QWORD *)(v12 + 64) = 0;
    *(_BYTE *)(v12 + 72) = 58;
    return swift_willThrow(v11);
  }
  return result;
}

_QWORD *sub_100102914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *result;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  __n128 v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v112;
  _BYTE __src[280];
  __n128 v114;
  __n128 v115[2];
  __n128 v116;
  __n128 v117[2];
  __n128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  __n128 v126[2];
  uint64_t v127;
  _OWORD v128[2];
  uint64_t v129;
  _OWORD v130[2];
  uint64_t v131;
  _OWORD v132[2];
  uint64_t v133;
  _OWORD v134[2];
  uint64_t v135;
  char v136[25];
  uint64_t v137;
  _OWORD v138[2];
  uint64_t v139;
  _OWORD v140[2];
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  _OWORD v145[2];
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  unint64_t v149;
  _OWORD v150[2];
  unint64_t v151;
  __int128 v152;
  __int128 v153;
  unint64_t v154;
  _OWORD v155[2];
  unint64_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  _OWORD v160[2];
  uint64_t v161;
  _BYTE __dst[280];
  unint64_t v163[7];
  uint64_t v164;

  v9 = v8;
  v164 = a7;
  v15 = sub_1000D3FAC(a1, a2);
  if (v16)
  {
    v17 = v16;
    if (v15 == 0x34365F363878 && v16 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease(0xE600000000000000);
LABEL_6:
      v19 = sub_1000122F8();
      v20 = swift_allocError(&type metadata for KMError, v19, 0, 0);
      *(_QWORD *)v21 = 0xD00000000000003FLL;
      *(_QWORD *)(v21 + 8) = 0x800000010012CF10;
      *(_OWORD *)(v21 + 16) = 0u;
      *(_OWORD *)(v21 + 32) = 0u;
      *(_OWORD *)(v21 + 48) = 0u;
      *(_QWORD *)(v21 + 64) = 0;
      v22 = 16;
LABEL_7:
      *(_BYTE *)(v21 + 72) = v22;
      return (_QWORD *)swift_willThrow(v20);
    }
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 0x34365F363878, 0xE600000000000000, 0);
    swift_bridgeObjectRelease(v17);
    if ((v18 & 1) != 0)
      goto LABEL_6;
  }
  v24 = sub_10008FC2C();
  v25 = *v24;
  v26 = v24[1];
  swift_bridgeObjectRetain(v26);
  sub_100102520(a1, a2, a3, v25, v26, a6, v164, &v114);
  if (v9)
    return (_QWORD *)swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v26);
  sub_100103EC0((uint64_t)&v114, (uint64_t)&v157);
  if (!v159)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)__src = 0x742064656C696146;
    *(_QWORD *)&__src[8] = 0xEF20646E6966206FLL;
    v31 = *v24;
    v30 = (void *)v24[1];
LABEL_13:
    swift_bridgeObjectRetain(v30);
    v32._countAndFlagsBits = v31;
    v32._object = v30;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v30);
    v33._countAndFlagsBits = 0x746E656D67657320;
    v33._object = (void *)0xE800000000000000;
    String.append(_:)(v33);
    v34 = *(_QWORD *)__src;
    v35 = *(_QWORD *)&__src[8];
LABEL_14:
    v36 = sub_1000122F8();
    v20 = swift_allocError(&type metadata for KMError, v36, 0, 0);
    *(_QWORD *)v21 = v34;
    *(_QWORD *)(v21 + 8) = v35;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 32) = 0u;
    *(_OWORD *)(v21 + 48) = 0u;
    *(_QWORD *)(v21 + 64) = 0;
    v22 = 58;
    goto LABEL_7;
  }
  v107 = v159;
  v160[0] = v157;
  v160[1] = v158;
  v161 = v159;
  v103 = *((_QWORD *)&v157 + 1);
  v105 = v157;
  v101 = v158;
  v98 = a8;
  v99 = *((_QWORD *)&v158 + 1);
  v27 = sub_10008FCA8();
  v28 = *v27;
  v29 = v27[1];
  swift_bridgeObjectRetain(v29);
  sub_100102520(a1, a2, a3, v28, v29, a6, v164, v115);
  v97 = a6;
  swift_bridgeObjectRelease(v29);
  sub_100103EC0((uint64_t)v115, (uint64_t)&v152);
  if (!v154)
  {
    sub_1000F2284((uint64_t)&v114);
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)__src = 0x742064656C696146;
    *(_QWORD *)&__src[8] = 0xEF20646E6966206FLL;
    v31 = *v27;
    v30 = (void *)v27[1];
    goto LABEL_13;
  }
  v93 = v154;
  v155[0] = v152;
  v155[1] = v153;
  v156 = v154;
  v95 = v152;
  v91 = v153;
  v92 = *((_QWORD *)&v152 + 1);
  v90 = *((_QWORD *)&v153 + 1);
  v37 = sub_10008FE1C();
  v38 = *v37;
  v39 = v37[1];
  swift_bridgeObjectRetain(v39);
  sub_100102520(a1, a2, a3, v38, v39, v97, v164, &v116);
  swift_bridgeObjectRelease(v39);
  sub_100103EC0((uint64_t)&v116, (uint64_t)&v147);
  if (!v149)
  {
    sub_1000F2284((uint64_t)v115);
    sub_1000F2284((uint64_t)&v114);
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)__src = 0x742064656C696146;
    *(_QWORD *)&__src[8] = 0xEF20646E6966206FLL;
    v31 = *v37;
    v30 = (void *)v37[1];
    goto LABEL_13;
  }
  v89 = v149;
  v150[0] = v147;
  v150[1] = v148;
  v151 = v149;
  v87 = *((_QWORD *)&v147 + 1);
  v88 = v147;
  v85 = *((_QWORD *)&v148 + 1);
  v86 = v148;
  v40 = sub_10008FE94();
  v41 = *v40;
  v42 = v40[1];
  swift_bridgeObjectRetain(v42);
  sub_100102520(a1, a2, a3, v41, v42, v97, v164, v117);
  v83 = v40;
  swift_bridgeObjectRelease(v42);
  sub_100103EC0((uint64_t)v117, (uint64_t)&v142);
  v43 = v144;
  if (!v144)
  {
    sub_1000F2284((uint64_t)v115);
    sub_1000F2284((uint64_t)&v116);
    sub_1000F2284((uint64_t)&v114);
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)__src = 0x742064656C696146;
    *(_QWORD *)&__src[8] = 0xEF20646E6966206FLL;
    v31 = *v83;
    v30 = (void *)v83[1];
    goto LABEL_13;
  }
  v145[0] = v142;
  v145[1] = v143;
  v146 = v144;
  v82 = *((_QWORD *)&v142 + 1);
  v84 = v142;
  v80 = *((_QWORD *)&v143 + 1);
  v81 = v143;
  v44 = sub_10008FD20();
  v45 = *v44;
  v46 = v44[1];
  swift_bridgeObjectRetain(v46);
  sub_100102520(a1, a2, a3, v45, v46, v97, v164, &v118);
  v78 = v118.n128_u64[1];
  v79 = v118.n128_u64[0];
  v76 = v120;
  v77 = v119;
  v75 = v121;
  swift_bridgeObjectRelease(v46);
  v47 = sub_10008FD9C();
  v48 = *v47;
  v49 = v47[1];
  swift_bridgeObjectRetain(v49);
  sub_100102520(a1, a2, a3, v48, v49, v97, v164, &v122);
  v73 = v43;
  v50 = v122.n128_u64[1];
  v74 = v122.n128_u64[0];
  v71 = v124;
  v72 = v123;
  v70 = v125;
  swift_bridgeObjectRelease(v49);
  v51 = sub_10008FF14();
  v52 = *v51;
  v53 = v51[1];
  swift_bridgeObjectRetain(v53);
  sub_100102520(a1, a2, a3, v52, v53, v97, v164, v126);
  v68 = v126[1];
  v69 = v126[0];
  v67 = v127;
  swift_bridgeObjectRelease(v53);
  *(_QWORD *)__src = v105;
  *(_QWORD *)&__src[8] = v103;
  *(_QWORD *)&__src[16] = v101;
  *(_QWORD *)&__src[24] = v99;
  *(_QWORD *)&__src[32] = v107;
  *(_QWORD *)&__src[40] = v95;
  *(_QWORD *)&__src[48] = v92;
  *(_QWORD *)&__src[56] = v91;
  *(_QWORD *)&__src[64] = v90;
  *(_QWORD *)&__src[72] = v93;
  *(_QWORD *)&__src[80] = v88;
  *(_QWORD *)&__src[88] = v87;
  *(_QWORD *)&__src[96] = v86;
  *(_QWORD *)&__src[104] = v85;
  *(_QWORD *)&__src[112] = v89;
  *(_QWORD *)&__src[120] = v84;
  *(_QWORD *)&__src[128] = v82;
  *(_QWORD *)&__src[136] = v81;
  *(_QWORD *)&__src[144] = v80;
  *(_QWORD *)&__src[152] = v73;
  *(_QWORD *)&__src[160] = v79;
  *(_QWORD *)&__src[168] = v78;
  *(_QWORD *)&__src[176] = v77;
  *(_QWORD *)&__src[184] = v76;
  *(_QWORD *)&__src[192] = v75;
  *(_QWORD *)&__src[200] = v74;
  v108 = v50;
  *(_QWORD *)&__src[208] = v50;
  v54 = v72;
  *(_QWORD *)&__src[216] = v72;
  v55 = v71;
  *(_QWORD *)&__src[224] = v71;
  *(_QWORD *)&__src[232] = v70;
  *(__n128 *)&__src[240] = v69;
  *(__n128 *)&__src[256] = v68;
  *(_QWORD *)&__src[272] = v67;
  memcpy(__dst, __src, sizeof(__dst));
  if (*(_QWORD *)&v160[0])
  {
    sub_100103F08(__src);
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease(0xE000000000000000);
    v57 = *v24;
    v56 = (void *)v24[1];
    swift_bridgeObjectRetain(v56);
    v58._countAndFlagsBits = v57;
    v58._object = v56;
    String.append(_:)(v58);
    swift_bridgeObjectRelease(v56);
    v59._object = (void *)0x800000010012CEF0;
    v59._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v59);
    v34 = 0x742074657366664FLL;
    v35 = 0xEA0000000000206FLL;
    goto LABEL_14;
  }
  if ((a5 & 1) != 0)
  {
    v112 = *(_QWORD *)&v155[0];
    sub_100103EC0((uint64_t)&v118, (uint64_t)v138);
    if (v139)
    {
      v140[0] = v138[0];
      v140[1] = v138[1];
      v141 = v139;
      v106 = sub_100104374((unint64_t *)v155, (unint64_t *)v140);
    }
    else
    {
      v106 = *((_QWORD *)&v155[0] + 1);
    }
    sub_100103EC0((uint64_t)&v122, (uint64_t)v136);
    if (v137)
    {
      v89 = v70;
    }
    else
    {
      swift_bridgeObjectRetain(v156);
      v74 = v95;
      v54 = v91;
      v108 = v92;
      v55 = v90;
      v89 = v93;
    }
    sub_100104818((uint64_t)&v122);
    v87 = v108;
    v88 = v74;
    v85 = v55;
    v86 = v54;
  }
  else
  {
    swift_bridgeObjectRetain(v151);
    v106 = 0;
    v112 = 0;
  }
  v163[0] = v88;
  v163[1] = v87;
  v163[2] = v86;
  v163[3] = v85;
  v163[4] = v89;
  v60 = sub_100104374((unint64_t *)v160, v163);
  swift_bridgeObjectRelease(v89);
  v61 = sub_100104374((unint64_t *)v150, (unint64_t *)v145);
  v109 = *((_QWORD *)&v145[0] + 1);
  v102 = *(_QWORD *)&v145[0];
  v104 = *(_QWORD *)&v150[0];
  sub_100103EC0((uint64_t)&v122, (uint64_t)v132);
  if (v133)
  {
    v134[0] = v132[0];
    v134[1] = v132[1];
    v135 = v133;
    v62 = *(_QWORD *)&v132[0];
    v100 = sub_100104374((unint64_t *)v134, (unint64_t *)v155);
  }
  else
  {
    v62 = 0;
    v100 = 0;
  }
  sub_100103EC0((uint64_t)&v118, (uint64_t)v128);
  if (v129)
  {
    v130[0] = v128[0];
    v130[1] = v128[1];
    v131 = v129;
    v96 = *(_QWORD *)&v128[0];
    v94 = sub_100104374((unint64_t *)v130, (unint64_t *)v150);
  }
  else
  {
    v94 = 0;
    v96 = 0;
  }
  sub_100102770(a1, a2, a3, a4);
  v64 = v63;
  sub_10010466C((uint64_t)__dst, a4);
  v66 = v65;
  result = sub_100103F08(__src);
  *v98 = v66;
  v98[1] = v64;
  v98[2] = 0;
  v98[3] = v60;
  v98[4] = v62;
  v98[5] = v100;
  v98[6] = v112;
  v98[7] = v106;
  v98[8] = v96;
  v98[9] = v94;
  v98[10] = v104;
  v98[11] = v61;
  v98[12] = v102;
  v98[13] = v109;
  return result;
}

uint64_t sub_100103480(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[14];
  uint64_t v32;

  swift_bridgeObjectRetain(a2);
  v12 = sub_1000D4090(a1);
  v14 = v13;
  sub_100102914(v12, v13, v15, a3, a4, a5, a6, v31);
  if (v6)
  {
    v16 = swift_bridgeObjectRelease(v14);
    v17 = static os_log_type_t.error.getter(v16);
    v18 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_10010F050;
    v32 = v6;
    swift_errorRetain(v6);
    v20 = sub_100005C88(&qword_10015AB50);
    v21 = String.init<A>(describing:)(&v32, v20);
    v23 = v22;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_100026838();
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v23;
    v24 = sub_10002687C();
    v25 = (void *)static OS_os_log.default.getter(v24);
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v25, "Could not generate payload properties %{public}s", 48, 2, v19);
    swift_bridgeObjectRelease(v19);

    return swift_willThrow(v26);
  }
  else
  {
    swift_bridgeObjectRelease(v14);
    if ((a4 & 1) != 0)
    {
      v28 = sub_10002687C();
      v29 = (void *)static OS_os_log.default.getter(v28);
      v30 = static os_log_type_t.default.getter(v29);
      os_log(_:dso:log:type:_:)("Encoding extra payload properties needed for builds that have split RO RX regions in their kernelcache MachO", 108, 2, &_mh_execute_header, v29, v30, _swiftEmptyArrayStorage);

      return sub_100101AD0();
    }
    else
    {
      return sub_1001018C8();
    }
  }
}

Swift::Int sub_10010364C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005C88(&qword_10015B938);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_100103954(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100005DE8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100103AA4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10010364C(v15, a4 & 1);
  v19 = sub_100005DE8(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_100103AA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100005C88(&qword_10015B938);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

BOOL sub_100103C50(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x70uLL) == 0;
}

unint64_t sub_100103C70()
{
  unint64_t result;

  result = qword_100174510[0];
  if (!qword_100174510[0])
  {
    result = swift_getWitnessTable(&unk_10011BBB8, &type metadata for MachOKernelcacheTags.CodingKeys);
    atomic_store(result, qword_100174510);
  }
  return result;
}

uint64_t sub_100103CB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100103CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  if (*(_DWORD *)a1 != 5)
    return 2;
  v5 = v4;
  if (*(_DWORD *)(a1 + 8) == 6)
  {
    if (*(_DWORD *)(a1 + 12) == 68)
    {
      v7 = nullsub_1(*(_QWORD *)(a1 + 272), a2, a3, a4);
      swift_beginAccess(v5 + 16, v19, 1, 0);
      *(_QWORD *)(v5 + 16) = v7;
      *(_BYTE *)(v5 + 24) = 0;
      goto LABEL_9;
    }
    v15 = static os_log_type_t.error.getter(a1);
    v16 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v11 = swift_allocObject(v16, 112, 7);
    *(_OWORD *)(v11 + 16) = xmmword_10010F380;
    *(_QWORD *)(v11 + 56) = &type metadata for Int;
    *(_QWORD *)(v11 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v11 + 32) = 68;
    *(_QWORD *)(v11 + 96) = sub_100005C88(&qword_10015C558);
    *(_QWORD *)(v11 + 104) = sub_100104DB4();
    *(_QWORD *)(v11 + 72) = a1 + 12;
    v17 = sub_10002687C();
    v14 = (void *)static OS_os_log.default.getter(v17);
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v14, "While calculating get_LC_UNIXTHREAD_PCAddress, could not find ARM_THREAD_STATE64 state type with %d size. It was %d count", 121, 2, v11);
  }
  else
  {
    v9 = static os_log_type_t.error.getter(a1);
    v10 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_10010F050;
    v12 = *(_DWORD *)(a1 + 8);
    *(_QWORD *)(v11 + 56) = &type metadata for UInt32;
    *(_QWORD *)(v11 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v11 + 32) = v12;
    v13 = sub_10002687C();
    v14 = (void *)static OS_os_log.default.getter(v13);
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v14, "While calculating get_LC_UNIXTHREAD_PCAddress could not find ARM_THREAD_STATE64 flavor: %d", 90, 2, v11);
  }
  swift_bridgeObjectRelease(v11);

LABEL_9:
  swift_beginAccess(v5 + 16, &v18, 0, 0);
  if (*(_BYTE *)(v5 + 24))
    return 2;
  else
    return 0;
}

uint64_t sub_100103EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015C548);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100103F08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  v3 = a1[9];
  v4 = a1[14];
  v5 = a1[24];
  v6 = a1[29];
  v7 = a1[34];
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_100103F90(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1869374315 && a2 == 0xE400000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(1869374315, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 1885692779 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1885692779, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 1718772587 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1718772587, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 2054316907 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(2054316907, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 3;
  }
  else if (a1 == 1718838123 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1718838123, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 4;
  }
  else if (a1 == 2054382443 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(2054382443, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 5;
  }
  else if (a1 == 1719165803 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1719165803, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 6;
  }
  else if (a1 == 2054710123 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(2054710123, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 7;
  }
  else if (a1 == 1717724011 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1717724011, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 8;
  }
  else if (a1 == 2053268331 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(2053268331, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 9;
  }
  else if (a1 == 1719100267 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1719100267, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 10;
  }
  else if (a1 == 2054644587 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(2054644587, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 11;
  }
  else if (a1 == 1718379371 && a2 == 0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(1718379371, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 12;
  }
  else if (a1 == 2053923691 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 13;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(2053923691, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

unint64_t sub_100104374(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  os_log_type_t type;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *a2;
  v6 = *a1;
  v7 = sub_1000E0B14(*a1, *a2);
  v8 = v7;
  if (v2)
  {
    v9 = static os_log_type_t.error.getter(v7);
    v10 = a2[3];
    v24 = a2[4];
    sub_10002687C();
    sub_100104818((uint64_t)a1);
    sub_100104818((uint64_t)a2);
    sub_100104818((uint64_t)a1);
    sub_100104818((uint64_t)a2);
    sub_100104818((uint64_t)a2);
    sub_100104818((uint64_t)a1);
    sub_100104818((uint64_t)a2);
    v11 = sub_100104818((uint64_t)a1);
    v12 = static OS_os_log.default.getter(v11);
    if (os_log_type_enabled(v12, v9))
    {
      type = v9;
      v21 = v6;
      v13 = v8;
      v14 = a1[3];
      v15 = a1[4];
      v20 = v10;
      v16 = swift_slowAlloc(42, -1);
      v22 = swift_slowAlloc(64, -1);
      v27 = v22;
      *(_DWORD *)v16 = 136315906;
      swift_bridgeObjectRetain(v15);
      v17 = v15;
      v8 = v13;
      v25 = sub_1000055A0(v14, v17, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 4, v16 + 12);
      sub_1000F2284((uint64_t)a1);
      sub_1000F2284((uint64_t)a1);
      sub_1000F2284((uint64_t)a1);
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain(v24);
      v25 = sub_1000055A0(v20, v24, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 14, v16 + 22);
      sub_1000F2284((uint64_t)a2);
      sub_1000F2284((uint64_t)a2);
      sub_1000F2284((uint64_t)a2);
      *(_WORD *)(v16 + 22) = 2048;
      sub_1000F2284((uint64_t)a2);
      v25 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 24, v16 + 32);
      sub_1000F2284((uint64_t)a2);
      *(_WORD *)(v16 + 32) = 2048;
      sub_1000F2284((uint64_t)a1);
      v25 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 34, v16 + 42);
      sub_1000F2284((uint64_t)a1);
      _os_log_impl((void *)&_mh_execute_header, v12, type, "Integer overflow detected: %s offset from segment %s offset (%llu - %llu)", (uint8_t *)v16, 0x2Au);
      swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {
      sub_1000F2284((uint64_t)a1);
      sub_1000F2284((uint64_t)a2);

      sub_1000F2284((uint64_t)a1);
      sub_1000F2284((uint64_t)a1);
      sub_1000F2284((uint64_t)a2);
      sub_1000F2284((uint64_t)a2);
      sub_1000F2284((uint64_t)a2);
      v18 = sub_1000F2284((uint64_t)a1);
    }
    swift_willThrow(v18);
  }
  return v8;
}

void sub_10010466C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001046A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_100104818(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 32));
  return a1;
}

unint64_t sub_100104844()
{
  unint64_t result;

  result = qword_10015C550;
  if (!qword_10015C550)
  {
    result = swift_getWitnessTable(&unk_10011BAA4, &type metadata for MachOKernelcacheTags);
    atomic_store(result, (unint64_t *)&qword_10015C550);
  }
  return result;
}

__n128 initializeWithCopy for MachOKernelcacheTags(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for MachOKernelcacheTags(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MachOKernelcacheTags(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 112) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MachOKernelcacheTags()
{
  return &type metadata for MachOKernelcacheTags;
}

uint64_t destroy for MachOSegment(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for MachOSegment(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for MachOSegment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v3 = a2[4];
  v4 = a1[4];
  a1[4] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for MachOSegment(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MachOSegment(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MachOSegment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MachOSegment()
{
  return &type metadata for MachOSegment;
}

uint64_t getEnumTagSinglePayload for MachOKernelcacheTags.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MachOKernelcacheTags.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_100104B6C + 4 * byte_10011BA0D[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_100104BA0 + 4 * byte_10011BA08[v4]))();
}

uint64_t sub_100104BA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100104BA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100104BB0);
  return result;
}

uint64_t sub_100104BBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100104BC4);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_100104BC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100104BD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MachOKernelcacheTags.CodingKeys()
{
  return &type metadata for MachOKernelcacheTags.CodingKeys;
}

unint64_t sub_100104BF0()
{
  unint64_t result;

  result = qword_100174820[0];
  if (!qword_100174820[0])
  {
    result = swift_getWitnessTable(&unk_10011BB90, &type metadata for MachOKernelcacheTags.CodingKeys);
    atomic_store(result, qword_100174820);
  }
  return result;
}

unint64_t sub_100104C38()
{
  unint64_t result;

  result = qword_100174930;
  if (!qword_100174930)
  {
    result = swift_getWitnessTable(&unk_10011BB00, &type metadata for MachOKernelcacheTags.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100174930);
  }
  return result;
}

unint64_t sub_100104C80()
{
  unint64_t result;

  result = qword_100174938[0];
  if (!qword_100174938[0])
  {
    result = swift_getWitnessTable(&unk_10011BB28, &type metadata for MachOKernelcacheTags.CodingKeys);
    atomic_store(result, qword_100174938);
  }
  return result;
}

uint64_t sub_100104CC4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100104CE8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100104D14(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v2 = v1[2];
  v3 = v1[3];
  v4 = (_QWORD *)v1[4];
  v5 = *a1;
  v6 = a1[1];
  v8 = a1[2];
  v7 = a1[3];
  v9 = a1[4];
  if ((sub_1000DFFC0(v7, v9, v2, v3) & 1) == 0)
    return 2;
  swift_beginAccess(v4 + 2, v12, 1, 0);
  v10 = v4[6];
  v4[2] = v5;
  v4[3] = v6;
  v4[4] = v8;
  v4[5] = v7;
  v4[6] = v9;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRetain(v9);
  return 0;
}

unint64_t sub_100104DB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C560;
  if (!qword_10015C560)
  {
    v1 = sub_100011CE4(&qword_10015C558);
    result = swift_getWitnessTable(&protocol conformance descriptor for UnsafePointer<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C560);
  }
  return result;
}

uint64_t sub_100104E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_100104E78(v10, v7, v8);
}

uint64_t sub_100104E78(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_10015C568);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_100104EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015C568);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t sub_100104F30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  io_registry_entry_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFString *v15;
  CFTypeRef CFProperty;
  CFTypeID v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  Swift::String v24;
  void *object;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;

  v56 = a2;
  v3 = a1[3];
  v4 = a1[4];
  sub_100004DE4(a1, v3);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v6 = v5(v3, v4);
  v8 = v7;
  v9 = String.utf8CString.getter(v6);
  swift_bridgeObjectRelease(v8);
  v10 = IORegistryEntryFromPath(kIOMainPortDefault, (const char *)(v9 + 32));
  swift_release(v9);
  if (!v10)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease(0xE000000000000000);
    v24._countAndFlagsBits = v5(v3, v4);
    object = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(object);
    v26 = sub_1000122F8();
    v27 = swift_allocError(&type metadata for KMError, v26, 0, 0);
    *(_QWORD *)v28 = 0xD00000000000002BLL;
    *(_QWORD *)(v28 + 8) = 0x800000010012D240;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_QWORD *)(v28 + 64) = 0;
    *(_BYTE *)(v28 + 72) = 10;
    return swift_willThrow(v27);
  }
  v53 = v5;
  v12 = a1[3];
  v11 = a1[4];
  sub_100004DE4(a1, v12);
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v12, v11);
  v14 = v13;
  v15 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  CFProperty = IORegistryEntryCreateCFProperty(v10, v15, kCFAllocatorDefault, 0);

  if (!CFProperty)
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease(0xE000000000000000);
    v54 = 0xD000000000000018;
    v55 = 0x800000010012D220;
    v30 = a1[3];
    v31 = a1[4];
    sub_100004DE4(a1, v30);
    v32._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
    v33 = v32._object;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v33);
    v34._countAndFlagsBits = 544106784;
    v34._object = (void *)0xE400000000000000;
    String.append(_:)(v34);
    v35._countAndFlagsBits = v53(v3, v4);
    v36 = v35._object;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(v36);
    v37 = sub_1000122F8();
    v38 = swift_allocError(&type metadata for KMError, v37, 0, 0);
    *(_QWORD *)v39 = 0xD000000000000018;
    *(_QWORD *)(v39 + 8) = 0x800000010012D220;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_OWORD *)(v39 + 32) = 0u;
    *(_OWORD *)(v39 + 48) = 0u;
    *(_QWORD *)(v39 + 64) = 0;
    *(_BYTE *)(v39 + 72) = 10;
    swift_willThrow(v38);
    return IOObjectRelease(v10);
  }
  v17 = CFGetTypeID(CFProperty);
  if (CFStringGetTypeID() == v17)
  {
    swift_unknownObjectRetain(CFProperty);
    v18 = objc_opt_self(NSString);
    v19 = swift_dynamicCastObjCClass(CFProperty, v18);
    if (v19)
    {
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;
      swift_unknownObjectRelease(CFProperty);
      v23 = v56;
      v56[3] = (uint64_t)&type metadata for String;
      swift_unknownObjectRelease(CFProperty);
      *v23 = v20;
      v23[1] = v22;
    }
    else
    {
      swift_unknownObjectRelease_n(CFProperty, 2);
      v50 = v56;
      *(_OWORD *)v56 = 0u;
      *((_OWORD *)v50 + 1) = 0u;
    }
    return IOObjectRelease(v10);
  }
  if (CFNumberGetTypeID() != v17)
  {
    if (CFDataGetTypeID() == v17)
    {
      swift_unknownObjectRetain(CFProperty);
      v44 = objc_opt_self(NSData);
      v45 = swift_dynamicCastObjCClass(CFProperty, v44);
      if (v45)
      {
        v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v48 = v47;
        swift_unknownObjectRelease(CFProperty);
        v49 = v56;
        v56[3] = (uint64_t)&type metadata for Data;
        swift_unknownObjectRelease(CFProperty);
        *v49 = v46;
        v49[1] = v48;
      }
      else
      {
        swift_unknownObjectRelease_n(CFProperty, 2);
        v52 = v56;
        *(_OWORD *)v56 = 0u;
        *((_OWORD *)v52 + 1) = 0u;
      }
    }
    else
    {
      v51 = v56;
      *(_OWORD *)v56 = 0u;
      *((_OWORD *)v51 + 1) = 0u;
      swift_unknownObjectRelease(CFProperty);
    }
    return IOObjectRelease(v10);
  }
  swift_unknownObjectRetain(CFProperty);
  v40 = objc_opt_self(NSNumber);
  v41 = swift_dynamicCastObjCClass(CFProperty, v40);
  if (!v41)
  {
    swift_unknownObjectRelease(CFProperty);
    v42 = v56;
    goto LABEL_19;
  }
  v54 = 0;
  LOBYTE(v55) = 1;
  static Int._conditionallyBridgeFromObjectiveC(_:result:)(v41, &v54);
  swift_unknownObjectRelease(CFProperty);
  v42 = v56;
  if ((v55 & 1) != 0)
  {
LABEL_19:
    swift_unknownObjectRelease(CFProperty);
    *(_OWORD *)v42 = 0u;
    *((_OWORD *)v42 + 1) = 0u;
    return IOObjectRelease(v10);
  }
  v43 = v54;
  v56[3] = (uint64_t)&type metadata for Int;
  swift_unknownObjectRelease(CFProperty);
  *v42 = v43;
  return IOObjectRelease(v10);
}

uint64_t type metadata accessor for RealDeviceProperties()
{
  return objc_opt_self(_TtC10driverkitd20RealDeviceProperties);
}

uint64_t sub_1001053D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  void (*v16)(_QWORD *, _QWORD *, unint64_t, uint64_t, uint64_t);
  unint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[2];

  __chkstk_darwin(a1);
  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v10);
  v18[1] = a1;
  v19 = String.data(using:allowLossyConversion:)(v12, 1, a1, a2);
  v14 = v13;
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v14 >> 60 != 15)
  {
    v20[0] = v19;
    v20[1] = v14;
    v16 = *(void (**)(_QWORD *, _QWORD *, unint64_t, uint64_t, uint64_t))(a4 + 56);
    v17 = sub_1000B2468();
    v16(v20, &type metadata for Data, v17, a3, a4);
    return sub_100021610(v19, v14);
  }
  return result;
}

uint64_t sub_100105630()
{
  return 950287;
}

uint64_t sub_10010563C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 200))();
}

uint64_t protocol witness for TextOutputStream.write(_:) in conformance NSFileHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10011BEE0, a3);
  return sub_1001053D4(a1, a2, a3, WitnessTable);
}

id sub_1001056AC()
{
  id *v0;

  return objc_msgSend(*v0, "offsetInFile");
}

id sub_1001056BC()
{
  id *v0;

  return objc_msgSend(*v0, "seekToEndOfFile");
}

id sub_1001056CC(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, "seekToFileOffset:", a1);
}

uint64_t sub_1001056E0(uint64_t a1, uint64_t a2)
{
  return sub_1001062E0(a1, a2, (SEL *)&selRef_readDataToEndOfFile, (uint64_t (*)(void))&static Data._unconditionallyBridgeFromObjectiveC(_:));
}

uint64_t sub_1001056F4(uint64_t a1)
{
  id *v1;
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(*v1, "readDataOfLength:", a1);
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10010574C()
{
  return NSFileHandle.write<A>(contentsOf:)();
}

id sub_10010576C()
{
  id *v0;

  return objc_msgSend(*v0, "closeFile");
}

uint64_t sub_10010577C@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  Class isa;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class v25;
  NSString v26;
  unsigned int v27;
  id v28;
  id v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v36;
  uint64_t *v37;
  _QWORD v38[2];
  id v39[5];

  v36 = a4;
  v9 = type metadata accessor for POSIXError(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = strlen(a1);
  v14 = v13 + 1;
  if (__OFADD__(v13, 1))
    __break(1u);
  v37 = a5;
  v15 = (char *)swift_slowAlloc(v13 + 1, -1);
  strlcpy(v15, a1, v14);
  v16 = mkstemp(v15);
  if ((v16 & 0x80000000) != 0)
  {
    v31 = sub_1000BCAF8((uint64_t)v12);
    POSIXError._nsError.getter(v31);
    v32 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_willThrow(v32);
  }
  else
  {
    v17 = objc_msgSend(objc_allocWithZone((Class)NSFileHandle), "initWithFileDescriptor:closeOnDealloc:", v16, 1);
    sub_100005C44(a2, (uint64_t)v39);
    v18 = sub_100005C88(&qword_10015B190);
    swift_dynamicCast(v38, v39, v18, &type metadata for Data, 7);
    v19 = v38[0];
    v20 = v38[1];
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100011F40(v19, v20);
    objc_msgSend(v17, "writeData:", isa);

    v22 = String.init(cString:)(v15);
    v24 = v23;
    if (a3)
    {
      type metadata accessor for FileAttributeKey();
      sub_100012534(&qword_100158608, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10011BF48);
      v25 = Dictionary._bridgeToObjectiveC()().super.isa;
      v26 = String._bridgeToObjectiveC()();
      v39[0] = 0;
      v27 = objc_msgSend(v36, "setAttributes:ofItemAtPath:error:", v25, v26, v39);

      v28 = v39[0];
      if (!v27)
      {
        v33 = v39[0];
        swift_bridgeObjectRelease(v24);
        _convertNSErrorToError(_:)(v28);

        swift_willThrow(v34);
        return swift_slowDealloc(v15, -1, -1);
      }
      v29 = v39[0];
    }

    v30 = v37;
    *v37 = v22;
    v30[1] = v24;
  }
  return swift_slowDealloc(v15, -1, -1);
}

uint64_t sub_100105A30@<X0>(const char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10010577C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), a2);
}

_QWORD *sub_100105A4C(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    result = _StringGuts._slowWithCString<A>(_:)(&v9, a1, a2);
    if (!v4)
      return (_QWORD *)v9;
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    v10[0] = a3;
    v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    result = a1(&v8, v10);
    if (!v4)
      return (_QWORD *)v8;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
      v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = _StringObject.sharedUTF8.getter(a3, a4);
    result = a1(v10, (_QWORD *)v6);
    if (!v4)
      return (_QWORD *)v10[0];
  }
  return result;
}

_QWORD *sub_100105B24@<X0>(uint64_t (*a1)(_QWORD *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  _QWORD v10[2];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    type metadata accessor for URL(0);
    return _StringGuts._slowWithCString<A>(_:)(a5, a1, a2);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v10[0] = a3;
      v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      v8 = v10;
    }
    else if ((a3 & 0x1000000000000000) != 0)
    {
      v8 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v8 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
    }
    return (_QWORD *)a1(v8);
  }
}

double sub_100105BF8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  double result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v6 = String.utf8CString.getter(a1);
  v7 = open(_:_:)(v6 + 32, 0);
  v8 = swift_release(v6);
  if ((_DWORD)v7 == -1)
  {
    v11 = errno.getter(v8);
    v12 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v13 = swift_allocObject(v12, 112, 7);
    *(_OWORD *)(v13 + 16) = xmmword_10010F380;
    *(_QWORD *)(v13 + 56) = &type metadata for String;
    *(_QWORD *)(v13 + 64) = sub_100026838();
    *(_QWORD *)(v13 + 32) = a1;
    *(_QWORD *)(v13 + 40) = a2;
    *(_QWORD *)(v13 + 96) = &type metadata for Int32;
    *(_QWORD *)(v13 + 104) = &protocol witness table for Int32;
    *(_DWORD *)(v13 + 72) = v11;
    sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    swift_bridgeObjectRetain(a2);
    v15 = (void *)static OS_os_log.default.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    os_log(_:dso:log:type:_:)("failed to open file at path: %{public}s (%d)", 44, 2, &_mh_execute_header, v15, v16, v13);
    swift_bridgeObjectRelease(v13);

    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    v9 = objc_msgSend(objc_allocWithZone((Class)NSFileHandle), "initWithFileDescriptor:closeOnDealloc:", v7, 1);
    *(_QWORD *)(a3 + 24) = sub_100005D68(0, &qword_10015C610, NSFileHandle_ptr);
    *(_QWORD *)(a3 + 32) = sub_100107FD4(&qword_10015C618, (uint64_t)&unk_10011BEE0);
    *(_QWORD *)a3 = v9;
  }
  return result;
}

BOOL sub_100105D88(int a1, int a2, copyfile_state_t s)
{
  return sub_1001074AC(a1, s);
}

uint64_t sub_100105D90@<X0>(const char *a1@<X0>, BOOL *a2@<X8>)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  ssize_t v7;
  uint64_t result;

  v4 = (void *)swift_slowAlloc(32, -1);
  v5 = sub_100090230();
  v6 = String.utf8CString.getter(*v5);
  v7 = getxattr(a1, (const char *)(v6 + 32), v4, 0x20uLL, 0, 0);
  swift_release(v6);
  result = swift_slowDealloc(v4, -1, -1);
  *a2 = v7 > 0;
  return result;
}

uint64_t sub_100105E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = type metadata accessor for POSIXError(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = URL.path.getter(v10);
  v15 = v14;
  v16 = String.utf8CString.getter(v13);
  swift_bridgeObjectRelease(v15);
  v17 = open(_:_:)(v16 + 32, 0);
  v18 = swift_release(v16);
  if (v17 < 0)
  {
    v20 = sub_1000BCAF8((uint64_t)v12);
    POSIXError._nsError.getter(v20);
    v21 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return swift_willThrow(v21);
  }
  else
  {
    __chkstk_darwin(v18);
    *(&v22 - 4) = a2;
    *(&v22 - 3) = a3;
    *((_DWORD *)&v22 - 4) = v17;
    *(&v22 - 1) = a1;
    sub_100105B24((uint64_t (*)(_QWORD *))sub_100107490, (uint64_t)(&v22 - 6), a2, a3, a4);
    return close(v17);
  }
}

size_t sub_100105F78(const char *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  size_t result;
  size_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for POSIXError(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = strlen(a1);
  v9 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v10 = (char *)swift_slowAlloc(result + 1, -1);
    strlcpy(v10, a1, v9);
    v11 = mkdtempat_np(a2, v10);
    if (v11)
    {
      v12 = String.init(cString:)(v11);
      v14 = v13;
      URL.appendingPathComponent(_:)(v12, v13);
      swift_bridgeObjectRelease(v14);
      return swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      v15 = sub_1000BCAF8((uint64_t)v7);
      POSIXError._nsError.getter(v15);
      v16 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_willThrow(v16);
      return swift_slowDealloc(v10, -1, -1);
    }
  }
  return result;
}

void sub_1001060B0(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  NSURL *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  Swift::String v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  Class isa;
  unsigned int v19;
  id v20;
  id v21;
  id v22;
  id v23[2];
  char v24;

  v2 = v1;
  v24 = 0;
  URL.path.getter(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  LOBYTE(v4) = objc_msgSend(v2, "fileExistsAtPath:isDirectory:", v5, &v24);

  if ((v4 & 1) != 0)
  {
    if ((v24 & 1) != 0)
      return;
    _StringGuts.grow(_:)(21);
    v8 = (void *)URL.path.getter(v7);
    v10 = v9;
    swift_bridgeObjectRelease(0xE000000000000000);
    v23[0] = v8;
    v23[1] = v10;
    v11._object = (void *)0x8000000100126610;
    v11._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v11);
    v12 = sub_1000122F8();
    v13 = swift_allocError(&type metadata for KMError, v12, 0, 0);
    *(_QWORD *)v14 = v8;
    *(_QWORD *)(v14 + 8) = v10;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_QWORD *)(v14 + 64) = 0;
    *(_BYTE *)(v14 + 72) = 19;
  }
  else
  {
    URL._bridgeToObjectiveC()(v6);
    v16 = v15;
    v17 = sub_10001B9E4((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for FileAttributeKey();
    sub_100012534(&qword_100158608, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10011BF48);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    v23[0] = 0;
    v19 = objc_msgSend(v2, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v16, 1, isa, v23);

    v20 = v23[0];
    if (v19)
    {
      v21 = v23[0];
      return;
    }
    v22 = v23[0];
    _convertNSErrorToError(_:)(v20);

  }
  swift_willThrow(v13);
}

uint64_t sub_1001062CC(uint64_t a1, uint64_t a2)
{
  return sub_1001062E0(a1, a2, (SEL *)&selRef_currentDirectoryPath, (uint64_t (*)(void))&static String._unconditionallyBridgeFromObjectiveC(_:));
}

uint64_t sub_1001062E0(uint64_t a1, uint64_t a2, SEL *a3, uint64_t (*a4)(void))
{
  id *v4;
  id v6;
  uint64_t v7;

  v6 = objc_msgSend(*v4, *a3);
  v7 = a4();

  return v7;
}

uint64_t sub_100106334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(fileURLWithPath:)(a1, a2);
  v10 = Data.init(contentsOf:options:)(v9, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v10;
}

void *sub_100106400(uint64_t a1, objc_class *a2, uint64_t a3)
{
  return sub_100106420(a1, a2, a3);
}

void *sub_100106420(uint64_t a1, Class isa, uint64_t a3)
{
  void *v3;
  void *v4;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  id v16;

  v4 = v3;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v8 = v7;
  if (isa)
  {
    type metadata accessor for URLResourceKey();
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  v16 = 0;
  v9 = objc_msgSend(v4, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v8, isa, a3, &v16);

  v10 = v16;
  if (v9)
  {
    v11 = type metadata accessor for URL(0);
    v4 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v11);
    v12 = v10;

  }
  else
  {
    v13 = v16;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v14);
  }
  return v4;
}

_QWORD *sub_100106540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100107B10(a1, a2, a3);
}

id sub_100106554(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, Class a5)
{
  void **v5;
  void *v8;
  NSString v9;
  Class isa;
  id v11;

  v8 = *v5;
  v9 = String._bridgeToObjectiveC()();
  if (a4 >> 60 == 15)
  {
    isa = 0;
    if (!a5)
      goto LABEL_6;
    goto LABEL_5;
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  if (a5)
  {
LABEL_5:
    type metadata accessor for FileAttributeKey();
    sub_100012534(&qword_100158608, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10011BF48);
    a5 = Dictionary._bridgeToObjectiveC()().super.isa;
  }
LABEL_6:
  v11 = objc_msgSend(v8, "createFileAtPath:contents:attributes:", v9, isa, a5);

  return v11;
}

id sub_100106638(uint64_t a1, char a2, objc_class *a3)
{
  return sub_100106658(a1, a2, a3);
}

id sub_100106658(uint64_t a1, char a2, Class isa)
{
  void *v3;
  void *v4;
  void *v7;
  void *v8;
  unsigned int v9;
  id v10;
  id v12;
  uint64_t v13;
  id v14;

  v4 = v3;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v8 = v7;
  if (isa)
  {
    type metadata accessor for FileAttributeKey();
    sub_100012534(&qword_100158608, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10011BF48);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  v14 = 0;
  v9 = objc_msgSend(v4, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v8, a2 & 1, isa, &v14);

  v10 = v14;
  if (v9)
    return v14;
  v12 = v14;
  _convertNSErrorToError(_:)(v10);

  return (id)swift_willThrow(v13);
}

uint64_t sub_100106780(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  return sub_100107580(a1, a2, a3);
}

void sub_100106794(uint64_t a1)
{
  sub_1001060B0(a1);
}

uint64_t sub_1001067B4()
{
  return sub_1001067D4();
}

uint64_t sub_1001067D4()
{
  void *v0;
  uint64_t v1;
  NSString v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  id v12;

  v2 = String._bridgeToObjectiveC()();
  v12 = 0;
  v3 = objc_msgSend(v0, "attributesOfItemAtPath:error:", v2, &v12);

  v4 = v12;
  if (v3)
  {
    type metadata accessor for FileAttributeKey();
    v6 = v5;
    v7 = sub_100012534(&qword_100158608, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10011BF48);
    v1 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, v6, (char *)&type metadata for Any + 8, v7);
    v8 = v4;

  }
  else
  {
    v9 = v12;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v10);
  }
  return v1;
}

uint64_t sub_1001068E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_100105E30(a1, a2, a3, a4);
}

id sub_1001068F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  return sub_100106918(a1, a2, a3, a4, a5, a6);
}

id sub_100106918(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  void *v11;
  void *v12;
  NSURL *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  id v17;
  id v19;
  uint64_t v20;
  id v21;

  v7 = v6;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v12 = v11;
  URL._bridgeToObjectiveC()(v13);
  v15 = v14;
  if (a4)
    a4 = String._bridgeToObjectiveC()();
  v21 = 0;
  v16 = objc_msgSend(v7, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", v12, v15, a4, a5, a6, &v21);

  v17 = v21;
  if (v16)
    return v21;
  v19 = v21;
  _convertNSErrorToError(_:)(v17);

  return (id)swift_willThrow(v20);
}

id sub_100106A3C()
{
  return sub_100106A5C();
}

id sub_100106A5C()
{
  void *v0;
  NSString v1;
  unsigned int v2;
  id v3;
  id v5;
  uint64_t v6;
  id v7;

  v1 = String._bridgeToObjectiveC()();
  v7 = 0;
  v2 = objc_msgSend(v0, "removeItemAtPath:error:", v1, &v7);

  v3 = v7;
  if (v2)
    return v7;
  v5 = v7;
  _convertNSErrorToError(_:)(v3);

  return (id)swift_willThrow(v6);
}

id sub_100106B14()
{
  return sub_100106B34();
}

id sub_100106B34()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v6;
  uint64_t v7;
  id v8;

  v1 = v0;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v3 = v2;
  v8 = 0;
  LODWORD(v1) = objc_msgSend(v1, "removeItemAtURL:error:", v2, &v8);

  v4 = v8;
  if ((_DWORD)v1)
    return v8;
  v6 = v8;
  _convertNSErrorToError(_:)(v4);

  return (id)swift_willThrow(v7);
}

uint64_t sub_100106BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(fileURLWithPath:)(a1, a2);
  v12 = Data.init(contentsOf:options:)(v11, a3);
  v14 = v13;
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  a4[3] = (uint64_t)&type metadata for Data;
  a4[4] = (uint64_t)&off_10014F688;
  *a4 = v12;
  a4[1] = v14;
  return result;
}

_QWORD *sub_100106CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t v14;

  v14 = a2;
  v7 = *v4;
  v13 = a1;
  swift_bridgeObjectRetain(a2);
  v8._countAndFlagsBits = 0x5858585858582ELL;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  v9 = v14;
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = v7;
  v10 = sub_100105A4C((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_100108340, (uint64_t)v12, v13, v14);
  swift_bridgeObjectRelease(v9);
  return v10;
}

id sub_100106D9C()
{
  return sub_100106DBC();
}

id sub_100106DBC()
{
  void *v0;
  NSString v1;
  NSString v2;
  unsigned int v3;
  id v4;
  id v6;
  uint64_t v7;
  id v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v8 = 0;
  v3 = objc_msgSend(v0, "createSymbolicLinkAtPath:withDestinationPath:error:", v1, v2, &v8);

  v4 = v8;
  if (v3)
    return v8;
  v6 = v8;
  _convertNSErrorToError(_:)(v4);

  return (id)swift_willThrow(v7);
}

id sub_100106E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void *v5;
  NSString v6;
  id v7;

  v5 = *v3;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "fileExistsAtPath:isDirectory:", v6, a3);

  return v7;
}

id sub_100106EF0()
{
  void **v0;
  void *v1;
  NSString v2;
  id v3;

  v1 = *v0;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "isExecutableFileAtPath:", v2);

  return v3;
}

uint64_t sub_100106F34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for POSIXError(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = String.utf8CString.getter(a1);
  v7 = realpath_DARWIN_EXTSN((const char *)(v6 + 32), 0);
  swift_release(v6);
  if (v7)
  {
    v8 = String.init(utf8String:)(v7);
    free(v7);
    return v8;
  }
  else
  {
    v10 = sub_1000BCAF8((uint64_t)v5);
    POSIXError._nsError.getter(v10);
    v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return swift_willThrow(v11);
  }
}

double sub_100107020@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100107044(a1, (SEL *)&selRef_fileHandleForReadingAtPath_, a2);
}

double sub_10010702C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100107044(a1, (SEL *)&selRef_fileHandleForWritingAtPath_, a2);
}

double sub_100107038@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100107044(a1, (SEL *)&selRef_fileHandleForUpdatingAtPath_, a2);
}

double sub_100107044@<D0>(uint64_t a1@<X1>, SEL *a2@<X4>, uint64_t a3@<X8>)
{
  NSString v6;
  id v7;
  double result;

  swift_bridgeObjectRetain(a1);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a1);
  v7 = objc_msgSend((id)objc_opt_self(NSFileHandle), *a2, v6);

  if (v7)
  {
    *(_QWORD *)(a3 + 24) = sub_100005D68(0, &qword_10015C610, NSFileHandle_ptr);
    *(_QWORD *)(a3 + 32) = sub_100107FD4(&qword_10015C618, (uint64_t)&unk_10011BEE0);
    *(_QWORD *)a3 = v7;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

double sub_100107108@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100105BF8(a1, a2, a3);
}

_QWORD *sub_10010711C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  a2[3] = type metadata accessor for URLResourceValues(0);
  a2[4] = &off_100150D28;
  sub_100005BE0(a2);
  result = (_QWORD *)URL.resourceValues(forKeys:)(a1);
  if (v2)
    return sub_10007257C(a2);
  return result;
}

uint64_t sub_100107190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, copyfile_flags_t a5)
{
  return sub_100107368(a1, a2, a3, a4, a5);
}

uint64_t sub_1001071A4()
{
  uint64_t result;
  uint64_t v1;

  result = os_variant_allows_internal_security_policies("kernelmanagerd");
  if ((_DWORD)result)
  {
    URL.withUnsafeFileSystemRepresentation<A>(_:)(&v1, sub_100105D90, 0, &type metadata for Bool);
    return v1;
  }
  return result;
}

uint64_t sub_100107204(uint64_t a1, unint64_t a2)
{
  return sub_100107690(a1, a2) & 1;
}

uint64_t sub_10010721C(uint64_t a1, unint64_t a2)
{
  return sub_100107838(a1, a2) & 1;
}

uint64_t sub_100107238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_1001072B0(v10, v7, v8);
}

uint64_t sub_1001072B0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_10015C620);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_10010731C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015C620);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t sub_100107368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, copyfile_flags_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _copyfile_state *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = type metadata accessor for POSIXError(0);
  v8 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = copyfile_state_alloc();
  copyfile_state_set(v11, 6u, sub_100105D88);
  v12 = String.utf8CString.getter(a1);
  v13 = String.utf8CString.getter(a3);
  v14 = copyfile((const char *)(v12 + 32), (const char *)(v13 + 32), v11, a5);
  swift_release(v12);
  swift_release(v13);
  if (v14)
  {
    v15 = sub_1000BCAF8((uint64_t)v10);
    POSIXError._nsError.getter(v15);
    v16 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v19);
    swift_willThrow(v16);
  }
  return copyfile_state_free(v11);
}

size_t sub_100107490(const char *a1)
{
  uint64_t v1;

  return sub_100105F78(a1, *(_DWORD *)(v1 + 32));
}

BOOL sub_1001074AC(int a1, copyfile_state_t s)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  if (a1 != 5)
    return 0;
  v9 = 0;
  if (copyfile_state_get(s, 9u, &v9))
    return 0;
  result = v9;
  if (v9)
  {
    v3 = String.init(cString:)(v9);
    v5 = v4;
    v6 = sub_10009023C();
    v7 = v6[1];
    if (v3 == *v6 && v5 == v7)
    {
      swift_bridgeObjectRelease(v5);
      return 1;
    }
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, *v6, v7, 0);
    swift_bridgeObjectRelease(v5);
    return (v8 & 1) != 0;
  }
  return result;
}

uint64_t sub_100107580(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = type metadata accessor for POSIXError(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = URL.path.getter(v7);
  v12 = v11;
  v13 = String.utf8CString.getter(v10);
  swift_bridgeObjectRelease(v12);
  v14 = String.utf8CString.getter(a3);
  LODWORD(v12) = rootless_mkdir_restricted(v13 + 32, a2, v14 + 32);
  swift_release(v13);
  result = swift_release(v14);
  if ((_DWORD)v12 == -1)
  {
    v16 = sub_1000BCAF8((uint64_t)v9);
    POSIXError._nsError.getter(v16);
    v17 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    return swift_willThrow(v17);
  }
  return result;
}

uint64_t sub_100107690(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  statfs v20;

  v4 = type metadata accessor for POSIXError(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(&v20, 0x878uLL);
  v8 = sub_1000D1A34(a1, a2);
  v10 = v9;
  v11 = String.utf8CString.getter(v8);
  v12 = statfs((const char *)(v11 + 32), &v20);
  swift_release(v11);
  if (v12)
  {
    swift_bridgeObjectRelease(v10);
    v13 = sub_1000BCAF8(v7);
    POSIXError._nsError.getter(v13);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
    swift_willThrow(v14);
  }
  else
  {
    KeyPath = (_QWORD *)swift_getKeyPath(&unk_10011BF90);
    v7 = sub_1000D6658(KeyPath, (uint64_t)&v20);
    v17 = v16;
    swift_release(KeyPath);
    if (v7 == v8 && v17 == v10)
    {
      LOBYTE(v7) = 1;
      v17 = v10;
    }
    else
    {
      LOBYTE(v7) = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v17, v8, v10, 0);
    }
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v17);
  }
  return v7 & 1;
}

uint64_t sub_100107838(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *KeyPath;
  uint64_t v15;
  uint64_t v16;
  statfs v18;

  v4 = type metadata accessor for POSIXError(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(&v18, 0x878uLL);
  v8 = sub_1000D1A34(a1, a2);
  v10 = v9;
  v11 = String.utf8CString.getter(v8);
  swift_bridgeObjectRelease(v10);
  LODWORD(v10) = statfs((const char *)(v11 + 32), &v18);
  swift_release(v11);
  if ((_DWORD)v10)
  {
    v12 = sub_1000BCAF8(v7);
    POSIXError._nsError.getter(v12);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
    swift_willThrow(v13);
  }
  else
  {
    KeyPath = (_QWORD *)swift_getKeyPath(&unk_10011BF90);
    v7 = sub_1000D6658(KeyPath, (uint64_t)&v18);
    v16 = v15;
    swift_release(KeyPath);
    if (v7 == 47 && v16 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(0xE100000000000000);
      LOBYTE(v7) = 1;
    }
    else
    {
      LOBYTE(v7) = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v16, 47, 0xE100000000000000, 0);
      swift_bridgeObjectRelease(v16);
    }
  }
  return v7 & 1;
}

BOOL sub_1001079D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;

  v4 = String.utf8CString.getter(a1);
  v5 = openat_authenticated_np(-2, (const char *)(v4 + 32), 0, -1);
  v6 = swift_release(v4);
  if (v5 == -1)
  {
    v7 = static os_log_type_t.error.getter(v6);
    v8 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v9 = swift_allocObject(v8, 112, 7);
    *(_OWORD *)(v9 + 16) = xmmword_10010F380;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = sub_100026838();
    *(_QWORD *)(v9 + 32) = a1;
    *(_QWORD *)(v9 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    v11 = errno.getter(v10);
    *(_QWORD *)(v9 + 96) = &type metadata for Int32;
    *(_QWORD *)(v9 + 104) = &protocol witness table for Int32;
    *(_DWORD *)(v9 + 72) = v11;
    v12 = sub_100005D68(0, (unint64_t *)&qword_1001596F0, OS_os_log_ptr);
    v13 = (void *)static OS_os_log.default.getter(v12);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v13, "openat_authenticated_np() failed at path %{public}s with (errno %d)", 67, 2, v9);
    swift_bridgeObjectRelease(v9);

  }
  else if ((v5 & 0x80000000) == 0)
  {
    close(v5);
  }
  return v5 != -1;
}

_QWORD *sub_100107B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  void *object;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v36 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for NSFastEnumerationIterator(0);
  v12 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v16 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, a2, a3, 0, 0);

  if (v16)
  {
    v17 = NSEnumerator.makeIterator()();
    NSFastEnumerationIterator.next()(&v38, v17);
    if (v40)
    {
      v15 = _swiftEmptyArrayStorage;
      while (1)
      {
        v18 = swift_dynamicCast(v11, &v38, (char *)&type metadata for Any + 8, v6, 6);
        v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
        if (v18)
        {
          v19(v11, 0, 1, v6);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6) != 1)
          {
            v35 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
            v35(v36, v11, v6);
            if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
              v15 = (_QWORD *)sub_10000C60C(0, v15[2] + 1, 1, (unint64_t)v15);
            v21 = v15[2];
            v20 = v15[3];
            v22 = v21 + 1;
            if (v21 >= v20 >> 1)
            {
              v34 = v21 + 1;
              v24 = sub_10000C60C(v20 > 1, v21 + 1, 1, (unint64_t)v15);
              v22 = v34;
              v15 = (_QWORD *)v24;
            }
            v15[2] = v22;
            v23 = ((uint64_t (*)(char *, char *, uint64_t))v35)((char *)v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v21, v36, v6);
            goto LABEL_13;
          }
        }
        else
        {
          v19(v11, 1, 1, v6);
        }
        v23 = sub_1000976A0((uint64_t)v11);
LABEL_13:
        NSFastEnumerationIterator.next()(&v38, v23);
        if (!v40)
          goto LABEL_17;
      }
    }
    v15 = _swiftEmptyArrayStorage;
LABEL_17:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v37);

  }
  else
  {
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    v25 = swift_bridgeObjectRelease(v39);
    v38 = 0xD000000000000020;
    v39 = 0x800000010012D320;
    v26._countAndFlagsBits = URL.path.getter(v25);
    object = v26._object;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(object);
    v28 = v38;
    v29 = v39;
    v30 = sub_1000122F8();
    v31 = swift_allocError(&type metadata for KMError, v30, 0, 0);
    *(_QWORD *)v32 = v28;
    *(_QWORD *)(v32 + 8) = v29;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(_QWORD *)(v32 + 64) = 0;
    *(_BYTE *)(v32 + 72) = 19;
    swift_willThrow(v31);
  }
  return v15;
}

unint64_t sub_100107E84()
{
  unint64_t result;

  result = qword_10015C628;
  if (!qword_10015C628)
  {
    result = swift_getWitnessTable(&unk_10011BCF4, &type metadata for CopyFileFlags);
    atomic_store(result, (unint64_t *)&qword_10015C628);
  }
  return result;
}

unint64_t sub_100107ECC()
{
  unint64_t result;

  result = qword_10015C630;
  if (!qword_10015C630)
  {
    result = swift_getWitnessTable(&unk_10011BD64, &type metadata for CopyFileFlags);
    atomic_store(result, (unint64_t *)&qword_10015C630);
  }
  return result;
}

unint64_t sub_100107F14()
{
  unint64_t result;

  result = qword_10015C638;
  if (!qword_10015C638)
  {
    result = swift_getWitnessTable(&unk_10011BE2C, &type metadata for CopyFileFlags);
    atomic_store(result, (unint64_t *)&qword_10015C638);
  }
  return result;
}

unint64_t sub_100107F5C()
{
  unint64_t result;

  result = qword_10015C640;
  if (!qword_10015C640)
  {
    result = swift_getWitnessTable(&unk_10011BE54, &type metadata for CopyFileFlags);
    atomic_store(result, (unint64_t *)&qword_10015C640);
  }
  return result;
}

uint64_t sub_100107FA0(uint64_t a1)
{
  uint64_t result;

  result = sub_100107FD4(&qword_10015C648, (uint64_t)&protocol conformance descriptor for NSFileHandle);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100107FD4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100005D68(255, &qword_10015C610, NSFileHandle_ptr);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CopyFileFlags()
{
  return &type metadata for CopyFileFlags;
}

void *sub_100108034(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x878uLL);
}

uint64_t sub_10010803C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2168))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10010805C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 2168) = v3;
  return result;
}

void type metadata accessor for statfs(uint64_t a1)
{
  sub_1000732A8(a1, &qword_10015C650, (uint64_t)&unk_100150AD0);
}

_QWORD *sub_1001082D8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_1001082E4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100108304(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for fsid(uint64_t a1)
{
  sub_1000732A8(a1, &qword_10015C658, (uint64_t)&unk_100150B90);
}

uint64_t sub_100108340@<X0>(const char *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100105A30(a1, a2);
}

uint64_t sub_100108368()
{
  return URLResourceValues.fileSize.getter();
}

unint64_t sub_100108380()
{
  return 0xD000000000000013;
}

uint64_t sub_10010839C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_10010AA6C(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_1001083C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100108418();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001083F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100108418();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100108418()
{
  unint64_t result;

  result = qword_100174ED0[0];
  if (!qword_100174ED0[0])
  {
    result = swift_getWitnessTable(&unk_10011C27C, &type metadata for BuildVersionPlist.CodingKeys);
    atomic_store(result, qword_100174ED0);
  }
  return result;
}

uint64_t sub_10010845C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v5 = sub_100005C88(&qword_10015C668);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_100108418();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BuildVersionPlist.CodingKeys, &type metadata for BuildVersionPlist.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100005D08(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_100005D08(a1);
  *a2 = v13;
  a2[1] = v15;
  return result;
}

uint64_t sub_100108580(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_100005C88(&qword_10015C660);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_100004DE4(a1, v9);
  v11 = sub_100108418();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BuildVersionPlist.CodingKeys, &type metadata for BuildVersionPlist.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_10010866C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, __n128);
  __n128 v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;

  v8 = v7;
  v37 = a5;
  v14 = a1;
  v15 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v8, v18);
  if (a2)
  {
    v19 = *(void (**)(char *, uint64_t, __n128))(v15 + 8);
    v20 = swift_bridgeObjectRetain(a2);
    v19(v17, a6, v20);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 8))(a3, a4, a6, a7);
    a2 = v21;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a6);
    if (!a2)
    {
      v26 = sub_1000122F8();
      v27 = swift_allocError(&type metadata for KMError, v26, 0, 0);
      *(_QWORD *)v28 = 0xD000000000000046;
      v25 = 0x800000010012D3A0;
LABEL_9:
      *(_QWORD *)(v28 + 8) = v25;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 32) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_QWORD *)(v28 + 64) = 0;
      *(_BYTE *)(v28 + 72) = 57;
      swift_willThrow(v27);
      return v25;
    }
  }
  v22 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a7 + 32))(v14, a2, a3, a4, v37 & 1, 0, a6, a7);
  if (!v23)
  {
    v22 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 24))(v14, a2, a3, a4, a6, a7);
    if (!v24)
    {
      v35 = 0;
      v36 = 0xE000000000000000;
      _StringGuts.grow(_:)(76);
      v29._countAndFlagsBits = 0xD00000000000004ALL;
      v29._object = (void *)0x800000010012D3F0;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v14;
      v30._object = a2;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(a2);
      v31 = v35;
      v25 = v36;
      v32 = sub_1000122F8();
      v27 = swift_allocError(&type metadata for KMError, v32, 0, 0);
      *(_QWORD *)v28 = v31;
      goto LABEL_9;
    }
  }
  v25 = v22;
  swift_bridgeObjectRelease(a2);
  return v25;
}

uint64_t sub_1001088C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v40[23];
  char v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v40[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v7);
  v12 = &v40[-v11];
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v2 + 88))(&v42, v10);
  if (!v43)
  {
    v27 = sub_1000124F8((uint64_t)&v42, &qword_10015B6A0);
    v28 = static os_log_type_t.error.getter(v27);
    v29 = sub_10002687C();
    v30 = (void *)static OS_os_log.default.getter(v29);
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v30, "Could not getBuildVersion since no side-effects found", 53, 2, _swiftEmptyArrayStorage);

    return 0;
  }
  sub_100004E2C(&v42, (uint64_t)v45);
  URL.init(fileURLWithPath:isDirectory:)(a1, a2, 1);
  v13 = (uint64_t *)sub_10009014C();
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  URL.appendingPathComponent(_:)(v14, v15);
  swift_bridgeObjectRelease(v15);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8);
  v17 = v16(v9, v5);
  v18 = URL.path.getter(v17);
  v20 = v19;
  v16(v12, v5);
  v41 = 0;
  v21 = v46;
  v22 = v47;
  sub_100004DE4(v45, v46);
  sub_10010731C(v21, v22);
  v23 = v43;
  v24 = v44;
  sub_100004DE4(&v42, v43);
  LOBYTE(v21) = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v24 + 136))(v18, v20, &v41, v23, v24);
  sub_100005D08(&v42);
  if ((v21 & 1) == 0)
  {
    v31 = static os_log_type_t.debug.getter(v25);
    v32 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v33 = swift_allocObject(v32, 72, 7);
    *(_OWORD *)(v33 + 16) = xmmword_10010F050;
    *(_QWORD *)(v33 + 56) = &type metadata for String;
    *(_QWORD *)(v33 + 64) = sub_100026838();
    *(_QWORD *)(v33 + 32) = v18;
    *(_QWORD *)(v33 + 40) = v20;
    v34 = sub_10002687C();
    v35 = (void *)static OS_os_log.default.getter(v34);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v35, "Could not find %{public}s", 25, 2, v33);
    swift_bridgeObjectRelease(v33);

    sub_100005D08(v45);
    return 0;
  }
  v26 = sub_100005C88(&qword_10015C670);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(v26 + 152))(v18, v20, v45);
  v37 = swift_bridgeObjectRelease(v20);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v36 + 128))(&v42, v37);
  swift_release(v36);
  v38 = v42;
  sub_100005D08(v45);
  return v38;
}

uint64_t sub_100108CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  NSString *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;

  v4 = v3;
  v8 = sub_100005C88((uint64_t *)&unk_10015BA60);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v36 - v13;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v3 + 88))(&v39, v12);
  if (v40)
  {
    v37 = a3;
    sub_100004E2C(&v39, (uint64_t)v42);
    v15 = v43;
    v16 = v44;
    sub_100004DE4(v42, v43);
    sub_10010731C(v15, v16);
    v17 = v40;
    v18 = v41;
    sub_100004DE4(&v39, v40);
    v19 = sub_100005C88(&qword_10015A848);
    v20 = swift_allocObject(v19, 40, 7);
    v38 = xmmword_10010F050;
    *(_OWORD *)(v20 + 16) = xmmword_10010F050;
    *(_QWORD *)(v20 + 32) = NSURLIsDirectoryKey;
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 24);
    v22 = NSURLIsDirectoryKey;
    v27 = v21(a1, v20, 1, v17, v18);
    swift_bridgeObjectRelease(v20);
    v28 = sub_100005D08(&v39);
    __chkstk_darwin(v28);
    *(&v36 - 4) = (uint64_t)v42;
    *(&v36 - 3) = v4;
    v29 = v37;
    *(&v36 - 2) = a2;
    *(&v36 - 1) = v29;
    v32 = sub_1000AA06C((uint64_t (*)(char *))sub_10010ACD4, (uint64_t)(&v36 - 6), v27);
    swift_retain(v4);
    sub_1001090A4(v32, v4, v14);
    swift_bridgeObjectRelease(v32);
    sub_100019E1C((uint64_t)v14, (uint64_t)v11, (uint64_t *)&unk_10015BA60);
    v33 = type metadata accessor for URL(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v11, 1, v33);
    if ((_DWORD)v35 == 1)
    {
      sub_1000124F8((uint64_t)v14, (uint64_t *)&unk_10015BA60);
      sub_1000124F8((uint64_t)v11, (uint64_t *)&unk_10015BA60);
      v30 = 0;
    }
    else
    {
      v30 = URL.path.getter(v35);
      sub_1000124F8((uint64_t)v14, (uint64_t *)&unk_10015BA60);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v33);
    }
    sub_100005D08(v42);
  }
  else
  {
    v23 = sub_1000124F8((uint64_t)&v39, &qword_10015B6A0);
    v24 = static os_log_type_t.error.getter(v23);
    v25 = sub_10002687C();
    v26 = (void *)static OS_os_log.default.getter(v25);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v26, "Could not getMatchingDevKit since no side-effects found", 55, 2, _swiftEmptyArrayStorage);

    return 0;
  }
  return v30;
}

uint64_t sub_1001090A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  void (*v15)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, __n128);
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;

  v27 = a3;
  v31 = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005C88((uint64_t *)&unk_10015BA60);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v26 = a1;
  if (v11)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v28 = *(_QWORD *)(v5 + 72);
    v29 = v13;
    v14 = swift_bridgeObjectRetain(a1);
    while (1)
    {
      v29(v10, v12, v4, v14);
      v15 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56);
      v15(v10, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
        break;
      v30 = v15;
      v16 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 32);
      v17 = v16(v7, v10, v4);
      v18 = v7;
      v19 = URL.path.getter(v17);
      v21 = v20;
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 136))(v19);
      v23 = v22;
      swift_bridgeObjectRelease(v21);
      if (v23)
      {
        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease(v23);
        v24 = v27;
        v16(v27, v18, v4);
        v30(v24, 0, 1, v4);
        return swift_release(v31);
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v18, v4);
      v12 += v28;
      --v11;
      v7 = v18;
      if (!v11)
        goto LABEL_8;
    }
  }
  else
  {
    v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56);
    v14 = swift_bridgeObjectRetain(a1);
LABEL_8:
    v15 = v30;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v30)(v10, 1, 1, v4, v14);
  }
  swift_bridgeObjectRelease(v26);
  v15(v27, 1, 1, v4);
  return swift_release(v31);
}

uint64_t sub_1001092D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[9];
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  uint64_t v68;
  uint64_t v69;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v60 - v11;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v2 + 88))(&v64, v10);
  if (v65)
  {
    sub_100004E2C(&v64, (uint64_t)v67);
    URL.init(fileURLWithPath:)(a1, a2);
    v13 = (uint64_t *)sub_100090158();
    v62 = a2;
    v14 = *v13;
    v15 = v13[1];
    swift_bridgeObjectRetain(v15);
    URL.appendingPathComponent(_:)(v14, v15);
    swift_bridgeObjectRelease(v15);
    v16 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    v17 = v16(v9, v5);
    v18 = URL.path.getter(v17);
    v61 = a1;
    v19 = v18;
    v21 = v20;
    v16(v12, v5);
    v22 = v68;
    v23 = v69;
    sub_100004DE4(v67, v68);
    sub_10010731C(v22, v23);
    v24 = v65;
    v25 = v66;
    sub_100004DE4(&v64, v65);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 152))(v19, v21, v24, v25);
    v32 = v31;
    v33 = sub_100005D08(&v64);
    if (v32)
    {
      swift_bridgeObjectRelease(v21);
      URL.init(fileURLWithPath:)(v30, v32);
      v34 = (uint64_t *)sub_100090164();
      v35 = *v34;
      v36 = v34[1];
      swift_bridgeObjectRetain(v36);
      URL.appendingPathComponent(_:)(v35, v36);
      swift_bridgeObjectRelease(v36);
      v37 = v16(v9, v5);
      v38 = URL.path.getter(v37);
      v40 = v39;
      v16(v12, v5);
      v63[0] = 0;
      v41 = v68;
      v42 = v69;
      sub_100004DE4(v67, v68);
      sub_10010731C(v41, v42);
      v43 = v65;
      v44 = v66;
      sub_100004DE4(&v64, v65);
      if (((*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(v44 + 136))(v38, v40, v63, v43, v44) & 1) == 0)
      {
        swift_bridgeObjectRelease(v32);
        v46 = sub_100005D08(&v64);
        goto LABEL_10;
      }
      v45 = v63[0];
      sub_100005D08(&v64);
      if ((v45 & 1) != 0)
      {
        v46 = swift_bridgeObjectRelease(v32);
LABEL_10:
        v52 = static os_log_type_t.error.getter(v46);
        v53 = sub_100005C88((uint64_t *)&unk_1001596E0);
        v54 = swift_allocObject(v53, 112, 7);
        *(_OWORD *)(v54 + 16) = xmmword_10010F380;
        *(_QWORD *)(v54 + 56) = &type metadata for String;
        v55 = sub_100026838();
        v56 = v62;
        *(_QWORD *)(v54 + 32) = v61;
        *(_QWORD *)(v54 + 40) = v56;
        *(_QWORD *)(v54 + 96) = &type metadata for String;
        *(_QWORD *)(v54 + 104) = v55;
        *(_QWORD *)(v54 + 64) = v55;
        *(_QWORD *)(v54 + 72) = v38;
        *(_QWORD *)(v54 + 80) = v40;
        sub_10002687C();
        swift_bridgeObjectRetain(v56);
        v58 = (void *)static OS_os_log.default.getter(v57);
        os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, v58, "%{public}s Dev Kit does not contain %{public}s", 46, 2, v54);
        swift_bridgeObjectRelease(v54);

        sub_100005D08(v67);
        return 0;
      }
      swift_bridgeObjectRelease(v40);
    }
    else
    {
      v47 = static os_log_type_t.error.getter(v33);
      v48 = sub_100005C88((uint64_t *)&unk_1001596E0);
      v49 = swift_allocObject(v48, 72, 7);
      *(_OWORD *)(v49 + 16) = xmmword_10010F050;
      *(_QWORD *)(v49 + 56) = &type metadata for String;
      *(_QWORD *)(v49 + 64) = sub_100026838();
      *(_QWORD *)(v49 + 32) = v19;
      *(_QWORD *)(v49 + 40) = v21;
      v50 = sub_10002687C();
      v51 = (void *)static OS_os_log.default.getter(v50);
      os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v51, "Could not get real path for %{public}s", 38, 2, v49);
      swift_bridgeObjectRelease(v49);

    }
    sub_100005D08(v67);
    return v30;
  }
  v26 = sub_1000124F8((uint64_t)&v64, &qword_10015B6A0);
  v27 = static os_log_type_t.error.getter(v26);
  v28 = sub_10002687C();
  v29 = (void *)static OS_os_log.default.getter(v28);
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v29, "Could not getMatchingDevKit since no side-effects found", 55, 2, _swiftEmptyArrayStorage);

  return 0;
}

uint64_t sub_100109830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;

  v5 = v4;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v26 - v15;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(a3, a4);
  v19 = v17;
  if (v18)
  {
    v20 = v18;
    URL.init(fileURLWithPath:isDirectory:)(v17, v18, 1);
    swift_bridgeObjectRelease(v20);
    v21 = (uint64_t *)sub_10009011C();
    v22 = *v21;
    v23 = v21[1];
    swift_bridgeObjectRetain(v23);
    URL.appendingPathComponent(_:)(v22, v23);
    swift_bridgeObjectRelease(v23);
    v24 = *(void (**)(char *, uint64_t))(v11 + 8);
    v24(v14, v10);
    v19 = sub_100108CC0((uint64_t)v16, a1, a2);
    v24(v16, v10);
  }
  return v19;
}

uint64_t sub_100109984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  BOOL v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  void (*v74)(char *, uint64_t);
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  int v102;
  void (*v103)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;

  v105 = a3;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v17 = __chkstk_darwin(v16);
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v90 - v20;
  __chkstk_darwin(v19);
  v26 = (char *)&v90 - v25;
  if ((a5 & 1) != 0)
  {
    v99 = v24;
    v100 = v23;
    v104 = v22;
    v102 = a6;
    v101 = v15;
    URL.init(fileURLWithPath:)(v105, a4);
    v27 = (uint64_t *)sub_100090140();
    v28 = a4;
    v29 = v12;
    v30 = *v27;
    v31 = v27[1];
    swift_bridgeObjectRetain(v31);
    URL.appendingPathComponent(_:)(v30, v31);
    swift_bridgeObjectRelease(v31);
    v32 = *(void (**)(char *, uint64_t))(v29 + 8);
    v32(v21, v11);
    v33 = sub_100108CC0((uint64_t)v26, a1, a2);
    if (v34)
    {
      v35 = v33;
      v36 = v26;
LABEL_6:
      v32(v36, v11);
      return v35;
    }
    v96 = v29;
    LODWORD(v97) = static os_log_type_t.error.getter(v33);
    v95 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v37 = swift_allocObject(v95, 72, 7);
    v94 = xmmword_10010F050;
    *(_OWORD *)(v37 + 16) = xmmword_10010F050;
    v38 = URL.path.getter(v37);
    v98 = v26;
    v103 = v32;
    a4 = v28;
    v40 = v39;
    *(_QWORD *)(v37 + 56) = &type metadata for String;
    v93 = sub_100026838();
    *(_QWORD *)(v37 + 64) = v93;
    *(_QWORD *)(v37 + 32) = v38;
    *(_QWORD *)(v37 + 40) = v40;
    v92 = sub_10002687C();
    v41 = (void *)static OS_os_log.default.getter(v92);
    os_log(_:dso:log:_:_:)(v97, &_mh_execute_header, v41, "macOSInternalKDK is not found in the System volume file hierarchy at %{public}s", 79, 2, v37);
    swift_bridgeObjectRelease(v37);

    v42 = v105;
    URL.init(fileURLWithPath:)(v105, a4);
    v43 = (uint64_t *)sub_100090134();
    v44 = *v43;
    v45 = v43[1];
    swift_bridgeObjectRetain(v45);
    v46 = v104;
    URL.appendingPathComponent(_:)(v44, v45);
    swift_bridgeObjectRelease(v45);
    v103(v21, v11);
    v47 = sub_100108CC0(v46, a1, a2);
    if (v48)
    {
      v35 = v47;
      v49 = v46;
      v32 = v103;
      v103((char *)v49, v11);
      v36 = v98;
      goto LABEL_6;
    }
    v90 = v43;
    v91 = a1;
    v97 = a2;
    v50 = static os_log_type_t.error.getter(v47);
    v51 = swift_allocObject(v95, 72, 7);
    *(_OWORD *)(v51 + 16) = v94;
    v52 = URL.path.getter(v51);
    v53 = v93;
    *(_QWORD *)(v51 + 56) = &type metadata for String;
    *(_QWORD *)(v51 + 64) = v53;
    *(_QWORD *)(v51 + 32) = v52;
    *(_QWORD *)(v51 + 40) = v54;
    v55 = (void *)static OS_os_log.default.getter(v52);
    os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v55, "macOSInternalKDK is not found in the Data volume file hierarchy at %{public}s", 77, 2, v51);
    swift_bridgeObjectRelease(v51);

    v56 = v42;
    v57 = v42 == 47;
    v58 = v98;
    if ((!v57 || a4 != 0xE100000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v56, a4, 47, 0xE100000000000000, 0) & 1) == 0)
    {
      v59 = v99;
      URL.init(fileURLWithPath:)(47, 0xE100000000000000);
      v60 = *v90;
      v61 = v90[1];
      swift_bridgeObjectRetain(v61);
      v62 = v100;
      URL.appendingPathComponent(_:)(v60, v61);
      swift_bridgeObjectRelease(v61);
      v63 = v59;
      v64 = (void (*)(uint64_t, uint64_t))v103;
      v103(v63, v11);
      v65 = v104;
      v64(v104, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32))(v65, v62, v11);
      v66 = sub_100108CC0(v65, v91, v97);
      if (v67)
      {
        v35 = v66;
        v64(v65, v11);
        v64((uint64_t)v58, v11);
        return v35;
      }
      v68 = static os_log_type_t.error.getter(v66);
      v69 = swift_allocObject(v95, 72, 7);
      *(_OWORD *)(v69 + 16) = v94;
      v70 = URL.path.getter(v69);
      v71 = v93;
      *(_QWORD *)(v69 + 56) = &type metadata for String;
      *(_QWORD *)(v69 + 64) = v71;
      *(_QWORD *)(v69 + 32) = v70;
      *(_QWORD *)(v69 + 40) = v72;
      v73 = (void *)static OS_os_log.default.getter(v70);
      os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v73, "retry failed: macOSInternalKDK is not found in the Data volume file hierarchy at %{public}s", 91, 2, v69);
      swift_bridgeObjectRelease(v69);

    }
    v74 = v103;
    v103((char *)v104, v11);
    v74(v58, v11);
    v12 = v96;
    a2 = v97;
    a1 = v91;
    v15 = v101;
    if ((v102 & 1) != 0)
      return 0;
  }
  URL.init(fileURLWithPath:)(v105, a4);
  v75 = (uint64_t *)sub_100090128();
  v76 = *v75;
  v77 = v75[1];
  swift_bridgeObjectRetain(v77);
  URL.appendingPathComponent(_:)(v76, v77);
  swift_bridgeObjectRelease(v77);
  v78 = *(void (**)(char *, uint64_t))(v12 + 8);
  v78(v21, v11);
  v79 = sub_100108CC0((uint64_t)v15, a1, a2);
  v35 = v79;
  if (!v80)
  {
    v81 = static os_log_type_t.error.getter(v79);
    v82 = sub_100005C88((uint64_t *)&unk_1001596E0);
    v83 = swift_allocObject(v82, 72, 7);
    *(_OWORD *)(v83 + 16) = xmmword_10010F050;
    v84 = URL.path.getter(v83);
    v86 = v85;
    *(_QWORD *)(v83 + 56) = &type metadata for String;
    *(_QWORD *)(v83 + 64) = sub_100026838();
    *(_QWORD *)(v83 + 32) = v84;
    *(_QWORD *)(v83 + 40) = v86;
    v87 = sub_10002687C();
    v88 = (void *)static OS_os_log.default.getter(v87);
    os_log(_:dso:log:_:_:)(v81, &_mh_execute_header, v88, "matching KDK not found in %{public}s", 36, 2, v83);
    swift_bridgeObjectRelease(v83);

  }
  v78(v15, v11);
  return v35;
}

uint64_t sub_100109FE4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

unint64_t sub_10010A00C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  return sub_10010866C(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10010A020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[23];
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v34[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v7);
  v12 = &v34[-v11];
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v2 + 88))(&v36, v10);
  if (!v37)
  {
    v26 = sub_1000124F8((uint64_t)&v36, &qword_10015B6A0);
    v27 = static os_log_type_t.error.getter(v26);
    v28 = sub_10002687C();
    v29 = (void *)static OS_os_log.default.getter(v28);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v29, "Could not getBuildVersion since no side-effects found", 53, 2, _swiftEmptyArrayStorage);

    return 0;
  }
  sub_100004E2C(&v36, (uint64_t)v39);
  URL.init(fileURLWithPath:isDirectory:)(a1, a2, 1);
  v13 = (uint64_t *)sub_10009014C();
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  URL.appendingPathComponent(_:)(v14, v15);
  swift_bridgeObjectRelease(v15);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8);
  v17 = v16(v9, v5);
  v18 = URL.path.getter(v17);
  v20 = v19;
  v16(v12, v5);
  v35 = 0;
  v21 = v40;
  v22 = v41;
  sub_100004DE4(v39, v40);
  sub_10010731C(v21, v22);
  v23 = v37;
  v24 = v38;
  sub_100004DE4(&v36, v37);
  LOBYTE(v21) = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v24 + 136))(v18, v20, &v35, v23, v24);
  sub_100005D08(&v36);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease(v20);
    sub_100005D08(v39);
    return 0;
  }
  v25 = sub_100005C88(&qword_10015C670);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(v25 + 152))(v18, v20, v39);
  v31 = swift_bridgeObjectRelease(v20);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v30 + 128))(&v36, v31);
  swift_release(v30);
  v32 = v36;
  sub_100005D08(v39);
  return v32;
}

uint64_t sub_10010A390(uint64_t a1, uint64_t a2)
{
  return sub_10010A488(a1, a2, "Cannot getXcodeDevDir on MinimalDeveloperKitClient", 50);
}

uint64_t sub_10010A3A0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  void *v3;

  v1 = static os_log_type_t.info.getter(a1);
  v2 = sub_10002687C();
  v3 = (void *)static OS_os_log.default.getter(v2);
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, v3, "Cannot getMacOSSDKPath on MinimalDeveloperKitClient", 51, 2, _swiftEmptyArrayStorage);

  return 0;
}

uint64_t sub_10010A40C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  void *v3;

  v1 = static os_log_type_t.info.getter(a1);
  v2 = sub_10002687C();
  v3 = (void *)static OS_os_log.default.getter(v2);
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, v3, "Cannot getMacOSKDKPath on MinimalDeveloperKitClient", 51, 2, _swiftEmptyArrayStorage);

  return 0;
}

uint64_t sub_10010A478(uint64_t a1, uint64_t a2)
{
  return sub_10010A488(a1, a2, "Cannot getValidKextRepoPath on MinimalDeveloperKitClient", 56);
}

uint64_t sub_10010A488(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  void *v8;

  v6 = static os_log_type_t.info.getter(a1);
  v7 = sub_10002687C();
  v8 = (void *)static OS_os_log.default.getter(v7);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v8, a3, a4, 2, _swiftEmptyArrayStorage);

  return 0;
}

uint64_t sub_10010A500(uint64_t a1, uint64_t a2)
{
  return sub_10010A7CC(a1, a2, 0xD000000000000015, 0x800000010012D7E0);
}

uint64_t sub_10010A51C(uint64_t a1, uint64_t a2)
{
  return sub_10010A7CC(a1, a2, 0xD00000000000001BLL, 0x800000010012D800);
}

uint64_t sub_10010A538(uint64_t a1)
{
  os_log_type_t v1;
  unint64_t v2;
  NSObject *v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v1 = static os_log_type_t.error.getter(a1);
  v2 = sub_10002687C();
  v3 = static OS_os_log.default.getter(v2);
  if (os_log_type_enabled(v3, v1))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v8 = v5;
    *(_DWORD *)v4 = 136315138;
    v7 = sub_1000055A0(0xD000000000000025, 0x800000010012D820, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v1, "Unexpected call to %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  return 0;
}

uint64_t sub_10010A674(uint64_t a1)
{
  os_log_type_t v1;
  unint64_t v2;
  NSObject *v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v1 = static os_log_type_t.error.getter(a1);
  v2 = sub_10002687C();
  v3 = static OS_os_log.default.getter(v2);
  if (os_log_type_enabled(v3, v1))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v8 = v5;
    *(_DWORD *)v4 = 136315138;
    v7 = sub_1000055A0(0xD00000000000004BLL, 0x800000010012D850, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v1, "Unexpected call to %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  return 0;
}

uint64_t sub_10010A7B0(uint64_t a1, uint64_t a2)
{
  return sub_10010A7CC(a1, a2, 0xD00000000000001BLL, 0x800000010012D8A0);
}

uint64_t sub_10010A7CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  os_log_type_t v6;
  unint64_t v7;
  NSObject *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v6 = static os_log_type_t.error.getter(a1);
  v7 = sub_10002687C();
  v8 = static OS_os_log.default.getter(v7);
  if (os_log_type_enabled(v8, v6))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v13 = v10;
    *(_DWORD *)v9 = 136315138;
    v12 = sub_1000055A0(a3, a4, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v6, "Unexpected call to %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  return 0;
}

uint64_t sub_10010A908(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_10015C678);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_10010A974(uint64_t a1)
{
  return sub_10010A988(a1, type metadata accessor for MinimalDeveloperKitClient, (uint64_t)&off_100150D98);
}

uint64_t sub_10010A988(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v5 = v3;
  v10[3] = a2();
  v10[4] = a3;
  v10[0] = v3;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  swift_retain(v5);
  sub_10010A908(v10, v7, v8);
  sub_100005C44(a1, (uint64_t)v10);
  return (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v5 + 96))(v10);
}

uint64_t sub_10010AA20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015C678);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t sub_10010AA6C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000013 && a2 == 0x800000010012D950)
  {
    swift_bridgeObjectRelease(0x800000010012D950);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010012D950, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t type metadata accessor for RealDeveloperKitClient()
{
  return objc_opt_self(_TtC10driverkitd22RealDeveloperKitClient);
}

uint64_t type metadata accessor for MinimalDeveloperKitClient()
{
  return objc_opt_self(_TtC10driverkitd25MinimalDeveloperKitClient);
}

ValueMetadata *type metadata accessor for BuildVersionPlist()
{
  return &type metadata for BuildVersionPlist;
}

uint64_t type metadata accessor for NullDeveloperKitClient()
{
  return objc_opt_self(_TtC10driverkitd22NullDeveloperKitClient);
}

uint64_t storeEnumTagSinglePayload for BuildVersionPlist.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10010ABA0 + 4 * asc_10011C090[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10010ABC0 + 4 * byte_10011C095[v4]))();
}

_BYTE *sub_10010ABA0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10010ABC0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10010ABC8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10010ABD0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10010ABD8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10010ABE0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BuildVersionPlist.CodingKeys()
{
  return &type metadata for BuildVersionPlist.CodingKeys;
}

unint64_t sub_10010AC00()
{
  unint64_t result;

  result = qword_1001750E0[0];
  if (!qword_1001750E0[0])
  {
    result = swift_getWitnessTable(&unk_10011C254, &type metadata for BuildVersionPlist.CodingKeys);
    atomic_store(result, qword_1001750E0);
  }
  return result;
}

unint64_t sub_10010AC48()
{
  unint64_t result;

  result = qword_1001751F0;
  if (!qword_1001751F0)
  {
    result = swift_getWitnessTable(&unk_10011C1C4, &type metadata for BuildVersionPlist.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001751F0);
  }
  return result;
}

unint64_t sub_10010AC90()
{
  unint64_t result;

  result = qword_1001751F8[0];
  if (!qword_1001751F8[0])
  {
    result = swift_getWitnessTable(&unk_10011C1EC, &type metadata for BuildVersionPlist.CodingKeys);
    atomic_store(result, qword_1001751F8);
  }
  return result;
}

uint64_t sub_10010ACD4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  NSString *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _BYTE v28[40];
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = (_QWORD *)v1[2];
  v35 = v1[3];
  v5 = v1[5];
  v27 = v1[4];
  v6 = v4[3];
  v7 = v4[4];
  sub_100004DE4(v4, v6);
  sub_10010731C(v6, v7);
  v8 = v30;
  v9 = v31;
  sub_100004DE4(v29, v30);
  v10 = sub_100005C88(&qword_10015A848);
  inited = swift_initStackObject(v10, v28);
  *(_OWORD *)(inited + 16) = xmmword_10010F050;
  *(_QWORD *)(inited + 32) = NSURLIsDirectoryKey;
  v12 = NSURLIsDirectoryKey;
  v13 = sub_10008EE4C(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey();
  swift_arrayDestroy(inited + 32, 1, v14);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(v9 + 192))(v32, a1, v13, v8, v9);
  swift_bridgeObjectRelease(v13);
  sub_100005D08(v29);
  if (!v2)
  {
    v15 = v35;
    v16 = v5;
    v17 = v33;
    v18 = v34;
    sub_100004DE4(v32, v33);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
    if ((v19 & 1) != 0
      && (v20 = URL.path.getter(v19),
          v22 = v21,
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 112))(v20),
          v25 = v24,
          swift_bridgeObjectRelease(v22),
          v25))
    {
      if (v23 == v27 && v25 == v16)
        LOBYTE(v13) = 1;
      else
        LOBYTE(v13) = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v16, 0);
      swift_bridgeObjectRelease(v25);
    }
    else
    {
      LOBYTE(v13) = 0;
    }
    sub_100005D08(v32);
  }
  return v13 & 1;
}

uint64_t sub_10010AED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[3] = a2;
  v10[4] = a3;
  v6 = sub_100005BE0(v10);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v6, v3, a2);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_100005C1C(a1, v7);
  return sub_10010AF4C(v10, v7, v8);
}

uint64_t sub_10010AF4C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[40];

  sub_100005C44((uint64_t)a1, (uint64_t)v8);
  v6 = sub_100005C88(&qword_10015B118);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(v8, v6, v6, a2);
  return sub_100005D08(a1);
}

uint64_t sub_10010AFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005C88(&qword_10015B118);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(v4, v4, a1);
}

uint64_t sub_10010B004()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 64, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 64));
}

uint64_t sub_10010B038(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 64, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = a1;
  return swift_release(v3);
}

uint64_t sub_10010B07C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  *(_QWORD *)(swift_allocObject(v0, 72, 7) + 64) = 0;
  v1 = (uint64_t *)DriverKitDaemonXPC.NotificationType.approvalsChanged.unsafeMutableAddressor();
  v2 = *v1;
  v3 = (void *)v1[1];
  swift_bridgeObjectRetain_n(v3, 2);
  return sub_100077A80(v2, v3, v2, (uint64_t)v3);
}

void sub_10010B0DC()
{
  _swift_stdlib_reportUnimplementedInitializer("driverkitd.RealApprovalsXPCPublisher", 36, "init(eventName:queueLabel:)", 27, 0);
  __break(1u);
}

uint64_t sub_10010B108()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 64));
}

uint64_t sub_10010B110()
{
  uint64_t v0;

  v0 = sub_100078160();
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_10010B144(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 216);
  v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t type metadata accessor for RealApprovalsXPCPublisher()
{
  return objc_opt_self(_TtC10driverkitd25RealApprovalsXPCPublisher);
}

uint64_t DERImg4DecodeTagCompare(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unsigned int v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 < 4)
    return 0xFFFFFFFFLL;
  if (v2 != 4)
    return 1;
  v5 = 0;
  if (DERParseInteger((char **)a1, &v5))
    return 4294967294;
  if (v5 < a2)
    return 0xFFFFFFFFLL;
  return v5 > a2;
}

uint64_t DERImg4Decode(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  result = 6;
  if (a1)
  {
    if (a2)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      result = DERDecodeItem((uint64_t)a1, &v6);
      if (!(_DWORD)result)
      {
        if (v6 == 0x2000000000000010)
        {
          v5 = a1[1];
          if (__CFADD__(*a1, v5) || __CFADD__(v7, v8))
          {
            __break(0x5513u);
          }
          else if (*a1 + v5 == v7 + v8)
          {
            result = DERParseSequenceContentToObject(&v7, 4u, (uint64_t)&DERImg4ItemSpecs, a2, 0x40uLL, 0);
            if (!(_DWORD)result)
              return 2 * (DERImg4DecodeTagCompare(a2, 0x494D4734u) != 0);
          }
          else
          {
            return 7;
          }
        }
        else
        {
          return 2;
        }
      }
    }
  }
  return result;
}

uint64_t DERImg4DecodePayloadCompression(unint64_t *a1, char **a2)
{
  uint64_t result;
  unsigned int v5;

  v5 = 2;
  result = 6;
  if (a1)
  {
    if (a2)
    {
      result = DERParseSequenceContentToObject(a1, 2u, (uint64_t)&DERImg4CompressionItemSpecs, (unint64_t)a2, 0x20uLL, 0);
      if (!(_DWORD)result)
      {
        result = DERParseInteger(a2, &v5);
        if (!(_DWORD)result)
        {
          if (v5 <= 1)
            return 0;
          else
            return 6;
        }
      }
    }
  }
  return result;
}

uint64_t DERImg4DecodePayloadWithProperties(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  result = 6;
  if (a1)
  {
    if (a2)
    {
      result = DERParseSequenceToObject(a1, 7u, (uint64_t)&DERImg4PayloadWithPropertiesItemSpecs, a2, 0xA0uLL, 0);
      if (!(_DWORD)result)
      {
        if (DERImg4DecodeTagCompare(a2, 0x494D3450u))
        {
          return 2;
        }
        else if (!*(_QWORD *)(a2 + 80)
               || (v7 = 0u,
                   v8 = 0u,
                   result = DERImg4DecodePayloadCompression((unint64_t *)(a2 + 80), (char **)&v7),
                   !(_DWORD)result))
        {
          v6 = *(_QWORD *)(a2 + 96);
          v5 = a2 + 96;
          if (!v6)
            return 0;
          v7 = 0u;
          v8 = 0u;
          result = DERImg4DecodePayloadProperties(v5, (unint64_t)&v7);
          if (!(_DWORD)result)
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t DERImg4DecodePayloadProperties(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2)
      return 6;
    if (*(_QWORD *)result && *(_QWORD *)(result + 8))
    {
      result = DERParseSequenceToObject(result, 2u, (uint64_t)&DERImg4PayloadPropertiesItemSpecs, a2, 0x20uLL, 0);
      if ((_DWORD)result)
        return result;
      if (DERImg4DecodeTagCompare(a2, 0x50415950u))
        return 2;
    }
    return 0;
  }
  return result;
}

uint64_t DERImg4DecodePayload(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  result = 6;
  if (a1 && a2)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    result = DERImg4DecodePayloadWithProperties(a1, (unint64_t)&v11);
    if ((_DWORD)result)
    {
      result = DERParseSequenceToObject(a1, 6u, (uint64_t)&DERImg4PayloadItemSpecs, a2, 0x90uLL, 0);
      if (!(_DWORD)result)
      {
        if (DERImg4DecodeTagCompare(a2, 0x494D3450u))
        {
          return 2;
        }
        else
        {
          v6 = *(_QWORD *)(a2 + 80);
          v5 = (unint64_t *)(a2 + 80);
          if (!v6)
            return 0;
          memset(v10, 0, sizeof(v10));
          result = DERImg4DecodePayloadCompression(v5, (char **)v10);
          if (!(_DWORD)result)
            return 0;
        }
      }
    }
    else
    {
      v7 = v12;
      *(_OWORD *)a2 = v11;
      *(_OWORD *)(a2 + 16) = v7;
      v8 = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *(_OWORD *)(a2 + 48) = v8;
      v9 = v16;
      *(_OWORD *)(a2 + 64) = v15;
      *(_OWORD *)(a2 + 80) = v9;
    }
  }
  return result;
}

uint64_t DERImg4DecodeManifest(_QWORD *a1, unint64_t a2)
{
  return sub_10010B5C0(a1, 5uLL, (uint64_t)&DERImg4ManifestItemSpecs, a2, 0x494D344Du);
}

uint64_t sub_10010B5C0(_QWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t result;
  unsigned int v9;

  result = 6;
  if (a1 && a4)
  {
    if (!*a1 || !a1[1])
      return 0;
    if (a2 >= 0x10000)
    {
      __break(0x5507u);
      return result;
    }
    result = DERParseSequenceToObject((uint64_t)a1, (unsigned __int16)a2, a3, a4, 0xC0uLL, 0);
    if (!(_DWORD)result)
    {
      if (DERImg4DecodeTagCompare(a4, a5))
        return 2;
      v9 = 0;
      result = DERParseInteger((char **)(a4 + 16), &v9);
      if ((_DWORD)result)
        return result;
      if (v9 > 2)
        return 2;
      return 0;
    }
  }
  return result;
}

uint64_t DERImg4DecodeRestoreInfo(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2)
      return 6;
    if (*(_QWORD *)result && *(_QWORD *)(result + 8))
    {
      result = DERParseSequenceToObject(result, 2u, (uint64_t)&DERImg4RestoreInfoItemSpecs, a2, 0x20uLL, 0);
      if ((_DWORD)result)
        return result;
      if (DERImg4DecodeTagCompare(a2, 0x494D3452u))
        return 2;
    }
    return 0;
  }
  return result;
}

double Img4DecodeInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD v9[2];

  if (a1)
  {
    if (a3)
    {
      v9[0] = a1;
      v9[1] = a2;
      v7 = 0u;
      v8 = 0u;
      v5 = 0u;
      v6 = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      *(_OWORD *)(a3 + 128) = 0u;
      *(_OWORD *)(a3 + 144) = 0u;
      *(_OWORD *)(a3 + 160) = 0u;
      *(_OWORD *)(a3 + 176) = 0u;
      *(_OWORD *)(a3 + 192) = 0u;
      *(_OWORD *)(a3 + 208) = 0u;
      *(_OWORD *)(a3 + 224) = 0u;
      *(_OWORD *)(a3 + 240) = 0u;
      *(_OWORD *)(a3 + 256) = 0u;
      *(_OWORD *)(a3 + 272) = 0u;
      *(_OWORD *)(a3 + 288) = 0u;
      *(_OWORD *)(a3 + 304) = 0u;
      *(_OWORD *)(a3 + 320) = 0u;
      *(_OWORD *)(a3 + 336) = 0u;
      *(_OWORD *)(a3 + 352) = 0u;
      *(_OWORD *)(a3 + 368) = 0u;
      *(_OWORD *)(a3 + 384) = 0u;
      *(_OWORD *)(a3 + 400) = 0u;
      *(_OWORD *)(a3 + 416) = 0u;
      *(_OWORD *)(a3 + 432) = 0u;
      *(_QWORD *)(a3 + 448) = 0;
      if (!DERImg4Decode(v9, (unint64_t)&v5)
        && !DERImg4DecodePayload((uint64_t)&v6, a3 + 88)
        && !DERImg4DecodeManifest(&v7, a3 + 232)
        && !DERImg4DecodeRestoreInfo((uint64_t)&v8, a3 + 424))
      {
        *(_OWORD *)(a3 + 8) = v6;
        result = *(double *)&v7;
        *(_OWORD *)(a3 + 24) = v7;
      }
    }
  }
  return result;
}

double Img4DecodeInitPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  __int128 v5;

  if (a1 && a3)
  {
    *(_QWORD *)&v5 = a1;
    *((_QWORD *)&v5 + 1) = a2;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 208) = 0u;
    *(_OWORD *)(a3 + 224) = 0u;
    *(_OWORD *)(a3 + 240) = 0u;
    *(_OWORD *)(a3 + 256) = 0u;
    *(_OWORD *)(a3 + 272) = 0u;
    *(_OWORD *)(a3 + 288) = 0u;
    *(_OWORD *)(a3 + 304) = 0u;
    *(_OWORD *)(a3 + 320) = 0u;
    *(_OWORD *)(a3 + 336) = 0u;
    *(_OWORD *)(a3 + 352) = 0u;
    *(_OWORD *)(a3 + 368) = 0u;
    *(_OWORD *)(a3 + 384) = 0u;
    *(_OWORD *)(a3 + 400) = 0u;
    *(_OWORD *)(a3 + 416) = 0u;
    *(_OWORD *)(a3 + 432) = 0u;
    *(_QWORD *)(a3 + 448) = 0;
    if (!DERImg4DecodePayload((uint64_t)&v5, a3 + 88))
    {
      result = *(double *)&v5;
      *(_OWORD *)(a3 + 8) = v5;
    }
  }
  return result;
}

uint64_t DERDecodeItem(uint64_t a1, unint64_t *a2)
{
  return DERDecodeItemPartialBufferGetLength(a1, a2, 0);
}

uint64_t DERDecodeItemPartialBufferGetLength(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < 2)
    return 3;
  v4 = *(_BYTE **)result;
  if (*(_QWORD *)result == -1)
    goto LABEL_68;
  v5 = &v4[v3];
  v6 = v4 + 1;
  v7 = v3 - 1;
  v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4)
        goto LABEL_69;
      v14 = v12 + 1;
      v15 = *v12;
      v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15)
            v17 = *v12;
          else
            v17 = v7 - 1;
          v10 = v5 >= v14;
          v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3)
              return 0;
LABEL_34:
            result = 0;
            *a3 = v15;
            return result;
          }
LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }
        return 3;
      }
      v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8)
        return 3;
      if ((v15 & 0x7F) == 0 || v16 < v19)
        return 3;
      if (v14 >= v5 || v14 < v4)
        goto LABEL_69;
      if (!*v14)
        return 3;
      v15 = 0;
      v21 = (v19 - 1);
      v22 = v7 - v21 - 2;
      v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1)
      {
        if (v14 >= v5)
          goto LABEL_69;
        v10 = v16-- != 0;
        if (!v10)
          goto LABEL_70;
        v24 = *v14++;
        v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (a3)
            v25 = 0;
          else
            v25 = v15 > v22;
          v26 = v25;
          result = 3;
          if (v15 < 0x80 || (v26 & 1) != 0)
            return result;
          if (v15 >= v22)
            v27 = v22;
          else
            v27 = v15;
          v10 = (unint64_t)v5 >= v23;
          v28 = &v5[-v23];
          if (!v10 || (unint64_t)v4 > v23 || v27 > (unint64_t)v28)
            goto LABEL_69;
          a2[1] = v23;
          a2[2] = v27;
          if (a3)
            goto LABEL_34;
          return 0;
        }
      }
    }
LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }
  v9 = *v6;
  v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10)
    return 3;
  v8 = 0;
  result = 3;
  while (v7 >= 2)
  {
    v11 = v8;
    if (v8 >> 57)
      break;
    if (v6 == (unsigned __int8 *)-1)
      goto LABEL_68;
    if (v6 >= v5 || v6 < v4)
      goto LABEL_69;
    v12 = (char *)(v6 + 1);
    --v7;
    v13 = *v6;
    v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54)
        return 3;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DERParseInteger(char **a1, _DWORD *a2)
{
  uint64_t result;
  unint64_t v4;

  v4 = 0xAAAAAAAAAAAAAAAALL;
  result = DERParseInteger64(a1, &v4);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v4))
    {
      return 7;
    }
    else
    {
      result = 0;
      *a2 = v4;
    }
  }
  return result;
}

uint64_t DERParseInteger64(char **a1, unint64_t *a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t result;
  unint64_t v5;
  unsigned int v6;

  v2 = (unint64_t)a1[1];
  if (!v2)
    return 3;
  v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0)
    return 3;
  if (**a1)
  {
    if (v2 > 8)
      return 7;
    goto LABEL_10;
  }
  if (v2 >= 2)
  {
    if (((char)v3[1] & 0x80000000) == 0)
      return 3;
    if (v2 > 9)
      return 7;
  }
LABEL_10:
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 = v6 | (v5 << 8);
    --v2;
  }
  while (v2);
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t DERDecodeSeqNext(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 >= v3)
    return 1;
  v10[0] = *a1;
  v10[1] = v3 - v2;
  result = DERDecodeItemPartialBufferGetLength((uint64_t)v10, a2, 0);
  if (!(_DWORD)result)
  {
    v8 = a2[1];
    v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        result = 0;
        *a1 = v9;
        return result;
      }
      __break(0x5519u);
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t DERParseSequenceToObject(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t result;
  unint64_t v12[3];

  memset(v12, 170, sizeof(v12));
  result = DERDecodeItemPartialBufferGetLength(a1, v12, 0);
  if (!(_DWORD)result)
  {
    if (v12[0] == 0x2000000000000010)
      return DERParseSequenceContentToObject(&v12[1], a2, a3, a4, a5, a6);
    else
      return 2;
  }
  return result;
}

uint64_t DERParseSequenceContentToObject(unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  unsigned __int16 v17;
  __int16 v18;
  unint64_t v19;
  char *v21;
  uint64_t v23;
  unint64_t v24;
  __int16 *v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  char *v29;
  unint64_t v31[3];
  unint64_t v32;
  unint64_t v33;

  v32 = 0;
  if (a6)
  {
    if (a6 > a5)
      goto LABEL_59;
    bzero((void *)a4, a6);
  }
  v10 = *a1;
  v11 = a1[1];
  if (__CFADD__(*a1, v11))
    goto LABEL_58;
  v12 = v10 + v11;
  if (v10 > v12)
LABEL_59:
    __break(0x5519u);
  v32 = *a1;
  v33 = v12;
  if (a2)
  {
    v13 = 0;
    v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      v15 = v32;
      v14 = v33;
      result = DERDecodeSeqNext(&v32, v31);
      if ((_DWORD)result)
        break;
      if (a2 <= v13)
        return 2;
      while (1)
      {
        if (24 * (__int16)v13 > (unint64_t)~a3)
          goto LABEL_58;
        v17 = v13;
        v18 = *(_WORD *)(a3 + 24 * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(_QWORD *)(a3 + 24 * v13 + 8))
          break;
        result = 2;
        if ((v18 & 1) != 0)
        {
          ++v13;
          if (a2 > (unsigned __int16)(v17 + 1))
            continue;
        }
        return result;
      }
      if ((v18 & 4) == 0)
      {
        v19 = *(_QWORD *)(a3 + 24 * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5)
          return 7;
        if (v19 > ~a4)
          goto LABEL_58;
        v21 = (char *)(a4 + v19);
        if (v21 >= v29 || (unint64_t)v21 < a4)
          goto LABEL_59;
        *(_OWORD *)v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((_QWORD *)v21 + 1) <= v14 - v15)
            {
              *(_QWORD *)v21 = v15;
              return 3;
            }
            goto LABEL_59;
          }
          if (v21 + 16 > v29)
            goto LABEL_59;
          v23 = *((_QWORD *)v21 + 1);
          v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }
          if (v14 < v15 || v24 > v14 - v15)
            goto LABEL_59;
          *(_QWORD *)v21 = v15;
          *((_QWORD *)v21 + 1) = v24;
        }
      }
      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            v10 = v31[1] + v31[2];
            v12 = *a1 + v28;
            goto LABEL_47;
          }
        }
LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }
      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        v10 = v32;
        v12 = v33;
        goto LABEL_47;
      }
    }
    if ((_DWORD)result == 1)
    {
      if (a2 <= v13)
      {
        return 0;
      }
      else
      {
        v25 = (__int16 *)(a3 + 24 * v13 + 16);
        v26 = a2 - (unint64_t)v13;
        result = 0;
        while (1)
        {
          v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0)
            break;
          if (!--v26)
            return result;
        }
        return 5;
      }
    }
  }
  else
  {
LABEL_47:
    if (v10 == v12)
      return 0;
    else
      return 3;
  }
  return result;
}

_DWORD *DEREncoderCreate(int a1)
{
  _DWORD *result;

  result = calloc(1uLL, 0x10uLL);
  if (result)
    result[3] = a1;
  return result;
}

void DEREncoderDestroy(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        sub_10010C8A8((uint64_t)v2);
        v2 = v3;
      }
      while (v3);
    }
    free(a1);
  }
}

uint64_t DEREncoderAddData(uint64_t *a1, unsigned int a2, unsigned int a3, const void *a4, unsigned int a5, int a6)
{
  char *v7;

  v7 = sub_10010C1B4(a2, a3, a4, a5, a6, 3);
  return sub_10010C044(a1, (uint64_t)v7);
}

uint64_t sub_10010C044(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = a2;
  if (!a1)
  {
    v22 = 1;
    if (!a2)
      return v22;
    goto LABEL_30;
  }
  if (!a2)
    return 2;
  v4 = *((_DWORD *)a1 + 2);
  v5 = a2;
  do
  {
    v6 = *(_DWORD *)(v5 + 20);
    v7 = __CFADD__(v4, v6);
    v8 = v4 + v6;
    if (v7 || (v9 = *(_DWORD *)(v5 + 24), v4 = v8 + v9, __CFADD__(v8, v9)))
    {
      v22 = 2;
      do
      {
LABEL_30:
        v23 = *(_QWORD *)v2;
        sub_10010C8A8(v2);
        v2 = v23;
      }
      while (v23);
      return v22;
    }
    v5 = *(_QWORD *)v5;
  }
  while (v5);
  v10 = (uint64_t *)*a1;
  v11 = a1;
  if (!*a1)
    goto LABEL_26;
  v12 = *((_DWORD *)a1 + 3);
  v11 = a1;
  while (2)
  {
    v13 = v11;
    v11 = v10;
    if (!v12)
      goto LABEL_20;
    v14 = bswap64(*(_QWORD *)(v2 + 28));
    v15 = bswap64(*(uint64_t *)((char *)v11 + 28));
    if (v14 != v15 || (v14 = bswap64(*(_QWORD *)(v2 + 36)), v15 = bswap64(*(uint64_t *)((char *)v11 + 36)), v14 != v15))
    {
      if (v14 < v15)
        v16 = -1;
      else
        v16 = 1;
LABEL_19:
      if (v16 < 0)
        break;
      goto LABEL_20;
    }
    v17 = *(_DWORD *)(v2 + 24);
    v18 = *((_DWORD *)v11 + 6);
    if (v17 >= v18)
      v19 = v18;
    else
      v19 = v17;
    v16 = memcmp(*(const void **)(v2 + 8), (const void *)v11[1], v19);
    if (v16)
      goto LABEL_19;
    if (v17 >= v18)
    {
LABEL_20:
      v10 = (uint64_t *)*v11;
      if (!*v11)
        goto LABEL_26;
      continue;
    }
    break;
  }
  v20 = (_QWORD *)v2;
  do
  {
    v21 = v20;
    v20 = (_QWORD *)*v20;
  }
  while (v20);
  *v21 = v11;
  v11 = v13;
LABEL_26:
  v22 = 0;
  *v11 = v2;
  *((_DWORD *)a1 + 2) = v4;
  return v22;
}

char *sub_10010C1B4(unsigned int a1, unsigned int a2, const void *a3, unsigned int a4, int a5, int a6)
{
  char *v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  char *v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v28;

  if (!a3 && a4 && a6)
    return 0;
  v12 = (char *)calloc(1uLL, 0x38uLL);
  v13 = v12;
  if (!v12)
    return v13;
  *((_DWORD *)v12 + 4) = 1;
  v14 = v12 + 28;
  if (a1 == 259)
  {
    v15 = 0;
    goto LABEL_7;
  }
  if (a1 > 3)
    goto LABEL_40;
  if (a2 > 0x1E)
  {
    v17 = 0;
    v28 = 0;
    do
    {
      *((_BYTE *)&v28 + v17++) = a2 & 0x7F;
      v18 = a2 > 0x7F;
      a2 >>= 7;
    }
    while (v18);
    v16 = (_DWORD)v13 + 28;
    if ((v17 & 0xFFFFFFF0) == 0)
    {
      v13[28] = ((_BYTE)a1 << 6) | (32 * (a5 != 0)) | 0x1F;
      v19 = v13 + 29;
      if (v17 >= 2)
      {
        v20 = v17 - 1;
        do
          *v19++ = *((_BYTE *)&v28 + v20--) | 0x80;
        while ((_DWORD)v20);
      }
      *v19 = v28;
      v16 = (_DWORD)v19 + 1;
    }
  }
  else
  {
    v13[28] = ((_BYTE)a1 << 6) | (32 * (a5 != 0)) | a2;
    v16 = (_DWORD)v13 + 29;
  }
  v21 = v16 - (_DWORD)v14;
  if (!v21)
    goto LABEL_40;
  v22 = &v14[v21];
  if (a4 > 0x7F)
  {
    v24 = 0;
    v28 = 0;
    v25 = a4;
    do
    {
      *((_BYTE *)&v28 + v24++) = v25;
      v18 = v25 > 0xFF;
      v25 >>= 8;
    }
    while (v18);
    if (16 - v21 <= v24)
    {
      LODWORD(v23) = (_DWORD)v14 + v21;
    }
    else
    {
      *v22 = v24 | 0x80;
      v23 = v22 + 1;
      if ((_DWORD)v24)
      {
        do
          *v23++ = *((_BYTE *)&v28 + --v24);
        while (v24);
      }
    }
  }
  else
  {
    LODWORD(v23) = (_DWORD)v14 + v21;
    if (v21 != 16)
    {
      *v22 = a4;
      LODWORD(v23) = (_DWORD)v22 + 1;
    }
  }
  v26 = (_DWORD)v23 - (_DWORD)v22;
  if ((_DWORD)v23 == (_DWORD)v22)
  {
LABEL_40:
    free(v13);
    return 0;
  }
  v14 = &v22[v26];
  v15 = v21 + v26;
LABEL_7:
  *((_DWORD *)v13 + 5) = v15;
  switch(a6)
  {
    case 0:
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 6) = 0;
      *((_DWORD *)v13 + 6) = 0;
      return v13;
    case 1:
      *((_QWORD *)v13 + 1) = a3;
      *((_QWORD *)v13 + 6) = 0;
      goto LABEL_25;
    case 2:
      *((_QWORD *)v13 + 1) = a3;
      *((_QWORD *)v13 + 6) = v13;
LABEL_25:
      *((_DWORD *)v13 + 6) = a4;
      return v13;
    case 3:
      if (v13 + 56 - v14 >= a4)
      {
        *((_QWORD *)v13 + 1) = v14;
        *((_DWORD *)v13 + 6) = a4;
      }
      else
      {
        v14 = (char *)malloc(a4);
        *((_QWORD *)v13 + 1) = v14;
        *((_QWORD *)v13 + 6) = v13;
        *((_DWORD *)v13 + 6) = a4;
        if (!v14)
          goto LABEL_40;
      }
      memcpy(v14, a3, a4);
      break;
    default:
      return v13;
  }
  return v13;
}

uint64_t DEREncoderAddDataNoCopy(uint64_t *a1, unsigned int a2, unsigned int a3, const void *a4, unsigned int a5, int a6)
{
  char *v7;

  v7 = sub_10010C1B4(a2, a3, a4, a5, a6, 1);
  return sub_10010C044(a1, (uint64_t)v7);
}

uint64_t DEREncoderAddUInt32(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  unsigned int v10;
  char v11;
  unsigned int v12;

  v5 = 0;
  v10 = bswap32(a4);
  v11 = 0;
  v12 = v10;
  while (!*((_BYTE *)&v10 + v5))
  {
    if (++v5 == 4)
    {
      v6 = 0;
      goto LABEL_6;
    }
  }
  v6 = ((unint64_t)*((unsigned __int8 *)&v10 + v5) >> 7) - v5 + 4;
LABEL_6:
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  v8 = sub_10010C1B4(a2, a3, &v11 - v7 + 5, v7, 0, 3);
  return sub_10010C044(a1, (uint64_t)v8);
}

uint64_t DEREncoderCreateEncodedBuffer(uint64_t **a1, _QWORD *a2, unsigned int *a3)
{
  unsigned int v6;
  char *v7;
  void *v8;
  uint64_t **v9;
  char *v10;
  char *v11;
  uint64_t result;

  if (!a1)
    return 1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = (char *)malloc(v6);
  if (!v7)
    return 2;
  v8 = v7;
  v9 = (uint64_t **)*a1;
  if (*a1)
  {
    v10 = v7;
    do
    {
      memcpy(v10, (char *)v9 + 28, *((unsigned int *)v9 + 5));
      v11 = &v10[*((unsigned int *)v9 + 5)];
      memcpy(v11, v9[1], *((unsigned int *)v9 + 6));
      v10 = &v11[*((unsigned int *)v9 + 6)];
      v9 = (uint64_t **)*v9;
    }
    while (v9);
  }
  if (a3)
    *a3 = v6;
  if (a2)
  {
    result = 0;
    *a2 = v8;
  }
  else
  {
    free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_10010C62C(uint64_t **a1, uint64_t *a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v9;
  char *v10;
  void *v12;
  unsigned int v13;

  v13 = 0;
  v12 = 0;
  v9 = DEREncoderCreateEncodedBuffer(a1, &v12, &v13);
  if (!(_DWORD)v9)
  {
    v9 = 2;
    v10 = sub_10010C1B4(a3, a4, v12, v13, a5, 2);
    if (v10)
    {
      v12 = 0;
      v9 = sub_10010C044(a2, (uint64_t)v10);
    }
  }
  if (v12)
    free(v12);
  return v9;
}

uint64_t DEREncoderAddDataFromEncoderNoCopy(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t result;
  char *v8;
  char *v9;
  uint64_t *v10;
  _QWORD *i;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;

  result = 1;
  if (!a1 || !a2)
    return result;
  if (*(_DWORD *)(a2 + 12))
    return sub_10010C62C((uint64_t **)a1, (uint64_t *)a2, a3, a4, a5);
  v8 = sub_10010C1B4(a3, a4, 0, *(_DWORD *)(a1 + 8), 1, 0);
  if (!v8)
    return 2;
  v9 = v8;
  v10 = *(uint64_t **)a1;
  v21 = 0;
  for (i = &v21; ; i = v12)
  {
    if (!v10)
    {
      v19 = v21;
      *(_QWORD *)v9 = v21;
      if (!v19)
        goto LABEL_20;
      return sub_10010C044((uint64_t *)a2, (uint64_t)v9);
    }
    v12 = malloc(0x38uLL);
    if (!v12)
      break;
    v13 = v10[6];
    v15 = *((_OWORD *)v10 + 1);
    v14 = *((_OWORD *)v10 + 2);
    *(_OWORD *)v12 = *(_OWORD *)v10;
    *((_OWORD *)v12 + 1) = v15;
    v12[6] = v13;
    *((_OWORD *)v12 + 2) = v14;
    *v12 = 0;
    *((_DWORD *)v12 + 4) = 1;
    v16 = v10[1];
    if ((unint64_t)v10 + 28 > v16 || v16 >= (unint64_t)(v10 + 7))
    {
      if (v13)
        ++*(_DWORD *)(v13 + 16);
    }
    else
    {
      v12[1] = (char *)v12 + v16 - (_QWORD)v10;
    }
    *i = v12;
    v10 = (uint64_t *)*v10;
  }
  v17 = v21;
  if (v21)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      sub_10010C8A8((uint64_t)v17);
      v17 = v18;
    }
    while (v18);
  }
  *(_QWORD *)v9 = 0;
LABEL_20:
  if (!*(_QWORD *)a1)
    return sub_10010C044((uint64_t *)a2, (uint64_t)v9);
  do
  {
    v20 = *(char **)v9;
    sub_10010C8A8((uint64_t)v9);
    v9 = v20;
  }
  while (v20);
  return 2;
}

void sub_10010C8A8(uint64_t a1)
{
  int v1;
  void *v3;
  uint64_t v4;

  v1 = *(_DWORD *)(a1 + 16) - 1;
  *(_DWORD *)(a1 + 16) = v1;
  if (!v1)
  {
    v3 = *(void **)(a1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 48);
      if (((unint64_t)v3 >= a1 + 56 || a1 + 28 > (unint64_t)v3) && v4 != 0)
      {
        if (v4 == a1)
          free(v3);
        else
          sub_10010C8A8(*(_QWORD *)(a1 + 48));
      }
    }
    free((void *)a1);
  }
}

uint64_t Img4EncodeCreatePayload(const char *a1, const char *a2, const void *a3, unsigned int a4, const void *a5, unsigned int a6, _QWORD *a7, unsigned int *a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t **v12;
  uint64_t v18;
  unsigned int v19;
  unsigned int EncodedBuffer;

  v8 = 0;
  v9 = 101;
  if (!a1 || !a2)
  {
    v12 = 0;
    goto LABEL_16;
  }
  v12 = 0;
  if (a3)
  {
    if (strlen(a1) != 4)
    {
      v8 = 0;
      v12 = 0;
      goto LABEL_16;
    }
    v8 = (uint64_t *)DEREncoderCreate(0);
    if (v8)
    {
      v12 = (uint64_t **)DEREncoderCreate(0);
      if (v12)
      {
        v18 = DEREncoderAddData(v8, 0, 0x16u, "IM4P", 4u, 0);
        if ((_DWORD)v18
          || (v18 = DEREncoderAddData(v8, 0, 0x16u, a1, 4u, 0), (_DWORD)v18)
          || (v19 = strlen(a2), v18 = DEREncoderAddData(v8, 0, 0x16u, a2, v19, 0), (_DWORD)v18)
          || (v18 = DEREncoderAddDataNoCopy(v8, 0, 4u, a3, a4, 0), (_DWORD)v18)
          || a5 && (v18 = DEREncoderAddDataNoCopy(v8, 0, 4u, a5, a6, 0), (_DWORD)v18)
          || (v18 = DEREncoderAddDataFromEncoderNoCopy((uint64_t)v8, (uint64_t)v12, 0, 0x10u, 1), (_DWORD)v18))
        {
          v9 = v18;
        }
        else
        {
          EncodedBuffer = DEREncoderCreateEncodedBuffer(v12, a7, a8);
          if (EncodedBuffer)
            v9 = EncodedBuffer;
          else
            v9 = 100;
        }
        goto LABEL_16;
      }
    }
    else
    {
      v12 = 0;
    }
    v9 = 2;
  }
LABEL_16:
  DEREncoderDestroy((_QWORD **)v8);
  DEREncoderDestroy(v12);
  return v9;
}

void sub_10010CAE8(void *a1)
{
  void *v1;
  int v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedFailureReason"));
  v2 = 138543362;
  v3 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Failed to submit job: %{public}@", (uint8_t *)&v2, 0xCu);

}

void sub_10010CB7C(void *a1)
{
  _DWORD v1[2];

  v1[0] = 67109120;
  v1[1] = objc_msgSend(a1, "state");
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Job submitted but not running: %d", (uint8_t *)v1, 8u);
}

id objc_msgSend_initWithPlist_domain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlist:domain:");
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedFailureReason");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pid");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_submitAndStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitAndStart:");
}

id objc_msgSend_systemDomain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemDomain");
}
